
CV7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080063d8  080063d8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063d8  080063d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080063e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  2000007c  0800645c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001160  0800645c  00021160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019649  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003363  00000000  00000000  000396ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001820  00000000  00000000  0003ca50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001688  00000000  00000000  0003e270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001035c  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a66  00000000  00000000  0004fc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059438  00000000  00000000  000616ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000baaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ecc  00000000  00000000  000bab70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006228 	.word	0x08006228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08006228 	.word	0x08006228

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000098 	.word	0x20000098
 800024c:	200000ec 	.word	0x200000ec

08000250 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	b087      	sub	sp, #28
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	0008      	movs	r0, r1
 800025a:	607a      	str	r2, [r7, #4]
 800025c:	0019      	movs	r1, r3
 800025e:	260b      	movs	r6, #11
 8000260:	19bb      	adds	r3, r7, r6
 8000262:	1c02      	adds	r2, r0, #0
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	2508      	movs	r5, #8
 8000268:	197b      	adds	r3, r7, r5
 800026a:	1c0a      	adds	r2, r1, #0
 800026c:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	685c      	ldr	r4, [r3, #4]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	6898      	ldr	r0, [r3, #8]
 8000276:	197b      	adds	r3, r7, r5
 8000278:	881d      	ldrh	r5, [r3, #0]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	19bb      	adds	r3, r7, r6
 800027e:	7819      	ldrb	r1, [r3, #0]
 8000280:	002b      	movs	r3, r5
 8000282:	47a0      	blx	r4
 8000284:	0003      	movs	r3, r0
 8000286:	617b      	str	r3, [r7, #20]
  return ret;
 8000288:	697b      	ldr	r3, [r7, #20]
}
 800028a:	0018      	movs	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	b007      	add	sp, #28
 8000290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000292 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8000292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000294:	b087      	sub	sp, #28
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	0008      	movs	r0, r1
 800029c:	607a      	str	r2, [r7, #4]
 800029e:	0019      	movs	r1, r3
 80002a0:	260b      	movs	r6, #11
 80002a2:	19bb      	adds	r3, r7, r6
 80002a4:	1c02      	adds	r2, r0, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	2508      	movs	r5, #8
 80002aa:	197b      	adds	r3, r7, r5
 80002ac:	1c0a      	adds	r2, r1, #0
 80002ae:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681c      	ldr	r4, [r3, #0]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	6898      	ldr	r0, [r3, #8]
 80002b8:	197b      	adds	r3, r7, r5
 80002ba:	881d      	ldrh	r5, [r3, #0]
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	19bb      	adds	r3, r7, r6
 80002c0:	7819      	ldrb	r1, [r3, #0]
 80002c2:	002b      	movs	r3, r5
 80002c4:	47a0      	blx	r4
 80002c6:	0003      	movs	r3, r0
 80002c8:	617b      	str	r3, [r7, #20]
  return ret;
 80002ca:	697b      	ldr	r3, [r7, #20]
}
 80002cc:	0018      	movs	r0, r3
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b007      	add	sp, #28
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	000a      	movs	r2, r1
 80002de:	1cfb      	adds	r3, r7, #3
 80002e0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80002e2:	2310      	movs	r3, #16
 80002e4:	18fa      	adds	r2, r7, r3
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	f7ff ffb0 	bl	8000250 <lis2dw12_read_reg>
 80002f0:	0003      	movs	r3, r0
 80002f2:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d12a      	bne.n	8000350 <lis2dw12_power_mode_set+0x7c>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 80002fa:	1cfb      	adds	r3, r7, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	089b      	lsrs	r3, r3, #2
 8000300:	1c1a      	adds	r2, r3, #0
 8000302:	2303      	movs	r3, #3
 8000304:	4013      	ands	r3, r2
 8000306:	b2da      	uxtb	r2, r3
 8000308:	2410      	movs	r4, #16
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2103      	movs	r1, #3
 800030e:	400a      	ands	r2, r1
 8000310:	0090      	lsls	r0, r2, #2
 8000312:	781a      	ldrb	r2, [r3, #0]
 8000314:	210c      	movs	r1, #12
 8000316:	438a      	bics	r2, r1
 8000318:	1c11      	adds	r1, r2, #0
 800031a:	1c02      	adds	r2, r0, #0
 800031c:	430a      	orrs	r2, r1
 800031e:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8000320:	1cfb      	adds	r3, r7, #3
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	b2da      	uxtb	r2, r3
 800032a:	193b      	adds	r3, r7, r4
 800032c:	2103      	movs	r1, #3
 800032e:	400a      	ands	r2, r1
 8000330:	0010      	movs	r0, r2
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	2103      	movs	r1, #3
 8000336:	438a      	bics	r2, r1
 8000338:	1c11      	adds	r1, r2, #0
 800033a:	1c02      	adds	r2, r0, #0
 800033c:	430a      	orrs	r2, r1
 800033e:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8000340:	193a      	adds	r2, r7, r4
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	2301      	movs	r3, #1
 8000346:	2120      	movs	r1, #32
 8000348:	f7ff ffa3 	bl	8000292 <lis2dw12_write_reg>
 800034c:	0003      	movs	r3, r0
 800034e:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d108      	bne.n	8000368 <lis2dw12_power_mode_set+0x94>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8000356:	230c      	movs	r3, #12
 8000358:	18fa      	adds	r2, r7, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	2301      	movs	r3, #1
 800035e:	2125      	movs	r1, #37	; 0x25
 8000360:	f7ff ff76 	bl	8000250 <lis2dw12_read_reg>
 8000364:	0003      	movs	r3, r0
 8000366:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11a      	bne.n	80003a4 <lis2dw12_power_mode_set+0xd0>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 800036e:	1cfb      	adds	r3, r7, #3
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	091b      	lsrs	r3, r3, #4
 8000374:	1c1a      	adds	r2, r3, #0
 8000376:	2301      	movs	r3, #1
 8000378:	4013      	ands	r3, r2
 800037a:	b2da      	uxtb	r2, r3
 800037c:	240c      	movs	r4, #12
 800037e:	193b      	adds	r3, r7, r4
 8000380:	2101      	movs	r1, #1
 8000382:	400a      	ands	r2, r1
 8000384:	0090      	lsls	r0, r2, #2
 8000386:	781a      	ldrb	r2, [r3, #0]
 8000388:	2104      	movs	r1, #4
 800038a:	438a      	bics	r2, r1
 800038c:	1c11      	adds	r1, r2, #0
 800038e:	1c02      	adds	r2, r0, #0
 8000390:	430a      	orrs	r2, r1
 8000392:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8000394:	193a      	adds	r2, r7, r4
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2301      	movs	r3, #1
 800039a:	2125      	movs	r1, #37	; 0x25
 800039c:	f7ff ff79 	bl	8000292 <lis2dw12_write_reg>
 80003a0:	0003      	movs	r3, r0
 80003a2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80003a4:	697b      	ldr	r3, [r7, #20]
}
 80003a6:	0018      	movs	r0, r3
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b007      	add	sp, #28
 80003ac:	bd90      	pop	{r4, r7, pc}

080003ae <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80003ae:	b590      	push	{r4, r7, lr}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	000a      	movs	r2, r1
 80003b8:	1cfb      	adds	r3, r7, #3
 80003ba:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80003bc:	2310      	movs	r3, #16
 80003be:	18fa      	adds	r2, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	2120      	movs	r1, #32
 80003c6:	f7ff ff43 	bl	8000250 <lis2dw12_read_reg>
 80003ca:	0003      	movs	r3, r0
 80003cc:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d116      	bne.n	8000402 <lis2dw12_data_rate_set+0x54>
    ctrl1.odr = (uint8_t) val;
 80003d4:	1cfb      	adds	r3, r7, #3
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	220f      	movs	r2, #15
 80003da:	4013      	ands	r3, r2
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	2410      	movs	r4, #16
 80003e0:	193b      	adds	r3, r7, r4
 80003e2:	0110      	lsls	r0, r2, #4
 80003e4:	781a      	ldrb	r2, [r3, #0]
 80003e6:	210f      	movs	r1, #15
 80003e8:	400a      	ands	r2, r1
 80003ea:	1c11      	adds	r1, r2, #0
 80003ec:	1c02      	adds	r2, r0, #0
 80003ee:	430a      	orrs	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80003f2:	193a      	adds	r2, r7, r4
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	2301      	movs	r3, #1
 80003f8:	2120      	movs	r1, #32
 80003fa:	f7ff ff4a 	bl	8000292 <lis2dw12_write_reg>
 80003fe:	0003      	movs	r3, r0
 8000400:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d108      	bne.n	800041a <lis2dw12_data_rate_set+0x6c>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8000408:	230c      	movs	r3, #12
 800040a:	18fa      	adds	r2, r7, r3
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	2122      	movs	r1, #34	; 0x22
 8000412:	f7ff ff1d 	bl	8000250 <lis2dw12_read_reg>
 8000416:	0003      	movs	r3, r0
 8000418:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d11a      	bne.n	8000456 <lis2dw12_data_rate_set+0xa8>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8000420:	1cfb      	adds	r3, r7, #3
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	1c1a      	adds	r2, r3, #0
 8000428:	2303      	movs	r3, #3
 800042a:	4013      	ands	r3, r2
 800042c:	b2da      	uxtb	r2, r3
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2103      	movs	r1, #3
 8000434:	400a      	ands	r2, r1
 8000436:	0010      	movs	r0, r2
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	2103      	movs	r1, #3
 800043c:	438a      	bics	r2, r1
 800043e:	1c11      	adds	r1, r2, #0
 8000440:	1c02      	adds	r2, r0, #0
 8000442:	430a      	orrs	r2, r1
 8000444:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8000446:	193a      	adds	r2, r7, r4
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	2301      	movs	r3, #1
 800044c:	2122      	movs	r1, #34	; 0x22
 800044e:	f7ff ff20 	bl	8000292 <lis2dw12_write_reg>
 8000452:	0003      	movs	r3, r0
 8000454:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000456:	697b      	ldr	r3, [r7, #20]
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b007      	add	sp, #28
 800045e:	bd90      	pop	{r4, r7, pc}

08000460 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	000a      	movs	r2, r1
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 800046e:	2308      	movs	r3, #8
 8000470:	18fa      	adds	r2, r7, r3
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	2301      	movs	r3, #1
 8000476:	2121      	movs	r1, #33	; 0x21
 8000478:	f7ff feea 	bl	8000250 <lis2dw12_read_reg>
 800047c:	0003      	movs	r3, r0
 800047e:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d118      	bne.n	80004b8 <lis2dw12_block_data_update_set+0x58>
    reg.bdu = val;
 8000486:	1cfb      	adds	r3, r7, #3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	4013      	ands	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	2408      	movs	r4, #8
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2101      	movs	r1, #1
 8000496:	400a      	ands	r2, r1
 8000498:	00d0      	lsls	r0, r2, #3
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	2108      	movs	r1, #8
 800049e:	438a      	bics	r2, r1
 80004a0:	1c11      	adds	r1, r2, #0
 80004a2:	1c02      	adds	r2, r0, #0
 80004a4:	430a      	orrs	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	2301      	movs	r3, #1
 80004ae:	2121      	movs	r1, #33	; 0x21
 80004b0:	f7ff feef 	bl	8000292 <lis2dw12_write_reg>
 80004b4:	0003      	movs	r3, r0
 80004b6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80004b8:	68fb      	ldr	r3, [r7, #12]
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	b005      	add	sp, #20
 80004c0:	bd90      	pop	{r4, r7, pc}

080004c2 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80004c2:	b590      	push	{r4, r7, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	000a      	movs	r2, r1
 80004cc:	1cfb      	adds	r3, r7, #3
 80004ce:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 80004d0:	2308      	movs	r3, #8
 80004d2:	18fa      	adds	r2, r7, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	2125      	movs	r1, #37	; 0x25
 80004da:	f7ff feb9 	bl	8000250 <lis2dw12_read_reg>
 80004de:	0003      	movs	r3, r0
 80004e0:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d118      	bne.n	800051a <lis2dw12_full_scale_set+0x58>
    reg.fs = (uint8_t) val;
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2203      	movs	r2, #3
 80004ee:	4013      	ands	r3, r2
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	2408      	movs	r4, #8
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2103      	movs	r1, #3
 80004f8:	400a      	ands	r2, r1
 80004fa:	0110      	lsls	r0, r2, #4
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2130      	movs	r1, #48	; 0x30
 8000500:	438a      	bics	r2, r1
 8000502:	1c11      	adds	r1, r2, #0
 8000504:	1c02      	adds	r2, r0, #0
 8000506:	430a      	orrs	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 800050a:	193a      	adds	r2, r7, r4
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	2125      	movs	r1, #37	; 0x25
 8000512:	f7ff febe 	bl	8000292 <lis2dw12_write_reg>
 8000516:	0003      	movs	r3, r0
 8000518:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	b005      	add	sp, #20
 8000522:	bd90      	pop	{r4, r7, pc}

08000524 <lis2dw12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	2306      	movs	r3, #6
 8000534:	2128      	movs	r1, #40	; 0x28
 8000536:	f7ff fe8b 	bl	8000250 <lis2dw12_read_reg>
 800053a:	0003      	movs	r3, r0
 800053c:	60fb      	str	r3, [r7, #12]
  return ret;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b004      	add	sp, #16
 8000546:	bd80      	pop	{r7, pc}

08000548 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	210f      	movs	r1, #15
 800055a:	f7ff fe79 	bl	8000250 <lis2dw12_read_reg>
 800055e:	0003      	movs	r3, r0
 8000560:	60fb      	str	r3, [r7, #12]
  return ret;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	b004      	add	sp, #16
 800056a:	bd80      	pop	{r7, pc}

0800056c <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	000a      	movs	r2, r1
 8000576:	1cfb      	adds	r3, r7, #3
 8000578:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 800057a:	2308      	movs	r3, #8
 800057c:	18fa      	adds	r2, r7, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	2301      	movs	r3, #1
 8000582:	212e      	movs	r1, #46	; 0x2e
 8000584:	f7ff fe64 	bl	8000250 <lis2dw12_read_reg>
 8000588:	0003      	movs	r3, r0
 800058a:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d116      	bne.n	80005c0 <lis2dw12_fifo_mode_set+0x54>
    reg.fmode = (uint8_t) val;
 8000592:	1cfb      	adds	r3, r7, #3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2207      	movs	r2, #7
 8000598:	4013      	ands	r3, r2
 800059a:	b2da      	uxtb	r2, r3
 800059c:	2408      	movs	r4, #8
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	0150      	lsls	r0, r2, #5
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	211f      	movs	r1, #31
 80005a6:	400a      	ands	r2, r1
 80005a8:	1c11      	adds	r1, r2, #0
 80005aa:	1c02      	adds	r2, r0, #0
 80005ac:	430a      	orrs	r2, r1
 80005ae:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80005b0:	193a      	adds	r2, r7, r4
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	212e      	movs	r1, #46	; 0x2e
 80005b8:	f7ff fe6b 	bl	8000292 <lis2dw12_write_reg>
 80005bc:	0003      	movs	r3, r0
 80005be:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80005c0:	68fb      	ldr	r3, [r7, #12]
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b005      	add	sp, #20
 80005c8:	bd90      	pop	{r4, r7, pc}

080005ca <lis2dw12_fifo_data_level_get>:
  * @param  val      change the values of diff in reg FIFO_SAMPLES
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80005ca:	b590      	push	{r4, r7, lr}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
  lis2dw12_fifo_samples_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_SAMPLES,(uint8_t*) &reg, 1);
 80005d4:	2408      	movs	r4, #8
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	212f      	movs	r1, #47	; 0x2f
 80005de:	f7ff fe37 	bl	8000250 <lis2dw12_read_reg>
 80005e2:	0003      	movs	r3, r0
 80005e4:	60fb      	str	r3, [r7, #12]
  *val = reg.diff;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	069b      	lsls	r3, r3, #26
 80005ec:	0e9b      	lsrs	r3, r3, #26
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	001a      	movs	r2, r3
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]

  return ret;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b005      	add	sp, #20
 80005fe:	bd90      	pop	{r4, r7, pc}

08000600 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char const *buf, int n)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29a      	uxth	r2, r3
 8000610:	2301      	movs	r3, #1
 8000612:	425b      	negs	r3, r3
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <_write+0x28>)
 8000618:	f002 fce8 	bl	8002fec <HAL_UART_Transmit>
	return n;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20001098 	.word	0x20001098

0800062c <platform_write>:



static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af04      	add	r7, sp, #16
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	0008      	movs	r0, r1
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	0019      	movs	r1, r3
 800063a:	240b      	movs	r4, #11
 800063c:	193b      	adds	r3, r7, r4
 800063e:	1c02      	adds	r2, r0, #0
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	2508      	movs	r5, #8
 8000644:	197b      	adds	r3, r7, r5
 8000646:	1c0a      	adds	r2, r1, #0
 8000648:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Write(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800064a:	193b      	adds	r3, r7, r4
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b29a      	uxth	r2, r3
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	23fa      	movs	r3, #250	; 0xfa
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	197b      	adds	r3, r7, r5
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2301      	movs	r3, #1
 8000664:	2133      	movs	r1, #51	; 0x33
 8000666:	f000 ffbd 	bl	80015e4 <HAL_I2C_Mem_Write>
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	b004      	add	sp, #16
 8000672:	bdb0      	pop	{r4, r5, r7, pc}

08000674 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000674:	b5b0      	push	{r4, r5, r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af04      	add	r7, sp, #16
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	0008      	movs	r0, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	0019      	movs	r1, r3
 8000682:	240b      	movs	r4, #11
 8000684:	193b      	adds	r3, r7, r4
 8000686:	1c02      	adds	r2, r0, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	2508      	movs	r5, #8
 800068c:	197b      	adds	r3, r7, r5
 800068e:	1c0a      	adds	r2, r1, #0
 8000690:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Mem_Read(handle, LIS2DW12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8000692:	193b      	adds	r3, r7, r4
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b29a      	uxth	r2, r3
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	23fa      	movs	r3, #250	; 0xfa
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	197b      	adds	r3, r7, r5
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	2133      	movs	r1, #51	; 0x33
 80006ae:	f001 f8c7 	bl	8001840 <HAL_I2C_Mem_Read>
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	0018      	movs	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b004      	add	sp, #16
 80006ba:	bdb0      	pop	{r4, r5, r7, pc}

080006bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b09a      	sub	sp, #104	; 0x68
 80006c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */


	lis2dw12_full_scale_set(&lis2dw12, LIS2DW12_2g);
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <main+0xdc>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff fefb 	bl	80004c2 <lis2dw12_full_scale_set>
	lis2dw12_power_mode_set(&lis2dw12, LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2);
 80006cc:	4b32      	ldr	r3, [pc, #200]	; (8000798 <main+0xdc>)
 80006ce:	2111      	movs	r1, #17
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff fdff 	bl	80002d4 <lis2dw12_power_mode_set>
	lis2dw12_block_data_update_set(&lis2dw12, PROPERTY_ENABLE);
 80006d6:	4b30      	ldr	r3, [pc, #192]	; (8000798 <main+0xdc>)
 80006d8:	2101      	movs	r1, #1
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fec0 	bl	8000460 <lis2dw12_block_data_update_set>
	lis2dw12_fifo_mode_set(&lis2dw12, LIS2DW12_STREAM_MODE); // enable continuous FIFO
 80006e0:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <main+0xdc>)
 80006e2:	2106      	movs	r1, #6
 80006e4:	0018      	movs	r0, r3
 80006e6:	f7ff ff41 	bl	800056c <lis2dw12_fifo_mode_set>
	lis2dw12_data_rate_set(&lis2dw12, LIS2DW12_XL_ODR_25Hz); // enable part from power-down
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <main+0xdc>)
 80006ec:	2103      	movs	r1, #3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff fe5d 	bl	80003ae <lis2dw12_data_rate_set>


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f4:	f000 fc74 	bl	8000fe0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f8:	f000 f862 	bl	80007c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006fc:	f000 f932 	bl	8000964 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000700:	f000 f900 	bl	8000904 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000704:	f000 f8be 	bl	8000884 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("Hello\n");
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <main+0xe0>)
 800070a:	0018      	movs	r0, r3
 800070c:	f004 fe84 	bl	8005418 <puts>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xVisualQueue */
	osMessageQDef(xVisualQueue, 16, int16_t);
 8000710:	2158      	movs	r1, #88	; 0x58
 8000712:	187b      	adds	r3, r7, r1
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <main+0xe4>)
 8000716:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000718:	c331      	stmia	r3!, {r0, r4, r5}
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	601a      	str	r2, [r3, #0]
	xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f003 f88a 	bl	800383c <osMessageCreate>
 8000728:	0002      	movs	r2, r0
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <main+0xe8>)
 800072c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072e:	213c      	movs	r1, #60	; 0x3c
 8000730:	187b      	adds	r3, r7, r1
 8000732:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <main+0xec>)
 8000734:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000736:	c331      	stmia	r3!, {r0, r4, r5}
 8000738:	ca31      	ldmia	r2!, {r0, r4, r5}
 800073a:	c331      	stmia	r3!, {r0, r4, r5}
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	601a      	str	r2, [r3, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2100      	movs	r1, #0
 8000744:	0018      	movs	r0, r3
 8000746:	f003 f818 	bl	800377a <osThreadCreate>
 800074a:	0002      	movs	r2, r0
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <main+0xf0>)
 800074e:	601a      	str	r2, [r3, #0]

	/* definition and creation of VisualTask */
	osThreadDef(VisualTask, StartVisualTask, osPriorityNormal, 0, 128);
 8000750:	2120      	movs	r1, #32
 8000752:	187b      	adds	r3, r7, r1
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <main+0xf4>)
 8000756:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000758:	c331      	stmia	r3!, {r0, r4, r5}
 800075a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800075c:	c331      	stmia	r3!, {r0, r4, r5}
 800075e:	6812      	ldr	r2, [r2, #0]
 8000760:	601a      	str	r2, [r3, #0]
	VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f003 f807 	bl	800377a <osThreadCreate>
 800076c:	0002      	movs	r2, r0
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <main+0xf8>)
 8000770:	601a      	str	r2, [r3, #0]

	/* definition and creation of AcceleroTask */
	osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityNormal, 0, 128);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <main+0xfc>)
 8000776:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000778:	c313      	stmia	r3!, {r0, r1, r4}
 800077a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800077c:	c313      	stmia	r3!, {r0, r1, r4}
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	601a      	str	r2, [r3, #0]
	AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2100      	movs	r1, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fff7 	bl	800377a <osThreadCreate>
 800078c:	0002      	movs	r2, r0
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <main+0x100>)
 8000790:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000792:	f002 ffea 	bl	800376a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000796:	e7fe      	b.n	8000796 <main+0xda>
 8000798:	20000000 	.word	0x20000000
 800079c:	08006240 	.word	0x08006240
 80007a0:	08006248 	.word	0x08006248
 80007a4:	20001094 	.word	0x20001094
 80007a8:	08006264 	.word	0x08006264
 80007ac:	2000103c 	.word	0x2000103c
 80007b0:	0800628c 	.word	0x0800628c
 80007b4:	20001090 	.word	0x20001090
 80007b8:	080062b8 	.word	0x080062b8
 80007bc:	2000108c 	.word	0x2000108c

080007c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b095      	sub	sp, #84	; 0x54
 80007c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	2420      	movs	r4, #32
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2330      	movs	r3, #48	; 0x30
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f004 fd9e 	bl	8005312 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d6:	2310      	movs	r3, #16
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	0018      	movs	r0, r3
 80007dc:	2310      	movs	r3, #16
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f004 fd96 	bl	8005312 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e6:	003b      	movs	r3, r7
 80007e8:	0018      	movs	r0, r3
 80007ea:	2310      	movs	r3, #16
 80007ec:	001a      	movs	r2, r3
 80007ee:	2100      	movs	r1, #0
 80007f0:	f004 fd8f 	bl	8005312 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	0021      	movs	r1, r4
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2210      	movs	r2, #16
 8000806:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	22a0      	movs	r2, #160	; 0xa0
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	187b      	adds	r3, r7, r1
 8000824:	0018      	movs	r0, r3
 8000826:	f001 fc15 	bl	8002054 <HAL_RCC_OscConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800082e:	f000 f9f5 	bl	8000c1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	2110      	movs	r1, #16
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2207      	movs	r2, #7
 8000838:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2101      	movs	r1, #1
 8000850:	0018      	movs	r0, r3
 8000852:	f001 ff1b 	bl	800268c <HAL_RCC_ClockConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800085a:	f000 f9df 	bl	8000c1c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800085e:	003b      	movs	r3, r7
 8000860:	2220      	movs	r2, #32
 8000862:	601a      	str	r2, [r3, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000864:	003b      	movs	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086a:	003b      	movs	r3, r7
 800086c:	0018      	movs	r0, r3
 800086e:	f002 f889 	bl	8002984 <HAL_RCCEx_PeriphCLKConfig>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xba>
	{
		Error_Handler();
 8000876:	f000 f9d1 	bl	8000c1c <Error_Handler>
	}
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b015      	add	sp, #84	; 0x54
 8000880:	bd90      	pop	{r4, r7, pc}
	...

08000884 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_I2C1_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_I2C1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_I2C1_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <MX_I2C1_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_I2C1_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fdf9 	bl	80014b8 <HAL_I2C_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80008ca:	f000 f9a7 	bl	8000c1c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fb26 	bl	8001f24 <HAL_I2CEx_ConfigAnalogFilter>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80008dc:	f000 f99e 	bl	8000c1c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fb69 	bl	8001fbc <HAL_I2CEx_ConfigDigitalFilter>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80008ee:	f000 f995 	bl	8000c1c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20001040 	.word	0x20001040
 80008fc:	40005400 	.word	0x40005400
 8000900:	2000090e 	.word	0x2000090e

08000904 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART2_UART_Init+0x58>)
 800090a:	4a15      	ldr	r2, [pc, #84]	; (8000960 <MX_USART2_UART_Init+0x5c>)
 800090c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000910:	2296      	movs	r2, #150	; 0x96
 8000912:	0212      	lsls	r2, r2, #8
 8000914:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_USART2_UART_Init+0x58>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <MX_USART2_UART_Init+0x58>)
 8000948:	0018      	movs	r0, r3
 800094a:	f002 fafb 	bl	8002f44 <HAL_UART_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000952:	f000 f963 	bl	8000c1c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20001098 	.word	0x20001098
 8000960:	40004400 	.word	0x40004400

08000964 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08b      	sub	sp, #44	; 0x2c
 8000968:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	2414      	movs	r4, #20
 800096c:	193b      	adds	r3, r7, r4
 800096e:	0018      	movs	r0, r3
 8000970:	2314      	movs	r3, #20
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f004 fccc 	bl	8005312 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <MX_GPIO_Init+0x114>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b3e      	ldr	r3, [pc, #248]	; (8000a78 <MX_GPIO_Init+0x114>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0309      	lsls	r1, r1, #12
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <MX_GPIO_Init+0x114>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	031b      	lsls	r3, r3, #12
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <MX_GPIO_Init+0x114>)
 8000998:	695a      	ldr	r2, [r3, #20]
 800099a:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <MX_GPIO_Init+0x114>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	03c9      	lsls	r1, r1, #15
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009a6:	695a      	ldr	r2, [r3, #20]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	03db      	lsls	r3, r3, #15
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0289      	lsls	r1, r1, #10
 80009bc:	430a      	orrs	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	029b      	lsls	r3, r3, #10
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	02c9      	lsls	r1, r1, #11
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x114>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	02db      	lsls	r3, r3, #11
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2390      	movs	r3, #144	; 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	2130      	movs	r1, #48	; 0x30
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fd42 	bl	800147c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <MX_GPIO_Init+0x118>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	2101      	movs	r1, #1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fd3c 	bl	800147c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0192      	lsls	r2, r2, #6
 8000a0a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_GPIO_Init+0x11c>)
 8000a10:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	193b      	adds	r3, r7, r4
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <MX_GPIO_Init+0x120>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fbbc 	bl	800119c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	193a      	adds	r2, r7, r4
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fba9 	bl	800119c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED2_Pin */
	GPIO_InitStruct.Pin = LED2_Pin;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2201      	movs	r2, #1
 8000a50:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <MX_GPIO_Init+0x118>)
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0010      	movs	r0, r2
 8000a6c:	f000 fb96 	bl	800119c <HAL_GPIO_Init>

}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b00b      	add	sp, #44	; 0x2c
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	10210000 	.word	0x10210000
 8000a84:	48000800 	.word	0x48000800

08000a88 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f002 febf 	bl	8003814 <osDelay>
 8000a96:	e7fb      	b.n	8000a90 <StartDefaultTask+0x8>

08000a98 <StartVisualTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY))
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <StartVisualTask+0x74>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425a      	negs	r2, r3
 8000aa8:	230e      	movs	r3, #14
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	0019      	movs	r1, r3
 8000aae:	f003 fc2a 	bl	8004306 <xQueueReceive>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d026      	beq.n	8000b04 <StartVisualTask+0x6c>
		{ // LED2 -> msg >200
			if (msg > 200)
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	5e9b      	ldrsh	r3, [r3, r2]
 8000abe:	2bc8      	cmp	r3, #200	; 0xc8
 8000ac0:	dd0d      	ble.n	8000ade <StartVisualTask+0x46>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <StartVisualTask+0x78>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f000 fcd7 	bl	800147c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port	, LED1_Pin, 0);
 8000ace:	2390      	movs	r3, #144	; 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fcd0 	bl	800147c <HAL_GPIO_WritePin>
 8000adc:	e012      	b.n	8000b04 <StartVisualTask+0x6c>
			}
			//LED1 -> msg<-200
			else if (msg < -200)
 8000ade:	230e      	movs	r3, #14
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ae6:	33c8      	adds	r3, #200	; 0xc8
 8000ae8:	da0c      	bge.n	8000b04 <StartVisualTask+0x6c>
			{
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <StartVisualTask+0x78>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fcc3 	bl	800147c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000af6:	2390      	movs	r3, #144	; 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2201      	movs	r2, #1
 8000afc:	2110      	movs	r1, #16
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fcbc 	bl	800147c <HAL_GPIO_WritePin>
			}
		}

		osDelay(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f002 fe85 	bl	8003814 <osDelay>
		if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY))
 8000b0a:	e7c9      	b.n	8000aa0 <StartVisualTask+0x8>
 8000b0c:	20001094 	.word	0x20001094
 8000b10:	48000400 	.word	0x48000400

08000b14 <StartAcceleroTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAcceleroTask */
	/* Infinite loop */

	uint8_t whoamI = 0;
 8000b1c:	2115      	movs	r1, #21
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get(&lis2dw12, &whoamI);
 8000b24:	000c      	movs	r4, r1
 8000b26:	187a      	adds	r2, r7, r1
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <StartAcceleroTask+0xcc>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fd0b 	bl	8000548 <lis2dw12_device_id_get>
	printf("LIS2DW12_ID %s\n", (whoamI == LIS2DW12_ID) ? "OK" : "FAIL");
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b44      	cmp	r3, #68	; 0x44
 8000b3a:	d101      	bne.n	8000b40 <StartAcceleroTask+0x2c>
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <StartAcceleroTask+0xd0>)
 8000b3e:	e000      	b.n	8000b42 <StartAcceleroTask+0x2e>
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <StartAcceleroTask+0xd4>)
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <StartAcceleroTask+0xd8>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f004 fbec 	bl	8005324 <iprintf>
	for(;;)
	{

		uint8_t samples,i;
		axis3bit16_t data_raw_acceleration;
		lis2dw12_fifo_data_level_get(&lis2dw12, &samples);
 8000b4c:	2314      	movs	r3, #20
 8000b4e:	18fa      	adds	r2, r7, r3
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <StartAcceleroTask+0xcc>)
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fd38 	bl	80005ca <lis2dw12_fifo_data_level_get>
		for (uint8_t i = 0; i < samples; i++)
 8000b5a:	2316      	movs	r3, #22
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e00c      	b.n	8000b7e <StartAcceleroTask+0x6a>
		{
		// Read acceleration data
		lis2dw12_acceleration_raw_get(&lis2dw12, data_raw_acceleration.u8bit);
 8000b64:	230c      	movs	r3, #12
 8000b66:	18fa      	adds	r2, r7, r3
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <StartAcceleroTask+0xcc>)
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff fcd9 	bl	8000524 <lis2dw12_acceleration_raw_get>
		for (uint8_t i = 0; i < samples; i++)
 8000b72:	2116      	movs	r1, #22
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	3201      	adds	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	2314      	movs	r3, #20
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2216      	movs	r2, #22
 8000b86:	18ba      	adds	r2, r7, r2
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3ea      	bcc.n	8000b64 <StartAcceleroTask+0x50>
		}
		osDelay(50);// delay 50ms
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f002 fe40 	bl	8003814 <osDelay>
		i++;
 8000b94:	2417      	movs	r4, #23
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		xQueueSend(xVisualQueueHandle,&data_raw_acceleration.i16bit[0],0);
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <StartAcceleroTask+0xdc>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	18f9      	adds	r1, r7, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	2200      	movs	r2, #0
 8000bac:	f003 fae7 	bl	800417e <xQueueGenericSend>
		if (i==20) // co 1s printf
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b14      	cmp	r3, #20
 8000bb6:	d1c9      	bne.n	8000b4c <StartAcceleroTask+0x38>
		{
			printf("X=%d Y=%d Z=%d\n", data_raw_acceleration.i16bit[0],
 8000bb8:	200c      	movs	r0, #12
 8000bba:	183b      	adds	r3, r7, r0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8000bc0:	0019      	movs	r1, r3
				data_raw_acceleration.i16bit[1], data_raw_acceleration.i16bit[2]);
 8000bc2:	183b      	adds	r3, r7, r0
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	5e9b      	ldrsh	r3, [r3, r2]
			printf("X=%d Y=%d Z=%d\n", data_raw_acceleration.i16bit[0],
 8000bc8:	001a      	movs	r2, r3
				data_raw_acceleration.i16bit[1], data_raw_acceleration.i16bit[2]);
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	2004      	movs	r0, #4
 8000bce:	5e1b      	ldrsh	r3, [r3, r0]
			printf("X=%d Y=%d Z=%d\n", data_raw_acceleration.i16bit[0],
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <StartAcceleroTask+0xe0>)
 8000bd2:	f004 fba7 	bl	8005324 <iprintf>
			i=0;
 8000bd6:	2317      	movs	r3, #23
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	{
 8000bde:	e7b5      	b.n	8000b4c <StartAcceleroTask+0x38>
 8000be0:	20000000 	.word	0x20000000
 8000be4:	080062d4 	.word	0x080062d4
 8000be8:	080062d8 	.word	0x080062d8
 8000bec:	080062e0 	.word	0x080062e0
 8000bf0:	20001094 	.word	0x20001094
 8000bf4:	080062f0 	.word	0x080062f0

08000bf8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c0a:	f000 f9fd 	bl	8001008 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x50>)
 8000c30:	699a      	ldr	r2, [r3, #24]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_MspInit+0x50>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	619a      	str	r2, [r3, #24]
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x50>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x50>)
 8000c48:	69da      	ldr	r2, [r3, #28]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x50>)
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	0549      	lsls	r1, r1, #21
 8000c50:	430a      	orrs	r2, r1
 8000c52:	61da      	str	r2, [r3, #28]
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x50>)
 8000c56:	69da      	ldr	r2, [r3, #28]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	055b      	lsls	r3, r3, #21
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000c62:	2302      	movs	r3, #2
 8000c64:	425b      	negs	r3, r3
 8000c66:	2200      	movs	r2, #0
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fa70 	bl	8001150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2314      	movs	r3, #20
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	0018      	movs	r0, r3
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f004 fb3f 	bl	8005312 <memset>
  if(hi2c->Instance==I2C1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_I2C_MspInit+0x90>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d132      	bne.n	8000d04 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	02c9      	lsls	r1, r1, #11
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	02db      	lsls	r3, r3, #11
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cba:	2114      	movs	r1, #20
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	22c0      	movs	r2, #192	; 0xc0
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2212      	movs	r2, #18
 8000cc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2201      	movs	r2, #1
 8000cce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2201      	movs	r2, #1
 8000cda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_I2C_MspInit+0x98>)
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f000 fa5a 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000cea:	69da      	ldr	r2, [r3, #28]
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0389      	lsls	r1, r1, #14
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	61da      	str	r2, [r3, #28]
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_I2C_MspInit+0x94>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	039b      	lsls	r3, r3, #14
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b00a      	add	sp, #40	; 0x28
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2314      	movs	r3, #20
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f004 faf1 	bl	8005312 <memset>
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d132      	bne.n	8000da0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0289      	lsls	r1, r1, #10
 8000d44:	430a      	orrs	r2, r1
 8000d46:	61da      	str	r2, [r3, #28]
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	029b      	lsls	r3, r3, #10
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0289      	lsls	r1, r1, #10
 8000d60:	430a      	orrs	r2, r1
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x94>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d72:	2114      	movs	r1, #20
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2201      	movs	r2, #1
 8000d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	187a      	adds	r2, r7, r1
 8000d94:	2390      	movs	r3, #144	; 0x90
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f9fe 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da0:	46c0      	nop			; (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b00a      	add	sp, #40	; 0x28
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	200d      	movs	r0, #13
 8000dc8:	f000 f9c2 	bl	8001150 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 8000dcc:	200d      	movs	r0, #13
 8000dce:	f000 f9d4 	bl	800117a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_InitTick+0xa8>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <HAL_InitTick+0xa8>)
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	0109      	lsls	r1, r1, #4
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_InitTick+0xa8>)
 8000de2:	699a      	ldr	r2, [r3, #24]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dee:	230c      	movs	r3, #12
 8000df0:	18fa      	adds	r2, r7, r3
 8000df2:	2310      	movs	r3, #16
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 fd99 	bl	8002930 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dfe:	f001 fd81 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8000e02:	0003      	movs	r3, r0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	4914      	ldr	r1, [pc, #80]	; (8000e5c <HAL_InitTick+0xac>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff f97c 	bl	8000108 <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	3b01      	subs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e18:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <HAL_InitTick+0xb4>)
 8000e1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <HAL_InitTick+0xb8>)
 8000e20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e24:	6a3a      	ldr	r2, [r7, #32]
 8000e26:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f001 fe72 	bl	8002b20 <HAL_TIM_Base_Init>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d105      	bne.n	8000e4c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_InitTick+0xb0>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f001 fea0 	bl	8002b88 <HAL_TIM_Base_Start_IT>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	e000      	b.n	8000e4e <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b00a      	add	sp, #40	; 0x28
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	000f4240 	.word	0x000f4240
 8000e60:	20001118 	.word	0x20001118
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	000003e7 	.word	0x000003e7

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f001 fea2 	bl	8002bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20001118 	.word	0x20001118

08000e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	e00a      	b.n	8000ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea6:	e000      	b.n	8000eaa <_read+0x16>
 8000ea8:	bf00      	nop
 8000eaa:	0001      	movs	r1, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	b2ca      	uxtb	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf0      	blt.n	8000ea6 <_read+0x12>
	}

return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b006      	add	sp, #24
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	425b      	negs	r3, r3
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b002      	add	sp, #8
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	0192      	lsls	r2, r2, #6
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b004      	add	sp, #16
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x16>
		heap_end = &end;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <_sbrk+0x50>)
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <_sbrk+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_sbrk+0x50>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <_sbrk+0x50>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	18d3      	adds	r3, r2, r3
 8000f4c:	466a      	mov	r2, sp
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d907      	bls.n	8000f62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f52:	f004 f9ab 	bl	80052ac <__errno>
 8000f56:	0003      	movs	r3, r0
 8000f58:	220c      	movs	r2, #12
 8000f5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	425b      	negs	r3, r3
 8000f60:	e006      	b.n	8000f70 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <_sbrk+0x50>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	18d2      	adds	r2, r2, r3
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <_sbrk+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b004      	add	sp, #16
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200002ec 	.word	0x200002ec
 8000f7c:	20001160 	.word	0x20001160

08000f80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fb6:	f7ff ffe3 	bl	8000f80 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fba:	f004 f97d 	bl	80052b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fb7d 	bl	80006bc <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fd0:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 8000fd4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fd8:	20001160 	.word	0x20001160

08000fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_Init+0x24>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_Init+0x24>)
 8000fea:	2110      	movs	r1, #16
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fedd 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff6:	f7ff fe17 	bl	8000c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000010 	.word	0x20000010
 8001028:	20001158 	.word	0x20001158

0800102c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20001158 	.word	0x20001158

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	0002      	movs	r2, r0
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b7f      	cmp	r3, #127	; 0x7f
 8001052:	d809      	bhi.n	8001068 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	001a      	movs	r2, r3
 800105a:	231f      	movs	r3, #31
 800105c:	401a      	ands	r2, r3
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_EnableIRQ+0x30>)
 8001060:	2101      	movs	r1, #1
 8001062:	4091      	lsls	r1, r2
 8001064:	000a      	movs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
  }
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	0002      	movs	r2, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b7f      	cmp	r3, #127	; 0x7f
 8001088:	d828      	bhi.n	80010dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108a:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <__NVIC_SetPriority+0xd4>)
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b25b      	sxtb	r3, r3
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	33c0      	adds	r3, #192	; 0xc0
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	589b      	ldr	r3, [r3, r2]
 800109a:	1dfa      	adds	r2, r7, #7
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	0011      	movs	r1, r2
 80010a0:	2203      	movs	r2, #3
 80010a2:	400a      	ands	r2, r1
 80010a4:	00d2      	lsls	r2, r2, #3
 80010a6:	21ff      	movs	r1, #255	; 0xff
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	43d2      	mvns	r2, r2
 80010ae:	401a      	ands	r2, r3
 80010b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	401a      	ands	r2, r3
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	0018      	movs	r0, r3
 80010c0:	2303      	movs	r3, #3
 80010c2:	4003      	ands	r3, r0
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c8:	481f      	ldr	r0, [pc, #124]	; (8001148 <__NVIC_SetPriority+0xd4>)
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	430a      	orrs	r2, r1
 80010d4:	33c0      	adds	r3, #192	; 0xc0
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010da:	e031      	b.n	8001140 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <__NVIC_SetPriority+0xd8>)
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	0019      	movs	r1, r3
 80010e4:	230f      	movs	r3, #15
 80010e6:	400b      	ands	r3, r1
 80010e8:	3b08      	subs	r3, #8
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3306      	adds	r3, #6
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1dfa      	adds	r2, r7, #7
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	0011      	movs	r1, r2
 80010fc:	2203      	movs	r2, #3
 80010fe:	400a      	ands	r2, r1
 8001100:	00d2      	lsls	r2, r2, #3
 8001102:	21ff      	movs	r1, #255	; 0xff
 8001104:	4091      	lsls	r1, r2
 8001106:	000a      	movs	r2, r1
 8001108:	43d2      	mvns	r2, r2
 800110a:	401a      	ands	r2, r3
 800110c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	22ff      	movs	r2, #255	; 0xff
 8001114:	401a      	ands	r2, r3
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0018      	movs	r0, r3
 800111c:	2303      	movs	r3, #3
 800111e:	4003      	ands	r3, r0
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <__NVIC_SetPriority+0xd8>)
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	001c      	movs	r4, r3
 800112c:	230f      	movs	r3, #15
 800112e:	4023      	ands	r3, r4
 8001130:	3b08      	subs	r3, #8
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	430a      	orrs	r2, r1
 8001136:	3306      	adds	r3, #6
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	18c3      	adds	r3, r0, r3
 800113c:	3304      	adds	r3, #4
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b003      	add	sp, #12
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	210f      	movs	r1, #15
 800115c:	187b      	adds	r3, r7, r1
 800115e:	1c02      	adds	r2, r0, #0
 8001160:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	187b      	adds	r3, r7, r1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ff81 	bl	8001074 <__NVIC_SetPriority>
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	0002      	movs	r2, r0
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff ff57 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e14f      	b.n	800144c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	4091      	lsls	r1, r2
 80011b6:	000a      	movs	r2, r1
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d100      	bne.n	80011c4 <HAL_GPIO_Init+0x28>
 80011c2:	e140      	b.n	8001446 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x38>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	58d3      	ldr	r3, [r2, r3]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2207      	movs	r2, #7
 80011e6:	4013      	ands	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	409a      	lsls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	43da      	mvns	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2107      	movs	r1, #7
 8001200:	400b      	ands	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	6939      	ldr	r1, [r7, #16]
 800121a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d00b      	beq.n	8001270 <HAL_GPIO_Init+0xd4>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001264:	2b11      	cmp	r3, #17
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	2201      	movs	r2, #1
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	055b      	lsls	r3, r3, #21
 800130a:	4013      	ands	r3, r2
 800130c:	d100      	bne.n	8001310 <HAL_GPIO_Init+0x174>
 800130e:	e09a      	b.n	8001446 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_GPIO_Init+0x2c8>)
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x2c8>)
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_GPIO_Init+0x2c8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	2201      	movs	r2, #1
 8001322:	4013      	ands	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001328:	4a4f      	ldr	r2, [pc, #316]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	589b      	ldr	r3, [r3, r2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	409a      	lsls	r2, r3
 8001342:	0013      	movs	r3, r2
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	2390      	movs	r3, #144	; 0x90
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	429a      	cmp	r2, r3
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1e2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a44      	ldr	r2, [pc, #272]	; (800146c <HAL_GPIO_Init+0x2d0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1de>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a43      	ldr	r2, [pc, #268]	; (8001470 <HAL_GPIO_Init+0x2d4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1da>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_GPIO_Init+0x2d8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1d6>
 800136e:	2303      	movs	r3, #3
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x1e4>
 8001372:	2305      	movs	r3, #5
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x1e4>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x1e4>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x1e4>
 800137e:	2300      	movs	r3, #0
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	2103      	movs	r1, #3
 8001384:	400a      	ands	r2, r1
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x2cc>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43da      	mvns	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	4013      	ands	r3, r2
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43da      	mvns	r2, r3
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	035b      	lsls	r3, r3, #13
 800140a:	4013      	ands	r3, r2
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_GPIO_Init+0x2dc>)
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	40da      	lsrs	r2, r3
 8001454:	1e13      	subs	r3, r2, #0
 8001456:	d000      	beq.n	800145a <HAL_GPIO_Init+0x2be>
 8001458:	e6a8      	b.n	80011ac <HAL_GPIO_Init+0x10>
  } 
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b006      	add	sp, #24
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	48000400 	.word	0x48000400
 8001470:	48000800 	.word	0x48000800
 8001474:	48000c00 	.word	0x48000c00
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	0008      	movs	r0, r1
 8001486:	0011      	movs	r1, r2
 8001488:	1cbb      	adds	r3, r7, #2
 800148a:	1c02      	adds	r2, r0, #0
 800148c:	801a      	strh	r2, [r3, #0]
 800148e:	1c7b      	adds	r3, r7, #1
 8001490:	1c0a      	adds	r2, r1, #0
 8001492:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001494:	1c7b      	adds	r3, r7, #1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d004      	beq.n	80014a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800149c:	1cbb      	adds	r3, r7, #2
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014a6:	1cbb      	adds	r3, r7, #2
 80014a8:	881a      	ldrh	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e082      	b.n	80015d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2241      	movs	r2, #65	; 0x41
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2240      	movs	r2, #64	; 0x40
 80014da:	2100      	movs	r1, #0
 80014dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fbcb 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2241      	movs	r2, #65	; 0x41
 80014ea:	2124      	movs	r1, #36	; 0x24
 80014ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	438a      	bics	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_I2C_Init+0x120>)
 8001508:	400a      	ands	r2, r1
 800150a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4931      	ldr	r1, [pc, #196]	; (80015dc <HAL_I2C_Init+0x124>)
 8001518:	400a      	ands	r2, r1
 800151a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	0209      	lsls	r1, r1, #8
 8001530:	430a      	orrs	r2, r1
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e007      	b.n	8001546 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2184      	movs	r1, #132	; 0x84
 8001540:	0209      	lsls	r1, r1, #8
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d104      	bne.n	8001558 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	491f      	ldr	r1, [pc, #124]	; (80015e0 <HAL_I2C_Init+0x128>)
 8001564:	430a      	orrs	r2, r1
 8001566:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	491a      	ldr	r1, [pc, #104]	; (80015dc <HAL_I2C_Init+0x124>)
 8001574:	400a      	ands	r2, r1
 8001576:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	431a      	orrs	r2, r3
 8001582:	0011      	movs	r1, r2
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	021a      	lsls	r2, r3, #8
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69d9      	ldr	r1, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2241      	movs	r2, #65	; 0x41
 80015bc:	2120      	movs	r1, #32
 80015be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2242      	movs	r2, #66	; 0x42
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	f0ffffff 	.word	0xf0ffffff
 80015dc:	ffff7fff 	.word	0xffff7fff
 80015e0:	02008000 	.word	0x02008000

080015e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	000c      	movs	r4, r1
 80015ee:	0010      	movs	r0, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	230a      	movs	r3, #10
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	1c22      	adds	r2, r4, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	2308      	movs	r3, #8
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	1c02      	adds	r2, r0, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	1dbb      	adds	r3, r7, #6
 8001604:	1c0a      	adds	r2, r1, #0
 8001606:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2241      	movs	r2, #65	; 0x41
 800160c:	5c9b      	ldrb	r3, [r3, r2]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b20      	cmp	r3, #32
 8001612:	d000      	beq.n	8001616 <HAL_I2C_Mem_Write+0x32>
 8001614:	e10c      	b.n	8001830 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_I2C_Mem_Write+0x42>
 800161c:	232c      	movs	r3, #44	; 0x2c
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d105      	bne.n	8001632 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0ff      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2240      	movs	r2, #64	; 0x40
 8001636:	5c9b      	ldrb	r3, [r3, r2]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_I2C_Mem_Write+0x5c>
 800163c:	2302      	movs	r3, #2
 800163e:	e0f8      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2240      	movs	r2, #64	; 0x40
 8001644:	2101      	movs	r1, #1
 8001646:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001648:	f7ff fcf0 	bl	800102c <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	0219      	lsls	r1, r3, #8
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2319      	movs	r3, #25
 800165c:	2201      	movs	r2, #1
 800165e:	f000 fb0b 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0e3      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2241      	movs	r2, #65	; 0x41
 800166e:	2121      	movs	r1, #33	; 0x21
 8001670:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2242      	movs	r2, #66	; 0x42
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	222c      	movs	r2, #44	; 0x2c
 800168a:	18ba      	adds	r2, r7, r2
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001696:	1dbb      	adds	r3, r7, #6
 8001698:	881c      	ldrh	r4, [r3, #0]
 800169a:	2308      	movs	r3, #8
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	230a      	movs	r3, #10
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	8819      	ldrh	r1, [r3, #0]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	0023      	movs	r3, r4
 80016b2:	f000 f9f9 	bl	8001aa8 <I2C_RequestMemoryWrite>
 80016b6:	1e03      	subs	r3, r0, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	2100      	movs	r1, #0
 80016c0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0b5      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2bff      	cmp	r3, #255	; 0xff
 80016ce:	d911      	bls.n	80016f4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	22ff      	movs	r2, #255	; 0xff
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	045c      	lsls	r4, r3, #17
 80016e0:	230a      	movs	r3, #10
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	8819      	ldrh	r1, [r3, #0]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	2300      	movs	r3, #0
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	0023      	movs	r3, r4
 80016ee:	f000 fbe3 	bl	8001eb8 <I2C_TransferConfig>
 80016f2:	e012      	b.n	800171a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	049c      	lsls	r4, r3, #18
 8001708:	230a      	movs	r3, #10
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	8819      	ldrh	r1, [r3, #0]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	0023      	movs	r3, r4
 8001716:	f000 fbcf 	bl	8001eb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fae8 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e081      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03a      	beq.n	80017de <HAL_I2C_Mem_Write+0x1fa>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d136      	bne.n	80017de <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	0013      	movs	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	f000 fa7b 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e053      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d911      	bls.n	80017b8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	045c      	lsls	r4, r3, #17
 80017a4:	230a      	movs	r3, #10
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	0023      	movs	r3, r4
 80017b2:	f000 fb81 	bl	8001eb8 <I2C_TransferConfig>
 80017b6:	e012      	b.n	80017de <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	049c      	lsls	r4, r3, #18
 80017cc:	230a      	movs	r3, #10
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	8819      	ldrh	r1, [r3, #0]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	0023      	movs	r3, r4
 80017da:	f000 fb6d 	bl	8001eb8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d198      	bne.n	800171a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fac0 	bl	8001d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e01a      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	490b      	ldr	r1, [pc, #44]	; (800183c <HAL_I2C_Mem_Write+0x258>)
 8001810:	400a      	ands	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2241      	movs	r2, #65	; 0x41
 8001818:	2120      	movs	r1, #32
 800181a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2242      	movs	r2, #66	; 0x42
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
  }
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b007      	add	sp, #28
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	fe00e800 	.word	0xfe00e800

08001840 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	000c      	movs	r4, r1
 800184a:	0010      	movs	r0, r2
 800184c:	0019      	movs	r1, r3
 800184e:	230a      	movs	r3, #10
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	1c22      	adds	r2, r4, #0
 8001854:	801a      	strh	r2, [r3, #0]
 8001856:	2308      	movs	r3, #8
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	1c02      	adds	r2, r0, #0
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	1dbb      	adds	r3, r7, #6
 8001860:	1c0a      	adds	r2, r1, #0
 8001862:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2241      	movs	r2, #65	; 0x41
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b20      	cmp	r3, #32
 800186e:	d000      	beq.n	8001872 <HAL_I2C_Mem_Read+0x32>
 8001870:	e110      	b.n	8001a94 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_I2C_Mem_Read+0x42>
 8001878:	232c      	movs	r3, #44	; 0x2c
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e103      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	5c9b      	ldrb	r3, [r3, r2]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2C_Mem_Read+0x5c>
 8001898:	2302      	movs	r3, #2
 800189a:	e0fc      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	2101      	movs	r1, #1
 80018a2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a4:	f7ff fbc2 	bl	800102c <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	0219      	lsls	r1, r3, #8
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2319      	movs	r3, #25
 80018b8:	2201      	movs	r2, #1
 80018ba:	f000 f9dd 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0e7      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2241      	movs	r2, #65	; 0x41
 80018ca:	2122      	movs	r1, #34	; 0x22
 80018cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2242      	movs	r2, #66	; 0x42
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	222c      	movs	r2, #44	; 0x2c
 80018e6:	18ba      	adds	r2, r7, r2
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	881c      	ldrh	r4, [r3, #0]
 80018f6:	2308      	movs	r3, #8
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	881a      	ldrh	r2, [r3, #0]
 80018fc:	230a      	movs	r3, #10
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	8819      	ldrh	r1, [r3, #0]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	0023      	movs	r3, r4
 800190e:	f000 f92f 	bl	8001b70 <I2C_RequestMemoryRead>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d005      	beq.n	8001922 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0b9      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	2bff      	cmp	r3, #255	; 0xff
 800192a:	d911      	bls.n	8001950 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	22ff      	movs	r2, #255	; 0xff
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	045c      	lsls	r4, r3, #17
 800193c:	230a      	movs	r3, #10
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	8819      	ldrh	r1, [r3, #0]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <HAL_I2C_Mem_Read+0x260>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	0023      	movs	r3, r4
 800194a:	f000 fab5 	bl	8001eb8 <I2C_TransferConfig>
 800194e:	e012      	b.n	8001976 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	b2da      	uxtb	r2, r3
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	049c      	lsls	r4, r3, #18
 8001964:	230a      	movs	r3, #10
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	4b4c      	ldr	r3, [pc, #304]	; (8001aa0 <HAL_I2C_Mem_Read+0x260>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	0023      	movs	r3, r4
 8001972:	f000 faa1 	bl	8001eb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	0013      	movs	r3, r2
 8001980:	2200      	movs	r2, #0
 8001982:	2104      	movs	r1, #4
 8001984:	f000 f978 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e082      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03a      	beq.n	8001a42 <HAL_I2C_Mem_Read+0x202>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d136      	bne.n	8001a42 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	0013      	movs	r3, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	f000 f949 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e053      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	d911      	bls.n	8001a1c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	045c      	lsls	r4, r3, #17
 8001a08:	230a      	movs	r3, #10
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	8819      	ldrh	r1, [r3, #0]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	2300      	movs	r3, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	0023      	movs	r3, r4
 8001a16:	f000 fa4f 	bl	8001eb8 <I2C_TransferConfig>
 8001a1a:	e012      	b.n	8001a42 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	049c      	lsls	r4, r3, #18
 8001a30:	230a      	movs	r3, #10
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	8819      	ldrh	r1, [r3, #0]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	0023      	movs	r3, r4
 8001a3e:	f000 fa3b 	bl	8001eb8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d194      	bne.n	8001976 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 f98e 	bl	8001d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e01a      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2220      	movs	r2, #32
 8001a66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <HAL_I2C_Mem_Read+0x264>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2241      	movs	r2, #65	; 0x41
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2242      	movs	r2, #66	; 0x42
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e000      	b.n	8001a96 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a94:	2302      	movs	r3, #2
  }
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b007      	add	sp, #28
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	80002400 	.word	0x80002400
 8001aa4:	fe00e800 	.word	0xfe00e800

08001aa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	000c      	movs	r4, r1
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	250a      	movs	r5, #10
 8001ab8:	197b      	adds	r3, r7, r5
 8001aba:	1c22      	adds	r2, r4, #0
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	1c02      	adds	r2, r0, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	1dbb      	adds	r3, r7, #6
 8001ac8:	1c0a      	adds	r2, r1, #0
 8001aca:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001acc:	1dbb      	adds	r3, r7, #6
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	045c      	lsls	r4, r3, #17
 8001ad6:	197b      	adds	r3, r7, r5
 8001ad8:	8819      	ldrh	r1, [r3, #0]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <I2C_RequestMemoryWrite+0xc4>)
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	0023      	movs	r3, r4
 8001ae2:	f000 f9e9 	bl	8001eb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 f902 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001af2:	1e03      	subs	r3, r0, #0
 8001af4:	d001      	beq.n	8001afa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e033      	b.n	8001b62 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d107      	bne.n	8001b12 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b02:	2308      	movs	r3, #8
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b10:	e019      	b.n	8001b46 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b12:	2308      	movs	r3, #8
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	6a39      	ldr	r1, [r7, #32]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 f8e3 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d001      	beq.n	8001b38 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e014      	b.n	8001b62 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b38:	2308      	movs	r3, #8
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	0013      	movs	r3, r2
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	f000 f890 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001b58:	1e03      	subs	r3, r0, #0
 8001b5a:	d001      	beq.n	8001b60 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	80002000 	.word	0x80002000

08001b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	000c      	movs	r4, r1
 8001b7a:	0010      	movs	r0, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	250a      	movs	r5, #10
 8001b80:	197b      	adds	r3, r7, r5
 8001b82:	1c22      	adds	r2, r4, #0
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	2308      	movs	r3, #8
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	1c02      	adds	r2, r0, #0
 8001b8c:	801a      	strh	r2, [r3, #0]
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	1c0a      	adds	r2, r1, #0
 8001b92:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	197b      	adds	r3, r7, r5
 8001b9c:	8819      	ldrh	r1, [r3, #0]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <I2C_RequestMemoryRead+0xc0>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f000 f987 	bl	8001eb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f8a0 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e033      	b.n	8001c26 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bbe:	1dbb      	adds	r3, r7, #6
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8001bd4:	e019      	b.n	8001c0a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	6a39      	ldr	r1, [r7, #32]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f881 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d001      	beq.n	8001bfc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e014      	b.n	8001c26 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0a:	6a3a      	ldr	r2, [r7, #32]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	0013      	movs	r3, r2
 8001c14:	2200      	movs	r2, #0
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	f000 f82e 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b004      	add	sp, #16
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	80002000 	.word	0x80002000

08001c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d103      	bne.n	8001c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d007      	beq.n	8001c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	619a      	str	r2, [r3, #24]
  }
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c88:	e021      	b.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d01e      	beq.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f9cc 	bl	800102c <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	2220      	movs	r2, #32
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2241      	movs	r2, #65	; 0x41
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2242      	movs	r2, #66	; 0x42
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	425a      	negs	r2, r3
 8001cde:	4153      	adcs	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d0ce      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d02:	e02b      	b.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f86e 	bl	8001dec <I2C_IsAcknowledgeFailed>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e029      	b.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	d01e      	beq.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7ff f985 	bl	800102c <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d113      	bne.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	2220      	movs	r2, #32
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	2120      	movs	r1, #32
 8001d46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2242      	movs	r2, #66	; 0x42
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d1cc      	bne.n	8001d04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d80:	e028      	b.n	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f82f 	bl	8001dec <I2C_IsAcknowledgeFailed>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e026      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff f949 	bl	800102c <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	2220      	movs	r2, #32
 8001db2:	431a      	orrs	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2241      	movs	r2, #65	; 0x41
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2242      	movs	r2, #66	; 0x42
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e007      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d1cf      	bne.n	8001d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2210      	movs	r2, #16
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d151      	bne.n	8001eaa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e06:	e021      	b.n	8001e4c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	d01e      	beq.n	8001e4c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7ff f90d 	bl	800102c <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_IsAcknowledgeFailed+0x38>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d113      	bne.n	8001e4c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	2220      	movs	r2, #32
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2120      	movs	r1, #32
 8001e36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2242      	movs	r2, #66	; 0x42
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	2100      	movs	r1, #0
 8001e46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e02f      	b.n	8001eac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2220      	movs	r2, #32
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d1d6      	bne.n	8001e08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2210      	movs	r2, #16
 8001e60:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fee1 	bl	8001c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	2204      	movs	r2, #4
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2241      	movs	r2, #65	; 0x41
 8001e92:	2120      	movs	r1, #32
 8001e94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2242      	movs	r2, #66	; 0x42
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b004      	add	sp, #16
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	fe00e800 	.word	0xfe00e800

08001eb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	0008      	movs	r0, r1
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	240a      	movs	r4, #10
 8001ec8:	193b      	adds	r3, r7, r4
 8001eca:	1c02      	adds	r2, r0, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	2009      	movs	r0, #9
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	1c0a      	adds	r2, r1, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	0d51      	lsrs	r1, r2, #21
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	00d2      	lsls	r2, r2, #3
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <I2C_TransferConfig+0x68>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	43d2      	mvns	r2, r2
 8001eec:	401a      	ands	r2, r3
 8001eee:	0011      	movs	r1, r2
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	059b      	lsls	r3, r3, #22
 8001ef6:	0d9a      	lsrs	r2, r3, #22
 8001ef8:	183b      	adds	r3, r7, r0
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	0418      	lsls	r0, r3, #16
 8001efe:	23ff      	movs	r3, #255	; 0xff
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	4003      	ands	r3, r0
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b005      	add	sp, #20
 8001f1c:	bd90      	pop	{r4, r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	03ff63ff 	.word	0x03ff63ff

08001f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2241      	movs	r2, #65	; 0x41
 8001f32:	5c9b      	ldrb	r3, [r3, r2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d138      	bne.n	8001fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2240      	movs	r2, #64	; 0x40
 8001f3e:	5c9b      	ldrb	r3, [r3, r2]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e032      	b.n	8001fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2241      	movs	r2, #65	; 0x41
 8001f54:	2124      	movs	r1, #36	; 0x24
 8001f56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4911      	ldr	r1, [pc, #68]	; (8001fb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6819      	ldr	r1, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2241      	movs	r2, #65	; 0x41
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	ffffefff 	.word	0xffffefff

08001fbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2241      	movs	r2, #65	; 0x41
 8001fca:	5c9b      	ldrb	r3, [r3, r2]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d139      	bne.n	8002046 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e033      	b.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2241      	movs	r2, #65	; 0x41
 8001fec:	2124      	movs	r1, #36	; 0x24
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2241      	movs	r2, #65	; 0x41
 8002036:	2120      	movs	r1, #32
 8002038:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
  }
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b004      	add	sp, #16
 800204e:	bd80      	pop	{r7, pc}
 8002050:	fffff0ff 	.word	0xfffff0ff

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e303      	b.n	800266e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x1e>
 8002070:	e08d      	b.n	800218e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002072:	4bc4      	ldr	r3, [pc, #784]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	220c      	movs	r2, #12
 8002078:	4013      	ands	r3, r2
 800207a:	2b04      	cmp	r3, #4
 800207c:	d00e      	beq.n	800209c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207e:	4bc1      	ldr	r3, [pc, #772]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	220c      	movs	r2, #12
 8002084:	4013      	ands	r3, r2
 8002086:	2b08      	cmp	r3, #8
 8002088:	d116      	bne.n	80020b8 <HAL_RCC_OscConfig+0x64>
 800208a:	4bbe      	ldr	r3, [pc, #760]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	025b      	lsls	r3, r3, #9
 8002092:	401a      	ands	r2, r3
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	429a      	cmp	r2, r3
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4bb9      	ldr	r3, [pc, #740]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	029b      	lsls	r3, r3, #10
 80020a4:	4013      	ands	r3, r2
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_OscConfig+0x56>
 80020a8:	e070      	b.n	800218c <HAL_RCC_OscConfig+0x138>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d000      	beq.n	80020b4 <HAL_RCC_OscConfig+0x60>
 80020b2:	e06b      	b.n	800218c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e2da      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x7c>
 80020c0:	4bb0      	ldr	r3, [pc, #704]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4baf      	ldr	r3, [pc, #700]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0249      	lsls	r1, r1, #9
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e02f      	b.n	8002130 <HAL_RCC_OscConfig+0xdc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x9e>
 80020d8:	4baa      	ldr	r3, [pc, #680]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4ba9      	ldr	r3, [pc, #676]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020de:	49aa      	ldr	r1, [pc, #680]	; (8002388 <HAL_RCC_OscConfig+0x334>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4ba7      	ldr	r3, [pc, #668]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4ba6      	ldr	r3, [pc, #664]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020ea:	49a8      	ldr	r1, [pc, #672]	; (800238c <HAL_RCC_OscConfig+0x338>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e01e      	b.n	8002130 <HAL_RCC_OscConfig+0xdc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d10e      	bne.n	8002118 <HAL_RCC_OscConfig+0xc4>
 80020fa:	4ba2      	ldr	r3, [pc, #648]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4ba1      	ldr	r3, [pc, #644]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	02c9      	lsls	r1, r1, #11
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b9e      	ldr	r3, [pc, #632]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b9d      	ldr	r3, [pc, #628]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0249      	lsls	r1, r1, #9
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xdc>
 8002118:	4b9a      	ldr	r3, [pc, #616]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b99      	ldr	r3, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800211e:	499a      	ldr	r1, [pc, #616]	; (8002388 <HAL_RCC_OscConfig+0x334>)
 8002120:	400a      	ands	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	4b97      	ldr	r3, [pc, #604]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800212a:	4998      	ldr	r1, [pc, #608]	; (800238c <HAL_RCC_OscConfig+0x338>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d014      	beq.n	8002162 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe ff78 	bl	800102c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002142:	f7fe ff73 	bl	800102c <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e28c      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002154:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	4013      	ands	r3, r2
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0xee>
 8002160:	e015      	b.n	800218e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe ff63 	bl	800102c <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe ff5e 	bl	800102c <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e277      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	029b      	lsls	r3, r3, #10
 8002186:	4013      	ands	r3, r2
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x118>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2202      	movs	r2, #2
 8002194:	4013      	ands	r3, r2
 8002196:	d100      	bne.n	800219a <HAL_RCC_OscConfig+0x146>
 8002198:	e069      	b.n	800226e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	220c      	movs	r2, #12
 80021a0:	4013      	ands	r3, r2
 80021a2:	d00b      	beq.n	80021bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021a4:	4b77      	ldr	r3, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11c      	bne.n	80021ea <HAL_RCC_OscConfig+0x196>
 80021b0:	4b74      	ldr	r3, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	4013      	ands	r3, r2
 80021ba:	d116      	bne.n	80021ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021bc:	4b71      	ldr	r3, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e24d      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	22f8      	movs	r2, #248	; 0xf8
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00da      	lsls	r2, r3, #3
 80021e2:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e8:	e041      	b.n	800226e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d024      	beq.n	800223c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f2:	4b64      	ldr	r3, [pc, #400]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe ff15 	bl	800102c <HAL_GetTick>
 8002202:	0003      	movs	r3, r0
 8002204:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002208:	f7fe ff10 	bl	800102c <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e229      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	d0f1      	beq.n	8002208 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b57      	ldr	r3, [pc, #348]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	22f8      	movs	r2, #248	; 0xf8
 800222a:	4393      	bics	r3, r2
 800222c:	0019      	movs	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00da      	lsls	r2, r3, #3
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e018      	b.n	800226e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223c:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002242:	2101      	movs	r1, #1
 8002244:	438a      	bics	r2, r1
 8002246:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fef0 	bl	800102c <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe feeb 	bl	800102c <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e204      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2202      	movs	r2, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d1f1      	bne.n	8002252 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2208      	movs	r2, #8
 8002274:	4013      	ands	r3, r2
 8002276:	d036      	beq.n	80022e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d019      	beq.n	80022b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fece 	bl	800102c <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fec9 	bl	800102c <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1e2      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f1      	beq.n	8002296 <HAL_RCC_OscConfig+0x242>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80022b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe feb4 	bl	800102c <HAL_GetTick>
 80022c4:	0003      	movs	r3, r0
 80022c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe feaf 	bl	800102c <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1c8      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2202      	movs	r2, #2
 80022e2:	4013      	ands	r3, r2
 80022e4:	d1f1      	bne.n	80022ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2204      	movs	r2, #4
 80022ec:	4013      	ands	r3, r2
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x29e>
 80022f0:	e0b6      	b.n	8002460 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	055b      	lsls	r3, r3, #21
 8002302:	4013      	ands	r3, r2
 8002304:	d111      	bne.n	800232a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0549      	lsls	r1, r1, #21
 8002310:	430a      	orrs	r2, r1
 8002312:	61da      	str	r2, [r3, #28]
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	055b      	lsls	r3, r3, #21
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4013      	ands	r3, r2
 8002334:	d11a      	bne.n	800236c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0049      	lsls	r1, r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002344:	f7fe fe72 	bl	800102c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe fe6d 	bl	800102c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e186      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_OscConfig+0x33c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4013      	ands	r3, r2
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10f      	bne.n	8002394 <HAL_RCC_OscConfig+0x340>
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_RCC_OscConfig+0x330>)
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	621a      	str	r2, [r3, #32]
 8002380:	e036      	b.n	80023f0 <HAL_RCC_OscConfig+0x39c>
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	40021000 	.word	0x40021000
 8002388:	fffeffff 	.word	0xfffeffff
 800238c:	fffbffff 	.word	0xfffbffff
 8002390:	40007000 	.word	0x40007000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x362>
 800239c:	4bb6      	ldr	r3, [pc, #728]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	4bb5      	ldr	r3, [pc, #724]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	621a      	str	r2, [r3, #32]
 80023a8:	4bb3      	ldr	r3, [pc, #716]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	4bb2      	ldr	r3, [pc, #712]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	438a      	bics	r2, r1
 80023b2:	621a      	str	r2, [r3, #32]
 80023b4:	e01c      	b.n	80023f0 <HAL_RCC_OscConfig+0x39c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x384>
 80023be:	4bae      	ldr	r3, [pc, #696]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	4bad      	ldr	r3, [pc, #692]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023c4:	2104      	movs	r1, #4
 80023c6:	430a      	orrs	r2, r1
 80023c8:	621a      	str	r2, [r3, #32]
 80023ca:	4bab      	ldr	r3, [pc, #684]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023cc:	6a1a      	ldr	r2, [r3, #32]
 80023ce:	4baa      	ldr	r3, [pc, #680]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	430a      	orrs	r2, r1
 80023d4:	621a      	str	r2, [r3, #32]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0x39c>
 80023d8:	4ba7      	ldr	r3, [pc, #668]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	4ba6      	ldr	r3, [pc, #664]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	621a      	str	r2, [r3, #32]
 80023e4:	4ba4      	ldr	r3, [pc, #656]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	4ba3      	ldr	r3, [pc, #652]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80023ea:	2104      	movs	r1, #4
 80023ec:	438a      	bics	r2, r1
 80023ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d014      	beq.n	8002422 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7fe fe18 	bl	800102c <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	e009      	b.n	8002416 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fe13 	bl	800102c <HAL_GetTick>
 8002406:	0002      	movs	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	4a9b      	ldr	r2, [pc, #620]	; (800267c <HAL_RCC_OscConfig+0x628>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e12b      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	4b98      	ldr	r3, [pc, #608]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x3ae>
 8002420:	e013      	b.n	800244a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe fe03 	bl	800102c <HAL_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242a:	e009      	b.n	8002440 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fdfe 	bl	800102c <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	4a91      	ldr	r2, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x628>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e116      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	4b8d      	ldr	r3, [pc, #564]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	2202      	movs	r2, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800244a:	231f      	movs	r3, #31
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	4b87      	ldr	r3, [pc, #540]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800245a:	4989      	ldr	r1, [pc, #548]	; (8002680 <HAL_RCC_OscConfig+0x62c>)
 800245c:	400a      	ands	r2, r1
 800245e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2210      	movs	r2, #16
 8002466:	4013      	ands	r3, r2
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d12a      	bne.n	80024c8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002472:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	4b80      	ldr	r3, [pc, #512]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002478:	2104      	movs	r1, #4
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800247e:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe fdcf 	bl	800102c <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002494:	f7fe fdca 	bl	800102c <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0e3      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024a6:	4b74      	ldr	r3, [pc, #464]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f1      	beq.n	8002494 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024b0:	4b71      	ldr	r3, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b4:	22f8      	movs	r2, #248	; 0xf8
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	00da      	lsls	r2, r3, #3
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
 80024c6:	e034      	b.n	8002532 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	3305      	adds	r3, #5
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024d0:	4b69      	ldr	r3, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d4:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024d6:	2104      	movs	r1, #4
 80024d8:	438a      	bics	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	22f8      	movs	r2, #248	; 0xf8
 80024e2:	4393      	bics	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	00da      	lsls	r2, r3, #3
 80024ec:	4b62      	ldr	r3, [pc, #392]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024ee:	430a      	orrs	r2, r1
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
 80024f2:	e01e      	b.n	8002532 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	4b5f      	ldr	r3, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80024fa:	2104      	movs	r1, #4
 80024fc:	430a      	orrs	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002500:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002504:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002506:	2101      	movs	r1, #1
 8002508:	438a      	bics	r2, r1
 800250a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250c:	f7fe fd8e 	bl	800102c <HAL_GetTick>
 8002510:	0003      	movs	r3, r0
 8002512:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002516:	f7fe fd89 	bl	800102c <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0a2      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d1f1      	bne.n	8002516 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d100      	bne.n	800253c <HAL_RCC_OscConfig+0x4e8>
 800253a:	e097      	b.n	800266c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	220c      	movs	r2, #12
 8002542:	4013      	ands	r3, r2
 8002544:	2b08      	cmp	r3, #8
 8002546:	d100      	bne.n	800254a <HAL_RCC_OscConfig+0x4f6>
 8002548:	e06b      	b.n	8002622 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d14c      	bne.n	80025ec <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002558:	494a      	ldr	r1, [pc, #296]	; (8002684 <HAL_RCC_OscConfig+0x630>)
 800255a:	400a      	ands	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fd65 	bl	800102c <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fd60 	bl	800102c <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e079      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	049b      	lsls	r3, r3, #18
 8002582:	4013      	ands	r3, r2
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	220f      	movs	r2, #15
 800258c:	4393      	bics	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002596:	430a      	orrs	r2, r1
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <HAL_RCC_OscConfig+0x634>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	431a      	orrs	r2, r3
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	0449      	lsls	r1, r1, #17
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe fd33 	bl	800102c <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fd2e 	bl	800102c <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e047      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	049b      	lsls	r3, r3, #18
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x578>
 80025ea:	e03f      	b.n	800266c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 80025f2:	4924      	ldr	r1, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x630>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fd18 	bl	800102c <HAL_GetTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fd13 	bl	800102c <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e02c      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	049b      	lsls	r3, r3, #18
 800261c:	4013      	ands	r3, r2
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x5ae>
 8002620:	e024      	b.n	800266c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e01f      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x624>)
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	025b      	lsls	r3, r3, #9
 8002640:	401a      	ands	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	429a      	cmp	r2, r3
 8002648:	d10e      	bne.n	8002668 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	220f      	movs	r2, #15
 800264e:	401a      	ands	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	23f0      	movs	r3, #240	; 0xf0
 800265c:	039b      	lsls	r3, r3, #14
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	0018      	movs	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	b008      	add	sp, #32
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40021000 	.word	0x40021000
 800267c:	00001388 	.word	0x00001388
 8002680:	efffffff 	.word	0xefffffff
 8002684:	feffffff 	.word	0xfeffffff
 8002688:	ffc2ffff 	.word	0xffc2ffff

0800268c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b3      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d911      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e09a      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d015      	beq.n	8002708 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d006      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026e6:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80026ec:	21e0      	movs	r1, #224	; 0xe0
 80026ee:	00c9      	lsls	r1, r1, #3
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	22f0      	movs	r2, #240	; 0xf0
 80026fa:	4393      	bics	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	4013      	ands	r3, r2
 8002710:	d040      	beq.n	8002794 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	4013      	ands	r3, r2
 8002724:	d114      	bne.n	8002750 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06e      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d108      	bne.n	8002750 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e062      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e05b      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	4393      	bics	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fc62 	bl	800102c <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276c:	e009      	b.n	8002782 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7fe fc5d 	bl	800102c <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_RCC_ClockConfig+0x18c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e042      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	220c      	movs	r2, #12
 8002788:	401a      	ands	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ec      	bne.n	800276e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d211      	bcs.n	80027c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x184>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e020      	b.n	8002808 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_RCC_ClockConfig+0x190>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027e4:	f000 f820 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e8:	0001      	movs	r1, r0
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x188>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	220f      	movs	r2, #15
 80027f2:	4013      	ands	r3, r2
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x194>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	000a      	movs	r2, r1
 80027fa:	40da      	lsrs	r2, r3
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x198>)
 80027fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fad5 	bl	8000db0 <HAL_InitTick>
  
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b004      	add	sp, #16
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40022000 	.word	0x40022000
 8002814:	40021000 	.word	0x40021000
 8002818:	00001388 	.word	0x00001388
 800281c:	fffff8ff 	.word	0xfffff8ff
 8002820:	08006328 	.word	0x08006328
 8002824:	2000000c 	.word	0x2000000c

08002828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b08f      	sub	sp, #60	; 0x3c
 800282c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800282e:	2314      	movs	r3, #20
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	4a2b      	ldr	r2, [pc, #172]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002834:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002836:	c313      	stmia	r3!, {r0, r1, r4}
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002840:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002842:	c313      	stmia	r3!, {r0, r1, r4}
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002850:	2300      	movs	r3, #0
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
 8002854:	2300      	movs	r3, #0
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	220c      	movs	r2, #12
 8002866:	4013      	ands	r3, r2
 8002868:	2b04      	cmp	r3, #4
 800286a:	d002      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x4a>
 800286c:	2b08      	cmp	r3, #8
 800286e:	d003      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x50>
 8002870:	e02d      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002876:	e02d      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	0c9b      	lsrs	r3, r3, #18
 800287c:	220f      	movs	r2, #15
 800287e:	4013      	ands	r3, r2
 8002880:	2214      	movs	r2, #20
 8002882:	18ba      	adds	r2, r7, r2
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	220f      	movs	r2, #15
 800288e:	4013      	ands	r3, r2
 8002890:	1d3a      	adds	r2, r7, #4
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	4013      	ands	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a2:	4812      	ldr	r0, [pc, #72]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80028a4:	f7fd fc30 	bl	8000108 <__udivsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	001a      	movs	r2, r3
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	4353      	muls	r3, r2
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
 80028b2:	e009      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b6:	000a      	movs	r2, r1
 80028b8:	0152      	lsls	r2, r2, #5
 80028ba:	1a52      	subs	r2, r2, r1
 80028bc:	0193      	lsls	r3, r2, #6
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	185b      	adds	r3, r3, r1
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028cc:	e002      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b00f      	add	sp, #60	; 0x3c
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	08006300 	.word	0x08006300
 80028e4:	08006310 	.word	0x08006310
 80028e8:	40021000 	.word	0x40021000
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	2000000c 	.word	0x2000000c

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	0001      	movs	r1, r0
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	2207      	movs	r2, #7
 8002916:	4013      	ands	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_RCC_GetPCLK1Freq+0x28>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	40d9      	lsrs	r1, r3
 800291e:	000b      	movs	r3, r1
}    
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	08006338 	.word	0x08006338

08002930 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCC_GetClockConfig+0x4c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	401a      	ands	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_GetClockConfig+0x4c>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	22f0      	movs	r2, #240	; 0xf0
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_GetClockConfig+0x4c>)
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	23e0      	movs	r3, #224	; 0xe0
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	401a      	ands	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetClockConfig+0x50>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	401a      	ands	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	40021000 	.word	0x40021000
 8002980:	40022000 	.word	0x40022000

08002984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	4013      	ands	r3, r2
 800299e:	d100      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029a0:	e08f      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029a2:	2317      	movs	r3, #23
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	055b      	lsls	r3, r3, #21
 80029b2:	4013      	ands	r3, r2
 80029b4:	d111      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0549      	lsls	r1, r1, #21
 80029c0:	430a      	orrs	r2, r1
 80029c2:	61da      	str	r2, [r3, #28]
 80029c4:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	055b      	lsls	r3, r3, #21
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d2:	2317      	movs	r3, #23
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d11a      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b49      	ldr	r3, [pc, #292]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0049      	lsls	r1, r1, #1
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f4:	f7fe fb1a 	bl	800102c <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	e008      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe fb15 	bl	800102c <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b64      	cmp	r3, #100	; 0x64
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e077      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	23c0      	movs	r3, #192	; 0xc0
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4013      	ands	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d034      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4013      	ands	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d02c      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a33      	ldr	r2, [pc, #204]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0249      	lsls	r1, r1, #9
 8002a52:	430a      	orrs	r2, r1
 8002a54:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a56:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a5c:	492d      	ldr	r1, [pc, #180]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fadc 	bl	800102c <HAL_GetTick>
 8002a74:	0003      	movs	r3, r0
 8002a76:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e009      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fad7 	bl	800102c <HAL_GetTick>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e038      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aac:	2317      	movs	r3, #23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002abc:	4917      	ldr	r1, [pc, #92]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4393      	bics	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	2210      	movs	r2, #16
 8002af0:	4393      	bics	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002afa:	430a      	orrs	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	fffffcff 	.word	0xfffffcff
 8002b14:	fffeffff 	.word	0xfffeffff
 8002b18:	00001388 	.word	0x00001388
 8002b1c:	efffffff 	.word	0xefffffff

08002b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e01e      	b.n	8002b70 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	223d      	movs	r2, #61	; 0x3d
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	223c      	movs	r2, #60	; 0x3c
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 f815 	bl	8002b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223d      	movs	r2, #61	; 0x3d
 8002b52:	2102      	movs	r1, #2
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f000 f969 	bl	8002e38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223d      	movs	r2, #61	; 0x3d
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d124      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2202      	movs	r2, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d11d      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4252      	negs	r2, r2
 8002bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2203      	movs	r2, #3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f8fa 	bl	8002e08 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e007      	b.n	8002c26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f8ed 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f8f9 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d125      	bne.n	8002c86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2204      	movs	r2, #4
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d11e      	bne.n	8002c86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2205      	movs	r2, #5
 8002c4e:	4252      	negs	r2, r2
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	23c0      	movs	r3, #192	; 0xc0
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f8cd 	bl	8002e08 <HAL_TIM_IC_CaptureCallback>
 8002c6e:	e007      	b.n	8002c80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 f8c0 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 f8cc 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d124      	bne.n	8002cde <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d11d      	bne.n	8002cde <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2209      	movs	r2, #9
 8002ca8:	4252      	negs	r2, r2
 8002caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 f8a1 	bl	8002e08 <HAL_TIM_IC_CaptureCallback>
 8002cc6:	e007      	b.n	8002cd8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f894 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 f8a0 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d125      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d11e      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2211      	movs	r2, #17
 8002d00:	4252      	negs	r2, r2
 8002d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2208      	movs	r2, #8
 8002d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	23c0      	movs	r3, #192	; 0xc0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 f874 	bl	8002e08 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f867 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f873 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4252      	negs	r2, r2
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fd ff49 	bl	8000bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b80      	cmp	r3, #128	; 0x80
 8002d72:	d10f      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b80      	cmp	r3, #128	; 0x80
 8002d80:	d108      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2281      	movs	r2, #129	; 0x81
 8002d88:	4252      	negs	r2, r2
 8002d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 f8d0 	bl	8002f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d10f      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2240      	movs	r2, #64	; 0x40
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b40      	cmp	r3, #64	; 0x40
 8002dae:	d108      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2241      	movs	r2, #65	; 0x41
 8002db6:	4252      	negs	r2, r2
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f833 	bl	8002e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d10f      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d108      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2221      	movs	r2, #33	; 0x21
 8002de4:	4252      	negs	r2, r2
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f89a 	bl	8002f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <TIM_Base_SetConfig+0xd0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x20>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <TIM_Base_SetConfig+0xd4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2270      	movs	r2, #112	; 0x70
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <TIM_Base_SetConfig+0xd0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <TIM_Base_SetConfig+0xd4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00f      	beq.n	8002e9a <TIM_Base_SetConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <TIM_Base_SetConfig+0xd8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00b      	beq.n	8002e9a <TIM_Base_SetConfig+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <TIM_Base_SetConfig+0xdc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <TIM_Base_SetConfig+0x62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	; (8002f18 <TIM_Base_SetConfig+0xe0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d003      	beq.n	8002e9a <TIM_Base_SetConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a21      	ldr	r2, [pc, #132]	; (8002f1c <TIM_Base_SetConfig+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d108      	bne.n	8002eac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a20      	ldr	r2, [pc, #128]	; (8002f20 <TIM_Base_SetConfig+0xe8>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <TIM_Base_SetConfig+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xba>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <TIM_Base_SetConfig+0xdc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0xba>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <TIM_Base_SetConfig+0xe0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0xba>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <TIM_Base_SetConfig+0xe4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d103      	bne.n	8002efa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	615a      	str	r2, [r3, #20]
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40002000 	.word	0x40002000
 8002f14:	40014000 	.word	0x40014000
 8002f18:	40014400 	.word	0x40014400
 8002f1c:	40014800 	.word	0x40014800
 8002f20:	fffffcff 	.word	0xfffffcff

08002f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e044      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2270      	movs	r2, #112	; 0x70
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7fd fed5 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2224      	movs	r2, #36	; 0x24
 8002f72:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f8d8 	bl	800313c <UART_SetConfig>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e024      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fa51 	bl	8003448 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <HAL_UART_Init+0xa4>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2108      	movs	r1, #8
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fae9 	bl	80035b0 <UART_CheckIdleState>
 8002fde:	0003      	movs	r3, r0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	fffff7ff 	.word	0xfffff7ff

08002fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	1dbb      	adds	r3, r7, #6
 8002ffa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	2b20      	cmp	r3, #32
 8003002:	d000      	beq.n	8003006 <HAL_UART_Transmit+0x1a>
 8003004:	e095      	b.n	8003132 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_UART_Transmit+0x28>
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e08d      	b.n	8003134 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	429a      	cmp	r2, r3
 8003022:	d109      	bne.n	8003038 <HAL_UART_Transmit+0x4c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e07d      	b.n	8003134 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2270      	movs	r2, #112	; 0x70
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Transmit+0x5a>
 8003042:	2302      	movs	r3, #2
 8003044:	e076      	b.n	8003134 <HAL_UART_Transmit+0x148>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2270      	movs	r2, #112	; 0x70
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2221      	movs	r2, #33	; 0x21
 8003058:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800305a:	f7fd ffe7 	bl	800102c <HAL_GetTick>
 800305e:	0003      	movs	r3, r0
 8003060:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1dba      	adds	r2, r7, #6
 8003066:	2150      	movs	r1, #80	; 0x50
 8003068:	8812      	ldrh	r2, [r2, #0]
 800306a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1dba      	adds	r2, r7, #6
 8003070:	2152      	movs	r1, #82	; 0x52
 8003072:	8812      	ldrh	r2, [r2, #0]
 8003074:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	015b      	lsls	r3, r3, #5
 800307e:	429a      	cmp	r2, r3
 8003080:	d108      	bne.n	8003094 <HAL_UART_Transmit+0xa8>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800309c:	e02d      	b.n	80030fa <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	0013      	movs	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	f000 fac6 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 80030b0:	1e03      	subs	r3, r0, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e03d      	b.n	8003134 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	05d2      	lsls	r2, r2, #23
 80030c8:	0dd2      	lsrs	r2, r2, #23
 80030ca:	b292      	uxth	r2, r2
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3302      	adds	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e008      	b.n	80030e8 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b292      	uxth	r2, r2
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2252      	movs	r2, #82	; 0x52
 80030ec:	5a9b      	ldrh	r3, [r3, r2]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b299      	uxth	r1, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2252      	movs	r2, #82	; 0x52
 80030f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2252      	movs	r2, #82	; 0x52
 80030fe:	5a9b      	ldrh	r3, [r3, r2]
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cb      	bne.n	800309e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	0013      	movs	r3, r2
 8003110:	2200      	movs	r2, #0
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	f000 fa92 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e009      	b.n	8003134 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2270      	movs	r2, #112	; 0x70
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b008      	add	sp, #32
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003148:	2317      	movs	r3, #23
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4aad      	ldr	r2, [pc, #692]	; (8003424 <UART_SetConfig+0x2e8>)
 8003170:	4013      	ands	r3, r2
 8003172:	0019      	movs	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4aa8      	ldr	r2, [pc, #672]	; (8003428 <UART_SetConfig+0x2ec>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	4a9f      	ldr	r2, [pc, #636]	; (800342c <UART_SetConfig+0x2f0>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a9b      	ldr	r2, [pc, #620]	; (8003430 <UART_SetConfig+0x2f4>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d125      	bne.n	8003212 <UART_SetConfig+0xd6>
 80031c6:	4b9b      	ldr	r3, [pc, #620]	; (8003434 <UART_SetConfig+0x2f8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	2203      	movs	r2, #3
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d00f      	beq.n	80031f2 <UART_SetConfig+0xb6>
 80031d2:	d304      	bcc.n	80031de <UART_SetConfig+0xa2>
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d011      	beq.n	80031fc <UART_SetConfig+0xc0>
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d005      	beq.n	80031e8 <UART_SetConfig+0xac>
 80031dc:	e013      	b.n	8003206 <UART_SetConfig+0xca>
 80031de:	231f      	movs	r3, #31
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e022      	b.n	800322e <UART_SetConfig+0xf2>
 80031e8:	231f      	movs	r3, #31
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2202      	movs	r2, #2
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e01d      	b.n	800322e <UART_SetConfig+0xf2>
 80031f2:	231f      	movs	r3, #31
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	2204      	movs	r2, #4
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e018      	b.n	800322e <UART_SetConfig+0xf2>
 80031fc:	231f      	movs	r3, #31
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2208      	movs	r2, #8
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e013      	b.n	800322e <UART_SetConfig+0xf2>
 8003206:	231f      	movs	r3, #31
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2210      	movs	r2, #16
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	e00d      	b.n	800322e <UART_SetConfig+0xf2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a88      	ldr	r2, [pc, #544]	; (8003438 <UART_SetConfig+0x2fc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d104      	bne.n	8003226 <UART_SetConfig+0xea>
 800321c:	231f      	movs	r3, #31
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	e003      	b.n	800322e <UART_SetConfig+0xf2>
 8003226:	231f      	movs	r3, #31
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2210      	movs	r2, #16
 800322c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	429a      	cmp	r2, r3
 8003238:	d000      	beq.n	800323c <UART_SetConfig+0x100>
 800323a:	e07d      	b.n	8003338 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800323c:	231f      	movs	r3, #31
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d01c      	beq.n	8003280 <UART_SetConfig+0x144>
 8003246:	dc02      	bgt.n	800324e <UART_SetConfig+0x112>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0x11c>
 800324c:	e04b      	b.n	80032e6 <UART_SetConfig+0x1aa>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d025      	beq.n	800329e <UART_SetConfig+0x162>
 8003252:	2b08      	cmp	r3, #8
 8003254:	d037      	beq.n	80032c6 <UART_SetConfig+0x18a>
 8003256:	e046      	b.n	80032e6 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7ff fb54 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 800325c:	0003      	movs	r3, r0
 800325e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	005a      	lsls	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	18d2      	adds	r2, r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0019      	movs	r1, r3
 8003272:	0010      	movs	r0, r2
 8003274:	f7fc ff48 	bl	8000108 <__udivsi3>
 8003278:	0003      	movs	r3, r0
 800327a:	b29b      	uxth	r3, r3
 800327c:	61bb      	str	r3, [r7, #24]
        break;
 800327e:	e037      	b.n	80032f0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	085b      	lsrs	r3, r3, #1
 8003286:	4a6d      	ldr	r2, [pc, #436]	; (800343c <UART_SetConfig+0x300>)
 8003288:	189a      	adds	r2, r3, r2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0019      	movs	r1, r3
 8003290:	0010      	movs	r0, r2
 8003292:	f7fc ff39 	bl	8000108 <__udivsi3>
 8003296:	0003      	movs	r3, r0
 8003298:	b29b      	uxth	r3, r3
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e028      	b.n	80032f0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7ff fac3 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80032a2:	0003      	movs	r3, r0
 80032a4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	005a      	lsls	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	18d2      	adds	r2, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	0019      	movs	r1, r3
 80032b8:	0010      	movs	r0, r2
 80032ba:	f7fc ff25 	bl	8000108 <__udivsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e014      	b.n	80032f0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	0252      	lsls	r2, r2, #9
 80032d0:	189a      	adds	r2, r3, r2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	0019      	movs	r1, r3
 80032d8:	0010      	movs	r0, r2
 80032da:	f7fc ff15 	bl	8000108 <__udivsi3>
 80032de:	0003      	movs	r3, r0
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e004      	b.n	80032f0 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80032e6:	2317      	movs	r3, #23
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
        break;
 80032ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d91b      	bls.n	800332e <UART_SetConfig+0x1f2>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4a51      	ldr	r2, [pc, #324]	; (8003440 <UART_SetConfig+0x304>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d817      	bhi.n	800332e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	b29a      	uxth	r2, r3
 8003302:	200a      	movs	r0, #10
 8003304:	183b      	adds	r3, r7, r0
 8003306:	210f      	movs	r1, #15
 8003308:	438a      	bics	r2, r1
 800330a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	b29b      	uxth	r3, r3
 8003312:	2207      	movs	r2, #7
 8003314:	4013      	ands	r3, r2
 8003316:	b299      	uxth	r1, r3
 8003318:	183b      	adds	r3, r7, r0
 800331a:	183a      	adds	r2, r7, r0
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	183a      	adds	r2, r7, r0
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e06c      	b.n	8003408 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800332e:	2317      	movs	r3, #23
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e067      	b.n	8003408 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8003338:	231f      	movs	r3, #31
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d01b      	beq.n	800337a <UART_SetConfig+0x23e>
 8003342:	dc02      	bgt.n	800334a <UART_SetConfig+0x20e>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <UART_SetConfig+0x218>
 8003348:	e049      	b.n	80033de <UART_SetConfig+0x2a2>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d024      	beq.n	8003398 <UART_SetConfig+0x25c>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d035      	beq.n	80033be <UART_SetConfig+0x282>
 8003352:	e044      	b.n	80033de <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7ff fad6 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8003358:	0003      	movs	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	085a      	lsrs	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	18d2      	adds	r2, r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0019      	movs	r1, r3
 800336c:	0010      	movs	r0, r2
 800336e:	f7fc fecb 	bl	8000108 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	b29b      	uxth	r3, r3
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e036      	b.n	80033e8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	4a30      	ldr	r2, [pc, #192]	; (8003444 <UART_SetConfig+0x308>)
 8003382:	189a      	adds	r2, r3, r2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f7fc febc 	bl	8000108 <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	b29b      	uxth	r3, r3
 8003394:	61bb      	str	r3, [r7, #24]
        break;
 8003396:	e027      	b.n	80033e8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003398:	f7ff fa46 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 800339c:	0003      	movs	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085a      	lsrs	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f7fc fea9 	bl	8000108 <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	61bb      	str	r3, [r7, #24]
        break;
 80033bc:	e014      	b.n	80033e8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	085b      	lsrs	r3, r3, #1
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	0212      	lsls	r2, r2, #8
 80033c8:	189a      	adds	r2, r3, r2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0019      	movs	r1, r3
 80033d0:	0010      	movs	r0, r2
 80033d2:	f7fc fe99 	bl	8000108 <__udivsi3>
 80033d6:	0003      	movs	r3, r0
 80033d8:	b29b      	uxth	r3, r3
 80033da:	61bb      	str	r3, [r7, #24]
        break;
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80033de:	2317      	movs	r3, #23
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
        break;
 80033e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d908      	bls.n	8003400 <UART_SetConfig+0x2c4>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <UART_SetConfig+0x304>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d804      	bhi.n	8003400 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	e003      	b.n	8003408 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003400:	2317      	movs	r3, #23
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003414:	2317      	movs	r3, #23
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b008      	add	sp, #32
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	ffff69f3 	.word	0xffff69f3
 8003428:	ffffcfff 	.word	0xffffcfff
 800342c:	fffff4ff 	.word	0xfffff4ff
 8003430:	40013800 	.word	0x40013800
 8003434:	40021000 	.word	0x40021000
 8003438:	40004400 	.word	0x40004400
 800343c:	00f42400 	.word	0x00f42400
 8003440:	0000ffff 	.word	0x0000ffff
 8003444:	007a1200 	.word	0x007a1200

08003448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
 8003458:	d00b      	beq.n	8003472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a4a      	ldr	r2, [pc, #296]	; (800358c <UART_AdvFeatureConfig+0x144>)
 8003462:	4013      	ands	r3, r2
 8003464:	0019      	movs	r1, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d00b      	beq.n	8003494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a43      	ldr	r2, [pc, #268]	; (8003590 <UART_AdvFeatureConfig+0x148>)
 8003484:	4013      	ands	r3, r2
 8003486:	0019      	movs	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	2204      	movs	r2, #4
 800349a:	4013      	ands	r3, r2
 800349c:	d00b      	beq.n	80034b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a3b      	ldr	r2, [pc, #236]	; (8003594 <UART_AdvFeatureConfig+0x14c>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2208      	movs	r2, #8
 80034bc:	4013      	ands	r3, r2
 80034be:	d00b      	beq.n	80034d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <UART_AdvFeatureConfig+0x150>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2210      	movs	r2, #16
 80034de:	4013      	ands	r3, r2
 80034e0:	d00b      	beq.n	80034fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a2c      	ldr	r2, [pc, #176]	; (800359c <UART_AdvFeatureConfig+0x154>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2220      	movs	r2, #32
 8003500:	4013      	ands	r3, r2
 8003502:	d00b      	beq.n	800351c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <UART_AdvFeatureConfig+0x158>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2240      	movs	r2, #64	; 0x40
 8003522:	4013      	ands	r3, r2
 8003524:	d01d      	beq.n	8003562 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <UART_AdvFeatureConfig+0x15c>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	035b      	lsls	r3, r3, #13
 8003546:	429a      	cmp	r2, r3
 8003548:	d10b      	bne.n	8003562 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <UART_AdvFeatureConfig+0x160>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	4013      	ands	r3, r2
 800356a:	d00b      	beq.n	8003584 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4a0e      	ldr	r2, [pc, #56]	; (80035ac <UART_AdvFeatureConfig+0x164>)
 8003574:	4013      	ands	r3, r2
 8003576:	0019      	movs	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}
 800358c:	fffdffff 	.word	0xfffdffff
 8003590:	fffeffff 	.word	0xfffeffff
 8003594:	fffbffff 	.word	0xfffbffff
 8003598:	ffff7fff 	.word	0xffff7fff
 800359c:	ffffefff 	.word	0xffffefff
 80035a0:	ffffdfff 	.word	0xffffdfff
 80035a4:	ffefffff 	.word	0xffefffff
 80035a8:	ff9fffff 	.word	0xff9fffff
 80035ac:	fff7ffff 	.word	0xfff7ffff

080035b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035be:	f7fd fd35 	bl	800102c <HAL_GetTick>
 80035c2:	0003      	movs	r3, r0
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2208      	movs	r2, #8
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d10d      	bne.n	80035f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	0399      	lsls	r1, r3, #14
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <UART_CheckIdleState+0x88>)
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	0013      	movs	r3, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	f000 f82a 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d001      	beq.n	80035f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e01f      	b.n	8003630 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d10d      	bne.n	800361a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	03d9      	lsls	r1, r3, #15
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <UART_CheckIdleState+0x88>)
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	0013      	movs	r3, r2
 800360c:	2200      	movs	r2, #0
 800360e:	f000 f815 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e00a      	b.n	8003630 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2270      	movs	r2, #112	; 0x70
 800362a:	2100      	movs	r1, #0
 800362c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}
 8003638:	01ffffff 	.word	0x01ffffff

0800363c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	e05d      	b.n	800370a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3301      	adds	r3, #1
 8003652:	d05a      	beq.n	800370a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003654:	f7fd fcea 	bl	800102c <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11b      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	492f      	ldr	r1, [pc, #188]	; (8003734 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	438a      	bics	r2, r1
 8003688:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2270      	movs	r2, #112	; 0x70
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e043      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2204      	movs	r2, #4
 80036aa:	4013      	ands	r3, r2
 80036ac:	d02d      	beq.n	800370a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	401a      	ands	r2, r3
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	429a      	cmp	r2, r3
 80036c0:	d123      	bne.n	800370a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	0112      	lsls	r2, r2, #4
 80036ca:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4917      	ldr	r1, [pc, #92]	; (8003734 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036d8:	400a      	ands	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2270      	movs	r2, #112	; 0x70
 8003702:	2100      	movs	r1, #0
 8003704:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e00f      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4013      	ands	r3, r2
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	425a      	negs	r2, r3
 800371a:	4153      	adcs	r3, r2
 800371c:	b2db      	uxtb	r3, r3
 800371e:	001a      	movs	r2, r3
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d092      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	fffffe5f 	.word	0xfffffe5f

08003738 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	0002      	movs	r2, r0
 8003740:	1dbb      	adds	r3, r7, #6
 8003742:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003748:	1dbb      	adds	r3, r7, #6
 800374a:	2200      	movs	r2, #0
 800374c:	5e9b      	ldrsh	r3, [r3, r2]
 800374e:	2b84      	cmp	r3, #132	; 0x84
 8003750:	d006      	beq.n	8003760 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003752:	1dbb      	adds	r3, r7, #6
 8003754:	2200      	movs	r2, #0
 8003756:	5e9a      	ldrsh	r2, [r3, r2]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	18d3      	adds	r3, r2, r3
 800375c:	3303      	adds	r3, #3
 800375e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}

0800376a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800376e:	f001 f92f 	bl	80049d0 <vTaskStartScheduler>
  
  return osOK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800377a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377c:	b089      	sub	sp, #36	; 0x24
 800377e:	af04      	add	r7, sp, #16
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <osThreadCreate+0x54>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01c      	beq.n	80037ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685c      	ldr	r4, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681d      	ldr	r5, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691e      	ldr	r6, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2208      	movs	r2, #8
 80037a4:	5e9b      	ldrsh	r3, [r3, r2]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff ffc6 	bl	8003738 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	9201      	str	r2, [sp, #4]
 80037ba:	9000      	str	r0, [sp, #0]
 80037bc:	000b      	movs	r3, r1
 80037be:	0032      	movs	r2, r6
 80037c0:	0029      	movs	r1, r5
 80037c2:	0020      	movs	r0, r4
 80037c4:	f000 ff71 	bl	80046aa <xTaskCreateStatic>
 80037c8:	0003      	movs	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	e01d      	b.n	800380a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685c      	ldr	r4, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037da:	b29e      	uxth	r6, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2208      	movs	r2, #8
 80037e0:	5e9b      	ldrsh	r3, [r3, r2]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7ff ffa8 	bl	8003738 <makeFreeRtosPriority>
 80037e8:	0001      	movs	r1, r0
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	230c      	movs	r3, #12
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	9100      	str	r1, [sp, #0]
 80037f4:	0013      	movs	r3, r2
 80037f6:	0032      	movs	r2, r6
 80037f8:	0029      	movs	r1, r5
 80037fa:	0020      	movs	r0, r4
 80037fc:	f000 ff98 	bl	8004730 <xTaskCreate>
 8003800:	0003      	movs	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b005      	add	sp, #20
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003814 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <osDelay+0x16>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	e000      	b.n	800382c <osDelay+0x18>
 800382a:	2301      	movs	r3, #1
 800382c:	0018      	movs	r0, r3
 800382e:	f001 f8a9 	bl	8004984 <vTaskDelay>
  
  return osOK;
 8003832:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b004      	add	sp, #16
 800383a:	bd80      	pop	{r7, pc}

0800383c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b085      	sub	sp, #20
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <osMessageCreate+0x38>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68dc      	ldr	r4, [r3, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	0023      	movs	r3, r4
 800386c:	f000 fbe4 	bl	8004038 <xQueueGenericCreateStatic>
 8003870:	0003      	movs	r3, r0
 8003872:	e008      	b.n	8003886 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	0019      	movs	r1, r3
 8003880:	f000 fc25 	bl	80040ce <xQueueGenericCreate>
 8003884:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b003      	add	sp, #12
 800388c:	bd90      	pop	{r4, r7, pc}
	...

08003890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800389c:	f001 f8e6 	bl	8004a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <pvPortMalloc+0x138>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038a8:	f000 f8e0 	bl	8003a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <pvPortMalloc+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4013      	ands	r3, r2
 80038b4:	d000      	beq.n	80038b8 <pvPortMalloc+0x28>
 80038b6:	e079      	b.n	80039ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80038be:	2208      	movs	r2, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2207      	movs	r2, #7
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00a      	beq.n	80038e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2207      	movs	r2, #7
 80038d2:	4393      	bics	r3, r2
 80038d4:	3308      	adds	r3, #8
 80038d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	d001      	beq.n	80038e4 <pvPortMalloc+0x54>
 80038e0:	b672      	cpsid	i
 80038e2:	e7fe      	b.n	80038e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d060      	beq.n	80039ac <pvPortMalloc+0x11c>
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <pvPortMalloc+0x140>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d85b      	bhi.n	80039ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038f4:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <pvPortMalloc+0x144>)
 80038f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80038f8:	4b36      	ldr	r3, [pc, #216]	; (80039d4 <pvPortMalloc+0x144>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038fe:	e004      	b.n	800390a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <pvPortMalloc+0x8c>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f1      	bne.n	8003900 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <pvPortMalloc+0x138>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	429a      	cmp	r2, r3
 8003924:	d042      	beq.n	80039ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2208      	movs	r2, #8
 800392c:	189b      	adds	r3, r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	2308      	movs	r3, #8
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d916      	bls.n	8003976 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	18d3      	adds	r3, r2, r3
 800394e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	d001      	beq.n	800395c <pvPortMalloc+0xcc>
 8003958:	b672      	cpsid	i
 800395a:	e7fe      	b.n	800395a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 f8db 	bl	8003b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <pvPortMalloc+0x140>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <pvPortMalloc+0x140>)
 8003982:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <pvPortMalloc+0x140>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <pvPortMalloc+0x148>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d203      	bcs.n	8003998 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <pvPortMalloc+0x140>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <pvPortMalloc+0x148>)
 8003996:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <pvPortMalloc+0x13c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039ac:	f001 f86a 	bl	8004a84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	d001      	beq.n	80039bc <pvPortMalloc+0x12c>
 80039b8:	b672      	cpsid	i
 80039ba:	e7fe      	b.n	80039ba <pvPortMalloc+0x12a>
	return pvReturn;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b006      	add	sp, #24
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	20000ef8 	.word	0x20000ef8
 80039cc:	20000f04 	.word	0x20000f04
 80039d0:	20000efc 	.word	0x20000efc
 80039d4:	20000ef0 	.word	0x20000ef0
 80039d8:	20000f00 	.word	0x20000f00

080039dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d035      	beq.n	8003a5a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039ee:	2308      	movs	r3, #8
 80039f0:	425b      	negs	r3, r3
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <vPortFree+0x88>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4013      	ands	r3, r2
 8003a06:	d101      	bne.n	8003a0c <vPortFree+0x30>
 8003a08:	b672      	cpsid	i
 8003a0a:	e7fe      	b.n	8003a0a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <vPortFree+0x3c>
 8003a14:	b672      	cpsid	i
 8003a16:	e7fe      	b.n	8003a16 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <vPortFree+0x88>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4013      	ands	r3, r2
 8003a22:	d01a      	beq.n	8003a5a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <vPortFree+0x88>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a3c:	f001 f816 	bl	8004a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <vPortFree+0x8c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	18d2      	adds	r2, r2, r3
 8003a4a:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <vPortFree+0x8c>)
 8003a4c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f86b 	bl	8003b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a56:	f001 f815 	bl	8004a84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	20000f04 	.word	0x20000f04
 8003a68:	20000efc 	.word	0x20000efc

08003a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a72:	23c0      	movs	r3, #192	; 0xc0
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <prvHeapInit+0xa8>)
 8003a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4013      	ands	r3, r2
 8003a82:	d00c      	beq.n	8003a9e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3307      	adds	r3, #7
 8003a88:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	4393      	bics	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <prvHeapInit+0xa8>)
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <prvHeapInit+0xac>)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aa8:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <prvHeapInit+0xac>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	18d3      	adds	r3, r2, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	4393      	bics	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <prvHeapInit+0xb0>)
 8003aca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <prvHeapInit+0xb0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <prvHeapInit+0xb0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	1ad2      	subs	r2, r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <prvHeapInit+0xb0>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <prvHeapInit+0xb4>)
 8003af8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <prvHeapInit+0xb8>)
 8003b00:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <prvHeapInit+0xbc>)
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	0612      	lsls	r2, r2, #24
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b004      	add	sp, #16
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	200002f0 	.word	0x200002f0
 8003b18:	20000ef0 	.word	0x20000ef0
 8003b1c:	20000ef8 	.word	0x20000ef8
 8003b20:	20000f00 	.word	0x20000f00
 8003b24:	20000efc 	.word	0x20000efc
 8003b28:	20000f04 	.word	0x20000f04

08003b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b34:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <prvInsertBlockIntoFreeList+0xa8>)
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e002      	b.n	8003b40 <prvInsertBlockIntoFreeList+0x14>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d8f7      	bhi.n	8003b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	18d3      	adds	r3, r2, r3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d108      	bne.n	8003b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	18d2      	adds	r2, r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	18d2      	adds	r2, r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d118      	bne.n	8003bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b14      	ldr	r3, [pc, #80]	; (8003bd8 <prvInsertBlockIntoFreeList+0xac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d00d      	beq.n	8003baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	18d2      	adds	r2, r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e008      	b.n	8003bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <prvInsertBlockIntoFreeList+0xac>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e003      	b.n	8003bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d002      	beq.n	8003bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	20000ef0 	.word	0x20000ef0
 8003bd8:	20000ef8 	.word	0x20000ef8

08003bdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3308      	adds	r3, #8
 8003be8:	001a      	movs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4252      	negs	r2, r2
 8003bf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	001a      	movs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3308      	adds	r3, #8
 8003c04:	001a      	movs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b002      	add	sp, #8
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3301      	adds	r3, #1
 8003c86:	d103      	bne.n	8003c90 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e00c      	b.n	8003caa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3308      	adds	r3, #8
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e002      	b.n	8003c9e <vListInsert+0x2c>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d2f6      	bcs.n	8003c98 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6892      	ldr	r2, [r2, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6852      	ldr	r2, [r2, #4]
 8003cfe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d103      	bne.n	8003d12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b04      	subs	r3, #4
 8003d40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2280      	movs	r2, #128	; 0x80
 8003d46:	0452      	lsls	r2, r2, #17
 8003d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b04      	subs	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b04      	subs	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <pxPortInitialiseStack+0x50>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b14      	subs	r3, #20
 8003d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b20      	subs	r3, #32
 8003d72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	08003d85 	.word	0x08003d85

08003d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <prvTaskExitError+0x28>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	d001      	beq.n	8003d9a <prvTaskExitError+0x16>
 8003d96:	b672      	cpsid	i
 8003d98:	e7fe      	b.n	8003d98 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003d9a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0fc      	beq.n	8003d9e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000014 	.word	0x20000014

08003db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	0000      	movs	r0, r0
 8003dbc:	0000      	movs	r0, r0
	...

08003dc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <pxCurrentTCBConst2>)
 8003dc2:	6813      	ldr	r3, [r2, #0]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	3020      	adds	r0, #32
 8003dc8:	f380 8809 	msr	PSP, r0
 8003dcc:	2002      	movs	r0, #2
 8003dce:	f380 8814 	msr	CONTROL, r0
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003dd8:	46ae      	mov	lr, r5
 8003dda:	bc08      	pop	{r3}
 8003ddc:	bc04      	pop	{r2}
 8003dde:	b662      	cpsie	i
 8003de0:	4718      	bx	r3
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46c0      	nop			; (mov r8, r8)

08003df0 <pxCurrentTCBConst2>:
 8003df0:	20000f08 	.word	0x20000f08
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46c0      	nop			; (mov r8, r8)

08003df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <xPortStartScheduler+0x40>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <xPortStartScheduler+0x40>)
 8003e02:	21ff      	movs	r1, #255	; 0xff
 8003e04:	0409      	lsls	r1, r1, #16
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <xPortStartScheduler+0x40>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <xPortStartScheduler+0x40>)
 8003e10:	21ff      	movs	r1, #255	; 0xff
 8003e12:	0609      	lsls	r1, r1, #24
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003e18:	f000 f898 	bl	8003f4c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <xPortStartScheduler+0x44>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003e22:	f7ff ffcd 	bl	8003dc0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e26:	f000 ff6d 	bl	8004d04 <vTaskSwitchContext>
	prvTaskExitError();
 8003e2a:	f7ff ffab 	bl	8003d84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	e000ed20 	.word	0xe000ed20
 8003e3c:	20000014 	.word	0x20000014

08003e40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <vPortYield+0x1c>)
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	0552      	lsls	r2, r2, #21
 8003e4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003e4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003e50:	f3bf 8f6f 	isb	sy
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003e64:	b672      	cpsid	i
    uxCriticalNesting++;
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <vPortEnterCritical+0x20>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <vPortEnterCritical+0x20>)
 8003e6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003e70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003e74:	f3bf 8f6f 	isb	sy
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	20000014 	.word	0x20000014

08003e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <vPortExitCritical+0x2c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <vPortExitCritical+0x10>
 8003e90:	b672      	cpsid	i
 8003e92:	e7fe      	b.n	8003e92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <vPortExitCritical+0x2c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <vPortExitCritical+0x2c>)
 8003e9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <vPortExitCritical+0x2c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d100      	bne.n	8003ea8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003ea6:	b662      	cpsie	i
    }
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	20000014 	.word	0x20000014

08003eb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003eb4:	f3ef 8010 	mrs	r0, PRIMASK
 8003eb8:	b672      	cpsid	i
 8003eba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	0018      	movs	r0, r3

08003ec0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003ec0:	f380 8810 	msr	PRIMASK, r0
 8003ec4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
	...

08003ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ed0:	f3ef 8009 	mrs	r0, PSP
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <pxCurrentTCBConst>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	3820      	subs	r0, #32
 8003eda:	6010      	str	r0, [r2, #0]
 8003edc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003ede:	4644      	mov	r4, r8
 8003ee0:	464d      	mov	r5, r9
 8003ee2:	4656      	mov	r6, sl
 8003ee4:	465f      	mov	r7, fp
 8003ee6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003ee8:	b508      	push	{r3, lr}
 8003eea:	b672      	cpsid	i
 8003eec:	f000 ff0a 	bl	8004d04 <vTaskSwitchContext>
 8003ef0:	b662      	cpsie	i
 8003ef2:	bc0c      	pop	{r2, r3}
 8003ef4:	6811      	ldr	r1, [r2, #0]
 8003ef6:	6808      	ldr	r0, [r1, #0]
 8003ef8:	3010      	adds	r0, #16
 8003efa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003efc:	46a0      	mov	r8, r4
 8003efe:	46a9      	mov	r9, r5
 8003f00:	46b2      	mov	sl, r6
 8003f02:	46bb      	mov	fp, r7
 8003f04:	f380 8809 	msr	PSP, r0
 8003f08:	3820      	subs	r0, #32
 8003f0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003f0c:	4718      	bx	r3
 8003f0e:	46c0      	nop			; (mov r8, r8)

08003f10 <pxCurrentTCBConst>:
 8003f10:	20000f08 	.word	0x20000f08
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46c0      	nop			; (mov r8, r8)

08003f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f1e:	f7ff ffc9 	bl	8003eb4 <ulSetInterruptMaskFromISR>
 8003f22:	0003      	movs	r3, r0
 8003f24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f26:	f000 fe39 	bl	8004b9c <xTaskIncrementTick>
 8003f2a:	1e03      	subs	r3, r0, #0
 8003f2c:	d003      	beq.n	8003f36 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <SysTick_Handler+0x30>)
 8003f30:	2280      	movs	r2, #128	; 0x80
 8003f32:	0552      	lsls	r2, r2, #21
 8003f34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff ffc1 	bl	8003ec0 <vClearInterruptMaskFromISR>
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b002      	add	sp, #8
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <prvSetupTimerInterrupt+0x34>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <prvSetupTimerInterrupt+0x38>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <prvSetupTimerInterrupt+0x3c>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	23fa      	movs	r3, #250	; 0xfa
 8003f62:	0099      	lsls	r1, r3, #2
 8003f64:	0010      	movs	r0, r2
 8003f66:	f7fc f8cf 	bl	8000108 <__udivsi3>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <prvSetupTimerInterrupt+0x40>)
 8003f70:	3a01      	subs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003f74:	4b02      	ldr	r3, [pc, #8]	; (8003f80 <prvSetupTimerInterrupt+0x34>)
 8003f76:	2207      	movs	r2, #7
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	e000e010 	.word	0xe000e010
 8003f84:	e000e018 	.word	0xe000e018
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	e000e014 	.word	0xe000e014

08003f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <xQueueGenericReset+0x18>
 8003fa4:	b672      	cpsid	i
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003fa8:	f7ff ff5a 	bl	8003e60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	434b      	muls	r3, r1
 8003fba:	18d2      	adds	r2, r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	1e59      	subs	r1, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	434b      	muls	r3, r1
 8003fde:	18d2      	adds	r2, r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2244      	movs	r2, #68	; 0x44
 8003fe8:	21ff      	movs	r1, #255	; 0xff
 8003fea:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2245      	movs	r2, #69	; 0x45
 8003ff0:	21ff      	movs	r1, #255	; 0xff
 8003ff2:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d013      	beq.n	800402a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3310      	adds	r3, #16
 8004006:	0018      	movs	r0, r3
 8004008:	f000 feec 	bl	8004de4 <xTaskRemoveFromEventList>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d00c      	beq.n	800402a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004010:	f7ff ff16 	bl	8003e40 <vPortYield>
 8004014:	e009      	b.n	800402a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3310      	adds	r3, #16
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff fdde 	bl	8003bdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fdd9 	bl	8003bdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800402a:	f7ff ff2b 	bl	8003e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800402e:	2301      	movs	r3, #1
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b004      	add	sp, #16
 8004036:	bd80      	pop	{r7, pc}

08004038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <xQueueGenericCreateStatic+0x18>
 800404c:	b672      	cpsid	i
 800404e:	e7fe      	b.n	800404e <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <xQueueGenericCreateStatic+0x22>
 8004056:	b672      	cpsid	i
 8004058:	e7fe      	b.n	8004058 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <xQueueGenericCreateStatic+0x2e>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <xQueueGenericCreateStatic+0x32>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericCreateStatic+0x34>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <xQueueGenericCreateStatic+0x3c>
 8004070:	b672      	cpsid	i
 8004072:	e7fe      	b.n	8004072 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <xQueueGenericCreateStatic+0x48>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <xQueueGenericCreateStatic+0x4c>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <xQueueGenericCreateStatic+0x4e>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <xQueueGenericCreateStatic+0x56>
 800408a:	b672      	cpsid	i
 800408c:	e7fe      	b.n	800408c <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800408e:	2348      	movs	r3, #72	; 0x48
 8004090:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b48      	cmp	r3, #72	; 0x48
 8004096:	d001      	beq.n	800409c <xQueueGenericCreateStatic+0x64>
 8004098:	b672      	cpsid	i
 800409a:	e7fe      	b.n	800409a <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2246      	movs	r2, #70	; 0x46
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	2328      	movs	r3, #40	; 0x28
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	781c      	ldrb	r4, [r3, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	0023      	movs	r3, r4
 80040c0:	f000 f83b 	bl	800413a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040c4:	697b      	ldr	r3, [r7, #20]
	}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b007      	add	sp, #28
 80040cc:	bd90      	pop	{r4, r7, pc}

080040ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040ce:	b590      	push	{r4, r7, lr}
 80040d0:	b08b      	sub	sp, #44	; 0x2c
 80040d2:	af02      	add	r7, sp, #8
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	1dfb      	adds	r3, r7, #7
 80040da:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xQueueGenericCreate+0x18>
 80040e2:	b672      	cpsid	i
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e003      	b.n	80040fa <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	4353      	muls	r3, r2
 80040f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3348      	adds	r3, #72	; 0x48
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fbc6 	bl	8003890 <pvPortMalloc>
 8004104:	0003      	movs	r3, r0
 8004106:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d010      	beq.n	8004130 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2246      	movs	r2, #70	; 0x46
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800411c:	1dfb      	adds	r3, r7, #7
 800411e:	781c      	ldrb	r4, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	0023      	movs	r3, r4
 800412c:	f000 f805 	bl	800413a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004130:	69bb      	ldr	r3, [r7, #24]
	}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b009      	add	sp, #36	; 0x24
 8004138:	bd90      	pop	{r4, r7, pc}

0800413a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
 8004146:	001a      	movs	r2, r3
 8004148:	1cfb      	adds	r3, r7, #3
 800414a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e002      	b.n	8004160 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2101      	movs	r1, #1
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff ff0d 	bl	8003f90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}

0800417e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08a      	sub	sp, #40	; 0x28
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800418c:	2300      	movs	r3, #0
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <xQueueGenericSend+0x20>
 800419a:	b672      	cpsid	i
 800419c:	e7fe      	b.n	800419c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <xQueueGenericSend+0x2e>
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueGenericSend+0x32>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueGenericSend+0x34>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x3c>
 80041b6:	b672      	cpsid	i
 80041b8:	e7fe      	b.n	80041b8 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d103      	bne.n	80041c8 <xQueueGenericSend+0x4a>
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <xQueueGenericSend+0x4e>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <xQueueGenericSend+0x50>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <xQueueGenericSend+0x58>
 80041d2:	b672      	cpsid	i
 80041d4:	e7fe      	b.n	80041d4 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d6:	f000 ff9d 	bl	8005114 <xTaskGetSchedulerState>
 80041da:	1e03      	subs	r3, r0, #0
 80041dc:	d102      	bne.n	80041e4 <xQueueGenericSend+0x66>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <xQueueGenericSend+0x6a>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <xQueueGenericSend+0x6c>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSend+0x74>
 80041ee:	b672      	cpsid	i
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041f2:	f7ff fe35 	bl	8003e60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <xQueueGenericSend+0x8a>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d11e      	bne.n	8004246 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	0018      	movs	r0, r3
 8004210:	f000 f92e 	bl	8004470 <prvCopyDataToQueue>
 8004214:	0003      	movs	r3, r0
 8004216:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	3324      	adds	r3, #36	; 0x24
 8004224:	0018      	movs	r0, r3
 8004226:	f000 fddd 	bl	8004de4 <xTaskRemoveFromEventList>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d007      	beq.n	800423e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800422e:	f7ff fe07 	bl	8003e40 <vPortYield>
 8004232:	e004      	b.n	800423e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800423a:	f7ff fe01 	bl	8003e40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800423e:	f7ff fe21 	bl	8003e84 <vPortExitCritical>
				return pdPASS;
 8004242:	2301      	movs	r3, #1
 8004244:	e05b      	b.n	80042fe <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800424c:	f7ff fe1a 	bl	8003e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004250:	2300      	movs	r3, #0
 8004252:	e054      	b.n	80042fe <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800425a:	2314      	movs	r3, #20
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	0018      	movs	r0, r3
 8004260:	f000 fe1c 	bl	8004e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004268:	f7ff fe0c 	bl	8003e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800426c:	f000 fbfe 	bl	8004a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004270:	f7ff fdf6 	bl	8003e60 <vPortEnterCritical>
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2244      	movs	r2, #68	; 0x44
 8004278:	5c9b      	ldrb	r3, [r3, r2]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	d103      	bne.n	8004288 <xQueueGenericSend+0x10a>
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2244      	movs	r2, #68	; 0x44
 8004284:	2100      	movs	r1, #0
 8004286:	5499      	strb	r1, [r3, r2]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2245      	movs	r2, #69	; 0x45
 800428c:	5c9b      	ldrb	r3, [r3, r2]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	3301      	adds	r3, #1
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x11e>
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	2245      	movs	r2, #69	; 0x45
 8004298:	2100      	movs	r1, #0
 800429a:	5499      	strb	r1, [r3, r2]
 800429c:	f7ff fdf2 	bl	8003e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a0:	1d3a      	adds	r2, r7, #4
 80042a2:	2314      	movs	r3, #20
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	0011      	movs	r1, r2
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fe0b 	bl	8004ec4 <xTaskCheckForTimeOut>
 80042ae:	1e03      	subs	r3, r0, #0
 80042b0:	d11e      	bne.n	80042f0 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f9e0 	bl	800467a <prvIsQueueFull>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d011      	beq.n	80042e2 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	3310      	adds	r3, #16
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fd6e 	bl	8004da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f95f 	bl	8004592 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042d4:	f000 fbd6 	bl	8004a84 <xTaskResumeAll>
 80042d8:	1e03      	subs	r3, r0, #0
 80042da:	d18a      	bne.n	80041f2 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80042dc:	f7ff fdb0 	bl	8003e40 <vPortYield>
 80042e0:	e787      	b.n	80041f2 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 f954 	bl	8004592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ea:	f000 fbcb 	bl	8004a84 <xTaskResumeAll>
 80042ee:	e780      	b.n	80041f2 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 f94d 	bl	8004592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042f8:	f000 fbc4 	bl	8004a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042fc:	2300      	movs	r3, #0
		}
	}
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b00a      	add	sp, #40	; 0x28
 8004304:	bd80      	pop	{r7, pc}

08004306 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b08a      	sub	sp, #40	; 0x28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <xQueueReceive+0x1e>
 8004320:	b672      	cpsid	i
 8004322:	e7fe      	b.n	8004322 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <xQueueReceive+0x2c>
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <xQueueReceive+0x30>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueReceive+0x32>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <xQueueReceive+0x3a>
 800433c:	b672      	cpsid	i
 800433e:	e7fe      	b.n	800433e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004340:	f000 fee8 	bl	8005114 <xTaskGetSchedulerState>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d102      	bne.n	800434e <xQueueReceive+0x48>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <xQueueReceive+0x4c>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueReceive+0x4e>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <xQueueReceive+0x56>
 8004358:	b672      	cpsid	i
 800435a:	e7fe      	b.n	800435a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800435c:	f7ff fd80 	bl	8003e60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f000 f8e7 	bl	8004546 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	1e5a      	subs	r2, r3, #1
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	3310      	adds	r3, #16
 800438c:	0018      	movs	r0, r3
 800438e:	f000 fd29 	bl	8004de4 <xTaskRemoveFromEventList>
 8004392:	1e03      	subs	r3, r0, #0
 8004394:	d001      	beq.n	800439a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004396:	f7ff fd53 	bl	8003e40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800439a:	f7ff fd73 	bl	8003e84 <vPortExitCritical>
				return pdPASS;
 800439e:	2301      	movs	r3, #1
 80043a0:	e062      	b.n	8004468 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043a8:	f7ff fd6c 	bl	8003e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e05b      	b.n	8004468 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b6:	2314      	movs	r3, #20
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fd6e 	bl	8004e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043c0:	2301      	movs	r3, #1
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043c4:	f7ff fd5e 	bl	8003e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043c8:	f000 fb50 	bl	8004a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043cc:	f7ff fd48 	bl	8003e60 <vPortEnterCritical>
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	2244      	movs	r2, #68	; 0x44
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	d103      	bne.n	80043e4 <xQueueReceive+0xde>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	2244      	movs	r2, #68	; 0x44
 80043e0:	2100      	movs	r1, #0
 80043e2:	5499      	strb	r1, [r3, r2]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2245      	movs	r2, #69	; 0x45
 80043e8:	5c9b      	ldrb	r3, [r3, r2]
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	d103      	bne.n	80043f8 <xQueueReceive+0xf2>
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2245      	movs	r2, #69	; 0x45
 80043f4:	2100      	movs	r1, #0
 80043f6:	5499      	strb	r1, [r3, r2]
 80043f8:	f7ff fd44 	bl	8003e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fc:	1d3a      	adds	r2, r7, #4
 80043fe:	2314      	movs	r3, #20
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	0011      	movs	r1, r2
 8004404:	0018      	movs	r0, r3
 8004406:	f000 fd5d 	bl	8004ec4 <xTaskCheckForTimeOut>
 800440a:	1e03      	subs	r3, r0, #0
 800440c:	d11e      	bne.n	800444c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f91c 	bl	800464e <prvIsQueueEmpty>
 8004416:	1e03      	subs	r3, r0, #0
 8004418:	d011      	beq.n	800443e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	3324      	adds	r3, #36	; 0x24
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	0011      	movs	r1, r2
 8004422:	0018      	movs	r0, r3
 8004424:	f000 fcc0 	bl	8004da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	0018      	movs	r0, r3
 800442c:	f000 f8b1 	bl	8004592 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004430:	f000 fb28 	bl	8004a84 <xTaskResumeAll>
 8004434:	1e03      	subs	r3, r0, #0
 8004436:	d191      	bne.n	800435c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004438:	f7ff fd02 	bl	8003e40 <vPortYield>
 800443c:	e78e      	b.n	800435c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f8a6 	bl	8004592 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004446:	f000 fb1d 	bl	8004a84 <xTaskResumeAll>
 800444a:	e787      	b.n	800435c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f89f 	bl	8004592 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004454:	f000 fb16 	bl	8004a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 f8f7 	bl	800464e <prvIsQueueEmpty>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d100      	bne.n	8004466 <xQueueReceive+0x160>
 8004464:	e77a      	b.n	800435c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004466:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b00a      	add	sp, #40	; 0x28
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10e      	bne.n	80044ac <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d14e      	bne.n	8004534 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	0018      	movs	r0, r3
 800449c:	f000 fe56 	bl	800514c <xTaskPriorityDisinherit>
 80044a0:	0003      	movs	r3, r0
 80044a2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e043      	b.n	8004534 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d119      	bne.n	80044e6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6898      	ldr	r0, [r3, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	0019      	movs	r1, r3
 80044be:	f000 ff1f 	bl	8005300 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	18d2      	adds	r2, r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d32b      	bcc.n	8004534 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	e026      	b.n	8004534 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68d8      	ldr	r0, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0019      	movs	r1, r3
 80044f2:	f000 ff05 	bl	8005300 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	425b      	negs	r3, r3
 8004500:	18d2      	adds	r2, r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d207      	bcs.n	8004522 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	425b      	negs	r3, r3
 800451c:	18d2      	adds	r2, r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d105      	bne.n	8004534 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	3b01      	subs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b006      	add	sp, #24
 8004544:	bd80      	pop	{r7, pc}

08004546 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d018      	beq.n	800458a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	18d2      	adds	r2, r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d303      	bcc.n	800457a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	0018      	movs	r0, r3
 8004586:	f000 febb 	bl	8005300 <memcpy>
	}
}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b002      	add	sp, #8
 8004590:	bd80      	pop	{r7, pc}

08004592 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800459a:	f7ff fc61 	bl	8003e60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800459e:	230f      	movs	r3, #15
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	2145      	movs	r1, #69	; 0x45
 80045a6:	5c52      	ldrb	r2, [r2, r1]
 80045a8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045aa:	e013      	b.n	80045d4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d016      	beq.n	80045e2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 fc13 	bl	8004de4 <xTaskRemoveFromEventList>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d001      	beq.n	80045c6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045c2:	f000 fccf 	bl	8004f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045c6:	210f      	movs	r1, #15
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045d4:	230f      	movs	r3, #15
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dce5      	bgt.n	80045ac <prvUnlockQueue+0x1a>
 80045e0:	e000      	b.n	80045e4 <prvUnlockQueue+0x52>
					break;
 80045e2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2245      	movs	r2, #69	; 0x45
 80045e8:	21ff      	movs	r1, #255	; 0xff
 80045ea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80045ec:	f7ff fc4a 	bl	8003e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045f0:	f7ff fc36 	bl	8003e60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045f4:	230e      	movs	r3, #14
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	2144      	movs	r1, #68	; 0x44
 80045fc:	5c52      	ldrb	r2, [r2, r1]
 80045fe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004600:	e013      	b.n	800462a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3310      	adds	r3, #16
 800460e:	0018      	movs	r0, r3
 8004610:	f000 fbe8 	bl	8004de4 <xTaskRemoveFromEventList>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d001      	beq.n	800461c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004618:	f000 fca4 	bl	8004f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800461c:	210e      	movs	r1, #14
 800461e:	187b      	adds	r3, r7, r1
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	187b      	adds	r3, r7, r1
 8004628:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800462a:	230e      	movs	r3, #14
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	dce5      	bgt.n	8004602 <prvUnlockQueue+0x70>
 8004636:	e000      	b.n	800463a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004638:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2244      	movs	r2, #68	; 0x44
 800463e:	21ff      	movs	r1, #255	; 0xff
 8004640:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004642:	f7ff fc1f 	bl	8003e84 <vPortExitCritical>
}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}

0800464e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004656:	f7ff fc03 	bl	8003e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	e001      	b.n	800466c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800466c:	f7ff fc0a 	bl	8003e84 <vPortExitCritical>

	return xReturn;
 8004670:	68fb      	ldr	r3, [r7, #12]
}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}

0800467a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004682:	f7ff fbed 	bl	8003e60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	429a      	cmp	r2, r3
 8004690:	d102      	bne.n	8004698 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e001      	b.n	800469c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800469c:	f7ff fbf2 	bl	8003e84 <vPortExitCritical>

	return xReturn;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}

080046aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046aa:	b590      	push	{r4, r7, lr}
 80046ac:	b08d      	sub	sp, #52	; 0x34
 80046ae:	af04      	add	r7, sp, #16
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <xTaskCreateStatic+0x18>
 80046be:	b672      	cpsid	i
 80046c0:	e7fe      	b.n	80046c0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <xTaskCreateStatic+0x22>
 80046c8:	b672      	cpsid	i
 80046ca:	e7fe      	b.n	80046ca <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046cc:	2354      	movs	r3, #84	; 0x54
 80046ce:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b54      	cmp	r3, #84	; 0x54
 80046d4:	d001      	beq.n	80046da <xTaskCreateStatic+0x30>
 80046d6:	b672      	cpsid	i
 80046d8:	e7fe      	b.n	80046d8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <xTaskCreateStatic+0x78>
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01d      	beq.n	8004722 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2251      	movs	r2, #81	; 0x51
 80046f4:	2102      	movs	r1, #2
 80046f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046f8:	683c      	ldr	r4, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	2300      	movs	r3, #0
 8004702:	9303      	str	r3, [sp, #12]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	2318      	movs	r3, #24
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	0023      	movs	r3, r4
 8004714:	f000 f858 	bl	80047c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f8ce 	bl	80048bc <prvAddNewTaskToReadyList>
 8004720:	e001      	b.n	8004726 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004726:	69bb      	ldr	r3, [r7, #24]
	}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b009      	add	sp, #36	; 0x24
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b08d      	sub	sp, #52	; 0x34
 8004734:	af04      	add	r7, sp, #16
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff f8a2 	bl	8003890 <pvPortMalloc>
 800474c:	0003      	movs	r3, r0
 800474e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d010      	beq.n	8004778 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004756:	2054      	movs	r0, #84	; 0x54
 8004758:	f7ff f89a 	bl	8003890 <pvPortMalloc>
 800475c:	0003      	movs	r3, r0
 800475e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
 800476c:	e006      	b.n	800477c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	0018      	movs	r0, r3
 8004772:	f7ff f933 	bl	80039dc <vPortFree>
 8004776:	e001      	b.n	800477c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01a      	beq.n	80047b8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	2251      	movs	r2, #81	; 0x51
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800478a:	1dbb      	adds	r3, r7, #6
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	683c      	ldr	r4, [r7, #0]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	2300      	movs	r3, #0
 8004796:	9303      	str	r3, [sp, #12]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	9302      	str	r3, [sp, #8]
 800479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	0023      	movs	r3, r4
 80047a6:	f000 f80f 	bl	80047c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 f885 	bl	80048bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047b2:	2301      	movs	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e002      	b.n	80047be <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047b8:	2301      	movs	r3, #1
 80047ba:	425b      	negs	r3, r3
 80047bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047be:	69bb      	ldr	r3, [r7, #24]
	}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b009      	add	sp, #36	; 0x24
 80047c6:	bd90      	pop	{r4, r7, pc}

080047c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4936      	ldr	r1, [pc, #216]	; (80048b8 <prvInitialiseNewTask+0xf0>)
 80047de:	468c      	mov	ip, r1
 80047e0:	4463      	add	r3, ip
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2207      	movs	r2, #7
 80047ec:	4393      	bics	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2207      	movs	r2, #7
 80047f4:	4013      	ands	r3, r2
 80047f6:	d001      	beq.n	80047fc <prvInitialiseNewTask+0x34>
 80047f8:	b672      	cpsid	i
 80047fa:	e7fe      	b.n	80047fa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e013      	b.n	800482a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	18d3      	adds	r3, r2, r3
 8004808:	7818      	ldrb	r0, [r3, #0]
 800480a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480c:	2134      	movs	r1, #52	; 0x34
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	18d3      	adds	r3, r2, r3
 8004812:	185b      	adds	r3, r3, r1
 8004814:	1c02      	adds	r2, r0, #0
 8004816:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3301      	adds	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b0f      	cmp	r3, #15
 800482e:	d9e8      	bls.n	8004802 <prvInitialiseNewTask+0x3a>
 8004830:	e000      	b.n	8004834 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004832:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	2243      	movs	r2, #67	; 0x43
 8004838:	2100      	movs	r1, #0
 800483a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	2b06      	cmp	r3, #6
 8004840:	d901      	bls.n	8004846 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004842:	2306      	movs	r3, #6
 8004844:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	6a3a      	ldr	r2, [r7, #32]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	2200      	movs	r2, #0
 8004856:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	3304      	adds	r3, #4
 800485c:	0018      	movs	r0, r3
 800485e:	f7ff f9db 	bl	8003c18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	3318      	adds	r3, #24
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f9d6 	bl	8003c18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	2207      	movs	r2, #7
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004880:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	2200      	movs	r2, #0
 8004886:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2250      	movs	r2, #80	; 0x50
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff fa4a 	bl	8003d30 <pxPortInitialiseStack>
 800489c:	0002      	movs	r2, r0
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b006      	add	sp, #24
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	3fffffff 	.word	0x3fffffff

080048bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048c4:	f7ff facc 	bl	8003e60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048c8:	4b28      	ldr	r3, [pc, #160]	; (800496c <prvAddNewTaskToReadyList+0xb0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	4b27      	ldr	r3, [pc, #156]	; (800496c <prvAddNewTaskToReadyList+0xb0>)
 80048d0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80048d2:	4b27      	ldr	r3, [pc, #156]	; (8004970 <prvAddNewTaskToReadyList+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048da:	4b25      	ldr	r3, [pc, #148]	; (8004970 <prvAddNewTaskToReadyList+0xb4>)
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <prvAddNewTaskToReadyList+0xb0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d110      	bne.n	800490a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048e8:	f000 fb56 	bl	8004f98 <prvInitialiseTaskLists>
 80048ec:	e00d      	b.n	800490a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048ee:	4b21      	ldr	r3, [pc, #132]	; (8004974 <prvAddNewTaskToReadyList+0xb8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <prvAddNewTaskToReadyList+0xb4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	429a      	cmp	r2, r3
 8004902:	d802      	bhi.n	800490a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <prvAddNewTaskToReadyList+0xb4>)
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <prvAddNewTaskToReadyList+0xbc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <prvAddNewTaskToReadyList+0xbc>)
 8004912:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <prvAddNewTaskToReadyList+0xc0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d903      	bls.n	8004928 <prvAddNewTaskToReadyList+0x6c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <prvAddNewTaskToReadyList+0xc0>)
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	0013      	movs	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	189b      	adds	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a12      	ldr	r2, [pc, #72]	; (8004980 <prvAddNewTaskToReadyList+0xc4>)
 8004936:	189a      	adds	r2, r3, r2
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	0019      	movs	r1, r3
 800493e:	0010      	movs	r0, r2
 8004940:	f7ff f975 	bl	8003c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004944:	f7ff fa9e 	bl	8003e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <prvAddNewTaskToReadyList+0xb8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <prvAddNewTaskToReadyList+0xb4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	429a      	cmp	r2, r3
 800495c:	d201      	bcs.n	8004962 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800495e:	f7ff fa6f 	bl	8003e40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b002      	add	sp, #8
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	20001008 	.word	0x20001008
 8004970:	20000f08 	.word	0x20000f08
 8004974:	20001014 	.word	0x20001014
 8004978:	20001024 	.word	0x20001024
 800497c:	20001010 	.word	0x20001010
 8004980:	20000f0c 	.word	0x20000f0c

08004984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004996:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <vTaskDelay+0x48>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <vTaskDelay+0x1e>
 800499e:	b672      	cpsid	i
 80049a0:	e7fe      	b.n	80049a0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80049a2:	f000 f863 	bl	8004a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fc2a 	bl	8005204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049b0:	f000 f868 	bl	8004a84 <xTaskResumeAll>
 80049b4:	0003      	movs	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80049be:	f7ff fa3f 	bl	8003e40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20001030 	.word	0x20001030

080049d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049de:	003a      	movs	r2, r7
 80049e0:	1d39      	adds	r1, r7, #4
 80049e2:	2308      	movs	r3, #8
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7fb fc1a 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049ec:	683c      	ldr	r4, [r7, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4918      	ldr	r1, [pc, #96]	; (8004a54 <vTaskStartScheduler+0x84>)
 80049f4:	4818      	ldr	r0, [pc, #96]	; (8004a58 <vTaskStartScheduler+0x88>)
 80049f6:	9202      	str	r2, [sp, #8]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	2300      	movs	r3, #0
 8004a00:	0022      	movs	r2, r4
 8004a02:	f7ff fe52 	bl	80046aa <xTaskCreateStatic>
 8004a06:	0002      	movs	r2, r0
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <vTaskStartScheduler+0x8c>)
 8004a0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <vTaskStartScheduler+0x8c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e001      	b.n	8004a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10d      	bne.n	8004a40 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004a24:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <vTaskStartScheduler+0x90>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4252      	negs	r2, r2
 8004a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <vTaskStartScheduler+0x94>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <vTaskStartScheduler+0x98>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a3a:	f7ff f9dd 	bl	8003df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a3e:	e004      	b.n	8004a4a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	d101      	bne.n	8004a4a <vTaskStartScheduler+0x7a>
 8004a46:	b672      	cpsid	i
 8004a48:	e7fe      	b.n	8004a48 <vTaskStartScheduler+0x78>
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b005      	add	sp, #20
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	08006320 	.word	0x08006320
 8004a58:	08004f79 	.word	0x08004f79
 8004a5c:	2000102c 	.word	0x2000102c
 8004a60:	20001028 	.word	0x20001028
 8004a64:	20001014 	.word	0x20001014
 8004a68:	2000100c 	.word	0x2000100c

08004a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <vTaskSuspendAll+0x14>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <vTaskSuspendAll+0x14>)
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20001030 	.word	0x20001030

08004a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a92:	4b3a      	ldr	r3, [pc, #232]	; (8004b7c <xTaskResumeAll+0xf8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <xTaskResumeAll+0x1a>
 8004a9a:	b672      	cpsid	i
 8004a9c:	e7fe      	b.n	8004a9c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a9e:	f7ff f9df 	bl	8003e60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004aa2:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <xTaskResumeAll+0xf8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1e5a      	subs	r2, r3, #1
 8004aa8:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <xTaskResumeAll+0xf8>)
 8004aaa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aac:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <xTaskResumeAll+0xf8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d15b      	bne.n	8004b6c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ab4:	4b32      	ldr	r3, [pc, #200]	; (8004b80 <xTaskResumeAll+0xfc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d057      	beq.n	8004b6c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004abc:	e02f      	b.n	8004b1e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004abe:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <xTaskResumeAll+0x100>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	0018      	movs	r0, r3
 8004acc:	f7ff f907 	bl	8003cde <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff f902 	bl	8003cde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <xTaskResumeAll+0x104>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d903      	bls.n	8004aee <xTaskResumeAll+0x6a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <xTaskResumeAll+0x104>)
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	0013      	movs	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <xTaskResumeAll+0x108>)
 8004afc:	189a      	adds	r2, r3, r2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	0019      	movs	r1, r3
 8004b04:	0010      	movs	r0, r2
 8004b06:	f7ff f892 	bl	8003c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <xTaskResumeAll+0x10c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004b18:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <xTaskResumeAll+0x110>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <xTaskResumeAll+0x100>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1cb      	bne.n	8004abe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b2c:	f000 face 	bl	80050cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <xTaskResumeAll+0x114>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00f      	beq.n	8004b5c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b3c:	f000 f82e 	bl	8004b9c <xTaskIncrementTick>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d002      	beq.n	8004b4a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <xTaskResumeAll+0x110>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f2      	bne.n	8004b3c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <xTaskResumeAll+0x114>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <xTaskResumeAll+0x110>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b68:	f7ff f96a 	bl	8003e40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b6c:	f7ff f98a 	bl	8003e84 <vPortExitCritical>

	return xAlreadyYielded;
 8004b70:	68bb      	ldr	r3, [r7, #8]
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b004      	add	sp, #16
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	20001030 	.word	0x20001030
 8004b80:	20001008 	.word	0x20001008
 8004b84:	20000fc8 	.word	0x20000fc8
 8004b88:	20001010 	.word	0x20001010
 8004b8c:	20000f0c 	.word	0x20000f0c
 8004b90:	20000f08 	.word	0x20000f08
 8004b94:	2000101c 	.word	0x2000101c
 8004b98:	20001018 	.word	0x20001018

08004b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b4c      	ldr	r3, [pc, #304]	; (8004cd8 <xTaskIncrementTick+0x13c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d000      	beq.n	8004bb0 <xTaskIncrementTick+0x14>
 8004bae:	e083      	b.n	8004cb8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bb0:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <xTaskIncrementTick+0x140>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb8:	4b48      	ldr	r3, [pc, #288]	; (8004cdc <xTaskIncrementTick+0x140>)
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d117      	bne.n	8004bf4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc4:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <xTaskIncrementTick+0x36>
 8004bce:	b672      	cpsid	i
 8004bd0:	e7fe      	b.n	8004bd0 <xTaskIncrementTick+0x34>
 8004bd2:	4b43      	ldr	r3, [pc, #268]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4b42      	ldr	r3, [pc, #264]	; (8004ce4 <xTaskIncrementTick+0x148>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <xTaskIncrementTick+0x148>)
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	4b40      	ldr	r3, [pc, #256]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <xTaskIncrementTick+0x14c>)
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f000 fa6c 	bl	80050cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bf4:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <xTaskIncrementTick+0x150>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d34e      	bcc.n	8004c9c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfe:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <xTaskIncrementTick+0x70>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <xTaskIncrementTick+0x72>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <xTaskIncrementTick+0x150>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	4252      	negs	r2, r2
 8004c18:	601a      	str	r2, [r3, #0]
					break;
 8004c1a:	e03f      	b.n	8004c9c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c1c:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <xTaskIncrementTick+0x144>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d203      	bcs.n	8004c3c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <xTaskIncrementTick+0x150>)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
						break;
 8004c3a:	e02f      	b.n	8004c9c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7ff f84c 	bl	8003cde <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3318      	adds	r3, #24
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7ff f843 	bl	8003cde <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d903      	bls.n	8004c6c <xTaskIncrementTick+0xd0>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <xTaskIncrementTick+0x154>)
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	0013      	movs	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	189b      	adds	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004c7a:	189a      	adds	r2, r3, r2
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	0019      	movs	r1, r3
 8004c82:	0010      	movs	r0, r2
 8004c84:	f7fe ffd3 	bl	8003c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d3b3      	bcc.n	8004bfe <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c9a:	e7b0      	b.n	8004bfe <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <xTaskIncrementTick+0x15c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca2:	4914      	ldr	r1, [pc, #80]	; (8004cf4 <xTaskIncrementTick+0x158>)
 8004ca4:	0013      	movs	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	189b      	adds	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	585b      	ldr	r3, [r3, r1]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d907      	bls.n	8004cc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <xTaskIncrementTick+0x160>)
 8004cc0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <xTaskIncrementTick+0x164>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cce:	697b      	ldr	r3, [r7, #20]
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b006      	add	sp, #24
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20001030 	.word	0x20001030
 8004cdc:	2000100c 	.word	0x2000100c
 8004ce0:	20000fc0 	.word	0x20000fc0
 8004ce4:	20000fc4 	.word	0x20000fc4
 8004ce8:	20001020 	.word	0x20001020
 8004cec:	20001028 	.word	0x20001028
 8004cf0:	20001010 	.word	0x20001010
 8004cf4:	20000f0c 	.word	0x20000f0c
 8004cf8:	20000f08 	.word	0x20000f08
 8004cfc:	20001018 	.word	0x20001018
 8004d00:	2000101c 	.word	0x2000101c

08004d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d0a:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <vTaskSwitchContext+0x90>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d12:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <vTaskSwitchContext+0x94>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d18:	e037      	b.n	8004d8a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004d1a:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <vTaskSwitchContext+0x94>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <vTaskSwitchContext+0x98>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e007      	b.n	8004d38 <vTaskSwitchContext+0x34>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <vTaskSwitchContext+0x2e>
 8004d2e:	b672      	cpsid	i
 8004d30:	e7fe      	b.n	8004d30 <vTaskSwitchContext+0x2c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	4919      	ldr	r1, [pc, #100]	; (8004da0 <vTaskSwitchContext+0x9c>)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	0013      	movs	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	189b      	adds	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	585b      	ldr	r3, [r3, r1]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ee      	beq.n	8004d28 <vTaskSwitchContext+0x24>
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <vTaskSwitchContext+0x9c>)
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d104      	bne.n	8004d7a <vTaskSwitchContext+0x76>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <vTaskSwitchContext+0xa0>)
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <vTaskSwitchContext+0x98>)
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	20001030 	.word	0x20001030
 8004d98:	2000101c 	.word	0x2000101c
 8004d9c:	20001010 	.word	0x20001010
 8004da0:	20000f0c 	.word	0x20000f0c
 8004da4:	20000f08 	.word	0x20000f08

08004da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <vTaskPlaceOnEventList+0x14>
 8004db8:	b672      	cpsid	i
 8004dba:	e7fe      	b.n	8004dba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <vTaskPlaceOnEventList+0x38>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0011      	movs	r1, r2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7fe ff52 	bl	8003c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fa16 	bl	8005204 <prvAddCurrentTaskToDelayedList>
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000f08 	.word	0x20000f08

08004de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <xTaskRemoveFromEventList+0x1a>
 8004dfa:	b672      	cpsid	i
 8004dfc:	e7fe      	b.n	8004dfc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	3318      	adds	r3, #24
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7fe ff6b 	bl	8003cde <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <xTaskRemoveFromEventList+0xa0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3304      	adds	r3, #4
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fe ff62 	bl	8003cde <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <xTaskRemoveFromEventList+0xa4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d903      	bls.n	8004e2e <xTaskRemoveFromEventList+0x4a>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <xTaskRemoveFromEventList+0xa4>)
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	0013      	movs	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <xTaskRemoveFromEventList+0xa8>)
 8004e3c:	189a      	adds	r2, r3, r2
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3304      	adds	r3, #4
 8004e42:	0019      	movs	r1, r3
 8004e44:	0010      	movs	r0, r2
 8004e46:	f7fe fef2 	bl	8003c2e <vListInsertEnd>
 8004e4a:	e007      	b.n	8004e5c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3318      	adds	r3, #24
 8004e50:	001a      	movs	r2, r3
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <xTaskRemoveFromEventList+0xac>)
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fe fee9 	bl	8003c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <xTaskRemoveFromEventList+0xb0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d905      	bls.n	8004e76 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <xTaskRemoveFromEventList+0xb4>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e001      	b.n	8004e7a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20001030 	.word	0x20001030
 8004e88:	20001010 	.word	0x20001010
 8004e8c:	20000f0c 	.word	0x20000f0c
 8004e90:	20000fc8 	.word	0x20000fc8
 8004e94:	20000f08 	.word	0x20000f08
 8004e98:	2000101c 	.word	0x2000101c

08004e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <vTaskInternalSetTimeOutState+0x20>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004eac:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <vTaskInternalSetTimeOutState+0x24>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	605a      	str	r2, [r3, #4]
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20001020 	.word	0x20001020
 8004ec0:	2000100c 	.word	0x2000100c

08004ec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <xTaskCheckForTimeOut+0x14>
 8004ed4:	b672      	cpsid	i
 8004ed6:	e7fe      	b.n	8004ed6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <xTaskCheckForTimeOut+0x1e>
 8004ede:	b672      	cpsid	i
 8004ee0:	e7fe      	b.n	8004ee0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004ee2:	f7fe ffbd 	bl	8003e60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <xTaskCheckForTimeOut+0x98>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	d102      	bne.n	8004f04 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	e024      	b.n	8004f4e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <xTaskCheckForTimeOut+0x9c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d007      	beq.n	8004f20 <xTaskCheckForTimeOut+0x5c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e016      	b.n	8004f4e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d20c      	bcs.n	8004f44 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad2      	subs	r2, r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ffaf 	bl	8004e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e004      	b.n	8004f4e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f4e:	f7fe ff99 	bl	8003e84 <vPortExitCritical>

	return xReturn;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	0018      	movs	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b006      	add	sp, #24
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	2000100c 	.word	0x2000100c
 8004f60:	20001020 	.word	0x20001020

08004f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <vTaskMissedYield+0x10>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	2000101c 	.word	0x2000101c

08004f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f80:	f000 f84e 	bl	8005020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f84:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <prvIdleTask+0x1c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d9f9      	bls.n	8004f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f8c:	f7fe ff58 	bl	8003e40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004f90:	e7f6      	b.n	8004f80 <prvIdleTask+0x8>
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	20000f0c 	.word	0x20000f0c

08004f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	e00c      	b.n	8004fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4a14      	ldr	r2, [pc, #80]	; (8005000 <prvInitialiseTaskLists+0x68>)
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7fe fe12 	bl	8003bdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b06      	cmp	r3, #6
 8004fc2:	d9ef      	bls.n	8004fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <prvInitialiseTaskLists+0x6c>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fe fe08 	bl	8003bdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <prvInitialiseTaskLists+0x70>)
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7fe fe04 	bl	8003bdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <prvInitialiseTaskLists+0x74>)
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f7fe fe00 	bl	8003bdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <prvInitialiseTaskLists+0x78>)
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7fe fdfc 	bl	8003bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <prvInitialiseTaskLists+0x7c>)
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7fe fdf8 	bl	8003bdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <prvInitialiseTaskLists+0x80>)
 8004fee:	4a05      	ldr	r2, [pc, #20]	; (8005004 <prvInitialiseTaskLists+0x6c>)
 8004ff0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <prvInitialiseTaskLists+0x84>)
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <prvInitialiseTaskLists+0x70>)
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	46c0      	nop			; (mov r8, r8)
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000f0c 	.word	0x20000f0c
 8005004:	20000f98 	.word	0x20000f98
 8005008:	20000fac 	.word	0x20000fac
 800500c:	20000fc8 	.word	0x20000fc8
 8005010:	20000fdc 	.word	0x20000fdc
 8005014:	20000ff4 	.word	0x20000ff4
 8005018:	20000fc0 	.word	0x20000fc0
 800501c:	20000fc4 	.word	0x20000fc4

08005020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005026:	e01a      	b.n	800505e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005028:	f7fe ff1a 	bl	8003e60 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <prvCheckTasksWaitingTermination+0x50>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	0018      	movs	r0, r3
 800503a:	f7fe fe50 	bl	8003cde <uxListRemove>
				--uxCurrentNumberOfTasks;
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <prvCheckTasksWaitingTermination+0x54>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <prvCheckTasksWaitingTermination+0x54>)
 8005046:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <prvCheckTasksWaitingTermination+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	1e5a      	subs	r2, r3, #1
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <prvCheckTasksWaitingTermination+0x58>)
 8005050:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005052:	f7fe ff17 	bl	8003e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f80f 	bl	800507c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <prvCheckTasksWaitingTermination+0x58>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e0      	bne.n	8005028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b002      	add	sp, #8
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20000fdc 	.word	0x20000fdc
 8005074:	20001008 	.word	0x20001008
 8005078:	20000ff0 	.word	0x20000ff0

0800507c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2251      	movs	r2, #81	; 0x51
 8005088:	5c9b      	ldrb	r3, [r3, r2]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	0018      	movs	r0, r3
 8005094:	f7fe fca2 	bl	80039dc <vPortFree>
				vPortFree( pxTCB );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	0018      	movs	r0, r3
 800509c:	f7fe fc9e 	bl	80039dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050a0:	e010      	b.n	80050c4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2251      	movs	r2, #81	; 0x51
 80050a6:	5c9b      	ldrb	r3, [r3, r2]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d104      	bne.n	80050b6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fe fc94 	bl	80039dc <vPortFree>
	}
 80050b4:	e006      	b.n	80050c4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2251      	movs	r2, #81	; 0x51
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d001      	beq.n	80050c4 <prvDeleteTCB+0x48>
 80050c0:	b672      	cpsid	i
 80050c2:	e7fe      	b.n	80050c2 <prvDeleteTCB+0x46>
	}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <prvResetNextTaskUnblockTime+0x40>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <prvResetNextTaskUnblockTime+0x14>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <prvResetNextTaskUnblockTime+0x16>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <prvResetNextTaskUnblockTime+0x44>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	4252      	negs	r2, r2
 80050ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050ee:	e008      	b.n	8005102 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <prvResetNextTaskUnblockTime+0x40>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	4b04      	ldr	r3, [pc, #16]	; (8005110 <prvResetNextTaskUnblockTime+0x44>)
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b002      	add	sp, #8
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	20000fc0 	.word	0x20000fc0
 8005110:	20001028 	.word	0x20001028

08005114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <xTaskGetSchedulerState+0x30>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005122:	2301      	movs	r3, #1
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	e008      	b.n	800513a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <xTaskGetSchedulerState+0x34>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005130:	2302      	movs	r3, #2
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e001      	b.n	800513a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800513a:	687b      	ldr	r3, [r7, #4]
	}
 800513c:	0018      	movs	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	b002      	add	sp, #8
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20001014 	.word	0x20001014
 8005148:	20001030 	.word	0x20001030

0800514c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d044      	beq.n	80051ec <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <xTaskPriorityDisinherit+0xac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <xTaskPriorityDisinherit+0x24>
 800516c:	b672      	cpsid	i
 800516e:	e7fe      	b.n	800516e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <xTaskPriorityDisinherit+0x30>
 8005178:	b672      	cpsid	i
 800517a:	e7fe      	b.n	800517a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005180:	1e5a      	subs	r2, r3, #1
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	429a      	cmp	r2, r3
 8005190:	d02c      	beq.n	80051ec <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d128      	bne.n	80051ec <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3304      	adds	r3, #4
 800519e:	0018      	movs	r0, r3
 80051a0:	f7fe fd9d 	bl	8003cde <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	2207      	movs	r2, #7
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <xTaskPriorityDisinherit+0xb0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d903      	bls.n	80051cc <xTaskPriorityDisinherit+0x80>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <xTaskPriorityDisinherit+0xb0>)
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	0013      	movs	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <xTaskPriorityDisinherit+0xb4>)
 80051da:	189a      	adds	r2, r3, r2
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3304      	adds	r3, #4
 80051e0:	0019      	movs	r1, r3
 80051e2:	0010      	movs	r0, r2
 80051e4:	f7fe fd23 	bl	8003c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051ec:	68fb      	ldr	r3, [r7, #12]
	}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	20000f08 	.word	0x20000f08
 80051fc:	20001010 	.word	0x20001010
 8005200:	20000f0c 	.word	0x20000f0c

08005204 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800520e:	4b21      	ldr	r3, [pc, #132]	; (8005294 <prvAddCurrentTaskToDelayedList+0x90>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005214:	4b20      	ldr	r3, [pc, #128]	; (8005298 <prvAddCurrentTaskToDelayedList+0x94>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3304      	adds	r3, #4
 800521a:	0018      	movs	r0, r3
 800521c:	f7fe fd5f 	bl	8003cde <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3301      	adds	r3, #1
 8005224:	d10b      	bne.n	800523e <prvAddCurrentTaskToDelayedList+0x3a>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <prvAddCurrentTaskToDelayedList+0x94>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <prvAddCurrentTaskToDelayedList+0x98>)
 8005234:	0011      	movs	r1, r2
 8005236:	0018      	movs	r0, r3
 8005238:	f7fe fcf9 	bl	8003c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800523c:	e026      	b.n	800528c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <prvAddCurrentTaskToDelayedList+0x94>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	429a      	cmp	r2, r3
 8005254:	d209      	bcs.n	800526a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005256:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <prvAddCurrentTaskToDelayedList+0x94>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3304      	adds	r3, #4
 8005260:	0019      	movs	r1, r3
 8005262:	0010      	movs	r0, r2
 8005264:	f7fe fd05 	bl	8003c72 <vListInsert>
}
 8005268:	e010      	b.n	800528c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <prvAddCurrentTaskToDelayedList+0x94>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	0019      	movs	r1, r3
 8005276:	0010      	movs	r0, r2
 8005278:	f7fe fcfb 	bl	8003c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d202      	bcs.n	800528c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b004      	add	sp, #16
 8005292:	bd80      	pop	{r7, pc}
 8005294:	2000100c 	.word	0x2000100c
 8005298:	20000f08 	.word	0x20000f08
 800529c:	20000ff4 	.word	0x20000ff4
 80052a0:	20000fc4 	.word	0x20000fc4
 80052a4:	20000fc0 	.word	0x20000fc0
 80052a8:	20001028 	.word	0x20001028

080052ac <__errno>:
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <__errno+0x8>)
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	4770      	bx	lr
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	20000018 	.word	0x20000018

080052b8 <__libc_init_array>:
 80052b8:	b570      	push	{r4, r5, r6, lr}
 80052ba:	2600      	movs	r6, #0
 80052bc:	4d0c      	ldr	r5, [pc, #48]	; (80052f0 <__libc_init_array+0x38>)
 80052be:	4c0d      	ldr	r4, [pc, #52]	; (80052f4 <__libc_init_array+0x3c>)
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	42a6      	cmp	r6, r4
 80052c6:	d109      	bne.n	80052dc <__libc_init_array+0x24>
 80052c8:	2600      	movs	r6, #0
 80052ca:	f000 ffad 	bl	8006228 <_init>
 80052ce:	4d0a      	ldr	r5, [pc, #40]	; (80052f8 <__libc_init_array+0x40>)
 80052d0:	4c0a      	ldr	r4, [pc, #40]	; (80052fc <__libc_init_array+0x44>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	42a6      	cmp	r6, r4
 80052d8:	d105      	bne.n	80052e6 <__libc_init_array+0x2e>
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	00b3      	lsls	r3, r6, #2
 80052de:	58eb      	ldr	r3, [r5, r3]
 80052e0:	4798      	blx	r3
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7ee      	b.n	80052c4 <__libc_init_array+0xc>
 80052e6:	00b3      	lsls	r3, r6, #2
 80052e8:	58eb      	ldr	r3, [r5, r3]
 80052ea:	4798      	blx	r3
 80052ec:	3601      	adds	r6, #1
 80052ee:	e7f2      	b.n	80052d6 <__libc_init_array+0x1e>
 80052f0:	080063d8 	.word	0x080063d8
 80052f4:	080063d8 	.word	0x080063d8
 80052f8:	080063d8 	.word	0x080063d8
 80052fc:	080063dc 	.word	0x080063dc

08005300 <memcpy>:
 8005300:	2300      	movs	r3, #0
 8005302:	b510      	push	{r4, lr}
 8005304:	429a      	cmp	r2, r3
 8005306:	d100      	bne.n	800530a <memcpy+0xa>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	5ccc      	ldrb	r4, [r1, r3]
 800530c:	54c4      	strb	r4, [r0, r3]
 800530e:	3301      	adds	r3, #1
 8005310:	e7f8      	b.n	8005304 <memcpy+0x4>

08005312 <memset>:
 8005312:	0003      	movs	r3, r0
 8005314:	1812      	adds	r2, r2, r0
 8005316:	4293      	cmp	r3, r2
 8005318:	d100      	bne.n	800531c <memset+0xa>
 800531a:	4770      	bx	lr
 800531c:	7019      	strb	r1, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	e7f9      	b.n	8005316 <memset+0x4>
	...

08005324 <iprintf>:
 8005324:	b40f      	push	{r0, r1, r2, r3}
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <iprintf+0x30>)
 8005328:	b513      	push	{r0, r1, r4, lr}
 800532a:	681c      	ldr	r4, [r3, #0]
 800532c:	2c00      	cmp	r4, #0
 800532e:	d005      	beq.n	800533c <iprintf+0x18>
 8005330:	69a3      	ldr	r3, [r4, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <iprintf+0x18>
 8005336:	0020      	movs	r0, r4
 8005338:	f000 fa3c 	bl	80057b4 <__sinit>
 800533c:	ab05      	add	r3, sp, #20
 800533e:	9a04      	ldr	r2, [sp, #16]
 8005340:	68a1      	ldr	r1, [r4, #8]
 8005342:	0020      	movs	r0, r4
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f000 fc05 	bl	8005b54 <_vfiprintf_r>
 800534a:	bc16      	pop	{r1, r2, r4}
 800534c:	bc08      	pop	{r3}
 800534e:	b004      	add	sp, #16
 8005350:	4718      	bx	r3
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	20000018 	.word	0x20000018

08005358 <_puts_r>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	0005      	movs	r5, r0
 800535c:	000e      	movs	r6, r1
 800535e:	2800      	cmp	r0, #0
 8005360:	d004      	beq.n	800536c <_puts_r+0x14>
 8005362:	6983      	ldr	r3, [r0, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <_puts_r+0x14>
 8005368:	f000 fa24 	bl	80057b4 <__sinit>
 800536c:	69ab      	ldr	r3, [r5, #24]
 800536e:	68ac      	ldr	r4, [r5, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <_puts_r+0x22>
 8005374:	0028      	movs	r0, r5
 8005376:	f000 fa1d 	bl	80057b4 <__sinit>
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <_puts_r+0xb4>)
 800537c:	429c      	cmp	r4, r3
 800537e:	d10f      	bne.n	80053a0 <_puts_r+0x48>
 8005380:	686c      	ldr	r4, [r5, #4]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	071b      	lsls	r3, r3, #28
 8005386:	d502      	bpl.n	800538e <_puts_r+0x36>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11f      	bne.n	80053ce <_puts_r+0x76>
 800538e:	0021      	movs	r1, r4
 8005390:	0028      	movs	r0, r5
 8005392:	f000 f8a1 	bl	80054d8 <__swsetup_r>
 8005396:	2800      	cmp	r0, #0
 8005398:	d019      	beq.n	80053ce <_puts_r+0x76>
 800539a:	2001      	movs	r0, #1
 800539c:	4240      	negs	r0, r0
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <_puts_r+0xb8>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d101      	bne.n	80053aa <_puts_r+0x52>
 80053a6:	68ac      	ldr	r4, [r5, #8]
 80053a8:	e7eb      	b.n	8005382 <_puts_r+0x2a>
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <_puts_r+0xbc>)
 80053ac:	429c      	cmp	r4, r3
 80053ae:	d1e8      	bne.n	8005382 <_puts_r+0x2a>
 80053b0:	68ec      	ldr	r4, [r5, #12]
 80053b2:	e7e6      	b.n	8005382 <_puts_r+0x2a>
 80053b4:	3601      	adds	r6, #1
 80053b6:	60a3      	str	r3, [r4, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da04      	bge.n	80053c6 <_puts_r+0x6e>
 80053bc:	69a2      	ldr	r2, [r4, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	dc16      	bgt.n	80053f0 <_puts_r+0x98>
 80053c2:	290a      	cmp	r1, #10
 80053c4:	d014      	beq.n	80053f0 <_puts_r+0x98>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	7019      	strb	r1, [r3, #0]
 80053ce:	68a3      	ldr	r3, [r4, #8]
 80053d0:	7831      	ldrb	r1, [r6, #0]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2900      	cmp	r1, #0
 80053d6:	d1ed      	bne.n	80053b4 <_puts_r+0x5c>
 80053d8:	60a3      	str	r3, [r4, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da0f      	bge.n	80053fe <_puts_r+0xa6>
 80053de:	0022      	movs	r2, r4
 80053e0:	310a      	adds	r1, #10
 80053e2:	0028      	movs	r0, r5
 80053e4:	f000 f822 	bl	800542c <__swbuf_r>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d0d6      	beq.n	800539a <_puts_r+0x42>
 80053ec:	200a      	movs	r0, #10
 80053ee:	e7d6      	b.n	800539e <_puts_r+0x46>
 80053f0:	0022      	movs	r2, r4
 80053f2:	0028      	movs	r0, r5
 80053f4:	f000 f81a 	bl	800542c <__swbuf_r>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d1e8      	bne.n	80053ce <_puts_r+0x76>
 80053fc:	e7cd      	b.n	800539a <_puts_r+0x42>
 80053fe:	200a      	movs	r0, #10
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	6022      	str	r2, [r4, #0]
 8005406:	7018      	strb	r0, [r3, #0]
 8005408:	e7c9      	b.n	800539e <_puts_r+0x46>
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	08006364 	.word	0x08006364
 8005410:	08006384 	.word	0x08006384
 8005414:	08006344 	.word	0x08006344

08005418 <puts>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4b03      	ldr	r3, [pc, #12]	; (8005428 <puts+0x10>)
 800541c:	0001      	movs	r1, r0
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	f7ff ff9a 	bl	8005358 <_puts_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000018 	.word	0x20000018

0800542c <__swbuf_r>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	0005      	movs	r5, r0
 8005430:	000e      	movs	r6, r1
 8005432:	0014      	movs	r4, r2
 8005434:	2800      	cmp	r0, #0
 8005436:	d004      	beq.n	8005442 <__swbuf_r+0x16>
 8005438:	6983      	ldr	r3, [r0, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <__swbuf_r+0x16>
 800543e:	f000 f9b9 	bl	80057b4 <__sinit>
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <__swbuf_r+0xa0>)
 8005444:	429c      	cmp	r4, r3
 8005446:	d12d      	bne.n	80054a4 <__swbuf_r+0x78>
 8005448:	686c      	ldr	r4, [r5, #4]
 800544a:	69a3      	ldr	r3, [r4, #24]
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	071b      	lsls	r3, r3, #28
 8005452:	d531      	bpl.n	80054b8 <__swbuf_r+0x8c>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02e      	beq.n	80054b8 <__swbuf_r+0x8c>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	6922      	ldr	r2, [r4, #16]
 800545e:	b2f7      	uxtb	r7, r6
 8005460:	1a98      	subs	r0, r3, r2
 8005462:	6963      	ldr	r3, [r4, #20]
 8005464:	b2f6      	uxtb	r6, r6
 8005466:	4283      	cmp	r3, r0
 8005468:	dc05      	bgt.n	8005476 <__swbuf_r+0x4a>
 800546a:	0021      	movs	r1, r4
 800546c:	0028      	movs	r0, r5
 800546e:	f000 f933 	bl	80056d8 <_fflush_r>
 8005472:	2800      	cmp	r0, #0
 8005474:	d126      	bne.n	80054c4 <__swbuf_r+0x98>
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	3001      	adds	r0, #1
 800547a:	3b01      	subs	r3, #1
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	701f      	strb	r7, [r3, #0]
 8005486:	6963      	ldr	r3, [r4, #20]
 8005488:	4283      	cmp	r3, r0
 800548a:	d004      	beq.n	8005496 <__swbuf_r+0x6a>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	07db      	lsls	r3, r3, #31
 8005490:	d51a      	bpl.n	80054c8 <__swbuf_r+0x9c>
 8005492:	2e0a      	cmp	r6, #10
 8005494:	d118      	bne.n	80054c8 <__swbuf_r+0x9c>
 8005496:	0021      	movs	r1, r4
 8005498:	0028      	movs	r0, r5
 800549a:	f000 f91d 	bl	80056d8 <_fflush_r>
 800549e:	2800      	cmp	r0, #0
 80054a0:	d012      	beq.n	80054c8 <__swbuf_r+0x9c>
 80054a2:	e00f      	b.n	80054c4 <__swbuf_r+0x98>
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <__swbuf_r+0xa4>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swbuf_r+0x82>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7cd      	b.n	800544a <__swbuf_r+0x1e>
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <__swbuf_r+0xa8>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d1ca      	bne.n	800544a <__swbuf_r+0x1e>
 80054b4:	68ec      	ldr	r4, [r5, #12]
 80054b6:	e7c8      	b.n	800544a <__swbuf_r+0x1e>
 80054b8:	0021      	movs	r1, r4
 80054ba:	0028      	movs	r0, r5
 80054bc:	f000 f80c 	bl	80054d8 <__swsetup_r>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0ca      	beq.n	800545a <__swbuf_r+0x2e>
 80054c4:	2601      	movs	r6, #1
 80054c6:	4276      	negs	r6, r6
 80054c8:	0030      	movs	r0, r6
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054cc:	08006364 	.word	0x08006364
 80054d0:	08006384 	.word	0x08006384
 80054d4:	08006344 	.word	0x08006344

080054d8 <__swsetup_r>:
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <__swsetup_r+0xdc>)
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	681d      	ldr	r5, [r3, #0]
 80054de:	0006      	movs	r6, r0
 80054e0:	000c      	movs	r4, r1
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	d005      	beq.n	80054f2 <__swsetup_r+0x1a>
 80054e6:	69ab      	ldr	r3, [r5, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <__swsetup_r+0x1a>
 80054ec:	0028      	movs	r0, r5
 80054ee:	f000 f961 	bl	80057b4 <__sinit>
 80054f2:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <__swsetup_r+0xe0>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d10f      	bne.n	8005518 <__swsetup_r+0x40>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	230c      	movs	r3, #12
 80054fc:	5ee2      	ldrsh	r2, [r4, r3]
 80054fe:	b293      	uxth	r3, r2
 8005500:	0719      	lsls	r1, r3, #28
 8005502:	d42d      	bmi.n	8005560 <__swsetup_r+0x88>
 8005504:	06d9      	lsls	r1, r3, #27
 8005506:	d411      	bmi.n	800552c <__swsetup_r+0x54>
 8005508:	2309      	movs	r3, #9
 800550a:	2001      	movs	r0, #1
 800550c:	6033      	str	r3, [r6, #0]
 800550e:	3337      	adds	r3, #55	; 0x37
 8005510:	4313      	orrs	r3, r2
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	4240      	negs	r0, r0
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	4b28      	ldr	r3, [pc, #160]	; (80055bc <__swsetup_r+0xe4>)
 800551a:	429c      	cmp	r4, r3
 800551c:	d101      	bne.n	8005522 <__swsetup_r+0x4a>
 800551e:	68ac      	ldr	r4, [r5, #8]
 8005520:	e7eb      	b.n	80054fa <__swsetup_r+0x22>
 8005522:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <__swsetup_r+0xe8>)
 8005524:	429c      	cmp	r4, r3
 8005526:	d1e8      	bne.n	80054fa <__swsetup_r+0x22>
 8005528:	68ec      	ldr	r4, [r5, #12]
 800552a:	e7e6      	b.n	80054fa <__swsetup_r+0x22>
 800552c:	075b      	lsls	r3, r3, #29
 800552e:	d513      	bpl.n	8005558 <__swsetup_r+0x80>
 8005530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005532:	2900      	cmp	r1, #0
 8005534:	d008      	beq.n	8005548 <__swsetup_r+0x70>
 8005536:	0023      	movs	r3, r4
 8005538:	3344      	adds	r3, #68	; 0x44
 800553a:	4299      	cmp	r1, r3
 800553c:	d002      	beq.n	8005544 <__swsetup_r+0x6c>
 800553e:	0030      	movs	r0, r6
 8005540:	f000 fa38 	bl	80059b4 <_free_r>
 8005544:	2300      	movs	r3, #0
 8005546:	6363      	str	r3, [r4, #52]	; 0x34
 8005548:	2224      	movs	r2, #36	; 0x24
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	4393      	bics	r3, r2
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	2300      	movs	r3, #0
 8005552:	6063      	str	r3, [r4, #4]
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	2308      	movs	r3, #8
 800555a:	89a2      	ldrh	r2, [r4, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	6923      	ldr	r3, [r4, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <__swsetup_r+0xa6>
 8005566:	21a0      	movs	r1, #160	; 0xa0
 8005568:	2280      	movs	r2, #128	; 0x80
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	0089      	lsls	r1, r1, #2
 800556e:	0092      	lsls	r2, r2, #2
 8005570:	400b      	ands	r3, r1
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <__swsetup_r+0xa6>
 8005576:	0021      	movs	r1, r4
 8005578:	0030      	movs	r0, r6
 800557a:	f000 f9d7 	bl	800592c <__smakebuf_r>
 800557e:	2301      	movs	r3, #1
 8005580:	89a2      	ldrh	r2, [r4, #12]
 8005582:	4013      	ands	r3, r2
 8005584:	d011      	beq.n	80055aa <__swsetup_r+0xd2>
 8005586:	2300      	movs	r3, #0
 8005588:	60a3      	str	r3, [r4, #8]
 800558a:	6963      	ldr	r3, [r4, #20]
 800558c:	425b      	negs	r3, r3
 800558e:	61a3      	str	r3, [r4, #24]
 8005590:	2000      	movs	r0, #0
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	4283      	cmp	r3, r0
 8005596:	d1be      	bne.n	8005516 <__swsetup_r+0x3e>
 8005598:	230c      	movs	r3, #12
 800559a:	5ee2      	ldrsh	r2, [r4, r3]
 800559c:	0613      	lsls	r3, r2, #24
 800559e:	d5ba      	bpl.n	8005516 <__swsetup_r+0x3e>
 80055a0:	2340      	movs	r3, #64	; 0x40
 80055a2:	4313      	orrs	r3, r2
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	3801      	subs	r0, #1
 80055a8:	e7b5      	b.n	8005516 <__swsetup_r+0x3e>
 80055aa:	0792      	lsls	r2, r2, #30
 80055ac:	d400      	bmi.n	80055b0 <__swsetup_r+0xd8>
 80055ae:	6963      	ldr	r3, [r4, #20]
 80055b0:	60a3      	str	r3, [r4, #8]
 80055b2:	e7ed      	b.n	8005590 <__swsetup_r+0xb8>
 80055b4:	20000018 	.word	0x20000018
 80055b8:	08006364 	.word	0x08006364
 80055bc:	08006384 	.word	0x08006384
 80055c0:	08006344 	.word	0x08006344

080055c4 <__sflush_r>:
 80055c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c6:	898a      	ldrh	r2, [r1, #12]
 80055c8:	0005      	movs	r5, r0
 80055ca:	000c      	movs	r4, r1
 80055cc:	0713      	lsls	r3, r2, #28
 80055ce:	d460      	bmi.n	8005692 <__sflush_r+0xce>
 80055d0:	684b      	ldr	r3, [r1, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	dc04      	bgt.n	80055e0 <__sflush_r+0x1c>
 80055d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc01      	bgt.n	80055e0 <__sflush_r+0x1c>
 80055dc:	2000      	movs	r0, #0
 80055de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0fa      	beq.n	80055dc <__sflush_r+0x18>
 80055e6:	2300      	movs	r3, #0
 80055e8:	682e      	ldr	r6, [r5, #0]
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	015b      	lsls	r3, r3, #5
 80055f0:	6a21      	ldr	r1, [r4, #32]
 80055f2:	401a      	ands	r2, r3
 80055f4:	d034      	beq.n	8005660 <__sflush_r+0x9c>
 80055f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	075b      	lsls	r3, r3, #29
 80055fc:	d506      	bpl.n	800560c <__sflush_r+0x48>
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	1ac0      	subs	r0, r0, r3
 8005602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <__sflush_r+0x48>
 8005608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800560a:	1ac0      	subs	r0, r0, r3
 800560c:	0002      	movs	r2, r0
 800560e:	6a21      	ldr	r1, [r4, #32]
 8005610:	2300      	movs	r3, #0
 8005612:	0028      	movs	r0, r5
 8005614:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005616:	47b8      	blx	r7
 8005618:	89a1      	ldrh	r1, [r4, #12]
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d106      	bne.n	800562c <__sflush_r+0x68>
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	2b1d      	cmp	r3, #29
 8005622:	d830      	bhi.n	8005686 <__sflush_r+0xc2>
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <__sflush_r+0x110>)
 8005626:	40da      	lsrs	r2, r3
 8005628:	07d3      	lsls	r3, r2, #31
 800562a:	d52c      	bpl.n	8005686 <__sflush_r+0xc2>
 800562c:	2300      	movs	r3, #0
 800562e:	6063      	str	r3, [r4, #4]
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	04cb      	lsls	r3, r1, #19
 8005636:	d505      	bpl.n	8005644 <__sflush_r+0x80>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <__sflush_r+0x7e>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d100      	bne.n	8005644 <__sflush_r+0x80>
 8005642:	6560      	str	r0, [r4, #84]	; 0x54
 8005644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005646:	602e      	str	r6, [r5, #0]
 8005648:	2900      	cmp	r1, #0
 800564a:	d0c7      	beq.n	80055dc <__sflush_r+0x18>
 800564c:	0023      	movs	r3, r4
 800564e:	3344      	adds	r3, #68	; 0x44
 8005650:	4299      	cmp	r1, r3
 8005652:	d002      	beq.n	800565a <__sflush_r+0x96>
 8005654:	0028      	movs	r0, r5
 8005656:	f000 f9ad 	bl	80059b4 <_free_r>
 800565a:	2000      	movs	r0, #0
 800565c:	6360      	str	r0, [r4, #52]	; 0x34
 800565e:	e7be      	b.n	80055de <__sflush_r+0x1a>
 8005660:	2301      	movs	r3, #1
 8005662:	0028      	movs	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	d1c6      	bne.n	80055f8 <__sflush_r+0x34>
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0c3      	beq.n	80055f8 <__sflush_r+0x34>
 8005670:	2b1d      	cmp	r3, #29
 8005672:	d001      	beq.n	8005678 <__sflush_r+0xb4>
 8005674:	2b16      	cmp	r3, #22
 8005676:	d101      	bne.n	800567c <__sflush_r+0xb8>
 8005678:	602e      	str	r6, [r5, #0]
 800567a:	e7af      	b.n	80055dc <__sflush_r+0x18>
 800567c:	2340      	movs	r3, #64	; 0x40
 800567e:	89a2      	ldrh	r2, [r4, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	e7ab      	b.n	80055de <__sflush_r+0x1a>
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	430b      	orrs	r3, r1
 800568a:	2001      	movs	r0, #1
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	4240      	negs	r0, r0
 8005690:	e7a5      	b.n	80055de <__sflush_r+0x1a>
 8005692:	690f      	ldr	r7, [r1, #16]
 8005694:	2f00      	cmp	r7, #0
 8005696:	d0a1      	beq.n	80055dc <__sflush_r+0x18>
 8005698:	680b      	ldr	r3, [r1, #0]
 800569a:	600f      	str	r7, [r1, #0]
 800569c:	1bdb      	subs	r3, r3, r7
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	2300      	movs	r3, #0
 80056a2:	0792      	lsls	r2, r2, #30
 80056a4:	d100      	bne.n	80056a8 <__sflush_r+0xe4>
 80056a6:	694b      	ldr	r3, [r1, #20]
 80056a8:	60a3      	str	r3, [r4, #8]
 80056aa:	9b01      	ldr	r3, [sp, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dc00      	bgt.n	80056b2 <__sflush_r+0xee>
 80056b0:	e794      	b.n	80055dc <__sflush_r+0x18>
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	003a      	movs	r2, r7
 80056b6:	6a21      	ldr	r1, [r4, #32]
 80056b8:	0028      	movs	r0, r5
 80056ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056bc:	47b0      	blx	r6
 80056be:	2800      	cmp	r0, #0
 80056c0:	dc03      	bgt.n	80056ca <__sflush_r+0x106>
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	89a2      	ldrh	r2, [r4, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	e7df      	b.n	800568a <__sflush_r+0xc6>
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	183f      	adds	r7, r7, r0
 80056ce:	1a1b      	subs	r3, r3, r0
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	e7ea      	b.n	80056aa <__sflush_r+0xe6>
 80056d4:	20400001 	.word	0x20400001

080056d8 <_fflush_r>:
 80056d8:	690b      	ldr	r3, [r1, #16]
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	0005      	movs	r5, r0
 80056de:	000c      	movs	r4, r1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <_fflush_r+0x10>
 80056e4:	2000      	movs	r0, #0
 80056e6:	bd70      	pop	{r4, r5, r6, pc}
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d004      	beq.n	80056f6 <_fflush_r+0x1e>
 80056ec:	6983      	ldr	r3, [r0, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <_fflush_r+0x1e>
 80056f2:	f000 f85f 	bl	80057b4 <__sinit>
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <_fflush_r+0x4c>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d109      	bne.n	8005710 <_fflush_r+0x38>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	220c      	movs	r2, #12
 8005700:	5ea3      	ldrsh	r3, [r4, r2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d0ee      	beq.n	80056e4 <_fflush_r+0xc>
 8005706:	0021      	movs	r1, r4
 8005708:	0028      	movs	r0, r5
 800570a:	f7ff ff5b 	bl	80055c4 <__sflush_r>
 800570e:	e7ea      	b.n	80056e6 <_fflush_r+0xe>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_fflush_r+0x50>)
 8005712:	429c      	cmp	r4, r3
 8005714:	d101      	bne.n	800571a <_fflush_r+0x42>
 8005716:	68ac      	ldr	r4, [r5, #8]
 8005718:	e7f1      	b.n	80056fe <_fflush_r+0x26>
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <_fflush_r+0x54>)
 800571c:	429c      	cmp	r4, r3
 800571e:	d1ee      	bne.n	80056fe <_fflush_r+0x26>
 8005720:	68ec      	ldr	r4, [r5, #12]
 8005722:	e7ec      	b.n	80056fe <_fflush_r+0x26>
 8005724:	08006364 	.word	0x08006364
 8005728:	08006384 	.word	0x08006384
 800572c:	08006344 	.word	0x08006344

08005730 <std>:
 8005730:	2300      	movs	r3, #0
 8005732:	b510      	push	{r4, lr}
 8005734:	0004      	movs	r4, r0
 8005736:	6003      	str	r3, [r0, #0]
 8005738:	6043      	str	r3, [r0, #4]
 800573a:	6083      	str	r3, [r0, #8]
 800573c:	8181      	strh	r1, [r0, #12]
 800573e:	6643      	str	r3, [r0, #100]	; 0x64
 8005740:	81c2      	strh	r2, [r0, #14]
 8005742:	6103      	str	r3, [r0, #16]
 8005744:	6143      	str	r3, [r0, #20]
 8005746:	6183      	str	r3, [r0, #24]
 8005748:	0019      	movs	r1, r3
 800574a:	2208      	movs	r2, #8
 800574c:	305c      	adds	r0, #92	; 0x5c
 800574e:	f7ff fde0 	bl	8005312 <memset>
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <std+0x38>)
 8005754:	6224      	str	r4, [r4, #32]
 8005756:	6263      	str	r3, [r4, #36]	; 0x24
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <std+0x3c>)
 800575a:	62a3      	str	r3, [r4, #40]	; 0x28
 800575c:	4b04      	ldr	r3, [pc, #16]	; (8005770 <std+0x40>)
 800575e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <std+0x44>)
 8005762:	6323      	str	r3, [r4, #48]	; 0x30
 8005764:	bd10      	pop	{r4, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	08006091 	.word	0x08006091
 800576c:	080060b9 	.word	0x080060b9
 8005770:	080060f1 	.word	0x080060f1
 8005774:	0800611d 	.word	0x0800611d

08005778 <_cleanup_r>:
 8005778:	b510      	push	{r4, lr}
 800577a:	4902      	ldr	r1, [pc, #8]	; (8005784 <_cleanup_r+0xc>)
 800577c:	f000 f88c 	bl	8005898 <_fwalk_reent>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	080056d9 	.word	0x080056d9

08005788 <__sfmoreglue>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	2568      	movs	r5, #104	; 0x68
 800578c:	1e4a      	subs	r2, r1, #1
 800578e:	4355      	muls	r5, r2
 8005790:	000e      	movs	r6, r1
 8005792:	0029      	movs	r1, r5
 8005794:	3174      	adds	r1, #116	; 0x74
 8005796:	f000 f957 	bl	8005a48 <_malloc_r>
 800579a:	1e04      	subs	r4, r0, #0
 800579c:	d008      	beq.n	80057b0 <__sfmoreglue+0x28>
 800579e:	2100      	movs	r1, #0
 80057a0:	002a      	movs	r2, r5
 80057a2:	6001      	str	r1, [r0, #0]
 80057a4:	6046      	str	r6, [r0, #4]
 80057a6:	300c      	adds	r0, #12
 80057a8:	60a0      	str	r0, [r4, #8]
 80057aa:	3268      	adds	r2, #104	; 0x68
 80057ac:	f7ff fdb1 	bl	8005312 <memset>
 80057b0:	0020      	movs	r0, r4
 80057b2:	bd70      	pop	{r4, r5, r6, pc}

080057b4 <__sinit>:
 80057b4:	6983      	ldr	r3, [r0, #24]
 80057b6:	b513      	push	{r0, r1, r4, lr}
 80057b8:	0004      	movs	r4, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d128      	bne.n	8005810 <__sinit+0x5c>
 80057be:	6483      	str	r3, [r0, #72]	; 0x48
 80057c0:	64c3      	str	r3, [r0, #76]	; 0x4c
 80057c2:	6503      	str	r3, [r0, #80]	; 0x50
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <__sinit+0x60>)
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <__sinit+0x64>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6282      	str	r2, [r0, #40]	; 0x28
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	4298      	cmp	r0, r3
 80057d0:	d101      	bne.n	80057d6 <__sinit+0x22>
 80057d2:	2301      	movs	r3, #1
 80057d4:	6183      	str	r3, [r0, #24]
 80057d6:	0020      	movs	r0, r4
 80057d8:	f000 f820 	bl	800581c <__sfp>
 80057dc:	6060      	str	r0, [r4, #4]
 80057de:	0020      	movs	r0, r4
 80057e0:	f000 f81c 	bl	800581c <__sfp>
 80057e4:	60a0      	str	r0, [r4, #8]
 80057e6:	0020      	movs	r0, r4
 80057e8:	f000 f818 	bl	800581c <__sfp>
 80057ec:	2200      	movs	r2, #0
 80057ee:	60e0      	str	r0, [r4, #12]
 80057f0:	2104      	movs	r1, #4
 80057f2:	6860      	ldr	r0, [r4, #4]
 80057f4:	f7ff ff9c 	bl	8005730 <std>
 80057f8:	2201      	movs	r2, #1
 80057fa:	2109      	movs	r1, #9
 80057fc:	68a0      	ldr	r0, [r4, #8]
 80057fe:	f7ff ff97 	bl	8005730 <std>
 8005802:	2202      	movs	r2, #2
 8005804:	2112      	movs	r1, #18
 8005806:	68e0      	ldr	r0, [r4, #12]
 8005808:	f7ff ff92 	bl	8005730 <std>
 800580c:	2301      	movs	r3, #1
 800580e:	61a3      	str	r3, [r4, #24]
 8005810:	bd13      	pop	{r0, r1, r4, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	08006340 	.word	0x08006340
 8005818:	08005779 	.word	0x08005779

0800581c <__sfp>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <__sfp+0x74>)
 8005820:	0007      	movs	r7, r0
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <__sfp+0x14>
 800582a:	0030      	movs	r0, r6
 800582c:	f7ff ffc2 	bl	80057b4 <__sinit>
 8005830:	3648      	adds	r6, #72	; 0x48
 8005832:	68b4      	ldr	r4, [r6, #8]
 8005834:	6873      	ldr	r3, [r6, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	d504      	bpl.n	8005844 <__sfp+0x28>
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d007      	beq.n	8005850 <__sfp+0x34>
 8005840:	6836      	ldr	r6, [r6, #0]
 8005842:	e7f6      	b.n	8005832 <__sfp+0x16>
 8005844:	220c      	movs	r2, #12
 8005846:	5ea5      	ldrsh	r5, [r4, r2]
 8005848:	2d00      	cmp	r5, #0
 800584a:	d00d      	beq.n	8005868 <__sfp+0x4c>
 800584c:	3468      	adds	r4, #104	; 0x68
 800584e:	e7f2      	b.n	8005836 <__sfp+0x1a>
 8005850:	2104      	movs	r1, #4
 8005852:	0038      	movs	r0, r7
 8005854:	f7ff ff98 	bl	8005788 <__sfmoreglue>
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	2800      	cmp	r0, #0
 800585c:	d1f0      	bne.n	8005840 <__sfp+0x24>
 800585e:	230c      	movs	r3, #12
 8005860:	0004      	movs	r4, r0
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	0020      	movs	r0, r4
 8005866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005868:	0020      	movs	r0, r4
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <__sfp+0x78>)
 800586c:	6665      	str	r5, [r4, #100]	; 0x64
 800586e:	6025      	str	r5, [r4, #0]
 8005870:	6065      	str	r5, [r4, #4]
 8005872:	60a5      	str	r5, [r4, #8]
 8005874:	60e3      	str	r3, [r4, #12]
 8005876:	6125      	str	r5, [r4, #16]
 8005878:	6165      	str	r5, [r4, #20]
 800587a:	61a5      	str	r5, [r4, #24]
 800587c:	2208      	movs	r2, #8
 800587e:	0029      	movs	r1, r5
 8005880:	305c      	adds	r0, #92	; 0x5c
 8005882:	f7ff fd46 	bl	8005312 <memset>
 8005886:	6365      	str	r5, [r4, #52]	; 0x34
 8005888:	63a5      	str	r5, [r4, #56]	; 0x38
 800588a:	64a5      	str	r5, [r4, #72]	; 0x48
 800588c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800588e:	e7e9      	b.n	8005864 <__sfp+0x48>
 8005890:	08006340 	.word	0x08006340
 8005894:	ffff0001 	.word	0xffff0001

08005898 <_fwalk_reent>:
 8005898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589a:	0004      	movs	r4, r0
 800589c:	0007      	movs	r7, r0
 800589e:	2600      	movs	r6, #0
 80058a0:	9101      	str	r1, [sp, #4]
 80058a2:	3448      	adds	r4, #72	; 0x48
 80058a4:	2c00      	cmp	r4, #0
 80058a6:	d101      	bne.n	80058ac <_fwalk_reent+0x14>
 80058a8:	0030      	movs	r0, r6
 80058aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ac:	6863      	ldr	r3, [r4, #4]
 80058ae:	68a5      	ldr	r5, [r4, #8]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	9b00      	ldr	r3, [sp, #0]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	d501      	bpl.n	80058be <_fwalk_reent+0x26>
 80058ba:	6824      	ldr	r4, [r4, #0]
 80058bc:	e7f2      	b.n	80058a4 <_fwalk_reent+0xc>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d908      	bls.n	80058d6 <_fwalk_reent+0x3e>
 80058c4:	220e      	movs	r2, #14
 80058c6:	5eab      	ldrsh	r3, [r5, r2]
 80058c8:	3301      	adds	r3, #1
 80058ca:	d004      	beq.n	80058d6 <_fwalk_reent+0x3e>
 80058cc:	0029      	movs	r1, r5
 80058ce:	0038      	movs	r0, r7
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	4798      	blx	r3
 80058d4:	4306      	orrs	r6, r0
 80058d6:	3568      	adds	r5, #104	; 0x68
 80058d8:	e7eb      	b.n	80058b2 <_fwalk_reent+0x1a>
	...

080058dc <__swhatbuf_r>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	000e      	movs	r6, r1
 80058e0:	001d      	movs	r5, r3
 80058e2:	230e      	movs	r3, #14
 80058e4:	5ec9      	ldrsh	r1, [r1, r3]
 80058e6:	b096      	sub	sp, #88	; 0x58
 80058e8:	0014      	movs	r4, r2
 80058ea:	2900      	cmp	r1, #0
 80058ec:	da07      	bge.n	80058fe <__swhatbuf_r+0x22>
 80058ee:	2300      	movs	r3, #0
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	89b3      	ldrh	r3, [r6, #12]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	d411      	bmi.n	800591c <__swhatbuf_r+0x40>
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	e00f      	b.n	800591e <__swhatbuf_r+0x42>
 80058fe:	466a      	mov	r2, sp
 8005900:	f000 fc38 	bl	8006174 <_fstat_r>
 8005904:	2800      	cmp	r0, #0
 8005906:	dbf2      	blt.n	80058ee <__swhatbuf_r+0x12>
 8005908:	22f0      	movs	r2, #240	; 0xf0
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	0212      	lsls	r2, r2, #8
 800590e:	4013      	ands	r3, r2
 8005910:	4a05      	ldr	r2, [pc, #20]	; (8005928 <__swhatbuf_r+0x4c>)
 8005912:	189b      	adds	r3, r3, r2
 8005914:	425a      	negs	r2, r3
 8005916:	4153      	adcs	r3, r2
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	e7ed      	b.n	80058f8 <__swhatbuf_r+0x1c>
 800591c:	2340      	movs	r3, #64	; 0x40
 800591e:	2000      	movs	r0, #0
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	b016      	add	sp, #88	; 0x58
 8005924:	bd70      	pop	{r4, r5, r6, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	ffffe000 	.word	0xffffe000

0800592c <__smakebuf_r>:
 800592c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800592e:	2602      	movs	r6, #2
 8005930:	898b      	ldrh	r3, [r1, #12]
 8005932:	0005      	movs	r5, r0
 8005934:	000c      	movs	r4, r1
 8005936:	4233      	tst	r3, r6
 8005938:	d006      	beq.n	8005948 <__smakebuf_r+0x1c>
 800593a:	0023      	movs	r3, r4
 800593c:	3347      	adds	r3, #71	; 0x47
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	2301      	movs	r3, #1
 8005944:	6163      	str	r3, [r4, #20]
 8005946:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005948:	ab01      	add	r3, sp, #4
 800594a:	466a      	mov	r2, sp
 800594c:	f7ff ffc6 	bl	80058dc <__swhatbuf_r>
 8005950:	9900      	ldr	r1, [sp, #0]
 8005952:	0007      	movs	r7, r0
 8005954:	0028      	movs	r0, r5
 8005956:	f000 f877 	bl	8005a48 <_malloc_r>
 800595a:	2800      	cmp	r0, #0
 800595c:	d108      	bne.n	8005970 <__smakebuf_r+0x44>
 800595e:	220c      	movs	r2, #12
 8005960:	5ea3      	ldrsh	r3, [r4, r2]
 8005962:	059a      	lsls	r2, r3, #22
 8005964:	d4ef      	bmi.n	8005946 <__smakebuf_r+0x1a>
 8005966:	2203      	movs	r2, #3
 8005968:	4393      	bics	r3, r2
 800596a:	431e      	orrs	r6, r3
 800596c:	81a6      	strh	r6, [r4, #12]
 800596e:	e7e4      	b.n	800593a <__smakebuf_r+0xe>
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <__smakebuf_r+0x84>)
 8005972:	62ab      	str	r3, [r5, #40]	; 0x28
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	89a2      	ldrh	r2, [r4, #12]
 8005978:	6020      	str	r0, [r4, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	9b00      	ldr	r3, [sp, #0]
 8005980:	6120      	str	r0, [r4, #16]
 8005982:	6163      	str	r3, [r4, #20]
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <__smakebuf_r+0x7a>
 800598a:	230e      	movs	r3, #14
 800598c:	5ee1      	ldrsh	r1, [r4, r3]
 800598e:	0028      	movs	r0, r5
 8005990:	f000 fc02 	bl	8006198 <_isatty_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	d006      	beq.n	80059a6 <__smakebuf_r+0x7a>
 8005998:	2203      	movs	r2, #3
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	4393      	bics	r3, r2
 800599e:	001a      	movs	r2, r3
 80059a0:	2301      	movs	r3, #1
 80059a2:	4313      	orrs	r3, r2
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	89a0      	ldrh	r0, [r4, #12]
 80059a8:	4338      	orrs	r0, r7
 80059aa:	81a0      	strh	r0, [r4, #12]
 80059ac:	e7cb      	b.n	8005946 <__smakebuf_r+0x1a>
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	08005779 	.word	0x08005779

080059b4 <_free_r>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	0005      	movs	r5, r0
 80059b8:	2900      	cmp	r1, #0
 80059ba:	d010      	beq.n	80059de <_free_r+0x2a>
 80059bc:	1f0c      	subs	r4, r1, #4
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da00      	bge.n	80059c6 <_free_r+0x12>
 80059c4:	18e4      	adds	r4, r4, r3
 80059c6:	0028      	movs	r0, r5
 80059c8:	f000 fc17 	bl	80061fa <__malloc_lock>
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <_free_r+0x90>)
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <_free_r+0x2c>
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	6014      	str	r4, [r2, #0]
 80059d8:	0028      	movs	r0, r5
 80059da:	f000 fc0f 	bl	80061fc <__malloc_unlock>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	42a3      	cmp	r3, r4
 80059e2:	d909      	bls.n	80059f8 <_free_r+0x44>
 80059e4:	6821      	ldr	r1, [r4, #0]
 80059e6:	1860      	adds	r0, r4, r1
 80059e8:	4283      	cmp	r3, r0
 80059ea:	d1f3      	bne.n	80059d4 <_free_r+0x20>
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	1841      	adds	r1, r0, r1
 80059f2:	6021      	str	r1, [r4, #0]
 80059f4:	e7ee      	b.n	80059d4 <_free_r+0x20>
 80059f6:	0013      	movs	r3, r2
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d001      	beq.n	8005a02 <_free_r+0x4e>
 80059fe:	42a2      	cmp	r2, r4
 8005a00:	d9f9      	bls.n	80059f6 <_free_r+0x42>
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	1858      	adds	r0, r3, r1
 8005a06:	42a0      	cmp	r0, r4
 8005a08:	d10b      	bne.n	8005a22 <_free_r+0x6e>
 8005a0a:	6820      	ldr	r0, [r4, #0]
 8005a0c:	1809      	adds	r1, r1, r0
 8005a0e:	1858      	adds	r0, r3, r1
 8005a10:	6019      	str	r1, [r3, #0]
 8005a12:	4282      	cmp	r2, r0
 8005a14:	d1e0      	bne.n	80059d8 <_free_r+0x24>
 8005a16:	6810      	ldr	r0, [r2, #0]
 8005a18:	6852      	ldr	r2, [r2, #4]
 8005a1a:	1841      	adds	r1, r0, r1
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	e7da      	b.n	80059d8 <_free_r+0x24>
 8005a22:	42a0      	cmp	r0, r4
 8005a24:	d902      	bls.n	8005a2c <_free_r+0x78>
 8005a26:	230c      	movs	r3, #12
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	e7d5      	b.n	80059d8 <_free_r+0x24>
 8005a2c:	6821      	ldr	r1, [r4, #0]
 8005a2e:	1860      	adds	r0, r4, r1
 8005a30:	4282      	cmp	r2, r0
 8005a32:	d103      	bne.n	8005a3c <_free_r+0x88>
 8005a34:	6810      	ldr	r0, [r2, #0]
 8005a36:	6852      	ldr	r2, [r2, #4]
 8005a38:	1841      	adds	r1, r0, r1
 8005a3a:	6021      	str	r1, [r4, #0]
 8005a3c:	6062      	str	r2, [r4, #4]
 8005a3e:	605c      	str	r4, [r3, #4]
 8005a40:	e7ca      	b.n	80059d8 <_free_r+0x24>
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20001034 	.word	0x20001034

08005a48 <_malloc_r>:
 8005a48:	2303      	movs	r3, #3
 8005a4a:	b570      	push	{r4, r5, r6, lr}
 8005a4c:	1ccd      	adds	r5, r1, #3
 8005a4e:	439d      	bics	r5, r3
 8005a50:	3508      	adds	r5, #8
 8005a52:	0006      	movs	r6, r0
 8005a54:	2d0c      	cmp	r5, #12
 8005a56:	d21e      	bcs.n	8005a96 <_malloc_r+0x4e>
 8005a58:	250c      	movs	r5, #12
 8005a5a:	42a9      	cmp	r1, r5
 8005a5c:	d81d      	bhi.n	8005a9a <_malloc_r+0x52>
 8005a5e:	0030      	movs	r0, r6
 8005a60:	f000 fbcb 	bl	80061fa <__malloc_lock>
 8005a64:	4a25      	ldr	r2, [pc, #148]	; (8005afc <_malloc_r+0xb4>)
 8005a66:	6814      	ldr	r4, [r2, #0]
 8005a68:	0021      	movs	r1, r4
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	d119      	bne.n	8005aa2 <_malloc_r+0x5a>
 8005a6e:	4c24      	ldr	r4, [pc, #144]	; (8005b00 <_malloc_r+0xb8>)
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <_malloc_r+0x36>
 8005a76:	0030      	movs	r0, r6
 8005a78:	f000 faf8 	bl	800606c <_sbrk_r>
 8005a7c:	6020      	str	r0, [r4, #0]
 8005a7e:	0029      	movs	r1, r5
 8005a80:	0030      	movs	r0, r6
 8005a82:	f000 faf3 	bl	800606c <_sbrk_r>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d12b      	bne.n	8005ae2 <_malloc_r+0x9a>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	0030      	movs	r0, r6
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f000 fbb4 	bl	80061fc <__malloc_unlock>
 8005a94:	e003      	b.n	8005a9e <_malloc_r+0x56>
 8005a96:	2d00      	cmp	r5, #0
 8005a98:	dadf      	bge.n	8005a5a <_malloc_r+0x12>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	1b5b      	subs	r3, r3, r5
 8005aa6:	d419      	bmi.n	8005adc <_malloc_r+0x94>
 8005aa8:	2b0b      	cmp	r3, #11
 8005aaa:	d903      	bls.n	8005ab4 <_malloc_r+0x6c>
 8005aac:	600b      	str	r3, [r1, #0]
 8005aae:	18cc      	adds	r4, r1, r3
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	e003      	b.n	8005abc <_malloc_r+0x74>
 8005ab4:	684b      	ldr	r3, [r1, #4]
 8005ab6:	428c      	cmp	r4, r1
 8005ab8:	d10d      	bne.n	8005ad6 <_malloc_r+0x8e>
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	0030      	movs	r0, r6
 8005abe:	f000 fb9d 	bl	80061fc <__malloc_unlock>
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	300b      	adds	r0, #11
 8005ac8:	1d23      	adds	r3, r4, #4
 8005aca:	4390      	bics	r0, r2
 8005acc:	1ac3      	subs	r3, r0, r3
 8005ace:	d0e7      	beq.n	8005aa0 <_malloc_r+0x58>
 8005ad0:	425a      	negs	r2, r3
 8005ad2:	50e2      	str	r2, [r4, r3]
 8005ad4:	e7e4      	b.n	8005aa0 <_malloc_r+0x58>
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	000c      	movs	r4, r1
 8005ada:	e7ef      	b.n	8005abc <_malloc_r+0x74>
 8005adc:	000c      	movs	r4, r1
 8005ade:	6849      	ldr	r1, [r1, #4]
 8005ae0:	e7c3      	b.n	8005a6a <_malloc_r+0x22>
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	1cc4      	adds	r4, r0, #3
 8005ae6:	439c      	bics	r4, r3
 8005ae8:	42a0      	cmp	r0, r4
 8005aea:	d0e1      	beq.n	8005ab0 <_malloc_r+0x68>
 8005aec:	1a21      	subs	r1, r4, r0
 8005aee:	0030      	movs	r0, r6
 8005af0:	f000 fabc 	bl	800606c <_sbrk_r>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d1db      	bne.n	8005ab0 <_malloc_r+0x68>
 8005af8:	e7c7      	b.n	8005a8a <_malloc_r+0x42>
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	20001034 	.word	0x20001034
 8005b00:	20001038 	.word	0x20001038

08005b04 <__sfputc_r>:
 8005b04:	6893      	ldr	r3, [r2, #8]
 8005b06:	b510      	push	{r4, lr}
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da04      	bge.n	8005b1a <__sfputc_r+0x16>
 8005b10:	6994      	ldr	r4, [r2, #24]
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	db07      	blt.n	8005b26 <__sfputc_r+0x22>
 8005b16:	290a      	cmp	r1, #10
 8005b18:	d005      	beq.n	8005b26 <__sfputc_r+0x22>
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	1c58      	adds	r0, r3, #1
 8005b1e:	6010      	str	r0, [r2, #0]
 8005b20:	7019      	strb	r1, [r3, #0]
 8005b22:	0008      	movs	r0, r1
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	f7ff fc81 	bl	800542c <__swbuf_r>
 8005b2a:	0001      	movs	r1, r0
 8005b2c:	e7f9      	b.n	8005b22 <__sfputc_r+0x1e>

08005b2e <__sfputs_r>:
 8005b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b30:	0006      	movs	r6, r0
 8005b32:	000f      	movs	r7, r1
 8005b34:	0014      	movs	r4, r2
 8005b36:	18d5      	adds	r5, r2, r3
 8005b38:	42ac      	cmp	r4, r5
 8005b3a:	d101      	bne.n	8005b40 <__sfputs_r+0x12>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e007      	b.n	8005b50 <__sfputs_r+0x22>
 8005b40:	7821      	ldrb	r1, [r4, #0]
 8005b42:	003a      	movs	r2, r7
 8005b44:	0030      	movs	r0, r6
 8005b46:	f7ff ffdd 	bl	8005b04 <__sfputc_r>
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d1f3      	bne.n	8005b38 <__sfputs_r+0xa>
 8005b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b54 <_vfiprintf_r>:
 8005b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b56:	b0a1      	sub	sp, #132	; 0x84
 8005b58:	9003      	str	r0, [sp, #12]
 8005b5a:	000f      	movs	r7, r1
 8005b5c:	0016      	movs	r6, r2
 8005b5e:	001d      	movs	r5, r3
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d005      	beq.n	8005b70 <_vfiprintf_r+0x1c>
 8005b64:	6983      	ldr	r3, [r0, #24]
 8005b66:	9305      	str	r3, [sp, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <_vfiprintf_r+0x1c>
 8005b6c:	f7ff fe22 	bl	80057b4 <__sinit>
 8005b70:	4b7b      	ldr	r3, [pc, #492]	; (8005d60 <_vfiprintf_r+0x20c>)
 8005b72:	429f      	cmp	r7, r3
 8005b74:	d15c      	bne.n	8005c30 <_vfiprintf_r+0xdc>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	685f      	ldr	r7, [r3, #4]
 8005b7a:	89bb      	ldrh	r3, [r7, #12]
 8005b7c:	071b      	lsls	r3, r3, #28
 8005b7e:	d563      	bpl.n	8005c48 <_vfiprintf_r+0xf4>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d060      	beq.n	8005c48 <_vfiprintf_r+0xf4>
 8005b86:	2300      	movs	r3, #0
 8005b88:	ac08      	add	r4, sp, #32
 8005b8a:	6163      	str	r3, [r4, #20]
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	7663      	strb	r3, [r4, #25]
 8005b90:	3310      	adds	r3, #16
 8005b92:	76a3      	strb	r3, [r4, #26]
 8005b94:	9507      	str	r5, [sp, #28]
 8005b96:	0035      	movs	r5, r6
 8005b98:	782b      	ldrb	r3, [r5, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <_vfiprintf_r+0x4e>
 8005b9e:	2b25      	cmp	r3, #37	; 0x25
 8005ba0:	d15c      	bne.n	8005c5c <_vfiprintf_r+0x108>
 8005ba2:	1bab      	subs	r3, r5, r6
 8005ba4:	9305      	str	r3, [sp, #20]
 8005ba6:	d00c      	beq.n	8005bc2 <_vfiprintf_r+0x6e>
 8005ba8:	0032      	movs	r2, r6
 8005baa:	0039      	movs	r1, r7
 8005bac:	9803      	ldr	r0, [sp, #12]
 8005bae:	f7ff ffbe 	bl	8005b2e <__sfputs_r>
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	d100      	bne.n	8005bb8 <_vfiprintf_r+0x64>
 8005bb6:	e0c4      	b.n	8005d42 <_vfiprintf_r+0x1ee>
 8005bb8:	6962      	ldr	r2, [r4, #20]
 8005bba:	9b05      	ldr	r3, [sp, #20]
 8005bbc:	4694      	mov	ip, r2
 8005bbe:	4463      	add	r3, ip
 8005bc0:	6163      	str	r3, [r4, #20]
 8005bc2:	782b      	ldrb	r3, [r5, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d100      	bne.n	8005bca <_vfiprintf_r+0x76>
 8005bc8:	e0bb      	b.n	8005d42 <_vfiprintf_r+0x1ee>
 8005bca:	2201      	movs	r2, #1
 8005bcc:	2300      	movs	r3, #0
 8005bce:	4252      	negs	r2, r2
 8005bd0:	6062      	str	r2, [r4, #4]
 8005bd2:	a904      	add	r1, sp, #16
 8005bd4:	3254      	adds	r2, #84	; 0x54
 8005bd6:	1852      	adds	r2, r2, r1
 8005bd8:	1c6e      	adds	r6, r5, #1
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	60e3      	str	r3, [r4, #12]
 8005bde:	60a3      	str	r3, [r4, #8]
 8005be0:	7013      	strb	r3, [r2, #0]
 8005be2:	65a3      	str	r3, [r4, #88]	; 0x58
 8005be4:	7831      	ldrb	r1, [r6, #0]
 8005be6:	2205      	movs	r2, #5
 8005be8:	485e      	ldr	r0, [pc, #376]	; (8005d64 <_vfiprintf_r+0x210>)
 8005bea:	f000 fafb 	bl	80061e4 <memchr>
 8005bee:	1c75      	adds	r5, r6, #1
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d135      	bne.n	8005c60 <_vfiprintf_r+0x10c>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	06d3      	lsls	r3, r2, #27
 8005bf8:	d504      	bpl.n	8005c04 <_vfiprintf_r+0xb0>
 8005bfa:	2353      	movs	r3, #83	; 0x53
 8005bfc:	a904      	add	r1, sp, #16
 8005bfe:	185b      	adds	r3, r3, r1
 8005c00:	2120      	movs	r1, #32
 8005c02:	7019      	strb	r1, [r3, #0]
 8005c04:	0713      	lsls	r3, r2, #28
 8005c06:	d504      	bpl.n	8005c12 <_vfiprintf_r+0xbe>
 8005c08:	2353      	movs	r3, #83	; 0x53
 8005c0a:	a904      	add	r1, sp, #16
 8005c0c:	185b      	adds	r3, r3, r1
 8005c0e:	212b      	movs	r1, #43	; 0x2b
 8005c10:	7019      	strb	r1, [r3, #0]
 8005c12:	7833      	ldrb	r3, [r6, #0]
 8005c14:	2b2a      	cmp	r3, #42	; 0x2a
 8005c16:	d02c      	beq.n	8005c72 <_vfiprintf_r+0x11e>
 8005c18:	0035      	movs	r5, r6
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	200a      	movs	r0, #10
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	782a      	ldrb	r2, [r5, #0]
 8005c22:	1c6e      	adds	r6, r5, #1
 8005c24:	3a30      	subs	r2, #48	; 0x30
 8005c26:	2a09      	cmp	r2, #9
 8005c28:	d964      	bls.n	8005cf4 <_vfiprintf_r+0x1a0>
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d02e      	beq.n	8005c8c <_vfiprintf_r+0x138>
 8005c2e:	e026      	b.n	8005c7e <_vfiprintf_r+0x12a>
 8005c30:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <_vfiprintf_r+0x214>)
 8005c32:	429f      	cmp	r7, r3
 8005c34:	d102      	bne.n	8005c3c <_vfiprintf_r+0xe8>
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	689f      	ldr	r7, [r3, #8]
 8005c3a:	e79e      	b.n	8005b7a <_vfiprintf_r+0x26>
 8005c3c:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <_vfiprintf_r+0x218>)
 8005c3e:	429f      	cmp	r7, r3
 8005c40:	d19b      	bne.n	8005b7a <_vfiprintf_r+0x26>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	68df      	ldr	r7, [r3, #12]
 8005c46:	e798      	b.n	8005b7a <_vfiprintf_r+0x26>
 8005c48:	0039      	movs	r1, r7
 8005c4a:	9803      	ldr	r0, [sp, #12]
 8005c4c:	f7ff fc44 	bl	80054d8 <__swsetup_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d098      	beq.n	8005b86 <_vfiprintf_r+0x32>
 8005c54:	2001      	movs	r0, #1
 8005c56:	4240      	negs	r0, r0
 8005c58:	b021      	add	sp, #132	; 0x84
 8005c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	e79b      	b.n	8005b98 <_vfiprintf_r+0x44>
 8005c60:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <_vfiprintf_r+0x210>)
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	1ac0      	subs	r0, r0, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	4083      	lsls	r3, r0
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	002e      	movs	r6, r5
 8005c70:	e7b8      	b.n	8005be4 <_vfiprintf_r+0x90>
 8005c72:	9b07      	ldr	r3, [sp, #28]
 8005c74:	1d19      	adds	r1, r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	9107      	str	r1, [sp, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	db01      	blt.n	8005c82 <_vfiprintf_r+0x12e>
 8005c7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c80:	e004      	b.n	8005c8c <_vfiprintf_r+0x138>
 8005c82:	425b      	negs	r3, r3
 8005c84:	60e3      	str	r3, [r4, #12]
 8005c86:	2302      	movs	r3, #2
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	6023      	str	r3, [r4, #0]
 8005c8c:	782b      	ldrb	r3, [r5, #0]
 8005c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c90:	d10a      	bne.n	8005ca8 <_vfiprintf_r+0x154>
 8005c92:	786b      	ldrb	r3, [r5, #1]
 8005c94:	2b2a      	cmp	r3, #42	; 0x2a
 8005c96:	d135      	bne.n	8005d04 <_vfiprintf_r+0x1b0>
 8005c98:	9b07      	ldr	r3, [sp, #28]
 8005c9a:	3502      	adds	r5, #2
 8005c9c:	1d1a      	adds	r2, r3, #4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	9207      	str	r2, [sp, #28]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	db2b      	blt.n	8005cfe <_vfiprintf_r+0x1aa>
 8005ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca8:	4e31      	ldr	r6, [pc, #196]	; (8005d70 <_vfiprintf_r+0x21c>)
 8005caa:	7829      	ldrb	r1, [r5, #0]
 8005cac:	2203      	movs	r2, #3
 8005cae:	0030      	movs	r0, r6
 8005cb0:	f000 fa98 	bl	80061e4 <memchr>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d006      	beq.n	8005cc6 <_vfiprintf_r+0x172>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	1b80      	subs	r0, r0, r6
 8005cbc:	4083      	lsls	r3, r0
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	7829      	ldrb	r1, [r5, #0]
 8005cc8:	2206      	movs	r2, #6
 8005cca:	482a      	ldr	r0, [pc, #168]	; (8005d74 <_vfiprintf_r+0x220>)
 8005ccc:	1c6e      	adds	r6, r5, #1
 8005cce:	7621      	strb	r1, [r4, #24]
 8005cd0:	f000 fa88 	bl	80061e4 <memchr>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d03a      	beq.n	8005d4e <_vfiprintf_r+0x1fa>
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <_vfiprintf_r+0x224>)
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d125      	bne.n	8005d2a <_vfiprintf_r+0x1d6>
 8005cde:	2207      	movs	r2, #7
 8005ce0:	9b07      	ldr	r3, [sp, #28]
 8005ce2:	3307      	adds	r3, #7
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	9307      	str	r3, [sp, #28]
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	9a04      	ldr	r2, [sp, #16]
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	6163      	str	r3, [r4, #20]
 8005cf2:	e750      	b.n	8005b96 <_vfiprintf_r+0x42>
 8005cf4:	4343      	muls	r3, r0
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	189b      	adds	r3, r3, r2
 8005cfa:	0035      	movs	r5, r6
 8005cfc:	e790      	b.n	8005c20 <_vfiprintf_r+0xcc>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	425b      	negs	r3, r3
 8005d02:	e7d0      	b.n	8005ca6 <_vfiprintf_r+0x152>
 8005d04:	2300      	movs	r3, #0
 8005d06:	200a      	movs	r0, #10
 8005d08:	001a      	movs	r2, r3
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	7829      	ldrb	r1, [r5, #0]
 8005d10:	1c6e      	adds	r6, r5, #1
 8005d12:	3930      	subs	r1, #48	; 0x30
 8005d14:	2909      	cmp	r1, #9
 8005d16:	d903      	bls.n	8005d20 <_vfiprintf_r+0x1cc>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0c5      	beq.n	8005ca8 <_vfiprintf_r+0x154>
 8005d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1e:	e7c3      	b.n	8005ca8 <_vfiprintf_r+0x154>
 8005d20:	4342      	muls	r2, r0
 8005d22:	2301      	movs	r3, #1
 8005d24:	1852      	adds	r2, r2, r1
 8005d26:	0035      	movs	r5, r6
 8005d28:	e7f1      	b.n	8005d0e <_vfiprintf_r+0x1ba>
 8005d2a:	ab07      	add	r3, sp, #28
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	003a      	movs	r2, r7
 8005d30:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <_vfiprintf_r+0x228>)
 8005d32:	0021      	movs	r1, r4
 8005d34:	9803      	ldr	r0, [sp, #12]
 8005d36:	e000      	b.n	8005d3a <_vfiprintf_r+0x1e6>
 8005d38:	bf00      	nop
 8005d3a:	9004      	str	r0, [sp, #16]
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	d1d3      	bne.n	8005cea <_vfiprintf_r+0x196>
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	065b      	lsls	r3, r3, #25
 8005d46:	d500      	bpl.n	8005d4a <_vfiprintf_r+0x1f6>
 8005d48:	e784      	b.n	8005c54 <_vfiprintf_r+0x100>
 8005d4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005d4c:	e784      	b.n	8005c58 <_vfiprintf_r+0x104>
 8005d4e:	ab07      	add	r3, sp, #28
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	003a      	movs	r2, r7
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_vfiprintf_r+0x228>)
 8005d56:	0021      	movs	r1, r4
 8005d58:	9803      	ldr	r0, [sp, #12]
 8005d5a:	f000 f87f 	bl	8005e5c <_printf_i>
 8005d5e:	e7ec      	b.n	8005d3a <_vfiprintf_r+0x1e6>
 8005d60:	08006364 	.word	0x08006364
 8005d64:	080063a4 	.word	0x080063a4
 8005d68:	08006384 	.word	0x08006384
 8005d6c:	08006344 	.word	0x08006344
 8005d70:	080063aa 	.word	0x080063aa
 8005d74:	080063ae 	.word	0x080063ae
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	08005b2f 	.word	0x08005b2f

08005d80 <_printf_common>:
 8005d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d82:	0015      	movs	r5, r2
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	688a      	ldr	r2, [r1, #8]
 8005d88:	690b      	ldr	r3, [r1, #16]
 8005d8a:	9000      	str	r0, [sp, #0]
 8005d8c:	000c      	movs	r4, r1
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	da00      	bge.n	8005d94 <_printf_common+0x14>
 8005d92:	0013      	movs	r3, r2
 8005d94:	0022      	movs	r2, r4
 8005d96:	602b      	str	r3, [r5, #0]
 8005d98:	3243      	adds	r2, #67	; 0x43
 8005d9a:	7812      	ldrb	r2, [r2, #0]
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d001      	beq.n	8005da4 <_printf_common+0x24>
 8005da0:	3301      	adds	r3, #1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	069b      	lsls	r3, r3, #26
 8005da8:	d502      	bpl.n	8005db0 <_printf_common+0x30>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	3302      	adds	r3, #2
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	2706      	movs	r7, #6
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	401f      	ands	r7, r3
 8005db6:	d027      	beq.n	8005e08 <_printf_common+0x88>
 8005db8:	0023      	movs	r3, r4
 8005dba:	3343      	adds	r3, #67	; 0x43
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	4193      	sbcs	r3, r2
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	0692      	lsls	r2, r2, #26
 8005dc6:	d430      	bmi.n	8005e2a <_printf_common+0xaa>
 8005dc8:	0022      	movs	r2, r4
 8005dca:	9901      	ldr	r1, [sp, #4]
 8005dcc:	3243      	adds	r2, #67	; 0x43
 8005dce:	9800      	ldr	r0, [sp, #0]
 8005dd0:	9e08      	ldr	r6, [sp, #32]
 8005dd2:	47b0      	blx	r6
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d025      	beq.n	8005e24 <_printf_common+0xa4>
 8005dd8:	2306      	movs	r3, #6
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	682a      	ldr	r2, [r5, #0]
 8005dde:	68e1      	ldr	r1, [r4, #12]
 8005de0:	4003      	ands	r3, r0
 8005de2:	2500      	movs	r5, #0
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d103      	bne.n	8005df0 <_printf_common+0x70>
 8005de8:	1a8d      	subs	r5, r1, r2
 8005dea:	43eb      	mvns	r3, r5
 8005dec:	17db      	asrs	r3, r3, #31
 8005dee:	401d      	ands	r5, r3
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	6922      	ldr	r2, [r4, #16]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	dd01      	ble.n	8005dfc <_printf_common+0x7c>
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	18ed      	adds	r5, r5, r3
 8005dfc:	2700      	movs	r7, #0
 8005dfe:	42bd      	cmp	r5, r7
 8005e00:	d120      	bne.n	8005e44 <_printf_common+0xc4>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e010      	b.n	8005e28 <_printf_common+0xa8>
 8005e06:	3701      	adds	r7, #1
 8005e08:	68e3      	ldr	r3, [r4, #12]
 8005e0a:	682a      	ldr	r2, [r5, #0]
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	42bb      	cmp	r3, r7
 8005e10:	ddd2      	ble.n	8005db8 <_printf_common+0x38>
 8005e12:	0022      	movs	r2, r4
 8005e14:	2301      	movs	r3, #1
 8005e16:	3219      	adds	r2, #25
 8005e18:	9901      	ldr	r1, [sp, #4]
 8005e1a:	9800      	ldr	r0, [sp, #0]
 8005e1c:	9e08      	ldr	r6, [sp, #32]
 8005e1e:	47b0      	blx	r6
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d1f0      	bne.n	8005e06 <_printf_common+0x86>
 8005e24:	2001      	movs	r0, #1
 8005e26:	4240      	negs	r0, r0
 8005e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e2a:	2030      	movs	r0, #48	; 0x30
 8005e2c:	18e1      	adds	r1, r4, r3
 8005e2e:	3143      	adds	r1, #67	; 0x43
 8005e30:	7008      	strb	r0, [r1, #0]
 8005e32:	0021      	movs	r1, r4
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	3145      	adds	r1, #69	; 0x45
 8005e38:	7809      	ldrb	r1, [r1, #0]
 8005e3a:	18a2      	adds	r2, r4, r2
 8005e3c:	3243      	adds	r2, #67	; 0x43
 8005e3e:	3302      	adds	r3, #2
 8005e40:	7011      	strb	r1, [r2, #0]
 8005e42:	e7c1      	b.n	8005dc8 <_printf_common+0x48>
 8005e44:	0022      	movs	r2, r4
 8005e46:	2301      	movs	r3, #1
 8005e48:	321a      	adds	r2, #26
 8005e4a:	9901      	ldr	r1, [sp, #4]
 8005e4c:	9800      	ldr	r0, [sp, #0]
 8005e4e:	9e08      	ldr	r6, [sp, #32]
 8005e50:	47b0      	blx	r6
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d0e6      	beq.n	8005e24 <_printf_common+0xa4>
 8005e56:	3701      	adds	r7, #1
 8005e58:	e7d1      	b.n	8005dfe <_printf_common+0x7e>
	...

08005e5c <_printf_i>:
 8005e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5e:	b089      	sub	sp, #36	; 0x24
 8005e60:	9204      	str	r2, [sp, #16]
 8005e62:	000a      	movs	r2, r1
 8005e64:	3243      	adds	r2, #67	; 0x43
 8005e66:	9305      	str	r3, [sp, #20]
 8005e68:	9003      	str	r0, [sp, #12]
 8005e6a:	9202      	str	r2, [sp, #8]
 8005e6c:	7e0a      	ldrb	r2, [r1, #24]
 8005e6e:	000c      	movs	r4, r1
 8005e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e72:	2a6e      	cmp	r2, #110	; 0x6e
 8005e74:	d100      	bne.n	8005e78 <_printf_i+0x1c>
 8005e76:	e086      	b.n	8005f86 <_printf_i+0x12a>
 8005e78:	d81f      	bhi.n	8005eba <_printf_i+0x5e>
 8005e7a:	2a63      	cmp	r2, #99	; 0x63
 8005e7c:	d033      	beq.n	8005ee6 <_printf_i+0x8a>
 8005e7e:	d808      	bhi.n	8005e92 <_printf_i+0x36>
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d100      	bne.n	8005e86 <_printf_i+0x2a>
 8005e84:	e08c      	b.n	8005fa0 <_printf_i+0x144>
 8005e86:	2a58      	cmp	r2, #88	; 0x58
 8005e88:	d04d      	beq.n	8005f26 <_printf_i+0xca>
 8005e8a:	0025      	movs	r5, r4
 8005e8c:	3542      	adds	r5, #66	; 0x42
 8005e8e:	702a      	strb	r2, [r5, #0]
 8005e90:	e030      	b.n	8005ef4 <_printf_i+0x98>
 8005e92:	2a64      	cmp	r2, #100	; 0x64
 8005e94:	d001      	beq.n	8005e9a <_printf_i+0x3e>
 8005e96:	2a69      	cmp	r2, #105	; 0x69
 8005e98:	d1f7      	bne.n	8005e8a <_printf_i+0x2e>
 8005e9a:	6819      	ldr	r1, [r3, #0]
 8005e9c:	6825      	ldr	r5, [r4, #0]
 8005e9e:	1d0a      	adds	r2, r1, #4
 8005ea0:	0628      	lsls	r0, r5, #24
 8005ea2:	d529      	bpl.n	8005ef8 <_printf_i+0x9c>
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	da03      	bge.n	8005eb4 <_printf_i+0x58>
 8005eac:	232d      	movs	r3, #45	; 0x2d
 8005eae:	9a02      	ldr	r2, [sp, #8]
 8005eb0:	4240      	negs	r0, r0
 8005eb2:	7013      	strb	r3, [r2, #0]
 8005eb4:	4e6b      	ldr	r6, [pc, #428]	; (8006064 <_printf_i+0x208>)
 8005eb6:	270a      	movs	r7, #10
 8005eb8:	e04f      	b.n	8005f5a <_printf_i+0xfe>
 8005eba:	2a73      	cmp	r2, #115	; 0x73
 8005ebc:	d074      	beq.n	8005fa8 <_printf_i+0x14c>
 8005ebe:	d808      	bhi.n	8005ed2 <_printf_i+0x76>
 8005ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8005ec2:	d01f      	beq.n	8005f04 <_printf_i+0xa8>
 8005ec4:	2a70      	cmp	r2, #112	; 0x70
 8005ec6:	d1e0      	bne.n	8005e8a <_printf_i+0x2e>
 8005ec8:	2220      	movs	r2, #32
 8005eca:	6809      	ldr	r1, [r1, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	6022      	str	r2, [r4, #0]
 8005ed0:	e003      	b.n	8005eda <_printf_i+0x7e>
 8005ed2:	2a75      	cmp	r2, #117	; 0x75
 8005ed4:	d016      	beq.n	8005f04 <_printf_i+0xa8>
 8005ed6:	2a78      	cmp	r2, #120	; 0x78
 8005ed8:	d1d7      	bne.n	8005e8a <_printf_i+0x2e>
 8005eda:	0022      	movs	r2, r4
 8005edc:	2178      	movs	r1, #120	; 0x78
 8005ede:	3245      	adds	r2, #69	; 0x45
 8005ee0:	7011      	strb	r1, [r2, #0]
 8005ee2:	4e61      	ldr	r6, [pc, #388]	; (8006068 <_printf_i+0x20c>)
 8005ee4:	e022      	b.n	8005f2c <_printf_i+0xd0>
 8005ee6:	0025      	movs	r5, r4
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	3542      	adds	r5, #66	; 0x42
 8005eec:	1d11      	adds	r1, r2, #4
 8005eee:	6019      	str	r1, [r3, #0]
 8005ef0:	6813      	ldr	r3, [r2, #0]
 8005ef2:	702b      	strb	r3, [r5, #0]
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e065      	b.n	8005fc4 <_printf_i+0x168>
 8005ef8:	6808      	ldr	r0, [r1, #0]
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	0669      	lsls	r1, r5, #25
 8005efe:	d5d3      	bpl.n	8005ea8 <_printf_i+0x4c>
 8005f00:	b200      	sxth	r0, r0
 8005f02:	e7d1      	b.n	8005ea8 <_printf_i+0x4c>
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	6825      	ldr	r5, [r4, #0]
 8005f08:	1d08      	adds	r0, r1, #4
 8005f0a:	6018      	str	r0, [r3, #0]
 8005f0c:	6808      	ldr	r0, [r1, #0]
 8005f0e:	062e      	lsls	r6, r5, #24
 8005f10:	d505      	bpl.n	8005f1e <_printf_i+0xc2>
 8005f12:	4e54      	ldr	r6, [pc, #336]	; (8006064 <_printf_i+0x208>)
 8005f14:	2708      	movs	r7, #8
 8005f16:	2a6f      	cmp	r2, #111	; 0x6f
 8005f18:	d01b      	beq.n	8005f52 <_printf_i+0xf6>
 8005f1a:	270a      	movs	r7, #10
 8005f1c:	e019      	b.n	8005f52 <_printf_i+0xf6>
 8005f1e:	066d      	lsls	r5, r5, #25
 8005f20:	d5f7      	bpl.n	8005f12 <_printf_i+0xb6>
 8005f22:	b280      	uxth	r0, r0
 8005f24:	e7f5      	b.n	8005f12 <_printf_i+0xb6>
 8005f26:	3145      	adds	r1, #69	; 0x45
 8005f28:	4e4e      	ldr	r6, [pc, #312]	; (8006064 <_printf_i+0x208>)
 8005f2a:	700a      	strb	r2, [r1, #0]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	1d01      	adds	r1, r0, #4
 8005f32:	6800      	ldr	r0, [r0, #0]
 8005f34:	6019      	str	r1, [r3, #0]
 8005f36:	0615      	lsls	r5, r2, #24
 8005f38:	d521      	bpl.n	8005f7e <_printf_i+0x122>
 8005f3a:	07d3      	lsls	r3, r2, #31
 8005f3c:	d502      	bpl.n	8005f44 <_printf_i+0xe8>
 8005f3e:	2320      	movs	r3, #32
 8005f40:	431a      	orrs	r2, r3
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	2710      	movs	r7, #16
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d103      	bne.n	8005f52 <_printf_i+0xf6>
 8005f4a:	2320      	movs	r3, #32
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	439a      	bics	r2, r3
 8005f50:	6022      	str	r2, [r4, #0]
 8005f52:	0023      	movs	r3, r4
 8005f54:	2200      	movs	r2, #0
 8005f56:	3343      	adds	r3, #67	; 0x43
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	60a3      	str	r3, [r4, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	db58      	blt.n	8006014 <_printf_i+0x1b8>
 8005f62:	2204      	movs	r2, #4
 8005f64:	6821      	ldr	r1, [r4, #0]
 8005f66:	4391      	bics	r1, r2
 8005f68:	6021      	str	r1, [r4, #0]
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d154      	bne.n	8006018 <_printf_i+0x1bc>
 8005f6e:	9d02      	ldr	r5, [sp, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d05a      	beq.n	800602a <_printf_i+0x1ce>
 8005f74:	0025      	movs	r5, r4
 8005f76:	7833      	ldrb	r3, [r6, #0]
 8005f78:	3542      	adds	r5, #66	; 0x42
 8005f7a:	702b      	strb	r3, [r5, #0]
 8005f7c:	e055      	b.n	800602a <_printf_i+0x1ce>
 8005f7e:	0655      	lsls	r5, r2, #25
 8005f80:	d5db      	bpl.n	8005f3a <_printf_i+0xde>
 8005f82:	b280      	uxth	r0, r0
 8005f84:	e7d9      	b.n	8005f3a <_printf_i+0xde>
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	680d      	ldr	r5, [r1, #0]
 8005f8a:	1d10      	adds	r0, r2, #4
 8005f8c:	6949      	ldr	r1, [r1, #20]
 8005f8e:	6018      	str	r0, [r3, #0]
 8005f90:	6813      	ldr	r3, [r2, #0]
 8005f92:	062e      	lsls	r6, r5, #24
 8005f94:	d501      	bpl.n	8005f9a <_printf_i+0x13e>
 8005f96:	6019      	str	r1, [r3, #0]
 8005f98:	e002      	b.n	8005fa0 <_printf_i+0x144>
 8005f9a:	066d      	lsls	r5, r5, #25
 8005f9c:	d5fb      	bpl.n	8005f96 <_printf_i+0x13a>
 8005f9e:	8019      	strh	r1, [r3, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9d02      	ldr	r5, [sp, #8]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	e04f      	b.n	8006048 <_printf_i+0x1ec>
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	1d11      	adds	r1, r2, #4
 8005fac:	6019      	str	r1, [r3, #0]
 8005fae:	6815      	ldr	r5, [r2, #0]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	0028      	movs	r0, r5
 8005fb6:	f000 f915 	bl	80061e4 <memchr>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d001      	beq.n	8005fc2 <_printf_i+0x166>
 8005fbe:	1b40      	subs	r0, r0, r5
 8005fc0:	6060      	str	r0, [r4, #4]
 8005fc2:	6863      	ldr	r3, [r4, #4]
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	9a02      	ldr	r2, [sp, #8]
 8005fca:	7013      	strb	r3, [r2, #0]
 8005fcc:	e03c      	b.n	8006048 <_printf_i+0x1ec>
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	002a      	movs	r2, r5
 8005fd2:	9904      	ldr	r1, [sp, #16]
 8005fd4:	9803      	ldr	r0, [sp, #12]
 8005fd6:	9d05      	ldr	r5, [sp, #20]
 8005fd8:	47a8      	blx	r5
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d03e      	beq.n	800605c <_printf_i+0x200>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	079b      	lsls	r3, r3, #30
 8005fe2:	d415      	bmi.n	8006010 <_printf_i+0x1b4>
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	4298      	cmp	r0, r3
 8005fea:	da39      	bge.n	8006060 <_printf_i+0x204>
 8005fec:	0018      	movs	r0, r3
 8005fee:	e037      	b.n	8006060 <_printf_i+0x204>
 8005ff0:	0022      	movs	r2, r4
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	3219      	adds	r2, #25
 8005ff6:	9904      	ldr	r1, [sp, #16]
 8005ff8:	9803      	ldr	r0, [sp, #12]
 8005ffa:	9e05      	ldr	r6, [sp, #20]
 8005ffc:	47b0      	blx	r6
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d02c      	beq.n	800605c <_printf_i+0x200>
 8006002:	3501      	adds	r5, #1
 8006004:	68e3      	ldr	r3, [r4, #12]
 8006006:	9a07      	ldr	r2, [sp, #28]
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	42ab      	cmp	r3, r5
 800600c:	dcf0      	bgt.n	8005ff0 <_printf_i+0x194>
 800600e:	e7e9      	b.n	8005fe4 <_printf_i+0x188>
 8006010:	2500      	movs	r5, #0
 8006012:	e7f7      	b.n	8006004 <_printf_i+0x1a8>
 8006014:	2800      	cmp	r0, #0
 8006016:	d0ad      	beq.n	8005f74 <_printf_i+0x118>
 8006018:	9d02      	ldr	r5, [sp, #8]
 800601a:	0039      	movs	r1, r7
 800601c:	f7fa f8fa 	bl	8000214 <__aeabi_uidivmod>
 8006020:	5c73      	ldrb	r3, [r6, r1]
 8006022:	3d01      	subs	r5, #1
 8006024:	702b      	strb	r3, [r5, #0]
 8006026:	2800      	cmp	r0, #0
 8006028:	d1f7      	bne.n	800601a <_printf_i+0x1be>
 800602a:	2f08      	cmp	r7, #8
 800602c:	d109      	bne.n	8006042 <_printf_i+0x1e6>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d506      	bpl.n	8006042 <_printf_i+0x1e6>
 8006034:	6863      	ldr	r3, [r4, #4]
 8006036:	6922      	ldr	r2, [r4, #16]
 8006038:	4293      	cmp	r3, r2
 800603a:	dc02      	bgt.n	8006042 <_printf_i+0x1e6>
 800603c:	2330      	movs	r3, #48	; 0x30
 800603e:	3d01      	subs	r5, #1
 8006040:	702b      	strb	r3, [r5, #0]
 8006042:	9b02      	ldr	r3, [sp, #8]
 8006044:	1b5b      	subs	r3, r3, r5
 8006046:	6123      	str	r3, [r4, #16]
 8006048:	9b05      	ldr	r3, [sp, #20]
 800604a:	aa07      	add	r2, sp, #28
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	0021      	movs	r1, r4
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	9803      	ldr	r0, [sp, #12]
 8006054:	f7ff fe94 	bl	8005d80 <_printf_common>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d1b8      	bne.n	8005fce <_printf_i+0x172>
 800605c:	2001      	movs	r0, #1
 800605e:	4240      	negs	r0, r0
 8006060:	b009      	add	sp, #36	; 0x24
 8006062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006064:	080063b5 	.word	0x080063b5
 8006068:	080063c6 	.word	0x080063c6

0800606c <_sbrk_r>:
 800606c:	2300      	movs	r3, #0
 800606e:	b570      	push	{r4, r5, r6, lr}
 8006070:	4c06      	ldr	r4, [pc, #24]	; (800608c <_sbrk_r+0x20>)
 8006072:	0005      	movs	r5, r0
 8006074:	0008      	movs	r0, r1
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	f7fa ff56 	bl	8000f28 <_sbrk>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d103      	bne.n	8006088 <_sbrk_r+0x1c>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d000      	beq.n	8006088 <_sbrk_r+0x1c>
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	bd70      	pop	{r4, r5, r6, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	2000115c 	.word	0x2000115c

08006090 <__sread>:
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	000c      	movs	r4, r1
 8006094:	250e      	movs	r5, #14
 8006096:	5f49      	ldrsh	r1, [r1, r5]
 8006098:	f000 f8b2 	bl	8006200 <_read_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	db03      	blt.n	80060a8 <__sread+0x18>
 80060a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060a2:	181b      	adds	r3, r3, r0
 80060a4:	6563      	str	r3, [r4, #84]	; 0x54
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	4a02      	ldr	r2, [pc, #8]	; (80060b4 <__sread+0x24>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	e7f9      	b.n	80060a6 <__sread+0x16>
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	ffffefff 	.word	0xffffefff

080060b8 <__swrite>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	001f      	movs	r7, r3
 80060bc:	898b      	ldrh	r3, [r1, #12]
 80060be:	0005      	movs	r5, r0
 80060c0:	000c      	movs	r4, r1
 80060c2:	0016      	movs	r6, r2
 80060c4:	05db      	lsls	r3, r3, #23
 80060c6:	d505      	bpl.n	80060d4 <__swrite+0x1c>
 80060c8:	230e      	movs	r3, #14
 80060ca:	5ec9      	ldrsh	r1, [r1, r3]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2302      	movs	r3, #2
 80060d0:	f000 f874 	bl	80061bc <_lseek_r>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	4a05      	ldr	r2, [pc, #20]	; (80060ec <__swrite+0x34>)
 80060d8:	0028      	movs	r0, r5
 80060da:	4013      	ands	r3, r2
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	0032      	movs	r2, r6
 80060e0:	230e      	movs	r3, #14
 80060e2:	5ee1      	ldrsh	r1, [r4, r3]
 80060e4:	003b      	movs	r3, r7
 80060e6:	f000 f81f 	bl	8006128 <_write_r>
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	ffffefff 	.word	0xffffefff

080060f0 <__sseek>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	000c      	movs	r4, r1
 80060f4:	250e      	movs	r5, #14
 80060f6:	5f49      	ldrsh	r1, [r1, r5]
 80060f8:	f000 f860 	bl	80061bc <_lseek_r>
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	1c42      	adds	r2, r0, #1
 8006100:	d103      	bne.n	800610a <__sseek+0x1a>
 8006102:	4a05      	ldr	r2, [pc, #20]	; (8006118 <__sseek+0x28>)
 8006104:	4013      	ands	r3, r2
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	0152      	lsls	r2, r2, #5
 800610e:	4313      	orrs	r3, r2
 8006110:	81a3      	strh	r3, [r4, #12]
 8006112:	6560      	str	r0, [r4, #84]	; 0x54
 8006114:	e7f8      	b.n	8006108 <__sseek+0x18>
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	ffffefff 	.word	0xffffefff

0800611c <__sclose>:
 800611c:	b510      	push	{r4, lr}
 800611e:	230e      	movs	r3, #14
 8006120:	5ec9      	ldrsh	r1, [r1, r3]
 8006122:	f000 f815 	bl	8006150 <_close_r>
 8006126:	bd10      	pop	{r4, pc}

08006128 <_write_r>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	0005      	movs	r5, r0
 800612c:	0008      	movs	r0, r1
 800612e:	0011      	movs	r1, r2
 8006130:	2200      	movs	r2, #0
 8006132:	4c06      	ldr	r4, [pc, #24]	; (800614c <_write_r+0x24>)
 8006134:	6022      	str	r2, [r4, #0]
 8006136:	001a      	movs	r2, r3
 8006138:	f7fa fa62 	bl	8000600 <_write>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d103      	bne.n	8006148 <_write_r+0x20>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d000      	beq.n	8006148 <_write_r+0x20>
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	2000115c 	.word	0x2000115c

08006150 <_close_r>:
 8006150:	2300      	movs	r3, #0
 8006152:	b570      	push	{r4, r5, r6, lr}
 8006154:	4c06      	ldr	r4, [pc, #24]	; (8006170 <_close_r+0x20>)
 8006156:	0005      	movs	r5, r0
 8006158:	0008      	movs	r0, r1
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	f7fa feb7 	bl	8000ece <_close>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d103      	bne.n	800616c <_close_r+0x1c>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d000      	beq.n	800616c <_close_r+0x1c>
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	bd70      	pop	{r4, r5, r6, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	2000115c 	.word	0x2000115c

08006174 <_fstat_r>:
 8006174:	2300      	movs	r3, #0
 8006176:	b570      	push	{r4, r5, r6, lr}
 8006178:	4c06      	ldr	r4, [pc, #24]	; (8006194 <_fstat_r+0x20>)
 800617a:	0005      	movs	r5, r0
 800617c:	0008      	movs	r0, r1
 800617e:	0011      	movs	r1, r2
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	f7fa feae 	bl	8000ee2 <_fstat>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	d103      	bne.n	8006192 <_fstat_r+0x1e>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d000      	beq.n	8006192 <_fstat_r+0x1e>
 8006190:	602b      	str	r3, [r5, #0]
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	2000115c 	.word	0x2000115c

08006198 <_isatty_r>:
 8006198:	2300      	movs	r3, #0
 800619a:	b570      	push	{r4, r5, r6, lr}
 800619c:	4c06      	ldr	r4, [pc, #24]	; (80061b8 <_isatty_r+0x20>)
 800619e:	0005      	movs	r5, r0
 80061a0:	0008      	movs	r0, r1
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	f7fa feab 	bl	8000efe <_isatty>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d103      	bne.n	80061b4 <_isatty_r+0x1c>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d000      	beq.n	80061b4 <_isatty_r+0x1c>
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	2000115c 	.word	0x2000115c

080061bc <_lseek_r>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	0005      	movs	r5, r0
 80061c0:	0008      	movs	r0, r1
 80061c2:	0011      	movs	r1, r2
 80061c4:	2200      	movs	r2, #0
 80061c6:	4c06      	ldr	r4, [pc, #24]	; (80061e0 <_lseek_r+0x24>)
 80061c8:	6022      	str	r2, [r4, #0]
 80061ca:	001a      	movs	r2, r3
 80061cc:	f7fa fea0 	bl	8000f10 <_lseek>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d103      	bne.n	80061dc <_lseek_r+0x20>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d000      	beq.n	80061dc <_lseek_r+0x20>
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	2000115c 	.word	0x2000115c

080061e4 <memchr>:
 80061e4:	b2c9      	uxtb	r1, r1
 80061e6:	1882      	adds	r2, r0, r2
 80061e8:	4290      	cmp	r0, r2
 80061ea:	d101      	bne.n	80061f0 <memchr+0xc>
 80061ec:	2000      	movs	r0, #0
 80061ee:	4770      	bx	lr
 80061f0:	7803      	ldrb	r3, [r0, #0]
 80061f2:	428b      	cmp	r3, r1
 80061f4:	d0fb      	beq.n	80061ee <memchr+0xa>
 80061f6:	3001      	adds	r0, #1
 80061f8:	e7f6      	b.n	80061e8 <memchr+0x4>

080061fa <__malloc_lock>:
 80061fa:	4770      	bx	lr

080061fc <__malloc_unlock>:
 80061fc:	4770      	bx	lr
	...

08006200 <_read_r>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	0005      	movs	r5, r0
 8006204:	0008      	movs	r0, r1
 8006206:	0011      	movs	r1, r2
 8006208:	2200      	movs	r2, #0
 800620a:	4c06      	ldr	r4, [pc, #24]	; (8006224 <_read_r+0x24>)
 800620c:	6022      	str	r2, [r4, #0]
 800620e:	001a      	movs	r2, r3
 8006210:	f7fa fe40 	bl	8000e94 <_read>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d103      	bne.n	8006220 <_read_r+0x20>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d000      	beq.n	8006220 <_read_r+0x20>
 800621e:	602b      	str	r3, [r5, #0]
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	2000115c 	.word	0x2000115c

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
