
CV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e42c  08017364  08017364  00027364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025790  08025790  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08025790  08025790  00035790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025798  08025798  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025798  08025798  00035798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802579c  0802579c  0003579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080257a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f724  20000084  08025824  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f7a8  08025824  0004f7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004486a  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000080b6  00000000  00000000  0008491e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023a8  00000000  00000000  0008c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002140  00000000  00000000  0008ed80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c73  00000000  00000000  00090ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002daec  00000000  00000000  000c6b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe1ec  00000000  00000000  000f461f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f280b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009888  00000000  00000000  001f2888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801734c 	.word	0x0801734c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0801734c 	.word	0x0801734c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000a0 	.word	0x200000a0
 80005f0:	200000f4 	.word	0x200000f4

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fc55 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f825 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8e5 	bl	80007d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f88b 	bl	8000720 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060a:	f000 f8b3 	bl	8000774 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800060e:	f003 fd61 	bl	80040d4 <MX_LWIP_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <main+0x50>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 f921 	bl	8004870 <osThreadCreate>
 800062e:	4602      	mov	r2, r0
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <main+0x54>)
 8000632:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  /* Initialize tcp echo server */
  tcpecho_init();
 8000634:	f000 fbfa 	bl	8000e2c <tcpecho_init>
  /* Initialize HTTP server */
  httpd_init();
 8000638:	f00a f814 	bl	800a664 <httpd_init>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f004 f901 	bl	8004842 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x4c>
 8000642:	bf00      	nop
 8000644:	08017370 	.word	0x08017370
 8000648:	20008a2c 	.word	0x20008a2c

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f015 ff2e 	bl	80164bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a27      	ldr	r2, [pc, #156]	; (8000718 <SystemClock_Config+0xcc>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd0>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c0:	23a8      	movs	r3, #168	; 0xa8
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 ffa7 	bl	8002624 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f940 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fa00 	bl	8002b04 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070a:	f000 f929 	bl	8000960 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART3_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART3_UART_Init+0x4c>)
 8000758:	f002 fe36 	bl	80033c8 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f8fd 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20008a30 	.word	0x20008a30
 8000770:	40004800 	.word	0x40004800

08000774 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2204      	movs	r2, #4
 8000784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	f001 fe17 	bl	80023ea <HAL_PCD_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f8cd 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20008a70 	.word	0x20008a70

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a4a      	ldr	r2, [pc, #296]	; (8000918 <MX_GPIO_Init+0x148>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b48      	ldr	r3, [pc, #288]	; (8000918 <MX_GPIO_Init+0x148>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b44      	ldr	r3, [pc, #272]	; (8000918 <MX_GPIO_Init+0x148>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a43      	ldr	r2, [pc, #268]	; (8000918 <MX_GPIO_Init+0x148>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <MX_GPIO_Init+0x148>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <MX_GPIO_Init+0x148>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a3c      	ldr	r2, [pc, #240]	; (8000918 <MX_GPIO_Init+0x148>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <MX_GPIO_Init+0x148>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <MX_GPIO_Init+0x148>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a35      	ldr	r2, [pc, #212]	; (8000918 <MX_GPIO_Init+0x148>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <MX_GPIO_Init+0x148>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <MX_GPIO_Init+0x148>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a2e      	ldr	r2, [pc, #184]	; (8000918 <MX_GPIO_Init+0x148>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <MX_GPIO_Init+0x148>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_GPIO_Init+0x148>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a27      	ldr	r2, [pc, #156]	; (8000918 <MX_GPIO_Init+0x148>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_GPIO_Init+0x148>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f244 0181 	movw	r1, #16513	; 0x4081
 8000894:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x14c>)
 8000896:	f001 fd8f 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_GPIO_Init+0x150>)
 80008a0:	f001 fd8a 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_GPIO_Init+0x154>)
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481b      	ldr	r0, [pc, #108]	; (8000928 <MX_GPIO_Init+0x158>)
 80008ba:	f001 fbd3 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008be:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x14c>)
 80008d8:	f001 fbc4 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x150>)
 80008f4:	f001 fbb6 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x150>)
 800090c:	f001 fbaa 	bl	8002064 <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800
 8000924:	10110000 	.word	0x10110000
 8000928:	40020800 	.word	0x40020800

0800092c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000934:	2001      	movs	r0, #1
 8000936:	f003 ffe7 	bl	8004908 <osDelay>
 800093a:	e7fb      	b.n	8000934 <StartDefaultTask+0x8>

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 facd 	bl	8000eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010000 	.word	0x40010000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_MspInit+0x54>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <HAL_MspInit+0x54>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x54>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_MspInit+0x54>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_MspInit+0x54>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f000 fb93 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_UART_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a34:	2307      	movs	r3, #7
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0x8c>)
 8000a40:	f001 fb10 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004800 	.word	0x40004800
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a78:	d13f      	bne.n	8000afa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <HAL_PCD_MspInit+0xb0>)
 8000ab4:	f001 fad6 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	480e      	ldr	r0, [pc, #56]	; (8000b08 <HAL_PCD_MspInit+0xb0>)
 8000ace:	f001 fac9 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6353      	str	r3, [r2, #52]	; 0x34
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_PCD_MspInit+0xac>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2019      	movs	r0, #25
 8000b22:	f000 fadd 	bl	80010e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b26:	2019      	movs	r0, #25
 8000b28:	f000 faf6 	bl	8001118 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0210 	add.w	r2, r7, #16
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 f9c8 	bl	8002ee8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b58:	f002 f9b2 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <HAL_InitTick+0xb0>)
 8000b74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b92:	f002 f9db 	bl	8002f4c <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b9c:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_InitTick+0xac>)
 8000b9e:	f002 fa0a 	bl	8002fb6 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20008e78 	.word	0x20008e78
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfa:	f002 fa00 	bl	8002ffe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20008e78 	.word	0x20008e78

08000c08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e00a      	b.n	8000c30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1a:	f3af 8000 	nop.w
 8000c1e:	4601      	mov	r1, r0
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf0      	blt.n	8000c1a <_read+0x12>
	}

return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e009      	b.n	8000c68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf1      	blt.n	8000c54 <_write+0x12>
	}
	return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_close>:

int _close(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <_sbrk+0x50>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x16>
		heap_end = &end;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <_sbrk+0x50>)
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <_sbrk+0x54>)
 8000cf8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <_sbrk+0x50>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <_sbrk+0x50>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	466a      	mov	r2, sp
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d905      	bls.n	8000d1a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <_sbrk+0x58>)
 8000d10:	220c      	movs	r2, #12
 8000d12:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d18:	e006      	b.n	8000d28 <_sbrk+0x44>
	}

	heap_end += incr;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <_sbrk+0x50>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <_sbrk+0x50>)
 8000d24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200002f4 	.word	0x200002f4
 8000d38:	2000f7a8 	.word	0x2000f7a8
 8000d3c:	2000f7a0 	.word	0x2000f7a0

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x28>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x28>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SystemInit+0x28>)
 8000d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2010      	movs	r0, #16
 8000d7a:	f006 fcf5 	bl	8007768 <netconn_new_with_proto_and_callback>
 8000d7e:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d04e      	beq.n	8000e24 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d86:	2207      	movs	r2, #7
 8000d88:	2100      	movs	r1, #0
 8000d8a:	69f8      	ldr	r0, [r7, #28]
 8000d8c:	f006 fd8c 	bl	80078a8 <netconn_bind>
 8000d90:	4603      	mov	r3, r0
 8000d92:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d94:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d13f      	bne.n	8000e1c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d9c:	21ff      	movs	r1, #255	; 0xff
 8000d9e:	69f8      	ldr	r0, [r7, #28]
 8000da0:	f006 fdba 	bl	8007918 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	69f8      	ldr	r0, [r7, #28]
 8000dac:	f006 fde0 	bl	8007970 <netconn_accept>
 8000db0:	4603      	mov	r3, r0
 8000db2:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000db4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dbc:	e01b      	b.n	8000df6 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	f107 020a 	add.w	r2, r7, #10
 8000dc4:	f107 010c 	add.w	r1, r7, #12
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f008 fc9b 	bl	8009704 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f006 ff8e 	bl	8007cfc <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 fcd8 	bl	8009798 <netbuf_next>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dae7      	bge.n	8000dbe <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f008 fc67 	bl	80096c4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f107 0210 	add.w	r2, r7, #16
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 ff04 	bl	8007c0c <netconn_recv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0d9      	beq.n	8000dbe <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 f81d 	bl	8007e4c <netconn_close>
          netconn_delete(newconn);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 fd21 	bl	800785c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e1a:	e7c3      	b.n	8000da4 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f006 fd1c 	bl	800785c <netconn_delete>
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e32:	2304      	movs	r3, #4
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4903      	ldr	r1, [pc, #12]	; (8000e4c <tcpecho_init+0x20>)
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <tcpecho_init+0x24>)
 8000e40:	f015 faba 	bl	80163b8 <sys_thread_new>
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	08000d6d 	.word	0x08000d6d
 8000e50:	0801738c 	.word	0x0801738c

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5a:	e003      	b.n	8000e64 <LoopCopyDataInit>

08000e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e62:	3104      	adds	r1, #4

08000e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e6c:	d3f6      	bcc.n	8000e5c <CopyDataInit>
  ldr  r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e70:	e002      	b.n	8000e78 <LoopFillZerobss>

08000e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e74:	f842 3b04 	str.w	r3, [r2], #4

08000e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e7c:	d3f9      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff ff5f 	bl	8000d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f015 fadd 	bl	8016440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fbb5 	bl	80005f4 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e8c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e90:	080257a0 	.word	0x080257a0
  ldr  r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e98:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000e9c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000ea0:	2000f7a8 	.word	0x2000f7a8

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8fa 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fe18 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fd48 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20008eb8 	.word	0x20008eb8

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20008eb8 	.word	0x20008eb8

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_Delay+0x40>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000008 	.word	0x20000008

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001144:	4baa      	ldr	r3, [pc, #680]	; (80013f0 <HAL_ETH_Init+0x2bc>)
 8001146:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e185      	b.n	8001466 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f002 fff2 	bl	8004158 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	4b9e      	ldr	r3, [pc, #632]	; (80013f4 <HAL_ETH_Init+0x2c0>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	4a9d      	ldr	r2, [pc, #628]	; (80013f4 <HAL_ETH_Init+0x2c0>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6453      	str	r3, [r2, #68]	; 0x44
 8001184:	4b9b      	ldr	r3, [pc, #620]	; (80013f4 <HAL_ETH_Init+0x2c0>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001190:	4b99      	ldr	r3, [pc, #612]	; (80013f8 <HAL_ETH_Init+0x2c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_ETH_Init+0x2c4>)
 8001196:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800119a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <HAL_ETH_Init+0x2c4>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4994      	ldr	r1, [pc, #592]	; (80013f8 <HAL_ETH_Init+0x2c4>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0201 	orr.w	r2, r2, #1
 80011bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011c2:	f7ff fea7 	bl	8000f14 <HAL_GetTick>
 80011c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011c8:	e011      	b.n	80011ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011ca:	f7ff fea3 	bl	8000f14 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d8:	d909      	bls.n	80011ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e13b      	b.n	8001466 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e4      	bne.n	80011ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f023 031c 	bic.w	r3, r3, #28
 800120e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001210:	f001 fe36 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8001214:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a78      	ldr	r2, [pc, #480]	; (80013fc <HAL_ETH_Init+0x2c8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d908      	bls.n	8001230 <HAL_ETH_Init+0xfc>
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4a77      	ldr	r2, [pc, #476]	; (8001400 <HAL_ETH_Init+0x2cc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d804      	bhi.n	8001230 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e027      	b.n	8001280 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4a73      	ldr	r2, [pc, #460]	; (8001400 <HAL_ETH_Init+0x2cc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d908      	bls.n	800124a <HAL_ETH_Init+0x116>
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_ETH_Init+0x2d0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d804      	bhi.n	800124a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f043 030c 	orr.w	r3, r3, #12
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e01a      	b.n	8001280 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4a6d      	ldr	r2, [pc, #436]	; (8001404 <HAL_ETH_Init+0x2d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d903      	bls.n	800125a <HAL_ETH_Init+0x126>
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a6c      	ldr	r2, [pc, #432]	; (8001408 <HAL_ETH_Init+0x2d4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d911      	bls.n	800127e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4a6a      	ldr	r2, [pc, #424]	; (8001408 <HAL_ETH_Init+0x2d4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d908      	bls.n	8001274 <HAL_ETH_Init+0x140>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4a69      	ldr	r2, [pc, #420]	; (800140c <HAL_ETH_Init+0x2d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d804      	bhi.n	8001274 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e005      	b.n	8001280 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	e000      	b.n	8001280 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800127e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001288:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800128c:	2100      	movs	r1, #0
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fb9e 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800129e:	6939      	ldr	r1, [r7, #16]
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fc2b 	bl	8001afc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0d9      	b.n	8001466 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff fe3a 	bl	8000f2c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a7 	beq.w	8001410 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012c2:	f7ff fe27 	bl	8000f14 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	461a      	mov	r2, r3
 80012ce:	2101      	movs	r1, #1
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb15 	bl	8001900 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012d6:	f7ff fe1d 	bl	8000f14 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d90f      	bls.n	8001308 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fc04 	bl	8001afc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0ae      	b.n	8001466 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0da      	beq.n	80012c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001316:	2100      	movs	r1, #0
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fb59 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fbe6 	bl	8001afc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001338:	2301      	movs	r3, #1
 800133a:	e094      	b.n	8001466 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fdea 	bl	8000f14 <HAL_GetTick>
 8001340:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	461a      	mov	r2, r3
 8001348:	2101      	movs	r1, #1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fad8 	bl	8001900 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001350:	f7ff fde0 	bl	8000f14 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d90f      	bls.n	8001382 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001366:	6939      	ldr	r1, [r7, #16]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fbc7 	bl	8001afc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e071      	b.n	8001466 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0da      	beq.n	8001342 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	461a      	mov	r2, r3
 8001392:	211f      	movs	r1, #31
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 fab3 	bl	8001900 <HAL_ETH_ReadPHYRegister>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fba8 	bl	8001afc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013b4:	2301      	movs	r3, #1
 80013b6:	e056      	b.n	8001466 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	e002      	b.n	80013d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	e037      	b.n	8001454 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	e032      	b.n	8001454 <HAL_ETH_Init+0x320>
 80013ee:	bf00      	nop
 80013f0:	03938700 	.word	0x03938700
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	01312cff 	.word	0x01312cff
 8001400:	02160ebf 	.word	0x02160ebf
 8001404:	039386ff 	.word	0x039386ff
 8001408:	05f5e0ff 	.word	0x05f5e0ff
 800140c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	085b      	lsrs	r3, r3, #1
 800141e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001420:	4313      	orrs	r3, r2
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fad1 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00b      	beq.n	800144c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fb5e 	bl	8001afc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e00c      	b.n	8001466 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800144c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001450:	f7ff fd6c 	bl	8000f2c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fb50 	bl	8001afc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop

08001470 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ETH_DMATxDescListInit+0x20>
 800148c:	2302      	movs	r3, #2
 800148e:	e052      	b.n	8001536 <HAL_ETH_DMATxDescListInit+0xc6>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e030      	b.n	800150e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014bc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d105      	bne.n	80014e6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d208      	bcs.n	8001502 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4413      	add	r3, r2
 80014fa:	461a      	mov	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	e002      	b.n	8001508 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d3ca      	bcc.n	80014ac <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001520:	3310      	adds	r3, #16
 8001522:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ETH_DMARxDescListInit+0x20>
 800155e:	2302      	movs	r3, #2
 8001560:	e056      	b.n	8001610 <HAL_ETH_DMARxDescListInit+0xce>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e034      	b.n	80015e8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4413      	add	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800158e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001596:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d208      	bcs.n	80015dc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	4413      	add	r3, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	e002      	b.n	80015e2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d3c6      	bcc.n	800157e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	330c      	adds	r3, #12
 80015fc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ETH_TransmitFrame+0x24>
 800163c:	2302      	movs	r3, #2
 800163e:	e0cd      	b.n	80017dc <HAL_ETH_TransmitFrame+0x1c0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2202      	movs	r2, #2
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d109      	bne.n	800166a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001666:	2301      	movs	r3, #1
 8001668:	e0b8      	b.n	80017dc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da09      	bge.n	8001688 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2212      	movs	r2, #18
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0a9      	b.n	80017dc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800168e:	4293      	cmp	r3, r2
 8001690:	d915      	bls.n	80016be <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	4a54      	ldr	r2, [pc, #336]	; (80017e8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <HAL_ETH_TransmitFrame+0x1cc>)
 80016a2:	fba3 1302 	umull	r1, r3, r3, r2
 80016a6:	0a9b      	lsrs	r3, r3, #10
 80016a8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e001      	b.n	80016c2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d11c      	bne.n	8001702 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016d6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016e2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016f2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001700:	e04b      	b.n	800179a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	e044      	b.n	8001792 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001716:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800172c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001736:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3b01      	subs	r3, #1
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	429a      	cmp	r2, r3
 8001740:	d116      	bne.n	8001770 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001750:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <HAL_ETH_TransmitFrame+0x1d0>)
 8001756:	fb02 f203 	mul.w	r2, r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	4413      	add	r3, r2
 800175e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001762:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800176e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800177e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	3301      	adds	r3, #1
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	429a      	cmp	r2, r3
 8001798:	d3b6      	bcc.n	8001708 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	3314      	adds	r3, #20
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b6:	3314      	adds	r3, #20
 80017b8:	2204      	movs	r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3304      	adds	r3, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	ac02b00b 	.word	0xac02b00b
 80017ec:	fffffa0c 	.word	0xfffffa0c

080017f0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001806:	2302      	movs	r3, #2
 8001808:	e074      	b.n	80018f4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800181a:	e05a      	b.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800182c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001830:	d10d      	bne.n	800184e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
 800184c:	e041      	b.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
 8001872:	e02e      	b.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188a:	2b01      	cmp	r3, #1
 800188c:	d103      	bne.n	8001896 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018a2:	1f1a      	subs	r2, r3, #4
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e010      	b.n	80018f4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db02      	blt.n	80018e2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d99c      	bls.n	800181c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b82      	cmp	r3, #130	; 0x82
 8001920:	d101      	bne.n	8001926 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	e050      	b.n	80019c8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2282      	movs	r2, #130	; 0x82
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8a1b      	ldrh	r3, [r3, #16]
 8001942:	02db      	lsls	r3, r3, #11
 8001944:	b29b      	uxth	r3, r3
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	019b      	lsls	r3, r3, #6
 8001950:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f023 0302 	bic.w	r3, r3, #2
 8001960:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001972:	f7ff facf 	bl	8000f14 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001978:	e015      	b.n	80019a6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800197a:	f7ff facb 	bl	8000f14 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d309      	bcc.n	800199e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e014      	b.n	80019c8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e4      	bne.n	800197a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	460b      	mov	r3, r1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b42      	cmp	r3, #66	; 0x42
 80019f0:	d101      	bne.n	80019f6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e04e      	b.n	8001a94 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2242      	movs	r2, #66	; 0x42
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 031c 	and.w	r3, r3, #28
 8001a0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8a1b      	ldrh	r3, [r3, #16]
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fa62 	bl	8000f14 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a52:	e015      	b.n	8001a80 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a54:	f7ff fa5e 	bl	8000f14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d309      	bcc.n	8001a78 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e00d      	b.n	8001a94 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e4      	bne.n	8001a54 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ETH_Start+0x16>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e01f      	b.n	8001af2 <HAL_ETH_Start+0x56>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa1c 	bl	8001f00 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fa36 	bl	8001f3a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa80 	bl	8001fd4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fa4d 	bl	8001f74 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa62 	bl	8001fa4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0b0      	sub	sp, #192	; 0xc0
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b18:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	663b      	str	r3, [r7, #96]	; 0x60
 8001b48:	e001      	b.n	8001b4e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b52:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b68:	2340      	movs	r3, #64	; 0x40
 8001b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd4:	4bac      	ldr	r3, [pc, #688]	; (8001e88 <ETH_MACDMAConfig+0x38c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001be0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001be4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001be8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001bf2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001bf6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001bfc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c00:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c04:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c08:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c0c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c10:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c24:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff f97b 	bl	8000f2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c3e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c44:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c48:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c4e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c54:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c5a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c6c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c6e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff f956 	bl	8000f2c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c88:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c92:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c9c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ca8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cac:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cc0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cc6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ccc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001cd2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001cd8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff f917 	bl	8000f2c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d06:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f902 	bl	8000f2c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d30:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d44:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d56:	2304      	movs	r3, #4
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d86:	3318      	adds	r3, #24
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <ETH_MACDMAConfig+0x390>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d9a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d9e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001da0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001da2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001da4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001da6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001da8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001daa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001dac:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001dae:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001db0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001db2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001db6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dba:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	3318      	adds	r3, #24
 8001dd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	3318      	adds	r3, #24
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff f8a0 	bl	8000f2c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	3318      	adds	r3, #24
 8001df6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dfa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e00:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e04:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e08:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e0c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e10:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e12:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e16:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff f879 	bl	8000f2c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e46:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10f      	bne.n	8001e70 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	331c      	adds	r3, #28
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	331c      	adds	r3, #28
 8001e6e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	461a      	mov	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f809 	bl	8001e90 <ETH_MACAddressConfig>
}
 8001e7e:	bf00      	nop
 8001e80:	37c0      	adds	r7, #192	; 0xc0
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	ff20810f 	.word	0xff20810f
 8001e8c:	f8de3f23 	.word	0xf8de3f23

08001e90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	3204      	adds	r2, #4
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <ETH_MACAddressConfig+0x68>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3303      	adds	r3, #3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	061a      	lsls	r2, r3, #24
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <ETH_MACAddressConfig+0x6c>)
 8001ee2:	4413      	add	r3, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	6013      	str	r3, [r2, #0]
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40028040 	.word	0x40028040
 8001efc:	40028044 	.word	0x40028044

08001f00 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f000 f87f 	bl	8002028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0204 	orr.w	r2, r2, #4
 8001f54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f862 	bl	8002028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	3318      	adds	r3, #24
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	3318      	adds	r3, #24
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0202 	orr.w	r2, r2, #2
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe8:	3318      	adds	r3, #24
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	3318      	adds	r3, #24
 8001ffa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	3318      	adds	r3, #24
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800200a:	2001      	movs	r0, #1
 800200c:	f000 f80c 	bl	8002028 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	3318      	adds	r3, #24
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <ETH_Delay+0x34>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <ETH_Delay+0x38>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002044:	bf00      	nop
  } 
  while (Delay --);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e5a      	subs	r2, r3, #1
 800204a:	60fa      	str	r2, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f9      	bne.n	8002044 <ETH_Delay+0x1c>
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e177      	b.n	8002370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8166 	bne.w	800236a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d00b      	beq.n	80020be <HAL_GPIO_Init+0x5a>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0xfc>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b12      	cmp	r3, #18
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80c0 	beq.w	800236a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_GPIO_Init+0x320>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a64      	ldr	r2, [pc, #400]	; (8002384 <HAL_GPIO_Init+0x320>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_GPIO_Init+0x320>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a60      	ldr	r2, [pc, #384]	; (8002388 <HAL_GPIO_Init+0x324>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_GPIO_Init+0x328>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d037      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a56      	ldr	r2, [pc, #344]	; (8002390 <HAL_GPIO_Init+0x32c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_GPIO_Init+0x330>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x334>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a53      	ldr	r2, [pc, #332]	; (800239c <HAL_GPIO_Init+0x338>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_GPIO_Init+0x33c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_GPIO_Init+0x340>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	; (80023a8 <HAL_GPIO_Init+0x344>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	; (80023ac <HAL_GPIO_Init+0x348>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4e      	ldr	r2, [pc, #312]	; (80023b0 <HAL_GPIO_Init+0x34c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x21a>
 800227a:	2309      	movs	r3, #9
 800227c:	e012      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800227e:	230a      	movs	r3, #10
 8002280:	e010      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002282:	2308      	movs	r3, #8
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002286:	2307      	movs	r3, #7
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4934      	ldr	r1, [pc, #208]	; (8002388 <HAL_GPIO_Init+0x324>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ec:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_GPIO_Init+0x350>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae84 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	3724      	adds	r7, #36	; 0x24
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	40023800 	.word	0x40023800
 8002388:	40013800 	.word	0x40013800
 800238c:	40020000 	.word	0x40020000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40021800 	.word	0x40021800
 80023a8:	40021c00 	.word	0x40021c00
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40022400 	.word	0x40022400
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ec:	b08f      	sub	sp, #60	; 0x3c
 80023ee:	af0a      	add	r7, sp, #40	; 0x28
 80023f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e10f      	b.n	800261c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fb1e 	bl	8000a58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fbef 	bl	8003c1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	687e      	ldr	r6, [r7, #4]
 8002448:	466d      	mov	r5, sp
 800244a:	f106 0410 	add.w	r4, r6, #16
 800244e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245a:	e885 0003 	stmia.w	r5, {r0, r1}
 800245e:	1d33      	adds	r3, r6, #4
 8002460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f001 fb7a 	bl	8003b5c <USB_CoreInit>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0d0      	b.n	800261c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fbdd 	bl	8003c40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e04a      	b.n	8002522 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	333d      	adds	r3, #61	; 0x3d
 800249c:	2201      	movs	r2, #1
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	333c      	adds	r3, #60	; 0x3c
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	b298      	uxth	r0, r3
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3342      	adds	r3, #66	; 0x42
 80024c8:	4602      	mov	r2, r0
 80024ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	333f      	adds	r3, #63	; 0x3f
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3344      	adds	r3, #68	; 0x44
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3348      	adds	r3, #72	; 0x48
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3350      	adds	r3, #80	; 0x50
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	3301      	adds	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d3af      	bcc.n	800248c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e044      	b.n	80025bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	3301      	adds	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3b5      	bcc.n	8002532 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	687e      	ldr	r6, [r7, #4]
 80025ce:	466d      	mov	r5, sp
 80025d0:	f106 0410 	add.w	r4, r6, #16
 80025d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e4:	1d33      	adds	r3, r6, #4
 80025e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f001 fb53 	bl	8003c94 <USB_DevInit>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e00d      	b.n	800261c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f001 fd10 	bl	800403a <USB_DevDisconnect>

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e25b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d075      	beq.n	800272e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00c      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4ba0      	ldr	r3, [pc, #640]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d112      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b9d      	ldr	r3, [pc, #628]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05b      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e236      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x74>
 800268a:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a90      	ldr	r2, [pc, #576]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b8b      	ldr	r3, [pc, #556]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a8a      	ldr	r2, [pc, #552]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a87      	ldr	r2, [pc, #540]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a83      	ldr	r2, [pc, #524]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a80      	ldr	r2, [pc, #512]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fc1a 	bl	8000f14 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fc16 	bl	8000f14 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1fb      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fc06 	bl	8000f14 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fc02 	bl	8000f14 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1e7      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11c      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1bb      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4952      	ldr	r1, [pc, #328]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e03a      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCC_OscConfig+0x2b0>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fbbb 	bl	8000f14 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fbb7 	bl	8000f14 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e19c      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4940      	ldr	r1, [pc, #256]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x2b0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fb9a 	bl	8000f14 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fb96 	bl	8000f14 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e17b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d030      	beq.n	8002870 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCC_OscConfig+0x2b4>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fb7a 	bl	8000f14 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe fb76 	bl	8000f14 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e15b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x200>
 8002842:	e015      	b.n	8002870 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_OscConfig+0x2b4>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe fb63 	bl	8000f14 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe fb5f 	bl	8000f14 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e144      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a0 	beq.w	80029be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d121      	bne.n	80028fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a07      	ldr	r2, [pc, #28]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fb25 	bl	8000f14 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e011      	b.n	80028f2 <HAL_RCC_OscConfig+0x2ce>
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	42470000 	.word	0x42470000
 80028d8:	42470e80 	.word	0x42470e80
 80028dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fb18 	bl	8000f14 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0fd      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x4d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x2f0>
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x32a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x312>
 800291c:	4b77      	ldr	r3, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a76      	ldr	r2, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b74      	ldr	r3, [pc, #464]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a73      	ldr	r2, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x32a>
 8002936:	4b71      	ldr	r3, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a70      	ldr	r2, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a6d      	ldr	r2, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fadd 	bl	8000f14 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fad9 	bl	8000f14 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0bc      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x33a>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fac7 	bl	8000f14 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fac3 	bl	8000f14 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0a6      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	4b56      	ldr	r3, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8092 	beq.w	8002aec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d05c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d141      	bne.n	8002a60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe fa97 	bl	8000f14 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fa93 	bl	8000f14 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e078      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
 8002a2c:	4933      	ldr	r1, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fa6c 	bl	8000f14 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fa68 	bl	8000f14 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04d      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a5e:	e045      	b.n	8002aec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fa55 	bl	8000f14 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fa51 	bl	8000f14 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e036      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x44a>
 8002a8c:	e02e      	b.n	8002aec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e029      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d115      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470060 	.word	0x42470060

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0cc      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d90c      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b8      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	494d      	ldr	r1, [pc, #308]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d044      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d119      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e067      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4934      	ldr	r1, [pc, #208]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7fe f98e 	bl	8000f14 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7fe f98a 	bl	8000f14 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e04f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d20c      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e032      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8a:	f000 f821 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd ff2e 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	0801a1cc 	.word	0x0801a1cc
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x32>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80b4 	bne.w	8002e64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b3      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b0      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04a      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	ea03 0501 	and.w	r5, r3, r1
 8002d34:	ea04 0602 	and.w	r6, r4, r2
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	0154      	lsls	r4, r2, #5
 8002d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4622      	mov	r2, r4
 8002d50:	1b49      	subs	r1, r1, r5
 8002d52:	eb62 0206 	sbc.w	r2, r2, r6
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0194      	lsls	r4, r2, #6
 8002d60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d64:	018b      	lsls	r3, r1, #6
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	eb64 0402 	sbc.w	r4, r4, r2
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	00e2      	lsls	r2, r4, #3
 8002d76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4614      	mov	r4, r2
 8002d80:	195b      	adds	r3, r3, r5
 8002d82:	eb44 0406 	adc.w	r4, r4, r6
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	0262      	lsls	r2, r4, #9
 8002d90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d94:	0259      	lsls	r1, r3, #9
 8002d96:	460b      	mov	r3, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd fa8a 	bl	80002c0 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e049      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea03 0501 	and.w	r5, r3, r1
 8002dca:	ea04 0602 	and.w	r6, r4, r2
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	0154      	lsls	r4, r2, #5
 8002ddc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de0:	014b      	lsls	r3, r1, #5
 8002de2:	4619      	mov	r1, r3
 8002de4:	4622      	mov	r2, r4
 8002de6:	1b49      	subs	r1, r1, r5
 8002de8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	0194      	lsls	r4, r2, #6
 8002df6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	eb64 0402 	sbc.w	r4, r4, r2
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e10:	00d9      	lsls	r1, r3, #3
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	195b      	adds	r3, r3, r5
 8002e18:	eb44 0406 	adc.w	r4, r4, r6
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	02a2      	lsls	r2, r4, #10
 8002e26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e2a:	0299      	lsls	r1, r3, #10
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd fa3f 	bl	80002c0 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e66:	60bb      	str	r3, [r7, #8]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	007a1200 	.word	0x007a1200

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000000 	.word	0x20000000

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	0801a1dc 	.word	0x0801a1dc

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec4:	f7ff ffdc 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0b5b      	lsrs	r3, r3, #13
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	0801a1dc 	.word	0x0801a1dc

08002ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	08db      	lsrs	r3, r3, #3
 8002f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCC_GetClockConfig+0x60>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40023c00 	.word	0x40023c00

08002f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01d      	b.n	8002f9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f815 	bl	8002fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 f968 	bl	8003260 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d007      	beq.n	8002ff0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d122      	bne.n	800305a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d11b      	bne.n	800305a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0202 	mvn.w	r2, #2
 800302a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f8ee 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8003046:	e005      	b.n	8003054 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8e0 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8f1 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b04      	cmp	r3, #4
 8003066:	d122      	bne.n	80030ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d11b      	bne.n	80030ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0204 	mvn.w	r2, #4
 800307e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8c4 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 800309a:	e005      	b.n	80030a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8b6 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f8c7 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d122      	bne.n	8003102 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d11b      	bne.n	8003102 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f06f 0208 	mvn.w	r2, #8
 80030d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2204      	movs	r2, #4
 80030d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f89a 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 80030ee:	e005      	b.n	80030fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f88c 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f89d 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b10      	cmp	r3, #16
 800310e:	d122      	bne.n	8003156 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b10      	cmp	r3, #16
 800311c:	d11b      	bne.n	8003156 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f06f 0210 	mvn.w	r2, #16
 8003126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2208      	movs	r2, #8
 800312c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f870 	bl	8003222 <HAL_TIM_IC_CaptureCallback>
 8003142:	e005      	b.n	8003150 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f862 	bl	800320e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f873 	bl	8003236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10e      	bne.n	8003182 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f06f 0201 	mvn.w	r2, #1
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd fbdd 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d10e      	bne.n	80031ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	d107      	bne.n	80031ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f903 	bl	80033b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b40      	cmp	r3, #64	; 0x40
 80031ba:	d10e      	bne.n	80031da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d107      	bne.n	80031da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f838 	bl	800324a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d10e      	bne.n	8003206 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0220 	mvn.w	r2, #32
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8cd 	bl	80033a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a40      	ldr	r2, [pc, #256]	; (8003374 <TIM_Base_SetConfig+0x114>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d00f      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a3d      	ldr	r2, [pc, #244]	; (8003378 <TIM_Base_SetConfig+0x118>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3c      	ldr	r2, [pc, #240]	; (800337c <TIM_Base_SetConfig+0x11c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <TIM_Base_SetConfig+0x120>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3a      	ldr	r2, [pc, #232]	; (8003384 <TIM_Base_SetConfig+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <TIM_Base_SetConfig+0x114>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d027      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <TIM_Base_SetConfig+0x118>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d023      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <TIM_Base_SetConfig+0x11c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <TIM_Base_SetConfig+0x120>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <TIM_Base_SetConfig+0x124>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a28      	ldr	r2, [pc, #160]	; (8003388 <TIM_Base_SetConfig+0x128>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a27      	ldr	r2, [pc, #156]	; (800338c <TIM_Base_SetConfig+0x12c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <TIM_Base_SetConfig+0x130>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <TIM_Base_SetConfig+0x134>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a24      	ldr	r2, [pc, #144]	; (8003398 <TIM_Base_SetConfig+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <TIM_Base_SetConfig+0x13c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <TIM_Base_SetConfig+0x114>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <TIM_Base_SetConfig+0x124>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800
 8003394:	40001800 	.word	0x40001800
 8003398:	40001c00 	.word	0x40001c00
 800339c:	40002000 	.word	0x40002000

080033a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e03f      	b.n	800345a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd faea 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	; 0x24
 80033f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f829 	bl	8003464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034a6:	f023 030c 	bic.w	r3, r3, #12
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d2:	f040 818b 	bne.w	80037ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4ac1      	ldr	r2, [pc, #772]	; (80037e0 <UART_SetConfig+0x37c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d005      	beq.n	80034ec <UART_SetConfig+0x88>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4abf      	ldr	r2, [pc, #764]	; (80037e4 <UART_SetConfig+0x380>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f040 80bd 	bne.w	8003666 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff fce8 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80034f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	461d      	mov	r5, r3
 80034f6:	f04f 0600 	mov.w	r6, #0
 80034fa:	46a8      	mov	r8, r5
 80034fc:	46b1      	mov	r9, r6
 80034fe:	eb18 0308 	adds.w	r3, r8, r8
 8003502:	eb49 0409 	adc.w	r4, r9, r9
 8003506:	4698      	mov	r8, r3
 8003508:	46a1      	mov	r9, r4
 800350a:	eb18 0805 	adds.w	r8, r8, r5
 800350e:	eb49 0906 	adc.w	r9, r9, r6
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800351e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003522:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003526:	4688      	mov	r8, r1
 8003528:	4691      	mov	r9, r2
 800352a:	eb18 0005 	adds.w	r0, r8, r5
 800352e:	eb49 0106 	adc.w	r1, r9, r6
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	461d      	mov	r5, r3
 8003538:	f04f 0600 	mov.w	r6, #0
 800353c:	196b      	adds	r3, r5, r5
 800353e:	eb46 0406 	adc.w	r4, r6, r6
 8003542:	461a      	mov	r2, r3
 8003544:	4623      	mov	r3, r4
 8003546:	f7fc febb 	bl	80002c0 <__aeabi_uldivmod>
 800354a:	4603      	mov	r3, r0
 800354c:	460c      	mov	r4, r1
 800354e:	461a      	mov	r2, r3
 8003550:	4ba5      	ldr	r3, [pc, #660]	; (80037e8 <UART_SetConfig+0x384>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	461d      	mov	r5, r3
 8003560:	f04f 0600 	mov.w	r6, #0
 8003564:	46a9      	mov	r9, r5
 8003566:	46b2      	mov	sl, r6
 8003568:	eb19 0309 	adds.w	r3, r9, r9
 800356c:	eb4a 040a 	adc.w	r4, sl, sl
 8003570:	4699      	mov	r9, r3
 8003572:	46a2      	mov	sl, r4
 8003574:	eb19 0905 	adds.w	r9, r9, r5
 8003578:	eb4a 0a06 	adc.w	sl, sl, r6
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800358c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003590:	4689      	mov	r9, r1
 8003592:	4692      	mov	sl, r2
 8003594:	eb19 0005 	adds.w	r0, r9, r5
 8003598:	eb4a 0106 	adc.w	r1, sl, r6
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	461d      	mov	r5, r3
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	196b      	adds	r3, r5, r5
 80035a8:	eb46 0406 	adc.w	r4, r6, r6
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fc fe86 	bl	80002c0 <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <UART_SetConfig+0x384>)
 80035bc:	fba3 1302 	umull	r1, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	2164      	movs	r1, #100	; 0x64
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	4a86      	ldr	r2, [pc, #536]	; (80037e8 <UART_SetConfig+0x384>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035dc:	4498      	add	r8, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	461d      	mov	r5, r3
 80035e2:	f04f 0600 	mov.w	r6, #0
 80035e6:	46a9      	mov	r9, r5
 80035e8:	46b2      	mov	sl, r6
 80035ea:	eb19 0309 	adds.w	r3, r9, r9
 80035ee:	eb4a 040a 	adc.w	r4, sl, sl
 80035f2:	4699      	mov	r9, r3
 80035f4:	46a2      	mov	sl, r4
 80035f6:	eb19 0905 	adds.w	r9, r9, r5
 80035fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800360a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800360e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003612:	4689      	mov	r9, r1
 8003614:	4692      	mov	sl, r2
 8003616:	eb19 0005 	adds.w	r0, r9, r5
 800361a:	eb4a 0106 	adc.w	r1, sl, r6
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	461d      	mov	r5, r3
 8003624:	f04f 0600 	mov.w	r6, #0
 8003628:	196b      	adds	r3, r5, r5
 800362a:	eb46 0406 	adc.w	r4, r6, r6
 800362e:	461a      	mov	r2, r3
 8003630:	4623      	mov	r3, r4
 8003632:	f7fc fe45 	bl	80002c0 <__aeabi_uldivmod>
 8003636:	4603      	mov	r3, r0
 8003638:	460c      	mov	r4, r1
 800363a:	461a      	mov	r2, r3
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <UART_SetConfig+0x384>)
 800363e:	fba3 1302 	umull	r1, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2164      	movs	r1, #100	; 0x64
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	3332      	adds	r3, #50	; 0x32
 8003650:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <UART_SetConfig+0x384>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	f003 0207 	and.w	r2, r3, #7
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4442      	add	r2, r8
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	e26f      	b.n	8003b46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003666:	f7ff fc17 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800366a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	461d      	mov	r5, r3
 8003670:	f04f 0600 	mov.w	r6, #0
 8003674:	46a8      	mov	r8, r5
 8003676:	46b1      	mov	r9, r6
 8003678:	eb18 0308 	adds.w	r3, r8, r8
 800367c:	eb49 0409 	adc.w	r4, r9, r9
 8003680:	4698      	mov	r8, r3
 8003682:	46a1      	mov	r9, r4
 8003684:	eb18 0805 	adds.w	r8, r8, r5
 8003688:	eb49 0906 	adc.w	r9, r9, r6
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800369c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036a0:	4688      	mov	r8, r1
 80036a2:	4691      	mov	r9, r2
 80036a4:	eb18 0005 	adds.w	r0, r8, r5
 80036a8:	eb49 0106 	adc.w	r1, r9, r6
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	461d      	mov	r5, r3
 80036b2:	f04f 0600 	mov.w	r6, #0
 80036b6:	196b      	adds	r3, r5, r5
 80036b8:	eb46 0406 	adc.w	r4, r6, r6
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	f7fc fdfe 	bl	80002c0 <__aeabi_uldivmod>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <UART_SetConfig+0x384>)
 80036cc:	fba3 2302 	umull	r2, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	461d      	mov	r5, r3
 80036da:	f04f 0600 	mov.w	r6, #0
 80036de:	46a9      	mov	r9, r5
 80036e0:	46b2      	mov	sl, r6
 80036e2:	eb19 0309 	adds.w	r3, r9, r9
 80036e6:	eb4a 040a 	adc.w	r4, sl, sl
 80036ea:	4699      	mov	r9, r3
 80036ec:	46a2      	mov	sl, r4
 80036ee:	eb19 0905 	adds.w	r9, r9, r5
 80036f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003702:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003706:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800370a:	4689      	mov	r9, r1
 800370c:	4692      	mov	sl, r2
 800370e:	eb19 0005 	adds.w	r0, r9, r5
 8003712:	eb4a 0106 	adc.w	r1, sl, r6
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	461d      	mov	r5, r3
 800371c:	f04f 0600 	mov.w	r6, #0
 8003720:	196b      	adds	r3, r5, r5
 8003722:	eb46 0406 	adc.w	r4, r6, r6
 8003726:	461a      	mov	r2, r3
 8003728:	4623      	mov	r3, r4
 800372a:	f7fc fdc9 	bl	80002c0 <__aeabi_uldivmod>
 800372e:	4603      	mov	r3, r0
 8003730:	460c      	mov	r4, r1
 8003732:	461a      	mov	r2, r3
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <UART_SetConfig+0x384>)
 8003736:	fba3 1302 	umull	r1, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2164      	movs	r1, #100	; 0x64
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	3332      	adds	r3, #50	; 0x32
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <UART_SetConfig+0x384>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003756:	4498      	add	r8, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	461d      	mov	r5, r3
 800375c:	f04f 0600 	mov.w	r6, #0
 8003760:	46a9      	mov	r9, r5
 8003762:	46b2      	mov	sl, r6
 8003764:	eb19 0309 	adds.w	r3, r9, r9
 8003768:	eb4a 040a 	adc.w	r4, sl, sl
 800376c:	4699      	mov	r9, r3
 800376e:	46a2      	mov	sl, r4
 8003770:	eb19 0905 	adds.w	r9, r9, r5
 8003774:	eb4a 0a06 	adc.w	sl, sl, r6
 8003778:	f04f 0100 	mov.w	r1, #0
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800378c:	4689      	mov	r9, r1
 800378e:	4692      	mov	sl, r2
 8003790:	eb19 0005 	adds.w	r0, r9, r5
 8003794:	eb4a 0106 	adc.w	r1, sl, r6
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	461d      	mov	r5, r3
 800379e:	f04f 0600 	mov.w	r6, #0
 80037a2:	196b      	adds	r3, r5, r5
 80037a4:	eb46 0406 	adc.w	r4, r6, r6
 80037a8:	461a      	mov	r2, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7fc fd88 	bl	80002c0 <__aeabi_uldivmod>
 80037b0:	4603      	mov	r3, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <UART_SetConfig+0x384>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <UART_SetConfig+0x384>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4442      	add	r2, r8
 80037dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037de:	e1b2      	b.n	8003b46 <UART_SetConfig+0x6e2>
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4ad7      	ldr	r2, [pc, #860]	; (8003b50 <UART_SetConfig+0x6ec>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d005      	beq.n	8003802 <UART_SetConfig+0x39e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4ad6      	ldr	r2, [pc, #856]	; (8003b54 <UART_SetConfig+0x6f0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f040 80d1 	bne.w	80039a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003802:	f7ff fb5d 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8003806:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	469a      	mov	sl, r3
 800380c:	f04f 0b00 	mov.w	fp, #0
 8003810:	46d0      	mov	r8, sl
 8003812:	46d9      	mov	r9, fp
 8003814:	eb18 0308 	adds.w	r3, r8, r8
 8003818:	eb49 0409 	adc.w	r4, r9, r9
 800381c:	4698      	mov	r8, r3
 800381e:	46a1      	mov	r9, r4
 8003820:	eb18 080a 	adds.w	r8, r8, sl
 8003824:	eb49 090b 	adc.w	r9, r9, fp
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003834:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003838:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800383c:	4688      	mov	r8, r1
 800383e:	4691      	mov	r9, r2
 8003840:	eb1a 0508 	adds.w	r5, sl, r8
 8003844:	eb4b 0609 	adc.w	r6, fp, r9
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4619      	mov	r1, r3
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	f04f 0400 	mov.w	r4, #0
 800385a:	0094      	lsls	r4, r2, #2
 800385c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	461a      	mov	r2, r3
 8003864:	4623      	mov	r3, r4
 8003866:	4628      	mov	r0, r5
 8003868:	4631      	mov	r1, r6
 800386a:	f7fc fd29 	bl	80002c0 <__aeabi_uldivmod>
 800386e:	4603      	mov	r3, r0
 8003870:	460c      	mov	r4, r1
 8003872:	461a      	mov	r2, r3
 8003874:	4bb8      	ldr	r3, [pc, #736]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	469b      	mov	fp, r3
 8003884:	f04f 0c00 	mov.w	ip, #0
 8003888:	46d9      	mov	r9, fp
 800388a:	46e2      	mov	sl, ip
 800388c:	eb19 0309 	adds.w	r3, r9, r9
 8003890:	eb4a 040a 	adc.w	r4, sl, sl
 8003894:	4699      	mov	r9, r3
 8003896:	46a2      	mov	sl, r4
 8003898:	eb19 090b 	adds.w	r9, r9, fp
 800389c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038b4:	4689      	mov	r9, r1
 80038b6:	4692      	mov	sl, r2
 80038b8:	eb1b 0509 	adds.w	r5, fp, r9
 80038bc:	eb4c 060a 	adc.w	r6, ip, sl
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	f04f 0400 	mov.w	r4, #0
 80038d2:	0094      	lsls	r4, r2, #2
 80038d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038d8:	008b      	lsls	r3, r1, #2
 80038da:	461a      	mov	r2, r3
 80038dc:	4623      	mov	r3, r4
 80038de:	4628      	mov	r0, r5
 80038e0:	4631      	mov	r1, r6
 80038e2:	f7fc fced 	bl	80002c0 <__aeabi_uldivmod>
 80038e6:	4603      	mov	r3, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b9a      	ldr	r3, [pc, #616]	; (8003b58 <UART_SetConfig+0x6f4>)
 80038ee:	fba3 1302 	umull	r1, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2164      	movs	r1, #100	; 0x64
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a95      	ldr	r2, [pc, #596]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	4498      	add	r8, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	469b      	mov	fp, r3
 8003912:	f04f 0c00 	mov.w	ip, #0
 8003916:	46d9      	mov	r9, fp
 8003918:	46e2      	mov	sl, ip
 800391a:	eb19 0309 	adds.w	r3, r9, r9
 800391e:	eb4a 040a 	adc.w	r4, sl, sl
 8003922:	4699      	mov	r9, r3
 8003924:	46a2      	mov	sl, r4
 8003926:	eb19 090b 	adds.w	r9, r9, fp
 800392a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800393e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003942:	4689      	mov	r9, r1
 8003944:	4692      	mov	sl, r2
 8003946:	eb1b 0509 	adds.w	r5, fp, r9
 800394a:	eb4c 060a 	adc.w	r6, ip, sl
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4619      	mov	r1, r3
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f04f 0400 	mov.w	r4, #0
 8003960:	0094      	lsls	r4, r2, #2
 8003962:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003966:	008b      	lsls	r3, r1, #2
 8003968:	461a      	mov	r2, r3
 800396a:	4623      	mov	r3, r4
 800396c:	4628      	mov	r0, r5
 800396e:	4631      	mov	r1, r6
 8003970:	f7fc fca6 	bl	80002c0 <__aeabi_uldivmod>
 8003974:	4603      	mov	r3, r0
 8003976:	460c      	mov	r4, r1
 8003978:	461a      	mov	r2, r3
 800397a:	4b77      	ldr	r3, [pc, #476]	; (8003b58 <UART_SetConfig+0x6f4>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a72      	ldr	r2, [pc, #456]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4442      	add	r2, r8
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	e0d0      	b.n	8003b46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039a4:	f7ff fa78 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80039a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	469a      	mov	sl, r3
 80039ae:	f04f 0b00 	mov.w	fp, #0
 80039b2:	46d0      	mov	r8, sl
 80039b4:	46d9      	mov	r9, fp
 80039b6:	eb18 0308 	adds.w	r3, r8, r8
 80039ba:	eb49 0409 	adc.w	r4, r9, r9
 80039be:	4698      	mov	r8, r3
 80039c0:	46a1      	mov	r9, r4
 80039c2:	eb18 080a 	adds.w	r8, r8, sl
 80039c6:	eb49 090b 	adc.w	r9, r9, fp
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039de:	4688      	mov	r8, r1
 80039e0:	4691      	mov	r9, r2
 80039e2:	eb1a 0508 	adds.w	r5, sl, r8
 80039e6:	eb4b 0609 	adc.w	r6, fp, r9
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	0094      	lsls	r4, r2, #2
 80039fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a02:	008b      	lsls	r3, r1, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	f7fc fc58 	bl	80002c0 <__aeabi_uldivmod>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003a18:	fba3 2302 	umull	r2, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	469b      	mov	fp, r3
 8003a26:	f04f 0c00 	mov.w	ip, #0
 8003a2a:	46d9      	mov	r9, fp
 8003a2c:	46e2      	mov	sl, ip
 8003a2e:	eb19 0309 	adds.w	r3, r9, r9
 8003a32:	eb4a 040a 	adc.w	r4, sl, sl
 8003a36:	4699      	mov	r9, r3
 8003a38:	46a2      	mov	sl, r4
 8003a3a:	eb19 090b 	adds.w	r9, r9, fp
 8003a3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a56:	4689      	mov	r9, r1
 8003a58:	4692      	mov	sl, r2
 8003a5a:	eb1b 0509 	adds.w	r5, fp, r9
 8003a5e:	eb4c 060a 	adc.w	r6, ip, sl
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	f04f 0400 	mov.w	r4, #0
 8003a74:	0094      	lsls	r4, r2, #2
 8003a76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a7a:	008b      	lsls	r3, r1, #2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4623      	mov	r3, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	4631      	mov	r1, r6
 8003a84:	f7fc fc1c 	bl	80002c0 <__aeabi_uldivmod>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003a90:	fba3 1302 	umull	r1, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	2164      	movs	r1, #100	; 0x64
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	3332      	adds	r3, #50	; 0x32
 8003aa2:	4a2d      	ldr	r2, [pc, #180]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aae:	4498      	add	r8, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	469b      	mov	fp, r3
 8003ab4:	f04f 0c00 	mov.w	ip, #0
 8003ab8:	46d9      	mov	r9, fp
 8003aba:	46e2      	mov	sl, ip
 8003abc:	eb19 0309 	adds.w	r3, r9, r9
 8003ac0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac4:	4699      	mov	r9, r3
 8003ac6:	46a2      	mov	sl, r4
 8003ac8:	eb19 090b 	adds.w	r9, r9, fp
 8003acc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003adc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae4:	4689      	mov	r9, r1
 8003ae6:	4692      	mov	sl, r2
 8003ae8:	eb1b 0509 	adds.w	r5, fp, r9
 8003aec:	eb4c 060a 	adc.w	r6, ip, sl
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4619      	mov	r1, r3
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	0094      	lsls	r4, r2, #2
 8003b04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b08:	008b      	lsls	r3, r1, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	4628      	mov	r0, r5
 8003b10:	4631      	mov	r1, r6
 8003b12:	f7fc fbd5 	bl	80002c0 <__aeabi_uldivmod>
 8003b16:	4603      	mov	r3, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <UART_SetConfig+0x6f4>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4442      	add	r2, r8
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	e7ff      	b.n	8003b46 <UART_SetConfig+0x6e2>
 8003b46:	bf00      	nop
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b50:	40011000 	.word	0x40011000
 8003b54:	40011400 	.word	0x40011400
 8003b58:	51eb851f 	.word	0x51eb851f

08003b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	f107 001c 	add.w	r0, r7, #28
 8003b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d122      	bne.n	8003bba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d105      	bne.n	8003bae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa5c 	bl	800406c <USB_CoreReset>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e01a      	b.n	8003bf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa50 	bl	800406c <USB_CoreReset>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
 8003be2:	e005      	b.n	8003bf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10b      	bne.n	8003c0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f043 0206 	orr.w	r2, r3, #6
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1a:	b004      	add	sp, #16
 8003c1c:	4770      	bx	lr

08003c1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d106      	bne.n	8003c6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e00b      	b.n	8003c84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e001      	b.n	8003c84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e003      	b.n	8003c8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c84:	2032      	movs	r0, #50	; 0x32
 8003c86:	f7fd f951 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c94:	b084      	sub	sp, #16
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e009      	b.n	8003cc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0e      	cmp	r3, #14
 8003ccc:	d9f2      	bls.n	8003cb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d112      	bne.n	8003cfa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf8:	e00b      	b.n	8003d12 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	4619      	mov	r1, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	680b      	ldr	r3, [r1, #0]
 8003d30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10c      	bne.n	8003d52 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f961 	bl	8004008 <USB_SetDevSpeed>
 8003d46:	e008      	b.n	8003d5a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f95c 	bl	8004008 <USB_SetDevSpeed>
 8003d50:	e003      	b.n	8003d5a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d52:	2103      	movs	r1, #3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f957 	bl	8004008 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d5a:	2110      	movs	r1, #16
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f90b 	bl	8003f78 <USB_FlushTxFifo>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f929 	bl	8003fc4 <USB_FlushRxFifo>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d82:	461a      	mov	r2, r3
 8003d84:	2300      	movs	r3, #0
 8003d86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e043      	b.n	8003e2e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dbc:	d118      	bne.n	8003df0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e013      	b.n	8003e02 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	461a      	mov	r2, r3
 8003de8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e008      	b.n	8003e02 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2300      	movs	r3, #0
 8003e12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e20:	461a      	mov	r2, r3
 8003e22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d3b7      	bcc.n	8003da6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e043      	b.n	8003ec4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e52:	d118      	bne.n	8003e86 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e66:	461a      	mov	r2, r3
 8003e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	e013      	b.n	8003e98 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e008      	b.n	8003e98 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ebc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3b7      	bcc.n	8003e3c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ede:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d111      	bne.n	8003f0a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <USB_DevInit+0x2dc>)
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	f043 0303 	orr.w	r3, r3, #3
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d105      	bne.n	8003f2a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <USB_DevInit+0x2e0>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f043 0208 	orr.w	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f6a:	b004      	add	sp, #16
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	00800100 	.word	0x00800100
 8003f74:	803c3800 	.word	0x803c3800

08003f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <USB_FlushTxFifo+0x48>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d0f0      	beq.n	8003f92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	00030d40 	.word	0x00030d40

08003fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <USB_FlushRxFifo+0x40>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e006      	b.n	8003ff6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d0f0      	beq.n	8003fd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	00030d40 	.word	0x00030d40

08004008 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800405a:	2003      	movs	r0, #3
 800405c:	f7fc ff66 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <USB_CoreReset+0x64>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e01b      	b.n	80040c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	daf2      	bge.n	8004078 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <USB_CoreReset+0x64>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e006      	b.n	80040c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d0f0      	beq.n	80040a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	00030d40 	.word	0x00030d40

080040d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80040da:	2100      	movs	r1, #0
 80040dc:	2000      	movs	r0, #0
 80040de:	f005 fcb7 	bl	8009a50 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80040e2:	4b17      	ldr	r3, [pc, #92]	; (8004140 <MX_LWIP_Init+0x6c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80040e8:	4b16      	ldr	r3, [pc, #88]	; (8004144 <MX_LWIP_Init+0x70>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <MX_LWIP_Init+0x74>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80040f4:	4b15      	ldr	r3, [pc, #84]	; (800414c <MX_LWIP_Init+0x78>)
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <MX_LWIP_Init+0x7c>)
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <MX_LWIP_Init+0x74>)
 8004102:	4a10      	ldr	r2, [pc, #64]	; (8004144 <MX_LWIP_Init+0x70>)
 8004104:	490e      	ldr	r1, [pc, #56]	; (8004140 <MX_LWIP_Init+0x6c>)
 8004106:	4813      	ldr	r0, [pc, #76]	; (8004154 <MX_LWIP_Init+0x80>)
 8004108:	f006 ffa0 	bl	800b04c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800410c:	4811      	ldr	r0, [pc, #68]	; (8004154 <MX_LWIP_Init+0x80>)
 800410e:	f007 f885 	bl	800b21c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <MX_LWIP_Init+0x80>)
 8004114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004124:	480b      	ldr	r0, [pc, #44]	; (8004154 <MX_LWIP_Init+0x80>)
 8004126:	f007 f889 	bl	800b23c <netif_set_up>
 800412a:	e002      	b.n	8004132 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <MX_LWIP_Init+0x80>)
 800412e:	f007 f8c9 	bl	800b2c4 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004132:	4808      	ldr	r0, [pc, #32]	; (8004154 <MX_LWIP_Init+0x80>)
 8004134:	f00e f9d0 	bl	80124d8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20008ef0 	.word	0x20008ef0
 8004144:	20008ef4 	.word	0x20008ef4
 8004148:	20008ef8 	.word	0x20008ef8
 800414c:	0800994d 	.word	0x0800994d
 8004150:	08004785 	.word	0x08004785
 8004154:	20008ebc 	.word	0x20008ebc

08004158 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a55      	ldr	r2, [pc, #340]	; (80042cc <HAL_ETH_MspInit+0x174>)
 8004176:	4293      	cmp	r3, r2
 8004178:	f040 80a4 	bne.w	80042c4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800417c:	2300      	movs	r3, #0
 800417e:	623b      	str	r3, [r7, #32]
 8004180:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	4a52      	ldr	r2, [pc, #328]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 8004186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800418a:	6313      	str	r3, [r2, #48]	; 0x30
 800418c:	4b50      	ldr	r3, [pc, #320]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	4a4b      	ldr	r2, [pc, #300]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041a6:	6313      	str	r3, [r2, #48]	; 0x30
 80041a8:	4b49      	ldr	r3, [pc, #292]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4a44      	ldr	r2, [pc, #272]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041c2:	6313      	str	r3, [r2, #48]	; 0x30
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4a3d      	ldr	r2, [pc, #244]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	6313      	str	r3, [r2, #48]	; 0x30
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	4a36      	ldr	r2, [pc, #216]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6313      	str	r3, [r2, #48]	; 0x30
 80041fc:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	6313      	str	r3, [r2, #48]	; 0x30
 8004218:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 800422e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004232:	6313      	str	r3, [r2, #48]	; 0x30
 8004234:	4b26      	ldr	r3, [pc, #152]	; (80042d0 <HAL_ETH_MspInit+0x178>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004240:	2332      	movs	r3, #50	; 0x32
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424c:	2303      	movs	r3, #3
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004250:	230b      	movs	r3, #11
 8004252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004258:	4619      	mov	r1, r3
 800425a:	481e      	ldr	r0, [pc, #120]	; (80042d4 <HAL_ETH_MspInit+0x17c>)
 800425c:	f7fd ff02 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004260:	2386      	movs	r3, #134	; 0x86
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426c:	2303      	movs	r3, #3
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004270:	230b      	movs	r3, #11
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004278:	4619      	mov	r1, r3
 800427a:	4817      	ldr	r0, [pc, #92]	; (80042d8 <HAL_ETH_MspInit+0x180>)
 800427c:	f7fd fef2 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428e:	2303      	movs	r3, #3
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004292:	230b      	movs	r3, #11
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429a:	4619      	mov	r1, r3
 800429c:	480f      	ldr	r0, [pc, #60]	; (80042dc <HAL_ETH_MspInit+0x184>)
 800429e:	f7fd fee1 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80042a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042b4:	230b      	movs	r3, #11
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042bc:	4619      	mov	r1, r3
 80042be:	4808      	ldr	r0, [pc, #32]	; (80042e0 <HAL_ETH_MspInit+0x188>)
 80042c0:	f7fd fed0 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80042c4:	bf00      	nop
 80042c6:	3738      	adds	r7, #56	; 0x38
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40028000 	.word	0x40028000
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40020800 	.word	0x40020800
 80042d8:	40020000 	.word	0x40020000
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40021800 	.word	0x40021800

080042e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b090      	sub	sp, #64	; 0x40
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80042f0:	4b5c      	ldr	r3, [pc, #368]	; (8004464 <low_level_init+0x180>)
 80042f2:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <low_level_init+0x184>)
 80042f4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80042f6:	4b5b      	ldr	r3, [pc, #364]	; (8004464 <low_level_init+0x180>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <low_level_init+0x180>)
 80042fe:	2200      	movs	r2, #0
 8004300:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800430e:	23e1      	movs	r3, #225	; 0xe1
 8004310:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004314:	23fe      	movs	r3, #254	; 0xfe
 8004316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 800431a:	23ec      	movs	r3, #236	; 0xec
 800431c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8004320:	2371      	movs	r3, #113	; 0x71
 8004322:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004326:	4a4f      	ldr	r2, [pc, #316]	; (8004464 <low_level_init+0x180>)
 8004328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800432c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <low_level_init+0x180>)
 8004330:	2201      	movs	r2, #1
 8004332:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004334:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <low_level_init+0x180>)
 8004336:	2200      	movs	r2, #0
 8004338:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <low_level_init+0x180>)
 800433c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004340:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004342:	4848      	ldr	r0, [pc, #288]	; (8004464 <low_level_init+0x180>)
 8004344:	f7fc fef6 	bl	8001134 <HAL_ETH_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800434e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800435c:	f043 0304 	orr.w	r3, r3, #4
 8004360:	b2da      	uxtb	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004368:	2304      	movs	r3, #4
 800436a:	4a40      	ldr	r2, [pc, #256]	; (800446c <low_level_init+0x188>)
 800436c:	4940      	ldr	r1, [pc, #256]	; (8004470 <low_level_init+0x18c>)
 800436e:	483d      	ldr	r0, [pc, #244]	; (8004464 <low_level_init+0x180>)
 8004370:	f7fd f87e 	bl	8001470 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004374:	2304      	movs	r3, #4
 8004376:	4a3f      	ldr	r2, [pc, #252]	; (8004474 <low_level_init+0x190>)
 8004378:	493f      	ldr	r1, [pc, #252]	; (8004478 <low_level_init+0x194>)
 800437a:	483a      	ldr	r0, [pc, #232]	; (8004464 <low_level_init+0x180>)
 800437c:	f7fd f8e1 	bl	8001542 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2206      	movs	r2, #6
 8004384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <low_level_init+0x180>)
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004394:	4b33      	ldr	r3, [pc, #204]	; (8004464 <low_level_init+0x180>)
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	785a      	ldrb	r2, [r3, #1]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <low_level_init+0x180>)
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	789a      	ldrb	r2, [r3, #2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043ac:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <low_level_init+0x180>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	78da      	ldrb	r2, [r3, #3]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <low_level_init+0x180>)
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	791a      	ldrb	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <low_level_init+0x180>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	795a      	ldrb	r2, [r3, #5]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043d6:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80043de:	f043 030a 	orr.w	r3, r3, #10
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80043ea:	2300      	movs	r3, #0
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ee:	2300      	movs	r3, #0
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80043f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fb35 	bl	8004a68 <osSemaphoreCreate>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <low_level_init+0x198>)
 8004402:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004404:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <low_level_init+0x19c>)
 8004406:	f107 040c 	add.w	r4, r7, #12
 800440a:	461d      	mov	r5, r3
 800440c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800440e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fa26 	bl	8004870 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004424:	480f      	ldr	r0, [pc, #60]	; (8004464 <low_level_init+0x180>)
 8004426:	f7fd fb39 	bl	8001a9c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800442a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800442e:	461a      	mov	r2, r3
 8004430:	211d      	movs	r1, #29
 8004432:	480c      	ldr	r0, [pc, #48]	; (8004464 <low_level_init+0x180>)
 8004434:	f7fd fa64 	bl	8001900 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	f043 030b 	orr.w	r3, r3, #11
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	461a      	mov	r2, r3
 8004444:	211d      	movs	r1, #29
 8004446:	4807      	ldr	r0, [pc, #28]	; (8004464 <low_level_init+0x180>)
 8004448:	f7fd fac2 	bl	80019d0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800444c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004450:	461a      	mov	r2, r3
 8004452:	211d      	movs	r1, #29
 8004454:	4803      	ldr	r0, [pc, #12]	; (8004464 <low_level_init+0x180>)
 8004456:	f7fd fa53 	bl	8001900 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800445a:	bf00      	nop
 800445c:	3740      	adds	r7, #64	; 0x40
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	2000a7cc 	.word	0x2000a7cc
 8004468:	40028000 	.word	0x40028000
 800446c:	2000a814 	.word	0x2000a814
 8004470:	20008efc 	.word	0x20008efc
 8004474:	20008f7c 	.word	0x20008f7c
 8004478:	2000a74c 	.word	0x2000a74c
 800447c:	200002f8 	.word	0x200002f8
 8004480:	080173a4 	.word	0x080173a4

08004484 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800448e:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <low_level_output+0x138>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80044a6:	4b45      	ldr	r3, [pc, #276]	; (80045bc <low_level_output+0x138>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	e05a      	b.n	800456c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da03      	bge.n	80044c6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80044be:	23f8      	movs	r3, #248	; 0xf8
 80044c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80044c4:	e05c      	b.n	8004580 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	895b      	ldrh	r3, [r3, #10]
 80044ca:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80044d0:	e02f      	b.n	8004532 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	18d0      	adds	r0, r2, r3
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	18d1      	adds	r1, r2, r3
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80044e6:	3304      	adds	r3, #4
 80044e8:	461a      	mov	r2, r3
 80044ea:	f011 ffdc 	bl	80164a6 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da03      	bge.n	8004504 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80044fc:	23f8      	movs	r3, #248	; 0xf8
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004502:	e03d      	b.n	8004580 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004514:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004520:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800452c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800453c:	4293      	cmp	r3, r2
 800453e:	d8c8      	bhi.n	80044d2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	18d0      	adds	r0, r2, r3
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4619      	mov	r1, r3
 8004552:	f011 ffa8 	bl	80164a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1a1      	bne.n	80044b6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004572:	6979      	ldr	r1, [r7, #20]
 8004574:	4811      	ldr	r0, [pc, #68]	; (80045bc <low_level_output+0x138>)
 8004576:	f7fd f851 	bl	800161c <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <low_level_output+0x138>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	3314      	adds	r3, #20
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <low_level_output+0x138>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459c:	3314      	adds	r3, #20
 800459e:	2220      	movs	r2, #32
 80045a0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <low_level_output+0x138>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045aa:	3304      	adds	r3, #4
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80045b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3728      	adds	r7, #40	; 0x28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	2000a7cc 	.word	0x2000a7cc

080045c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80045e4:	484e      	ldr	r0, [pc, #312]	; (8004720 <low_level_input+0x160>)
 80045e6:	f7fd f903 	bl	80017f0 <HAL_ETH_GetReceivedFrame_IT>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <low_level_input+0x34>
  
    return NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e091      	b.n	8004718 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <low_level_input+0x160>)
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80045fa:	4b49      	ldr	r3, [pc, #292]	; (8004720 <low_level_input+0x160>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	2203      	movs	r2, #3
 800460a:	4619      	mov	r1, r3
 800460c:	2004      	movs	r0, #4
 800460e:	f006 fedb 	bl	800b3c8 <pbuf_alloc>
 8004612:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04b      	beq.n	80046b2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800461a:	4b41      	ldr	r3, [pc, #260]	; (8004720 <low_level_input+0x160>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	e040      	b.n	80046ac <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	895b      	ldrh	r3, [r3, #10]
 800462e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004634:	e021      	b.n	800467a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	18d0      	adds	r0, r2, r3
 800463e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	18d1      	adds	r1, r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800464a:	3304      	adds	r3, #4
 800464c:	461a      	mov	r2, r3
 800464e:	f011 ff2a 	bl	80164a6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004668:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004674:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004684:	4293      	cmp	r3, r2
 8004686:	d8d6      	bhi.n	8004636 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	18d0      	adds	r0, r2, r3
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4619      	mov	r1, r3
 800469a:	f011 ff04 	bl	80164a6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4413      	add	r3, r2
 80046a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1bb      	bne.n	800462a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <low_level_input+0x160>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	e00b      	b.n	80046d6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	3301      	adds	r3, #1
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <low_level_input+0x160>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d3ee      	bcc.n	80046be <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <low_level_input+0x160>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <low_level_input+0x160>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	3314      	adds	r3, #20
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <low_level_input+0x160>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	3314      	adds	r3, #20
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <low_level_input+0x160>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004710:	3308      	adds	r3, #8
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004718:	4618      	mov	r0, r3
 800471a:	3730      	adds	r7, #48	; 0x30
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	2000a7cc 	.word	0x2000a7cc

08004724 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <ethernetif_input+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f9c9 	bl	8004ad0 <osSemaphoreWait>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f5      	bne.n	8004730 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004744:	480e      	ldr	r0, [pc, #56]	; (8004780 <ethernetif_input+0x5c>)
 8004746:	f011 fe1b 	bl	8016380 <sys_mutex_lock>
        p = low_level_input( netif );
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff38 	bl	80045c0 <low_level_input>
 8004750:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	68b8      	ldr	r0, [r7, #8]
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004768:	68b8      	ldr	r0, [r7, #8]
 800476a:	f007 f99f 	bl	800baac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800476e:	4804      	ldr	r0, [pc, #16]	; (8004780 <ethernetif_input+0x5c>)
 8004770:	f011 fe15 	bl	801639e <sys_mutex_unlock>
      } while(p!=NULL);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e4      	bne.n	8004744 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800477a:	e7d9      	b.n	8004730 <ethernetif_input+0xc>
 800477c:	200002f8 	.word	0x200002f8
 8004780:	2000c028 	.word	0x2000c028

08004784 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <ethernetif_init+0x1c>
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <ethernetif_init+0x48>)
 8004794:	f240 222b 	movw	r2, #555	; 0x22b
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <ethernetif_init+0x4c>)
 800479a:	480e      	ldr	r0, [pc, #56]	; (80047d4 <ethernetif_init+0x50>)
 800479c:	f011 fe96 	bl	80164cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2273      	movs	r2, #115	; 0x73
 80047a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2274      	movs	r2, #116	; 0x74
 80047ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <ethernetif_init+0x54>)
 80047b4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a08      	ldr	r2, [pc, #32]	; (80047dc <ethernetif_init+0x58>)
 80047ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fd91 	bl	80042e4 <low_level_init>

  return ERR_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080173c0 	.word	0x080173c0
 80047d0:	080173dc 	.word	0x080173dc
 80047d4:	080173ec 	.word	0x080173ec
 80047d8:	08014441 	.word	0x08014441
 80047dc:	08004485 	.word	0x08004485

080047e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047e4:	f7fc fb96 	bl	8000f14 <HAL_GetTick>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	bd80      	pop	{r7, pc}

080047ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004800:	2b84      	cmp	r3, #132	; 0x84
 8004802:	d005      	beq.n	8004810 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004804:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	3303      	adds	r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	607b      	str	r3, [r7, #4]
  return(result);
 800482a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004846:	f001 fcf9 	bl	800623c <vTaskStartScheduler>
  
  return osOK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}

08004850 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004854:	f7ff ffe3 	bl	800481e <inHandlerMode>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800485e:	f001 fe05 	bl	800646c <xTaskGetTickCountFromISR>
 8004862:	4603      	mov	r3, r0
 8004864:	e002      	b.n	800486c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004866:	f001 fdf1 	bl	800644c <xTaskGetTickCount>
 800486a:	4603      	mov	r3, r0
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}

08004870 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af04      	add	r7, sp, #16
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <osThreadCreate+0x54>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01c      	beq.n	80048c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685c      	ldr	r4, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681d      	ldr	r5, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691e      	ldr	r6, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ffa6 	bl	80047ee <makeFreeRtosPriority>
 80048a2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9100      	str	r1, [sp, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	4632      	mov	r2, r6
 80048b6:	4629      	mov	r1, r5
 80048b8:	4620      	mov	r0, r4
 80048ba:	f001 fb05 	bl	8005ec8 <xTaskCreateStatic>
 80048be:	4603      	mov	r3, r0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e01c      	b.n	80048fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685c      	ldr	r4, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048d0:	b29e      	uxth	r6, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff88 	bl	80047ee <makeFreeRtosPriority>
 80048de:	4602      	mov	r2, r0
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	9200      	str	r2, [sp, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4632      	mov	r2, r6
 80048ec:	4629      	mov	r1, r5
 80048ee:	4620      	mov	r0, r4
 80048f0:	f001 fb43 	bl	8005f7a <xTaskCreate>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004908 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <osDelay+0x16>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	e000      	b.n	8004920 <osDelay+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fc57 	bl	80061d4 <vTaskDelay>
  
  return osOK;
 8004926:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	2001      	movs	r0, #1
 8004948:	f000 fc7c 	bl	8005244 <xQueueCreateMutexStatic>
 800494c:	4603      	mov	r3, r0
 800494e:	e003      	b.n	8004958 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004950:	2001      	movs	r0, #1
 8004952:	f000 fc5f 	bl	8005214 <xQueueCreateMutex>
 8004956:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <osMutexWait+0x18>
    return osErrorParameter;
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	e03a      	b.n	80049ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004982:	d103      	bne.n	800498c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e009      	b.n	80049a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <osMutexWait+0x40>
      ticks = 1;
 800499c:	2301      	movs	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80049a0:	f7ff ff3d 	bl	800481e <inHandlerMode>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	461a      	mov	r2, r3
 80049b0:	2100      	movs	r1, #0
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f001 f85e 	bl	8005a74 <xQueueReceiveFromISR>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <osMutexWait+0x62>
      return osErrorOS;
 80049be:	23ff      	movs	r3, #255	; 0xff
 80049c0:	e015      	b.n	80049ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d011      	beq.n	80049ec <osMutexWait+0x8c>
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <osMutexWait+0x98>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	e008      	b.n	80049ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 ff41 	bl	8005864 <xQueueSemaphoreTake>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d001      	beq.n	80049ec <osMutexWait+0x8c>
    return osErrorOS;
 80049e8:	23ff      	movs	r3, #255	; 0xff
 80049ea:	e000      	b.n	80049ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004a0c:	f7ff ff07 	bl	800481e <inHandlerMode>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fdbb 	bl	8005598 <xQueueGiveFromISR>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <osMutexRelease+0x30>
      return osErrorOS;
 8004a28:	23ff      	movs	r3, #255	; 0xff
 8004a2a:	e017      	b.n	8004a5c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d013      	beq.n	8004a5a <osMutexRelease+0x5e>
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <osMutexRelease+0x68>)
 8004a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	e00a      	b.n	8004a5a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004a44:	2300      	movs	r3, #0
 8004a46:	2200      	movs	r2, #0
 8004a48:	2100      	movs	r1, #0
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc16 	bl	800527c <xQueueGenericSend>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d001      	beq.n	8004a5a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004a56:	23ff      	movs	r3, #255	; 0xff
 8004a58:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d10b      	bne.n	8004a98 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	2303      	movs	r3, #3
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f000 fad8 	bl	8005044 <xQueueGenericCreateStatic>
 8004a94:	4603      	mov	r3, r0
 8004a96:	e016      	b.n	8004ac6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e014      	b.n	8004ac6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d110      	bne.n	8004ac4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f000 fb3e 	bl	8005128 <xQueueGenericCreate>
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <osSemaphoreCreate+0x58>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2100      	movs	r1, #0
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 fbde 	bl	800527c <xQueueGenericSend>
      return sema;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	e000      	b.n	8004ac6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004ac4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	e03a      	b.n	8004b5e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af2:	d103      	bne.n	8004afc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e009      	b.n	8004b10 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <osSemaphoreWait+0x40>
      ticks = 1;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004b10:	f7ff fe85 	bl	800481e <inHandlerMode>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d017      	beq.n	8004b4a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004b1a:	f107 0308 	add.w	r3, r7, #8
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2100      	movs	r1, #0
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 ffa6 	bl	8005a74 <xQueueReceiveFromISR>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d001      	beq.n	8004b32 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004b2e:	23ff      	movs	r3, #255	; 0xff
 8004b30:	e015      	b.n	8004b5e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d011      	beq.n	8004b5c <osSemaphoreWait+0x8c>
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <osSemaphoreWait+0x98>)
 8004b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	e008      	b.n	8004b5c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fe89 	bl	8005864 <xQueueSemaphoreTake>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004b58:	23ff      	movs	r3, #255	; 0xff
 8004b5a:	e000      	b.n	8004b5e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004b7c:	f7ff fe4f 	bl	800481e <inHandlerMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fd03 	bl	8005598 <xQueueGiveFromISR>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d001      	beq.n	8004b9c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004b98:	23ff      	movs	r3, #255	; 0xff
 8004b9a:	e017      	b.n	8004bcc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d013      	beq.n	8004bca <osSemaphoreRelease+0x5e>
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <osSemaphoreRelease+0x68>)
 8004ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	e00a      	b.n	8004bca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2100      	movs	r1, #0
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb5e 	bl	800527c <xQueueGenericSend>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004bc6:	23ff      	movs	r3, #255	; 0xff
 8004bc8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004be0:	f7ff fe1d 	bl	800481e <inHandlerMode>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004bea:	2382      	movs	r3, #130	; 0x82
 8004bec:	e003      	b.n	8004bf6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fff5 	bl	8005bde <vQueueDelete>

  return osOK; 
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004bfe:	b590      	push	{r4, r7, lr}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <osMessageCreate+0x38>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00e      	beq.n	8004c36 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68dc      	ldr	r4, [r3, #12]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4623      	mov	r3, r4
 8004c2e:	f000 fa09 	bl	8005044 <xQueueGenericCreateStatic>
 8004c32:	4603      	mov	r3, r0
 8004c34:	e008      	b.n	8004c48 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	4619      	mov	r1, r3
 8004c42:	f000 fa71 	bl	8005128 <xQueueGenericCreate>
 8004c46:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}

08004c50 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <osMessagePut+0x1e>
    ticks = 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004c6e:	f7ff fdd6 	bl	800481e <inHandlerMode>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d018      	beq.n	8004caa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004c78:	f107 0210 	add.w	r2, r7, #16
 8004c7c:	f107 0108 	add.w	r1, r7, #8
 8004c80:	2300      	movs	r3, #0
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fbf4 	bl	8005470 <xQueueGenericSendFromISR>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d001      	beq.n	8004c92 <osMessagePut+0x42>
      return osErrorOS;
 8004c8e:	23ff      	movs	r3, #255	; 0xff
 8004c90:	e018      	b.n	8004cc4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d014      	beq.n	8004cc2 <osMessagePut+0x72>
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <osMessagePut+0x7c>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	e00b      	b.n	8004cc2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004caa:	f107 0108 	add.w	r1, r7, #8
 8004cae:	2300      	movs	r3, #0
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fae2 	bl	800527c <xQueueGenericSend>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d001      	beq.n	8004cc2 <osMessagePut+0x72>
      return osErrorOS;
 8004cbe:	23ff      	movs	r3, #255	; 0xff
 8004cc0:	e000      	b.n	8004cc4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b08b      	sub	sp, #44	; 0x2c
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	617b      	str	r3, [r7, #20]
    return event;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	461c      	mov	r4, r3
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004cfe:	e054      	b.n	8004daa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0e:	d103      	bne.n	8004d18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
 8004d16:	e009      	b.n	8004d2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <osMessageGet+0x5c>
      ticks = 1;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004d2c:	f7ff fd77 	bl	800481e <inHandlerMode>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01c      	beq.n	8004d70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004d36:	f107 0220 	add.w	r2, r7, #32
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	68b8      	ldr	r0, [r7, #8]
 8004d44:	f000 fe96 	bl	8005a74 <xQueueReceiveFromISR>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d102      	bne.n	8004d54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004d4e:	2310      	movs	r3, #16
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e001      	b.n	8004d58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01d      	beq.n	8004d9a <osMessageGet+0xca>
 8004d5e:	4b15      	ldr	r3, [pc, #84]	; (8004db4 <osMessageGet+0xe4>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	e014      	b.n	8004d9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004d70:	f107 0314 	add.w	r3, r7, #20
 8004d74:	3304      	adds	r3, #4
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	68b8      	ldr	r0, [r7, #8]
 8004d7c:	f000 fc96 	bl	80056ac <xQueueReceive>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d102      	bne.n	8004d8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004d86:	2310      	movs	r3, #16
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e006      	b.n	8004d9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <osMessageGet+0xc6>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <osMessageGet+0xc8>
 8004d96:	2340      	movs	r3, #64	; 0x40
 8004d98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	461c      	mov	r4, r3
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	372c      	adds	r7, #44	; 0x2c
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd90      	pop	{r4, r7, pc}
 8004db2:	bf00      	nop
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004dc0:	f7ff fd2d 	bl	800481e <inHandlerMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 feec 	bl	8005ba8 <uxQueueMessagesWaitingFromISR>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	e003      	b.n	8004ddc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 feca 	bl	8005b6e <uxQueueMessagesWaiting>
 8004dda:	4603      	mov	r3, r0
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004dec:	f7ff fd17 	bl	800481e <inHandlerMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <osMessageDelete+0x16>
    return osErrorISR;
 8004df6:	2382      	movs	r3, #130	; 0x82
 8004df8:	e003      	b.n	8004e02 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 feef 	bl	8005bde <vQueueDelete>

  return osOK; 
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f103 0208 	add.w	r2, r3, #8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f103 0208 	add.w	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f103 0208 	add.w	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec2:	d103      	bne.n	8004ecc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e00c      	b.n	8004ee6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e002      	b.n	8004eda <vListInsert+0x2e>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d2f6      	bcs.n	8004ed4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6892      	ldr	r2, [r2, #8]
 8004f34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6852      	ldr	r2, [r2, #4]
 8004f3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d103      	bne.n	8004f52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	e7fe      	b.n	8004f9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004f9c:	f002 f8d6 	bl	800714c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	68f9      	ldr	r1, [r7, #12]
 8004faa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	441a      	add	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	22ff      	movs	r2, #255	; 0xff
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	22ff      	movs	r2, #255	; 0xff
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d114      	bne.n	800501c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01a      	beq.n	8005030 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 fb80 	bl	8006704 <xTaskRemoveFromEventList>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <xQueueGenericReset+0xcc>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	e009      	b.n	8005030 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3310      	adds	r3, #16
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fef2 	bl	8004e0a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff feed 	bl	8004e0a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005030:	f002 f8ba 	bl	80071a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005034:	2301      	movs	r3, #1
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08e      	sub	sp, #56	; 0x38
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d109      	bne.n	800506c <xQueueGenericCreateStatic+0x28>
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	e7fe      	b.n	800506a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <xQueueGenericCreateStatic+0x42>
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
 8005084:	e7fe      	b.n	8005084 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <xQueueGenericCreateStatic+0x4e>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <xQueueGenericCreateStatic+0x52>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <xQueueGenericCreateStatic+0x54>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <xQueueGenericCreateStatic+0x6c>
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	e7fe      	b.n	80050ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <xQueueGenericCreateStatic+0x78>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <xQueueGenericCreateStatic+0x7c>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <xQueueGenericCreateStatic+0x7e>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <xQueueGenericCreateStatic+0x96>
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050da:	2348      	movs	r3, #72	; 0x48
 80050dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b48      	cmp	r3, #72	; 0x48
 80050e2:	d009      	beq.n	80050f8 <xQueueGenericCreateStatic+0xb4>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e7fe      	b.n	80050f6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00d      	beq.n	800511e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800510a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f842 	bl	80051a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005120:	4618      	mov	r0, r3
 8005122:	3730      	adds	r7, #48	; 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <xQueueGenericCreate+0x28>
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	e7fe      	b.n	800514e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e004      	b.n	8005166 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3348      	adds	r3, #72	; 0x48
 800516a:	4618      	mov	r0, r3
 800516c:	f002 f908 	bl	8007380 <pvPortMalloc>
 8005170:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00f      	beq.n	8005198 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3348      	adds	r3, #72	; 0x48
 800517c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005186:	79fa      	ldrb	r2, [r7, #7]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f805 	bl	80051a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005198:	69bb      	ldr	r3, [r7, #24]
	}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e002      	b.n	80051c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051d0:	2101      	movs	r1, #1
 80051d2:	69b8      	ldr	r0, [r7, #24]
 80051d4:	f7ff fece 	bl	8004f74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00e      	beq.n	800520c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005200:	2300      	movs	r3, #0
 8005202:	2200      	movs	r2, #0
 8005204:	2100      	movs	r1, #0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f838 	bl	800527c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800521e:	2301      	movs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	461a      	mov	r2, r3
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f7ff ff7b 	bl	8005128 <xQueueGenericCreate>
 8005232:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff ffd3 	bl	80051e0 <prvInitialiseMutex>

		return pxNewQueue;
 800523a:	68fb      	ldr	r3, [r7, #12]
	}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af02      	add	r7, sp, #8
 800524a:	4603      	mov	r3, r0
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	6939      	ldr	r1, [r7, #16]
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff feee 	bl	8005044 <xQueueGenericCreateStatic>
 8005268:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ffb8 	bl	80051e0 <prvInitialiseMutex>

		return pxNewQueue;
 8005270:	68fb      	ldr	r3, [r7, #12]
	}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08e      	sub	sp, #56	; 0x38
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <xQueueGenericSend+0x30>
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSend+0x3e>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <xQueueGenericSend+0x42>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSend+0x44>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <xQueueGenericSend+0x5c>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e7fe      	b.n	80052d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x6a>
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <xQueueGenericSend+0x6e>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericSend+0x70>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <xQueueGenericSend+0x88>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e7fe      	b.n	8005302 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005304:	f001 fbba 	bl	8006a7c <xTaskGetSchedulerState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <xQueueGenericSend+0x98>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <xQueueGenericSend+0x9c>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <xQueueGenericSend+0x9e>
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <xQueueGenericSend+0xb6>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e7fe      	b.n	8005330 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005332:	f001 ff0b 	bl	800714c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <xQueueGenericSend+0xcc>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d129      	bne.n	800539c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800534e:	f000 fc80 	bl	8005c52 <prvCopyDataToQueue>
 8005352:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	3324      	adds	r3, #36	; 0x24
 8005360:	4618      	mov	r0, r3
 8005362:	f001 f9cf 	bl	8006704 <xTaskRemoveFromEventList>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d013      	beq.n	8005394 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <xQueueGenericSend+0x1f0>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	e00a      	b.n	8005394 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005384:	4b39      	ldr	r3, [pc, #228]	; (800546c <xQueueGenericSend+0x1f0>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005394:	f001 ff08 	bl	80071a8 <vPortExitCritical>
				return pdPASS;
 8005398:	2301      	movs	r3, #1
 800539a:	e063      	b.n	8005464 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053a2:	f001 ff01 	bl	80071a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e05c      	b.n	8005464 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 fa07 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053be:	f001 fef3 	bl	80071a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053c2:	f000 ff99 	bl	80062f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053c6:	f001 fec1 	bl	800714c <vPortEnterCritical>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053d0:	b25b      	sxtb	r3, r3
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d6:	d103      	bne.n	80053e0 <xQueueGenericSend+0x164>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053e6:	b25b      	sxtb	r3, r3
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d103      	bne.n	80053f6 <xQueueGenericSend+0x17a>
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f6:	f001 fed7 	bl	80071a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053fa:	1d3a      	adds	r2, r7, #4
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f001 f9f6 	bl	80067f4 <xTaskCheckForTimeOut>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d124      	bne.n	8005458 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800540e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005410:	f000 fd17 	bl	8005e42 <prvIsQueueFull>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d018      	beq.n	800544c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	3310      	adds	r3, #16
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4611      	mov	r1, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f94a 	bl	80066bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800542a:	f000 fca2 	bl	8005d72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800542e:	f000 ff71 	bl	8006314 <xTaskResumeAll>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f af7c 	bne.w	8005332 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800543a:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xQueueGenericSend+0x1f0>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	e772      	b.n	8005332 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800544c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544e:	f000 fc90 	bl	8005d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005452:	f000 ff5f 	bl	8006314 <xTaskResumeAll>
 8005456:	e76c      	b.n	8005332 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545a:	f000 fc8a 	bl	8005d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800545e:	f000 ff59 	bl	8006314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005462:	2300      	movs	r3, #0
		}
	}
}
 8005464:	4618      	mov	r0, r3
 8005466:	3738      	adds	r7, #56	; 0x38
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <xQueueGenericSendFromISR+0x2c>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e7fe      	b.n	800549a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSendFromISR+0x3a>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <xQueueGenericSendFromISR+0x3e>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericSendFromISR+0x40>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <xQueueGenericSendFromISR+0x58>
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSendFromISR+0x66>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xQueueGenericSendFromISR+0x6a>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSendFromISR+0x6c>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueGenericSendFromISR+0x84>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054f4:	f001 ff06 	bl	8007304 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054f8:	f3ef 8211 	mrs	r2, BASEPRI
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	61ba      	str	r2, [r7, #24]
 800550e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005510:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551c:	429a      	cmp	r2, r3
 800551e:	d302      	bcc.n	8005526 <xQueueGenericSendFromISR+0xb6>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d12c      	bne.n	8005580 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800552c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005536:	f000 fb8c 	bl	8005c52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800553a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005542:	d112      	bne.n	800556a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b00      	cmp	r3, #0
 800554a:	d016      	beq.n	800557a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	3324      	adds	r3, #36	; 0x24
 8005550:	4618      	mov	r0, r3
 8005552:	f001 f8d7 	bl	8006704 <xTaskRemoveFromEventList>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e007      	b.n	800557a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800556a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800556e:	3301      	adds	r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	b25a      	sxtb	r2, r3
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800557e:	e001      	b.n	8005584 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005580:	2300      	movs	r3, #0
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005590:	4618      	mov	r0, r3
 8005592:	3738      	adds	r7, #56	; 0x38
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	; 0x38
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <xQueueGiveFromISR+0x28>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	e7fe      	b.n	80055be <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <xQueueGiveFromISR+0x44>
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e7fe      	b.n	80055da <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <xQueueGiveFromISR+0x54>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xQueueGiveFromISR+0x58>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <xQueueGiveFromISR+0x5a>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d109      	bne.n	800560a <xQueueGiveFromISR+0x72>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e7fe      	b.n	8005608 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800560a:	f001 fe7b 	bl	8007304 <vPortValidateInterruptPriority>
	__asm volatile
 800560e:	f3ef 8211 	mrs	r2, BASEPRI
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	617a      	str	r2, [r7, #20]
 8005624:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005626:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005636:	429a      	cmp	r2, r3
 8005638:	d22b      	bcs.n	8005692 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800564c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005654:	d112      	bne.n	800567c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	3324      	adds	r3, #36	; 0x24
 8005662:	4618      	mov	r0, r3
 8005664:	f001 f84e 	bl	8006704 <xTaskRemoveFromEventList>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e007      	b.n	800568c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800567c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005680:	3301      	adds	r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	b25a      	sxtb	r2, r3
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800568c:	2301      	movs	r3, #1
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	e001      	b.n	8005696 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005692:	2300      	movs	r3, #0
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3738      	adds	r7, #56	; 0x38
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <xQueueReceive+0x2e>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	e7fe      	b.n	80056d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <xQueueReceive+0x3c>
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <xQueueReceive+0x40>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <xQueueReceive+0x42>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <xQueueReceive+0x5a>
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e7fe      	b.n	8005704 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005706:	f001 f9b9 	bl	8006a7c <xTaskGetSchedulerState>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <xQueueReceive+0x6a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <xQueueReceive+0x6e>
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <xQueueReceive+0x70>
 800571a:	2300      	movs	r3, #0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueReceive+0x88>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	e7fe      	b.n	8005732 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005734:	f001 fd0a 	bl	800714c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01f      	beq.n	8005784 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005748:	f000 faed 	bl	8005d26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00f      	beq.n	800577c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	3310      	adds	r3, #16
 8005760:	4618      	mov	r0, r3
 8005762:	f000 ffcf 	bl	8006704 <xTaskRemoveFromEventList>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800576c:	4b3c      	ldr	r3, [pc, #240]	; (8005860 <xQueueReceive+0x1b4>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800577c:	f001 fd14 	bl	80071a8 <vPortExitCritical>
				return pdPASS;
 8005780:	2301      	movs	r3, #1
 8005782:	e069      	b.n	8005858 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800578a:	f001 fd0d 	bl	80071a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800578e:	2300      	movs	r3, #0
 8005790:	e062      	b.n	8005858 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005798:	f107 0310 	add.w	r3, r7, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f001 f813 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a6:	f001 fcff 	bl	80071a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057aa:	f000 fda5 	bl	80062f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ae:	f001 fccd 	bl	800714c <vPortEnterCritical>
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b8:	b25b      	sxtb	r3, r3
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057be:	d103      	bne.n	80057c8 <xQueueReceive+0x11c>
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d4:	d103      	bne.n	80057de <xQueueReceive+0x132>
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057de:	f001 fce3 	bl	80071a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e2:	1d3a      	adds	r2, r7, #4
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 f802 	bl	80067f4 <xTaskCheckForTimeOut>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d123      	bne.n	800583e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f8:	f000 fb0d 	bl	8005e16 <prvIsQueueEmpty>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d017      	beq.n	8005832 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f000 ff56 	bl	80066bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005812:	f000 faae 	bl	8005d72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005816:	f000 fd7d 	bl	8006314 <xTaskResumeAll>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d189      	bne.n	8005734 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <xQueueReceive+0x1b4>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	e780      	b.n	8005734 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005834:	f000 fa9d 	bl	8005d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005838:	f000 fd6c 	bl	8006314 <xTaskResumeAll>
 800583c:	e77a      	b.n	8005734 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800583e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005840:	f000 fa97 	bl	8005d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005844:	f000 fd66 	bl	8006314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584a:	f000 fae4 	bl	8005e16 <prvIsQueueEmpty>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	f43f af6f 	beq.w	8005734 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005858:	4618      	mov	r0, r3
 800585a:	3730      	adds	r7, #48	; 0x30
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	; 0x38
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005876:	2300      	movs	r3, #0
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <xQueueSemaphoreTake+0x30>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e7fe      	b.n	8005892 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <xQueueSemaphoreTake+0x4c>
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e7fe      	b.n	80058ae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058b0:	f001 f8e4 	bl	8006a7c <xTaskGetSchedulerState>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <xQueueSemaphoreTake+0x5c>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <xQueueSemaphoreTake+0x60>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <xQueueSemaphoreTake+0x62>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <xQueueSemaphoreTake+0x7a>
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e7fe      	b.n	80058dc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058de:	f001 fc35 	bl	800714c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d024      	beq.n	8005938 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80058fe:	f001 fa83 	bl	8006e08 <pvTaskIncrementMutexHeldCount>
 8005902:	4602      	mov	r2, r0
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	3310      	adds	r3, #16
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fef5 	bl	8006704 <xTaskRemoveFromEventList>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005920:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <xQueueSemaphoreTake+0x20c>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005930:	f001 fc3a 	bl	80071a8 <vPortExitCritical>
				return pdPASS;
 8005934:	2301      	movs	r3, #1
 8005936:	e096      	b.n	8005a66 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	d009      	beq.n	8005958 <xQueueSemaphoreTake+0xf4>
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e7fe      	b.n	8005956 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005958:	f001 fc26 	bl	80071a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800595c:	2300      	movs	r3, #0
 800595e:	e082      	b.n	8005a66 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005966:	f107 030c 	add.w	r3, r7, #12
 800596a:	4618      	mov	r0, r3
 800596c:	f000 ff2c 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005974:	f001 fc18 	bl	80071a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005978:	f000 fcbe 	bl	80062f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800597c:	f001 fbe6 	bl	800714c <vPortEnterCritical>
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005986:	b25b      	sxtb	r3, r3
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598c:	d103      	bne.n	8005996 <xQueueSemaphoreTake+0x132>
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599c:	b25b      	sxtb	r3, r3
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a2:	d103      	bne.n	80059ac <xQueueSemaphoreTake+0x148>
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ac:	f001 fbfc 	bl	80071a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059b0:	463a      	mov	r2, r7
 80059b2:	f107 030c 	add.w	r3, r7, #12
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 ff1b 	bl	80067f4 <xTaskCheckForTimeOut>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d132      	bne.n	8005a2a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059c6:	f000 fa26 	bl	8005e16 <prvIsQueueEmpty>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d026      	beq.n	8005a1e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80059d8:	f001 fbb8 	bl	800714c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f869 	bl	8006ab8 <xTaskPriorityInherit>
 80059e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80059e8:	f001 fbde 	bl	80071a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	3324      	adds	r3, #36	; 0x24
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fe61 	bl	80066bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059fc:	f000 f9b9 	bl	8005d72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a00:	f000 fc88 	bl	8006314 <xTaskResumeAll>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f af69 	bne.w	80058de <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005a0c:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <xQueueSemaphoreTake+0x20c>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	e75f      	b.n	80058de <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a20:	f000 f9a7 	bl	8005d72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a24:	f000 fc76 	bl	8006314 <xTaskResumeAll>
 8005a28:	e759      	b.n	80058de <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a2c:	f000 f9a1 	bl	8005d72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a30:	f000 fc70 	bl	8006314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a36:	f000 f9ee 	bl	8005e16 <prvIsQueueEmpty>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f43f af4e 	beq.w	80058de <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005a48:	f001 fb80 	bl	800714c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a4e:	f000 f8e8 	bl	8005c22 <prvGetDisinheritPriorityAfterTimeout>
 8005a52:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f936 	bl	8006ccc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a60:	f001 fba2 	bl	80071a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3738      	adds	r7, #56	; 0x38
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	; 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <xQueueReceiveFromISR+0x2a>
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	e7fe      	b.n	8005a9c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <xQueueReceiveFromISR+0x38>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <xQueueReceiveFromISR+0x3c>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <xQueueReceiveFromISR+0x3e>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <xQueueReceiveFromISR+0x56>
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aca:	f001 fc1b 	bl	8007304 <vPortValidateInterruptPriority>
	__asm volatile
 8005ace:	f3ef 8211 	mrs	r2, BASEPRI
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61ba      	str	r2, [r7, #24]
 8005ae4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ae6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d02f      	beq.n	8005b56 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b04:	f000 f90f 	bl	8005d26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0a:	1e5a      	subs	r2, r3, #1
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b18:	d112      	bne.n	8005b40 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	3310      	adds	r3, #16
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fdec 	bl	8006704 <xTaskRemoveFromEventList>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e007      	b.n	8005b50 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b44:	3301      	adds	r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005b50:	2301      	movs	r3, #1
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
 8005b54:	e001      	b.n	8005b5a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3738      	adds	r7, #56	; 0x38
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	e7fe      	b.n	8005b8e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005b90:	f001 fadc 	bl	800714c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fb05 	bl	80071a8 <vPortExitCritical>

	return uxReturn;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d109      	bne.n	8005bca <uxQueueMessagesWaitingFromISR+0x22>
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	e7fe      	b.n	8005bc8 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <vQueueDelete+0x26>
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	e7fe      	b.n	8005c02 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f935 	bl	8005e74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f001 fc75 	bl	8007504 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f1c3 0307 	rsb	r3, r3, #7
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e001      	b.n	8005c44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c44:	68fb      	ldr	r3, [r7, #12]
	}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b086      	sub	sp, #24
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d14d      	bne.n	8005d14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 ffa1 	bl	8006bc4 <xTaskPriorityDisinherit>
 8005c82:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	e043      	b.n	8005d14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d119      	bne.n	8005cc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6898      	ldr	r0, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	f010 fc02 	bl	80164a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	441a      	add	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d32b      	bcc.n	8005d14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	609a      	str	r2, [r3, #8]
 8005cc4:	e026      	b.n	8005d14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68d8      	ldr	r0, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	f010 fbe8 	bl	80164a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	425b      	negs	r3, r3
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d207      	bcs.n	8005d02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d105      	bne.n	8005d14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d1c:	697b      	ldr	r3, [r7, #20]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	441a      	add	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d303      	bcc.n	8005d5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	461a      	mov	r2, r3
 8005d64:	6838      	ldr	r0, [r7, #0]
 8005d66:	f010 fb9e 	bl	80164a6 <memcpy>
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d7a:	f001 f9e7 	bl	800714c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d86:	e011      	b.n	8005dac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d012      	beq.n	8005db6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fcb5 	bl	8006704 <xTaskRemoveFromEventList>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005da0:	f000 fd88 	bl	80068b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	dce9      	bgt.n	8005d88 <prvUnlockQueue+0x16>
 8005db4:	e000      	b.n	8005db8 <prvUnlockQueue+0x46>
					break;
 8005db6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dc0:	f001 f9f2 	bl	80071a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dc4:	f001 f9c2 	bl	800714c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	e011      	b.n	8005df6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d012      	beq.n	8005e00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fc90 	bl	8006704 <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dea:	f000 fd63 	bl	80068b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dce9      	bgt.n	8005dd2 <prvUnlockQueue+0x60>
 8005dfe:	e000      	b.n	8005e02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e0a:	f001 f9cd 	bl	80071a8 <vPortExitCritical>
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e1e:	f001 f995 	bl	800714c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e001      	b.n	8005e34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e34:	f001 f9b8 	bl	80071a8 <vPortExitCritical>

	return xReturn;
 8005e38:	68fb      	ldr	r3, [r7, #12]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e4a:	f001 f97f 	bl	800714c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d102      	bne.n	8005e60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e001      	b.n	8005e64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e64:	f001 f9a0 	bl	80071a8 <vPortExitCritical>

	return xReturn;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e016      	b.n	8005eb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <vQueueUnregisterQueue+0x50>)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d10b      	bne.n	8005eaa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e92:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <vQueueUnregisterQueue+0x50>)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2100      	movs	r1, #0
 8005e98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e9c:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <vQueueUnregisterQueue+0x50>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	605a      	str	r2, [r3, #4]
				break;
 8005ea8:	e005      	b.n	8005eb6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b07      	cmp	r3, #7
 8005eb4:	d9e5      	bls.n	8005e82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	2000bfe4 	.word	0x2000bfe4

08005ec8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08e      	sub	sp, #56	; 0x38
 8005ecc:	af04      	add	r7, sp, #16
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <xTaskCreateStatic+0x28>
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e7fe      	b.n	8005eee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <xTaskCreateStatic+0x42>
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e7fe      	b.n	8005f08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f0a:	2354      	movs	r3, #84	; 0x54
 8005f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b54      	cmp	r3, #84	; 0x54
 8005f12:	d009      	beq.n	8005f28 <xTaskCreateStatic+0x60>
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e7fe      	b.n	8005f26 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01e      	beq.n	8005f6c <xTaskCreateStatic+0xa4>
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f46:	2300      	movs	r3, #0
 8005f48:	9303      	str	r3, [sp, #12]
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	9302      	str	r3, [sp, #8]
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	9301      	str	r3, [sp, #4]
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f850 	bl	8006004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f66:	f000 f8cb 	bl	8006100 <prvAddNewTaskToReadyList>
 8005f6a:	e001      	b.n	8005f70 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f70:	697b      	ldr	r3, [r7, #20]
	}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08c      	sub	sp, #48	; 0x30
 8005f7e:	af04      	add	r7, sp, #16
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	603b      	str	r3, [r7, #0]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 f9f6 	bl	8007380 <pvPortMalloc>
 8005f94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f9c:	2054      	movs	r0, #84	; 0x54
 8005f9e:	f001 f9ef 	bl	8007380 <pvPortMalloc>
 8005fa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb0:	e005      	b.n	8005fbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fb2:	6978      	ldr	r0, [r7, #20]
 8005fb4:	f001 faa6 	bl	8007504 <vPortFree>
 8005fb8:	e001      	b.n	8005fbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9303      	str	r3, [sp, #12]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	9302      	str	r3, [sp, #8]
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f80e 	bl	8006004 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe8:	69f8      	ldr	r0, [r7, #28]
 8005fea:	f000 f889 	bl	8006100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e002      	b.n	8005ffa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800601c:	3b01      	subs	r3, #1
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <prvInitialiseNewTask+0x46>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e7fe      	b.n	8006048 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
 800604e:	e012      	b.n	8006076 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	7819      	ldrb	r1, [r3, #0]
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	3334      	adds	r3, #52	; 0x34
 8006060:	460a      	mov	r2, r1
 8006062:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d006      	beq.n	800607e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b0f      	cmp	r3, #15
 800607a:	d9e9      	bls.n	8006050 <prvInitialiseNewTask+0x4c>
 800607c:	e000      	b.n	8006080 <prvInitialiseNewTask+0x7c>
		{
			break;
 800607e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2b06      	cmp	r3, #6
 800608c:	d901      	bls.n	8006092 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800608e:	2306      	movs	r3, #6
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2200      	movs	r2, #0
 80060a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	3304      	adds	r3, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fece 	bl	8004e4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	3318      	adds	r3, #24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fec9 	bl	8004e4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	f1c3 0207 	rsb	r2, r3, #7
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2200      	movs	r2, #0
 80060d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	69b8      	ldr	r0, [r7, #24]
 80060e2:	f000 ff0b 	bl	8006efc <pxPortInitialiseStack>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f8:	bf00      	nop
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006108:	f001 f820 	bl	800714c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800610c:	4b2a      	ldr	r3, [pc, #168]	; (80061b8 <prvAddNewTaskToReadyList+0xb8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a29      	ldr	r2, [pc, #164]	; (80061b8 <prvAddNewTaskToReadyList+0xb8>)
 8006114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <prvAddNewTaskToReadyList+0xbc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800611e:	4a27      	ldr	r2, [pc, #156]	; (80061bc <prvAddNewTaskToReadyList+0xbc>)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <prvAddNewTaskToReadyList+0xb8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d110      	bne.n	800614e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800612c:	f000 fbe6 	bl	80068fc <prvInitialiseTaskLists>
 8006130:	e00d      	b.n	800614e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <prvAddNewTaskToReadyList+0xc0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <prvAddNewTaskToReadyList+0xbc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	429a      	cmp	r2, r3
 8006146:	d802      	bhi.n	800614e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <prvAddNewTaskToReadyList+0xbc>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800614e:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <prvAddNewTaskToReadyList+0xc4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a1b      	ldr	r2, [pc, #108]	; (80061c4 <prvAddNewTaskToReadyList+0xc4>)
 8006156:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	2201      	movs	r2, #1
 800615e:	409a      	lsls	r2, r3
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <prvAddNewTaskToReadyList+0xc8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <prvAddNewTaskToReadyList+0xc8>)
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <prvAddNewTaskToReadyList+0xcc>)
 8006178:	441a      	add	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7fe fe6f 	bl	8004e64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006186:	f001 f80f 	bl	80071a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800618a:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <prvAddNewTaskToReadyList+0xc0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00e      	beq.n	80061b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvAddNewTaskToReadyList+0xbc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	429a      	cmp	r2, r3
 800619e:	d207      	bcs.n	80061b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <prvAddNewTaskToReadyList+0xd0>)
 80061a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	200003fc 	.word	0x200003fc
 80061bc:	200002fc 	.word	0x200002fc
 80061c0:	20000408 	.word	0x20000408
 80061c4:	20000418 	.word	0x20000418
 80061c8:	20000404 	.word	0x20000404
 80061cc:	20000300 	.word	0x20000300
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <vTaskDelay+0x60>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <vTaskDelay+0x2e>
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60bb      	str	r3, [r7, #8]
 8006200:	e7fe      	b.n	8006200 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006202:	f000 f879 	bl	80062f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006206:	2100      	movs	r1, #0
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fe11 	bl	8006e30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800620e:	f000 f881 	bl	8006314 <xTaskResumeAll>
 8006212:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d107      	bne.n	800622a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <vTaskDelay+0x64>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000424 	.word	0x20000424
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	; 0x28
 8006240:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800624a:	463a      	mov	r2, r7
 800624c:	1d39      	adds	r1, r7, #4
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	4618      	mov	r0, r3
 8006254:	f7fa f9b4 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	9202      	str	r2, [sp, #8]
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	2300      	movs	r3, #0
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	460a      	mov	r2, r1
 800626a:	491d      	ldr	r1, [pc, #116]	; (80062e0 <vTaskStartScheduler+0xa4>)
 800626c:	481d      	ldr	r0, [pc, #116]	; (80062e4 <vTaskStartScheduler+0xa8>)
 800626e:	f7ff fe2b 	bl	8005ec8 <xTaskCreateStatic>
 8006272:	4602      	mov	r2, r0
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <vTaskStartScheduler+0xac>)
 8006276:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <vTaskStartScheduler+0xac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e001      	b.n	800628a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d115      	bne.n	80062bc <vTaskStartScheduler+0x80>
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <vTaskStartScheduler+0xb0>)
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062aa:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <vTaskStartScheduler+0xb4>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <vTaskStartScheduler+0xb8>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062b6:	f000 feab 	bl	8007010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062ba:	e00d      	b.n	80062d8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d109      	bne.n	80062d8 <vTaskStartScheduler+0x9c>
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e7fe      	b.n	80062d6 <vTaskStartScheduler+0x9a>
}
 80062d8:	bf00      	nop
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08017414 	.word	0x08017414
 80062e4:	080068cd 	.word	0x080068cd
 80062e8:	20000420 	.word	0x20000420
 80062ec:	2000041c 	.word	0x2000041c
 80062f0:	20000408 	.word	0x20000408
 80062f4:	20000400 	.word	0x20000400

080062f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <vTaskSuspendAll+0x18>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3301      	adds	r3, #1
 8006302:	4a03      	ldr	r2, [pc, #12]	; (8006310 <vTaskSuspendAll+0x18>)
 8006304:	6013      	str	r3, [r2, #0]
}
 8006306:	bf00      	nop
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	20000424 	.word	0x20000424

08006314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006322:	4b41      	ldr	r3, [pc, #260]	; (8006428 <xTaskResumeAll+0x114>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <xTaskResumeAll+0x2a>
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	e7fe      	b.n	800633c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800633e:	f000 ff05 	bl	800714c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006342:	4b39      	ldr	r3, [pc, #228]	; (8006428 <xTaskResumeAll+0x114>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a37      	ldr	r2, [pc, #220]	; (8006428 <xTaskResumeAll+0x114>)
 800634a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634c:	4b36      	ldr	r3, [pc, #216]	; (8006428 <xTaskResumeAll+0x114>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d161      	bne.n	8006418 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006354:	4b35      	ldr	r3, [pc, #212]	; (800642c <xTaskResumeAll+0x118>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d05d      	beq.n	8006418 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800635c:	e02e      	b.n	80063bc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800635e:	4b34      	ldr	r3, [pc, #208]	; (8006430 <xTaskResumeAll+0x11c>)
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3318      	adds	r3, #24
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fdd7 	bl	8004f1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3304      	adds	r3, #4
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fdd2 	bl	8004f1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	2201      	movs	r2, #1
 8006380:	409a      	lsls	r2, r3
 8006382:	4b2c      	ldr	r3, [pc, #176]	; (8006434 <xTaskResumeAll+0x120>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4313      	orrs	r3, r2
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <xTaskResumeAll+0x120>)
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4a27      	ldr	r2, [pc, #156]	; (8006438 <xTaskResumeAll+0x124>)
 800639a:	441a      	add	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f7fe fd5e 	bl	8004e64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4b23      	ldr	r3, [pc, #140]	; (800643c <xTaskResumeAll+0x128>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <xTaskResumeAll+0x12c>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <xTaskResumeAll+0x11c>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1cc      	bne.n	800635e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063ca:	f000 fb31 	bl	8006a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063ce:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <xTaskResumeAll+0x130>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063da:	f000 f859 	bl	8006490 <xTaskIncrementTick>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <xTaskResumeAll+0x12c>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f1      	bne.n	80063da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <xTaskResumeAll+0x130>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xTaskResumeAll+0x12c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTaskResumeAll+0x134>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f000 fec6 	bl	80071a8 <vPortExitCritical>

	return xAlreadyYielded;
 800641c:	68bb      	ldr	r3, [r7, #8]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000424 	.word	0x20000424
 800642c:	200003fc 	.word	0x200003fc
 8006430:	200003bc 	.word	0x200003bc
 8006434:	20000404 	.word	0x20000404
 8006438:	20000300 	.word	0x20000300
 800643c:	200002fc 	.word	0x200002fc
 8006440:	20000410 	.word	0x20000410
 8006444:	2000040c 	.word	0x2000040c
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <xTaskGetTickCount+0x1c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006458:	687b      	ldr	r3, [r7, #4]
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000400 	.word	0x20000400

0800646c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006472:	f000 ff47 	bl	8007304 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006476:	2300      	movs	r3, #0
 8006478:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <xTaskGetTickCountFromISR+0x20>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006480:	683b      	ldr	r3, [r7, #0]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000400 	.word	0x20000400

08006490 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800649a:	4b50      	ldr	r3, [pc, #320]	; (80065dc <xTaskIncrementTick+0x14c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 808c 	bne.w	80065bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064a4:	4b4e      	ldr	r3, [pc, #312]	; (80065e0 <xTaskIncrementTick+0x150>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3301      	adds	r3, #1
 80064aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064ac:	4a4c      	ldr	r2, [pc, #304]	; (80065e0 <xTaskIncrementTick+0x150>)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11f      	bne.n	80064f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80064b8:	4b4a      	ldr	r3, [pc, #296]	; (80065e4 <xTaskIncrementTick+0x154>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <xTaskIncrementTick+0x46>
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	e7fe      	b.n	80064d4 <xTaskIncrementTick+0x44>
 80064d6:	4b43      	ldr	r3, [pc, #268]	; (80065e4 <xTaskIncrementTick+0x154>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <xTaskIncrementTick+0x158>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a40      	ldr	r2, [pc, #256]	; (80065e4 <xTaskIncrementTick+0x154>)
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	4a40      	ldr	r2, [pc, #256]	; (80065e8 <xTaskIncrementTick+0x158>)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <xTaskIncrementTick+0x15c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3301      	adds	r3, #1
 80064f0:	4a3e      	ldr	r2, [pc, #248]	; (80065ec <xTaskIncrementTick+0x15c>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f000 fa9c 	bl	8006a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064f8:	4b3d      	ldr	r3, [pc, #244]	; (80065f0 <xTaskIncrementTick+0x160>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d34d      	bcc.n	800659e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006502:	4b38      	ldr	r3, [pc, #224]	; (80065e4 <xTaskIncrementTick+0x154>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <xTaskIncrementTick+0x80>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <xTaskIncrementTick+0x82>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006516:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <xTaskIncrementTick+0x160>)
 8006518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800651c:	601a      	str	r2, [r3, #0]
					break;
 800651e:	e03e      	b.n	800659e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006520:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <xTaskIncrementTick+0x154>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d203      	bcs.n	8006540 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006538:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <xTaskIncrementTick+0x160>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6013      	str	r3, [r2, #0]
						break;
 800653e:	e02e      	b.n	800659e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fcea 	bl	8004f1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	3318      	adds	r3, #24
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fce1 	bl	8004f1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	4b23      	ldr	r3, [pc, #140]	; (80065f4 <xTaskIncrementTick+0x164>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <xTaskIncrementTick+0x164>)
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <xTaskIncrementTick+0x168>)
 800657c:	441a      	add	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fe fc6d 	bl	8004e64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658e:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <xTaskIncrementTick+0x16c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	429a      	cmp	r2, r3
 8006596:	d3b4      	bcc.n	8006502 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659c:	e7b1      	b.n	8006502 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800659e:	4b17      	ldr	r3, [pc, #92]	; (80065fc <xTaskIncrementTick+0x16c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	4914      	ldr	r1, [pc, #80]	; (80065f8 <xTaskIncrementTick+0x168>)
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d907      	bls.n	80065c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80065b6:	2301      	movs	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e004      	b.n	80065c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065bc:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xTaskIncrementTick+0x170>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	4a0f      	ldr	r2, [pc, #60]	; (8006600 <xTaskIncrementTick+0x170>)
 80065c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <xTaskIncrementTick+0x174>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065d2:	697b      	ldr	r3, [r7, #20]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000424 	.word	0x20000424
 80065e0:	20000400 	.word	0x20000400
 80065e4:	200003b4 	.word	0x200003b4
 80065e8:	200003b8 	.word	0x200003b8
 80065ec:	20000414 	.word	0x20000414
 80065f0:	2000041c 	.word	0x2000041c
 80065f4:	20000404 	.word	0x20000404
 80065f8:	20000300 	.word	0x20000300
 80065fc:	200002fc 	.word	0x200002fc
 8006600:	2000040c 	.word	0x2000040c
 8006604:	20000410 	.word	0x20000410

08006608 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <vTaskSwitchContext+0xa0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006616:	4b25      	ldr	r3, [pc, #148]	; (80066ac <vTaskSwitchContext+0xa4>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800661c:	e03e      	b.n	800669c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800661e:	4b23      	ldr	r3, [pc, #140]	; (80066ac <vTaskSwitchContext+0xa4>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006624:	4b22      	ldr	r3, [pc, #136]	; (80066b0 <vTaskSwitchContext+0xa8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	fab3 f383 	clz	r3, r3
 8006630:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f1c3 031f 	rsb	r3, r3, #31
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	491e      	ldr	r1, [pc, #120]	; (80066b4 <vTaskSwitchContext+0xac>)
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <vTaskSwitchContext+0x5a>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	e7fe      	b.n	8006660 <vTaskSwitchContext+0x58>
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <vTaskSwitchContext+0xac>)
 800666e:	4413      	add	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3308      	adds	r3, #8
 8006684:	429a      	cmp	r2, r3
 8006686:	d104      	bne.n	8006692 <vTaskSwitchContext+0x8a>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <vTaskSwitchContext+0xb0>)
 800669a:	6013      	str	r3, [r2, #0]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	20000424 	.word	0x20000424
 80066ac:	20000410 	.word	0x20000410
 80066b0:	20000404 	.word	0x20000404
 80066b4:	20000300 	.word	0x20000300
 80066b8:	200002fc 	.word	0x200002fc

080066bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <vTaskPlaceOnEventList+0x24>
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e7fe      	b.n	80066de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <vTaskPlaceOnEventList+0x44>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3318      	adds	r3, #24
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fe fbdf 	bl	8004eac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066ee:	2101      	movs	r1, #1
 80066f0:	6838      	ldr	r0, [r7, #0]
 80066f2:	f000 fb9d 	bl	8006e30 <prvAddCurrentTaskToDelayedList>
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200002fc 	.word	0x200002fc

08006704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <xTaskRemoveFromEventList+0x2a>
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e7fe      	b.n	800672c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3318      	adds	r3, #24
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fbf3 	bl	8004f1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006738:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <xTaskRemoveFromEventList+0xac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d11c      	bne.n	800677a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	3304      	adds	r3, #4
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fbea 	bl	8004f1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	2201      	movs	r2, #1
 8006750:	409a      	lsls	r2, r3
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <xTaskRemoveFromEventList+0xb0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <xTaskRemoveFromEventList+0xb0>)
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <xTaskRemoveFromEventList+0xb4>)
 800676a:	441a      	add	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f7fe fb76 	bl	8004e64 <vListInsertEnd>
 8006778:	e005      	b.n	8006786 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3318      	adds	r3, #24
 800677e:	4619      	mov	r1, r3
 8006780:	480e      	ldr	r0, [pc, #56]	; (80067bc <xTaskRemoveFromEventList+0xb8>)
 8006782:	f7fe fb6f 	bl	8004e64 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <xTaskRemoveFromEventList+0xbc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	429a      	cmp	r2, r3
 8006792:	d905      	bls.n	80067a0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <xTaskRemoveFromEventList+0xc0>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	e001      	b.n	80067a4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80067a4:	697b      	ldr	r3, [r7, #20]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000424 	.word	0x20000424
 80067b4:	20000404 	.word	0x20000404
 80067b8:	20000300 	.word	0x20000300
 80067bc:	200003bc 	.word	0x200003bc
 80067c0:	200002fc 	.word	0x200002fc
 80067c4:	20000410 	.word	0x20000410

080067c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <vTaskInternalSetTimeOutState+0x24>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <vTaskInternalSetTimeOutState+0x28>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000414 	.word	0x20000414
 80067f0:	20000400 	.word	0x20000400

080067f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <xTaskCheckForTimeOut+0x24>
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	e7fe      	b.n	8006816 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <xTaskCheckForTimeOut+0x3e>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e7fe      	b.n	8006830 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006832:	f000 fc8b 	bl	800714c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <xTaskCheckForTimeOut+0xb8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684e:	d102      	bne.n	8006856 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e023      	b.n	800689e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <xTaskCheckForTimeOut+0xbc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d007      	beq.n	8006872 <xTaskCheckForTimeOut+0x7e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e015      	b.n	800689e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	429a      	cmp	r2, r3
 800687a:	d20b      	bcs.n	8006894 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff9d 	bl	80067c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	e004      	b.n	800689e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f000 fc83 	bl	80071a8 <vPortExitCritical>

	return xReturn;
 80068a2:	69fb      	ldr	r3, [r7, #28]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000400 	.word	0x20000400
 80068b0:	20000414 	.word	0x20000414

080068b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <vTaskMissedYield+0x14>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	20000410 	.word	0x20000410

080068cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d4:	f000 f852 	bl	800697c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068d8:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <prvIdleTask+0x28>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d9f9      	bls.n	80068d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <prvIdleTask+0x2c>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f0:	e7f0      	b.n	80068d4 <prvIdleTask+0x8>
 80068f2:	bf00      	nop
 80068f4:	20000300 	.word	0x20000300
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
 8006906:	e00c      	b.n	8006922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4a12      	ldr	r2, [pc, #72]	; (800695c <prvInitialiseTaskLists+0x60>)
 8006914:	4413      	add	r3, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fa77 	bl	8004e0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3301      	adds	r3, #1
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b06      	cmp	r3, #6
 8006926:	d9ef      	bls.n	8006908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006928:	480d      	ldr	r0, [pc, #52]	; (8006960 <prvInitialiseTaskLists+0x64>)
 800692a:	f7fe fa6e 	bl	8004e0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800692e:	480d      	ldr	r0, [pc, #52]	; (8006964 <prvInitialiseTaskLists+0x68>)
 8006930:	f7fe fa6b 	bl	8004e0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006934:	480c      	ldr	r0, [pc, #48]	; (8006968 <prvInitialiseTaskLists+0x6c>)
 8006936:	f7fe fa68 	bl	8004e0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693a:	480c      	ldr	r0, [pc, #48]	; (800696c <prvInitialiseTaskLists+0x70>)
 800693c:	f7fe fa65 	bl	8004e0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006940:	480b      	ldr	r0, [pc, #44]	; (8006970 <prvInitialiseTaskLists+0x74>)
 8006942:	f7fe fa62 	bl	8004e0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <prvInitialiseTaskLists+0x78>)
 8006948:	4a05      	ldr	r2, [pc, #20]	; (8006960 <prvInitialiseTaskLists+0x64>)
 800694a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <prvInitialiseTaskLists+0x7c>)
 800694e:	4a05      	ldr	r2, [pc, #20]	; (8006964 <prvInitialiseTaskLists+0x68>)
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000300 	.word	0x20000300
 8006960:	2000038c 	.word	0x2000038c
 8006964:	200003a0 	.word	0x200003a0
 8006968:	200003bc 	.word	0x200003bc
 800696c:	200003d0 	.word	0x200003d0
 8006970:	200003e8 	.word	0x200003e8
 8006974:	200003b4 	.word	0x200003b4
 8006978:	200003b8 	.word	0x200003b8

0800697c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006982:	e019      	b.n	80069b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006984:	f000 fbe2 	bl	800714c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <prvCheckTasksWaitingTermination+0x4c>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fac2 	bl	8004f1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <prvCheckTasksWaitingTermination+0x50>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <prvCheckTasksWaitingTermination+0x50>)
 80069a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	4a09      	ldr	r2, [pc, #36]	; (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 80069ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ae:	f000 fbfb 	bl	80071a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f80e 	bl	80069d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <prvCheckTasksWaitingTermination+0x54>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e1      	bne.n	8006984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200003d0 	.word	0x200003d0
 80069cc:	200003fc 	.word	0x200003fc
 80069d0:	200003e4 	.word	0x200003e4

080069d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d108      	bne.n	80069f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fd8a 	bl	8007504 <vPortFree>
				vPortFree( pxTCB );
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fd87 	bl	8007504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069f6:	e017      	b.n	8006a28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d103      	bne.n	8006a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fd7e 	bl	8007504 <vPortFree>
	}
 8006a08:	e00e      	b.n	8006a28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d009      	beq.n	8006a28 <prvDeleteTCB+0x54>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e7fe      	b.n	8006a26 <prvDeleteTCB+0x52>
	}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <prvResetNextTaskUnblockTime+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <prvResetNextTaskUnblockTime+0x14>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <prvResetNextTaskUnblockTime+0x16>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d004      	beq.n	8006a54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <prvResetNextTaskUnblockTime+0x48>)
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a52:	e008      	b.n	8006a66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvResetNextTaskUnblockTime+0x44>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <prvResetNextTaskUnblockTime+0x48>)
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	200003b4 	.word	0x200003b4
 8006a78:	2000041c 	.word	0x2000041c

08006a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <xTaskGetSchedulerState+0x34>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e008      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <xTaskGetSchedulerState+0x38>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	e001      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aa2:	687b      	ldr	r3, [r7, #4]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000408 	.word	0x20000408
 8006ab4:	20000424 	.word	0x20000424

08006ab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d06e      	beq.n	8006bac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <xTaskPriorityInherit+0x100>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d25e      	bcs.n	8006b9a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db06      	blt.n	8006af2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae4:	4b34      	ldr	r3, [pc, #208]	; (8006bb8 <xTaskPriorityInherit+0x100>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f1c3 0207 	rsb	r2, r3, #7
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6959      	ldr	r1, [r3, #20]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a2e      	ldr	r2, [pc, #184]	; (8006bbc <xTaskPriorityInherit+0x104>)
 8006b04:	4413      	add	r3, r2
 8006b06:	4299      	cmp	r1, r3
 8006b08:	d101      	bne.n	8006b0e <xTaskPriorityInherit+0x56>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xTaskPriorityInherit+0x58>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d03a      	beq.n	8006b8a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fa00 	bl	8004f1e <uxListRemove>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d115      	bne.n	8006b50 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	4924      	ldr	r1, [pc, #144]	; (8006bbc <xTaskPriorityInherit+0x104>)
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <xTaskPriorityInherit+0x98>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	2201      	movs	r2, #1
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	43da      	mvns	r2, r3
 8006b46:	4b1e      	ldr	r3, [pc, #120]	; (8006bc0 <xTaskPriorityInherit+0x108>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <xTaskPriorityInherit+0x108>)
 8006b4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <xTaskPriorityInherit+0x100>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <xTaskPriorityInherit+0x108>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	4a15      	ldr	r2, [pc, #84]	; (8006bc0 <xTaskPriorityInherit+0x108>)
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <xTaskPriorityInherit+0x104>)
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fe f96e 	bl	8004e64 <vListInsertEnd>
 8006b88:	e004      	b.n	8006b94 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b8a:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <xTaskPriorityInherit+0x100>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b94:	2301      	movs	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e008      	b.n	8006bac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <xTaskPriorityInherit+0x100>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d201      	bcs.n	8006bac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bac:	68fb      	ldr	r3, [r7, #12]
	}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200002fc 	.word	0x200002fc
 8006bbc:	20000300 	.word	0x20000300
 8006bc0:	20000404 	.word	0x20000404

08006bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d06c      	beq.n	8006cb4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bda:	4b39      	ldr	r3, [pc, #228]	; (8006cc0 <xTaskPriorityDisinherit+0xfc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d009      	beq.n	8006bf8 <xTaskPriorityDisinherit+0x34>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	e7fe      	b.n	8006bf6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <xTaskPriorityDisinherit+0x50>
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	e7fe      	b.n	8006c12 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c18:	1e5a      	subs	r2, r3, #1
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d044      	beq.n	8006cb4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d140      	bne.n	8006cb4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f971 	bl	8004f1e <uxListRemove>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d115      	bne.n	8006c6e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	491f      	ldr	r1, [pc, #124]	; (8006cc4 <xTaskPriorityDisinherit+0x100>)
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xTaskPriorityDisinherit+0xaa>
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43da      	mvns	r2, r3
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <xTaskPriorityDisinherit+0x104>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <xTaskPriorityDisinherit+0x104>)
 8006c6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	f1c3 0207 	rsb	r2, r3, #7
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	2201      	movs	r2, #1
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <xTaskPriorityDisinherit+0x104>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	4a0d      	ldr	r2, [pc, #52]	; (8006cc8 <xTaskPriorityDisinherit+0x104>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <xTaskPriorityDisinherit+0x100>)
 8006ca2:	441a      	add	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7fe f8da 	bl	8004e64 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb4:	697b      	ldr	r3, [r7, #20]
	}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200002fc 	.word	0x200002fc
 8006cc4:	20000300 	.word	0x20000300
 8006cc8:	20000404 	.word	0x20000404

08006ccc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8086 	beq.w	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e7fe      	b.n	8006d00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d902      	bls.n	8006d12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	61fb      	str	r3, [r7, #28]
 8006d10:	e002      	b.n	8006d18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d067      	beq.n	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d162      	bne.n	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d2c:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d109      	bne.n	8006d4a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	e7fe      	b.n	8006d48 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	db04      	blt.n	8006d68 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f1c3 0207 	rsb	r2, r3, #7
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	6959      	ldr	r1, [r3, #20]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	d101      	bne.n	8006d82 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d034      	beq.n	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe f8c6 	bl	8004f1e <uxListRemove>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d115      	bne.n	8006dc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9c:	4918      	ldr	r1, [pc, #96]	; (8006e00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	2201      	movs	r2, #1
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	43da      	mvns	r2, r3
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	4a10      	ldr	r2, [pc, #64]	; (8006e04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dc2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006de4:	441a      	add	r2, r3
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fe f839 	bl	8004e64 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006df2:	bf00      	nop
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200002fc 	.word	0x200002fc
 8006e00:	20000300 	.word	0x20000300
 8006e04:	20000404 	.word	0x20000404

08006e08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e20:	681b      	ldr	r3, [r3, #0]
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	200002fc 	.word	0x200002fc

08006e30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e3a:	4b29      	ldr	r3, [pc, #164]	; (8006ee0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe f869 	bl	8004f1e <uxListRemove>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	2201      	movs	r2, #1
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	43da      	mvns	r2, r3
 8006e60:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4013      	ands	r3, r2
 8006e66:	4a20      	ldr	r2, [pc, #128]	; (8006ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e70:	d10a      	bne.n	8006e88 <prvAddCurrentTaskToDelayedList+0x58>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e78:	4b1a      	ldr	r3, [pc, #104]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	481a      	ldr	r0, [pc, #104]	; (8006eec <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e82:	f7fd ffef 	bl	8004e64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e86:	e026      	b.n	8006ed6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e90:	4b14      	ldr	r3, [pc, #80]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d209      	bcs.n	8006eb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea0:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f7fd fffd 	bl	8004eac <vListInsert>
}
 8006eb2:	e010      	b.n	8006ed6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f7fd fff3 	bl	8004eac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d202      	bcs.n	8006ed6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ed0:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6013      	str	r3, [r2, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000400 	.word	0x20000400
 8006ee4:	200002fc 	.word	0x200002fc
 8006ee8:	20000404 	.word	0x20000404
 8006eec:	200003e8 	.word	0x200003e8
 8006ef0:	200003b8 	.word	0x200003b8
 8006ef4:	200003b4 	.word	0x200003b4
 8006ef8:	2000041c 	.word	0x2000041c

08006efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3b04      	subs	r3, #4
 8006f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0201 	bic.w	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f2c:	4a0c      	ldr	r2, [pc, #48]	; (8006f60 <pxPortInitialiseStack+0x64>)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3b14      	subs	r3, #20
 8006f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3b04      	subs	r3, #4
 8006f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f06f 0202 	mvn.w	r2, #2
 8006f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3b20      	subs	r3, #32
 8006f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f52:	68fb      	ldr	r3, [r7, #12]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	08006f65 	.word	0x08006f65

08006f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f6e:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <prvTaskExitError+0x50>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f76:	d009      	beq.n	8006f8c <prvTaskExitError+0x28>
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	e7fe      	b.n	8006f8a <prvTaskExitError+0x26>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f9e:	bf00      	nop
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0fc      	beq.n	8006fa0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c
	...

08006fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pxCurrentTCBConst2>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f380 8809 	msr	PSP, r0
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	4770      	bx	lr
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst2>:
 8006fe0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fe8:	4808      	ldr	r0, [pc, #32]	; (800700c <prvPortStartFirstTask+0x24>)
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f380 8808 	msr	MSP, r0
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8814 	msr	CONTROL, r0
 8006ffa:	b662      	cpsie	i
 8006ffc:	b661      	cpsie	f
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	df00      	svc	0
 8007008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800700a:	bf00      	nop
 800700c:	e000ed08 	.word	0xe000ed08

08007010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007016:	4b44      	ldr	r3, [pc, #272]	; (8007128 <xPortStartScheduler+0x118>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a44      	ldr	r2, [pc, #272]	; (800712c <xPortStartScheduler+0x11c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d109      	bne.n	8007034 <xPortStartScheduler+0x24>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e7fe      	b.n	8007032 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007034:	4b3c      	ldr	r3, [pc, #240]	; (8007128 <xPortStartScheduler+0x118>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a3d      	ldr	r2, [pc, #244]	; (8007130 <xPortStartScheduler+0x120>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d109      	bne.n	8007052 <xPortStartScheduler+0x42>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e7fe      	b.n	8007050 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007052:	4b38      	ldr	r3, [pc, #224]	; (8007134 <xPortStartScheduler+0x124>)
 8007054:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007074:	b2da      	uxtb	r2, r3
 8007076:	4b30      	ldr	r3, [pc, #192]	; (8007138 <xPortStartScheduler+0x128>)
 8007078:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800707a:	4b30      	ldr	r3, [pc, #192]	; (800713c <xPortStartScheduler+0x12c>)
 800707c:	2207      	movs	r2, #7
 800707e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007080:	e009      	b.n	8007096 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007082:	4b2e      	ldr	r3, [pc, #184]	; (800713c <xPortStartScheduler+0x12c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	4a2c      	ldr	r2, [pc, #176]	; (800713c <xPortStartScheduler+0x12c>)
 800708a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	b2db      	uxtb	r3, r3
 8007094:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709e:	2b80      	cmp	r3, #128	; 0x80
 80070a0:	d0ef      	beq.n	8007082 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <xPortStartScheduler+0x12c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f1c3 0307 	rsb	r3, r3, #7
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d009      	beq.n	80070c2 <xPortStartScheduler+0xb2>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	e7fe      	b.n	80070c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <xPortStartScheduler+0x12c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	4a1c      	ldr	r2, [pc, #112]	; (800713c <xPortStartScheduler+0x12c>)
 80070ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070cc:	4b1b      	ldr	r3, [pc, #108]	; (800713c <xPortStartScheduler+0x12c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070d4:	4a19      	ldr	r2, [pc, #100]	; (800713c <xPortStartScheduler+0x12c>)
 80070d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070e0:	4b17      	ldr	r3, [pc, #92]	; (8007140 <xPortStartScheduler+0x130>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <xPortStartScheduler+0x130>)
 80070e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070ec:	4b14      	ldr	r3, [pc, #80]	; (8007140 <xPortStartScheduler+0x130>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <xPortStartScheduler+0x130>)
 80070f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070f8:	f000 f8d6 	bl	80072a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <xPortStartScheduler+0x134>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007102:	f000 f8f5 	bl	80072f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007106:	4b10      	ldr	r3, [pc, #64]	; (8007148 <xPortStartScheduler+0x138>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <xPortStartScheduler+0x138>)
 800710c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007110:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007112:	f7ff ff69 	bl	8006fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007116:	f7ff fa77 	bl	8006608 <vTaskSwitchContext>
	prvTaskExitError();
 800711a:	f7ff ff23 	bl	8006f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	e000ed00 	.word	0xe000ed00
 800712c:	410fc271 	.word	0x410fc271
 8007130:	410fc270 	.word	0x410fc270
 8007134:	e000e400 	.word	0xe000e400
 8007138:	20000428 	.word	0x20000428
 800713c:	2000042c 	.word	0x2000042c
 8007140:	e000ed20 	.word	0xe000ed20
 8007144:	2000000c 	.word	0x2000000c
 8007148:	e000ef34 	.word	0xe000ef34

0800714c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <vPortEnterCritical+0x54>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <vPortEnterCritical+0x54>)
 800716c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800716e:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <vPortEnterCritical+0x54>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10e      	bne.n	8007194 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <vPortEnterCritical+0x58>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <vPortEnterCritical+0x48>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	e7fe      	b.n	8007192 <vPortEnterCritical+0x46>
	}
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000000c 	.word	0x2000000c
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ae:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <vPortExitCritical+0x4c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <vPortExitCritical+0x22>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	e7fe      	b.n	80071c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <vPortExitCritical+0x4c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <vPortExitCritical+0x4c>)
 80071d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071d4:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <vPortExitCritical+0x4c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <vPortExitCritical+0x3e>
 80071dc:	2300      	movs	r3, #0
 80071de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c
	...

08007200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007200:	f3ef 8009 	mrs	r0, PSP
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <pxCurrentTCBConst>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	f01e 0f10 	tst.w	lr, #16
 8007210:	bf08      	it	eq
 8007212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	6010      	str	r0, [r2, #0]
 800721c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007224:	f380 8811 	msr	BASEPRI, r0
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f7ff f9ea 	bl	8006608 <vTaskSwitchContext>
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	f380 8811 	msr	BASEPRI, r0
 800723c:	bc09      	pop	{r0, r3}
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007246:	f01e 0f10 	tst.w	lr, #16
 800724a:	bf08      	it	eq
 800724c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007250:	f380 8809 	msr	PSP, r0
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	f3af 8000 	nop.w

08007260 <pxCurrentTCBConst>:
 8007260:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop

08007268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007280:	f7ff f906 	bl	8006490 <xTaskIncrementTick>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <SysTick_Handler+0x3c>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072ac:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <vPortSetupTimerInterrupt+0x34>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortSetupTimerInterrupt+0x38>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <vPortSetupTimerInterrupt+0x3c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <vPortSetupTimerInterrupt+0x40>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	4a09      	ldr	r2, [pc, #36]	; (80072ec <vPortSetupTimerInterrupt+0x44>)
 80072c6:	3b01      	subs	r3, #1
 80072c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ca:	4b04      	ldr	r3, [pc, #16]	; (80072dc <vPortSetupTimerInterrupt+0x34>)
 80072cc:	2207      	movs	r2, #7
 80072ce:	601a      	str	r2, [r3, #0]
}
 80072d0:	bf00      	nop
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000e010 	.word	0xe000e010
 80072e0:	e000e018 	.word	0xe000e018
 80072e4:	20000000 	.word	0x20000000
 80072e8:	10624dd3 	.word	0x10624dd3
 80072ec:	e000e014 	.word	0xe000e014

080072f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007300 <vPortEnableVFP+0x10>
 80072f4:	6801      	ldr	r1, [r0, #0]
 80072f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072fa:	6001      	str	r1, [r0, #0]
 80072fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072fe:	bf00      	nop
 8007300:	e000ed88 	.word	0xe000ed88

08007304 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800730a:	f3ef 8305 	mrs	r3, IPSR
 800730e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b0f      	cmp	r3, #15
 8007314:	d913      	bls.n	800733e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <vPortValidateInterruptPriority+0x6c>)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <vPortValidateInterruptPriority+0x70>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	7afa      	ldrb	r2, [r7, #11]
 8007326:	429a      	cmp	r2, r3
 8007328:	d209      	bcs.n	800733e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	607b      	str	r3, [r7, #4]
 800733c:	e7fe      	b.n	800733c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800733e:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <vPortValidateInterruptPriority+0x74>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <vPortValidateInterruptPriority+0x78>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d909      	bls.n	8007362 <vPortValidateInterruptPriority+0x5e>
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	e7fe      	b.n	8007360 <vPortValidateInterruptPriority+0x5c>
	}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	e000e3f0 	.word	0xe000e3f0
 8007374:	20000428 	.word	0x20000428
 8007378:	e000ed0c 	.word	0xe000ed0c
 800737c:	2000042c 	.word	0x2000042c

08007380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800738c:	f7fe ffb4 	bl	80062f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007390:	4b57      	ldr	r3, [pc, #348]	; (80074f0 <pvPortMalloc+0x170>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007398:	f000 f90c 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800739c:	4b55      	ldr	r3, [pc, #340]	; (80074f4 <pvPortMalloc+0x174>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 808c 	bne.w	80074c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01c      	beq.n	80073ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80073b0:	2208      	movs	r2, #8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d013      	beq.n	80073ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f023 0307 	bic.w	r3, r3, #7
 80073c8:	3308      	adds	r3, #8
 80073ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <pvPortMalloc+0x6a>
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e7fe      	b.n	80073e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d068      	beq.n	80074c2 <pvPortMalloc+0x142>
 80073f0:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <pvPortMalloc+0x178>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d863      	bhi.n	80074c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073fa:	4b40      	ldr	r3, [pc, #256]	; (80074fc <pvPortMalloc+0x17c>)
 80073fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073fe:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <pvPortMalloc+0x17c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007404:	e004      	b.n	8007410 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	429a      	cmp	r2, r3
 8007418:	d903      	bls.n	8007422 <pvPortMalloc+0xa2>
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f1      	bne.n	8007406 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007422:	4b33      	ldr	r3, [pc, #204]	; (80074f0 <pvPortMalloc+0x170>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007428:	429a      	cmp	r2, r3
 800742a:	d04a      	beq.n	80074c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2208      	movs	r2, #8
 8007432:	4413      	add	r3, r2
 8007434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	1ad2      	subs	r2, r2, r3
 8007446:	2308      	movs	r3, #8
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	429a      	cmp	r2, r3
 800744c:	d91e      	bls.n	800748c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800744e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	2b00      	cmp	r3, #0
 800745e:	d009      	beq.n	8007474 <pvPortMalloc+0xf4>
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	e7fe      	b.n	8007472 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1ad2      	subs	r2, r2, r3
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007486:	69b8      	ldr	r0, [r7, #24]
 8007488:	f000 f8f6 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <pvPortMalloc+0x178>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <pvPortMalloc+0x178>)
 8007498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800749a:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <pvPortMalloc+0x178>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <pvPortMalloc+0x180>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d203      	bcs.n	80074ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <pvPortMalloc+0x178>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a15      	ldr	r2, [pc, #84]	; (8007500 <pvPortMalloc+0x180>)
 80074ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <pvPortMalloc+0x174>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c2:	f7fe ff27 	bl	8006314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <pvPortMalloc+0x164>
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e7fe      	b.n	80074e2 <pvPortMalloc+0x162>
	return pvReturn;
 80074e4:	69fb      	ldr	r3, [r7, #28]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20008438 	.word	0x20008438
 80074f4:	20008444 	.word	0x20008444
 80074f8:	2000843c 	.word	0x2000843c
 80074fc:	20008430 	.word	0x20008430
 8007500:	20008440 	.word	0x20008440

08007504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d046      	beq.n	80075a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007516:	2308      	movs	r3, #8
 8007518:	425b      	negs	r3, r3
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4413      	add	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	4b20      	ldr	r3, [pc, #128]	; (80075ac <vPortFree+0xa8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4013      	ands	r3, r2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <vPortFree+0x42>
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e7fe      	b.n	8007544 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <vPortFree+0x5e>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	e7fe      	b.n	8007560 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <vPortFree+0xa8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d019      	beq.n	80075a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d115      	bne.n	80075a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <vPortFree+0xa8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	43db      	mvns	r3, r3
 8007582:	401a      	ands	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007588:	f7fe feb6 	bl	80062f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xac>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4413      	add	r3, r2
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xac>)
 8007598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800759a:	6938      	ldr	r0, [r7, #16]
 800759c:	f000 f86c 	bl	8007678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075a0:	f7fe feb8 	bl	8006314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075a4:	bf00      	nop
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20008444 	.word	0x20008444
 80075b0:	2000843c 	.word	0x2000843c

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20000430 	.word	0x20000430
 8007664:	20008430 	.word	0x20008430
 8007668:	20008438 	.word	0x20008438
 800766c:	20008440 	.word	0x20008440
 8007670:	2000843c 	.word	0x2000843c
 8007674:	20008444 	.word	0x20008444

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20008430 	.word	0x20008430
 8007728:	20008438 	.word	0x20008438

0800772c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	461a      	mov	r2, r3
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f002 f96f 	bl	8009a24 <tcpip_send_msg_wait_sem>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800774a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007758:	e001      	b.n	800775e <netconn_apimsg+0x32>
  }
  return err;
 800775a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	603a      	str	r2, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
 8007774:	460b      	mov	r3, r1
 8007776:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ff83 	bl	8008688 <netconn_alloc>
 8007782:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d054      	beq.n	8007834 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800778a:	79bb      	ldrb	r3, [r7, #6]
 800778c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007792:	f107 030c 	add.w	r3, r7, #12
 8007796:	4619      	mov	r1, r3
 8007798:	4829      	ldr	r0, [pc, #164]	; (8007840 <netconn_new_with_proto_and_callback+0xd8>)
 800779a:	f7ff ffc7 	bl	800772c <netconn_apimsg>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 80077a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d043      	beq.n	8007834 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <netconn_new_with_proto_and_callback+0x58>
 80077b4:	4b23      	ldr	r3, [pc, #140]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077b6:	2289      	movs	r2, #137	; 0x89
 80077b8:	4923      	ldr	r1, [pc, #140]	; (8007848 <netconn_new_with_proto_and_callback+0xe0>)
 80077ba:	4824      	ldr	r0, [pc, #144]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077bc:	f00e fe86 	bl	80164cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	3310      	adds	r3, #16
 80077c4:	4618      	mov	r0, r3
 80077c6:	f00e fd01 	bl	80161cc <sys_mbox_valid>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <netconn_new_with_proto_and_callback+0x74>
 80077d0:	4b1c      	ldr	r3, [pc, #112]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077d2:	228a      	movs	r2, #138	; 0x8a
 80077d4:	491e      	ldr	r1, [pc, #120]	; (8007850 <netconn_new_with_proto_and_callback+0xe8>)
 80077d6:	481d      	ldr	r0, [pc, #116]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077d8:	f00e fe78 	bl	80164cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	3314      	adds	r3, #20
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00e fcf3 	bl	80161cc <sys_mbox_valid>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <netconn_new_with_proto_and_callback+0x90>
 80077ec:	4b15      	ldr	r3, [pc, #84]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 80077ee:	228c      	movs	r2, #140	; 0x8c
 80077f0:	4918      	ldr	r1, [pc, #96]	; (8007854 <netconn_new_with_proto_and_callback+0xec>)
 80077f2:	4816      	ldr	r0, [pc, #88]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 80077f4:	f00e fe6a 	bl	80164cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	330c      	adds	r3, #12
 80077fc:	4618      	mov	r0, r3
 80077fe:	f00e fd76 	bl	80162ee <sys_sem_valid>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <netconn_new_with_proto_and_callback+0xac>
 8007808:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <netconn_new_with_proto_and_callback+0xdc>)
 800780a:	228f      	movs	r2, #143	; 0x8f
 800780c:	4912      	ldr	r1, [pc, #72]	; (8007858 <netconn_new_with_proto_and_callback+0xf0>)
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <netconn_new_with_proto_and_callback+0xe4>)
 8007810:	f00e fe5c 	bl	80164cc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	330c      	adds	r3, #12
 8007818:	4618      	mov	r0, r3
 800781a:	f00e fd5b 	bl	80162d4 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	3310      	adds	r3, #16
 8007822:	4618      	mov	r0, r3
 8007824:	f00e fc36 	bl	8016094 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800782a:	2007      	movs	r0, #7
 800782c:	f003 fbdc 	bl	800afe8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	e000      	b.n	8007836 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007836:	4618      	mov	r0, r3
 8007838:	3728      	adds	r7, #40	; 0x28
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	08008631 	.word	0x08008631
 8007844:	0801741c 	.word	0x0801741c
 8007848:	08017450 	.word	0x08017450
 800784c:	08017474 	.word	0x08017474
 8007850:	0801749c 	.word	0x0801749c
 8007854:	080174b4 	.word	0x080174b4
 8007858:	080174d8 	.word	0x080174d8

0800785c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <netconn_delete+0x12>
    return ERR_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e016      	b.n	800789c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007872:	2329      	movs	r3, #41	; 0x29
 8007874:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	4619      	mov	r1, r3
 800787c:	4809      	ldr	r0, [pc, #36]	; (80078a4 <netconn_delete+0x48>)
 800787e:	f7ff ff55 	bl	800772c <netconn_apimsg>
 8007882:	4603      	mov	r3, r0
 8007884:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007886:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <netconn_delete+0x38>
    return err;
 800788e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007892:	e003      	b.n	800789c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 ff67 	bl	8008768 <netconn_free>

  return ERR_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	08008bed 	.word	0x08008bed

080078a8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d108      	bne.n	80078ce <netconn_bind+0x26>
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <netconn_bind+0x5c>)
 80078be:	22ff      	movs	r2, #255	; 0xff
 80078c0:	4911      	ldr	r1, [pc, #68]	; (8007908 <netconn_bind+0x60>)
 80078c2:	4812      	ldr	r0, [pc, #72]	; (800790c <netconn_bind+0x64>)
 80078c4:	f00e fe02 	bl	80164cc <iprintf>
 80078c8:	f06f 030f 	mvn.w	r3, #15
 80078cc:	e015      	b.n	80078fa <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <netconn_bind+0x68>)
 80078d6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80078e4:	f107 0310 	add.w	r3, r7, #16
 80078e8:	4619      	mov	r1, r3
 80078ea:	480a      	ldr	r0, [pc, #40]	; (8007914 <netconn_bind+0x6c>)
 80078ec:	f7ff ff1e 	bl	800772c <netconn_apimsg>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 80078f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3728      	adds	r7, #40	; 0x28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	0801741c 	.word	0x0801741c
 8007908:	08017554 	.word	0x08017554
 800790c:	08017474 	.word	0x08017474
 8007910:	080256d8 	.word	0x080256d8
 8007914:	08008df1 	.word	0x08008df1

08007918 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <netconn_listen_with_backlog+0x26>
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <netconn_listen_with_backlog+0x48>)
 800792c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007930:	490c      	ldr	r1, [pc, #48]	; (8007964 <netconn_listen_with_backlog+0x4c>)
 8007932:	480d      	ldr	r0, [pc, #52]	; (8007968 <netconn_listen_with_backlog+0x50>)
 8007934:	f00e fdca 	bl	80164cc <iprintf>
 8007938:	f06f 030f 	mvn.w	r3, #15
 800793c:	e00b      	b.n	8007956 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007942:	f107 0308 	add.w	r3, r7, #8
 8007946:	4619      	mov	r1, r3
 8007948:	4808      	ldr	r0, [pc, #32]	; (800796c <netconn_listen_with_backlog+0x54>)
 800794a:	f7ff feef 	bl	800772c <netconn_apimsg>
 800794e:	4603      	mov	r3, r0
 8007950:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007952:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	0801741c 	.word	0x0801741c
 8007964:	080175b4 	.word	0x080175b4
 8007968:	08017474 	.word	0x08017474
 800796c:	08008eb1 	.word	0x08008eb1

08007970 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d109      	bne.n	8007994 <netconn_accept+0x24>
 8007980:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <netconn_accept+0xe4>)
 8007982:	f240 128d 	movw	r2, #397	; 0x18d
 8007986:	4934      	ldr	r1, [pc, #208]	; (8007a58 <netconn_accept+0xe8>)
 8007988:	4834      	ldr	r0, [pc, #208]	; (8007a5c <netconn_accept+0xec>)
 800798a:	f00e fd9f 	bl	80164cc <iprintf>
 800798e:	f06f 030f 	mvn.w	r3, #15
 8007992:	e05b      	b.n	8007a4c <netconn_accept+0xdc>
  *new_conn = NULL;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <netconn_accept+0x44>
 80079a0:	4b2c      	ldr	r3, [pc, #176]	; (8007a54 <netconn_accept+0xe4>)
 80079a2:	f240 128f 	movw	r2, #399	; 0x18f
 80079a6:	492e      	ldr	r1, [pc, #184]	; (8007a60 <netconn_accept+0xf0>)
 80079a8:	482c      	ldr	r0, [pc, #176]	; (8007a5c <netconn_accept+0xec>)
 80079aa:	f00e fd8f 	bl	80164cc <iprintf>
 80079ae:	f06f 030f 	mvn.w	r3, #15
 80079b2:	e04b      	b.n	8007a4c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80079ba:	f113 0f0c 	cmn.w	r3, #12
 80079be:	da03      	bge.n	80079c8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80079c6:	e041      	b.n	8007a4c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3314      	adds	r3, #20
 80079cc:	4618      	mov	r0, r3
 80079ce:	f00e fbfd 	bl	80161cc <sys_mbox_valid>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <netconn_accept+0x6e>
    return ERR_CLSD;
 80079d8:	f06f 030e 	mvn.w	r3, #14
 80079dc:	e036      	b.n	8007a4c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3314      	adds	r3, #20
 80079e2:	f107 010c 	add.w	r1, r7, #12
 80079e6:	2200      	movs	r2, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f00e fb94 	bl	8016116 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <netconn_accept+0x96>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	2200      	movs	r2, #0
 8007a00:	2101      	movs	r1, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <netconn_accept+0xf4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d102      	bne.n	8007a14 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8007a0e:	f06f 030c 	mvn.w	r3, #12
 8007a12:	e01b      	b.n	8007a4c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d114      	bne.n	8007a44 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <netconn_accept+0xce>
 8007a20:	f00e fcf0 	bl	8016404 <sys_arch_protect>
 8007a24:	6138      	str	r0, [r7, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007a2c:	f113 0f0c 	cmn.w	r3, #12
 8007a30:	db02      	blt.n	8007a38 <netconn_accept+0xc8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	22f1      	movs	r2, #241	; 0xf1
 8007a36:	721a      	strb	r2, [r3, #8]
 8007a38:	6938      	ldr	r0, [r7, #16]
 8007a3a:	f00e fcf1 	bl	8016420 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8007a3e:	f06f 030e 	mvn.w	r3, #14
 8007a42:	e003      	b.n	8007a4c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007a4a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	0801741c 	.word	0x0801741c
 8007a58:	080175d4 	.word	0x080175d4
 8007a5c:	08017474 	.word	0x08017474
 8007a60:	080175f4 	.word	0x080175f4
 8007a64:	2000c024 	.word	0x2000c024

08007a68 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <netconn_recv_data+0x28>
 8007a7c:	4b5c      	ldr	r3, [pc, #368]	; (8007bf0 <netconn_recv_data+0x188>)
 8007a7e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007a82:	495c      	ldr	r1, [pc, #368]	; (8007bf4 <netconn_recv_data+0x18c>)
 8007a84:	485c      	ldr	r0, [pc, #368]	; (8007bf8 <netconn_recv_data+0x190>)
 8007a86:	f00e fd21 	bl	80164cc <iprintf>
 8007a8a:	f06f 030f 	mvn.w	r3, #15
 8007a8e:	e0aa      	b.n	8007be6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d109      	bne.n	8007ab0 <netconn_recv_data+0x48>
 8007a9c:	4b54      	ldr	r3, [pc, #336]	; (8007bf0 <netconn_recv_data+0x188>)
 8007a9e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007aa2:	4956      	ldr	r1, [pc, #344]	; (8007bfc <netconn_recv_data+0x194>)
 8007aa4:	4854      	ldr	r0, [pc, #336]	; (8007bf8 <netconn_recv_data+0x190>)
 8007aa6:	f00e fd11 	bl	80164cc <iprintf>
 8007aaa:	f06f 030f 	mvn.w	r3, #15
 8007aae:	e09a      	b.n	8007be6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d115      	bne.n	8007ae8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3310      	adds	r3, #16
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f00e fb83 	bl	80161cc <sys_mbox_valid>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00e fb7b 	bl	80161cc <sys_mbox_valid>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <netconn_recv_data+0x7a>
 8007adc:	f06f 030a 	mvn.w	r3, #10
 8007ae0:	e081      	b.n	8007be6 <netconn_recv_data+0x17e>
 8007ae2:	f06f 030e 	mvn.w	r3, #14
 8007ae6:	e07e      	b.n	8007be6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3310      	adds	r3, #16
 8007aec:	4618      	mov	r0, r3
 8007aee:	f00e fb6d 	bl	80161cc <sys_mbox_valid>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <netconn_recv_data+0xa4>
 8007af8:	4b3d      	ldr	r3, [pc, #244]	; (8007bf0 <netconn_recv_data+0x188>)
 8007afa:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007afe:	4940      	ldr	r1, [pc, #256]	; (8007c00 <netconn_recv_data+0x198>)
 8007b00:	483d      	ldr	r0, [pc, #244]	; (8007bf8 <netconn_recv_data+0x190>)
 8007b02:	f00e fce3 	bl	80164cc <iprintf>
 8007b06:	f06f 030a 	mvn.w	r3, #10
 8007b0a:	e06c      	b.n	8007be6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b12:	f113 0f0c 	cmn.w	r3, #12
 8007b16:	da03      	bge.n	8007b20 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b1e:	e062      	b.n	8007be6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3310      	adds	r3, #16
 8007b24:	f107 0120 	add.w	r1, r7, #32
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f00e faf3 	bl	8016116 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d138      	bne.n	8007bae <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	891b      	ldrh	r3, [r3, #8]
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e001      	b.n	8007b52 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	4619      	mov	r1, r3
 8007b58:	482a      	ldr	r0, [pc, #168]	; (8007c04 <netconn_recv_data+0x19c>)
 8007b5a:	f7ff fde7 	bl	800772c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d120      	bne.n	8007ba6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <netconn_recv_data+0x110>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	2200      	movs	r2, #0
 8007b72:	2101      	movs	r1, #1
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <netconn_recv_data+0x12a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b90:	e029      	b.n	8007be6 <netconn_recv_data+0x17e>
 8007b92:	f06f 030d 	mvn.w	r3, #13
 8007b96:	e026      	b.n	8007be6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007b98:	2101      	movs	r1, #1
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f926 	bl	8007dec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007ba0:	f06f 030e 	mvn.w	r3, #14
 8007ba4:	e01f      	b.n	8007be6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	891b      	ldrh	r3, [r3, #8]
 8007baa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007bac:	e00d      	b.n	8007bca <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <netconn_recv_data+0x15a>
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <netconn_recv_data+0x188>)
 8007bb6:	f240 223e 	movw	r2, #574	; 0x23e
 8007bba:	4913      	ldr	r1, [pc, #76]	; (8007c08 <netconn_recv_data+0x1a0>)
 8007bbc:	480e      	ldr	r0, [pc, #56]	; (8007bf8 <netconn_recv_data+0x190>)
 8007bbe:	f00e fc85 	bl	80164cc <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	891b      	ldrh	r3, [r3, #8]
 8007bc8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <netconn_recv_data+0x176>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007bd8:	2101      	movs	r1, #1
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007bde:	6a3a      	ldr	r2, [r7, #32]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	0801741c 	.word	0x0801741c
 8007bf4:	08017614 	.word	0x08017614
 8007bf8:	08017474 	.word	0x08017474
 8007bfc:	08017634 	.word	0x08017634
 8007c00:	08017650 	.word	0x08017650
 8007c04:	08009035 	.word	0x08009035
 8007c08:	08017670 	.word	0x08017670

08007c0c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <netconn_recv+0x28>
 8007c20:	4b31      	ldr	r3, [pc, #196]	; (8007ce8 <netconn_recv+0xdc>)
 8007c22:	f44f 721d 	mov.w	r2, #628	; 0x274
 8007c26:	4931      	ldr	r1, [pc, #196]	; (8007cec <netconn_recv+0xe0>)
 8007c28:	4831      	ldr	r0, [pc, #196]	; (8007cf0 <netconn_recv+0xe4>)
 8007c2a:	f00e fc4f 	bl	80164cc <iprintf>
 8007c2e:	f06f 030f 	mvn.w	r3, #15
 8007c32:	e054      	b.n	8007cde <netconn_recv+0xd2>
  *new_buf = NULL;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <netconn_recv+0x48>
 8007c40:	4b29      	ldr	r3, [pc, #164]	; (8007ce8 <netconn_recv+0xdc>)
 8007c42:	f240 2276 	movw	r2, #630	; 0x276
 8007c46:	492b      	ldr	r1, [pc, #172]	; (8007cf4 <netconn_recv+0xe8>)
 8007c48:	4829      	ldr	r0, [pc, #164]	; (8007cf0 <netconn_recv+0xe4>)
 8007c4a:	f00e fc3f 	bl	80164cc <iprintf>
 8007c4e:	f06f 030f 	mvn.w	r3, #15
 8007c52:	e044      	b.n	8007cde <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c5c:	2b10      	cmp	r3, #16
 8007c5e:	d139      	bne.n	8007cd4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007c64:	2006      	movs	r0, #6
 8007c66:	f003 f96d 	bl	800af44 <memp_malloc>
 8007c6a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d102      	bne.n	8007c78 <netconn_recv+0x6c>
      return ERR_MEM;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c76:	e032      	b.n	8007cde <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8007c78:	f107 030c 	add.w	r3, r7, #12
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fef2 	bl	8007a68 <netconn_recv_data>
 8007c84:	4603      	mov	r3, r0
 8007c86:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007c88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d006      	beq.n	8007c9e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8007c90:	6979      	ldr	r1, [r7, #20]
 8007c92:	2006      	movs	r0, #6
 8007c94:	f003 f9a8 	bl	800afe8 <memp_free>
      return err;
 8007c98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c9c:	e01f      	b.n	8007cde <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d106      	bne.n	8007cb2 <netconn_recv+0xa6>
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <netconn_recv+0xdc>)
 8007ca6:	f240 228a 	movw	r2, #650	; 0x28a
 8007caa:	4913      	ldr	r1, [pc, #76]	; (8007cf8 <netconn_recv+0xec>)
 8007cac:	4810      	ldr	r0, [pc, #64]	; (8007cf0 <netconn_recv+0xe4>)
 8007cae:	f00e fc0d 	bl	80164cc <iprintf>

    buf->p = p;
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e004      	b.n	8007cde <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fec6 	bl	8007a68 <netconn_recv_data>
 8007cdc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0801741c 	.word	0x0801741c
 8007cec:	08017614 	.word	0x08017614
 8007cf0:	08017474 	.word	0x08017474
 8007cf4:	08017634 	.word	0x08017634
 8007cf8:	0801767c 	.word	0x0801767c

08007cfc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d109      	bne.n	8007d24 <netconn_write_partly+0x28>
 8007d10:	4b31      	ldr	r3, [pc, #196]	; (8007dd8 <netconn_write_partly+0xdc>)
 8007d12:	f240 22e6 	movw	r2, #742	; 0x2e6
 8007d16:	4931      	ldr	r1, [pc, #196]	; (8007ddc <netconn_write_partly+0xe0>)
 8007d18:	4831      	ldr	r0, [pc, #196]	; (8007de0 <netconn_write_partly+0xe4>)
 8007d1a:	f00e fbd7 	bl	80164cc <iprintf>
 8007d1e:	f06f 030f 	mvn.w	r3, #15
 8007d22:	e054      	b.n	8007dce <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d009      	beq.n	8007d44 <netconn_write_partly+0x48>
 8007d30:	4b29      	ldr	r3, [pc, #164]	; (8007dd8 <netconn_write_partly+0xdc>)
 8007d32:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007d36:	492b      	ldr	r1, [pc, #172]	; (8007de4 <netconn_write_partly+0xe8>)
 8007d38:	4829      	ldr	r0, [pc, #164]	; (8007de0 <netconn_write_partly+0xe4>)
 8007d3a:	f00e fbc7 	bl	80164cc <iprintf>
 8007d3e:	f06f 0305 	mvn.w	r3, #5
 8007d42:	e044      	b.n	8007dce <netconn_write_partly+0xd2>
  if (size == 0) {
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <netconn_write_partly+0x52>
    return ERR_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e03f      	b.n	8007dce <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	7f1b      	ldrb	r3, [r3, #28]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <netconn_write_partly+0x68>
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <netconn_write_partly+0x6c>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <netconn_write_partly+0x6e>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <netconn_write_partly+0x86>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007d7c:	f06f 0305 	mvn.w	r3, #5
 8007d80:	e025      	b.n	8007dce <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4813      	ldr	r0, [pc, #76]	; (8007de8 <netconn_write_partly+0xec>)
 8007d9c:	f7ff fcc6 	bl	800772c <netconn_apimsg>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8007da6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10d      	bne.n	8007dca <netconn_write_partly+0xce>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <netconn_write_partly+0xce>
    if (dontblock) {
 8007db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e002      	b.n	8007dca <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8007dca:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3728      	adds	r7, #40	; 0x28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0801741c 	.word	0x0801741c
 8007ddc:	080176a4 	.word	0x080176a4
 8007de0:	08017474 	.word	0x08017474
 8007de4:	080176c0 	.word	0x080176c0
 8007de8:	08009415 	.word	0x08009415

08007dec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <netconn_close_shutdown+0x26>
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <netconn_close_shutdown+0x50>)
 8007e00:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007e04:	490e      	ldr	r1, [pc, #56]	; (8007e40 <netconn_close_shutdown+0x54>)
 8007e06:	480f      	ldr	r0, [pc, #60]	; (8007e44 <netconn_close_shutdown+0x58>)
 8007e08:	f00e fb60 	bl	80164cc <iprintf>
 8007e0c:	f06f 030f 	mvn.w	r3, #15
 8007e10:	e00f      	b.n	8007e32 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007e1a:	2329      	movs	r3, #41	; 0x29
 8007e1c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007e1e:	f107 0308 	add.w	r3, r7, #8
 8007e22:	4619      	mov	r1, r3
 8007e24:	4808      	ldr	r0, [pc, #32]	; (8007e48 <netconn_close_shutdown+0x5c>)
 8007e26:	f7ff fc81 	bl	800772c <netconn_apimsg>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007e2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	0801741c 	.word	0x0801741c
 8007e40:	080176e4 	.word	0x080176e4
 8007e44:	08017474 	.word	0x08017474
 8007e48:	08009575 	.word	0x08009575

08007e4c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8007e54:	2103      	movs	r1, #3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff ffc8 	bl	8007dec <netconn_close_shutdown>
 8007e5c:	4603      	mov	r3, r0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d105      	bne.n	8007e88 <recv_udp+0x20>
 8007e7c:	4b34      	ldr	r3, [pc, #208]	; (8007f50 <recv_udp+0xe8>)
 8007e7e:	22b1      	movs	r2, #177	; 0xb1
 8007e80:	4934      	ldr	r1, [pc, #208]	; (8007f54 <recv_udp+0xec>)
 8007e82:	4835      	ldr	r0, [pc, #212]	; (8007f58 <recv_udp+0xf0>)
 8007e84:	f00e fb22 	bl	80164cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <recv_udp+0x32>
 8007e8e:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <recv_udp+0xe8>)
 8007e90:	22b2      	movs	r2, #178	; 0xb2
 8007e92:	4932      	ldr	r1, [pc, #200]	; (8007f5c <recv_udp+0xf4>)
 8007e94:	4830      	ldr	r0, [pc, #192]	; (8007f58 <recv_udp+0xf0>)
 8007e96:	f00e fb19 	bl	80164cc <iprintf>
  conn = (struct netconn *)arg;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <recv_udp+0x44>
    pbuf_free(p);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f003 fe01 	bl	800baac <pbuf_free>
    return;
 8007eaa:	e04d      	b.n	8007f48 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d005      	beq.n	8007ec2 <recv_udp+0x5a>
 8007eb6:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <recv_udp+0xe8>)
 8007eb8:	22ba      	movs	r2, #186	; 0xba
 8007eba:	4929      	ldr	r1, [pc, #164]	; (8007f60 <recv_udp+0xf8>)
 8007ebc:	4826      	ldr	r0, [pc, #152]	; (8007f58 <recv_udp+0xf0>)
 8007ebe:	f00e fb05 	bl	80164cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	3310      	adds	r3, #16
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f00e f980 	bl	80161cc <sys_mbox_valid>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f003 fdea 	bl	800baac <pbuf_free>
    return;
 8007ed8:	e036      	b.n	8007f48 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007eda:	2006      	movs	r0, #6
 8007edc:	f003 f832 	bl	800af44 <memp_malloc>
 8007ee0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <recv_udp+0x88>
    pbuf_free(p);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f003 fddf 	bl	800baac <pbuf_free>
    return;
 8007eee:	e02b      	b.n	8007f48 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <recv_udp+0xa0>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	e000      	b.n	8007f0a <recv_udp+0xa2>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	891b      	ldrh	r3, [r3, #8]
 8007f18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	3310      	adds	r3, #16
 8007f1e:	69b9      	ldr	r1, [r7, #24]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f00e f8de 	bl	80160e2 <sys_mbox_trypost>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <recv_udp+0xcc>
    netbuf_delete(buf);
 8007f2c:	69b8      	ldr	r0, [r7, #24]
 8007f2e:	f001 fbc9 	bl	80096c4 <netbuf_delete>
    return;
 8007f32:	e009      	b.n	8007f48 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <recv_udp+0xe0>
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	8afa      	ldrh	r2, [r7, #22]
 8007f42:	2100      	movs	r1, #0
 8007f44:	69f8      	ldr	r0, [r7, #28]
 8007f46:	4798      	blx	r3
  }
}
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	08017700 	.word	0x08017700
 8007f54:	08017734 	.word	0x08017734
 8007f58:	08017758 	.word	0x08017758
 8007f5c:	08017780 	.word	0x08017780
 8007f60:	080177a0 	.word	0x080177a0

08007f64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d105      	bne.n	8007f84 <recv_tcp+0x20>
 8007f78:	4b39      	ldr	r3, [pc, #228]	; (8008060 <recv_tcp+0xfc>)
 8007f7a:	22f9      	movs	r2, #249	; 0xf9
 8007f7c:	4939      	ldr	r1, [pc, #228]	; (8008064 <recv_tcp+0x100>)
 8007f7e:	483a      	ldr	r0, [pc, #232]	; (8008068 <recv_tcp+0x104>)
 8007f80:	f00e faa4 	bl	80164cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d105      	bne.n	8007f96 <recv_tcp+0x32>
 8007f8a:	4b35      	ldr	r3, [pc, #212]	; (8008060 <recv_tcp+0xfc>)
 8007f8c:	22fa      	movs	r2, #250	; 0xfa
 8007f8e:	4937      	ldr	r1, [pc, #220]	; (800806c <recv_tcp+0x108>)
 8007f90:	4835      	ldr	r0, [pc, #212]	; (8008068 <recv_tcp+0x104>)
 8007f92:	f00e fa9b 	bl	80164cc <iprintf>
  conn = (struct netconn *)arg;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d102      	bne.n	8007fa6 <recv_tcp+0x42>
    return ERR_VAL;
 8007fa0:	f06f 0305 	mvn.w	r3, #5
 8007fa4:	e057      	b.n	8008056 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d006      	beq.n	8007fbe <recv_tcp+0x5a>
 8007fb0:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <recv_tcp+0xfc>)
 8007fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fb6:	492e      	ldr	r1, [pc, #184]	; (8008070 <recv_tcp+0x10c>)
 8007fb8:	482b      	ldr	r0, [pc, #172]	; (8008068 <recv_tcp+0x104>)
 8007fba:	f00e fa87 	bl	80164cc <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f00e f902 	bl	80161cc <sys_mbox_valid>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10d      	bne.n	8007fea <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	891b      	ldrh	r3, [r3, #8]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68b8      	ldr	r0, [r7, #8]
 8007fdc:	f004 fc62 	bl	800c8a4 <tcp_recved>
      pbuf_free(p);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f003 fd63 	bl	800baac <pbuf_free>
    }
    return ERR_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e035      	b.n	8008056 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8007fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <recv_tcp+0xb2>
 8007ff8:	f00e fa04 	bl	8016404 <sys_arch_protect>
 8007ffc:	6178      	str	r0, [r7, #20]
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008004:	f113 0f0c 	cmn.w	r3, #12
 8008008:	db02      	blt.n	8008010 <recv_tcp+0xac>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	721a      	strb	r2, [r3, #8]
 8008010:	6978      	ldr	r0, [r7, #20]
 8008012:	f00e fa05 	bl	8016420 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <recv_tcp+0xc0>
    len = p->tot_len;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	891b      	ldrh	r3, [r3, #8]
 8008020:	83fb      	strh	r3, [r7, #30]
 8008022:	e001      	b.n	8008028 <recv_tcp+0xc4>
  } else {
    len = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	3310      	adds	r3, #16
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4618      	mov	r0, r3
 8008030:	f00e f857 	bl	80160e2 <sys_mbox_trypost>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800803a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800803e:	e00a      	b.n	8008056 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <recv_tcp+0xf0>
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	8bfa      	ldrh	r2, [r7, #30]
 800804e:	2100      	movs	r1, #0
 8008050:	69b8      	ldr	r0, [r7, #24]
 8008052:	4798      	blx	r3
  }

  return ERR_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	08017700 	.word	0x08017700
 8008064:	080177c0 	.word	0x080177c0
 8008068:	08017758 	.word	0x08017758
 800806c:	080177e4 	.word	0x080177e4
 8008070:	08017804 	.word	0x08017804

08008074 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d106      	bne.n	8008096 <poll_tcp+0x22>
 8008088:	4b29      	ldr	r3, [pc, #164]	; (8008130 <poll_tcp+0xbc>)
 800808a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800808e:	4929      	ldr	r1, [pc, #164]	; (8008134 <poll_tcp+0xc0>)
 8008090:	4829      	ldr	r0, [pc, #164]	; (8008138 <poll_tcp+0xc4>)
 8008092:	f00e fa1b 	bl	80164cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d104      	bne.n	80080a8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800809e:	2101      	movs	r1, #1
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f001 f813 	bl	80090cc <lwip_netconn_do_writemore>
 80080a6:	e016      	b.n	80080d6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d112      	bne.n	80080d6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <poll_tcp+0x5a>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	7a5b      	ldrb	r3, [r3, #9]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	7a5a      	ldrb	r2, [r3, #9]
 80080c8:	3a01      	subs	r2, #1
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80080ce:	2101      	movs	r1, #1
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fc13 	bl	80088fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7f1b      	ldrb	r3, [r3, #28]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d021      	beq.n	8008126 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01d      	beq.n	8008126 <poll_tcp+0xb2>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080f2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80080f6:	d316      	bcc.n	8008126 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008100:	2b04      	cmp	r3, #4
 8008102:	d810      	bhi.n	8008126 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	7f1b      	ldrb	r3, [r3, #28]
 8008108:	f023 0310 	bic.w	r3, r3, #16
 800810c:	b2da      	uxtb	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <poll_tcp+0xb2>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	2200      	movs	r2, #0
 8008120:	2102      	movs	r1, #2
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	08017700 	.word	0x08017700
 8008134:	08017824 	.word	0x08017824
 8008138:	08017758 	.word	0x08017758

0800813c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <sent_tcp+0x26>
 8008154:	4b20      	ldr	r3, [pc, #128]	; (80081d8 <sent_tcp+0x9c>)
 8008156:	f240 1261 	movw	r2, #353	; 0x161
 800815a:	4920      	ldr	r1, [pc, #128]	; (80081dc <sent_tcp+0xa0>)
 800815c:	4820      	ldr	r0, [pc, #128]	; (80081e0 <sent_tcp+0xa4>)
 800815e:	f00e f9b5 	bl	80164cc <iprintf>

  if (conn) {
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d032      	beq.n	80081ce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d104      	bne.n	800817a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008170:	2101      	movs	r1, #1
 8008172:	6978      	ldr	r0, [r7, #20]
 8008174:	f000 ffaa 	bl	80090cc <lwip_netconn_do_writemore>
 8008178:	e007      	b.n	800818a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d103      	bne.n	800818a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008182:	2101      	movs	r1, #1
 8008184:	6978      	ldr	r0, [r7, #20]
 8008186:	f000 fbb9 	bl	80088fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d01d      	beq.n	80081ce <sent_tcp+0x92>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800819a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800819e:	d316      	bcc.n	80081ce <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d810      	bhi.n	80081ce <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	7f1b      	ldrb	r3, [r3, #28]
 80081b0:	f023 0310 	bic.w	r3, r3, #16
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <sent_tcp+0x92>
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	88fa      	ldrh	r2, [r7, #6]
 80081c8:	2102      	movs	r1, #2
 80081ca:	6978      	ldr	r0, [r7, #20]
 80081cc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	08017700 	.word	0x08017700
 80081dc:	08017824 	.word	0x08017824
 80081e0:	08017758 	.word	0x08017758

080081e4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	; 0x28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d106      	bne.n	8008208 <err_tcp+0x24>
 80081fa:	4b6c      	ldr	r3, [pc, #432]	; (80083ac <err_tcp+0x1c8>)
 80081fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008200:	496b      	ldr	r1, [pc, #428]	; (80083b0 <err_tcp+0x1cc>)
 8008202:	486c      	ldr	r0, [pc, #432]	; (80083b4 <err_tcp+0x1d0>)
 8008204:	f00e f962 	bl	80164cc <iprintf>

  conn->pcb.tcp = NULL;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2200      	movs	r2, #0
 800820c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	785b      	ldrb	r3, [r3, #1]
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800821c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008220:	2b04      	cmp	r3, #4
 8008222:	d114      	bne.n	800824e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d018      	beq.n	8008260 <err_tcp+0x7c>
 800822e:	f00e f8e9 	bl	8016404 <sys_arch_protect>
 8008232:	61b8      	str	r0, [r7, #24]
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800823a:	f113 0f0c 	cmn.w	r3, #12
 800823e:	db02      	blt.n	8008246 <err_tcp+0x62>
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	2200      	movs	r2, #0
 8008244:	721a      	strb	r2, [r3, #8]
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f00e f8ea 	bl	8016420 <sys_arch_unprotect>
 800824c:	e008      	b.n	8008260 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800824e:	f00e f8d9 	bl	8016404 <sys_arch_protect>
 8008252:	61f8      	str	r0, [r7, #28]
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	721a      	strb	r2, [r3, #8]
 800825a:	69f8      	ldr	r0, [r7, #28]
 800825c:	f00e f8e0 	bl	8016420 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <err_tcp+0x90>
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	2200      	movs	r2, #0
 800826e:	2104      	movs	r1, #4
 8008270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008272:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <err_tcp+0xa4>
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	2200      	movs	r2, #0
 8008282:	2100      	movs	r1, #0
 8008284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008286:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <err_tcp+0xb8>
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	2200      	movs	r2, #0
 8008296:	2102      	movs	r1, #2
 8008298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800829a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	3310      	adds	r3, #16
 80082a0:	4618      	mov	r0, r3
 80082a2:	f00d ff93 	bl	80161cc <sys_mbox_valid>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	3310      	adds	r3, #16
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f00d ff15 	bl	80160e2 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	3314      	adds	r3, #20
 80082bc:	4618      	mov	r0, r3
 80082be:	f00d ff85 	bl	80161cc <sys_mbox_valid>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	3314      	adds	r3, #20
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f00d ff07 	bl	80160e2 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80082d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d007      	beq.n	80082ec <err_tcp+0x108>
 80082dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d003      	beq.n	80082ec <err_tcp+0x108>
 80082e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d14d      	bne.n	8008388 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	7f1b      	ldrb	r3, [r3, #28]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	7f1b      	ldrb	r3, [r3, #28]
 8008304:	f023 0304 	bic.w	r3, r3, #4
 8008308:	b2da      	uxtb	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d145      	bne.n	80083a0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <err_tcp+0x146>
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <err_tcp+0x1c8>)
 800831e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008322:	4925      	ldr	r1, [pc, #148]	; (80083b8 <err_tcp+0x1d4>)
 8008324:	4823      	ldr	r0, [pc, #140]	; (80083b4 <err_tcp+0x1d0>)
 8008326:	f00e f8d1 	bl	80164cc <iprintf>
      conn->current_msg->err = err;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	78fa      	ldrb	r2, [r7, #3]
 8008330:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	330c      	adds	r3, #12
 800833a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800833c:	6938      	ldr	r0, [r7, #16]
 800833e:	f00d ffd6 	bl	80162ee <sys_sem_valid>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d106      	bne.n	8008356 <err_tcp+0x172>
 8008348:	4b18      	ldr	r3, [pc, #96]	; (80083ac <err_tcp+0x1c8>)
 800834a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800834e:	491b      	ldr	r1, [pc, #108]	; (80083bc <err_tcp+0x1d8>)
 8008350:	4818      	ldr	r0, [pc, #96]	; (80083b4 <err_tcp+0x1d0>)
 8008352:	f00e f8bb 	bl	80164cc <iprintf>
      conn->current_msg = NULL;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	2200      	movs	r2, #0
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <err_tcp+0x19c>
 8008362:	f00e f84f 	bl	8016404 <sys_arch_protect>
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800836e:	f113 0f0c 	cmn.w	r3, #12
 8008372:	db02      	blt.n	800837a <err_tcp+0x196>
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	721a      	strb	r2, [r3, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f00e f850 	bl	8016420 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008380:	6938      	ldr	r0, [r7, #16]
 8008382:	f00d ff9a 	bl	80162ba <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008386:	e00b      	b.n	80083a0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <err_tcp+0x1be>
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <err_tcp+0x1c8>)
 8008392:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008396:	490a      	ldr	r1, [pc, #40]	; (80083c0 <err_tcp+0x1dc>)
 8008398:	4806      	ldr	r0, [pc, #24]	; (80083b4 <err_tcp+0x1d0>)
 800839a:	f00e f897 	bl	80164cc <iprintf>
  }
}
 800839e:	e000      	b.n	80083a2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 80083a0:	bf00      	nop
}
 80083a2:	bf00      	nop
 80083a4:	3728      	adds	r7, #40	; 0x28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08017700 	.word	0x08017700
 80083b0:	08017824 	.word	0x08017824
 80083b4:	08017758 	.word	0x08017758
 80083b8:	08017834 	.word	0x08017834
 80083bc:	08017850 	.word	0x08017850
 80083c0:	0801786c 	.word	0x0801786c

080083c4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f005 f855 	bl	800d484 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80083da:	490a      	ldr	r1, [pc, #40]	; (8008404 <setup_tcp+0x40>)
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f005 f863 	bl	800d4a8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80083e2:	4909      	ldr	r1, [pc, #36]	; (8008408 <setup_tcp+0x44>)
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f005 f881 	bl	800d4ec <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80083ea:	2202      	movs	r2, #2
 80083ec:	4907      	ldr	r1, [pc, #28]	; (800840c <setup_tcp+0x48>)
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f005 f8d6 	bl	800d5a0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80083f4:	4906      	ldr	r1, [pc, #24]	; (8008410 <setup_tcp+0x4c>)
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f005 f898 	bl	800d52c <tcp_err>
}
 80083fc:	bf00      	nop
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	08007f65 	.word	0x08007f65
 8008408:	0800813d 	.word	0x0800813d
 800840c:	08008075 	.word	0x08008075
 8008410:	080081e5 	.word	0x080081e5

08008414 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	4613      	mov	r3, r2
 8008420:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d102      	bne.n	8008432 <accept_function+0x1e>
    return ERR_VAL;
 800842c:	f06f 0305 	mvn.w	r3, #5
 8008430:	e08d      	b.n	800854e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	3314      	adds	r3, #20
 8008436:	4618      	mov	r0, r3
 8008438:	f00d fec8 	bl	80161cc <sys_mbox_valid>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008442:	f06f 0305 	mvn.w	r3, #5
 8008446:	e082      	b.n	800854e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d115      	bne.n	800847a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	3314      	adds	r3, #20
 8008452:	4941      	ldr	r1, [pc, #260]	; (8008558 <accept_function+0x144>)
 8008454:	4618      	mov	r0, r3
 8008456:	f00d fe44 	bl	80160e2 <sys_mbox_trypost>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <accept_function+0x60>
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846c:	2200      	movs	r2, #0
 800846e:	2100      	movs	r1, #0
 8008470:	69f8      	ldr	r0, [r7, #28]
 8008472:	4798      	blx	r3
    }
    return ERR_VAL;
 8008474:	f06f 0305 	mvn.w	r3, #5
 8008478:	e069      	b.n	800854e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f000 f8ff 	bl	8008688 <netconn_alloc>
 800848a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d115      	bne.n	80084be <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	3314      	adds	r3, #20
 8008496:	4930      	ldr	r1, [pc, #192]	; (8008558 <accept_function+0x144>)
 8008498:	4618      	mov	r0, r3
 800849a:	f00d fe22 	bl	80160e2 <sys_mbox_trypost>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <accept_function+0xa4>
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	69f8      	ldr	r0, [r7, #28]
 80084b6:	4798      	blx	r3
    }
    return ERR_MEM;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084bc:	e047      	b.n	800854e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80084c4:	69b8      	ldr	r0, [r7, #24]
 80084c6:	f7ff ff7d 	bl	80083c4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	3314      	adds	r3, #20
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f00d fe03 	bl	80160e2 <sys_mbox_trypost>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02a      	beq.n	8008538 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80084e8:	2100      	movs	r1, #0
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f004 ffca 	bl	800d484 <tcp_arg>
    tcp_recv(pcb, NULL);
 80084f0:	2100      	movs	r1, #0
 80084f2:	6978      	ldr	r0, [r7, #20]
 80084f4:	f004 ffd8 	bl	800d4a8 <tcp_recv>
    tcp_sent(pcb, NULL);
 80084f8:	2100      	movs	r1, #0
 80084fa:	6978      	ldr	r0, [r7, #20]
 80084fc:	f004 fff6 	bl	800d4ec <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	6978      	ldr	r0, [r7, #20]
 8008506:	f005 f84b 	bl	800d5a0 <tcp_poll>
    tcp_err(pcb, NULL);
 800850a:	2100      	movs	r1, #0
 800850c:	6978      	ldr	r0, [r7, #20]
 800850e:	f005 f80d 	bl	800d52c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3310      	adds	r3, #16
 800851c:	4618      	mov	r0, r3
 800851e:	f00d fdb9 	bl	8016094 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	3310      	adds	r3, #16
 8008526:	4618      	mov	r0, r3
 8008528:	f00d fe61 	bl	80161ee <sys_mbox_set_invalid>
    netconn_free(newconn);
 800852c:	69b8      	ldr	r0, [r7, #24]
 800852e:	f000 f91b 	bl	8008768 <netconn_free>
    return ERR_MEM;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008536:	e00a      	b.n	800854e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <accept_function+0x138>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	2200      	movs	r2, #0
 8008546:	2100      	movs	r1, #0
 8008548:	69f8      	ldr	r0, [r7, #28]
 800854a:	4798      	blx	r3
  }

  return ERR_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000c024 	.word	0x2000c024

0800855c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <pcb_new+0x24>
 8008572:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <pcb_new+0xc4>)
 8008574:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008578:	492a      	ldr	r1, [pc, #168]	; (8008624 <pcb_new+0xc8>)
 800857a:	482b      	ldr	r0, [pc, #172]	; (8008628 <pcb_new+0xcc>)
 800857c:	f00d ffa6 	bl	80164cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800858a:	2b10      	cmp	r3, #16
 800858c:	d022      	beq.n	80085d4 <pcb_new+0x78>
 800858e:	2b20      	cmp	r3, #32
 8008590:	d133      	bne.n	80085fa <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681c      	ldr	r4, [r3, #0]
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	4618      	mov	r0, r3
 800859a:	f009 fc3c 	bl	8011e16 <udp_new_ip_type>
 800859e:	4603      	mov	r3, r0
 80085a0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d02a      	beq.n	8008602 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b22      	cmp	r3, #34	; 0x22
 80085b4:	d104      	bne.n	80085c0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6858      	ldr	r0, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	4917      	ldr	r1, [pc, #92]	; (800862c <pcb_new+0xd0>)
 80085ce:	f009 fbc7 	bl	8011d60 <udp_recv>
    }
    break;
 80085d2:	e016      	b.n	8008602 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681c      	ldr	r4, [r3, #0]
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	4618      	mov	r0, r3
 80085dc:	f004 ff44 	bl	800d468 <tcp_new_ip_type>
 80085e0:	4603      	mov	r3, r0
 80085e2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7ff fee6 	bl	80083c4 <setup_tcp>
    }
    break;
 80085f8:	e005      	b.n	8008606 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	22fa      	movs	r2, #250	; 0xfa
 80085fe:	711a      	strb	r2, [r3, #4]
    return;
 8008600:	e00a      	b.n	8008618 <pcb_new+0xbc>
    break;
 8008602:	bf00      	nop
 8008604:	e000      	b.n	8008608 <pcb_new+0xac>
    break;
 8008606:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	711a      	strb	r2, [r3, #4]
  }
}
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bd90      	pop	{r4, r7, pc}
 800861e:	bf00      	nop
 8008620:	08017700 	.word	0x08017700
 8008624:	08017888 	.word	0x08017888
 8008628:	08017758 	.word	0x08017758
 800862c:	08007e69 	.word	0x08007e69

08008630 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff ff85 	bl	800855c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d012      	beq.n	8008680 <lwip_netconn_do_newconn+0x50>
 800865a:	f00d fed3 	bl	8016404 <sys_arch_protect>
 800865e:	60b8      	str	r0, [r7, #8]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008668:	f113 0f0c 	cmn.w	r3, #12
 800866c:	db05      	blt.n	800867a <lwip_netconn_do_newconn+0x4a>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008678:	721a      	strb	r2, [r3, #8]
 800867a:	68b8      	ldr	r0, [r7, #8]
 800867c:	f00d fed0 	bl	8016420 <sys_arch_unprotect>
}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008694:	2007      	movs	r0, #7
 8008696:	f002 fc55 	bl	800af44 <memp_malloc>
 800869a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <netconn_alloc+0x1e>
    return NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	e055      	b.n	8008752 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	79fa      	ldrb	r2, [r7, #7]
 80086b0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d004      	beq.n	80086cc <netconn_alloc+0x44>
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d105      	bne.n	80086d2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 80086c6:	2306      	movs	r3, #6
 80086c8:	60fb      	str	r3, [r7, #12]
    break;
 80086ca:	e00a      	b.n	80086e2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 80086cc:	2306      	movs	r3, #6
 80086ce:	60fb      	str	r3, [r7, #12]
    break;
 80086d0:	e007      	b.n	80086e2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80086d2:	4b22      	ldr	r3, [pc, #136]	; (800875c <netconn_alloc+0xd4>)
 80086d4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80086d8:	4921      	ldr	r1, [pc, #132]	; (8008760 <netconn_alloc+0xd8>)
 80086da:	4822      	ldr	r0, [pc, #136]	; (8008764 <netconn_alloc+0xdc>)
 80086dc:	f00d fef6 	bl	80164cc <iprintf>
    goto free_and_return;
 80086e0:	e032      	b.n	8008748 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3310      	adds	r3, #16
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f00d fcb1 	bl	8016050 <sys_mbox_new>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d128      	bne.n	8008746 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	330c      	adds	r3, #12
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f00d fd84 	bl	8016208 <sys_sem_new>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3310      	adds	r3, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f00d fcc2 	bl	8016094 <sys_mbox_free>
    goto free_and_return;
 8008710:	e01a      	b.n	8008748 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	3314      	adds	r3, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f00d fd69 	bl	80161ee <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008728:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	771a      	strb	r2, [r3, #28]
  return conn;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	e005      	b.n	8008752 <netconn_alloc+0xca>
    goto free_and_return;
 8008746:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	2007      	movs	r0, #7
 800874c:	f002 fc4c 	bl	800afe8 <memp_free>
  return NULL;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	08017700 	.word	0x08017700
 8008760:	080178a8 	.word	0x080178a8
 8008764:	08017758 	.word	0x08017758

08008768 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d006      	beq.n	8008786 <netconn_free+0x1e>
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <netconn_free+0x80>)
 800877a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800877e:	491b      	ldr	r1, [pc, #108]	; (80087ec <netconn_free+0x84>)
 8008780:	481b      	ldr	r0, [pc, #108]	; (80087f0 <netconn_free+0x88>)
 8008782:	f00d fea3 	bl	80164cc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3310      	adds	r3, #16
 800878a:	4618      	mov	r0, r3
 800878c:	f00d fd1e 	bl	80161cc <sys_mbox_valid>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d006      	beq.n	80087a4 <netconn_free+0x3c>
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <netconn_free+0x80>)
 8008798:	f240 22e2 	movw	r2, #738	; 0x2e2
 800879c:	4915      	ldr	r1, [pc, #84]	; (80087f4 <netconn_free+0x8c>)
 800879e:	4814      	ldr	r0, [pc, #80]	; (80087f0 <netconn_free+0x88>)
 80087a0:	f00d fe94 	bl	80164cc <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3314      	adds	r3, #20
 80087a8:	4618      	mov	r0, r3
 80087aa:	f00d fd0f 	bl	80161cc <sys_mbox_valid>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <netconn_free+0x5a>
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <netconn_free+0x80>)
 80087b6:	f240 22e5 	movw	r2, #741	; 0x2e5
 80087ba:	490f      	ldr	r1, [pc, #60]	; (80087f8 <netconn_free+0x90>)
 80087bc:	480c      	ldr	r0, [pc, #48]	; (80087f0 <netconn_free+0x88>)
 80087be:	f00d fe85 	bl	80164cc <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	330c      	adds	r3, #12
 80087c6:	4618      	mov	r0, r3
 80087c8:	f00d fd84 	bl	80162d4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	330c      	adds	r3, #12
 80087d0:	4618      	mov	r0, r3
 80087d2:	f00d fd9d 	bl	8016310 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	2007      	movs	r0, #7
 80087da:	f002 fc05 	bl	800afe8 <memp_free>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	08017700 	.word	0x08017700
 80087ec:	080178d0 	.word	0x080178d0
 80087f0:	08017758 	.word	0x08017758
 80087f4:	08017900 	.word	0x08017900
 80087f8:	0801793c 	.word	0x0801793c

080087fc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3310      	adds	r3, #16
 8008808:	4618      	mov	r0, r3
 800880a:	f00d fcdf 	bl	80161cc <sys_mbox_valid>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d035      	beq.n	8008880 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008814:	e01e      	b.n	8008854 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800881e:	2b10      	cmp	r3, #16
 8008820:	d114      	bne.n	800884c <netconn_drain+0x50>
        if (mem != NULL) {
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d015      	beq.n	8008854 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d007      	beq.n	8008844 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	891b      	ldrh	r3, [r3, #8]
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f004 f830 	bl	800c8a4 <tcp_recved>
          }
          pbuf_free(p);
 8008844:	6978      	ldr	r0, [r7, #20]
 8008846:	f003 f931 	bl	800baac <pbuf_free>
 800884a:	e003      	b.n	8008854 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4618      	mov	r0, r3
 8008850:	f000 ff38 	bl	80096c4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3310      	adds	r3, #16
 8008858:	f107 020c 	add.w	r2, r7, #12
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f00d fc98 	bl	8016194 <sys_arch_mbox_tryfetch>
 8008864:	4603      	mov	r3, r0
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886a:	d1d4      	bne.n	8008816 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3310      	adds	r3, #16
 8008870:	4618      	mov	r0, r3
 8008872:	f00d fc0f 	bl	8016094 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3310      	adds	r3, #16
 800887a:	4618      	mov	r0, r3
 800887c:	f00d fcb7 	bl	80161ee <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3314      	adds	r3, #20
 8008884:	4618      	mov	r0, r3
 8008886:	f00d fca1 	bl	80161cc <sys_mbox_valid>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d02e      	beq.n	80088ee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008890:	e017      	b.n	80088c2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a18      	ldr	r2, [pc, #96]	; (80088f8 <netconn_drain+0xfc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800889e:	6938      	ldr	r0, [r7, #16]
 80088a0:	f7ff ffac 	bl	80087fc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f003 fe51 	bl	800c558 <tcp_abort>
          newconn->pcb.tcp = NULL;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2200      	movs	r2, #0
 80088ba:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 80088bc:	6938      	ldr	r0, [r7, #16]
 80088be:	f7ff ff53 	bl	8008768 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3314      	adds	r3, #20
 80088c6:	f107 020c 	add.w	r2, r7, #12
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f00d fc61 	bl	8016194 <sys_arch_mbox_tryfetch>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d8:	d1db      	bne.n	8008892 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3314      	adds	r3, #20
 80088de:	4618      	mov	r0, r3
 80088e0:	f00d fbd8 	bl	8016094 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3314      	adds	r3, #20
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00d fc80 	bl	80161ee <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80088ee:	bf00      	nop
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000c024 	.word	0x2000c024

080088fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008908:	2300      	movs	r3, #0
 800890a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <lwip_netconn_do_close_internal+0x24>
 8008912:	4baa      	ldr	r3, [pc, #680]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 8008914:	f240 3243 	movw	r2, #835	; 0x343
 8008918:	49a9      	ldr	r1, [pc, #676]	; (8008bc0 <lwip_netconn_do_close_internal+0x2c4>)
 800891a:	48aa      	ldr	r0, [pc, #680]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 800891c:	f00d fdd6 	bl	80164cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008928:	2b10      	cmp	r3, #16
 800892a:	d006      	beq.n	800893a <lwip_netconn_do_close_internal+0x3e>
 800892c:	4ba3      	ldr	r3, [pc, #652]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 800892e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8008932:	49a5      	ldr	r1, [pc, #660]	; (8008bc8 <lwip_netconn_do_close_internal+0x2cc>)
 8008934:	48a3      	ldr	r0, [pc, #652]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 8008936:	f00d fdc9 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b04      	cmp	r3, #4
 8008940:	d006      	beq.n	8008950 <lwip_netconn_do_close_internal+0x54>
 8008942:	4b9e      	ldr	r3, [pc, #632]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 8008944:	f240 3245 	movw	r2, #837	; 0x345
 8008948:	49a0      	ldr	r1, [pc, #640]	; (8008bcc <lwip_netconn_do_close_internal+0x2d0>)
 800894a:	489e      	ldr	r0, [pc, #632]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 800894c:	f00d fdbe 	bl	80164cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <lwip_netconn_do_close_internal+0x6a>
 8008958:	4b98      	ldr	r3, [pc, #608]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 800895a:	f240 3246 	movw	r2, #838	; 0x346
 800895e:	499c      	ldr	r1, [pc, #624]	; (8008bd0 <lwip_netconn_do_close_internal+0x2d4>)
 8008960:	4898      	ldr	r0, [pc, #608]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 8008962:	f00d fdb3 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <lwip_netconn_do_close_internal+0x80>
 800896e:	4b93      	ldr	r3, [pc, #588]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 8008970:	f240 3247 	movw	r2, #839	; 0x347
 8008974:	4997      	ldr	r1, [pc, #604]	; (8008bd4 <lwip_netconn_do_close_internal+0x2d8>)
 8008976:	4893      	ldr	r0, [pc, #588]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 8008978:	f00d fda8 	bl	80164cc <iprintf>

  tpcb = conn->pcb.tcp;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	7a1b      	ldrb	r3, [r3, #8]
 8008988:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d102      	bne.n	80089a6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 80089a0:	2301      	movs	r3, #1
 80089a2:	77bb      	strb	r3, [r7, #30]
 80089a4:	e01f      	b.n	80089e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80089a6:	7dbb      	ldrb	r3, [r7, #22]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80089b0:	2b05      	cmp	r3, #5
 80089b2:	d007      	beq.n	80089c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80089b8:	2b06      	cmp	r3, #6
 80089ba:	d003      	beq.n	80089c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d102      	bne.n	80089ca <lwip_netconn_do_close_internal+0xce>
    close = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	77bb      	strb	r3, [r7, #30]
 80089c8:	e00d      	b.n	80089e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80089ca:	7d7b      	ldrb	r3, [r7, #21]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <lwip_netconn_do_close_internal+0xe6>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	7e9b      	ldrb	r3, [r3, #26]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 80089dc:	2301      	movs	r3, #1
 80089de:	77bb      	strb	r3, [r7, #30]
 80089e0:	e001      	b.n	80089e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 80089e6:	7fbb      	ldrb	r3, [r7, #30]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80089ec:	2100      	movs	r1, #0
 80089ee:	69b8      	ldr	r0, [r7, #24]
 80089f0:	f004 fd48 	bl	800d484 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	7d1b      	ldrb	r3, [r3, #20]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d104      	bne.n	8008a06 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80089fc:	2100      	movs	r1, #0
 80089fe:	69b8      	ldr	r0, [r7, #24]
 8008a00:	f004 fdb6 	bl	800d570 <tcp_accept>
 8008a04:	e01d      	b.n	8008a42 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008a06:	7dbb      	ldrb	r3, [r7, #22]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	69b8      	ldr	r0, [r7, #24]
 8008a10:	f004 fd4a 	bl	800d4a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008a14:	2100      	movs	r1, #0
 8008a16:	69b8      	ldr	r0, [r7, #24]
 8008a18:	f004 fdaa 	bl	800d570 <tcp_accept>
    }
    if (shut_tx) {
 8008a1c:	7d7b      	ldrb	r3, [r7, #21]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008a22:	2100      	movs	r1, #0
 8008a24:	69b8      	ldr	r0, [r7, #24]
 8008a26:	f004 fd61 	bl	800d4ec <tcp_sent>
    }
    if (close) {
 8008a2a:	7fbb      	ldrb	r3, [r7, #30]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d008      	beq.n	8008a42 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	69b8      	ldr	r0, [r7, #24]
 8008a36:	f004 fdb3 	bl	800d5a0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	69b8      	ldr	r0, [r7, #24]
 8008a3e:	f004 fd75 	bl	800d52c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8008a42:	7fbb      	ldrb	r3, [r7, #30]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008a48:	69b8      	ldr	r0, [r7, #24]
 8008a4a:	f003 fc73 	bl	800c334 <tcp_close>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	77fb      	strb	r3, [r7, #31]
 8008a52:	e007      	b.n	8008a64 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008a54:	7dbb      	ldrb	r3, [r7, #22]
 8008a56:	7d7a      	ldrb	r2, [r7, #21]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	69b8      	ldr	r0, [r7, #24]
 8008a5c:	f003 fc82 	bl	800c364 <tcp_shutdown>
 8008a60:	4603      	mov	r3, r0
 8008a62:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8008a64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	777b      	strb	r3, [r7, #29]
 8008a70:	e016      	b.n	8008aa0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a7a:	d10f      	bne.n	8008a9c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	7a5b      	ldrb	r3, [r3, #9]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10c      	bne.n	8008aa0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008a86:	2301      	movs	r3, #1
 8008a88:	777b      	strb	r3, [r7, #29]
        if (close) {
 8008a8a:	7fbb      	ldrb	r3, [r7, #30]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d007      	beq.n	8008aa0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008a90:	69b8      	ldr	r0, [r7, #24]
 8008a92:	f003 fd61 	bl	800c558 <tcp_abort>
          err = ERR_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	77fb      	strb	r3, [r7, #31]
 8008a9a:	e001      	b.n	8008aa0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8008aa0:	7f7b      	ldrb	r3, [r7, #29]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d056      	beq.n	8008b54 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	7ffa      	ldrb	r2, [r7, #31]
 8008ab6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d129      	bne.n	8008b20 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008acc:	7fbb      	ldrb	r3, [r7, #30]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d005      	beq.n	8008aec <lwip_netconn_do_close_internal+0x1f0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	4798      	blx	r3
      }
      if (shut_rx) {
 8008aec:	7dbb      	ldrb	r3, [r7, #22]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <lwip_netconn_do_close_internal+0x20a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
      }
      if (shut_tx) {
 8008b06:	7d7b      	ldrb	r3, [r7, #21]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <lwip_netconn_do_close_internal+0x224>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2102      	movs	r1, #2
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00e      	beq.n	8008b44 <lwip_netconn_do_close_internal+0x248>
 8008b26:	f00d fc6d 	bl	8016404 <sys_arch_protect>
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b32:	f113 0f0c 	cmn.w	r3, #12
 8008b36:	db02      	blt.n	8008b3e <lwip_netconn_do_close_internal+0x242>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7ffa      	ldrb	r2, [r7, #31]
 8008b3c:	721a      	strb	r2, [r3, #8]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f00d fc6e 	bl	8016420 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008b4a:	6938      	ldr	r0, [r7, #16]
 8008b4c:	f00d fbb5 	bl	80162ba <sys_sem_signal>
    }
    return ERR_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e02e      	b.n	8008bb2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8008b54:	7f7b      	ldrb	r3, [r7, #29]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d11e      	bne.n	8008b98 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	7d1b      	ldrb	r3, [r3, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d106      	bne.n	8008b70 <lwip_netconn_do_close_internal+0x274>
 8008b62:	4b16      	ldr	r3, [pc, #88]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 8008b64:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008b68:	491b      	ldr	r1, [pc, #108]	; (8008bd8 <lwip_netconn_do_close_internal+0x2dc>)
 8008b6a:	4816      	ldr	r0, [pc, #88]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 8008b6c:	f00d fcae 	bl	80164cc <iprintf>
    if (shut_tx) {
 8008b70:	7d7b      	ldrb	r3, [r7, #21]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8008b76:	4919      	ldr	r1, [pc, #100]	; (8008bdc <lwip_netconn_do_close_internal+0x2e0>)
 8008b78:	69b8      	ldr	r0, [r7, #24]
 8008b7a:	f004 fcb7 	bl	800d4ec <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008b7e:	2201      	movs	r2, #1
 8008b80:	4917      	ldr	r1, [pc, #92]	; (8008be0 <lwip_netconn_do_close_internal+0x2e4>)
 8008b82:	69b8      	ldr	r0, [r7, #24]
 8008b84:	f004 fd0c 	bl	800d5a0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008b88:	4916      	ldr	r1, [pc, #88]	; (8008be4 <lwip_netconn_do_close_internal+0x2e8>)
 8008b8a:	69b8      	ldr	r0, [r7, #24]
 8008b8c:	f004 fcce 	bl	800d52c <tcp_err>
    tcp_arg(tpcb, conn);
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	69b8      	ldr	r0, [r7, #24]
 8008b94:	f004 fc76 	bl	800d484 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008b98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <lwip_netconn_do_close_internal+0x2b2>
 8008ba0:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <lwip_netconn_do_close_internal+0x2c0>)
 8008ba2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008ba6:	4910      	ldr	r1, [pc, #64]	; (8008be8 <lwip_netconn_do_close_internal+0x2ec>)
 8008ba8:	4806      	ldr	r0, [pc, #24]	; (8008bc4 <lwip_netconn_do_close_internal+0x2c8>)
 8008baa:	f00d fc8f 	bl	80164cc <iprintf>
  return err;
 8008bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	08017700 	.word	0x08017700
 8008bc0:	08017978 	.word	0x08017978
 8008bc4:	08017758 	.word	0x08017758
 8008bc8:	08017988 	.word	0x08017988
 8008bcc:	080179a8 	.word	0x080179a8
 8008bd0:	080179cc 	.word	0x080179cc
 8008bd4:	08017834 	.word	0x08017834
 8008bd8:	080179e0 	.word	0x080179e0
 8008bdc:	0800813d 	.word	0x0800813d
 8008be0:	08008075 	.word	0x08008075
 8008be4:	080081e5 	.word	0x080081e5
 8008be8:	08017a04 	.word	0x08017a04

08008bec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008c00:	7cfb      	ldrb	r3, [r7, #19]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00d      	beq.n	8008c22 <lwip_netconn_do_delconn+0x36>
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c10:	2b10      	cmp	r3, #16
 8008c12:	d006      	beq.n	8008c22 <lwip_netconn_do_delconn+0x36>
 8008c14:	4b6f      	ldr	r3, [pc, #444]	; (8008dd4 <lwip_netconn_do_delconn+0x1e8>)
 8008c16:	f240 4201 	movw	r2, #1025	; 0x401
 8008c1a:	496f      	ldr	r1, [pc, #444]	; (8008dd8 <lwip_netconn_do_delconn+0x1ec>)
 8008c1c:	486f      	ldr	r0, [pc, #444]	; (8008ddc <lwip_netconn_do_delconn+0x1f0>)
 8008c1e:	f00d fc55 	bl	80164cc <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008c22:	7cfb      	ldrb	r3, [r7, #19]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <lwip_netconn_do_delconn+0x48>
 8008c28:	7cfb      	ldrb	r3, [r7, #19]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d002      	beq.n	8008c34 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008c2e:	7cfb      	ldrb	r3, [r7, #19]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d109      	bne.n	8008c48 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008c34:	7cfb      	ldrb	r3, [r7, #19]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d10a      	bne.n	8008c50 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	7f1b      	ldrb	r3, [r3, #28]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	22fb      	movs	r2, #251	; 0xfb
 8008c4c:	711a      	strb	r2, [r3, #4]
 8008c4e:	e09c      	b.n	8008d8a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d10d      	bne.n	8008c72 <lwip_netconn_do_delconn+0x86>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	7f1b      	ldrb	r3, [r3, #28]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <lwip_netconn_do_delconn+0x86>
 8008c64:	4b5b      	ldr	r3, [pc, #364]	; (8008dd4 <lwip_netconn_do_delconn+0x1e8>)
 8008c66:	f240 421f 	movw	r2, #1055	; 0x41f
 8008c6a:	495d      	ldr	r1, [pc, #372]	; (8008de0 <lwip_netconn_do_delconn+0x1f4>)
 8008c6c:	485b      	ldr	r0, [pc, #364]	; (8008ddc <lwip_netconn_do_delconn+0x1f0>)
 8008c6e:	f00d fc2d 	bl	80164cc <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2200      	movs	r2, #0
 8008c76:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fdbd 	bl	80087fc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d064      	beq.n	8008d56 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c96:	2b10      	cmp	r3, #16
 8008c98:	d00e      	beq.n	8008cb8 <lwip_netconn_do_delconn+0xcc>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d000      	beq.n	8008ca0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8008c9e:	e056      	b.n	8008d4e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f009 f867 	bl	8011d84 <udp_remove>
        break;
 8008cb6:	e04a      	b.n	8008d4e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <lwip_netconn_do_delconn+0xe0>
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <lwip_netconn_do_delconn+0xee>
 8008ccc:	4b41      	ldr	r3, [pc, #260]	; (8008dd4 <lwip_netconn_do_delconn+0x1e8>)
 8008cce:	f240 4235 	movw	r2, #1077	; 0x435
 8008cd2:	4944      	ldr	r1, [pc, #272]	; (8008de4 <lwip_netconn_do_delconn+0x1f8>)
 8008cd4:	4841      	ldr	r0, [pc, #260]	; (8008ddc <lwip_netconn_do_delconn+0x1f0>)
 8008cd6:	f00d fbf9 	bl	80164cc <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff fe00 	bl	80088fc <lwip_netconn_do_close_internal>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d064      	beq.n	8008dcc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	785b      	ldrb	r3, [r3, #1]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d006      	beq.n	8008d1a <lwip_netconn_do_delconn+0x12e>
 8008d0c:	4b31      	ldr	r3, [pc, #196]	; (8008dd4 <lwip_netconn_do_delconn+0x1e8>)
 8008d0e:	f240 423b 	movw	r2, #1083	; 0x43b
 8008d12:	4935      	ldr	r1, [pc, #212]	; (8008de8 <lwip_netconn_do_delconn+0x1fc>)
 8008d14:	4831      	ldr	r0, [pc, #196]	; (8008ddc <lwip_netconn_do_delconn+0x1f0>)
 8008d16:	f00d fbd9 	bl	80164cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8008d1a:	4834      	ldr	r0, [pc, #208]	; (8008dec <lwip_netconn_do_delconn+0x200>)
 8008d1c:	f00d fb3f 	bl	801639e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f00d fa95 	bl	8016258 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008d2e:	482f      	ldr	r0, [pc, #188]	; (8008dec <lwip_netconn_do_delconn+0x200>)
 8008d30:	f00d fb26 	bl	8016380 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d046      	beq.n	8008dcc <lwip_netconn_do_delconn+0x1e0>
 8008d3e:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <lwip_netconn_do_delconn+0x1e8>)
 8008d40:	f240 423f 	movw	r2, #1087	; 0x43f
 8008d44:	4928      	ldr	r1, [pc, #160]	; (8008de8 <lwip_netconn_do_delconn+0x1fc>)
 8008d46:	4825      	ldr	r0, [pc, #148]	; (8008ddc <lwip_netconn_do_delconn+0x1f0>)
 8008d48:	f00d fbc0 	bl	80164cc <iprintf>
        return;
 8008d4c:	e03e      	b.n	8008dcc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2200      	movs	r2, #0
 8008d54:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d007      	beq.n	8008d70 <lwip_netconn_do_delconn+0x184>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	6810      	ldr	r0, [r2, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d007      	beq.n	8008d8a <lwip_netconn_do_delconn+0x19e>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6810      	ldr	r0, [r2, #0]
 8008d84:	2200      	movs	r2, #0
 8008d86:	2102      	movs	r1, #2
 8008d88:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	330c      	adds	r3, #12
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00d faac 	bl	80162ee <sys_sem_valid>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d018      	beq.n	8008dce <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d014      	beq.n	8008dce <lwip_netconn_do_delconn+0x1e2>
 8008da4:	f00d fb2e 	bl	8016404 <sys_arch_protect>
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008db2:	f113 0f0c 	cmn.w	r3, #12
 8008db6:	db05      	blt.n	8008dc4 <lwip_netconn_do_delconn+0x1d8>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008dc2:	721a      	strb	r2, [r3, #8]
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f00d fb2b 	bl	8016420 <sys_arch_unprotect>
 8008dca:	e000      	b.n	8008dce <lwip_netconn_do_delconn+0x1e2>
        return;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	08017700 	.word	0x08017700
 8008dd8:	08017a14 	.word	0x08017a14
 8008ddc:	08017758 	.word	0x08017758
 8008de0:	08017a28 	.word	0x08017a28
 8008de4:	08017a48 	.word	0x08017a48
 8008de8:	08017a64 	.word	0x08017a64
 8008dec:	2000c028 	.word	0x2000c028

08008df0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e04:	f113 0f0c 	cmn.w	r3, #12
 8008e08:	da06      	bge.n	8008e18 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	711a      	strb	r2, [r3, #4]
 8008e16:	e030      	b.n	8008e7a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	22fa      	movs	r2, #250	; 0xfa
 8008e1c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d027      	beq.n	8008e78 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d011      	beq.n	8008e5a <lwip_netconn_do_bind+0x6a>
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d000      	beq.n	8008e3c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 8008e3a:	e01e      	b.n	8008e7a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6858      	ldr	r0, [r3, #4]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6899      	ldr	r1, [r3, #8]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	899b      	ldrh	r3, [r3, #12]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f008 fec2 	bl	8011bd4 <udp_bind>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	711a      	strb	r2, [r3, #4]
        break;
 8008e58:	e00f      	b.n	8008e7a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6858      	ldr	r0, [r3, #4]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6899      	ldr	r1, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	899b      	ldrh	r3, [r3, #12]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f003 fb81 	bl	800c570 <tcp_bind>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	711a      	strb	r2, [r3, #4]
        break;
 8008e76:	e000      	b.n	8008e7a <lwip_netconn_do_bind+0x8a>
      }
    }
 8008e78:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d012      	beq.n	8008ea8 <lwip_netconn_do_bind+0xb8>
 8008e82:	f00d fabf 	bl	8016404 <sys_arch_protect>
 8008e86:	60b8      	str	r0, [r7, #8]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008e90:	f113 0f0c 	cmn.w	r3, #12
 8008e94:	db05      	blt.n	8008ea2 <lwip_netconn_do_bind+0xb2>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008ea0:	721a      	strb	r2, [r3, #8]
 8008ea2:	68b8      	ldr	r0, [r7, #8]
 8008ea4:	f00d fabc 	bl	8016420 <sys_arch_unprotect>
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ec4:	f113 0f0c 	cmn.w	r3, #12
 8008ec8:	da06      	bge.n	8008ed8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	711a      	strb	r2, [r3, #4]
 8008ed6:	e090      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	22f5      	movs	r2, #245	; 0xf5
 8008edc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8088 	beq.w	8008ffa <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d17d      	bne.n	8008ff4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d16f      	bne.n	8008fe2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	7d1b      	ldrb	r3, [r3, #20]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	22fa      	movs	r2, #250	; 0xfa
 8008f12:	711a      	strb	r2, [r3, #4]
 8008f14:	e071      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8008f16:	23ff      	movs	r3, #255	; 0xff
 8008f18:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f107 020f 	add.w	r2, r7, #15
 8008f24:	7ef9      	ldrb	r1, [r7, #27]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f003 fbd6 	bl	800c6d8 <tcp_listen_with_backlog_and_err>
 8008f2c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8008f34:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	711a      	strb	r2, [r3, #4]
 8008f3c:	e05d      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3310      	adds	r3, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	f00d f941 	bl	80161cc <sys_mbox_valid>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3310      	adds	r3, #16
 8008f56:	4618      	mov	r0, r3
 8008f58:	f00d f89c 	bl	8016094 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3310      	adds	r3, #16
 8008f62:	4618      	mov	r0, r3
 8008f64:	f00d f943 	bl	80161ee <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3314      	adds	r3, #20
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00d f929 	bl	80161cc <sys_mbox_valid>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3314      	adds	r3, #20
 8008f86:	2106      	movs	r1, #6
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f00d f861 	bl	8016050 <sys_mbox_new>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	461a      	mov	r2, r3
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d118      	bne.n	8008fd2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f004 fa61 	bl	800d484 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4919      	ldr	r1, [pc, #100]	; (8009030 <lwip_netconn_do_listen+0x180>)
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f004 fad0 	bl	800d570 <tcp_accept>
 8008fd0:	e013      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8008fd2:	6978      	ldr	r0, [r7, #20]
 8008fd4:	f003 f9ae 	bl	800c334 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	e00b      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d106      	bne.n	8008ffa <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	711a      	strb	r2, [r3, #4]
 8008ff2:	e002      	b.n	8008ffa <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	22f0      	movs	r2, #240	; 0xf0
 8008ff8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d012      	beq.n	8009028 <lwip_netconn_do_listen+0x178>
 8009002:	f00d f9ff 	bl	8016404 <sys_arch_protect>
 8009006:	6138      	str	r0, [r7, #16]
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009010:	f113 0f0c 	cmn.w	r3, #12
 8009014:	db05      	blt.n	8009022 <lwip_netconn_do_listen+0x172>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009020:	721a      	strb	r2, [r3, #8]
 8009022:	6938      	ldr	r0, [r7, #16]
 8009024:	f00d f9fc 	bl	8016420 <sys_arch_unprotect>
}
 8009028:	bf00      	nop
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	08008415 	.word	0x08008415

08009034 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2200      	movs	r2, #0
 8009044:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d022      	beq.n	8009096 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800905a:	2b10      	cmp	r3, #16
 800905c:	d11b      	bne.n	8009096 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906a:	d202      	bcs.n	8009072 <lwip_netconn_do_recv+0x3e>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	b29b      	uxth	r3, r3
 8009070:	e001      	b.n	8009076 <lwip_netconn_do_recv+0x42>
 8009072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009076:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	89fa      	ldrh	r2, [r7, #14]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f003 fc0e 	bl	800c8a4 <tcp_recved>
        remaining -= recved;
 8009088:	89fb      	ldrh	r3, [r7, #14]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e6      	bne.n	8009064 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d012      	beq.n	80090c4 <lwip_netconn_do_recv+0x90>
 800909e:	f00d f9b1 	bl	8016404 <sys_arch_protect>
 80090a2:	60b8      	str	r0, [r7, #8]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80090ac:	f113 0f0c 	cmn.w	r3, #12
 80090b0:	db05      	blt.n	80090be <lwip_netconn_do_recv+0x8a>
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80090bc:	721a      	strb	r2, [r3, #8]
 80090be:	68b8      	ldr	r0, [r7, #8]
 80090c0:	f00d f9ae 	bl	8016420 <sys_arch_unprotect>
}
 80090c4:	bf00      	nop
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	; 0x28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d106      	bne.n	80090f2 <lwip_netconn_do_writemore+0x26>
 80090e4:	4ba3      	ldr	r3, [pc, #652]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 80090e6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80090ea:	49a3      	ldr	r1, [pc, #652]	; (8009378 <lwip_netconn_do_writemore+0x2ac>)
 80090ec:	48a3      	ldr	r0, [pc, #652]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 80090ee:	f00d f9ed 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d006      	beq.n	8009108 <lwip_netconn_do_writemore+0x3c>
 80090fa:	4b9e      	ldr	r3, [pc, #632]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 80090fc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8009100:	499f      	ldr	r1, [pc, #636]	; (8009380 <lwip_netconn_do_writemore+0x2b4>)
 8009102:	489e      	ldr	r0, [pc, #632]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 8009104:	f00d f9e2 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <lwip_netconn_do_writemore+0x52>
 8009110:	4b98      	ldr	r3, [pc, #608]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 8009112:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8009116:	499b      	ldr	r1, [pc, #620]	; (8009384 <lwip_netconn_do_writemore+0x2b8>)
 8009118:	4898      	ldr	r0, [pc, #608]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 800911a:	f00d f9d7 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <lwip_netconn_do_writemore+0x68>
 8009126:	4b93      	ldr	r3, [pc, #588]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 8009128:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800912c:	4996      	ldr	r1, [pc, #600]	; (8009388 <lwip_netconn_do_writemore+0x2bc>)
 800912e:	4893      	ldr	r0, [pc, #588]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 8009130:	f00d f9cc 	bl	80164cc <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1a      	ldr	r2, [r3, #32]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	429a      	cmp	r2, r3
 8009140:	d306      	bcc.n	8009150 <lwip_netconn_do_writemore+0x84>
 8009142:	4b8c      	ldr	r3, [pc, #560]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 8009144:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8009148:	4990      	ldr	r1, [pc, #576]	; (800938c <lwip_netconn_do_writemore+0x2c0>)
 800914a:	488c      	ldr	r0, [pc, #560]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 800914c:	f00d f9be 	bl	80164cc <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	7c1b      	ldrb	r3, [r3, #16]
 8009156:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	7f1b      	ldrb	r3, [r3, #28]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <lwip_netconn_do_writemore+0xa6>
 8009166:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <lwip_netconn_do_writemore+0xaa>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <lwip_netconn_do_writemore+0xac>
 8009176:	2300      	movs	r3, #0
 8009178:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	4413      	add	r3, r2
 8009188:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919e:	d309      	bcc.n	80091b4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80091a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091a4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80091a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091b2:	e001      	b.n	80091b8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091c0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80091c2:	8afa      	ldrh	r2, [r7, #22]
 80091c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d212      	bcs.n	80091f0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80091ca:	8afb      	ldrh	r3, [r7, #22]
 80091cc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80091ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d006      	beq.n	80091e4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 80091d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 80091dc:	23f9      	movs	r3, #249	; 0xf9
 80091de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 80091e2:	e02a      	b.n	800923a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80091e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091e8:	f043 0302 	orr.w	r3, r3, #2
 80091ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091f6:	441a      	add	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d906      	bls.n	8009210 <lwip_netconn_do_writemore+0x144>
 8009202:	4b5c      	ldr	r3, [pc, #368]	; (8009374 <lwip_netconn_do_writemore+0x2a8>)
 8009204:	f240 6213 	movw	r2, #1555	; 0x613
 8009208:	4961      	ldr	r1, [pc, #388]	; (8009390 <lwip_netconn_do_writemore+0x2c4>)
 800920a:	485c      	ldr	r0, [pc, #368]	; (800937c <lwip_netconn_do_writemore+0x2b0>)
 800920c:	f00d f95e 	bl	80164cc <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6858      	ldr	r0, [r3, #4]
 8009214:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800921a:	69f9      	ldr	r1, [r7, #28]
 800921c:	f006 ff74 	bl	8010108 <tcp_write>
 8009220:	4603      	mov	r3, r0
 8009222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009226:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <lwip_netconn_do_writemore+0x16c>
 800922e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009236:	d133      	bne.n	80092a0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8009238:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800923a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800923e:	2b00      	cmp	r3, #0
 8009240:	d017      	beq.n	8009272 <lwip_netconn_do_writemore+0x1a6>
 8009242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d211      	bcs.n	8009272 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <lwip_netconn_do_writemore+0x196>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800925c:	2103      	movs	r1, #3
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7f1b      	ldrb	r3, [r3, #28]
 8009266:	f043 0310 	orr.w	r3, r3, #16
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	771a      	strb	r2, [r3, #28]
 8009270:	e016      	b.n	80092a0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800927a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800927e:	d305      	bcc.n	800928c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009288:	2b04      	cmp	r3, #4
 800928a:	d909      	bls.n	80092a0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <lwip_netconn_do_writemore+0x1d4>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800929a:	2103      	movs	r1, #3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80092a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d134      	bne.n	8009312 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1a      	ldr	r2, [r3, #32]
 80092ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ae:	441a      	add	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1a      	ldr	r2, [r3, #32]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d003      	beq.n	80092ca <lwip_netconn_do_writemore+0x1fe>
 80092c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d007      	beq.n	80092da <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6a12      	ldr	r2, [r2, #32]
 80092d2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	4618      	mov	r0, r3
 80092e0:	f007 fbc4 	bl	8010a6c <tcp_output>
 80092e4:	4603      	mov	r3, r0
 80092e6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80092e8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80092ec:	f113 0f0c 	cmn.w	r3, #12
 80092f0:	db04      	blt.n	80092fc <lwip_netconn_do_writemore+0x230>
 80092f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80092f6:	f113 0f04 	cmn.w	r3, #4
 80092fa:	d152      	bne.n	80093a2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80092fc:	7d3b      	ldrb	r3, [r7, #20]
 80092fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2200      	movs	r2, #0
 800930e:	60da      	str	r2, [r3, #12]
 8009310:	e047      	b.n	80093a2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8009312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800931a:	d13b      	bne.n	8009394 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	4618      	mov	r0, r3
 8009322:	f007 fba3 	bl	8010a6c <tcp_output>
 8009326:	4603      	mov	r3, r0
 8009328:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800932a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800932e:	f113 0f0c 	cmn.w	r3, #12
 8009332:	db04      	blt.n	800933e <lwip_netconn_do_writemore+0x272>
 8009334:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009338:	f113 0f04 	cmn.w	r3, #4
 800933c:	d10a      	bne.n	8009354 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800933e:	7d7b      	ldrb	r3, [r7, #21]
 8009340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	2200      	movs	r2, #0
 8009350:	60da      	str	r2, [r3, #12]
 8009352:	e026      	b.n	80093a2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8009354:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009358:	2b00      	cmp	r3, #0
 800935a:	d022      	beq.n	80093a2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800935c:	23f9      	movs	r3, #249	; 0xf9
 800935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	2200      	movs	r2, #0
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	e017      	b.n	80093a2 <lwip_netconn_do_writemore+0x2d6>
 8009372:	bf00      	nop
 8009374:	08017700 	.word	0x08017700
 8009378:	08017824 	.word	0x08017824
 800937c:	08017758 	.word	0x08017758
 8009380:	08017b04 	.word	0x08017b04
 8009384:	08017834 	.word	0x08017834
 8009388:	08017b24 	.word	0x08017b24
 800938c:	08017b3c 	.word	0x08017b3c
 8009390:	08017b70 	.word	0x08017b70
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939e:	2200      	movs	r2, #0
 80093a0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80093a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d02c      	beq.n	8009404 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093bc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <lwip_netconn_do_writemore+0x32a>
 80093d6:	f00d f815 	bl	8016404 <sys_arch_protect>
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80093e2:	f113 0f0c 	cmn.w	r3, #12
 80093e6:	db03      	blt.n	80093f0 <lwip_netconn_do_writemore+0x324>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80093ee:	721a      	strb	r2, [r3, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f00d f815 	bl	8016420 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d006      	beq.n	800940a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80093fc:	6938      	ldr	r0, [r7, #16]
 80093fe:	f00c ff5c 	bl	80162ba <sys_sem_signal>
 8009402:	e002      	b.n	800940a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009408:	e000      	b.n	800940c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3728      	adds	r7, #40	; 0x28
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009428:	f113 0f0c 	cmn.w	r3, #12
 800942c:	da06      	bge.n	800943c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	711a      	strb	r2, [r3, #4]
 800943a:	e072      	b.n	8009522 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009446:	2b10      	cmp	r3, #16
 8009448:	d168      	bne.n	800951c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	22fb      	movs	r2, #251	; 0xfb
 8009458:	711a      	strb	r2, [r3, #4]
 800945a:	e062      	b.n	8009522 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d056      	beq.n	8009514 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2201      	movs	r2, #1
 800946c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <lwip_netconn_do_write+0x6e>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d006      	beq.n	8009490 <lwip_netconn_do_write+0x7c>
 8009482:	4b36      	ldr	r3, [pc, #216]	; (800955c <lwip_netconn_do_write+0x148>)
 8009484:	f240 6283 	movw	r2, #1667	; 0x683
 8009488:	4935      	ldr	r1, [pc, #212]	; (8009560 <lwip_netconn_do_write+0x14c>)
 800948a:	4836      	ldr	r0, [pc, #216]	; (8009564 <lwip_netconn_do_write+0x150>)
 800948c:	f00d f81e 	bl	80164cc <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <lwip_netconn_do_write+0x92>
 8009498:	4b30      	ldr	r3, [pc, #192]	; (800955c <lwip_netconn_do_write+0x148>)
 800949a:	f240 6284 	movw	r2, #1668	; 0x684
 800949e:	4932      	ldr	r1, [pc, #200]	; (8009568 <lwip_netconn_do_write+0x154>)
 80094a0:	4830      	ldr	r0, [pc, #192]	; (8009564 <lwip_netconn_do_write+0x150>)
 80094a2:	f00d f813 	bl	80164cc <iprintf>
        msg->conn->current_msg = msg;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2100      	movs	r1, #0
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff fe05 	bl	80090cc <lwip_netconn_do_writemore>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d044      	beq.n	8009552 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d006      	beq.n	80094e0 <lwip_netconn_do_write+0xcc>
 80094d2:	4b22      	ldr	r3, [pc, #136]	; (800955c <lwip_netconn_do_write+0x148>)
 80094d4:	f240 6289 	movw	r2, #1673	; 0x689
 80094d8:	4924      	ldr	r1, [pc, #144]	; (800956c <lwip_netconn_do_write+0x158>)
 80094da:	4822      	ldr	r0, [pc, #136]	; (8009564 <lwip_netconn_do_write+0x150>)
 80094dc:	f00c fff6 	bl	80164cc <iprintf>
          UNLOCK_TCPIP_CORE();
 80094e0:	4823      	ldr	r0, [pc, #140]	; (8009570 <lwip_netconn_do_write+0x15c>)
 80094e2:	f00c ff5c 	bl	801639e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	330c      	adds	r3, #12
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f00c feb2 	bl	8016258 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80094f4:	481e      	ldr	r0, [pc, #120]	; (8009570 <lwip_netconn_do_write+0x15c>)
 80094f6:	f00c ff43 	bl	8016380 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	785b      	ldrb	r3, [r3, #1]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d126      	bne.n	8009552 <lwip_netconn_do_write+0x13e>
 8009504:	4b15      	ldr	r3, [pc, #84]	; (800955c <lwip_netconn_do_write+0x148>)
 8009506:	f240 628d 	movw	r2, #1677	; 0x68d
 800950a:	4918      	ldr	r1, [pc, #96]	; (800956c <lwip_netconn_do_write+0x158>)
 800950c:	4815      	ldr	r0, [pc, #84]	; (8009564 <lwip_netconn_do_write+0x150>)
 800950e:	f00c ffdd 	bl	80164cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009512:	e01e      	b.n	8009552 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	22f5      	movs	r2, #245	; 0xf5
 8009518:	711a      	strb	r2, [r3, #4]
 800951a:	e002      	b.n	8009522 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	22fa      	movs	r2, #250	; 0xfa
 8009520:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d014      	beq.n	8009554 <lwip_netconn_do_write+0x140>
 800952a:	f00c ff6b 	bl	8016404 <sys_arch_protect>
 800952e:	60b8      	str	r0, [r7, #8]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009538:	f113 0f0c 	cmn.w	r3, #12
 800953c:	db05      	blt.n	800954a <lwip_netconn_do_write+0x136>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009548:	721a      	strb	r2, [r3, #8]
 800954a:	68b8      	ldr	r0, [r7, #8]
 800954c:	f00c ff68 	bl	8016420 <sys_arch_unprotect>
 8009550:	e000      	b.n	8009554 <lwip_netconn_do_write+0x140>
        return;
 8009552:	bf00      	nop
}
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	08017700 	.word	0x08017700
 8009560:	08017a48 	.word	0x08017a48
 8009564:	08017758 	.word	0x08017758
 8009568:	08017b9c 	.word	0x08017b9c
 800956c:	08017a64 	.word	0x08017a64
 8009570:	2000c028 	.word	0x2000c028

08009574 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d06e      	beq.n	8009670 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800959c:	2b10      	cmp	r3, #16
 800959e:	d167      	bne.n	8009670 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d002      	beq.n	80095ae <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80095a8:	7cfb      	ldrb	r3, [r7, #19]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d060      	beq.n	8009670 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80095ae:	7cfb      	ldrb	r3, [r7, #19]
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d103      	bne.n	80095bc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	22f5      	movs	r2, #245	; 0xf5
 80095b8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80095ba:	e05c      	b.n	8009676 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 80095bc:	7cfb      	ldrb	r3, [r7, #19]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d103      	bne.n	80095ca <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	22fb      	movs	r2, #251	; 0xfb
 80095c6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80095c8:	e055      	b.n	8009676 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	7a1b      	ldrb	r3, [r3, #8]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f90e 	bl	80087fc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <lwip_netconn_do_close+0x80>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d006      	beq.n	8009602 <lwip_netconn_do_close+0x8e>
 80095f4:	4b2e      	ldr	r3, [pc, #184]	; (80096b0 <lwip_netconn_do_close+0x13c>)
 80095f6:	f240 721c 	movw	r2, #1820	; 0x71c
 80095fa:	492e      	ldr	r1, [pc, #184]	; (80096b4 <lwip_netconn_do_close+0x140>)
 80095fc:	482e      	ldr	r0, [pc, #184]	; (80096b8 <lwip_netconn_do_close+0x144>)
 80095fe:	f00c ff65 	bl	80164cc <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2204      	movs	r2, #4
 8009608:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff f96f 	bl	80088fc <lwip_netconn_do_close_internal>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d040      	beq.n	80096a6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	2b04      	cmp	r3, #4
 800962c:	d006      	beq.n	800963c <lwip_netconn_do_close+0xc8>
 800962e:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <lwip_netconn_do_close+0x13c>)
 8009630:	f240 7221 	movw	r2, #1825	; 0x721
 8009634:	4921      	ldr	r1, [pc, #132]	; (80096bc <lwip_netconn_do_close+0x148>)
 8009636:	4820      	ldr	r0, [pc, #128]	; (80096b8 <lwip_netconn_do_close+0x144>)
 8009638:	f00c ff48 	bl	80164cc <iprintf>
        UNLOCK_TCPIP_CORE();
 800963c:	4820      	ldr	r0, [pc, #128]	; (80096c0 <lwip_netconn_do_close+0x14c>)
 800963e:	f00c feae 	bl	801639e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	330c      	adds	r3, #12
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f00c fe04 	bl	8016258 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009650:	481b      	ldr	r0, [pc, #108]	; (80096c0 <lwip_netconn_do_close+0x14c>)
 8009652:	f00c fe95 	bl	8016380 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d022      	beq.n	80096a6 <lwip_netconn_do_close+0x132>
 8009660:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <lwip_netconn_do_close+0x13c>)
 8009662:	f240 7225 	movw	r2, #1829	; 0x725
 8009666:	4915      	ldr	r1, [pc, #84]	; (80096bc <lwip_netconn_do_close+0x148>)
 8009668:	4813      	ldr	r0, [pc, #76]	; (80096b8 <lwip_netconn_do_close+0x144>)
 800966a:	f00c ff2f 	bl	80164cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800966e:	e01a      	b.n	80096a6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	22f5      	movs	r2, #245	; 0xf5
 8009674:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d014      	beq.n	80096a8 <lwip_netconn_do_close+0x134>
 800967e:	f00c fec1 	bl	8016404 <sys_arch_protect>
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800968c:	f113 0f0c 	cmn.w	r3, #12
 8009690:	db05      	blt.n	800969e <lwip_netconn_do_close+0x12a>
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800969c:	721a      	strb	r2, [r3, #8]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f00c febe 	bl	8016420 <sys_arch_unprotect>
 80096a4:	e000      	b.n	80096a8 <lwip_netconn_do_close+0x134>
      return;
 80096a6:	bf00      	nop
}
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	08017700 	.word	0x08017700
 80096b4:	08017a48 	.word	0x08017a48
 80096b8:	08017758 	.word	0x08017758
 80096bc:	08017a64 	.word	0x08017a64
 80096c0:	2000c028 	.word	0x2000c028

080096c4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d013      	beq.n	80096fa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f002 f9e4 	bl	800baac <pbuf_free>
      buf->p = buf->ptr = NULL;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	605a      	str	r2, [r3, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	2006      	movs	r0, #6
 80096f6:	f001 fc77 	bl	800afe8 <memp_free>
  }
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d108      	bne.n	8009728 <netbuf_data+0x24>
 8009716:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <netbuf_data+0x80>)
 8009718:	22c2      	movs	r2, #194	; 0xc2
 800971a:	491b      	ldr	r1, [pc, #108]	; (8009788 <netbuf_data+0x84>)
 800971c:	481b      	ldr	r0, [pc, #108]	; (800978c <netbuf_data+0x88>)
 800971e:	f00c fed5 	bl	80164cc <iprintf>
 8009722:	f06f 030f 	mvn.w	r3, #15
 8009726:	e029      	b.n	800977c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d108      	bne.n	8009740 <netbuf_data+0x3c>
 800972e:	4b15      	ldr	r3, [pc, #84]	; (8009784 <netbuf_data+0x80>)
 8009730:	22c3      	movs	r2, #195	; 0xc3
 8009732:	4917      	ldr	r1, [pc, #92]	; (8009790 <netbuf_data+0x8c>)
 8009734:	4815      	ldr	r0, [pc, #84]	; (800978c <netbuf_data+0x88>)
 8009736:	f00c fec9 	bl	80164cc <iprintf>
 800973a:	f06f 030f 	mvn.w	r3, #15
 800973e:	e01d      	b.n	800977c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d108      	bne.n	8009758 <netbuf_data+0x54>
 8009746:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <netbuf_data+0x80>)
 8009748:	22c4      	movs	r2, #196	; 0xc4
 800974a:	4912      	ldr	r1, [pc, #72]	; (8009794 <netbuf_data+0x90>)
 800974c:	480f      	ldr	r0, [pc, #60]	; (800978c <netbuf_data+0x88>)
 800974e:	f00c febd 	bl	80164cc <iprintf>
 8009752:	f06f 030f 	mvn.w	r3, #15
 8009756:	e011      	b.n	800977c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <netbuf_data+0x62>
    return ERR_BUF;
 8009760:	f06f 0301 	mvn.w	r3, #1
 8009764:	e00a      	b.n	800977c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	895a      	ldrh	r2, [r3, #10]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	08017bc8 	.word	0x08017bc8
 8009788:	08017cd0 	.word	0x08017cd0
 800978c:	08017c18 	.word	0x08017c18
 8009790:	08017cec 	.word	0x08017cec
 8009794:	08017d0c 	.word	0x08017d0c

08009798 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d108      	bne.n	80097b8 <netbuf_next+0x20>
 80097a6:	4b11      	ldr	r3, [pc, #68]	; (80097ec <netbuf_next+0x54>)
 80097a8:	22dc      	movs	r2, #220	; 0xdc
 80097aa:	4911      	ldr	r1, [pc, #68]	; (80097f0 <netbuf_next+0x58>)
 80097ac:	4811      	ldr	r0, [pc, #68]	; (80097f4 <netbuf_next+0x5c>)
 80097ae:	f00c fe8d 	bl	80164cc <iprintf>
 80097b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097b6:	e014      	b.n	80097e2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <netbuf_next+0x30>
    return -1;
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c6:	e00c      	b.n	80097e2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <netbuf_next+0x48>
    return 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <netbuf_next+0x4a>
  }
  return 0;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	08017bc8 	.word	0x08017bc8
 80097f0:	08017d28 	.word	0x08017d28
 80097f4:	08017c18 	.word	0x08017c18

080097f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009800:	4b29      	ldr	r3, [pc, #164]	; (80098a8 <tcpip_thread+0xb0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009808:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <tcpip_thread+0xb0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <tcpip_thread+0xb4>)
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009814:	4826      	ldr	r0, [pc, #152]	; (80098b0 <tcpip_thread+0xb8>)
 8009816:	f00c fdb3 	bl	8016380 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800981a:	4825      	ldr	r0, [pc, #148]	; (80098b0 <tcpip_thread+0xb8>)
 800981c:	f00c fdbf 	bl	801639e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	4619      	mov	r1, r3
 8009826:	4823      	ldr	r0, [pc, #140]	; (80098b4 <tcpip_thread+0xbc>)
 8009828:	f007 ff74 	bl	8011714 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800982c:	4820      	ldr	r0, [pc, #128]	; (80098b0 <tcpip_thread+0xb8>)
 800982e:	f00c fda7 	bl	8016380 <sys_mutex_lock>
    if (msg == NULL) {
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009838:	4b1f      	ldr	r3, [pc, #124]	; (80098b8 <tcpip_thread+0xc0>)
 800983a:	2269      	movs	r2, #105	; 0x69
 800983c:	491f      	ldr	r1, [pc, #124]	; (80098bc <tcpip_thread+0xc4>)
 800983e:	4820      	ldr	r0, [pc, #128]	; (80098c0 <tcpip_thread+0xc8>)
 8009840:	f00c fe44 	bl	80164cc <iprintf>
      continue;
 8009844:	e02f      	b.n	80098a6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d011      	beq.n	8009872 <tcpip_thread+0x7a>
 800984e:	2b04      	cmp	r3, #4
 8009850:	d01b      	beq.n	800988a <tcpip_thread+0x92>
 8009852:	2b02      	cmp	r3, #2
 8009854:	d120      	bne.n	8009898 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	6850      	ldr	r0, [r2, #4]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	6892      	ldr	r2, [r2, #8]
 8009862:	4611      	mov	r1, r2
 8009864:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4619      	mov	r1, r3
 800986a:	2009      	movs	r0, #9
 800986c:	f001 fbbc 	bl	800afe8 <memp_free>
      break;
 8009870:	e019      	b.n	80098a6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	6892      	ldr	r2, [r2, #8]
 800987a:	4610      	mov	r0, r2
 800987c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	4619      	mov	r1, r3
 8009882:	2008      	movs	r0, #8
 8009884:	f001 fbb0 	bl	800afe8 <memp_free>
      break;
 8009888:	e00d      	b.n	80098a6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	6892      	ldr	r2, [r2, #8]
 8009892:	4610      	mov	r0, r2
 8009894:	4798      	blx	r3
      break;
 8009896:	e006      	b.n	80098a6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009898:	4b07      	ldr	r3, [pc, #28]	; (80098b8 <tcpip_thread+0xc0>)
 800989a:	229b      	movs	r2, #155	; 0x9b
 800989c:	4907      	ldr	r1, [pc, #28]	; (80098bc <tcpip_thread+0xc4>)
 800989e:	4808      	ldr	r0, [pc, #32]	; (80098c0 <tcpip_thread+0xc8>)
 80098a0:	f00c fe14 	bl	80164cc <iprintf>
      break;
 80098a4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80098a6:	e7b8      	b.n	800981a <tcpip_thread+0x22>
 80098a8:	20008448 	.word	0x20008448
 80098ac:	2000844c 	.word	0x2000844c
 80098b0:	2000c028 	.word	0x2000c028
 80098b4:	20008450 	.word	0x20008450
 80098b8:	08017d60 	.word	0x08017d60
 80098bc:	08017d90 	.word	0x08017d90
 80098c0:	08017db0 	.word	0x08017db0

080098c4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80098d0:	481a      	ldr	r0, [pc, #104]	; (800993c <tcpip_inpkt+0x78>)
 80098d2:	f00c fc7b 	bl	80161cc <sys_mbox_valid>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d105      	bne.n	80098e8 <tcpip_inpkt+0x24>
 80098dc:	4b18      	ldr	r3, [pc, #96]	; (8009940 <tcpip_inpkt+0x7c>)
 80098de:	22b5      	movs	r2, #181	; 0xb5
 80098e0:	4918      	ldr	r1, [pc, #96]	; (8009944 <tcpip_inpkt+0x80>)
 80098e2:	4819      	ldr	r0, [pc, #100]	; (8009948 <tcpip_inpkt+0x84>)
 80098e4:	f00c fdf2 	bl	80164cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80098e8:	2009      	movs	r0, #9
 80098ea:	f001 fb2b 	bl	800af44 <memp_malloc>
 80098ee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098fa:	e01a      	b.n	8009932 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	2202      	movs	r2, #2
 8009900:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009914:	6979      	ldr	r1, [r7, #20]
 8009916:	4809      	ldr	r0, [pc, #36]	; (800993c <tcpip_inpkt+0x78>)
 8009918:	f00c fbe3 	bl	80160e2 <sys_mbox_trypost>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d006      	beq.n	8009930 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	2009      	movs	r0, #9
 8009926:	f001 fb5f 	bl	800afe8 <memp_free>
    return ERR_MEM;
 800992a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800992e:	e000      	b.n	8009932 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009930:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20008450 	.word	0x20008450
 8009940:	08017d60 	.word	0x08017d60
 8009944:	08017dd8 	.word	0x08017dd8
 8009948:	08017db0 	.word	0x08017db0

0800994c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800995c:	f003 0318 	and.w	r3, r3, #24
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009964:	4a08      	ldr	r2, [pc, #32]	; (8009988 <tcpip_input+0x3c>)
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ffab 	bl	80098c4 <tcpip_inpkt>
 800996e:	4603      	mov	r3, r0
 8009970:	e005      	b.n	800997e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009972:	4a06      	ldr	r2, [pc, #24]	; (800998c <tcpip_input+0x40>)
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff ffa4 	bl	80098c4 <tcpip_inpkt>
 800997c:	4603      	mov	r3, r0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	08015e99 	.word	0x08015e99
 800998c:	08014e21 	.word	0x08014e21

08009990 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800999e:	481d      	ldr	r0, [pc, #116]	; (8009a14 <tcpip_callback_with_block+0x84>)
 80099a0:	f00c fc14 	bl	80161cc <sys_mbox_valid>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <tcpip_callback_with_block+0x26>
 80099aa:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <tcpip_callback_with_block+0x88>)
 80099ac:	22ee      	movs	r2, #238	; 0xee
 80099ae:	491b      	ldr	r1, [pc, #108]	; (8009a1c <tcpip_callback_with_block+0x8c>)
 80099b0:	481b      	ldr	r0, [pc, #108]	; (8009a20 <tcpip_callback_with_block+0x90>)
 80099b2:	f00c fd8b 	bl	80164cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80099b6:	2008      	movs	r0, #8
 80099b8:	f001 fac4 	bl	800af44 <memp_malloc>
 80099bc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099c8:	e01f      	b.n	8009a0a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2203      	movs	r2, #3
 80099ce:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	609a      	str	r2, [r3, #8]
  if (block) {
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d004      	beq.n	80099ec <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80099e2:	6979      	ldr	r1, [r7, #20]
 80099e4:	480b      	ldr	r0, [pc, #44]	; (8009a14 <tcpip_callback_with_block+0x84>)
 80099e6:	f00c fb67 	bl	80160b8 <sys_mbox_post>
 80099ea:	e00d      	b.n	8009a08 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80099ec:	6979      	ldr	r1, [r7, #20]
 80099ee:	4809      	ldr	r0, [pc, #36]	; (8009a14 <tcpip_callback_with_block+0x84>)
 80099f0:	f00c fb77 	bl	80160e2 <sys_mbox_trypost>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d006      	beq.n	8009a08 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80099fa:	6979      	ldr	r1, [r7, #20]
 80099fc:	2008      	movs	r0, #8
 80099fe:	f001 faf3 	bl	800afe8 <memp_free>
      return ERR_MEM;
 8009a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a06:	e000      	b.n	8009a0a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20008450 	.word	0x20008450
 8009a18:	08017d60 	.word	0x08017d60
 8009a1c:	08017dd8 	.word	0x08017dd8
 8009a20:	08017db0 	.word	0x08017db0

08009a24 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <tcpip_send_msg_wait_sem+0x28>)
 8009a32:	f00c fca5 	bl	8016380 <sys_mutex_lock>
  fn(apimsg);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	68b8      	ldr	r0, [r7, #8]
 8009a3a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009a3c:	4803      	ldr	r0, [pc, #12]	; (8009a4c <tcpip_send_msg_wait_sem+0x28>)
 8009a3e:	f00c fcae 	bl	801639e <sys_mutex_unlock>
  return ERR_OK;
 8009a42:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	2000c028 	.word	0x2000c028

08009a50 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009a5a:	f000 feac 	bl	800a7b6 <lwip_init>

  tcpip_init_done = initfunc;
 8009a5e:	4a17      	ldr	r2, [pc, #92]	; (8009abc <tcpip_init+0x6c>)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009a64:	4a16      	ldr	r2, [pc, #88]	; (8009ac0 <tcpip_init+0x70>)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009a6a:	2106      	movs	r1, #6
 8009a6c:	4815      	ldr	r0, [pc, #84]	; (8009ac4 <tcpip_init+0x74>)
 8009a6e:	f00c faef 	bl	8016050 <sys_mbox_new>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d006      	beq.n	8009a86 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009a78:	4b13      	ldr	r3, [pc, #76]	; (8009ac8 <tcpip_init+0x78>)
 8009a7a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009a7e:	4913      	ldr	r1, [pc, #76]	; (8009acc <tcpip_init+0x7c>)
 8009a80:	4813      	ldr	r0, [pc, #76]	; (8009ad0 <tcpip_init+0x80>)
 8009a82:	f00c fd23 	bl	80164cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009a86:	4813      	ldr	r0, [pc, #76]	; (8009ad4 <tcpip_init+0x84>)
 8009a88:	f00c fc5e 	bl	8016348 <sys_mutex_new>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d006      	beq.n	8009aa0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009a92:	4b0d      	ldr	r3, [pc, #52]	; (8009ac8 <tcpip_init+0x78>)
 8009a94:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009a98:	490f      	ldr	r1, [pc, #60]	; (8009ad8 <tcpip_init+0x88>)
 8009a9a:	480d      	ldr	r0, [pc, #52]	; (8009ad0 <tcpip_init+0x80>)
 8009a9c:	f00c fd16 	bl	80164cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	490c      	ldr	r1, [pc, #48]	; (8009adc <tcpip_init+0x8c>)
 8009aac:	480c      	ldr	r0, [pc, #48]	; (8009ae0 <tcpip_init+0x90>)
 8009aae:	f00c fc83 	bl	80163b8 <sys_thread_new>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20008448 	.word	0x20008448
 8009ac0:	2000844c 	.word	0x2000844c
 8009ac4:	20008450 	.word	0x20008450
 8009ac8:	08017d60 	.word	0x08017d60
 8009acc:	08017de8 	.word	0x08017de8
 8009ad0:	08017db0 	.word	0x08017db0
 8009ad4:	2000c028 	.word	0x2000c028
 8009ad8:	08017e0c 	.word	0x08017e0c
 8009adc:	080097f9 	.word	0x080097f9
 8009ae0:	08017e30 	.word	0x08017e30

08009ae4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <fs_open+0x16>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <fs_open+0x1c>
     return ERR_ARG;
 8009afa:	f06f 030f 	mvn.w	r3, #15
 8009afe:	e028      	b.n	8009b52 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009b00:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <fs_open+0x78>)
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	e020      	b.n	8009b48 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6838      	ldr	r0, [r7, #0]
 8009b0e:	f7f6 fb6f 	bl	80001f0 <strcmp>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d114      	bne.n	8009b42 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	7c1a      	ldrb	r2, [r3, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e007      	b.n	8009b52 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1db      	bne.n	8009b06 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009b4e:	f06f 0305 	mvn.w	r3, #5
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0802557c 	.word	0x0802557c

08009b60 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	1ad3      	subs	r3, r2, r3
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009b9a:	222c      	movs	r2, #44	; 0x2c
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f00c fc8c 	bl	80164bc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009bb2:	202c      	movs	r0, #44	; 0x2c
 8009bb4:	f001 f856 	bl	800ac64 <mem_malloc>
 8009bb8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff ffe6 	bl	8009b92 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009bc6:	687b      	ldr	r3, [r7, #4]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff ffbb 	bl	8009b60 <fs_close>
    hs->handle = NULL;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d007      	beq.n	8009c08 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 ff55 	bl	800baac <pbuf_free>
    hs->req = NULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <http_state_free+0x1a>
    http_state_eof(hs);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff ffd6 	bl	8009bd0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fec5 	bl	800a9b4 <mem_free>
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <http_write+0x22>
 8009c48:	4b2c      	ldr	r3, [pc, #176]	; (8009cfc <http_write+0xc8>)
 8009c4a:	f44f 7204 	mov.w	r2, #528	; 0x210
 8009c4e:	492c      	ldr	r1, [pc, #176]	; (8009d00 <http_write+0xcc>)
 8009c50:	482c      	ldr	r0, [pc, #176]	; (8009d04 <http_write+0xd0>)
 8009c52:	f00c fc3b 	bl	80164cc <iprintf>
  len = *length;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009c5c:	8afb      	ldrh	r3, [r7, #22]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <http_write+0x32>
    return ERR_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e045      	b.n	8009cf2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c6c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8009c6e:	8aba      	ldrh	r2, [r7, #20]
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d201      	bcs.n	8009c7a <http_write+0x46>
    len = max_len;
 8009c76:	8abb      	ldrh	r3, [r7, #20]
 8009c78:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 8009c82:	8afa      	ldrh	r2, [r7, #22]
 8009c84:	8abb      	ldrh	r3, [r7, #20]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d901      	bls.n	8009c8e <http_write+0x5a>
    len = max_len;
 8009c8a:	8abb      	ldrh	r3, [r7, #20]
 8009c8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 8009c8e:	78fb      	ldrb	r3, [r7, #3]
 8009c90:	8afa      	ldrh	r2, [r7, #22]
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f006 fa37 	bl	8010108 <tcp_write>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009c9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ca6:	d10f      	bne.n	8009cc8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d902      	bls.n	8009cc2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	82fb      	strh	r3, [r7, #22]
 8009cc0:	e002      	b.n	8009cc8 <http_write+0x94>
      } else {
        len /= 2;
 8009cc2:	8afb      	ldrh	r3, [r7, #22]
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd0:	d102      	bne.n	8009cd8 <http_write+0xa4>
 8009cd2:	8afb      	ldrh	r3, [r7, #22]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d8da      	bhi.n	8009c8e <http_write+0x5a>

  if (err == ERR_OK) {
 8009cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	8afa      	ldrh	r2, [r7, #22]
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	e002      	b.n	8009cee <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 8009cee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	08017e80 	.word	0x08017e80
 8009d00:	08017eb8 	.word	0x08017eb8
 8009d04:	08017ec8 	.word	0x08017ec8

08009d08 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4613      	mov	r3, r2
 8009d14:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 8009d16:	2100      	movs	r1, #0
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f003 fbb3 	bl	800d484 <tcp_arg>
  tcp_recv(pcb, NULL);
 8009d1e:	2100      	movs	r1, #0
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f003 fbc1 	bl	800d4a8 <tcp_recv>
  tcp_err(pcb, NULL);
 8009d26:	2100      	movs	r1, #0
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f003 fbff 	bl	800d52c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f003 fc34 	bl	800d5a0 <tcp_poll>
  tcp_sent(pcb, NULL);
 8009d38:	2100      	movs	r1, #0
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f003 fbd6 	bl	800d4ec <tcp_sent>
  if (hs != NULL) {
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	f7ff ff62 	bl	8009c10 <http_state_free>
  }

  if (abort_conn) {
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f002 fc00 	bl	800c558 <tcp_abort>
    return ERR_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e00f      	b.n	8009d7c <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f002 fae9 	bl	800c334 <tcp_close>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8009d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d004      	beq.n	8009d78 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009d6e:	2204      	movs	r2, #4
 8009d70:	4904      	ldr	r1, [pc, #16]	; (8009d84 <http_close_or_abort_conn+0x7c>)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f003 fc14 	bl	800d5a0 <tcp_poll>
  }
  return err;
 8009d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	0800a45b 	.word	0x0800a45b

08009d88 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 8009d92:	2200      	movs	r2, #0
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff ffb6 	bl	8009d08 <http_close_or_abort_conn>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ffe8 	bl	8009d88 <http_close_conn>
  }
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d105      	bne.n	8009dde <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ffe6 	bl	8009da6 <http_eof>
    return 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e016      	b.n	8009e0c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fec6 	bl	8009b74 <fs_bytes_left>
 8009de8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dc05      	bgt.n	8009dfc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff ffd7 	bl	8009da6 <http_eof>
    return 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e007      	b.n	8009e0c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <http_check_eof+0x54>)
 8009dfe:	f240 4283 	movw	r2, #1155	; 0x483
 8009e02:	4905      	ldr	r1, [pc, #20]	; (8009e18 <http_check_eof+0x58>)
 8009e04:	4805      	ldr	r0, [pc, #20]	; (8009e1c <http_check_eof+0x5c>)
 8009e06:	f00c fb61 	bl	80164cc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8009e0a:	2301      	movs	r3, #1
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08017e80 	.word	0x08017e80
 8009e18:	08017ef0 	.word	0x08017ef0
 8009e1c:	08017ec8 	.word	0x08017ec8

08009e20 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8009e20:	b590      	push	{r4, r7, lr}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d803      	bhi.n	8009e42 <http_send_data_nonssi+0x22>
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	e001      	b.n	8009e46 <http_send_data_nonssi+0x26>
 8009e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e46:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6998      	ldr	r0, [r3, #24]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d012      	beq.n	8009e7a <http_send_data_nonssi+0x5a>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <http_send_data_nonssi+0x5a>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	6819      	ldr	r1, [r3, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	461c      	mov	r4, r3
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	1ae3      	subs	r3, r4, r3
 8009e74:	440b      	add	r3, r1
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d001      	beq.n	8009e7e <http_send_data_nonssi+0x5e>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <http_send_data_nonssi+0x60>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	f107 020c 	add.w	r2, r7, #12
 8009e86:	4601      	mov	r1, r0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fed3 	bl	8009c34 <http_write>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8009e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10d      	bne.n	8009eb6 <http_send_data_nonssi+0x96>
    data_to_send = 1;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	89ba      	ldrh	r2, [r7, #12]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	89ba      	ldrh	r2, [r7, #12]
 8009eb0:	1a9a      	subs	r2, r3, r2
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd90      	pop	{r4, r7, pc}

08009ec0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <http_send+0x18>
    return 0;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e025      	b.n	8009f24 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d108      	bne.n	8009ef2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff ff6c 	bl	8009dc0 <http_check_eof>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <http_send+0x32>
      return 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e018      	b.n	8009f24 <http_send+0x64>
  if(hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ff93 	bl	8009e20 <http_send_data_nonssi>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <http_send+0x62>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff fe32 	bl	8009b74 <fs_bytes_left>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dc05      	bgt.n	8009f22 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff ff44 	bl	8009da6 <http_eof>
    return 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	e000      	b.n	8009f24 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	4a1c      	ldr	r2, [pc, #112]	; (8009fac <http_get_404_file+0x80>)
 8009f3a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7ff fdcd 	bl	8009ae4 <fs_open>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d024      	beq.n	8009fa0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <http_get_404_file+0x84>)
 8009f5a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f7ff fdbd 	bl	8009ae4 <fs_open>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d014      	beq.n	8009fa0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	4a0e      	ldr	r2, [pc, #56]	; (8009fb4 <http_get_404_file+0x88>)
 8009f7a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7ff fdad 	bl	8009ae4 <fs_open>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d004      	beq.n	8009fa0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
        return NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e000      	b.n	8009fa2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009fa0:	687b      	ldr	r3, [r7, #4]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	08017f28 	.word	0x08017f28
 8009fb0:	08017f34 	.word	0x08017f34
 8009fb4:	08017f40 	.word	0x08017f40

08009fb8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08e      	sub	sp, #56	; 0x38
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <http_parse_request+0x24>
 8009fce:	4b65      	ldr	r3, [pc, #404]	; (800a164 <http_parse_request+0x1ac>)
 8009fd0:	f240 727e 	movw	r2, #1918	; 0x77e
 8009fd4:	4964      	ldr	r1, [pc, #400]	; (800a168 <http_parse_request+0x1b0>)
 8009fd6:	4865      	ldr	r0, [pc, #404]	; (800a16c <http_parse_request+0x1b4>)
 8009fd8:	f00c fa78 	bl	80164cc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <http_parse_request+0x38>
 8009fe2:	4b60      	ldr	r3, [pc, #384]	; (800a164 <http_parse_request+0x1ac>)
 8009fe4:	f240 727f 	movw	r2, #1919	; 0x77f
 8009fe8:	4961      	ldr	r1, [pc, #388]	; (800a170 <http_parse_request+0x1b8>)
 8009fea:	4860      	ldr	r0, [pc, #384]	; (800a16c <http_parse_request+0x1b4>)
 8009fec:	f00c fa6e 	bl	80164cc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <http_parse_request+0x48>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a000:	f06f 0307 	mvn.w	r3, #7
 800a004:	e0aa      	b.n	800a15c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d103      	bne.n	800a016 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	621a      	str	r2, [r3, #32]
 800a014:	e005      	b.n	800a022 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 fe1f 	bl	800bc60 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a024:	f001 fdf4 	bl	800bc10 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d012      	beq.n	800a058 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	891b      	ldrh	r3, [r3, #8]
 800a038:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a03c:	4293      	cmp	r3, r2
 800a03e:	bf28      	it	cs
 800a040:	4613      	movcs	r3, r2
 800a042:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6a18      	ldr	r0, [r3, #32]
 800a048:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a04a:	2300      	movs	r3, #0
 800a04c:	4949      	ldr	r1, [pc, #292]	; (800a174 <http_parse_request+0x1bc>)
 800a04e:	f001 ff39 	bl	800bec4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a052:	4b48      	ldr	r3, [pc, #288]	; (800a174 <http_parse_request+0x1bc>)
 800a054:	637b      	str	r3, [r7, #52]	; 0x34
 800a056:	e005      	b.n	800a064 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	895b      	ldrh	r3, [r3, #10]
 800a062:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a064:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a066:	2b06      	cmp	r3, #6
 800a068:	d963      	bls.n	800a132 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a06a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a06c:	461a      	mov	r2, r3
 800a06e:	4942      	ldr	r1, [pc, #264]	; (800a178 <http_parse_request+0x1c0>)
 800a070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a072:	f000 fb6a 	bl	800a74a <lwip_strnstr>
 800a076:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d059      	beq.n	800a132 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a082:	2204      	movs	r2, #4
 800a084:	493d      	ldr	r1, [pc, #244]	; (800a17c <http_parse_request+0x1c4>)
 800a086:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a088:	f00c fa79 	bl	801657e <strncmp>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d117      	bne.n	800a0c2 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a094:	3303      	adds	r3, #3
 800a096:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3301      	adds	r3, #1
 800a09c:	461a      	mov	r2, r3
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	8b7a      	ldrh	r2, [r7, #26]
 800a0b0:	4933      	ldr	r1, [pc, #204]	; (800a180 <http_parse_request+0x1c8>)
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fb49 	bl	800a74a <lwip_strnstr>
 800a0b8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d111      	bne.n	800a0e4 <http_parse_request+0x12c>
 800a0c0:	e006      	b.n	800a0d0 <http_parse_request+0x118>
        data[4] = 0;
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a0ca:	f06f 030f 	mvn.w	r3, #15
 800a0ce:	e045      	b.n	800a15c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	8b7a      	ldrh	r2, [r7, #26]
 800a0d6:	4928      	ldr	r1, [pc, #160]	; (800a178 <http_parse_request+0x1c0>)
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 fb36 	bl	800a74a <lwip_strnstr>
 800a0de:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01e      	beq.n	800a132 <http_parse_request+0x17a>
 800a0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d91a      	bls.n	800a132 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a0fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a0fe:	461a      	mov	r2, r3
 800a100:	4920      	ldr	r1, [pc, #128]	; (800a184 <http_parse_request+0x1cc>)
 800a102:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a104:	f000 fb21 	bl	800a74a <lwip_strnstr>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d011      	beq.n	800a132 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	3301      	adds	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a11a:	8b3b      	ldrh	r3, [r7, #24]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	4413      	add	r3, r2
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	68b8      	ldr	r0, [r7, #8]
 800a12a:	f000 f82d 	bl	800a188 <http_find_file>
 800a12e:	4603      	mov	r3, r0
 800a130:	e014      	b.n	800a15c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	4618      	mov	r0, r3
 800a138:	f001 fd52 	bl	800bbe0 <pbuf_clen>
 800a13c:	4603      	mov	r3, r0
 800a13e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	891b      	ldrh	r3, [r3, #8]
 800a146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a14a:	d205      	bcs.n	800a158 <http_parse_request+0x1a0>
 800a14c:	8a7b      	ldrh	r3, [r7, #18]
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d802      	bhi.n	800a158 <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a152:	f06f 0304 	mvn.w	r3, #4
 800a156:	e001      	b.n	800a15c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a158:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3738      	adds	r7, #56	; 0x38
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	08017e80 	.word	0x08017e80
 800a168:	08017f4c 	.word	0x08017f4c
 800a16c:	08017ec8 	.word	0x08017ec8
 800a170:	08017f58 	.word	0x08017f58
 800a174:	20008454 	.word	0x20008454
 800a178:	08017f64 	.word	0x08017f64
 800a17c:	08017f68 	.word	0x08017f68
 800a180:	08017f70 	.word	0x08017f70
 800a184:	08017f74 	.word	0x08017f74

0800a188 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b092      	sub	sp, #72	; 0x48
 800a18c:	af02      	add	r7, sp, #8
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a198:	2300      	movs	r3, #0
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7f6 f82d 	bl	8000204 <strlen>
 800a1aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d065      	beq.n	800a27e <http_find_file+0xf6>
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b2f      	cmp	r3, #47	; 0x2f
 800a1be:	d15e      	bne.n	800a27e <http_find_file+0xf6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a1c0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a1c2:	4a50      	ldr	r2, [pc, #320]	; (800a304 <http_find_file+0x17c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d102      	bne.n	800a1ce <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d157      	bne.n	800a27e <http_find_file+0xf6>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	2b3f      	cmp	r3, #63	; 0x3f
 800a1d4:	bf28      	it	cs
 800a1d6:	233f      	movcs	r3, #63	; 0x3f
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4847      	ldr	r0, [pc, #284]	; (800a304 <http_find_file+0x17c>)
 800a1e8:	f00c f95d 	bl	80164a6 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a1ec:	4a45      	ldr	r2, [pc, #276]	; (800a304 <http_find_file+0x17c>)
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1fa:	e03d      	b.n	800a278 <http_find_file+0xf0>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d022      	beq.n	800a248 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a208:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d018      	beq.n	800a242 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800a210:	4a3d      	ldr	r2, [pc, #244]	; (800a308 <http_find_file+0x180>)
 800a212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7f5 fff3 	bl	8000204 <strlen>
 800a21e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	4293      	cmp	r3, r2
 800a226:	bf28      	it	cs
 800a228:	4613      	movcs	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	4a35      	ldr	r2, [pc, #212]	; (800a304 <http_find_file+0x17c>)
 800a230:	1898      	adds	r0, r3, r2
 800a232:	4a35      	ldr	r2, [pc, #212]	; (800a308 <http_find_file+0x180>)
 800a234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a236:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	4619      	mov	r1, r3
 800a23e:	f00c f932 	bl	80164a6 <memcpy>
        }
        file_name = http_uri_buf;
 800a242:	4b30      	ldr	r3, [pc, #192]	; (800a304 <http_find_file+0x17c>)
 800a244:	633b      	str	r3, [r7, #48]	; 0x30
 800a246:	e004      	b.n	800a252 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800a248:	4a2f      	ldr	r2, [pc, #188]	; (800a308 <http_find_file+0x180>)
 800a24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a250:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fc44 	bl	8009ae4 <fs_open>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]
      if(err == ERR_OK) {
 800a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <http_find_file+0xea>
        uri = file_name;
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a270:	e005      	b.n	800a27e <http_find_file+0xf6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a274:	3301      	adds	r3, #1
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d9be      	bls.n	800a1fc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	2b00      	cmp	r3, #0
 800a282:	d124      	bne.n	800a2ce <http_find_file+0x146>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	213f      	movs	r1, #63	; 0x3f
 800a288:	4618      	mov	r0, r3
 800a28a:	f00c f96b 	bl	8016564 <strchr>
 800a28e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <http_find_file+0x11a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	2200      	movs	r2, #0
 800a29a:	701a      	strb	r2, [r3, #0]
      params++;
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	3301      	adds	r3, #1
 800a2a0:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff fc1b 	bl	8009ae4 <fs_open>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d102      	bne.n	800a2c0 <http_find_file+0x138>
       file = &hs->file_handle;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2be:	e006      	b.n	800a2ce <http_find_file+0x146>
    } else {
      file = http_get_404_file(hs, &uri);
 800a2c0:	f107 0308 	add.w	r3, r7, #8
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fe30 	bl	8009f2c <http_get_404_file>
 800a2cc:	63b8      	str	r0, [r7, #56]	; 0x38
         *param = '?';
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d106      	bne.n	800a2e2 <http_find_file+0x15a>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a2d4:	f107 0308 	add.w	r3, r7, #8
 800a2d8:	4619      	mov	r1, r3
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7ff fe26 	bl	8009f2c <http_get_404_file>
 800a2e0:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f809 	bl	800a30c <http_init_file>
 800a2fa:	4603      	mov	r3, r0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3740      	adds	r7, #64	; 0x40
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20008854 	.word	0x20008854
 800a308:	08025590 	.word	0x08025590

0800a30c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d052      	beq.n	800a3c6 <http_init_file+0xba>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	da06      	bge.n	800a344 <http_init_file+0x38>
 800a336:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <http_init_file+0xe0>)
 800a338:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800a33c:	492c      	ldr	r1, [pc, #176]	; (800a3f0 <http_init_file+0xe4>)
 800a33e:	482d      	ldr	r0, [pc, #180]	; (800a3f4 <http_init_file+0xe8>)
 800a340:	f00c f8c4 	bl	80164cc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	461a      	mov	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	7c1b      	ldrb	r3, [r3, #16]
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <http_init_file+0x66>
 800a364:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <http_init_file+0xe0>)
 800a366:	f640 02df 	movw	r2, #2271	; 0x8df
 800a36a:	4923      	ldr	r1, [pc, #140]	; (800a3f8 <http_init_file+0xec>)
 800a36c:	4821      	ldr	r0, [pc, #132]	; (800a3f4 <http_init_file+0xe8>)
 800a36e:	f00c f8ad 	bl	80164cc <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d033      	beq.n	800a3e0 <http_init_file+0xd4>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	7c1b      	ldrb	r3, [r3, #16]
 800a37e:	f003 0301 	and.w	r3, r3, #1
 800a382:	2b00      	cmp	r3, #0
 800a384:	d02c      	beq.n	800a3e0 <http_init_file+0xd4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6998      	ldr	r0, [r3, #24]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	461a      	mov	r2, r3
 800a390:	491a      	ldr	r1, [pc, #104]	; (800a3fc <http_init_file+0xf0>)
 800a392:	f000 f9da 	bl	800a74a <lwip_strnstr>
 800a396:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d020      	beq.n	800a3e0 <http_init_file+0xd4>
        size_t diff = file_start + 4 - hs->file;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	699a      	ldr	r2, [r3, #24]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	441a      	add	r2, r3
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	625a      	str	r2, [r3, #36]	; 0x24
 800a3c4:	e00c      	b.n	800a3e0 <http_init_file+0xd4>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3718      	adds	r7, #24
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	08017e80 	.word	0x08017e80
 800a3f0:	08017f7c 	.word	0x08017f7c
 800a3f4:	08017ec8 	.word	0x08017ec8
 800a3f8:	08017f9c 	.word	0x08017f9c
 800a3fc:	08017f74 	.word	0x08017f74

0800a400 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <http_err+0x1c>
    http_state_free(hs);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fbfa 	bl	8009c10 <http_state_free>
  }
}
 800a41c:	bf00      	nop
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <http_sent+0x1c>
    return ERR_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e008      	b.n	800a452 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a448:	6979      	ldr	r1, [r7, #20]
 800a44a:	68b8      	ldr	r0, [r7, #8]
 800a44c:	f7ff fd38 	bl	8009ec0 <http_send>

  return ERR_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a46e:	2100      	movs	r1, #0
 800a470:	6838      	ldr	r0, [r7, #0]
 800a472:	f7ff fc89 	bl	8009d88 <http_close_conn>
 800a476:	4603      	mov	r3, r0
 800a478:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e024      	b.n	800a4c8 <http_poll+0x6e>
  } else {
    hs->retries++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a484:	3301      	adds	r3, #1
 800a486:	b2da      	uxtb	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a494:	2b04      	cmp	r3, #4
 800a496:	d105      	bne.n	800a4a4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a498:	68f9      	ldr	r1, [r7, #12]
 800a49a:	6838      	ldr	r0, [r7, #0]
 800a49c:	f7ff fc74 	bl	8009d88 <http_close_conn>
      return ERR_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e011      	b.n	800a4c8 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00d      	beq.n	800a4c6 <http_poll+0x6c>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d009      	beq.n	800a4c6 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	6838      	ldr	r0, [r7, #0]
 800a4b6:	f7ff fd03 	bl	8009ec0 <http_send>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800a4c0:	6838      	ldr	r0, [r7, #0]
 800a4c2:	f006 fad3 	bl	8010a6c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a4e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d105      	bne.n	800a4f6 <http_recv+0x26>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <http_recv+0x26>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d111      	bne.n	800a51a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d008      	beq.n	800a50e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	891b      	ldrh	r3, [r3, #8]
 800a500:	4619      	mov	r1, r3
 800a502:	68b8      	ldr	r0, [r7, #8]
 800a504:	f002 f9ce 	bl	800c8a4 <tcp_recved>
      pbuf_free(p);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f001 facf 	bl	800baac <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a50e:	6979      	ldr	r1, [r7, #20]
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f7ff fc39 	bl	8009d88 <http_close_conn>
    return ERR_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	e055      	b.n	800a5c6 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	891b      	ldrh	r3, [r3, #8]
 800a51e:	4619      	mov	r1, r3
 800a520:	68b8      	ldr	r0, [r7, #8]
 800a522:	f002 f9bf 	bl	800c8a4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d147      	bne.n	800a5be <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	6979      	ldr	r1, [r7, #20]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff fd40 	bl	8009fb8 <http_parse_request>
 800a538:	4603      	mov	r3, r0
 800a53a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a53c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d015      	beq.n	800a570 <http_recv+0xa0>
 800a544:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a548:	f113 0f05 	cmn.w	r3, #5
 800a54c:	d010      	beq.n	800a570 <http_recv+0xa0>
 800a54e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a552:	f113 0f10 	cmn.w	r3, #16
 800a556:	d00b      	beq.n	800a570 <http_recv+0xa0>
 800a558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a55c:	f113 0f08 	cmn.w	r3, #8
 800a560:	d006      	beq.n	800a570 <http_recv+0xa0>
 800a562:	4b1b      	ldr	r3, [pc, #108]	; (800a5d0 <http_recv+0x100>)
 800a564:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800a568:	491a      	ldr	r1, [pc, #104]	; (800a5d4 <http_recv+0x104>)
 800a56a:	481b      	ldr	r0, [pc, #108]	; (800a5d8 <http_recv+0x108>)
 800a56c:	f00b ffae 	bl	80164cc <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a574:	f113 0f05 	cmn.w	r3, #5
 800a578:	d00b      	beq.n	800a592 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fa90 	bl	800baac <pbuf_free>
          hs->req = NULL;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2200      	movs	r2, #0
 800a590:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f001 fa8a 	bl	800baac <pbuf_free>
      if (parsed == ERR_OK) {
 800a598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d104      	bne.n	800a5aa <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800a5a0:	6979      	ldr	r1, [r7, #20]
 800a5a2:	68b8      	ldr	r0, [r7, #8]
 800a5a4:	f7ff fc8c 	bl	8009ec0 <http_send>
 800a5a8:	e00c      	b.n	800a5c4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a5aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5ae:	f113 0f10 	cmn.w	r3, #16
 800a5b2:	d107      	bne.n	800a5c4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a5b4:	6979      	ldr	r1, [r7, #20]
 800a5b6:	68b8      	ldr	r0, [r7, #8]
 800a5b8:	f7ff fbe6 	bl	8009d88 <http_close_conn>
 800a5bc:	e002      	b.n	800a5c4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f001 fa74 	bl	800baac <pbuf_free>
    }
  }
  return ERR_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3718      	adds	r7, #24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	08017e80 	.word	0x08017e80
 800a5d4:	08017fc8 	.word	0x08017fc8
 800a5d8:	08017ec8 	.word	0x08017ec8

0800a5dc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a5ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <http_accept+0x1c>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <http_accept+0x22>
    return ERR_VAL;
 800a5f8:	f06f 0305 	mvn.w	r3, #5
 800a5fc:	e025      	b.n	800a64a <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a5fe:	2101      	movs	r1, #1
 800a600:	68b8      	ldr	r0, [r7, #8]
 800a602:	f002 fda6 	bl	800d152 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a606:	f7ff fad1 	bl	8009bac <http_state_alloc>
 800a60a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d102      	bne.n	800a618 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a616:	e018      	b.n	800a64a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800a61e:	6979      	ldr	r1, [r7, #20]
 800a620:	68b8      	ldr	r0, [r7, #8]
 800a622:	f002 ff2f 	bl	800d484 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800a626:	490b      	ldr	r1, [pc, #44]	; (800a654 <http_accept+0x78>)
 800a628:	68b8      	ldr	r0, [r7, #8]
 800a62a:	f002 ff3d 	bl	800d4a8 <tcp_recv>
  tcp_err(pcb, http_err);
 800a62e:	490a      	ldr	r1, [pc, #40]	; (800a658 <http_accept+0x7c>)
 800a630:	68b8      	ldr	r0, [r7, #8]
 800a632:	f002 ff7b 	bl	800d52c <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a636:	2204      	movs	r2, #4
 800a638:	4908      	ldr	r1, [pc, #32]	; (800a65c <http_accept+0x80>)
 800a63a:	68b8      	ldr	r0, [r7, #8]
 800a63c:	f002 ffb0 	bl	800d5a0 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800a640:	4907      	ldr	r1, [pc, #28]	; (800a660 <http_accept+0x84>)
 800a642:	68b8      	ldr	r0, [r7, #8]
 800a644:	f002 ff52 	bl	800d4ec <tcp_sent>

  return ERR_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	0800a4d1 	.word	0x0800a4d1
 800a658:	0800a401 	.word	0x0800a401
 800a65c:	0800a45b 	.word	0x0800a45b
 800a660:	0800a425 	.word	0x0800a425

0800a664 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a66a:	202e      	movs	r0, #46	; 0x2e
 800a66c:	f002 fefc 	bl	800d468 <tcp_new_ip_type>
 800a670:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <httpd_init+0x22>
 800a678:	4b19      	ldr	r3, [pc, #100]	; (800a6e0 <httpd_init+0x7c>)
 800a67a:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800a67e:	4919      	ldr	r1, [pc, #100]	; (800a6e4 <httpd_init+0x80>)
 800a680:	4819      	ldr	r0, [pc, #100]	; (800a6e8 <httpd_init+0x84>)
 800a682:	f00b ff23 	bl	80164cc <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a686:	2101      	movs	r1, #1
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f002 fd62 	bl	800d152 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800a68e:	2250      	movs	r2, #80	; 0x50
 800a690:	4916      	ldr	r1, [pc, #88]	; (800a6ec <httpd_init+0x88>)
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f001 ff6c 	bl	800c570 <tcp_bind>
 800a698:	4603      	mov	r3, r0
 800a69a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a69c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d006      	beq.n	800a6b2 <httpd_init+0x4e>
 800a6a4:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <httpd_init+0x7c>)
 800a6a6:	f640 2215 	movw	r2, #2581	; 0xa15
 800a6aa:	4911      	ldr	r1, [pc, #68]	; (800a6f0 <httpd_init+0x8c>)
 800a6ac:	480e      	ldr	r0, [pc, #56]	; (800a6e8 <httpd_init+0x84>)
 800a6ae:	f00b ff0d 	bl	80164cc <iprintf>
  pcb = tcp_listen(pcb);
 800a6b2:	21ff      	movs	r1, #255	; 0xff
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fffd 	bl	800c6b4 <tcp_listen_with_backlog>
 800a6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <httpd_init+0x6c>
 800a6c2:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <httpd_init+0x7c>)
 800a6c4:	f640 2217 	movw	r2, #2583	; 0xa17
 800a6c8:	490a      	ldr	r1, [pc, #40]	; (800a6f4 <httpd_init+0x90>)
 800a6ca:	4807      	ldr	r0, [pc, #28]	; (800a6e8 <httpd_init+0x84>)
 800a6cc:	f00b fefe 	bl	80164cc <iprintf>
  tcp_accept(pcb, http_accept);
 800a6d0:	4909      	ldr	r1, [pc, #36]	; (800a6f8 <httpd_init+0x94>)
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f002 ff4c 	bl	800d570 <tcp_accept>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	08017e80 	.word	0x08017e80
 800a6e4:	08017ff4 	.word	0x08017ff4
 800a6e8:	08017ec8 	.word	0x08017ec8
 800a6ec:	080256d8 	.word	0x080256d8
 800a6f0:	08018010 	.word	0x08018010
 800a6f4:	0801802c 	.word	0x0801802c
 800a6f8:	0800a5dd 	.word	0x0800a5dd

0800a6fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	ba5b      	rev16	r3, r3
 800a70a:	b29b      	uxth	r3, r3
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	061a      	lsls	r2, r3, #24
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0e1b      	lsrs	r3, r3, #24
 800a73c:	4313      	orrs	r3, r2
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b086      	sub	sp, #24
 800a74e:	af00      	add	r7, sp, #0
 800a750:	60f8      	str	r0, [r7, #12]
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800a756:	68b8      	ldr	r0, [r7, #8]
 800a758:	f7f5 fd54 	bl	8000204 <strlen>
 800a75c:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e022      	b.n	800a7ae <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	e012      	b.n	800a794 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d109      	bne.n	800a78e <lwip_strnstr+0x44>
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	6978      	ldr	r0, [r7, #20]
 800a780:	f00b fefd 	bl	801657e <strncmp>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	e00f      	b.n	800a7ae <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	3301      	adds	r3, #1
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d007      	beq.n	800a7ac <lwip_strnstr+0x62>
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	68f9      	ldr	r1, [r7, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	440b      	add	r3, r1
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d9e0      	bls.n	800a76e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a7c0:	f00b fdb4 	bl	801632c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a7c4:	f000 f8a6 	bl	800a914 <mem_init>
  memp_init();
 800a7c8:	f000 fb70 	bl	800aeac <memp_init>
  pbuf_init();
  netif_init();
 800a7cc:	f000 fc36 	bl	800b03c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a7d0:	f006 ffc6 	bl	8011760 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a7d4:	f001 fbf0 	bl	800bfb8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800a7d8:	f006 fe58 	bl	801148c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a7ec:	4b40      	ldr	r3, [pc, #256]	; (800a8f0 <plug_holes+0x10c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d206      	bcs.n	800a804 <plug_holes+0x20>
 800a7f6:	4b3f      	ldr	r3, [pc, #252]	; (800a8f4 <plug_holes+0x110>)
 800a7f8:	f240 125d 	movw	r2, #349	; 0x15d
 800a7fc:	493e      	ldr	r1, [pc, #248]	; (800a8f8 <plug_holes+0x114>)
 800a7fe:	483f      	ldr	r0, [pc, #252]	; (800a8fc <plug_holes+0x118>)
 800a800:	f00b fe64 	bl	80164cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a804:	4b3e      	ldr	r3, [pc, #248]	; (800a900 <plug_holes+0x11c>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d306      	bcc.n	800a81c <plug_holes+0x38>
 800a80e:	4b39      	ldr	r3, [pc, #228]	; (800a8f4 <plug_holes+0x110>)
 800a810:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a814:	493b      	ldr	r1, [pc, #236]	; (800a904 <plug_holes+0x120>)
 800a816:	4839      	ldr	r0, [pc, #228]	; (800a8fc <plug_holes+0x118>)
 800a818:	f00b fe58 	bl	80164cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	791b      	ldrb	r3, [r3, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d006      	beq.n	800a832 <plug_holes+0x4e>
 800a824:	4b33      	ldr	r3, [pc, #204]	; (800a8f4 <plug_holes+0x110>)
 800a826:	f240 125f 	movw	r2, #351	; 0x15f
 800a82a:	4937      	ldr	r1, [pc, #220]	; (800a908 <plug_holes+0x124>)
 800a82c:	4833      	ldr	r0, [pc, #204]	; (800a8fc <plug_holes+0x118>)
 800a82e:	f00b fe4d 	bl	80164cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a83a:	d906      	bls.n	800a84a <plug_holes+0x66>
 800a83c:	4b2d      	ldr	r3, [pc, #180]	; (800a8f4 <plug_holes+0x110>)
 800a83e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a842:	4932      	ldr	r1, [pc, #200]	; (800a90c <plug_holes+0x128>)
 800a844:	482d      	ldr	r0, [pc, #180]	; (800a8fc <plug_holes+0x118>)
 800a846:	f00b fe41 	bl	80164cc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800a84a:	4b29      	ldr	r3, [pc, #164]	; (800a8f0 <plug_holes+0x10c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	8812      	ldrh	r2, [r2, #0]
 800a852:	4413      	add	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d01f      	beq.n	800a89e <plug_holes+0xba>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d11b      	bne.n	800a89e <plug_holes+0xba>
 800a866:	4b26      	ldr	r3, [pc, #152]	; (800a900 <plug_holes+0x11c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d016      	beq.n	800a89e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a870:	4b27      	ldr	r3, [pc, #156]	; (800a910 <plug_holes+0x12c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	429a      	cmp	r2, r3
 800a878:	d102      	bne.n	800a880 <plug_holes+0x9c>
      lfree = mem;
 800a87a:	4a25      	ldr	r2, [pc, #148]	; (800a910 <plug_holes+0x12c>)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	881a      	ldrh	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a19      	ldr	r2, [pc, #100]	; (800a8f0 <plug_holes+0x10c>)
 800a88c:	6812      	ldr	r2, [r2, #0]
 800a88e:	1a99      	subs	r1, r3, r2
 800a890:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <plug_holes+0x10c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	8812      	ldrh	r2, [r2, #0]
 800a898:	4413      	add	r3, r2
 800a89a:	b28a      	uxth	r2, r1
 800a89c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <plug_holes+0x10c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	8852      	ldrh	r2, [r2, #2]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d01a      	beq.n	800a8e8 <plug_holes+0x104>
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	791b      	ldrb	r3, [r3, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d116      	bne.n	800a8e8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a8ba:	4b15      	ldr	r3, [pc, #84]	; (800a910 <plug_holes+0x12c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d102      	bne.n	800a8ca <plug_holes+0xe6>
      lfree = pmem;
 800a8c4:	4a12      	ldr	r2, [pc, #72]	; (800a910 <plug_holes+0x12c>)
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a06      	ldr	r2, [pc, #24]	; (800a8f0 <plug_holes+0x10c>)
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	1a99      	subs	r1, r3, r2
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <plug_holes+0x10c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	8812      	ldrh	r2, [r2, #0]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b28a      	uxth	r2, r1
 800a8e6:	805a      	strh	r2, [r3, #2]
  }
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20008894 	.word	0x20008894
 800a8f4:	0801804c 	.word	0x0801804c
 800a8f8:	0801807c 	.word	0x0801807c
 800a8fc:	08018094 	.word	0x08018094
 800a900:	20008898 	.word	0x20008898
 800a904:	080180bc 	.word	0x080180bc
 800a908:	080180d8 	.word	0x080180d8
 800a90c:	080180f4 	.word	0x080180f4
 800a910:	2000889c 	.word	0x2000889c

0800a914 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a91a:	4b1e      	ldr	r3, [pc, #120]	; (800a994 <mem_init+0x80>)
 800a91c:	3303      	adds	r3, #3
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	461a      	mov	r2, r3
 800a924:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <mem_init+0x84>)
 800a926:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <mem_init+0x84>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a934:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a942:	4b15      	ldr	r3, [pc, #84]	; (800a998 <mem_init+0x84>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800a94a:	4a14      	ldr	r2, [pc, #80]	; (800a99c <mem_init+0x88>)
 800a94c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <mem_init+0x88>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2201      	movs	r2, #1
 800a954:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a956:	4b11      	ldr	r3, [pc, #68]	; (800a99c <mem_init+0x88>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a95e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <mem_init+0x88>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a968:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <mem_init+0x84>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a0c      	ldr	r2, [pc, #48]	; (800a9a0 <mem_init+0x8c>)
 800a970:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a972:	480c      	ldr	r0, [pc, #48]	; (800a9a4 <mem_init+0x90>)
 800a974:	f00b fce8 	bl	8016348 <sys_mutex_new>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a97e:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <mem_init+0x94>)
 800a980:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a984:	4909      	ldr	r1, [pc, #36]	; (800a9ac <mem_init+0x98>)
 800a986:	480a      	ldr	r0, [pc, #40]	; (800a9b0 <mem_init+0x9c>)
 800a988:	f00b fda0 	bl	80164cc <iprintf>
  }
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	2000c044 	.word	0x2000c044
 800a998:	20008894 	.word	0x20008894
 800a99c:	20008898 	.word	0x20008898
 800a9a0:	2000889c 	.word	0x2000889c
 800a9a4:	200088a0 	.word	0x200088a0
 800a9a8:	0801804c 	.word	0x0801804c
 800a9ac:	08018120 	.word	0x08018120
 800a9b0:	08018094 	.word	0x08018094

0800a9b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d050      	beq.n	800aa64 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d006      	beq.n	800a9da <mem_free+0x26>
 800a9cc:	4b27      	ldr	r3, [pc, #156]	; (800aa6c <mem_free+0xb8>)
 800a9ce:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800a9d2:	4927      	ldr	r1, [pc, #156]	; (800aa70 <mem_free+0xbc>)
 800a9d4:	4827      	ldr	r0, [pc, #156]	; (800aa74 <mem_free+0xc0>)
 800a9d6:	f00b fd79 	bl	80164cc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a9da:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <mem_free+0xc4>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d304      	bcc.n	800a9ee <mem_free+0x3a>
 800a9e4:	4b25      	ldr	r3, [pc, #148]	; (800aa7c <mem_free+0xc8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d306      	bcc.n	800a9fc <mem_free+0x48>
 800a9ee:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <mem_free+0xb8>)
 800a9f0:	f240 12af 	movw	r2, #431	; 0x1af
 800a9f4:	4922      	ldr	r1, [pc, #136]	; (800aa80 <mem_free+0xcc>)
 800a9f6:	481f      	ldr	r0, [pc, #124]	; (800aa74 <mem_free+0xc0>)
 800a9f8:	f00b fd68 	bl	80164cc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a9fc:	4b1e      	ldr	r3, [pc, #120]	; (800aa78 <mem_free+0xc4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d304      	bcc.n	800aa10 <mem_free+0x5c>
 800aa06:	4b1d      	ldr	r3, [pc, #116]	; (800aa7c <mem_free+0xc8>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d306      	bcc.n	800aa1e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800aa10:	f00b fcf8 	bl	8016404 <sys_arch_protect>
 800aa14:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800aa16:	68b8      	ldr	r0, [r7, #8]
 800aa18:	f00b fd02 	bl	8016420 <sys_arch_unprotect>
    return;
 800aa1c:	e023      	b.n	800aa66 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa1e:	4819      	ldr	r0, [pc, #100]	; (800aa84 <mem_free+0xd0>)
 800aa20:	f00b fcae 	bl	8016380 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3b08      	subs	r3, #8
 800aa28:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	791b      	ldrb	r3, [r3, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <mem_free+0x8c>
 800aa32:	4b0e      	ldr	r3, [pc, #56]	; (800aa6c <mem_free+0xb8>)
 800aa34:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800aa38:	4913      	ldr	r1, [pc, #76]	; (800aa88 <mem_free+0xd4>)
 800aa3a:	480e      	ldr	r0, [pc, #56]	; (800aa74 <mem_free+0xc0>)
 800aa3c:	f00b fd46 	bl	80164cc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aa46:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <mem_free+0xd8>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d202      	bcs.n	800aa56 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aa50:	4a0e      	ldr	r2, [pc, #56]	; (800aa8c <mem_free+0xd8>)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7ff fec4 	bl	800a7e4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa5c:	4809      	ldr	r0, [pc, #36]	; (800aa84 <mem_free+0xd0>)
 800aa5e:	f00b fc9e 	bl	801639e <sys_mutex_unlock>
 800aa62:	e000      	b.n	800aa66 <mem_free+0xb2>
    return;
 800aa64:	bf00      	nop
}
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	0801804c 	.word	0x0801804c
 800aa70:	0801813c 	.word	0x0801813c
 800aa74:	08018094 	.word	0x08018094
 800aa78:	20008894 	.word	0x20008894
 800aa7c:	20008898 	.word	0x20008898
 800aa80:	08018160 	.word	0x08018160
 800aa84:	200088a0 	.word	0x200088a0
 800aa88:	08018178 	.word	0x08018178
 800aa8c:	2000889c 	.word	0x2000889c

0800aa90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800aa9c:	887b      	ldrh	r3, [r7, #2]
 800aa9e:	3303      	adds	r3, #3
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	f023 0303 	bic.w	r3, r3, #3
 800aaa6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800aaa8:	887b      	ldrh	r3, [r7, #2]
 800aaaa:	2b0b      	cmp	r3, #11
 800aaac:	d801      	bhi.n	800aab2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aaae:	230c      	movs	r3, #12
 800aab0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800aab2:	887b      	ldrh	r3, [r7, #2]
 800aab4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aab8:	d901      	bls.n	800aabe <mem_trim+0x2e>
    return NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e0bd      	b.n	800ac3a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aabe:	4b61      	ldr	r3, [pc, #388]	; (800ac44 <mem_trim+0x1b4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d304      	bcc.n	800aad2 <mem_trim+0x42>
 800aac8:	4b5f      	ldr	r3, [pc, #380]	; (800ac48 <mem_trim+0x1b8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d306      	bcc.n	800aae0 <mem_trim+0x50>
 800aad2:	4b5e      	ldr	r3, [pc, #376]	; (800ac4c <mem_trim+0x1bc>)
 800aad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aad8:	495d      	ldr	r1, [pc, #372]	; (800ac50 <mem_trim+0x1c0>)
 800aada:	485e      	ldr	r0, [pc, #376]	; (800ac54 <mem_trim+0x1c4>)
 800aadc:	f00b fcf6 	bl	80164cc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aae0:	4b58      	ldr	r3, [pc, #352]	; (800ac44 <mem_trim+0x1b4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d304      	bcc.n	800aaf4 <mem_trim+0x64>
 800aaea:	4b57      	ldr	r3, [pc, #348]	; (800ac48 <mem_trim+0x1b8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d307      	bcc.n	800ab04 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800aaf4:	f00b fc86 	bl	8016404 <sys_arch_protect>
 800aaf8:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f00b fc90 	bl	8016420 <sys_arch_unprotect>
    return rmem;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	e09a      	b.n	800ac3a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3b08      	subs	r3, #8
 800ab08:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4a4d      	ldr	r2, [pc, #308]	; (800ac44 <mem_trim+0x1b4>)
 800ab0e:	6812      	ldr	r2, [r2, #0]
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	881a      	ldrh	r2, [r3, #0]
 800ab18:	8b7b      	ldrh	r3, [r7, #26]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b08      	subs	r3, #8
 800ab20:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ab22:	887a      	ldrh	r2, [r7, #2]
 800ab24:	8b3b      	ldrh	r3, [r7, #24]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d906      	bls.n	800ab38 <mem_trim+0xa8>
 800ab2a:	4b48      	ldr	r3, [pc, #288]	; (800ac4c <mem_trim+0x1bc>)
 800ab2c:	f240 2206 	movw	r2, #518	; 0x206
 800ab30:	4949      	ldr	r1, [pc, #292]	; (800ac58 <mem_trim+0x1c8>)
 800ab32:	4848      	ldr	r0, [pc, #288]	; (800ac54 <mem_trim+0x1c4>)
 800ab34:	f00b fcca 	bl	80164cc <iprintf>
  if (newsize > size) {
 800ab38:	887a      	ldrh	r2, [r7, #2]
 800ab3a:	8b3b      	ldrh	r3, [r7, #24]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d901      	bls.n	800ab44 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e07a      	b.n	800ac3a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800ab44:	887a      	ldrh	r2, [r7, #2]
 800ab46:	8b3b      	ldrh	r3, [r7, #24]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d101      	bne.n	800ab50 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	e074      	b.n	800ac3a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ab50:	4842      	ldr	r0, [pc, #264]	; (800ac5c <mem_trim+0x1cc>)
 800ab52:	f00b fc15 	bl	8016380 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ab56:	4b3b      	ldr	r3, [pc, #236]	; (800ac44 <mem_trim+0x1b4>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69fa      	ldr	r2, [r7, #28]
 800ab5c:	8812      	ldrh	r2, [r2, #0]
 800ab5e:	4413      	add	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	791b      	ldrb	r3, [r3, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d131      	bne.n	800abce <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ab70:	8b7a      	ldrh	r2, [r7, #26]
 800ab72:	887b      	ldrh	r3, [r7, #2]
 800ab74:	4413      	add	r3, r2
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	3308      	adds	r3, #8
 800ab7a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800ab7c:	4b38      	ldr	r3, [pc, #224]	; (800ac60 <mem_trim+0x1d0>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d105      	bne.n	800ab92 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ab86:	4b2f      	ldr	r3, [pc, #188]	; (800ac44 <mem_trim+0x1b4>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	8a7b      	ldrh	r3, [r7, #18]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	4a34      	ldr	r2, [pc, #208]	; (800ac60 <mem_trim+0x1d0>)
 800ab90:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ab92:	4b2c      	ldr	r3, [pc, #176]	; (800ac44 <mem_trim+0x1b4>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	8a7b      	ldrh	r3, [r7, #18]
 800ab98:	4413      	add	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	8a3a      	ldrh	r2, [r7, #16]
 800aba6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	8b7a      	ldrh	r2, [r7, #26]
 800abac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	8a7a      	ldrh	r2, [r7, #18]
 800abb2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	881b      	ldrh	r3, [r3, #0]
 800abb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abbc:	d039      	beq.n	800ac32 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800abbe:	4b21      	ldr	r3, [pc, #132]	; (800ac44 <mem_trim+0x1b4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	8812      	ldrh	r2, [r2, #0]
 800abc6:	4413      	add	r3, r2
 800abc8:	8a7a      	ldrh	r2, [r7, #18]
 800abca:	805a      	strh	r2, [r3, #2]
 800abcc:	e031      	b.n	800ac32 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800abce:	887b      	ldrh	r3, [r7, #2]
 800abd0:	f103 0214 	add.w	r2, r3, #20
 800abd4:	8b3b      	ldrh	r3, [r7, #24]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d82b      	bhi.n	800ac32 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800abda:	8b7a      	ldrh	r2, [r7, #26]
 800abdc:	887b      	ldrh	r3, [r7, #2]
 800abde:	4413      	add	r3, r2
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3308      	adds	r3, #8
 800abe4:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800abe6:	4b17      	ldr	r3, [pc, #92]	; (800ac44 <mem_trim+0x1b4>)
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	8a7b      	ldrh	r3, [r7, #18]
 800abec:	4413      	add	r3, r2
 800abee:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800abf0:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <mem_trim+0x1d0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d202      	bcs.n	800ac00 <mem_trim+0x170>
      lfree = mem2;
 800abfa:	4a19      	ldr	r2, [pc, #100]	; (800ac60 <mem_trim+0x1d0>)
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2200      	movs	r2, #0
 800ac04:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	881a      	ldrh	r2, [r3, #0]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	8b7a      	ldrh	r2, [r7, #26]
 800ac12:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	8a7a      	ldrh	r2, [r7, #18]
 800ac18:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac22:	d006      	beq.n	800ac32 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <mem_trim+0x1b4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	8812      	ldrh	r2, [r2, #0]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	8a7a      	ldrh	r2, [r7, #18]
 800ac30:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ac32:	480a      	ldr	r0, [pc, #40]	; (800ac5c <mem_trim+0x1cc>)
 800ac34:	f00b fbb3 	bl	801639e <sys_mutex_unlock>
  return rmem;
 800ac38:	687b      	ldr	r3, [r7, #4]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20008894 	.word	0x20008894
 800ac48:	20008898 	.word	0x20008898
 800ac4c:	0801804c 	.word	0x0801804c
 800ac50:	0801818c 	.word	0x0801818c
 800ac54:	08018094 	.word	0x08018094
 800ac58:	080181a4 	.word	0x080181a4
 800ac5c:	200088a0 	.word	0x200088a0
 800ac60:	2000889c 	.word	0x2000889c

0800ac64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ac6e:	88fb      	ldrh	r3, [r7, #6]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <mem_malloc+0x14>
    return NULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e0d1      	b.n	800ae1c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ac78:	88fb      	ldrh	r3, [r7, #6]
 800ac7a:	3303      	adds	r3, #3
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	2b0b      	cmp	r3, #11
 800ac88:	d801      	bhi.n	800ac8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ac8e:	88fb      	ldrh	r3, [r7, #6]
 800ac90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac94:	d901      	bls.n	800ac9a <mem_malloc+0x36>
    return NULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	e0c0      	b.n	800ae1c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ac9a:	4862      	ldr	r0, [pc, #392]	; (800ae24 <mem_malloc+0x1c0>)
 800ac9c:	f00b fb70 	bl	8016380 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800aca0:	4b61      	ldr	r3, [pc, #388]	; (800ae28 <mem_malloc+0x1c4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b61      	ldr	r3, [pc, #388]	; (800ae2c <mem_malloc+0x1c8>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	83fb      	strh	r3, [r7, #30]
 800acae:	e0aa      	b.n	800ae06 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800acb0:	4b5e      	ldr	r3, [pc, #376]	; (800ae2c <mem_malloc+0x1c8>)
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	8bfb      	ldrh	r3, [r7, #30]
 800acb6:	4413      	add	r3, r2
 800acb8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	791b      	ldrb	r3, [r3, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f040 809b 	bne.w	800adfa <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	8bfb      	ldrh	r3, [r7, #30]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	f1a3 0208 	sub.w	r2, r3, #8
 800acd2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800acd4:	429a      	cmp	r2, r3
 800acd6:	f0c0 8090 	bcc.w	800adfa <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	8bfb      	ldrh	r3, [r7, #30]
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	f1a3 0208 	sub.w	r2, r3, #8
 800ace8:	88fb      	ldrh	r3, [r7, #6]
 800acea:	3314      	adds	r3, #20
 800acec:	429a      	cmp	r2, r3
 800acee:	d327      	bcc.n	800ad40 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800acf0:	8bfa      	ldrh	r2, [r7, #30]
 800acf2:	88fb      	ldrh	r3, [r7, #6]
 800acf4:	4413      	add	r3, r2
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3308      	adds	r3, #8
 800acfa:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800acfc:	4b4b      	ldr	r3, [pc, #300]	; (800ae2c <mem_malloc+0x1c8>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	8a7b      	ldrh	r3, [r7, #18]
 800ad02:	4413      	add	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	881a      	ldrh	r2, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8bfa      	ldrh	r2, [r7, #30]
 800ad18:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	8a7a      	ldrh	r2, [r7, #18]
 800ad1e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2201      	movs	r2, #1
 800ad24:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad2e:	d00a      	beq.n	800ad46 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ad30:	4b3e      	ldr	r3, [pc, #248]	; (800ae2c <mem_malloc+0x1c8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	8812      	ldrh	r2, [r2, #0]
 800ad38:	4413      	add	r3, r2
 800ad3a:	8a7a      	ldrh	r2, [r7, #18]
 800ad3c:	805a      	strh	r2, [r3, #2]
 800ad3e:	e002      	b.n	800ad46 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2201      	movs	r2, #1
 800ad44:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ad46:	4b38      	ldr	r3, [pc, #224]	; (800ae28 <mem_malloc+0x1c4>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d127      	bne.n	800ada0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800ad50:	4b35      	ldr	r3, [pc, #212]	; (800ae28 <mem_malloc+0x1c4>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ad56:	e005      	b.n	800ad64 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ad58:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <mem_malloc+0x1c8>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	8812      	ldrh	r2, [r2, #0]
 800ad60:	4413      	add	r3, r2
 800ad62:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	791b      	ldrb	r3, [r3, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d004      	beq.n	800ad76 <mem_malloc+0x112>
 800ad6c:	4b30      	ldr	r3, [pc, #192]	; (800ae30 <mem_malloc+0x1cc>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d1f0      	bne.n	800ad58 <mem_malloc+0xf4>
          }
          lfree = cur;
 800ad76:	4a2c      	ldr	r2, [pc, #176]	; (800ae28 <mem_malloc+0x1c4>)
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ad7c:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <mem_malloc+0x1c4>)
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	4b2b      	ldr	r3, [pc, #172]	; (800ae30 <mem_malloc+0x1cc>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d00b      	beq.n	800ada0 <mem_malloc+0x13c>
 800ad88:	4b27      	ldr	r3, [pc, #156]	; (800ae28 <mem_malloc+0x1c4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	791b      	ldrb	r3, [r3, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <mem_malloc+0x13c>
 800ad92:	4b28      	ldr	r3, [pc, #160]	; (800ae34 <mem_malloc+0x1d0>)
 800ad94:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ad98:	4927      	ldr	r1, [pc, #156]	; (800ae38 <mem_malloc+0x1d4>)
 800ad9a:	4828      	ldr	r0, [pc, #160]	; (800ae3c <mem_malloc+0x1d8>)
 800ad9c:	f00b fb96 	bl	80164cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ada0:	4820      	ldr	r0, [pc, #128]	; (800ae24 <mem_malloc+0x1c0>)
 800ada2:	f00b fafc 	bl	801639e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ada6:	88fa      	ldrh	r2, [r7, #6]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	4413      	add	r3, r2
 800adac:	3308      	adds	r3, #8
 800adae:	4a20      	ldr	r2, [pc, #128]	; (800ae30 <mem_malloc+0x1cc>)
 800adb0:	6812      	ldr	r2, [r2, #0]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d906      	bls.n	800adc4 <mem_malloc+0x160>
 800adb6:	4b1f      	ldr	r3, [pc, #124]	; (800ae34 <mem_malloc+0x1d0>)
 800adb8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800adbc:	4920      	ldr	r1, [pc, #128]	; (800ae40 <mem_malloc+0x1dc>)
 800adbe:	481f      	ldr	r0, [pc, #124]	; (800ae3c <mem_malloc+0x1d8>)
 800adc0:	f00b fb84 	bl	80164cc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d006      	beq.n	800addc <mem_malloc+0x178>
 800adce:	4b19      	ldr	r3, [pc, #100]	; (800ae34 <mem_malloc+0x1d0>)
 800add0:	f240 22d6 	movw	r2, #726	; 0x2d6
 800add4:	491b      	ldr	r1, [pc, #108]	; (800ae44 <mem_malloc+0x1e0>)
 800add6:	4819      	ldr	r0, [pc, #100]	; (800ae3c <mem_malloc+0x1d8>)
 800add8:	f00b fb78 	bl	80164cc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <mem_malloc+0x190>
 800ade6:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <mem_malloc+0x1d0>)
 800ade8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800adec:	4916      	ldr	r1, [pc, #88]	; (800ae48 <mem_malloc+0x1e4>)
 800adee:	4813      	ldr	r0, [pc, #76]	; (800ae3c <mem_malloc+0x1d8>)
 800adf0:	f00b fb6c 	bl	80164cc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	3308      	adds	r3, #8
 800adf8:	e010      	b.n	800ae1c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800adfa:	4b0c      	ldr	r3, [pc, #48]	; (800ae2c <mem_malloc+0x1c8>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	8bfb      	ldrh	r3, [r7, #30]
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ae06:	8bfa      	ldrh	r2, [r7, #30]
 800ae08:	88fb      	ldrh	r3, [r7, #6]
 800ae0a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	f4ff af4e 	bcc.w	800acb0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ae14:	4803      	ldr	r0, [pc, #12]	; (800ae24 <mem_malloc+0x1c0>)
 800ae16:	f00b fac2 	bl	801639e <sys_mutex_unlock>
  return NULL;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3720      	adds	r7, #32
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	200088a0 	.word	0x200088a0
 800ae28:	2000889c 	.word	0x2000889c
 800ae2c:	20008894 	.word	0x20008894
 800ae30:	20008898 	.word	0x20008898
 800ae34:	0801804c 	.word	0x0801804c
 800ae38:	080181c4 	.word	0x080181c4
 800ae3c:	08018094 	.word	0x08018094
 800ae40:	080181e0 	.word	0x080181e0
 800ae44:	08018210 	.word	0x08018210
 800ae48:	08018240 	.word	0x08018240

0800ae4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	3303      	adds	r3, #3
 800ae62:	f023 0303 	bic.w	r3, r3, #3
 800ae66:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	e011      	b.n	800ae92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4413      	add	r3, r2
 800ae8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	dbe7      	blt.n	800ae6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ae9e:	bf00      	nop
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	80fb      	strh	r3, [r7, #6]
 800aeb6:	e009      	b.n	800aecc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	4a08      	ldr	r2, [pc, #32]	; (800aedc <memp_init+0x30>)
 800aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ffc3 	bl	800ae4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	3301      	adds	r3, #1
 800aeca:	80fb      	strh	r3, [r7, #6]
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	2b0c      	cmp	r3, #12
 800aed0:	d9f2      	bls.n	800aeb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	08025654 	.word	0x08025654

0800aee0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aee8:	f00b fa8c 	bl	8016404 <sys_arch_protect>
 800aeec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d015      	beq.n	800af28 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	6812      	ldr	r2, [r2, #0]
 800af04:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <do_memp_malloc_pool+0x3e>
 800af10:	4b09      	ldr	r3, [pc, #36]	; (800af38 <do_memp_malloc_pool+0x58>)
 800af12:	f240 1249 	movw	r2, #329	; 0x149
 800af16:	4909      	ldr	r1, [pc, #36]	; (800af3c <do_memp_malloc_pool+0x5c>)
 800af18:	4809      	ldr	r0, [pc, #36]	; (800af40 <do_memp_malloc_pool+0x60>)
 800af1a:	f00b fad7 	bl	80164cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f00b fa7e 	bl	8016420 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	e003      	b.n	800af30 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f00b fa79 	bl	8016420 <sys_arch_unprotect>
  return NULL;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	08018264 	.word	0x08018264
 800af3c:	08018294 	.word	0x08018294
 800af40:	080182b8 	.word	0x080182b8

0800af44 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	2b0c      	cmp	r3, #12
 800af52:	d908      	bls.n	800af66 <memp_malloc+0x22>
 800af54:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <memp_malloc+0x3c>)
 800af56:	f240 1287 	movw	r2, #391	; 0x187
 800af5a:	490a      	ldr	r1, [pc, #40]	; (800af84 <memp_malloc+0x40>)
 800af5c:	480a      	ldr	r0, [pc, #40]	; (800af88 <memp_malloc+0x44>)
 800af5e:	f00b fab5 	bl	80164cc <iprintf>
 800af62:	2300      	movs	r3, #0
 800af64:	e008      	b.n	800af78 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	4a08      	ldr	r2, [pc, #32]	; (800af8c <memp_malloc+0x48>)
 800af6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ffb6 	bl	800aee0 <do_memp_malloc_pool>
 800af74:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800af76:	68fb      	ldr	r3, [r7, #12]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	08018264 	.word	0x08018264
 800af84:	080182f4 	.word	0x080182f4
 800af88:	080182b8 	.word	0x080182b8
 800af8c:	08025654 	.word	0x08025654

0800af90 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	f003 0303 	and.w	r3, r3, #3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <do_memp_free_pool+0x22>
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <do_memp_free_pool+0x4c>)
 800afa6:	f240 129d 	movw	r2, #413	; 0x19d
 800afaa:	490d      	ldr	r1, [pc, #52]	; (800afe0 <do_memp_free_pool+0x50>)
 800afac:	480d      	ldr	r0, [pc, #52]	; (800afe4 <do_memp_free_pool+0x54>)
 800afae:	f00b fa8d 	bl	80164cc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800afb6:	f00b fa25 	bl	8016404 <sys_arch_protect>
 800afba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800afce:	68b8      	ldr	r0, [r7, #8]
 800afd0:	f00b fa26 	bl	8016420 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	08018264 	.word	0x08018264
 800afe0:	08018314 	.word	0x08018314
 800afe4:	080182b8 	.word	0x080182b8

0800afe8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	6039      	str	r1, [r7, #0]
 800aff2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aff4:	79fb      	ldrb	r3, [r7, #7]
 800aff6:	2b0c      	cmp	r3, #12
 800aff8:	d907      	bls.n	800b00a <memp_free+0x22>
 800affa:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <memp_free+0x44>)
 800affc:	f240 12db 	movw	r2, #475	; 0x1db
 800b000:	490b      	ldr	r1, [pc, #44]	; (800b030 <memp_free+0x48>)
 800b002:	480c      	ldr	r0, [pc, #48]	; (800b034 <memp_free+0x4c>)
 800b004:	f00b fa62 	bl	80164cc <iprintf>
 800b008:	e00c      	b.n	800b024 <memp_free+0x3c>

  if (mem == NULL) {
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	4a09      	ldr	r2, [pc, #36]	; (800b038 <memp_free+0x50>)
 800b014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff ffb8 	bl	800af90 <do_memp_free_pool>
 800b020:	e000      	b.n	800b024 <memp_free+0x3c>
    return;
 800b022:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	08018264 	.word	0x08018264
 800b030:	08018334 	.word	0x08018334
 800b034:	080182b8 	.word	0x080182b8
 800b038:	08025654 	.word	0x08025654

0800b03c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
	...

0800b04c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <netif_add+0x20>
 800b060:	4b23      	ldr	r3, [pc, #140]	; (800b0f0 <netif_add+0xa4>)
 800b062:	22fb      	movs	r2, #251	; 0xfb
 800b064:	4923      	ldr	r1, [pc, #140]	; (800b0f4 <netif_add+0xa8>)
 800b066:	4824      	ldr	r0, [pc, #144]	; (800b0f8 <netif_add+0xac>)
 800b068:	f00b fa30 	bl	80164cc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3320      	adds	r3, #32
 800b08a:	2204      	movs	r2, #4
 800b08c:	2100      	movs	r1, #0
 800b08e:	4618      	mov	r0, r3
 800b090:	f00b fa14 	bl	80164bc <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2203      	movs	r2, #3
 800b098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800b0a2:	4b16      	ldr	r3, [pc, #88]	; (800b0fc <netif_add+0xb0>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	b2d1      	uxtb	r1, r2
 800b0aa:	4a14      	ldr	r2, [pc, #80]	; (800b0fc <netif_add+0xb0>)
 800b0ac:	7011      	strb	r1, [r2, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6a3a      	ldr	r2, [r7, #32]
 800b0b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f000 f81f 	bl	800b104 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	4798      	blx	r3
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <netif_add+0x8a>
    return NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e007      	b.n	800b0e6 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <netif_add+0xb4>)
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b0de:	4a08      	ldr	r2, [pc, #32]	; (800b100 <netif_add+0xb4>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	08018350 	.word	0x08018350
 800b0f4:	08018384 	.word	0x08018384
 800b0f8:	0801839c 	.word	0x0801839c
 800b0fc:	200088d8 	.word	0x200088d8
 800b100:	2000f74c 	.word	0x2000f74c

0800b104 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
 800b110:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <netif_set_addr+0x1c>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10c      	bne.n	800b13a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b120:	68b9      	ldr	r1, [r7, #8]
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 f81a 	bl	800b15c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f000 f862 	bl	800b1f4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f000 f84a 	bl	800b1cc <netif_set_gw>
 800b138:	e00b      	b.n	800b152 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f859 	bl	800b1f4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 f841 	bl	800b1cc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 f805 	bl	800b15c <netif_set_ipaddr>
  }
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
	...

0800b15c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <netif_set_ipaddr+0x18>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e002      	b.n	800b17a <netif_set_ipaddr+0x1e>
 800b174:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <netif_set_ipaddr+0x6c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3304      	adds	r3, #4
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	429a      	cmp	r2, r3
 800b184:	d01c      	beq.n	800b1c0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3304      	adds	r3, #4
 800b18a:	f107 020c 	add.w	r2, r7, #12
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f002 fb45 	bl	800d820 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3304      	adds	r3, #4
 800b19a:	f107 020c 	add.w	r2, r7, #12
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f006 fe45 	bl	8011e30 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <netif_set_ipaddr+0x56>
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	e000      	b.n	800b1b4 <netif_set_ipaddr+0x58>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f861 	bl	800b282 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b1c0:	bf00      	nop
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	080256d8 	.word	0x080256d8

0800b1cc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <netif_set_gw+0x16>
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	e000      	b.n	800b1e4 <netif_set_gw+0x18>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <netif_set_netmask+0x16>
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	e000      	b.n	800b20c <netif_set_netmask+0x18>
 800b20a:	2300      	movs	r3, #0
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b224:	4a04      	ldr	r2, [pc, #16]	; (800b238 <netif_set_default+0x1c>)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	2000f750 	.word	0x2000f750

0800b23c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d113      	bne.n	800b27a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b258:	f043 0301 	orr.w	r3, r3, #1
 800b25c:	b2da      	uxtb	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b272:	2103      	movs	r1, #3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f804 	bl	800b282 <netif_issue_reports>
    }
  }
}
 800b27a:	bf00      	nop
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	460b      	mov	r3, r1
 800b28c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d011      	beq.n	800b2bc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3304      	adds	r3, #4
 800b29c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00c      	beq.n	800b2bc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2a8:	f003 0308 	and.w	r3, r3, #8
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d005      	beq.n	800b2bc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f009 fba8 	bl	8014a0c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d012      	beq.n	800b300 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f008 ff48 	bl	8014190 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b30e:	f00b f879 	bl	8016404 <sys_arch_protect>
 800b312:	6038      	str	r0, [r7, #0]
 800b314:	4b0f      	ldr	r3, [pc, #60]	; (800b354 <pbuf_free_ooseq+0x4c>)
 800b316:	2200      	movs	r2, #0
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	6838      	ldr	r0, [r7, #0]
 800b31c:	f00b f880 	bl	8016420 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <pbuf_free_ooseq+0x50>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	607b      	str	r3, [r7, #4]
 800b326:	e00f      	b.n	800b348 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d008      	beq.n	800b342 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b334:	4618      	mov	r0, r3
 800b336:	f001 fee0 	bl	800d0fa <tcp_segs_free>
      pcb->ooseq = NULL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b340:	e005      	b.n	800b34e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	607b      	str	r3, [r7, #4]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1ec      	bne.n	800b328 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000f754 	.word	0x2000f754
 800b358:	2000f75c 	.word	0x2000f75c

0800b35c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b364:	f7ff ffd0 	bl	800b308 <pbuf_free_ooseq>
}
 800b368:	bf00      	nop
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b376:	f00b f845 	bl	8016404 <sys_arch_protect>
 800b37a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b37c:	4b10      	ldr	r3, [pc, #64]	; (800b3c0 <pbuf_pool_is_empty+0x50>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <pbuf_pool_is_empty+0x50>)
 800b384:	2201      	movs	r2, #1
 800b386:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f00b f849 	bl	8016420 <sys_arch_unprotect>

  if (!queued) {
 800b38e:	78fb      	ldrb	r3, [r7, #3]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d110      	bne.n	800b3b6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b394:	2200      	movs	r2, #0
 800b396:	2100      	movs	r1, #0
 800b398:	480a      	ldr	r0, [pc, #40]	; (800b3c4 <pbuf_pool_is_empty+0x54>)
 800b39a:	f7fe faf9 	bl	8009990 <tcpip_callback_with_block>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d008      	beq.n	800b3b6 <pbuf_pool_is_empty+0x46>
 800b3a4:	f00b f82e 	bl	8016404 <sys_arch_protect>
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <pbuf_pool_is_empty+0x50>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f00b f835 	bl	8016420 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	2000f754 	.word	0x2000f754
 800b3c4:	0800b35d 	.word	0x0800b35d

0800b3c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	80bb      	strh	r3, [r7, #4]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d81c      	bhi.n	800b41a <pbuf_alloc+0x52>
 800b3e0:	a201      	add	r2, pc, #4	; (adr r2, 800b3e8 <pbuf_alloc+0x20>)
 800b3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e6:	bf00      	nop
 800b3e8:	0800b3fd 	.word	0x0800b3fd
 800b3ec:	0800b403 	.word	0x0800b403
 800b3f0:	0800b409 	.word	0x0800b409
 800b3f4:	0800b40f 	.word	0x0800b40f
 800b3f8:	0800b415 	.word	0x0800b415
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b3fc:	2336      	movs	r3, #54	; 0x36
 800b3fe:	82fb      	strh	r3, [r7, #22]
    break;
 800b400:	e014      	b.n	800b42c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b402:	2322      	movs	r3, #34	; 0x22
 800b404:	82fb      	strh	r3, [r7, #22]
    break;
 800b406:	e011      	b.n	800b42c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b408:	230e      	movs	r3, #14
 800b40a:	82fb      	strh	r3, [r7, #22]
    break;
 800b40c:	e00e      	b.n	800b42c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b40e:	2300      	movs	r3, #0
 800b410:	82fb      	strh	r3, [r7, #22]
    break;
 800b412:	e00b      	b.n	800b42c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	82fb      	strh	r3, [r7, #22]
    break;
 800b418:	e008      	b.n	800b42c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800b41a:	4ba5      	ldr	r3, [pc, #660]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b41c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800b420:	49a4      	ldr	r1, [pc, #656]	; (800b6b4 <pbuf_alloc+0x2ec>)
 800b422:	48a5      	ldr	r0, [pc, #660]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b424:	f00b f852 	bl	80164cc <iprintf>
    return NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	e15d      	b.n	800b6e8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800b42c:	79bb      	ldrb	r3, [r7, #6]
 800b42e:	2b03      	cmp	r3, #3
 800b430:	f200 8134 	bhi.w	800b69c <pbuf_alloc+0x2d4>
 800b434:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <pbuf_alloc+0x74>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b5dd 	.word	0x0800b5dd
 800b440:	0800b669 	.word	0x0800b669
 800b444:	0800b669 	.word	0x0800b669
 800b448:	0800b44d 	.word	0x0800b44d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b44c:	200c      	movs	r0, #12
 800b44e:	f7ff fd79 	bl	800af44 <memp_malloc>
 800b452:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d103      	bne.n	800b462 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800b45a:	f7ff ff89 	bl	800b370 <pbuf_pool_is_empty>
      return NULL;
 800b45e:	2300      	movs	r3, #0
 800b460:	e142      	b.n	800b6e8 <pbuf_alloc+0x320>
    }
    p->type = type;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	79ba      	ldrb	r2, [r7, #6]
 800b466:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b46e:	8afb      	ldrh	r3, [r7, #22]
 800b470:	3310      	adds	r3, #16
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	3303      	adds	r3, #3
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	461a      	mov	r2, r3
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d006      	beq.n	800b49c <pbuf_alloc+0xd4>
 800b48e:	4b88      	ldr	r3, [pc, #544]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b490:	f240 1229 	movw	r2, #297	; 0x129
 800b494:	4989      	ldr	r1, [pc, #548]	; (800b6bc <pbuf_alloc+0x2f4>)
 800b496:	4888      	ldr	r0, [pc, #544]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b498:	f00b f818 	bl	80164cc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	88ba      	ldrh	r2, [r7, #4]
 800b4a0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b4a2:	8afb      	ldrh	r3, [r7, #22]
 800b4a4:	3303      	adds	r3, #3
 800b4a6:	f023 0303 	bic.w	r3, r3, #3
 800b4aa:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800b4ae:	88bb      	ldrh	r3, [r7, #4]
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	bf28      	it	cs
 800b4b4:	4613      	movcs	r3, r2
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	8952      	ldrh	r2, [r2, #10]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d906      	bls.n	800b4de <pbuf_alloc+0x116>
 800b4d0:	4b77      	ldr	r3, [pc, #476]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b4d2:	f44f 7298 	mov.w	r2, #304	; 0x130
 800b4d6:	497a      	ldr	r1, [pc, #488]	; (800b6c0 <pbuf_alloc+0x2f8>)
 800b4d8:	4877      	ldr	r0, [pc, #476]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b4da:	f00a fff7 	bl	80164cc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b4de:	8afb      	ldrh	r3, [r7, #22]
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b4ea:	d106      	bne.n	800b4fa <pbuf_alloc+0x132>
 800b4ec:	4b70      	ldr	r3, [pc, #448]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b4ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b4f2:	4974      	ldr	r1, [pc, #464]	; (800b6c4 <pbuf_alloc+0x2fc>)
 800b4f4:	4870      	ldr	r0, [pc, #448]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b4f6:	f00a ffe9 	bl	80164cc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800b504:	88bb      	ldrh	r3, [r7, #4]
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	8952      	ldrh	r2, [r2, #10]
 800b50a:	1a9b      	subs	r3, r3, r2
 800b50c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b50e:	e061      	b.n	800b5d4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b510:	200c      	movs	r0, #12
 800b512:	f7ff fd17 	bl	800af44 <memp_malloc>
 800b516:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800b51e:	f7ff ff27 	bl	800b370 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800b522:	69f8      	ldr	r0, [r7, #28]
 800b524:	f000 fac2 	bl	800baac <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800b528:	2300      	movs	r3, #0
 800b52a:	e0dd      	b.n	800b6e8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	79ba      	ldrb	r2, [r7, #6]
 800b530:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b54a:	4293      	cmp	r3, r2
 800b54c:	dd06      	ble.n	800b55c <pbuf_alloc+0x194>
 800b54e:	4b58      	ldr	r3, [pc, #352]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b550:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800b554:	495c      	ldr	r1, [pc, #368]	; (800b6c8 <pbuf_alloc+0x300>)
 800b556:	4858      	ldr	r0, [pc, #352]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b558:	f00a ffb8 	bl	80164cc <iprintf>
      q->tot_len = (u16_t)rem_len;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	b29a      	uxth	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	b29b      	uxth	r3, r3
 800b568:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b56c:	bf28      	it	cs
 800b56e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800b572:	b29a      	uxth	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f103 0210 	add.w	r2, r3, #16
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f003 0303 	and.w	r3, r3, #3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <pbuf_alloc+0x1d4>
 800b58e:	4b48      	ldr	r3, [pc, #288]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b590:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800b594:	494d      	ldr	r1, [pc, #308]	; (800b6cc <pbuf_alloc+0x304>)
 800b596:	4848      	ldr	r0, [pc, #288]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b598:	f00a ff98 	bl	80164cc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	8952      	ldrh	r2, [r2, #10]
 800b5a4:	441a      	add	r2, r3
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d906      	bls.n	800b5be <pbuf_alloc+0x1f6>
 800b5b0:	4b3f      	ldr	r3, [pc, #252]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b5b2:	f240 1255 	movw	r2, #341	; 0x155
 800b5b6:	4942      	ldr	r1, [pc, #264]	; (800b6c0 <pbuf_alloc+0x2f8>)
 800b5b8:	483f      	ldr	r0, [pc, #252]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b5ba:	f00a ff87 	bl	80164cc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	895b      	ldrh	r3, [r3, #10]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	1a9b      	subs	r3, r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	dc9a      	bgt.n	800b510 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800b5da:	e07e      	b.n	800b6da <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800b5dc:	8afb      	ldrh	r3, [r7, #22]
 800b5de:	3313      	adds	r3, #19
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	88bb      	ldrh	r3, [r7, #4]
 800b5ea:	3303      	adds	r3, #3
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800b5f8:	897a      	ldrh	r2, [r7, #10]
 800b5fa:	88bb      	ldrh	r3, [r7, #4]
 800b5fc:	3303      	adds	r3, #3
 800b5fe:	f023 0303 	bic.w	r3, r3, #3
 800b602:	429a      	cmp	r2, r3
 800b604:	d201      	bcs.n	800b60a <pbuf_alloc+0x242>
        return NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	e06e      	b.n	800b6e8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fb29 	bl	800ac64 <mem_malloc>
 800b612:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <pbuf_alloc+0x256>
      return NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	e064      	b.n	800b6e8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b61e:	8afb      	ldrh	r3, [r7, #22]
 800b620:	3310      	adds	r3, #16
 800b622:	69fa      	ldr	r2, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	3303      	adds	r3, #3
 800b628:	f023 0303 	bic.w	r3, r3, #3
 800b62c:	461a      	mov	r2, r3
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	88ba      	ldrh	r2, [r7, #4]
 800b636:	811a      	strh	r2, [r3, #8]
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	891a      	ldrh	r2, [r3, #8]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	79ba      	ldrb	r2, [r7, #6]
 800b64a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f003 0303 	and.w	r3, r3, #3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d03f      	beq.n	800b6d8 <pbuf_alloc+0x310>
 800b658:	4b15      	ldr	r3, [pc, #84]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b65a:	f240 1277 	movw	r2, #375	; 0x177
 800b65e:	491c      	ldr	r1, [pc, #112]	; (800b6d0 <pbuf_alloc+0x308>)
 800b660:	4815      	ldr	r0, [pc, #84]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b662:	f00a ff33 	bl	80164cc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800b666:	e037      	b.n	800b6d8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b668:	200b      	movs	r0, #11
 800b66a:	f7ff fc6b 	bl	800af44 <memp_malloc>
 800b66e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	e036      	b.n	800b6e8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2200      	movs	r2, #0
 800b67e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	88ba      	ldrh	r2, [r7, #4]
 800b684:	811a      	strh	r2, [r3, #8]
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	891a      	ldrh	r2, [r3, #8]
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	2200      	movs	r2, #0
 800b692:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	79ba      	ldrb	r2, [r7, #6]
 800b698:	731a      	strb	r2, [r3, #12]
    break;
 800b69a:	e01e      	b.n	800b6da <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <pbuf_alloc+0x2e8>)
 800b69e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b6a2:	490c      	ldr	r1, [pc, #48]	; (800b6d4 <pbuf_alloc+0x30c>)
 800b6a4:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <pbuf_alloc+0x2f0>)
 800b6a6:	f00a ff11 	bl	80164cc <iprintf>
    return NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e01c      	b.n	800b6e8 <pbuf_alloc+0x320>
 800b6ae:	bf00      	nop
 800b6b0:	080183c4 	.word	0x080183c4
 800b6b4:	080183f4 	.word	0x080183f4
 800b6b8:	08018410 	.word	0x08018410
 800b6bc:	08018438 	.word	0x08018438
 800b6c0:	08018468 	.word	0x08018468
 800b6c4:	0801849c 	.word	0x0801849c
 800b6c8:	080184d0 	.word	0x080184d0
 800b6cc:	080184e4 	.word	0x080184e4
 800b6d0:	08018514 	.word	0x08018514
 800b6d4:	08018540 	.word	0x08018540
    break;
 800b6d8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3720      	adds	r7, #32
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	603b      	str	r3, [r7, #0]
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	71fb      	strb	r3, [r7, #7]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	80bb      	strh	r3, [r7, #4]
 800b700:	4613      	mov	r3, r2
 800b702:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	2b04      	cmp	r3, #4
 800b708:	d81b      	bhi.n	800b742 <pbuf_alloced_custom+0x52>
 800b70a:	a201      	add	r2, pc, #4	; (adr r2, 800b710 <pbuf_alloced_custom+0x20>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b725 	.word	0x0800b725
 800b714:	0800b72b 	.word	0x0800b72b
 800b718:	0800b731 	.word	0x0800b731
 800b71c:	0800b737 	.word	0x0800b737
 800b720:	0800b73d 	.word	0x0800b73d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b724:	2336      	movs	r3, #54	; 0x36
 800b726:	81fb      	strh	r3, [r7, #14]
    break;
 800b728:	e014      	b.n	800b754 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b72a:	2322      	movs	r3, #34	; 0x22
 800b72c:	81fb      	strh	r3, [r7, #14]
    break;
 800b72e:	e011      	b.n	800b754 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b730:	230e      	movs	r3, #14
 800b732:	81fb      	strh	r3, [r7, #14]
    break;
 800b734:	e00e      	b.n	800b754 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b736:	2300      	movs	r3, #0
 800b738:	81fb      	strh	r3, [r7, #14]
    break;
 800b73a:	e00b      	b.n	800b754 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800b73c:	2300      	movs	r3, #0
 800b73e:	81fb      	strh	r3, [r7, #14]
    break;
 800b740:	e008      	b.n	800b754 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800b742:	4b1d      	ldr	r3, [pc, #116]	; (800b7b8 <pbuf_alloced_custom+0xc8>)
 800b744:	f240 12c5 	movw	r2, #453	; 0x1c5
 800b748:	491c      	ldr	r1, [pc, #112]	; (800b7bc <pbuf_alloced_custom+0xcc>)
 800b74a:	481d      	ldr	r0, [pc, #116]	; (800b7c0 <pbuf_alloced_custom+0xd0>)
 800b74c:	f00a febe 	bl	80164cc <iprintf>
    return NULL;
 800b750:	2300      	movs	r3, #0
 800b752:	e02d      	b.n	800b7b0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b754:	89fb      	ldrh	r3, [r7, #14]
 800b756:	3303      	adds	r3, #3
 800b758:	f023 0203 	bic.w	r2, r3, #3
 800b75c:	88bb      	ldrh	r3, [r7, #4]
 800b75e:	441a      	add	r2, r3
 800b760:	8bbb      	ldrh	r3, [r7, #28]
 800b762:	429a      	cmp	r2, r3
 800b764:	d901      	bls.n	800b76a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	e022      	b.n	800b7b0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2200      	movs	r2, #0
 800b76e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b776:	89fb      	ldrh	r3, [r7, #14]
 800b778:	3303      	adds	r3, #3
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	69ba      	ldr	r2, [r7, #24]
 800b780:	441a      	add	r2, r3
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	e002      	b.n	800b78e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2202      	movs	r2, #2
 800b792:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	88ba      	ldrh	r2, [r7, #4]
 800b798:	811a      	strh	r2, [r3, #8]
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	891a      	ldrh	r2, [r3, #8]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	79ba      	ldrb	r2, [r7, #6]
 800b7a6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800b7ae:	683b      	ldr	r3, [r7, #0]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	080183c4 	.word	0x080183c4
 800b7bc:	0801855c 	.word	0x0801855c
 800b7c0:	08018410 	.word	0x08018410

0800b7c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d106      	bne.n	800b7e4 <pbuf_realloc+0x20>
 800b7d6:	4b4b      	ldr	r3, [pc, #300]	; (800b904 <pbuf_realloc+0x140>)
 800b7d8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b7dc:	494a      	ldr	r1, [pc, #296]	; (800b908 <pbuf_realloc+0x144>)
 800b7de:	484b      	ldr	r0, [pc, #300]	; (800b90c <pbuf_realloc+0x148>)
 800b7e0:	f00a fe74 	bl	80164cc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7b1b      	ldrb	r3, [r3, #12]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d012      	beq.n	800b812 <pbuf_realloc+0x4e>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	7b1b      	ldrb	r3, [r3, #12]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d00e      	beq.n	800b812 <pbuf_realloc+0x4e>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	7b1b      	ldrb	r3, [r3, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <pbuf_realloc+0x4e>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	7b1b      	ldrb	r3, [r3, #12]
 800b800:	2b02      	cmp	r3, #2
 800b802:	d006      	beq.n	800b812 <pbuf_realloc+0x4e>
 800b804:	4b3f      	ldr	r3, [pc, #252]	; (800b904 <pbuf_realloc+0x140>)
 800b806:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b80a:	4941      	ldr	r1, [pc, #260]	; (800b910 <pbuf_realloc+0x14c>)
 800b80c:	483f      	ldr	r0, [pc, #252]	; (800b90c <pbuf_realloc+0x148>)
 800b80e:	f00a fe5d 	bl	80164cc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	891b      	ldrh	r3, [r3, #8]
 800b816:	887a      	ldrh	r2, [r7, #2]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d26f      	bcs.n	800b8fc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800b81c:	887b      	ldrh	r3, [r7, #2]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	8912      	ldrh	r2, [r2, #8]
 800b822:	1a9b      	subs	r3, r3, r2
 800b824:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b826:	887b      	ldrh	r3, [r7, #2]
 800b828:	827b      	strh	r3, [r7, #18]
  q = p;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b82e:	e025      	b.n	800b87c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	895b      	ldrh	r3, [r3, #10]
 800b834:	8a7a      	ldrh	r2, [r7, #18]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b840:	4293      	cmp	r3, r2
 800b842:	dd06      	ble.n	800b852 <pbuf_realloc+0x8e>
 800b844:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <pbuf_realloc+0x140>)
 800b846:	f240 220b 	movw	r2, #523	; 0x20b
 800b84a:	4932      	ldr	r1, [pc, #200]	; (800b914 <pbuf_realloc+0x150>)
 800b84c:	482f      	ldr	r0, [pc, #188]	; (800b90c <pbuf_realloc+0x148>)
 800b84e:	f00a fe3d 	bl	80164cc <iprintf>
    q->tot_len += (u16_t)grow;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	891a      	ldrh	r2, [r3, #8]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	b29b      	uxth	r3, r3
 800b85a:	4413      	add	r3, r2
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <pbuf_realloc+0xb8>
 800b86e:	4b25      	ldr	r3, [pc, #148]	; (800b904 <pbuf_realloc+0x140>)
 800b870:	f240 220f 	movw	r2, #527	; 0x20f
 800b874:	4928      	ldr	r1, [pc, #160]	; (800b918 <pbuf_realloc+0x154>)
 800b876:	4825      	ldr	r0, [pc, #148]	; (800b90c <pbuf_realloc+0x148>)
 800b878:	f00a fe28 	bl	80164cc <iprintf>
  while (rem_len > q->len) {
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	895b      	ldrh	r3, [r3, #10]
 800b880:	8a7a      	ldrh	r2, [r7, #18]
 800b882:	429a      	cmp	r2, r3
 800b884:	d8d4      	bhi.n	800b830 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	7b1b      	ldrb	r3, [r3, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d122      	bne.n	800b8d4 <pbuf_realloc+0x110>
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	895b      	ldrh	r3, [r3, #10]
 800b892:	8a7a      	ldrh	r2, [r7, #18]
 800b894:	429a      	cmp	r2, r3
 800b896:	d01d      	beq.n	800b8d4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	7b5b      	ldrb	r3, [r3, #13]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d117      	bne.n	800b8d4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	8a7b      	ldrh	r3, [r7, #18]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6978      	ldr	r0, [r7, #20]
 800b8ba:	f7ff f8e9 	bl	800aa90 <mem_trim>
 800b8be:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <pbuf_realloc+0x110>
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	; (800b904 <pbuf_realloc+0x140>)
 800b8c8:	f240 221d 	movw	r2, #541	; 0x21d
 800b8cc:	4913      	ldr	r1, [pc, #76]	; (800b91c <pbuf_realloc+0x158>)
 800b8ce:	480f      	ldr	r0, [pc, #60]	; (800b90c <pbuf_realloc+0x148>)
 800b8d0:	f00a fdfc 	bl	80164cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	8a7a      	ldrh	r2, [r7, #18]
 800b8d8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	895a      	ldrh	r2, [r3, #10]
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f8dc 	bl	800baac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	e000      	b.n	800b8fe <pbuf_realloc+0x13a>
    return;
 800b8fc:	bf00      	nop

}
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	080183c4 	.word	0x080183c4
 800b908:	08018580 	.word	0x08018580
 800b90c:	08018410 	.word	0x08018410
 800b910:	08018598 	.word	0x08018598
 800b914:	080185b4 	.word	0x080185b4
 800b918:	080185c8 	.word	0x080185c8
 800b91c:	080185e0 	.word	0x080185e0

0800b920 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	807b      	strh	r3, [r7, #2]
 800b92c:	4613      	mov	r3, r2
 800b92e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <pbuf_header_impl+0x24>
 800b936:	4b46      	ldr	r3, [pc, #280]	; (800ba50 <pbuf_header_impl+0x130>)
 800b938:	f240 223f 	movw	r2, #575	; 0x23f
 800b93c:	4945      	ldr	r1, [pc, #276]	; (800ba54 <pbuf_header_impl+0x134>)
 800b93e:	4846      	ldr	r0, [pc, #280]	; (800ba58 <pbuf_header_impl+0x138>)
 800b940:	f00a fdc4 	bl	80164cc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800b944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <pbuf_header_impl+0x32>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <pbuf_header_impl+0x36>
    return 0;
 800b952:	2300      	movs	r3, #0
 800b954:	e078      	b.n	800ba48 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800b956:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	da10      	bge.n	800b980 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800b95e:	887b      	ldrh	r3, [r7, #2]
 800b960:	425b      	negs	r3, r3
 800b962:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	895b      	ldrh	r3, [r3, #10]
 800b968:	89fa      	ldrh	r2, [r7, #14]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d90a      	bls.n	800b984 <pbuf_header_impl+0x64>
 800b96e:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <pbuf_header_impl+0x130>)
 800b970:	f240 2247 	movw	r2, #583	; 0x247
 800b974:	4939      	ldr	r1, [pc, #228]	; (800ba5c <pbuf_header_impl+0x13c>)
 800b976:	4838      	ldr	r0, [pc, #224]	; (800ba58 <pbuf_header_impl+0x138>)
 800b978:	f00a fda8 	bl	80164cc <iprintf>
 800b97c:	2301      	movs	r3, #1
 800b97e:	e063      	b.n	800ba48 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800b980:	887b      	ldrh	r3, [r7, #2]
 800b982:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	7b1b      	ldrb	r3, [r3, #12]
 800b988:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800b990:	89bb      	ldrh	r3, [r7, #12]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <pbuf_header_impl+0x7c>
 800b996:	89bb      	ldrh	r3, [r7, #12]
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d112      	bne.n	800b9c2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9a4:	425b      	negs	r3, r3
 800b9a6:	441a      	add	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3310      	adds	r3, #16
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d238      	bcs.n	800ba2a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e042      	b.n	800ba48 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800b9c2:	89bb      	ldrh	r3, [r7, #12]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d002      	beq.n	800b9ce <pbuf_header_impl+0xae>
 800b9c8:	89bb      	ldrh	r3, [r7, #12]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d124      	bne.n	800ba18 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b9ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	da0d      	bge.n	800b9f2 <pbuf_header_impl+0xd2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	895b      	ldrh	r3, [r3, #10]
 800b9da:	89fa      	ldrh	r2, [r7, #14]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d808      	bhi.n	800b9f2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9e8:	425b      	negs	r3, r3
 800b9ea:	441a      	add	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	605a      	str	r2, [r3, #4]
 800b9f0:	e011      	b.n	800ba16 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800b9f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd0b      	ble.n	800ba12 <pbuf_header_impl+0xf2>
 800b9fa:	787b      	ldrb	r3, [r7, #1]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d008      	beq.n	800ba12 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba08:	425b      	negs	r3, r3
 800ba0a:	441a      	add	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	605a      	str	r2, [r3, #4]
 800ba10:	e001      	b.n	800ba16 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e018      	b.n	800ba48 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800ba16:	e008      	b.n	800ba2a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800ba18:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <pbuf_header_impl+0x130>)
 800ba1a:	f240 2277 	movw	r2, #631	; 0x277
 800ba1e:	4910      	ldr	r1, [pc, #64]	; (800ba60 <pbuf_header_impl+0x140>)
 800ba20:	480d      	ldr	r0, [pc, #52]	; (800ba58 <pbuf_header_impl+0x138>)
 800ba22:	f00a fd53 	bl	80164cc <iprintf>
    return 1;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e00e      	b.n	800ba48 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	895a      	ldrh	r2, [r3, #10]
 800ba2e:	887b      	ldrh	r3, [r7, #2]
 800ba30:	4413      	add	r3, r2
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	891a      	ldrh	r2, [r3, #8]
 800ba3c:	887b      	ldrh	r3, [r7, #2]
 800ba3e:	4413      	add	r3, r2
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	080183c4 	.word	0x080183c4
 800ba54:	080185fc 	.word	0x080185fc
 800ba58:	08018410 	.word	0x08018410
 800ba5c:	08018608 	.word	0x08018608
 800ba60:	08018628 	.word	0x08018628

0800ba64 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800ba70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba74:	2200      	movs	r2, #0
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff ff51 	bl	800b920 <pbuf_header_impl>
 800ba7e:	4603      	mov	r3, r0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	460b      	mov	r3, r1
 800ba92:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800ba94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff ff3f 	bl	800b920 <pbuf_header_impl>
 800baa2:	4603      	mov	r3, r0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10b      	bne.n	800bad2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d106      	bne.n	800bace <pbuf_free+0x22>
 800bac0:	4b41      	ldr	r3, [pc, #260]	; (800bbc8 <pbuf_free+0x11c>)
 800bac2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bac6:	4941      	ldr	r1, [pc, #260]	; (800bbcc <pbuf_free+0x120>)
 800bac8:	4841      	ldr	r0, [pc, #260]	; (800bbd0 <pbuf_free+0x124>)
 800baca:	f00a fcff 	bl	80164cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	e076      	b.n	800bbc0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	7b1b      	ldrb	r3, [r3, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d012      	beq.n	800bb00 <pbuf_free+0x54>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	7b1b      	ldrb	r3, [r3, #12]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d00e      	beq.n	800bb00 <pbuf_free+0x54>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	7b1b      	ldrb	r3, [r3, #12]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d00a      	beq.n	800bb00 <pbuf_free+0x54>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	7b1b      	ldrb	r3, [r3, #12]
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d006      	beq.n	800bb00 <pbuf_free+0x54>
 800baf2:	4b35      	ldr	r3, [pc, #212]	; (800bbc8 <pbuf_free+0x11c>)
 800baf4:	f240 22de 	movw	r2, #734	; 0x2de
 800baf8:	4936      	ldr	r1, [pc, #216]	; (800bbd4 <pbuf_free+0x128>)
 800bafa:	4835      	ldr	r0, [pc, #212]	; (800bbd0 <pbuf_free+0x124>)
 800bafc:	f00a fce6 	bl	80164cc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb04:	e058      	b.n	800bbb8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb06:	f00a fc7d 	bl	8016404 <sys_arch_protect>
 800bb0a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	89db      	ldrh	r3, [r3, #14]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <pbuf_free+0x76>
 800bb14:	4b2c      	ldr	r3, [pc, #176]	; (800bbc8 <pbuf_free+0x11c>)
 800bb16:	f240 22eb 	movw	r2, #747	; 0x2eb
 800bb1a:	492f      	ldr	r1, [pc, #188]	; (800bbd8 <pbuf_free+0x12c>)
 800bb1c:	482c      	ldr	r0, [pc, #176]	; (800bbd0 <pbuf_free+0x124>)
 800bb1e:	f00a fcd5 	bl	80164cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	89db      	ldrh	r3, [r3, #14]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	81da      	strh	r2, [r3, #14]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	89db      	ldrh	r3, [r3, #14]
 800bb32:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800bb34:	69b8      	ldr	r0, [r7, #24]
 800bb36:	f00a fc73 	bl	8016420 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb3a:	8afb      	ldrh	r3, [r7, #22]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d139      	bne.n	800bbb4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7b1b      	ldrb	r3, [r3, #12]
 800bb4a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	7b5b      	ldrb	r3, [r3, #13]
 800bb50:	f003 0302 	and.w	r3, r3, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d011      	beq.n	800bb7c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d106      	bne.n	800bb72 <pbuf_free+0xc6>
 800bb64:	4b18      	ldr	r3, [pc, #96]	; (800bbc8 <pbuf_free+0x11c>)
 800bb66:	f240 22f9 	movw	r2, #761	; 0x2f9
 800bb6a:	491c      	ldr	r1, [pc, #112]	; (800bbdc <pbuf_free+0x130>)
 800bb6c:	4818      	ldr	r0, [pc, #96]	; (800bbd0 <pbuf_free+0x124>)
 800bb6e:	f00a fcad 	bl	80164cc <iprintf>
        pc->custom_free_function(p);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
 800bb7a:	e015      	b.n	800bba8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800bb7c:	89fb      	ldrh	r3, [r7, #14]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d104      	bne.n	800bb8c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	200c      	movs	r0, #12
 800bb86:	f7ff fa2f 	bl	800afe8 <memp_free>
 800bb8a:	e00d      	b.n	800bba8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800bb8c:	89fb      	ldrh	r3, [r7, #14]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d002      	beq.n	800bb98 <pbuf_free+0xec>
 800bb92:	89fb      	ldrh	r3, [r7, #14]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d104      	bne.n	800bba2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	200b      	movs	r0, #11
 800bb9c:	f7ff fa24 	bl	800afe8 <memp_free>
 800bba0:	e002      	b.n	800bba8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7fe ff06 	bl	800a9b4 <mem_free>
        }
      }
      count++;
 800bba8:	7ffb      	ldrb	r3, [r7, #31]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	e001      	b.n	800bbb8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1a3      	bne.n	800bb06 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bbbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3720      	adds	r7, #32
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	080183c4 	.word	0x080183c4
 800bbcc:	080185fc 	.word	0x080185fc
 800bbd0:	08018410 	.word	0x08018410
 800bbd4:	08018638 	.word	0x08018638
 800bbd8:	08018650 	.word	0x08018650
 800bbdc:	08018668 	.word	0x08018668

0800bbe0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b085      	sub	sp, #20
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bbec:	e005      	b.n	800bbfa <pbuf_clen+0x1a>
    ++len;
 800bbee:	89fb      	ldrh	r3, [r7, #14]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1f6      	bne.n	800bbee <pbuf_clen+0xe>
  }
  return len;
 800bc00:	89fb      	ldrh	r3, [r7, #14]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
	...

0800bc10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d016      	beq.n	800bc4c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800bc1e:	f00a fbf1 	bl	8016404 <sys_arch_protect>
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	89db      	ldrh	r3, [r3, #14]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	81da      	strh	r2, [r3, #14]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f00a fbf5 	bl	8016420 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	89db      	ldrh	r3, [r3, #14]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <pbuf_ref+0x3c>
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <pbuf_ref+0x44>)
 800bc40:	f240 3239 	movw	r2, #825	; 0x339
 800bc44:	4904      	ldr	r1, [pc, #16]	; (800bc58 <pbuf_ref+0x48>)
 800bc46:	4805      	ldr	r0, [pc, #20]	; (800bc5c <pbuf_ref+0x4c>)
 800bc48:	f00a fc40 	bl	80164cc <iprintf>
  }
}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	080183c4 	.word	0x080183c4
 800bc58:	0801868c 	.word	0x0801868c
 800bc5c:	08018410 	.word	0x08018410

0800bc60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <pbuf_cat+0x16>
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d107      	bne.n	800bc86 <pbuf_cat+0x26>
 800bc76:	4b20      	ldr	r3, [pc, #128]	; (800bcf8 <pbuf_cat+0x98>)
 800bc78:	f240 324d 	movw	r2, #845	; 0x34d
 800bc7c:	491f      	ldr	r1, [pc, #124]	; (800bcfc <pbuf_cat+0x9c>)
 800bc7e:	4820      	ldr	r0, [pc, #128]	; (800bd00 <pbuf_cat+0xa0>)
 800bc80:	f00a fc24 	bl	80164cc <iprintf>
 800bc84:	e034      	b.n	800bcf0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	e00a      	b.n	800bca2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	891a      	ldrh	r2, [r3, #8]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	891b      	ldrh	r3, [r3, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1f0      	bne.n	800bc8c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	891a      	ldrh	r2, [r3, #8]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	895b      	ldrh	r3, [r3, #10]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d006      	beq.n	800bcc4 <pbuf_cat+0x64>
 800bcb6:	4b10      	ldr	r3, [pc, #64]	; (800bcf8 <pbuf_cat+0x98>)
 800bcb8:	f240 3255 	movw	r2, #853	; 0x355
 800bcbc:	4911      	ldr	r1, [pc, #68]	; (800bd04 <pbuf_cat+0xa4>)
 800bcbe:	4810      	ldr	r0, [pc, #64]	; (800bd00 <pbuf_cat+0xa0>)
 800bcc0:	f00a fc04 	bl	80164cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d006      	beq.n	800bcda <pbuf_cat+0x7a>
 800bccc:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <pbuf_cat+0x98>)
 800bcce:	f240 3256 	movw	r2, #854	; 0x356
 800bcd2:	490d      	ldr	r1, [pc, #52]	; (800bd08 <pbuf_cat+0xa8>)
 800bcd4:	480a      	ldr	r0, [pc, #40]	; (800bd00 <pbuf_cat+0xa0>)
 800bcd6:	f00a fbf9 	bl	80164cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	891a      	ldrh	r2, [r3, #8]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	891b      	ldrh	r3, [r3, #8]
 800bce2:	4413      	add	r3, r2
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	080183c4 	.word	0x080183c4
 800bcfc:	080186a0 	.word	0x080186a0
 800bd00:	08018410 	.word	0x08018410
 800bd04:	080186d8 	.word	0x080186d8
 800bd08:	08018708 	.word	0x08018708

0800bd0c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff ffa1 	bl	800bc60 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bd1e:	6838      	ldr	r0, [r7, #0]
 800bd20:	f7ff ff76 	bl	800bc10 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800bd36:	2300      	movs	r3, #0
 800bd38:	81fb      	strh	r3, [r7, #14]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d008      	beq.n	800bd56 <pbuf_copy+0x2a>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d005      	beq.n	800bd56 <pbuf_copy+0x2a>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	891a      	ldrh	r2, [r3, #8]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	891b      	ldrh	r3, [r3, #8]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d209      	bcs.n	800bd6a <pbuf_copy+0x3e>
 800bd56:	4b54      	ldr	r3, [pc, #336]	; (800bea8 <pbuf_copy+0x17c>)
 800bd58:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bd5c:	4953      	ldr	r1, [pc, #332]	; (800beac <pbuf_copy+0x180>)
 800bd5e:	4854      	ldr	r0, [pc, #336]	; (800beb0 <pbuf_copy+0x184>)
 800bd60:	f00a fbb4 	bl	80164cc <iprintf>
 800bd64:	f06f 030f 	mvn.w	r3, #15
 800bd68:	e099      	b.n	800be9e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	895b      	ldrh	r3, [r3, #10]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	89fb      	ldrh	r3, [r7, #14]
 800bd72:	1ad2      	subs	r2, r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	895b      	ldrh	r3, [r3, #10]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	89bb      	ldrh	r3, [r7, #12]
 800bd7c:	1acb      	subs	r3, r1, r3
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	db05      	blt.n	800bd8e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	895a      	ldrh	r2, [r3, #10]
 800bd86:	89bb      	ldrh	r3, [r7, #12]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	817b      	strh	r3, [r7, #10]
 800bd8c:	e004      	b.n	800bd98 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	895a      	ldrh	r2, [r3, #10]
 800bd92:	89fb      	ldrh	r3, [r7, #14]
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	89fb      	ldrh	r3, [r7, #14]
 800bd9e:	18d0      	adds	r0, r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	89bb      	ldrh	r3, [r7, #12]
 800bda6:	4413      	add	r3, r2
 800bda8:	897a      	ldrh	r2, [r7, #10]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f00a fb7b 	bl	80164a6 <memcpy>
    offset_to += len;
 800bdb0:	89fa      	ldrh	r2, [r7, #14]
 800bdb2:	897b      	ldrh	r3, [r7, #10]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800bdb8:	89ba      	ldrh	r2, [r7, #12]
 800bdba:	897b      	ldrh	r3, [r7, #10]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	895b      	ldrh	r3, [r3, #10]
 800bdc4:	89fa      	ldrh	r2, [r7, #14]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d906      	bls.n	800bdd8 <pbuf_copy+0xac>
 800bdca:	4b37      	ldr	r3, [pc, #220]	; (800bea8 <pbuf_copy+0x17c>)
 800bdcc:	f240 32cd 	movw	r2, #973	; 0x3cd
 800bdd0:	4938      	ldr	r1, [pc, #224]	; (800beb4 <pbuf_copy+0x188>)
 800bdd2:	4837      	ldr	r0, [pc, #220]	; (800beb0 <pbuf_copy+0x184>)
 800bdd4:	f00a fb7a 	bl	80164cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	895b      	ldrh	r3, [r3, #10]
 800bddc:	89ba      	ldrh	r2, [r7, #12]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d906      	bls.n	800bdf0 <pbuf_copy+0xc4>
 800bde2:	4b31      	ldr	r3, [pc, #196]	; (800bea8 <pbuf_copy+0x17c>)
 800bde4:	f240 32ce 	movw	r2, #974	; 0x3ce
 800bde8:	4933      	ldr	r1, [pc, #204]	; (800beb8 <pbuf_copy+0x18c>)
 800bdea:	4831      	ldr	r0, [pc, #196]	; (800beb0 <pbuf_copy+0x184>)
 800bdec:	f00a fb6e 	bl	80164cc <iprintf>
    if (offset_from >= p_from->len) {
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	895b      	ldrh	r3, [r3, #10]
 800bdf4:	89ba      	ldrh	r2, [r7, #12]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d304      	bcc.n	800be04 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	895b      	ldrh	r3, [r3, #10]
 800be08:	89fa      	ldrh	r2, [r7, #14]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d114      	bne.n	800be38 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d10c      	bne.n	800be38 <pbuf_copy+0x10c>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d009      	beq.n	800be38 <pbuf_copy+0x10c>
 800be24:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <pbuf_copy+0x17c>)
 800be26:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800be2a:	4924      	ldr	r1, [pc, #144]	; (800bebc <pbuf_copy+0x190>)
 800be2c:	4820      	ldr	r0, [pc, #128]	; (800beb0 <pbuf_copy+0x184>)
 800be2e:	f00a fb4d 	bl	80164cc <iprintf>
 800be32:	f06f 030f 	mvn.w	r3, #15
 800be36:	e032      	b.n	800be9e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d013      	beq.n	800be66 <pbuf_copy+0x13a>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	895a      	ldrh	r2, [r3, #10]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	891b      	ldrh	r3, [r3, #8]
 800be46:	429a      	cmp	r2, r3
 800be48:	d10d      	bne.n	800be66 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <pbuf_copy+0x13a>
 800be52:	4b15      	ldr	r3, [pc, #84]	; (800bea8 <pbuf_copy+0x17c>)
 800be54:	f240 32de 	movw	r2, #990	; 0x3de
 800be58:	4919      	ldr	r1, [pc, #100]	; (800bec0 <pbuf_copy+0x194>)
 800be5a:	4815      	ldr	r0, [pc, #84]	; (800beb0 <pbuf_copy+0x184>)
 800be5c:	f00a fb36 	bl	80164cc <iprintf>
 800be60:	f06f 0305 	mvn.w	r3, #5
 800be64:	e01b      	b.n	800be9e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d013      	beq.n	800be94 <pbuf_copy+0x168>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	895a      	ldrh	r2, [r3, #10]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	891b      	ldrh	r3, [r3, #8]
 800be74:	429a      	cmp	r2, r3
 800be76:	d10d      	bne.n	800be94 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d009      	beq.n	800be94 <pbuf_copy+0x168>
 800be80:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <pbuf_copy+0x17c>)
 800be82:	f240 32e3 	movw	r2, #995	; 0x3e3
 800be86:	490e      	ldr	r1, [pc, #56]	; (800bec0 <pbuf_copy+0x194>)
 800be88:	4809      	ldr	r0, [pc, #36]	; (800beb0 <pbuf_copy+0x184>)
 800be8a:	f00a fb1f 	bl	80164cc <iprintf>
 800be8e:	f06f 0305 	mvn.w	r3, #5
 800be92:	e004      	b.n	800be9e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f47f af67 	bne.w	800bd6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	080183c4 	.word	0x080183c4
 800beac:	08018754 	.word	0x08018754
 800beb0:	08018410 	.word	0x08018410
 800beb4:	08018784 	.word	0x08018784
 800beb8:	0801879c 	.word	0x0801879c
 800bebc:	080187b8 	.word	0x080187b8
 800bec0:	080187c8 	.word	0x080187c8

0800bec4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	4611      	mov	r1, r2
 800bed0:	461a      	mov	r2, r3
 800bed2:	460b      	mov	r3, r1
 800bed4:	80fb      	strh	r3, [r7, #6]
 800bed6:	4613      	mov	r3, r2
 800bed8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d108      	bne.n	800bef6 <pbuf_copy_partial+0x32>
 800bee4:	4b30      	ldr	r3, [pc, #192]	; (800bfa8 <pbuf_copy_partial+0xe4>)
 800bee6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800beea:	4930      	ldr	r1, [pc, #192]	; (800bfac <pbuf_copy_partial+0xe8>)
 800beec:	4830      	ldr	r0, [pc, #192]	; (800bfb0 <pbuf_copy_partial+0xec>)
 800beee:	f00a faed 	bl	80164cc <iprintf>
 800bef2:	2300      	movs	r3, #0
 800bef4:	e054      	b.n	800bfa0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d108      	bne.n	800bf0e <pbuf_copy_partial+0x4a>
 800befc:	4b2a      	ldr	r3, [pc, #168]	; (800bfa8 <pbuf_copy_partial+0xe4>)
 800befe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bf02:	492c      	ldr	r1, [pc, #176]	; (800bfb4 <pbuf_copy_partial+0xf0>)
 800bf04:	482a      	ldr	r0, [pc, #168]	; (800bfb0 <pbuf_copy_partial+0xec>)
 800bf06:	f00a fae1 	bl	80164cc <iprintf>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e048      	b.n	800bfa0 <pbuf_copy_partial+0xdc>

  left = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <pbuf_copy_partial+0x5a>
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <pbuf_copy_partial+0x5e>
    return 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e03e      	b.n	800bfa0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	e034      	b.n	800bf92 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800bf28:	88bb      	ldrh	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <pbuf_copy_partial+0x80>
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	895b      	ldrh	r3, [r3, #10]
 800bf32:	88ba      	ldrh	r2, [r7, #4]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d305      	bcc.n	800bf44 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	895b      	ldrh	r3, [r3, #10]
 800bf3c:	88ba      	ldrh	r2, [r7, #4]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	80bb      	strh	r3, [r7, #4]
 800bf42:	e023      	b.n	800bf8c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	895a      	ldrh	r2, [r3, #10]
 800bf48:	88bb      	ldrh	r3, [r7, #4]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf4e:	8b3a      	ldrh	r2, [r7, #24]
 800bf50:	88fb      	ldrh	r3, [r7, #6]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d901      	bls.n	800bf5a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800bf56:	88fb      	ldrh	r3, [r7, #6]
 800bf58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800bf5a:	8b7b      	ldrh	r3, [r7, #26]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	18d0      	adds	r0, r2, r3
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	88bb      	ldrh	r3, [r7, #4]
 800bf66:	4413      	add	r3, r2
 800bf68:	8b3a      	ldrh	r2, [r7, #24]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	f00a fa9b 	bl	80164a6 <memcpy>
      copied_total += buf_copy_len;
 800bf70:	8afa      	ldrh	r2, [r7, #22]
 800bf72:	8b3b      	ldrh	r3, [r7, #24]
 800bf74:	4413      	add	r3, r2
 800bf76:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800bf78:	8b7a      	ldrh	r2, [r7, #26]
 800bf7a:	8b3b      	ldrh	r3, [r7, #24]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800bf80:	88fa      	ldrh	r2, [r7, #6]
 800bf82:	8b3b      	ldrh	r3, [r7, #24]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	88fb      	ldrh	r3, [r7, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <pbuf_copy_partial+0xda>
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1c4      	bne.n	800bf28 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800bf9e:	8afb      	ldrh	r3, [r7, #22]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3720      	adds	r7, #32
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	080183c4 	.word	0x080183c4
 800bfac:	080187f4 	.word	0x080187f4
 800bfb0:	08018410 	.word	0x08018410
 800bfb4:	08018814 	.word	0x08018814

0800bfb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800bfbc:	bf00      	nop
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bfcc:	f000 ffc8 	bl	800cf60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <tcp_tmr+0x28>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <tcp_tmr+0x28>)
 800bfda:	701a      	strb	r2, [r3, #0]
 800bfdc:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <tcp_tmr+0x28>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d001      	beq.n	800bfec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bfe8:	f000 fcfa 	bl	800c9e0 <tcp_slowtmr>
  }
}
 800bfec:	bf00      	nop
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	200088d9 	.word	0x200088d9

0800bff4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e00a      	b.n	800c01a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d102      	bne.n	800c014 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1f1      	bne.n	800c004 <tcp_remove_listener+0x10>
      }
   }
}
 800c020:	bf00      	nop
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d105      	bne.n	800c046 <tcp_listen_closed+0x1a>
 800c03a:	4b13      	ldr	r3, [pc, #76]	; (800c088 <tcp_listen_closed+0x5c>)
 800c03c:	22c0      	movs	r2, #192	; 0xc0
 800c03e:	4913      	ldr	r1, [pc, #76]	; (800c08c <tcp_listen_closed+0x60>)
 800c040:	4813      	ldr	r0, [pc, #76]	; (800c090 <tcp_listen_closed+0x64>)
 800c042:	f00a fa43 	bl	80164cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	7d1b      	ldrb	r3, [r3, #20]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d005      	beq.n	800c05a <tcp_listen_closed+0x2e>
 800c04e:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <tcp_listen_closed+0x5c>)
 800c050:	22c1      	movs	r2, #193	; 0xc1
 800c052:	4910      	ldr	r1, [pc, #64]	; (800c094 <tcp_listen_closed+0x68>)
 800c054:	480e      	ldr	r0, [pc, #56]	; (800c090 <tcp_listen_closed+0x64>)
 800c056:	f00a fa39 	bl	80164cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c05a:	2301      	movs	r3, #1
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	e00b      	b.n	800c078 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c060:	4a0d      	ldr	r2, [pc, #52]	; (800c098 <tcp_listen_closed+0x6c>)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff ffc1 	bl	800bff4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3301      	adds	r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d9f0      	bls.n	800c060 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	08018948 	.word	0x08018948
 800c08c:	08018978 	.word	0x08018978
 800c090:	08018984 	.word	0x08018984
 800c094:	080189ac 	.word	0x080189ac
 800c098:	080256a0 	.word	0x080256a0

0800c09c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c09c:	b5b0      	push	{r4, r5, r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c0a8:	78fb      	ldrb	r3, [r7, #3]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d075      	beq.n	800c19a <tcp_close_shutdown+0xfe>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	7d1b      	ldrb	r3, [r3, #20]
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d003      	beq.n	800c0be <tcp_close_shutdown+0x22>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ba:	2b07      	cmp	r3, #7
 800c0bc:	d16d      	bne.n	800c19a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d104      	bne.n	800c0d0 <tcp_close_shutdown+0x34>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c0ce:	d064      	beq.n	800c19a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7e9b      	ldrb	r3, [r3, #26]
 800c0d4:	f003 0310 	and.w	r3, r3, #16
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <tcp_close_shutdown+0x4e>
 800c0dc:	4b59      	ldr	r3, [pc, #356]	; (800c244 <tcp_close_shutdown+0x1a8>)
 800c0de:	f240 120f 	movw	r2, #271	; 0x10f
 800c0e2:	4959      	ldr	r1, [pc, #356]	; (800c248 <tcp_close_shutdown+0x1ac>)
 800c0e4:	4859      	ldr	r0, [pc, #356]	; (800c24c <tcp_close_shutdown+0x1b0>)
 800c0e6:	f00a f9f1 	bl	80164cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c0f2:	687c      	ldr	r4, [r7, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	1d1d      	adds	r5, r3, #4
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8adb      	ldrh	r3, [r3, #22]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	8b12      	ldrh	r2, [r2, #24]
 800c100:	9201      	str	r2, [sp, #4]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	462b      	mov	r3, r5
 800c106:	4622      	mov	r2, r4
 800c108:	f004 ff3a 	bl	8010f80 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 fa6b 	bl	800d5e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c112:	4b4f      	ldr	r3, [pc, #316]	; (800c250 <tcp_close_shutdown+0x1b4>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d105      	bne.n	800c128 <tcp_close_shutdown+0x8c>
 800c11c:	4b4c      	ldr	r3, [pc, #304]	; (800c250 <tcp_close_shutdown+0x1b4>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	4a4b      	ldr	r2, [pc, #300]	; (800c250 <tcp_close_shutdown+0x1b4>)
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	e013      	b.n	800c150 <tcp_close_shutdown+0xb4>
 800c128:	4b49      	ldr	r3, [pc, #292]	; (800c250 <tcp_close_shutdown+0x1b4>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e00c      	b.n	800c14a <tcp_close_shutdown+0xae>
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	d104      	bne.n	800c144 <tcp_close_shutdown+0xa8>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	60da      	str	r2, [r3, #12]
 800c142:	e005      	b.n	800c150 <tcp_close_shutdown+0xb4>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1ef      	bne.n	800c130 <tcp_close_shutdown+0x94>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	60da      	str	r2, [r3, #12]
 800c156:	4b3f      	ldr	r3, [pc, #252]	; (800c254 <tcp_close_shutdown+0x1b8>)
 800c158:	2201      	movs	r2, #1
 800c15a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7d1b      	ldrb	r3, [r3, #20]
 800c160:	2b04      	cmp	r3, #4
 800c162:	d10c      	bne.n	800c17e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	220a      	movs	r2, #10
 800c168:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c16a:	4b3b      	ldr	r3, [pc, #236]	; (800c258 <tcp_close_shutdown+0x1bc>)
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	60da      	str	r2, [r3, #12]
 800c172:	4a39      	ldr	r2, [pc, #228]	; (800c258 <tcp_close_shutdown+0x1bc>)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	f005 f952 	bl	8011420 <tcp_timer_needed>
 800c17c:	e00b      	b.n	800c196 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800c17e:	4b37      	ldr	r3, [pc, #220]	; (800c25c <tcp_close_shutdown+0x1c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	429a      	cmp	r2, r3
 800c186:	d102      	bne.n	800c18e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800c188:	f003 fd92 	bl	800fcb0 <tcp_trigger_input_pcb_close>
 800c18c:	e003      	b.n	800c196 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	2001      	movs	r0, #1
 800c192:	f7fe ff29 	bl	800afe8 <memp_free>
        }
      }
      return ERR_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	e050      	b.n	800c23c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7d1b      	ldrb	r3, [r3, #20]
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d02e      	beq.n	800c200 <tcp_close_shutdown+0x164>
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d038      	beq.n	800c218 <tcp_close_shutdown+0x17c>
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d142      	bne.n	800c230 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	8adb      	ldrh	r3, [r3, #22]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d021      	beq.n	800c1f6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c1b2:	4b2b      	ldr	r3, [pc, #172]	; (800c260 <tcp_close_shutdown+0x1c4>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d105      	bne.n	800c1c8 <tcp_close_shutdown+0x12c>
 800c1bc:	4b28      	ldr	r3, [pc, #160]	; (800c260 <tcp_close_shutdown+0x1c4>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	4a27      	ldr	r2, [pc, #156]	; (800c260 <tcp_close_shutdown+0x1c4>)
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	e013      	b.n	800c1f0 <tcp_close_shutdown+0x154>
 800c1c8:	4b25      	ldr	r3, [pc, #148]	; (800c260 <tcp_close_shutdown+0x1c4>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60bb      	str	r3, [r7, #8]
 800c1ce:	e00c      	b.n	800c1ea <tcp_close_shutdown+0x14e>
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d104      	bne.n	800c1e4 <tcp_close_shutdown+0x148>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68da      	ldr	r2, [r3, #12]
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	60da      	str	r2, [r3, #12]
 800c1e2:	e005      	b.n	800c1f0 <tcp_close_shutdown+0x154>
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	60bb      	str	r3, [r7, #8]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1ef      	bne.n	800c1d0 <tcp_close_shutdown+0x134>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	2001      	movs	r0, #1
 800c1fa:	f7fe fef5 	bl	800afe8 <memp_free>
    break;
 800c1fe:	e01c      	b.n	800c23a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff ff13 	bl	800c02c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c206:	6879      	ldr	r1, [r7, #4]
 800c208:	4816      	ldr	r0, [pc, #88]	; (800c264 <tcp_close_shutdown+0x1c8>)
 800c20a:	f001 fa2f 	bl	800d66c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	2002      	movs	r0, #2
 800c212:	f7fe fee9 	bl	800afe8 <memp_free>
    break;
 800c216:	e010      	b.n	800c23a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c218:	6879      	ldr	r1, [r7, #4]
 800c21a:	480d      	ldr	r0, [pc, #52]	; (800c250 <tcp_close_shutdown+0x1b4>)
 800c21c:	f001 fa26 	bl	800d66c <tcp_pcb_remove>
 800c220:	4b0c      	ldr	r3, [pc, #48]	; (800c254 <tcp_close_shutdown+0x1b8>)
 800c222:	2201      	movs	r2, #1
 800c224:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	2001      	movs	r0, #1
 800c22a:	f7fe fedd 	bl	800afe8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c22e:	e004      	b.n	800c23a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f819 	bl	800c268 <tcp_close_shutdown_fin>
 800c236:	4603      	mov	r3, r0
 800c238:	e000      	b.n	800c23c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bdb0      	pop	{r4, r5, r7, pc}
 800c244:	08018948 	.word	0x08018948
 800c248:	080189c4 	.word	0x080189c4
 800c24c:	08018984 	.word	0x08018984
 800c250:	2000f75c 	.word	0x2000f75c
 800c254:	2000f758 	.word	0x2000f758
 800c258:	2000f76c 	.word	0x2000f76c
 800c25c:	2000f770 	.word	0x2000f770
 800c260:	2000f768 	.word	0x2000f768
 800c264:	2000f764 	.word	0x2000f764

0800c268 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d106      	bne.n	800c284 <tcp_close_shutdown_fin+0x1c>
 800c276:	4b2c      	ldr	r3, [pc, #176]	; (800c328 <tcp_close_shutdown_fin+0xc0>)
 800c278:	f240 124d 	movw	r2, #333	; 0x14d
 800c27c:	492b      	ldr	r1, [pc, #172]	; (800c32c <tcp_close_shutdown_fin+0xc4>)
 800c27e:	482c      	ldr	r0, [pc, #176]	; (800c330 <tcp_close_shutdown_fin+0xc8>)
 800c280:	f00a f924 	bl	80164cc <iprintf>

  switch (pcb->state) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7d1b      	ldrb	r3, [r3, #20]
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d010      	beq.n	800c2ae <tcp_close_shutdown_fin+0x46>
 800c28c:	2b07      	cmp	r3, #7
 800c28e:	d01b      	beq.n	800c2c8 <tcp_close_shutdown_fin+0x60>
 800c290:	2b03      	cmp	r3, #3
 800c292:	d126      	bne.n	800c2e2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f003 fd97 	bl	800fdc8 <tcp_send_fin>
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d11f      	bne.n	800c2e6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2205      	movs	r2, #5
 800c2aa:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c2ac:	e01b      	b.n	800c2e6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f003 fd8a 	bl	800fdc8 <tcp_send_fin>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d114      	bne.n	800c2ea <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2205      	movs	r2, #5
 800c2c4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c2c6:	e010      	b.n	800c2ea <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f003 fd7d 	bl	800fdc8 <tcp_send_fin>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d109      	bne.n	800c2ee <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2209      	movs	r2, #9
 800c2de:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c2e0:	e005      	b.n	800c2ee <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e01c      	b.n	800c320 <tcp_close_shutdown_fin+0xb8>
    break;
 800c2e6:	bf00      	nop
 800c2e8:	e002      	b.n	800c2f0 <tcp_close_shutdown_fin+0x88>
    break;
 800c2ea:	bf00      	nop
 800c2ec:	e000      	b.n	800c2f0 <tcp_close_shutdown_fin+0x88>
    break;
 800c2ee:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f004 fbb7 	bl	8010a6c <tcp_output>
 800c2fe:	e00d      	b.n	800c31c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c308:	d108      	bne.n	800c31c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7e9b      	ldrb	r3, [r3, #26]
 800c30e:	f043 0308 	orr.w	r3, r3, #8
 800c312:	b2da      	uxtb	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	e001      	b.n	800c320 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08018948 	.word	0x08018948
 800c32c:	08018978 	.word	0x08018978
 800c330:	08018984 	.word	0x08018984

0800c334 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	7d1b      	ldrb	r3, [r3, #20]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d006      	beq.n	800c352 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7e9b      	ldrb	r3, [r3, #26]
 800c348:	f043 0310 	orr.w	r3, r3, #16
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c352:	2101      	movs	r1, #1
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fea1 	bl	800c09c <tcp_close_shutdown>
 800c35a:	4603      	mov	r3, r0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	7d1b      	ldrb	r3, [r3, #20]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d102      	bne.n	800c37e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800c378:	f06f 030a 	mvn.w	r3, #10
 800c37c:	e035      	b.n	800c3ea <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d01b      	beq.n	800c3bc <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	7e9b      	ldrb	r3, [r3, #26]
 800c388:	f043 0310 	orr.w	r3, r3, #16
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c398:	2101      	movs	r1, #1
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff fe7e 	bl	800c09c <tcp_close_shutdown>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	e022      	b.n	800c3ea <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d007      	beq.n	800c3bc <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7ff fb7b 	bl	800baac <pbuf_free>
      pcb->refused_data = NULL;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d012      	beq.n	800c3e8 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	7d1b      	ldrb	r3, [r3, #20]
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	db0b      	blt.n	800c3e2 <tcp_shutdown+0x7e>
 800c3ca:	2b04      	cmp	r3, #4
 800c3cc:	dd01      	ble.n	800c3d2 <tcp_shutdown+0x6e>
 800c3ce:	2b07      	cmp	r3, #7
 800c3d0:	d107      	bne.n	800c3e2 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f7ff fe5f 	bl	800c09c <tcp_close_shutdown>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	e003      	b.n	800c3ea <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800c3e2:	f06f 030a 	mvn.w	r3, #10
 800c3e6:	e000      	b.n	800c3ea <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08c      	sub	sp, #48	; 0x30
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	7d1b      	ldrb	r3, [r3, #20]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d106      	bne.n	800c414 <tcp_abandon+0x20>
 800c406:	4b4d      	ldr	r3, [pc, #308]	; (800c53c <tcp_abandon+0x148>)
 800c408:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c40c:	494c      	ldr	r1, [pc, #304]	; (800c540 <tcp_abandon+0x14c>)
 800c40e:	484d      	ldr	r0, [pc, #308]	; (800c544 <tcp_abandon+0x150>)
 800c410:	f00a f85c 	bl	80164cc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7d1b      	ldrb	r3, [r3, #20]
 800c418:	2b0a      	cmp	r3, #10
 800c41a:	d108      	bne.n	800c42e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c41c:	6879      	ldr	r1, [r7, #4]
 800c41e:	484a      	ldr	r0, [pc, #296]	; (800c548 <tcp_abandon+0x154>)
 800c420:	f001 f924 	bl	800d66c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	2001      	movs	r0, #1
 800c428:	f7fe fdde 	bl	800afe8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800c42c:	e081      	b.n	800c532 <tcp_abandon+0x13e>
    int send_rst = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c448:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7d1b      	ldrb	r3, [r3, #20]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d126      	bne.n	800c4a6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	8adb      	ldrh	r3, [r3, #22]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d02e      	beq.n	800c4be <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c460:	4b3a      	ldr	r3, [pc, #232]	; (800c54c <tcp_abandon+0x158>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	429a      	cmp	r2, r3
 800c468:	d105      	bne.n	800c476 <tcp_abandon+0x82>
 800c46a:	4b38      	ldr	r3, [pc, #224]	; (800c54c <tcp_abandon+0x158>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	4a36      	ldr	r2, [pc, #216]	; (800c54c <tcp_abandon+0x158>)
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	e013      	b.n	800c49e <tcp_abandon+0xaa>
 800c476:	4b35      	ldr	r3, [pc, #212]	; (800c54c <tcp_abandon+0x158>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	61fb      	str	r3, [r7, #28]
 800c47c:	e00c      	b.n	800c498 <tcp_abandon+0xa4>
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	429a      	cmp	r2, r3
 800c486:	d104      	bne.n	800c492 <tcp_abandon+0x9e>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	60da      	str	r2, [r3, #12]
 800c490:	e005      	b.n	800c49e <tcp_abandon+0xaa>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1ef      	bne.n	800c47e <tcp_abandon+0x8a>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	60da      	str	r2, [r3, #12]
 800c4a4:	e00b      	b.n	800c4be <tcp_abandon+0xca>
      send_rst = reset;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	8adb      	ldrh	r3, [r3, #22]
 800c4ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4827      	ldr	r0, [pc, #156]	; (800c550 <tcp_abandon+0x15c>)
 800c4b4:	f001 f8da 	bl	800d66c <tcp_pcb_remove>
 800c4b8:	4b26      	ldr	r3, [pc, #152]	; (800c554 <tcp_abandon+0x160>)
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d004      	beq.n	800c4d0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fe15 	bl	800d0fa <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d004      	beq.n	800c4e2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 fe0c 	bl	800d0fa <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d004      	beq.n	800c4f4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fe03 	bl	800d0fa <tcp_segs_free>
    if (send_rst) {
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	1d19      	adds	r1, r3, #4
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	8b1b      	ldrh	r3, [r3, #24]
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	460b      	mov	r3, r1
 800c50c:	6979      	ldr	r1, [r7, #20]
 800c50e:	69b8      	ldr	r0, [r7, #24]
 800c510:	f004 fd36 	bl	8010f80 <tcp_rst>
    last_state = pcb->state;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800c51a:	6879      	ldr	r1, [r7, #4]
 800c51c:	2001      	movs	r0, #1
 800c51e:	f7fe fd63 	bl	800afe8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <tcp_abandon+0x13e>
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f06f 010c 	mvn.w	r1, #12
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	4798      	blx	r3
}
 800c532:	bf00      	nop
 800c534:	3728      	adds	r7, #40	; 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	08018948 	.word	0x08018948
 800c540:	080189e0 	.word	0x080189e0
 800c544:	08018984 	.word	0x08018984
 800c548:	2000f76c 	.word	0x2000f76c
 800c54c:	2000f768 	.word	0x2000f768
 800c550:	2000f75c 	.word	0x2000f75c
 800c554:	2000f758 	.word	0x2000f758

0800c558 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c560:	2101      	movs	r1, #1
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff ff46 	bl	800c3f4 <tcp_abandon>
}
 800c568:	bf00      	nop
 800c56a:	3708      	adds	r7, #8
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4613      	mov	r3, r2
 800c57c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c57e:	2304      	movs	r3, #4
 800c580:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c588:	4b3c      	ldr	r3, [pc, #240]	; (800c67c <tcp_bind+0x10c>)
 800c58a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <tcp_bind+0x28>
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <tcp_bind+0x2e>
    return ERR_VAL;
 800c598:	f06f 0305 	mvn.w	r3, #5
 800c59c:	e06a      	b.n	800c674 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	7d1b      	ldrb	r3, [r3, #20]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d009      	beq.n	800c5ba <tcp_bind+0x4a>
 800c5a6:	4b36      	ldr	r3, [pc, #216]	; (800c680 <tcp_bind+0x110>)
 800c5a8:	f44f 7211 	mov.w	r2, #580	; 0x244
 800c5ac:	4935      	ldr	r1, [pc, #212]	; (800c684 <tcp_bind+0x114>)
 800c5ae:	4836      	ldr	r0, [pc, #216]	; (800c688 <tcp_bind+0x118>)
 800c5b0:	f009 ff8c 	bl	80164cc <iprintf>
 800c5b4:	f06f 0305 	mvn.w	r3, #5
 800c5b8:	e05c      	b.n	800c674 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800c5ba:	88fb      	ldrh	r3, [r7, #6]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <tcp_bind+0x64>
    port = tcp_new_port();
 800c5c0:	f000 f9ca 	bl	800c958 <tcp_new_port>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d135      	bne.n	800c63a <tcp_bind+0xca>
      return ERR_BUF;
 800c5ce:	f06f 0301 	mvn.w	r3, #1
 800c5d2:	e04f      	b.n	800c674 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	e02b      	b.n	800c632 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c5da:	4a2c      	ldr	r2, [pc, #176]	; (800c68c <tcp_bind+0x11c>)
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e01e      	b.n	800c626 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	8adb      	ldrh	r3, [r3, #22]
 800c5ec:	88fa      	ldrh	r2, [r7, #6]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d116      	bne.n	800c620 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d010      	beq.n	800c61a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00c      	beq.n	800c61a <tcp_bind+0xaa>
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d009      	beq.n	800c61a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d005      	beq.n	800c61a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c616:	429a      	cmp	r2, r3
 800c618:	d102      	bne.n	800c620 <tcp_bind+0xb0>
              return ERR_USE;
 800c61a:	f06f 0307 	mvn.w	r3, #7
 800c61e:	e029      	b.n	800c674 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	61bb      	str	r3, [r7, #24]
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1dd      	bne.n	800c5e8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	3301      	adds	r3, #1
 800c630:	61fb      	str	r3, [r7, #28]
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	429a      	cmp	r2, r3
 800c638:	dbcf      	blt.n	800c5da <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00c      	beq.n	800c65a <tcp_bind+0xea>
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d008      	beq.n	800c65a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <tcp_bind+0xe4>
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	e000      	b.n	800c656 <tcp_bind+0xe6>
 800c654:	2300      	movs	r3, #0
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	88fa      	ldrh	r2, [r7, #6]
 800c65e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c660:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <tcp_bind+0x120>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	60da      	str	r2, [r3, #12]
 800c668:	4a09      	ldr	r2, [pc, #36]	; (800c690 <tcp_bind+0x120>)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	f004 fed7 	bl	8011420 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3720      	adds	r7, #32
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	080256d8 	.word	0x080256d8
 800c680:	08018948 	.word	0x08018948
 800c684:	08018a14 	.word	0x08018a14
 800c688:	08018984 	.word	0x08018984
 800c68c:	080256a0 	.word	0x080256a0
 800c690:	2000f768 	.word	0x2000f768

0800c694 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800c6a2:	68b8      	ldr	r0, [r7, #8]
 800c6a4:	f7ff ff58 	bl	800c558 <tcp_abort>

  return ERR_ABRT;
 800c6a8:	f06f 030c 	mvn.w	r3, #12
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f806 	bl	800c6d8 <tcp_listen_with_backlog_and_err>
 800c6cc:	4603      	mov	r3, r0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d009      	beq.n	800c706 <tcp_listen_with_backlog_and_err+0x2e>
 800c6f2:	4b3f      	ldr	r3, [pc, #252]	; (800c7f0 <tcp_listen_with_backlog_and_err+0x118>)
 800c6f4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800c6f8:	493e      	ldr	r1, [pc, #248]	; (800c7f4 <tcp_listen_with_backlog_and_err+0x11c>)
 800c6fa:	483f      	ldr	r0, [pc, #252]	; (800c7f8 <tcp_listen_with_backlog_and_err+0x120>)
 800c6fc:	f009 fee6 	bl	80164cc <iprintf>
 800c700:	23f1      	movs	r3, #241	; 0xf1
 800c702:	76fb      	strb	r3, [r7, #27]
 800c704:	e069      	b.n	800c7da <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7d1b      	ldrb	r3, [r3, #20]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d104      	bne.n	800c718 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c712:	23f7      	movs	r3, #247	; 0xf7
 800c714:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c716:	e060      	b.n	800c7da <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c718:	2002      	movs	r0, #2
 800c71a:	f7fe fc13 	bl	800af44 <memp_malloc>
 800c71e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d102      	bne.n	800c72c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800c726:	23ff      	movs	r3, #255	; 0xff
 800c728:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c72a:	e056      	b.n	800c7da <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	8ada      	ldrh	r2, [r3, #22]
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2201      	movs	r2, #1
 800c740:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	7d5a      	ldrb	r2, [r3, #21]
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	7a1a      	ldrb	r2, [r3, #8]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	7a9a      	ldrb	r2, [r3, #10]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	7a5a      	ldrb	r2, [r3, #9]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	8adb      	ldrh	r3, [r3, #22]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d021      	beq.n	800c7b6 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c772:	4b22      	ldr	r3, [pc, #136]	; (800c7fc <tcp_listen_with_backlog_and_err+0x124>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d105      	bne.n	800c788 <tcp_listen_with_backlog_and_err+0xb0>
 800c77c:	4b1f      	ldr	r3, [pc, #124]	; (800c7fc <tcp_listen_with_backlog_and_err+0x124>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	4a1e      	ldr	r2, [pc, #120]	; (800c7fc <tcp_listen_with_backlog_and_err+0x124>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	e013      	b.n	800c7b0 <tcp_listen_with_backlog_and_err+0xd8>
 800c788:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <tcp_listen_with_backlog_and_err+0x124>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	e00c      	b.n	800c7aa <tcp_listen_with_backlog_and_err+0xd2>
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	429a      	cmp	r2, r3
 800c798:	d104      	bne.n	800c7a4 <tcp_listen_with_backlog_and_err+0xcc>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	60da      	str	r2, [r3, #12]
 800c7a2:	e005      	b.n	800c7b0 <tcp_listen_with_backlog_and_err+0xd8>
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	617b      	str	r3, [r7, #20]
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1ef      	bne.n	800c790 <tcp_listen_with_backlog_and_err+0xb8>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800c7b6:	68f9      	ldr	r1, [r7, #12]
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	f7fe fc15 	bl	800afe8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4a0f      	ldr	r2, [pc, #60]	; (800c800 <tcp_listen_with_backlog_and_err+0x128>)
 800c7c2:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c7c4:	4b0f      	ldr	r3, [pc, #60]	; (800c804 <tcp_listen_with_backlog_and_err+0x12c>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	60da      	str	r2, [r3, #12]
 800c7cc:	4a0d      	ldr	r2, [pc, #52]	; (800c804 <tcp_listen_with_backlog_and_err+0x12c>)
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	6013      	str	r3, [r2, #0]
 800c7d2:	f004 fe25 	bl	8011420 <tcp_timer_needed>
  res = ERR_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	7efa      	ldrb	r2, [r7, #27]
 800c7e4:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3720      	adds	r7, #32
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	08018948 	.word	0x08018948
 800c7f4:	08018a3c 	.word	0x08018a3c
 800c7f8:	08018984 	.word	0x08018984
 800c7fc:	2000f768 	.word	0x2000f768
 800c800:	0800c695 	.word	0x0800c695
 800c804:	2000f764 	.word	0x2000f764

0800c808 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c818:	4413      	add	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c824:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c828:	bf28      	it	cs
 800c82a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c82e:	b292      	uxth	r2, r2
 800c830:	4413      	add	r3, r2
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	db08      	blt.n	800c84c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	e020      	b.n	800c88e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	dd03      	ble.n	800c862 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c860:	e014      	b.n	800c88c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c874:	d306      	bcc.n	800c884 <tcp_update_rcv_ann_wnd+0x7c>
 800c876:	4b08      	ldr	r3, [pc, #32]	; (800c898 <tcp_update_rcv_ann_wnd+0x90>)
 800c878:	f44f 7242 	mov.w	r2, #776	; 0x308
 800c87c:	4907      	ldr	r1, [pc, #28]	; (800c89c <tcp_update_rcv_ann_wnd+0x94>)
 800c87e:	4808      	ldr	r0, [pc, #32]	; (800c8a0 <tcp_update_rcv_ann_wnd+0x98>)
 800c880:	f009 fe24 	bl	80164cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c88c:	2300      	movs	r3, #0
  }
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08018948 	.word	0x08018948
 800c89c:	08018a60 	.word	0x08018a60
 800c8a0:	08018984 	.word	0x08018984

0800c8a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	7d1b      	ldrb	r3, [r3, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d106      	bne.n	800c8c6 <tcp_recved+0x22>
 800c8b8:	4b23      	ldr	r3, [pc, #140]	; (800c948 <tcp_recved+0xa4>)
 800c8ba:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c8be:	4923      	ldr	r1, [pc, #140]	; (800c94c <tcp_recved+0xa8>)
 800c8c0:	4823      	ldr	r0, [pc, #140]	; (800c950 <tcp_recved+0xac>)
 800c8c2:	f009 fe03 	bl	80164cc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8ca:	887b      	ldrh	r3, [r7, #2]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8dc:	d904      	bls.n	800c8e8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c8e4:	851a      	strh	r2, [r3, #40]	; 0x28
 800c8e6:	e017      	b.n	800c918 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d113      	bne.n	800c918 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7d1b      	ldrb	r3, [r3, #20]
 800c8f4:	2b07      	cmp	r3, #7
 800c8f6:	d003      	beq.n	800c900 <tcp_recved+0x5c>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	7d1b      	ldrb	r3, [r3, #20]
 800c8fc:	2b09      	cmp	r3, #9
 800c8fe:	d104      	bne.n	800c90a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c906:	851a      	strh	r2, [r3, #40]	; 0x28
 800c908:	e006      	b.n	800c918 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <tcp_recved+0xa4>)
 800c90c:	f240 322d 	movw	r2, #813	; 0x32d
 800c910:	4910      	ldr	r1, [pc, #64]	; (800c954 <tcp_recved+0xb0>)
 800c912:	480f      	ldr	r0, [pc, #60]	; (800c950 <tcp_recved+0xac>)
 800c914:	f009 fdda 	bl	80164cc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ff75 	bl	800c808 <tcp_update_rcv_ann_wnd>
 800c91e:	4603      	mov	r3, r0
 800c920:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c928:	db09      	blt.n	800c93e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	7e9b      	ldrb	r3, [r3, #26]
 800c92e:	f043 0302 	orr.w	r3, r3, #2
 800c932:	b2da      	uxtb	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f004 f897 	bl	8010a6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c93e:	bf00      	nop
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	08018948 	.word	0x08018948
 800c94c:	08018a7c 	.word	0x08018a7c
 800c950:	08018984 	.word	0x08018984
 800c954:	08018aa4 	.word	0x08018aa4

0800c958 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c958:	b480      	push	{r7}
 800c95a:	b083      	sub	sp, #12
 800c95c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800c962:	4b1d      	ldr	r3, [pc, #116]	; (800c9d8 <tcp_new_port+0x80>)
 800c964:	881b      	ldrh	r3, [r3, #0]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	b291      	uxth	r1, r2
 800c96a:	4a1b      	ldr	r2, [pc, #108]	; (800c9d8 <tcp_new_port+0x80>)
 800c96c:	8011      	strh	r1, [r2, #0]
 800c96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c972:	4293      	cmp	r3, r2
 800c974:	d103      	bne.n	800c97e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c976:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <tcp_new_port+0x80>)
 800c978:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c97c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c97e:	2300      	movs	r3, #0
 800c980:	71fb      	strb	r3, [r7, #7]
 800c982:	e01e      	b.n	800c9c2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <tcp_new_port+0x84>)
 800c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	e011      	b.n	800c9b6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	8ada      	ldrh	r2, [r3, #22]
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <tcp_new_port+0x80>)
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d108      	bne.n	800c9b0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c99e:	88bb      	ldrh	r3, [r7, #4]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	80bb      	strh	r3, [r7, #4]
 800c9a4:	88bb      	ldrh	r3, [r7, #4]
 800c9a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9aa:	d3da      	bcc.n	800c962 <tcp_new_port+0xa>
          return 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e00d      	b.n	800c9cc <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	603b      	str	r3, [r7, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1ea      	bne.n	800c992 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c9bc:	79fb      	ldrb	r3, [r7, #7]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	71fb      	strb	r3, [r7, #7]
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d9dd      	bls.n	800c984 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	; (800c9d8 <tcp_new_port+0x80>)
 800c9ca:	881b      	ldrh	r3, [r3, #0]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	20000010 	.word	0x20000010
 800c9dc:	080256a0 	.word	0x080256a0

0800c9e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c9e0:	b5b0      	push	{r4, r5, r7, lr}
 800c9e2:	b08c      	sub	sp, #48	; 0x30
 800c9e4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800c9ea:	4b97      	ldr	r3, [pc, #604]	; (800cc48 <tcp_slowtmr+0x268>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	4a95      	ldr	r2, [pc, #596]	; (800cc48 <tcp_slowtmr+0x268>)
 800c9f2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c9f4:	4b95      	ldr	r3, [pc, #596]	; (800cc4c <tcp_slowtmr+0x26c>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	4b93      	ldr	r3, [pc, #588]	; (800cc4c <tcp_slowtmr+0x26c>)
 800c9fe:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800ca04:	4b92      	ldr	r3, [pc, #584]	; (800cc50 <tcp_slowtmr+0x270>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ca0a:	e227      	b.n	800ce5c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d106      	bne.n	800ca22 <tcp_slowtmr+0x42>
 800ca14:	4b8f      	ldr	r3, [pc, #572]	; (800cc54 <tcp_slowtmr+0x274>)
 800ca16:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800ca1a:	498f      	ldr	r1, [pc, #572]	; (800cc58 <tcp_slowtmr+0x278>)
 800ca1c:	488f      	ldr	r0, [pc, #572]	; (800cc5c <tcp_slowtmr+0x27c>)
 800ca1e:	f009 fd55 	bl	80164cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d106      	bne.n	800ca38 <tcp_slowtmr+0x58>
 800ca2a:	4b8a      	ldr	r3, [pc, #552]	; (800cc54 <tcp_slowtmr+0x274>)
 800ca2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ca30:	498b      	ldr	r1, [pc, #556]	; (800cc60 <tcp_slowtmr+0x280>)
 800ca32:	488a      	ldr	r0, [pc, #552]	; (800cc5c <tcp_slowtmr+0x27c>)
 800ca34:	f009 fd4a 	bl	80164cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	7d1b      	ldrb	r3, [r3, #20]
 800ca3c:	2b0a      	cmp	r3, #10
 800ca3e:	d106      	bne.n	800ca4e <tcp_slowtmr+0x6e>
 800ca40:	4b84      	ldr	r3, [pc, #528]	; (800cc54 <tcp_slowtmr+0x274>)
 800ca42:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800ca46:	4987      	ldr	r1, [pc, #540]	; (800cc64 <tcp_slowtmr+0x284>)
 800ca48:	4884      	ldr	r0, [pc, #528]	; (800cc5c <tcp_slowtmr+0x27c>)
 800ca4a:	f009 fd3f 	bl	80164cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	7f5a      	ldrb	r2, [r3, #29]
 800ca52:	4b7e      	ldr	r3, [pc, #504]	; (800cc4c <tcp_slowtmr+0x26c>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d103      	bne.n	800ca62 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800ca60:	e1fc      	b.n	800ce5c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ca62:	4b7a      	ldr	r3, [pc, #488]	; (800cc4c <tcp_slowtmr+0x26c>)
 800ca64:	781a      	ldrb	r2, [r3, #0]
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca68:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	7d1b      	ldrb	r3, [r3, #20]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d108      	bne.n	800ca8c <tcp_slowtmr+0xac>
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca80:	2b05      	cmp	r3, #5
 800ca82:	d903      	bls.n	800ca8c <tcp_slowtmr+0xac>
      ++pcb_remove;
 800ca84:	7ffb      	ldrb	r3, [r7, #31]
 800ca86:	3301      	adds	r3, #1
 800ca88:	77fb      	strb	r3, [r7, #31]
 800ca8a:	e0a2      	b.n	800cbd2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca92:	2b0b      	cmp	r3, #11
 800ca94:	d903      	bls.n	800ca9e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ca96:	7ffb      	ldrb	r3, [r7, #31]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	77fb      	strb	r3, [r7, #31]
 800ca9c:	e099      	b.n	800cbd2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d032      	beq.n	800cb0e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800caae:	3b01      	subs	r3, #1
 800cab0:	4a6d      	ldr	r2, [pc, #436]	; (800cc68 <tcp_slowtmr+0x288>)
 800cab2:	5cd3      	ldrb	r3, [r2, r3]
 800cab4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800cabc:	7cfa      	ldrb	r2, [r7, #19]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d907      	bls.n	800cad2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800cac8:	3301      	adds	r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800cad8:	7cfa      	ldrb	r2, [r7, #19]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d879      	bhi.n	800cbd2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800cade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cae0:	f004 fbde 	bl	80112a0 <tcp_zero_window_probe>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d173      	bne.n	800cbd2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	2200      	movs	r2, #0
 800caee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800caf8:	2b06      	cmp	r3, #6
 800cafa:	d86a      	bhi.n	800cbd2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cb02:	3301      	adds	r3, #1
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb08:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800cb0c:	e061      	b.n	800cbd2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	db08      	blt.n	800cb2a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3301      	adds	r3, #1
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	b21a      	sxth	r2, r3
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d04f      	beq.n	800cbd2 <tcp_slowtmr+0x1f2>
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	db47      	blt.n	800cbd2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	7d1b      	ldrb	r3, [r3, #20]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d018      	beq.n	800cb7c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb50:	2b0c      	cmp	r3, #12
 800cb52:	bf28      	it	cs
 800cb54:	230c      	movcs	r3, #12
 800cb56:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb5e:	10db      	asrs	r3, r3, #3
 800cb60:	b21b      	sxth	r3, r3
 800cb62:	461a      	mov	r2, r3
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cb6a:	4413      	add	r3, r2
 800cb6c:	7dfa      	ldrb	r2, [r7, #23]
 800cb6e:	493f      	ldr	r1, [pc, #252]	; (800cc6c <tcp_slowtmr+0x28c>)
 800cb70:	5c8a      	ldrb	r2, [r1, r2]
 800cb72:	4093      	lsls	r3, r2
 800cb74:	b21a      	sxth	r2, r3
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	2200      	movs	r2, #0
 800cb80:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	bf28      	it	cs
 800cb92:	4613      	movcs	r3, r2
 800cb94:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800cb96:	8abb      	ldrh	r3, [r7, #20]
 800cb98:	085b      	lsrs	r3, r3, #1
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d206      	bcs.n	800cbc2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800cbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800cbcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbce:	f004 fa4d 	bl	801106c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd4:	7d1b      	ldrb	r3, [r3, #20]
 800cbd6:	2b06      	cmp	r3, #6
 800cbd8:	d10f      	bne.n	800cbfa <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	7e9b      	ldrb	r3, [r3, #26]
 800cbde:	f003 0310 	and.w	r3, r3, #16
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <tcp_slowtmr+0x268>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b28      	cmp	r3, #40	; 0x28
 800cbf2:	d902      	bls.n	800cbfa <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cbf4:	7ffb      	ldrb	r3, [r7, #31]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	7a1b      	ldrb	r3, [r3, #8]
 800cbfe:	f003 0308 	and.w	r3, r3, #8
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d05d      	beq.n	800ccc2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cc0a:	2b04      	cmp	r3, #4
 800cc0c:	d003      	beq.n	800cc16 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800cc12:	2b07      	cmp	r3, #7
 800cc14:	d155      	bne.n	800ccc2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc16:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <tcp_slowtmr+0x268>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc26:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cc2a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cc2e:	4910      	ldr	r1, [pc, #64]	; (800cc70 <tcp_slowtmr+0x290>)
 800cc30:	fba1 1303 	umull	r1, r3, r1, r3
 800cc34:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d91c      	bls.n	800cc74 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800cc40:	7fbb      	ldrb	r3, [r7, #30]
 800cc42:	3301      	adds	r3, #1
 800cc44:	77bb      	strb	r3, [r7, #30]
 800cc46:	e03c      	b.n	800ccc2 <tcp_slowtmr+0x2e2>
 800cc48:	2000f760 	.word	0x2000f760
 800cc4c:	200088da 	.word	0x200088da
 800cc50:	2000f75c 	.word	0x2000f75c
 800cc54:	08018948 	.word	0x08018948
 800cc58:	08018af8 	.word	0x08018af8
 800cc5c:	08018984 	.word	0x08018984
 800cc60:	08018b24 	.word	0x08018b24
 800cc64:	08018b50 	.word	0x08018b50
 800cc68:	08025698 	.word	0x08025698
 800cc6c:	08025688 	.word	0x08025688
 800cc70:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc74:	4b97      	ldr	r3, [pc, #604]	; (800ced4 <tcp_slowtmr+0x4f4>)
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	4b92      	ldr	r3, [pc, #584]	; (800ced8 <tcp_slowtmr+0x4f8>)
 800cc8e:	fb03 f300 	mul.w	r3, r3, r0
 800cc92:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800cc94:	4991      	ldr	r1, [pc, #580]	; (800cedc <tcp_slowtmr+0x4fc>)
 800cc96:	fba1 1303 	umull	r1, r3, r1, r3
 800cc9a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d910      	bls.n	800ccc2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800cca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cca2:	f004 fac0 	bl	8011226 <tcp_keepalive>
 800cca6:	4603      	mov	r3, r0
 800cca8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800ccaa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d107      	bne.n	800ccc2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d016      	beq.n	800ccf8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800ccca:	4b82      	ldr	r3, [pc, #520]	; (800ced4 <tcp_slowtmr+0x4f4>)
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	1ad2      	subs	r2, r2, r3
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ccda:	4619      	mov	r1, r3
 800ccdc:	460b      	mov	r3, r1
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	440b      	add	r3, r1
 800cce2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d307      	bcc.n	800ccf8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800cce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fa04 	bl	800d0fa <tcp_segs_free>
      pcb->ooseq = NULL;
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfa:	7d1b      	ldrb	r3, [r3, #20]
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d109      	bne.n	800cd14 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd00:	4b74      	ldr	r3, [pc, #464]	; (800ced4 <tcp_slowtmr+0x4f4>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	2b28      	cmp	r3, #40	; 0x28
 800cd0c:	d902      	bls.n	800cd14 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cd0e:	7ffb      	ldrb	r3, [r7, #31]
 800cd10:	3301      	adds	r3, #1
 800cd12:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
 800cd18:	2b09      	cmp	r3, #9
 800cd1a:	d109      	bne.n	800cd30 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cd1c:	4b6d      	ldr	r3, [pc, #436]	; (800ced4 <tcp_slowtmr+0x4f4>)
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	6a1b      	ldr	r3, [r3, #32]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	2bf0      	cmp	r3, #240	; 0xf0
 800cd28:	d902      	bls.n	800cd30 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800cd2a:	7ffb      	ldrb	r3, [r7, #31]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cd30:	7ffb      	ldrb	r3, [r7, #31]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d05d      	beq.n	800cdf2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd3c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cd3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd40:	f000 fc52 	bl	800d5e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d010      	beq.n	800cd6c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cd4a:	4b65      	ldr	r3, [pc, #404]	; (800cee0 <tcp_slowtmr+0x500>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d106      	bne.n	800cd62 <tcp_slowtmr+0x382>
 800cd54:	4b63      	ldr	r3, [pc, #396]	; (800cee4 <tcp_slowtmr+0x504>)
 800cd56:	f240 4289 	movw	r2, #1161	; 0x489
 800cd5a:	4963      	ldr	r1, [pc, #396]	; (800cee8 <tcp_slowtmr+0x508>)
 800cd5c:	4863      	ldr	r0, [pc, #396]	; (800ceec <tcp_slowtmr+0x50c>)
 800cd5e:	f009 fbb5 	bl	80164cc <iprintf>
        prev->next = pcb->next;
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	68da      	ldr	r2, [r3, #12]
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	60da      	str	r2, [r3, #12]
 800cd6a:	e00f      	b.n	800cd8c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cd6c:	4b5c      	ldr	r3, [pc, #368]	; (800cee0 <tcp_slowtmr+0x500>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d006      	beq.n	800cd84 <tcp_slowtmr+0x3a4>
 800cd76:	4b5b      	ldr	r3, [pc, #364]	; (800cee4 <tcp_slowtmr+0x504>)
 800cd78:	f240 428d 	movw	r2, #1165	; 0x48d
 800cd7c:	495c      	ldr	r1, [pc, #368]	; (800cef0 <tcp_slowtmr+0x510>)
 800cd7e:	485b      	ldr	r0, [pc, #364]	; (800ceec <tcp_slowtmr+0x50c>)
 800cd80:	f009 fba4 	bl	80164cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	4a55      	ldr	r2, [pc, #340]	; (800cee0 <tcp_slowtmr+0x500>)
 800cd8a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cd8c:	7fbb      	ldrb	r3, [r7, #30]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d010      	beq.n	800cdb4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cd9a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	1d1d      	adds	r5, r3, #4
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	8adb      	ldrh	r3, [r3, #22]
 800cda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda6:	8b12      	ldrh	r2, [r2, #24]
 800cda8:	9201      	str	r2, [sp, #4]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	462b      	mov	r3, r5
 800cdae:	4622      	mov	r2, r4
 800cdb0:	f004 f8e6 	bl	8010f80 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	7d1b      	ldrb	r3, [r3, #20]
 800cdbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	2001      	movs	r0, #1
 800cdce:	f7fe f90b 	bl	800afe8 <memp_free>

      tcp_active_pcbs_changed = 0;
 800cdd2:	4b48      	ldr	r3, [pc, #288]	; (800cef4 <tcp_slowtmr+0x514>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <tcp_slowtmr+0x408>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f06f 010c 	mvn.w	r1, #12
 800cde4:	68b8      	ldr	r0, [r7, #8]
 800cde6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cde8:	4b42      	ldr	r3, [pc, #264]	; (800cef4 <tcp_slowtmr+0x514>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d035      	beq.n	800ce5c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800cdf0:	e606      	b.n	800ca00 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	7edb      	ldrb	r3, [r3, #27]
 800ce00:	3301      	adds	r3, #1
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	7eda      	ldrb	r2, [r3, #27]
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	7f1b      	ldrb	r3, [r3, #28]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d323      	bcc.n	800ce5c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	2200      	movs	r2, #0
 800ce18:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ce1a:	4b36      	ldr	r3, [pc, #216]	; (800cef4 <tcp_slowtmr+0x514>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <tcp_slowtmr+0x460>
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce30:	6a3a      	ldr	r2, [r7, #32]
 800ce32:	6912      	ldr	r2, [r2, #16]
 800ce34:	6a39      	ldr	r1, [r7, #32]
 800ce36:	4610      	mov	r0, r2
 800ce38:	4798      	blx	r3
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	777b      	strb	r3, [r7, #29]
 800ce3e:	e001      	b.n	800ce44 <tcp_slowtmr+0x464>
 800ce40:	2300      	movs	r3, #0
 800ce42:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800ce44:	4b2b      	ldr	r3, [pc, #172]	; (800cef4 <tcp_slowtmr+0x514>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d000      	beq.n	800ce4e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800ce4c:	e5d8      	b.n	800ca00 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ce4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d102      	bne.n	800ce5c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800ce56:	6a38      	ldr	r0, [r7, #32]
 800ce58:	f003 fe08 	bl	8010a6c <tcp_output>
  while (pcb != NULL) {
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f47f add4 	bne.w	800ca0c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ce64:	2300      	movs	r3, #0
 800ce66:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800ce68:	4b23      	ldr	r3, [pc, #140]	; (800cef8 <tcp_slowtmr+0x518>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ce6e:	e068      	b.n	800cf42 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	7d1b      	ldrb	r3, [r3, #20]
 800ce74:	2b0a      	cmp	r3, #10
 800ce76:	d006      	beq.n	800ce86 <tcp_slowtmr+0x4a6>
 800ce78:	4b1a      	ldr	r3, [pc, #104]	; (800cee4 <tcp_slowtmr+0x504>)
 800ce7a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ce7e:	491f      	ldr	r1, [pc, #124]	; (800cefc <tcp_slowtmr+0x51c>)
 800ce80:	481a      	ldr	r0, [pc, #104]	; (800ceec <tcp_slowtmr+0x50c>)
 800ce82:	f009 fb23 	bl	80164cc <iprintf>
    pcb_remove = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce8a:	4b12      	ldr	r3, [pc, #72]	; (800ced4 <tcp_slowtmr+0x4f4>)
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	2bf0      	cmp	r3, #240	; 0xf0
 800ce96:	d902      	bls.n	800ce9e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800ce98:	7ffb      	ldrb	r3, [r7, #31]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce9e:	7ffb      	ldrb	r3, [r7, #31]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d049      	beq.n	800cf38 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cea6:	f000 fb9f 	bl	800d5e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ceaa:	6a3b      	ldr	r3, [r7, #32]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d029      	beq.n	800cf04 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ceb0:	4b11      	ldr	r3, [pc, #68]	; (800cef8 <tcp_slowtmr+0x518>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d106      	bne.n	800cec8 <tcp_slowtmr+0x4e8>
 800ceba:	4b0a      	ldr	r3, [pc, #40]	; (800cee4 <tcp_slowtmr+0x504>)
 800cebc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800cec0:	490f      	ldr	r1, [pc, #60]	; (800cf00 <tcp_slowtmr+0x520>)
 800cec2:	480a      	ldr	r0, [pc, #40]	; (800ceec <tcp_slowtmr+0x50c>)
 800cec4:	f009 fb02 	bl	80164cc <iprintf>
        prev->next = pcb->next;
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	6a3b      	ldr	r3, [r7, #32]
 800cece:	60da      	str	r2, [r3, #12]
 800ced0:	e028      	b.n	800cf24 <tcp_slowtmr+0x544>
 800ced2:	bf00      	nop
 800ced4:	2000f760 	.word	0x2000f760
 800ced8:	000124f8 	.word	0x000124f8
 800cedc:	10624dd3 	.word	0x10624dd3
 800cee0:	2000f75c 	.word	0x2000f75c
 800cee4:	08018948 	.word	0x08018948
 800cee8:	08018b80 	.word	0x08018b80
 800ceec:	08018984 	.word	0x08018984
 800cef0:	08018bac 	.word	0x08018bac
 800cef4:	2000f758 	.word	0x2000f758
 800cef8:	2000f76c 	.word	0x2000f76c
 800cefc:	08018bd8 	.word	0x08018bd8
 800cf00:	08018c08 	.word	0x08018c08
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cf04:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <tcp_slowtmr+0x570>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d006      	beq.n	800cf1c <tcp_slowtmr+0x53c>
 800cf0e:	4b11      	ldr	r3, [pc, #68]	; (800cf54 <tcp_slowtmr+0x574>)
 800cf10:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800cf14:	4910      	ldr	r1, [pc, #64]	; (800cf58 <tcp_slowtmr+0x578>)
 800cf16:	4811      	ldr	r0, [pc, #68]	; (800cf5c <tcp_slowtmr+0x57c>)
 800cf18:	f009 fad8 	bl	80164cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	4a0b      	ldr	r2, [pc, #44]	; (800cf50 <tcp_slowtmr+0x570>)
 800cf22:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800cf2e:	69b9      	ldr	r1, [r7, #24]
 800cf30:	2001      	movs	r0, #1
 800cf32:	f7fe f859 	bl	800afe8 <memp_free>
 800cf36:	e004      	b.n	800cf42 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d193      	bne.n	800ce70 <tcp_slowtmr+0x490>
    }
  }
}
 800cf48:	bf00      	nop
 800cf4a:	3728      	adds	r7, #40	; 0x28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bdb0      	pop	{r4, r5, r7, pc}
 800cf50:	2000f76c 	.word	0x2000f76c
 800cf54:	08018948 	.word	0x08018948
 800cf58:	08018c30 	.word	0x08018c30
 800cf5c:	08018984 	.word	0x08018984

0800cf60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf66:	4b2d      	ldr	r3, [pc, #180]	; (800d01c <tcp_fasttmr+0xbc>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <tcp_fasttmr+0xbc>)
 800cf70:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf72:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <tcp_fasttmr+0xc0>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf78:	e048      	b.n	800d00c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	7f5a      	ldrb	r2, [r3, #29]
 800cf7e:	4b27      	ldr	r3, [pc, #156]	; (800d01c <tcp_fasttmr+0xbc>)
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d03f      	beq.n	800d006 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf86:	4b25      	ldr	r3, [pc, #148]	; (800d01c <tcp_fasttmr+0xbc>)
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	7e9b      	ldrb	r3, [r3, #26]
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d010      	beq.n	800cfbc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	7e9b      	ldrb	r3, [r3, #26]
 800cf9e:	f043 0302 	orr.w	r3, r3, #2
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f003 fd5f 	bl	8010a6c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7e9b      	ldrb	r3, [r3, #26]
 800cfb2:	f023 0303 	bic.w	r3, r3, #3
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7e9b      	ldrb	r3, [r3, #26]
 800cfc0:	f003 0308 	and.w	r3, r3, #8
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d009      	beq.n	800cfdc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7e9b      	ldrb	r3, [r3, #26]
 800cfcc:	f023 0308 	bic.w	r3, r3, #8
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7ff f946 	bl	800c268 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cfea:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <tcp_fasttmr+0xc4>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f819 	bl	800d028 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cff6:	4b0b      	ldr	r3, [pc, #44]	; (800d024 <tcp_fasttmr+0xc4>)
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d000      	beq.n	800d000 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cffe:	e7b8      	b.n	800cf72 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	607b      	str	r3, [r7, #4]
 800d004:	e002      	b.n	800d00c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1b3      	bne.n	800cf7a <tcp_fasttmr+0x1a>
    }
  }
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	200088da 	.word	0x200088da
 800d020:	2000f75c 	.word	0x2000f75c
 800d024:	2000f758 	.word	0x2000f758

0800d028 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d028:	b590      	push	{r4, r7, lr}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d034:	7b5b      	ldrb	r3, [r3, #13]
 800d036:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00b      	beq.n	800d066 <tcp_process_refused_data+0x3e>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6918      	ldr	r0, [r3, #16]
 800d058:	2300      	movs	r3, #0
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	47a0      	blx	r4
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
 800d064:	e007      	b.n	800d076 <tcp_process_refused_data+0x4e>
 800d066:	2300      	movs	r3, #0
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	2000      	movs	r0, #0
 800d06e:	f000 f89b 	bl	800d1a8 <tcp_recv_null>
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d12a      	bne.n	800d0d4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	f003 0320 	and.w	r3, r3, #32
 800d084:	2b00      	cmp	r3, #0
 800d086:	d033      	beq.n	800d0f0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d08c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d090:	d005      	beq.n	800d09e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d096:	3301      	adds	r3, #1
 800d098:	b29a      	uxth	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <tcp_process_refused_data+0x98>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6918      	ldr	r0, [r3, #16]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	47a0      	blx	r4
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73fb      	strb	r3, [r7, #15]
 800d0be:	e001      	b.n	800d0c4 <tcp_process_refused_data+0x9c>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0c8:	f113 0f0d 	cmn.w	r3, #13
 800d0cc:	d110      	bne.n	800d0f0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d0ce:	f06f 030c 	mvn.w	r3, #12
 800d0d2:	e00e      	b.n	800d0f2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0d8:	f113 0f0d 	cmn.w	r3, #13
 800d0dc:	d102      	bne.n	800d0e4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d0de:	f06f 030c 	mvn.w	r3, #12
 800d0e2:	e006      	b.n	800d0f2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800d0ea:	f06f 0304 	mvn.w	r3, #4
 800d0ee:	e000      	b.n	800d0f2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd90      	pop	{r4, r7, pc}

0800d0fa <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d102:	e007      	b.n	800d114 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f809 	bl	800d122 <tcp_seg_free>
    seg = next;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1f4      	bne.n	800d104 <tcp_segs_free+0xa>
  }
}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00c      	beq.n	800d14a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fcb5 	bl	800baac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	2003      	movs	r0, #3
 800d146:	f7fd ff4f 	bl	800afe8 <memp_free>
  }
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	755a      	strb	r2, [r3, #21]
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d178:	2003      	movs	r0, #3
 800d17a:	f7fd fee3 	bl	800af44 <memp_malloc>
 800d17e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <tcp_seg_copy+0x1a>
    return NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	e00a      	b.n	800d1a0 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d18a:	2210      	movs	r2, #16
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f009 f989 	bl	80164a6 <memcpy>
  pbuf_ref(cseg->p);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fd39 	bl	800bc10 <pbuf_ref>
  return cseg;
 800d19e:	68fb      	ldr	r3, [r7, #12]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d009      	beq.n	800d1d0 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	891b      	ldrh	r3, [r3, #8]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	68b8      	ldr	r0, [r7, #8]
 800d1c4:	f7ff fb6e 	bl	800c8a4 <tcp_recved>
    pbuf_free(p);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fe fc6f 	bl	800baac <pbuf_free>
 800d1ce:	e008      	b.n	800d1e2 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800d1d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800d1d8:	68b8      	ldr	r0, [r7, #8]
 800d1da:	f7ff f8ab 	bl	800c334 <tcp_close>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	e000      	b.n	800d1e4 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	db01      	blt.n	800d202 <tcp_kill_prio+0x16>
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	e000      	b.n	800d204 <tcp_kill_prio+0x18>
 800d202:	237f      	movs	r3, #127	; 0x7f
 800d204:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d20e:	4b16      	ldr	r3, [pc, #88]	; (800d268 <tcp_kill_prio+0x7c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e01a      	b.n	800d24c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	7d5b      	ldrb	r3, [r3, #21]
 800d21a:	7afa      	ldrb	r2, [r7, #11]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d312      	bcc.n	800d246 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d220:	4b12      	ldr	r3, [pc, #72]	; (800d26c <tcp_kill_prio+0x80>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d80a      	bhi.n	800d246 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800d230:	4b0e      	ldr	r3, [pc, #56]	; (800d26c <tcp_kill_prio+0x80>)
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	6a1b      	ldr	r3, [r3, #32]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	7d5b      	ldrb	r3, [r3, #21]
 800d244:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1e1      	bne.n	800d216 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d258:	6938      	ldr	r0, [r7, #16]
 800d25a:	f7ff f97d 	bl	800c558 <tcp_abort>
  }
}
 800d25e:	bf00      	nop
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000f75c 	.word	0x2000f75c
 800d26c:	2000f760 	.word	0x2000f760

0800d270 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	2b08      	cmp	r3, #8
 800d27e:	d009      	beq.n	800d294 <tcp_kill_state+0x24>
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	2b09      	cmp	r3, #9
 800d284:	d006      	beq.n	800d294 <tcp_kill_state+0x24>
 800d286:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <tcp_kill_state+0x80>)
 800d288:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d28c:	4919      	ldr	r1, [pc, #100]	; (800d2f4 <tcp_kill_state+0x84>)
 800d28e:	481a      	ldr	r0, [pc, #104]	; (800d2f8 <tcp_kill_state+0x88>)
 800d290:	f009 f91c 	bl	80164cc <iprintf>

  inactivity = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d29c:	4b17      	ldr	r3, [pc, #92]	; (800d2fc <tcp_kill_state+0x8c>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	617b      	str	r3, [r7, #20]
 800d2a2:	e017      	b.n	800d2d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	7d1b      	ldrb	r3, [r3, #20]
 800d2a8:	79fa      	ldrb	r2, [r7, #7]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d10f      	bne.n	800d2ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2ae:	4b14      	ldr	r3, [pc, #80]	; (800d300 <tcp_kill_state+0x90>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	6a1b      	ldr	r3, [r3, #32]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d807      	bhi.n	800d2ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d2be:	4b10      	ldr	r3, [pc, #64]	; (800d300 <tcp_kill_state+0x90>)
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1e4      	bne.n	800d2a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d003      	beq.n	800d2e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	6938      	ldr	r0, [r7, #16]
 800d2e4:	f7ff f886 	bl	800c3f4 <tcp_abandon>
  }
}
 800d2e8:	bf00      	nop
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	08018948 	.word	0x08018948
 800d2f4:	08018c58 	.word	0x08018c58
 800d2f8:	08018984 	.word	0x08018984
 800d2fc:	2000f75c 	.word	0x2000f75c
 800d300:	2000f760 	.word	0x2000f760

0800d304 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d312:	4b12      	ldr	r3, [pc, #72]	; (800d35c <tcp_kill_timewait+0x58>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	e012      	b.n	800d340 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d31a:	4b11      	ldr	r3, [pc, #68]	; (800d360 <tcp_kill_timewait+0x5c>)
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	429a      	cmp	r2, r3
 800d328:	d807      	bhi.n	800d33a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d32a:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <tcp_kill_timewait+0x5c>)
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e9      	bne.n	800d31a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d34c:	68b8      	ldr	r0, [r7, #8]
 800d34e:	f7ff f903 	bl	800c558 <tcp_abort>
  }
}
 800d352:	bf00      	nop
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	2000f76c 	.word	0x2000f76c
 800d360:	2000f760 	.word	0x2000f760

0800d364 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d36e:	2001      	movs	r0, #1
 800d370:	f7fd fde8 	bl	800af44 <memp_malloc>
 800d374:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d124      	bne.n	800d3c6 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d37c:	f7ff ffc2 	bl	800d304 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d380:	2001      	movs	r0, #1
 800d382:	f7fd fddf 	bl	800af44 <memp_malloc>
 800d386:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d11b      	bne.n	800d3c6 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d38e:	2009      	movs	r0, #9
 800d390:	f7ff ff6e 	bl	800d270 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d394:	2001      	movs	r0, #1
 800d396:	f7fd fdd5 	bl	800af44 <memp_malloc>
 800d39a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d111      	bne.n	800d3c6 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d3a2:	2008      	movs	r0, #8
 800d3a4:	f7ff ff64 	bl	800d270 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	f7fd fdcb 	bl	800af44 <memp_malloc>
 800d3ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d107      	bne.n	800d3c6 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff ff17 	bl	800d1ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3be:	2001      	movs	r0, #1
 800d3c0:	f7fd fdc0 	bl	800af44 <memp_malloc>
 800d3c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d03f      	beq.n	800d44c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d3cc:	2298      	movs	r2, #152	; 0x98
 800d3ce:	2100      	movs	r1, #0
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f009 f873 	bl	80164bc <memset>
    pcb->prio = prio;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	79fa      	ldrb	r2, [r7, #7]
 800d3da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d3ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	22ff      	movs	r2, #255	; 0xff
 800d3fa:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d402:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2206      	movs	r2, #6
 800d408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2206      	movs	r2, #6
 800d410:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d418:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d422:	4b0d      	ldr	r3, [pc, #52]	; (800d458 <tcp_alloc+0xf4>)
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d42a:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <tcp_alloc+0xf8>)
 800d42c:	781a      	ldrb	r2, [r3, #0]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d438:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4a08      	ldr	r2, [pc, #32]	; (800d460 <tcp_alloc+0xfc>)
 800d440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	4a07      	ldr	r2, [pc, #28]	; (800d464 <tcp_alloc+0x100>)
 800d448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d44c:	68fb      	ldr	r3, [r7, #12]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	2000f760 	.word	0x2000f760
 800d45c:	200088da 	.word	0x200088da
 800d460:	0800d1a9 	.word	0x0800d1a9
 800d464:	006ddd00 	.word	0x006ddd00

0800d468 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	4603      	mov	r3, r0
 800d470:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d472:	2040      	movs	r0, #64	; 0x40
 800d474:	f7ff ff76 	bl	800d364 <tcp_alloc>
 800d478:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d47a:	68fb      	ldr	r3, [r7, #12]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	611a      	str	r2, [r3, #16]
  }
}
 800d49a:	bf00      	nop
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00e      	beq.n	800d4d6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7d1b      	ldrb	r3, [r3, #20]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d106      	bne.n	800d4ce <tcp_recv+0x26>
 800d4c0:	4b07      	ldr	r3, [pc, #28]	; (800d4e0 <tcp_recv+0x38>)
 800d4c2:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800d4c6:	4907      	ldr	r1, [pc, #28]	; (800d4e4 <tcp_recv+0x3c>)
 800d4c8:	4807      	ldr	r0, [pc, #28]	; (800d4e8 <tcp_recv+0x40>)
 800d4ca:	f008 ffff 	bl	80164cc <iprintf>
    pcb->recv = recv;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d4d6:	bf00      	nop
 800d4d8:	3708      	adds	r7, #8
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	08018948 	.word	0x08018948
 800d4e4:	08018c68 	.word	0x08018c68
 800d4e8:	08018984 	.word	0x08018984

0800d4ec <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00d      	beq.n	800d518 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7d1b      	ldrb	r3, [r3, #20]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d106      	bne.n	800d512 <tcp_sent+0x26>
 800d504:	4b06      	ldr	r3, [pc, #24]	; (800d520 <tcp_sent+0x34>)
 800d506:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800d50a:	4906      	ldr	r1, [pc, #24]	; (800d524 <tcp_sent+0x38>)
 800d50c:	4806      	ldr	r0, [pc, #24]	; (800d528 <tcp_sent+0x3c>)
 800d50e:	f008 ffdd 	bl	80164cc <iprintf>
    pcb->sent = sent;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	683a      	ldr	r2, [r7, #0]
 800d516:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800d518:	bf00      	nop
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	08018948 	.word	0x08018948
 800d524:	08018c90 	.word	0x08018c90
 800d528:	08018984 	.word	0x08018984

0800d52c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00e      	beq.n	800d55a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7d1b      	ldrb	r3, [r3, #20]
 800d540:	2b01      	cmp	r3, #1
 800d542:	d106      	bne.n	800d552 <tcp_err+0x26>
 800d544:	4b07      	ldr	r3, [pc, #28]	; (800d564 <tcp_err+0x38>)
 800d546:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800d54a:	4907      	ldr	r1, [pc, #28]	; (800d568 <tcp_err+0x3c>)
 800d54c:	4807      	ldr	r0, [pc, #28]	; (800d56c <tcp_err+0x40>)
 800d54e:	f008 ffbd 	bl	80164cc <iprintf>
    pcb->errf = err;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800d55a:	bf00      	nop
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	08018948 	.word	0x08018948
 800d568:	08018cb8 	.word	0x08018cb8
 800d56c:	08018984 	.word	0x08018984

0800d570 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d008      	beq.n	800d592 <tcp_accept+0x22>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	7d1b      	ldrb	r3, [r3, #20]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d104      	bne.n	800d592 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	619a      	str	r2, [r3, #24]
  }
}
 800d592:	bf00      	nop
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
	...

0800d5a0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	7d1b      	ldrb	r3, [r3, #20]
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d106      	bne.n	800d5c4 <tcp_poll+0x24>
 800d5b6:	4b09      	ldr	r3, [pc, #36]	; (800d5dc <tcp_poll+0x3c>)
 800d5b8:	f240 7203 	movw	r2, #1795	; 0x703
 800d5bc:	4908      	ldr	r1, [pc, #32]	; (800d5e0 <tcp_poll+0x40>)
 800d5be:	4809      	ldr	r0, [pc, #36]	; (800d5e4 <tcp_poll+0x44>)
 800d5c0:	f008 ff84 	bl	80164cc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	771a      	strb	r2, [r3, #28]
}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	08018948 	.word	0x08018948
 800d5e0:	08018ce0 	.word	0x08018ce0
 800d5e4:	08018984 	.word	0x08018984

0800d5e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7d1b      	ldrb	r3, [r3, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d034      	beq.n	800d662 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d5fc:	2b0a      	cmp	r3, #10
 800d5fe:	d030      	beq.n	800d662 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800d604:	2b01      	cmp	r3, #1
 800d606:	d02c      	beq.n	800d662 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d007      	beq.n	800d620 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fa49 	bl	800baac <pbuf_free>
      pcb->refused_data = NULL;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff fd68 	bl	800d0fa <tcp_segs_free>
    pcb->ooseq = NULL;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d636:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fd5c 	bl	800d0fa <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d646:	4618      	mov	r0, r3
 800d648:	f7ff fd57 	bl	800d0fa <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	669a      	str	r2, [r3, #104]	; 0x68
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d105      	bne.n	800d68c <tcp_pcb_remove+0x20>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68da      	ldr	r2, [r3, #12]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	e013      	b.n	800d6b4 <tcp_pcb_remove+0x48>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	60fb      	str	r3, [r7, #12]
 800d692:	e00c      	b.n	800d6ae <tcp_pcb_remove+0x42>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	683a      	ldr	r2, [r7, #0]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d104      	bne.n	800d6a8 <tcp_pcb_remove+0x3c>
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	60da      	str	r2, [r3, #12]
 800d6a6:	e005      	b.n	800d6b4 <tcp_pcb_remove+0x48>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1ef      	bne.n	800d694 <tcp_pcb_remove+0x28>
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d6ba:	6838      	ldr	r0, [r7, #0]
 800d6bc:	f7ff ff94 	bl	800d5e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	7d1b      	ldrb	r3, [r3, #20]
 800d6c4:	2b0a      	cmp	r3, #10
 800d6c6:	d013      	beq.n	800d6f0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d00f      	beq.n	800d6f0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	7e9b      	ldrb	r3, [r3, #26]
 800d6d4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d009      	beq.n	800d6f0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	7e9b      	ldrb	r3, [r3, #26]
 800d6e0:	f043 0302 	orr.w	r3, r3, #2
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d6ea:	6838      	ldr	r0, [r7, #0]
 800d6ec:	f003 f9be 	bl	8010a6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	7d1b      	ldrb	r3, [r3, #20]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d020      	beq.n	800d73a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d006      	beq.n	800d70e <tcp_pcb_remove+0xa2>
 800d700:	4b13      	ldr	r3, [pc, #76]	; (800d750 <tcp_pcb_remove+0xe4>)
 800d702:	f240 7253 	movw	r2, #1875	; 0x753
 800d706:	4913      	ldr	r1, [pc, #76]	; (800d754 <tcp_pcb_remove+0xe8>)
 800d708:	4813      	ldr	r0, [pc, #76]	; (800d758 <tcp_pcb_remove+0xec>)
 800d70a:	f008 fedf 	bl	80164cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d006      	beq.n	800d724 <tcp_pcb_remove+0xb8>
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <tcp_pcb_remove+0xe4>)
 800d718:	f240 7254 	movw	r2, #1876	; 0x754
 800d71c:	490f      	ldr	r1, [pc, #60]	; (800d75c <tcp_pcb_remove+0xf0>)
 800d71e:	480e      	ldr	r0, [pc, #56]	; (800d758 <tcp_pcb_remove+0xec>)
 800d720:	f008 fed4 	bl	80164cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d006      	beq.n	800d73a <tcp_pcb_remove+0xce>
 800d72c:	4b08      	ldr	r3, [pc, #32]	; (800d750 <tcp_pcb_remove+0xe4>)
 800d72e:	f240 7256 	movw	r2, #1878	; 0x756
 800d732:	490b      	ldr	r1, [pc, #44]	; (800d760 <tcp_pcb_remove+0xf4>)
 800d734:	4808      	ldr	r0, [pc, #32]	; (800d758 <tcp_pcb_remove+0xec>)
 800d736:	f008 fec9 	bl	80164cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2200      	movs	r2, #0
 800d73e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	2200      	movs	r2, #0
 800d744:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	08018948 	.word	0x08018948
 800d754:	08018d00 	.word	0x08018d00
 800d758:	08018984 	.word	0x08018984
 800d75c:	08018d18 	.word	0x08018d18
 800d760:	08018d34 	.word	0x08018d34

0800d764 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d76c:	4b07      	ldr	r3, [pc, #28]	; (800d78c <tcp_next_iss+0x28>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	4b07      	ldr	r3, [pc, #28]	; (800d790 <tcp_next_iss+0x2c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4413      	add	r3, r2
 800d776:	4a05      	ldr	r2, [pc, #20]	; (800d78c <tcp_next_iss+0x28>)
 800d778:	6013      	str	r3, [r2, #0]
  return iss;
 800d77a:	4b04      	ldr	r3, [pc, #16]	; (800d78c <tcp_next_iss+0x28>)
 800d77c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d77e:	4618      	mov	r0, r3
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	20000014 	.word	0x20000014
 800d790:	2000f760 	.word	0x2000f760

0800d794 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	6039      	str	r1, [r7, #0]
 800d79e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800d7a0:	6838      	ldr	r0, [r7, #0]
 800d7a2:	f007 fad3 	bl	8014d4c <ip4_route>
 800d7a6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800d7ae:	88fb      	ldrh	r3, [r7, #6]
 800d7b0:	e010      	b.n	800d7d4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d7b6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d7b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d008      	beq.n	800d7d2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800d7c0:	897b      	ldrh	r3, [r7, #10]
 800d7c2:	3b28      	subs	r3, #40	; 0x28
 800d7c4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d7c6:	893a      	ldrh	r2, [r7, #8]
 800d7c8:	88fb      	ldrh	r3, [r7, #6]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	bf28      	it	cs
 800d7ce:	4613      	movcs	r3, r2
 800d7d0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800d7d2:	88fb      	ldrh	r3, [r7, #6]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d7ea:	e011      	b.n	800d810 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d108      	bne.n	800d80a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7fe feaa 	bl	800c558 <tcp_abort>
      pcb = next;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	e002      	b.n	800d810 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1ea      	bne.n	800d7ec <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800d816:	bf00      	nop
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d02c      	beq.n	800d88a <tcp_netif_ip_addr_changed+0x6a>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d028      	beq.n	800d88a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d838:	4b16      	ldr	r3, [pc, #88]	; (800d894 <tcp_netif_ip_addr_changed+0x74>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff ffcc 	bl	800d7dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d844:	4b14      	ldr	r3, [pc, #80]	; (800d898 <tcp_netif_ip_addr_changed+0x78>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff ffc6 	bl	800d7dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d019      	beq.n	800d88a <tcp_netif_ip_addr_changed+0x6a>
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d015      	beq.n	800d88a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d85e:	4b0f      	ldr	r3, [pc, #60]	; (800d89c <tcp_netif_ip_addr_changed+0x7c>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	e00e      	b.n	800d884 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d103      	bne.n	800d880 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1ed      	bne.n	800d866 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	2000f75c 	.word	0x2000f75c
 800d898:	2000f768 	.word	0x2000f768
 800d89c:	2000f764 	.word	0x2000f764

0800d8a0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b08b      	sub	sp, #44	; 0x2c
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	4a82      	ldr	r2, [pc, #520]	; (800dab8 <tcp_input+0x218>)
 800d8b0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	895b      	ldrh	r3, [r3, #10]
 800d8b6:	2b13      	cmp	r3, #19
 800d8b8:	f240 838a 	bls.w	800dfd0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8bc:	4b7f      	ldr	r3, [pc, #508]	; (800dabc <tcp_input+0x21c>)
 800d8be:	695a      	ldr	r2, [r3, #20]
 800d8c0:	4b7e      	ldr	r3, [pc, #504]	; (800dabc <tcp_input+0x21c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	f007 fcd8 	bl	801527c <ip4_addr_isbroadcast_u32>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f040 8380 	bne.w	800dfd4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d8d4:	4b79      	ldr	r3, [pc, #484]	; (800dabc <tcp_input+0x21c>)
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8dc:	2be0      	cmp	r3, #224	; 0xe0
 800d8de:	f000 8379 	beq.w	800dfd4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800d8e2:	4b75      	ldr	r3, [pc, #468]	; (800dab8 <tcp_input+0x218>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	899b      	ldrh	r3, [r3, #12]
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fc ff06 	bl	800a6fc <lwip_htons>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	0b1b      	lsrs	r3, r3, #12
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d8fc:	7cbb      	ldrb	r3, [r7, #18]
 800d8fe:	2b13      	cmp	r3, #19
 800d900:	f240 8368 	bls.w	800dfd4 <tcp_input+0x734>
 800d904:	7cbb      	ldrb	r3, [r7, #18]
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	891b      	ldrh	r3, [r3, #8]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	f200 8361 	bhi.w	800dfd4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d912:	7cbb      	ldrb	r3, [r7, #18]
 800d914:	b29b      	uxth	r3, r3
 800d916:	3b14      	subs	r3, #20
 800d918:	b29a      	uxth	r2, r3
 800d91a:	4b69      	ldr	r3, [pc, #420]	; (800dac0 <tcp_input+0x220>)
 800d91c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d91e:	4b69      	ldr	r3, [pc, #420]	; (800dac4 <tcp_input+0x224>)
 800d920:	2200      	movs	r2, #0
 800d922:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	895a      	ldrh	r2, [r3, #10]
 800d928:	7cbb      	ldrb	r3, [r7, #18]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d30d      	bcc.n	800d94c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d930:	4b63      	ldr	r3, [pc, #396]	; (800dac0 <tcp_input+0x220>)
 800d932:	881a      	ldrh	r2, [r3, #0]
 800d934:	4b64      	ldr	r3, [pc, #400]	; (800dac8 <tcp_input+0x228>)
 800d936:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800d938:	7cbb      	ldrb	r3, [r7, #18]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	425b      	negs	r3, r3
 800d93e:	b29b      	uxth	r3, r3
 800d940:	b21b      	sxth	r3, r3
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7fe f88d 	bl	800ba64 <pbuf_header>
 800d94a:	e055      	b.n	800d9f8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d105      	bne.n	800d960 <tcp_input+0xc0>
 800d954:	4b5d      	ldr	r3, [pc, #372]	; (800dacc <tcp_input+0x22c>)
 800d956:	22b2      	movs	r2, #178	; 0xb2
 800d958:	495d      	ldr	r1, [pc, #372]	; (800dad0 <tcp_input+0x230>)
 800d95a:	485e      	ldr	r0, [pc, #376]	; (800dad4 <tcp_input+0x234>)
 800d95c:	f008 fdb6 	bl	80164cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800d960:	f06f 0113 	mvn.w	r1, #19
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7fe f87d 	bl	800ba64 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	895a      	ldrh	r2, [r3, #10]
 800d96e:	4b56      	ldr	r3, [pc, #344]	; (800dac8 <tcp_input+0x228>)
 800d970:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d972:	4b53      	ldr	r3, [pc, #332]	; (800dac0 <tcp_input+0x220>)
 800d974:	881a      	ldrh	r2, [r3, #0]
 800d976:	4b54      	ldr	r3, [pc, #336]	; (800dac8 <tcp_input+0x228>)
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	1ad3      	subs	r3, r2, r3
 800d97c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800d97e:	4b52      	ldr	r3, [pc, #328]	; (800dac8 <tcp_input+0x228>)
 800d980:	881b      	ldrh	r3, [r3, #0]
 800d982:	425b      	negs	r3, r3
 800d984:	b29b      	uxth	r3, r3
 800d986:	b21b      	sxth	r3, r3
 800d988:	4619      	mov	r1, r3
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7fe f86a 	bl	800ba64 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	895b      	ldrh	r3, [r3, #10]
 800d996:	8a3a      	ldrh	r2, [r7, #16]
 800d998:	429a      	cmp	r2, r3
 800d99a:	f200 831d 	bhi.w	800dfd8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	4a47      	ldr	r2, [pc, #284]	; (800dac4 <tcp_input+0x224>)
 800d9a6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	8a3b      	ldrh	r3, [r7, #16]
 800d9ae:	425b      	negs	r3, r3
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	b21b      	sxth	r3, r3
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	f7fe f854 	bl	800ba64 <pbuf_header>
    p->tot_len -= opt2len;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	891a      	ldrh	r2, [r3, #8]
 800d9c0:	8a3b      	ldrh	r3, [r7, #16]
 800d9c2:	1ad3      	subs	r3, r2, r3
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	895b      	ldrh	r3, [r3, #10]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <tcp_input+0x13e>
 800d9d2:	4b3e      	ldr	r3, [pc, #248]	; (800dacc <tcp_input+0x22c>)
 800d9d4:	22cf      	movs	r2, #207	; 0xcf
 800d9d6:	4940      	ldr	r1, [pc, #256]	; (800dad8 <tcp_input+0x238>)
 800d9d8:	483e      	ldr	r0, [pc, #248]	; (800dad4 <tcp_input+0x234>)
 800d9da:	f008 fd77 	bl	80164cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	891a      	ldrh	r2, [r3, #8]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	891b      	ldrh	r3, [r3, #8]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d005      	beq.n	800d9f8 <tcp_input+0x158>
 800d9ec:	4b37      	ldr	r3, [pc, #220]	; (800dacc <tcp_input+0x22c>)
 800d9ee:	22d0      	movs	r2, #208	; 0xd0
 800d9f0:	493a      	ldr	r1, [pc, #232]	; (800dadc <tcp_input+0x23c>)
 800d9f2:	4838      	ldr	r0, [pc, #224]	; (800dad4 <tcp_input+0x234>)
 800d9f4:	f008 fd6a 	bl	80164cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d9f8:	4b2f      	ldr	r3, [pc, #188]	; (800dab8 <tcp_input+0x218>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	4b2d      	ldr	r3, [pc, #180]	; (800dab8 <tcp_input+0x218>)
 800da02:	681c      	ldr	r4, [r3, #0]
 800da04:	4610      	mov	r0, r2
 800da06:	f7fc fe79 	bl	800a6fc <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da0e:	4b2a      	ldr	r3, [pc, #168]	; (800dab8 <tcp_input+0x218>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	885b      	ldrh	r3, [r3, #2]
 800da14:	b29a      	uxth	r2, r3
 800da16:	4b28      	ldr	r3, [pc, #160]	; (800dab8 <tcp_input+0x218>)
 800da18:	681c      	ldr	r4, [r3, #0]
 800da1a:	4610      	mov	r0, r2
 800da1c:	f7fc fe6e 	bl	800a6fc <lwip_htons>
 800da20:	4603      	mov	r3, r0
 800da22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da24:	4b24      	ldr	r3, [pc, #144]	; (800dab8 <tcp_input+0x218>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	4b23      	ldr	r3, [pc, #140]	; (800dab8 <tcp_input+0x218>)
 800da2c:	681c      	ldr	r4, [r3, #0]
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fc fe72 	bl	800a718 <lwip_htonl>
 800da34:	4603      	mov	r3, r0
 800da36:	6063      	str	r3, [r4, #4]
 800da38:	6863      	ldr	r3, [r4, #4]
 800da3a:	4a29      	ldr	r2, [pc, #164]	; (800dae0 <tcp_input+0x240>)
 800da3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800da3e:	4b1e      	ldr	r3, [pc, #120]	; (800dab8 <tcp_input+0x218>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	689a      	ldr	r2, [r3, #8]
 800da44:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <tcp_input+0x218>)
 800da46:	681c      	ldr	r4, [r3, #0]
 800da48:	4610      	mov	r0, r2
 800da4a:	f7fc fe65 	bl	800a718 <lwip_htonl>
 800da4e:	4603      	mov	r3, r0
 800da50:	60a3      	str	r3, [r4, #8]
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	4a23      	ldr	r2, [pc, #140]	; (800dae4 <tcp_input+0x244>)
 800da56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800da58:	4b17      	ldr	r3, [pc, #92]	; (800dab8 <tcp_input+0x218>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	89db      	ldrh	r3, [r3, #14]
 800da5e:	b29a      	uxth	r2, r3
 800da60:	4b15      	ldr	r3, [pc, #84]	; (800dab8 <tcp_input+0x218>)
 800da62:	681c      	ldr	r4, [r3, #0]
 800da64:	4610      	mov	r0, r2
 800da66:	f7fc fe49 	bl	800a6fc <lwip_htons>
 800da6a:	4603      	mov	r3, r0
 800da6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800da6e:	4b12      	ldr	r3, [pc, #72]	; (800dab8 <tcp_input+0x218>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	899b      	ldrh	r3, [r3, #12]
 800da74:	b29b      	uxth	r3, r3
 800da76:	4618      	mov	r0, r3
 800da78:	f7fc fe40 	bl	800a6fc <lwip_htons>
 800da7c:	4603      	mov	r3, r0
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da84:	b2da      	uxtb	r2, r3
 800da86:	4b18      	ldr	r3, [pc, #96]	; (800dae8 <tcp_input+0x248>)
 800da88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	891a      	ldrh	r2, [r3, #8]
 800da8e:	4b16      	ldr	r3, [pc, #88]	; (800dae8 <tcp_input+0x248>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	f003 0303 	and.w	r3, r3, #3
 800da96:	2b00      	cmp	r3, #0
 800da98:	bf14      	ite	ne
 800da9a:	2301      	movne	r3, #1
 800da9c:	2300      	moveq	r3, #0
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	4413      	add	r3, r2
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	4b11      	ldr	r3, [pc, #68]	; (800daec <tcp_input+0x24c>)
 800daa8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daae:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <tcp_input+0x250>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	61fb      	str	r3, [r7, #28]
 800dab4:	e082      	b.n	800dbbc <tcp_input+0x31c>
 800dab6:	bf00      	nop
 800dab8:	200088ec 	.word	0x200088ec
 800dabc:	2000c02c 	.word	0x2000c02c
 800dac0:	200088f0 	.word	0x200088f0
 800dac4:	200088f4 	.word	0x200088f4
 800dac8:	200088f2 	.word	0x200088f2
 800dacc:	08018d4c 	.word	0x08018d4c
 800dad0:	08018d80 	.word	0x08018d80
 800dad4:	08018d90 	.word	0x08018d90
 800dad8:	08018db8 	.word	0x08018db8
 800dadc:	08018dc4 	.word	0x08018dc4
 800dae0:	200088fc 	.word	0x200088fc
 800dae4:	20008900 	.word	0x20008900
 800dae8:	20008908 	.word	0x20008908
 800daec:	20008906 	.word	0x20008906
 800daf0:	2000f75c 	.word	0x2000f75c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	7d1b      	ldrb	r3, [r3, #20]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <tcp_input+0x268>
 800dafc:	4b8f      	ldr	r3, [pc, #572]	; (800dd3c <tcp_input+0x49c>)
 800dafe:	22e2      	movs	r2, #226	; 0xe2
 800db00:	498f      	ldr	r1, [pc, #572]	; (800dd40 <tcp_input+0x4a0>)
 800db02:	4890      	ldr	r0, [pc, #576]	; (800dd44 <tcp_input+0x4a4>)
 800db04:	f008 fce2 	bl	80164cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	7d1b      	ldrb	r3, [r3, #20]
 800db0c:	2b0a      	cmp	r3, #10
 800db0e:	d105      	bne.n	800db1c <tcp_input+0x27c>
 800db10:	4b8a      	ldr	r3, [pc, #552]	; (800dd3c <tcp_input+0x49c>)
 800db12:	22e3      	movs	r2, #227	; 0xe3
 800db14:	498c      	ldr	r1, [pc, #560]	; (800dd48 <tcp_input+0x4a8>)
 800db16:	488b      	ldr	r0, [pc, #556]	; (800dd44 <tcp_input+0x4a4>)
 800db18:	f008 fcd8 	bl	80164cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	7d1b      	ldrb	r3, [r3, #20]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d105      	bne.n	800db30 <tcp_input+0x290>
 800db24:	4b85      	ldr	r3, [pc, #532]	; (800dd3c <tcp_input+0x49c>)
 800db26:	22e4      	movs	r2, #228	; 0xe4
 800db28:	4988      	ldr	r1, [pc, #544]	; (800dd4c <tcp_input+0x4ac>)
 800db2a:	4886      	ldr	r0, [pc, #536]	; (800dd44 <tcp_input+0x4a4>)
 800db2c:	f008 fcce 	bl	80164cc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	8b1a      	ldrh	r2, [r3, #24]
 800db34:	4b86      	ldr	r3, [pc, #536]	; (800dd50 <tcp_input+0x4b0>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d138      	bne.n	800dbb2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	8ada      	ldrh	r2, [r3, #22]
 800db44:	4b82      	ldr	r3, [pc, #520]	; (800dd50 <tcp_input+0x4b0>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	885b      	ldrh	r3, [r3, #2]
 800db4a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d130      	bne.n	800dbb2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	4b7f      	ldr	r3, [pc, #508]	; (800dd54 <tcp_input+0x4b4>)
 800db56:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800db58:	429a      	cmp	r2, r3
 800db5a:	d12a      	bne.n	800dbb2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4b7c      	ldr	r3, [pc, #496]	; (800dd54 <tcp_input+0x4b4>)
 800db62:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db64:	429a      	cmp	r2, r3
 800db66:	d124      	bne.n	800dbb2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	69fa      	ldr	r2, [r7, #28]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d105      	bne.n	800db7e <tcp_input+0x2de>
 800db72:	4b72      	ldr	r3, [pc, #456]	; (800dd3c <tcp_input+0x49c>)
 800db74:	22ec      	movs	r2, #236	; 0xec
 800db76:	4978      	ldr	r1, [pc, #480]	; (800dd58 <tcp_input+0x4b8>)
 800db78:	4872      	ldr	r0, [pc, #456]	; (800dd44 <tcp_input+0x4a4>)
 800db7a:	f008 fca7 	bl	80164cc <iprintf>
      if (prev != NULL) {
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00a      	beq.n	800db9a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	68da      	ldr	r2, [r3, #12]
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800db8c:	4b73      	ldr	r3, [pc, #460]	; (800dd5c <tcp_input+0x4bc>)
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800db94:	4a71      	ldr	r2, [pc, #452]	; (800dd5c <tcp_input+0x4bc>)
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	69fa      	ldr	r2, [r7, #28]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d10f      	bne.n	800dbc4 <tcp_input+0x324>
 800dba4:	4b65      	ldr	r3, [pc, #404]	; (800dd3c <tcp_input+0x49c>)
 800dba6:	22f4      	movs	r2, #244	; 0xf4
 800dba8:	496d      	ldr	r1, [pc, #436]	; (800dd60 <tcp_input+0x4c0>)
 800dbaa:	4866      	ldr	r0, [pc, #408]	; (800dd44 <tcp_input+0x4a4>)
 800dbac:	f008 fc8e 	bl	80164cc <iprintf>
      break;
 800dbb0:	e008      	b.n	800dbc4 <tcp_input+0x324>
    }
    prev = pcb;
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	61fb      	str	r3, [r7, #28]
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d198      	bne.n	800daf4 <tcp_input+0x254>
 800dbc2:	e000      	b.n	800dbc6 <tcp_input+0x326>
      break;
 800dbc4:	bf00      	nop
  }

  if (pcb == NULL) {
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d173      	bne.n	800dcb4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbcc:	4b65      	ldr	r3, [pc, #404]	; (800dd64 <tcp_input+0x4c4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	61fb      	str	r3, [r7, #28]
 800dbd2:	e02f      	b.n	800dc34 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	7d1b      	ldrb	r3, [r3, #20]
 800dbd8:	2b0a      	cmp	r3, #10
 800dbda:	d005      	beq.n	800dbe8 <tcp_input+0x348>
 800dbdc:	4b57      	ldr	r3, [pc, #348]	; (800dd3c <tcp_input+0x49c>)
 800dbde:	22fe      	movs	r2, #254	; 0xfe
 800dbe0:	4961      	ldr	r1, [pc, #388]	; (800dd68 <tcp_input+0x4c8>)
 800dbe2:	4858      	ldr	r0, [pc, #352]	; (800dd44 <tcp_input+0x4a4>)
 800dbe4:	f008 fc72 	bl	80164cc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	8b1a      	ldrh	r2, [r3, #24]
 800dbec:	4b58      	ldr	r3, [pc, #352]	; (800dd50 <tcp_input+0x4b0>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d11a      	bne.n	800dc2e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	8ada      	ldrh	r2, [r3, #22]
 800dbfc:	4b54      	ldr	r3, [pc, #336]	; (800dd50 <tcp_input+0x4b0>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	885b      	ldrh	r3, [r3, #2]
 800dc02:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d112      	bne.n	800dc2e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b51      	ldr	r3, [pc, #324]	; (800dd54 <tcp_input+0x4b4>)
 800dc0e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d10c      	bne.n	800dc2e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	4b4e      	ldr	r3, [pc, #312]	; (800dd54 <tcp_input+0x4b4>)
 800dc1a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d106      	bne.n	800dc2e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800dc20:	69f8      	ldr	r0, [r7, #28]
 800dc22:	f000 fb15 	bl	800e250 <tcp_timewait_input>
        pbuf_free(p);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7fd ff40 	bl	800baac <pbuf_free>
        return;
 800dc2c:	e1da      	b.n	800dfe4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	61fb      	str	r3, [r7, #28]
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1cc      	bne.n	800dbd4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc3e:	4b4b      	ldr	r3, [pc, #300]	; (800dd6c <tcp_input+0x4cc>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e019      	b.n	800dc7a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	8ada      	ldrh	r2, [r3, #22]
 800dc4a:	4b41      	ldr	r3, [pc, #260]	; (800dd50 <tcp_input+0x4b0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	885b      	ldrh	r3, [r3, #2]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d10c      	bne.n	800dc70 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	4b3e      	ldr	r3, [pc, #248]	; (800dd54 <tcp_input+0x4b4>)
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d00f      	beq.n	800dc82 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d00d      	beq.n	800dc84 <tcp_input+0x3e4>
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	617b      	str	r3, [r7, #20]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1e2      	bne.n	800dc46 <tcp_input+0x3a6>
 800dc80:	e000      	b.n	800dc84 <tcp_input+0x3e4>
            break;
 800dc82:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d014      	beq.n	800dcb4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dc8a:	69bb      	ldr	r3, [r7, #24]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00a      	beq.n	800dca6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	68da      	ldr	r2, [r3, #12]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dc98:	4b34      	ldr	r3, [pc, #208]	; (800dd6c <tcp_input+0x4cc>)
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dca0:	4a32      	ldr	r2, [pc, #200]	; (800dd6c <tcp_input+0x4cc>)
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800dca6:	6978      	ldr	r0, [r7, #20]
 800dca8:	f000 f9f0 	bl	800e08c <tcp_listen_input>
      pbuf_free(p);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f7fd fefd 	bl	800baac <pbuf_free>
      return;
 800dcb2:	e197      	b.n	800dfe4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 8164 	beq.w	800df84 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dcbc:	4b2c      	ldr	r3, [pc, #176]	; (800dd70 <tcp_input+0x4d0>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	891a      	ldrh	r2, [r3, #8]
 800dcc6:	4b2a      	ldr	r3, [pc, #168]	; (800dd70 <tcp_input+0x4d0>)
 800dcc8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dcca:	4a29      	ldr	r2, [pc, #164]	; (800dd70 <tcp_input+0x4d0>)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dcd0:	4b1f      	ldr	r3, [pc, #124]	; (800dd50 <tcp_input+0x4b0>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a26      	ldr	r2, [pc, #152]	; (800dd70 <tcp_input+0x4d0>)
 800dcd6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dcd8:	4b26      	ldr	r3, [pc, #152]	; (800dd74 <tcp_input+0x4d4>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dcde:	4b26      	ldr	r3, [pc, #152]	; (800dd78 <tcp_input+0x4d8>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dce4:	4b25      	ldr	r3, [pc, #148]	; (800dd7c <tcp_input+0x4dc>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dcea:	4b25      	ldr	r3, [pc, #148]	; (800dd80 <tcp_input+0x4e0>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	f003 0308 	and.w	r3, r3, #8
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7b5b      	ldrb	r3, [r3, #13]
 800dcfa:	f043 0301 	orr.w	r3, r3, #1
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d03d      	beq.n	800dd88 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd0c:	69f8      	ldr	r0, [r7, #28]
 800dd0e:	f7ff f98b 	bl	800d028 <tcp_process_refused_data>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f113 0f0d 	cmn.w	r3, #13
 800dd18:	d007      	beq.n	800dd2a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d032      	beq.n	800dd88 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dd22:	4b18      	ldr	r3, [pc, #96]	; (800dd84 <tcp_input+0x4e4>)
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d02e      	beq.n	800dd88 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f040 8108 	bne.w	800df44 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dd34:	69f8      	ldr	r0, [r7, #28]
 800dd36:	f002 fe3d 	bl	80109b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dd3a:	e103      	b.n	800df44 <tcp_input+0x6a4>
 800dd3c:	08018d4c 	.word	0x08018d4c
 800dd40:	08018de4 	.word	0x08018de4
 800dd44:	08018d90 	.word	0x08018d90
 800dd48:	08018e0c 	.word	0x08018e0c
 800dd4c:	08018e38 	.word	0x08018e38
 800dd50:	200088ec 	.word	0x200088ec
 800dd54:	2000c02c 	.word	0x2000c02c
 800dd58:	08018e60 	.word	0x08018e60
 800dd5c:	2000f75c 	.word	0x2000f75c
 800dd60:	08018e8c 	.word	0x08018e8c
 800dd64:	2000f76c 	.word	0x2000f76c
 800dd68:	08018eb8 	.word	0x08018eb8
 800dd6c:	2000f764 	.word	0x2000f764
 800dd70:	200088dc 	.word	0x200088dc
 800dd74:	2000890c 	.word	0x2000890c
 800dd78:	20008909 	.word	0x20008909
 800dd7c:	20008904 	.word	0x20008904
 800dd80:	20008908 	.word	0x20008908
 800dd84:	20008906 	.word	0x20008906
      }
    }
    tcp_input_pcb = pcb;
 800dd88:	4a98      	ldr	r2, [pc, #608]	; (800dfec <tcp_input+0x74c>)
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dd8e:	69f8      	ldr	r0, [r7, #28]
 800dd90:	f000 fac6 	bl	800e320 <tcp_process>
 800dd94:	4603      	mov	r3, r0
 800dd96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd9c:	f113 0f0d 	cmn.w	r3, #13
 800dda0:	f000 80d2 	beq.w	800df48 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800dda4:	4b92      	ldr	r3, [pc, #584]	; (800dff0 <tcp_input+0x750>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	f003 0308 	and.w	r3, r3, #8
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d016      	beq.n	800ddde <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d008      	beq.n	800ddcc <tcp_input+0x52c>
 800ddba:	69fb      	ldr	r3, [r7, #28]
 800ddbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddc0:	69fa      	ldr	r2, [r7, #28]
 800ddc2:	6912      	ldr	r2, [r2, #16]
 800ddc4:	f06f 010d 	mvn.w	r1, #13
 800ddc8:	4610      	mov	r0, r2
 800ddca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ddcc:	69f9      	ldr	r1, [r7, #28]
 800ddce:	4889      	ldr	r0, [pc, #548]	; (800dff4 <tcp_input+0x754>)
 800ddd0:	f7ff fc4c 	bl	800d66c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800ddd4:	69f9      	ldr	r1, [r7, #28]
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	f7fd f906 	bl	800afe8 <memp_free>
 800dddc:	e0bf      	b.n	800df5e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dde2:	4b85      	ldr	r3, [pc, #532]	; (800dff8 <tcp_input+0x758>)
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d01b      	beq.n	800de22 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ddea:	4b83      	ldr	r3, [pc, #524]	; (800dff8 <tcp_input+0x758>)
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d009      	beq.n	800de0c <tcp_input+0x56c>
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddfc:	69fa      	ldr	r2, [r7, #28]
 800ddfe:	6910      	ldr	r0, [r2, #16]
 800de00:	89fa      	ldrh	r2, [r7, #14]
 800de02:	69f9      	ldr	r1, [r7, #28]
 800de04:	4798      	blx	r3
 800de06:	4603      	mov	r3, r0
 800de08:	74fb      	strb	r3, [r7, #19]
 800de0a:	e001      	b.n	800de10 <tcp_input+0x570>
 800de0c:	2300      	movs	r3, #0
 800de0e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de14:	f113 0f0d 	cmn.w	r3, #13
 800de18:	f000 8098 	beq.w	800df4c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800de1c:	4b76      	ldr	r3, [pc, #472]	; (800dff8 <tcp_input+0x758>)
 800de1e:	2200      	movs	r2, #0
 800de20:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800de22:	69f8      	ldr	r0, [r7, #28]
 800de24:	f000 f900 	bl	800e028 <tcp_input_delayed_close>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 8090 	bne.w	800df50 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800de30:	4b72      	ldr	r3, [pc, #456]	; (800dffc <tcp_input+0x75c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d041      	beq.n	800debc <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d006      	beq.n	800de4e <tcp_input+0x5ae>
 800de40:	4b6f      	ldr	r3, [pc, #444]	; (800e000 <tcp_input+0x760>)
 800de42:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800de46:	496f      	ldr	r1, [pc, #444]	; (800e004 <tcp_input+0x764>)
 800de48:	486f      	ldr	r0, [pc, #444]	; (800e008 <tcp_input+0x768>)
 800de4a:	f008 fb3f 	bl	80164cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	7e9b      	ldrb	r3, [r3, #26]
 800de52:	f003 0310 	and.w	r3, r3, #16
 800de56:	2b00      	cmp	r3, #0
 800de58:	d008      	beq.n	800de6c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800de5a:	4b68      	ldr	r3, [pc, #416]	; (800dffc <tcp_input+0x75c>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fd fe24 	bl	800baac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800de64:	69f8      	ldr	r0, [r7, #28]
 800de66:	f7fe fb77 	bl	800c558 <tcp_abort>
            goto aborted;
 800de6a:	e078      	b.n	800df5e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00c      	beq.n	800de90 <tcp_input+0x5f0>
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	6918      	ldr	r0, [r3, #16]
 800de80:	4b5e      	ldr	r3, [pc, #376]	; (800dffc <tcp_input+0x75c>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	2300      	movs	r3, #0
 800de86:	69f9      	ldr	r1, [r7, #28]
 800de88:	47a0      	blx	r4
 800de8a:	4603      	mov	r3, r0
 800de8c:	74fb      	strb	r3, [r7, #19]
 800de8e:	e008      	b.n	800dea2 <tcp_input+0x602>
 800de90:	4b5a      	ldr	r3, [pc, #360]	; (800dffc <tcp_input+0x75c>)
 800de92:	681a      	ldr	r2, [r3, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	69f9      	ldr	r1, [r7, #28]
 800de98:	2000      	movs	r0, #0
 800de9a:	f7ff f985 	bl	800d1a8 <tcp_recv_null>
 800de9e:	4603      	mov	r3, r0
 800dea0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dea6:	f113 0f0d 	cmn.w	r3, #13
 800deaa:	d053      	beq.n	800df54 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800deac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d003      	beq.n	800debc <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800deb4:	4b51      	ldr	r3, [pc, #324]	; (800dffc <tcp_input+0x75c>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800debc:	4b4c      	ldr	r3, [pc, #304]	; (800dff0 <tcp_input+0x750>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	f003 0320 	and.w	r3, r3, #32
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d030      	beq.n	800df2a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800decc:	2b00      	cmp	r3, #0
 800dece:	d009      	beq.n	800dee4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ded4:	7b5a      	ldrb	r2, [r3, #13]
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deda:	f042 0220 	orr.w	r2, r2, #32
 800dede:	b2d2      	uxtb	r2, r2
 800dee0:	735a      	strb	r2, [r3, #13]
 800dee2:	e022      	b.n	800df2a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dee8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800deec:	d005      	beq.n	800defa <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def2:	3301      	adds	r3, #1
 800def4:	b29a      	uxth	r2, r3
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00b      	beq.n	800df1c <tcp_input+0x67c>
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	6918      	ldr	r0, [r3, #16]
 800df0e:	2300      	movs	r3, #0
 800df10:	2200      	movs	r2, #0
 800df12:	69f9      	ldr	r1, [r7, #28]
 800df14:	47a0      	blx	r4
 800df16:	4603      	mov	r3, r0
 800df18:	74fb      	strb	r3, [r7, #19]
 800df1a:	e001      	b.n	800df20 <tcp_input+0x680>
 800df1c:	2300      	movs	r3, #0
 800df1e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df24:	f113 0f0d 	cmn.w	r3, #13
 800df28:	d016      	beq.n	800df58 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800df2a:	4b30      	ldr	r3, [pc, #192]	; (800dfec <tcp_input+0x74c>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800df30:	69f8      	ldr	r0, [r7, #28]
 800df32:	f000 f879 	bl	800e028 <tcp_input_delayed_close>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10f      	bne.n	800df5c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800df3c:	69f8      	ldr	r0, [r7, #28]
 800df3e:	f002 fd95 	bl	8010a6c <tcp_output>
 800df42:	e00c      	b.n	800df5e <tcp_input+0x6be>
        goto aborted;
 800df44:	bf00      	nop
 800df46:	e00a      	b.n	800df5e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800df48:	bf00      	nop
 800df4a:	e008      	b.n	800df5e <tcp_input+0x6be>
              goto aborted;
 800df4c:	bf00      	nop
 800df4e:	e006      	b.n	800df5e <tcp_input+0x6be>
          goto aborted;
 800df50:	bf00      	nop
 800df52:	e004      	b.n	800df5e <tcp_input+0x6be>
            goto aborted;
 800df54:	bf00      	nop
 800df56:	e002      	b.n	800df5e <tcp_input+0x6be>
              goto aborted;
 800df58:	bf00      	nop
 800df5a:	e000      	b.n	800df5e <tcp_input+0x6be>
          goto aborted;
 800df5c:	bf00      	nop
    tcp_input_pcb = NULL;
 800df5e:	4b23      	ldr	r3, [pc, #140]	; (800dfec <tcp_input+0x74c>)
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800df64:	4b25      	ldr	r3, [pc, #148]	; (800dffc <tcp_input+0x75c>)
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800df6a:	4b28      	ldr	r3, [pc, #160]	; (800e00c <tcp_input+0x76c>)
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d037      	beq.n	800dfe2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800df72:	4b26      	ldr	r3, [pc, #152]	; (800e00c <tcp_input+0x76c>)
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	4618      	mov	r0, r3
 800df78:	f7fd fd98 	bl	800baac <pbuf_free>
      inseg.p = NULL;
 800df7c:	4b23      	ldr	r3, [pc, #140]	; (800e00c <tcp_input+0x76c>)
 800df7e:	2200      	movs	r2, #0
 800df80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800df82:	e02e      	b.n	800dfe2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800df84:	4b22      	ldr	r3, [pc, #136]	; (800e010 <tcp_input+0x770>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	899b      	ldrh	r3, [r3, #12]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fc fbb5 	bl	800a6fc <lwip_htons>
 800df92:	4603      	mov	r3, r0
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d115      	bne.n	800dfc8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800df9c:	4b1d      	ldr	r3, [pc, #116]	; (800e014 <tcp_input+0x774>)
 800df9e:	6818      	ldr	r0, [r3, #0]
 800dfa0:	4b1d      	ldr	r3, [pc, #116]	; (800e018 <tcp_input+0x778>)
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b1d      	ldr	r3, [pc, #116]	; (800e01c <tcp_input+0x77c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfac:	4b18      	ldr	r3, [pc, #96]	; (800e010 <tcp_input+0x770>)
 800dfae:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfb0:	885b      	ldrh	r3, [r3, #2]
 800dfb2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfb4:	4a16      	ldr	r2, [pc, #88]	; (800e010 <tcp_input+0x770>)
 800dfb6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfb8:	8812      	ldrh	r2, [r2, #0]
 800dfba:	b292      	uxth	r2, r2
 800dfbc:	9201      	str	r2, [sp, #4]
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	4b17      	ldr	r3, [pc, #92]	; (800e020 <tcp_input+0x780>)
 800dfc2:	4a18      	ldr	r2, [pc, #96]	; (800e024 <tcp_input+0x784>)
 800dfc4:	f002 ffdc 	bl	8010f80 <tcp_rst>
    pbuf_free(p);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7fd fd6f 	bl	800baac <pbuf_free>
  return;
 800dfce:	e008      	b.n	800dfe2 <tcp_input+0x742>
    goto dropped;
 800dfd0:	bf00      	nop
 800dfd2:	e002      	b.n	800dfda <tcp_input+0x73a>
dropped:
 800dfd4:	bf00      	nop
 800dfd6:	e000      	b.n	800dfda <tcp_input+0x73a>
      goto dropped;
 800dfd8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7fd fd66 	bl	800baac <pbuf_free>
 800dfe0:	e000      	b.n	800dfe4 <tcp_input+0x744>
  return;
 800dfe2:	bf00      	nop
}
 800dfe4:	3724      	adds	r7, #36	; 0x24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd90      	pop	{r4, r7, pc}
 800dfea:	bf00      	nop
 800dfec:	2000f770 	.word	0x2000f770
 800dff0:	20008909 	.word	0x20008909
 800dff4:	2000f75c 	.word	0x2000f75c
 800dff8:	20008904 	.word	0x20008904
 800dffc:	2000890c 	.word	0x2000890c
 800e000:	08018d4c 	.word	0x08018d4c
 800e004:	08018ee8 	.word	0x08018ee8
 800e008:	08018d90 	.word	0x08018d90
 800e00c:	200088dc 	.word	0x200088dc
 800e010:	200088ec 	.word	0x200088ec
 800e014:	20008900 	.word	0x20008900
 800e018:	20008906 	.word	0x20008906
 800e01c:	200088fc 	.word	0x200088fc
 800e020:	2000c03c 	.word	0x2000c03c
 800e024:	2000c040 	.word	0x2000c040

0800e028 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e030:	4b14      	ldr	r3, [pc, #80]	; (800e084 <tcp_input_delayed_close+0x5c>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	f003 0310 	and.w	r3, r3, #16
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01d      	beq.n	800e078 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	7e9b      	ldrb	r3, [r3, #26]
 800e040:	f003 0310 	and.w	r3, r3, #16
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10d      	bne.n	800e064 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d008      	beq.n	800e064 <tcp_input_delayed_close+0x3c>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	6912      	ldr	r2, [r2, #16]
 800e05c:	f06f 010e 	mvn.w	r1, #14
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	4808      	ldr	r0, [pc, #32]	; (800e088 <tcp_input_delayed_close+0x60>)
 800e068:	f7ff fb00 	bl	800d66c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	2001      	movs	r0, #1
 800e070:	f7fc ffba 	bl	800afe8 <memp_free>
    return 1;
 800e074:	2301      	movs	r3, #1
 800e076:	e000      	b.n	800e07a <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	20008909 	.word	0x20008909
 800e088:	2000f75c 	.word	0x2000f75c

0800e08c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e094:	4b64      	ldr	r3, [pc, #400]	; (800e228 <tcp_listen_input+0x19c>)
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 0304 	and.w	r3, r3, #4
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 80bc 	bne.w	800e21a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e0a2:	4b61      	ldr	r3, [pc, #388]	; (800e228 <tcp_listen_input+0x19c>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	f003 0310 	and.w	r3, r3, #16
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d016      	beq.n	800e0dc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0ae:	4b5f      	ldr	r3, [pc, #380]	; (800e22c <tcp_listen_input+0x1a0>)
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	4b5f      	ldr	r3, [pc, #380]	; (800e230 <tcp_listen_input+0x1a4>)
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	4b5e      	ldr	r3, [pc, #376]	; (800e234 <tcp_listen_input+0x1a8>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0be:	4b5e      	ldr	r3, [pc, #376]	; (800e238 <tcp_listen_input+0x1ac>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0c2:	885b      	ldrh	r3, [r3, #2]
 800e0c4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0c6:	4a5c      	ldr	r2, [pc, #368]	; (800e238 <tcp_listen_input+0x1ac>)
 800e0c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0ca:	8812      	ldrh	r2, [r2, #0]
 800e0cc:	b292      	uxth	r2, r2
 800e0ce:	9201      	str	r2, [sp, #4]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	4b5a      	ldr	r3, [pc, #360]	; (800e23c <tcp_listen_input+0x1b0>)
 800e0d4:	4a5a      	ldr	r2, [pc, #360]	; (800e240 <tcp_listen_input+0x1b4>)
 800e0d6:	f002 ff53 	bl	8010f80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e0da:	e0a0      	b.n	800e21e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800e0dc:	4b52      	ldr	r3, [pc, #328]	; (800e228 <tcp_listen_input+0x19c>)
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 809a 	beq.w	800e21e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	7d5b      	ldrb	r3, [r3, #21]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff f938 	bl	800d364 <tcp_alloc>
 800e0f4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d111      	bne.n	800e120 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00a      	beq.n	800e11a <tcp_listen_input+0x8e>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	6910      	ldr	r0, [r2, #16]
 800e10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e110:	2100      	movs	r1, #0
 800e112:	4798      	blx	r3
 800e114:	4603      	mov	r3, r0
 800e116:	73bb      	strb	r3, [r7, #14]
      return;
 800e118:	e082      	b.n	800e220 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e11a:	23f0      	movs	r3, #240	; 0xf0
 800e11c:	73bb      	strb	r3, [r7, #14]
      return;
 800e11e:	e07f      	b.n	800e220 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e120:	4b48      	ldr	r3, [pc, #288]	; (800e244 <tcp_listen_input+0x1b8>)
 800e122:	695a      	ldr	r2, [r3, #20]
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e128:	4b46      	ldr	r3, [pc, #280]	; (800e244 <tcp_listen_input+0x1b8>)
 800e12a:	691a      	ldr	r2, [r3, #16]
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	8ada      	ldrh	r2, [r3, #22]
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e138:	4b3f      	ldr	r3, [pc, #252]	; (800e238 <tcp_listen_input+0x1ac>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	b29a      	uxth	r2, r3
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2203      	movs	r2, #3
 800e148:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e14a:	4b3a      	ldr	r3, [pc, #232]	; (800e234 <tcp_listen_input+0x1a8>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	1c5a      	adds	r2, r3, #1
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e15c:	6978      	ldr	r0, [r7, #20]
 800e15e:	f7ff fb01 	bl	800d764 <tcp_next_iss>
 800e162:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e17c:	4b2d      	ldr	r3, [pc, #180]	; (800e234 <tcp_listen_input+0x1a8>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	1e5a      	subs	r2, r3, #1
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691a      	ldr	r2, [r3, #16]
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7a1b      	ldrb	r3, [r3, #8]
 800e198:	f003 030c 	and.w	r3, r3, #12
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e1a2:	4b29      	ldr	r3, [pc, #164]	; (800e248 <tcp_listen_input+0x1bc>)
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	60da      	str	r2, [r3, #12]
 800e1aa:	4a27      	ldr	r2, [pc, #156]	; (800e248 <tcp_listen_input+0x1bc>)
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	f003 f936 	bl	8011420 <tcp_timer_needed>
 800e1b4:	4b25      	ldr	r3, [pc, #148]	; (800e24c <tcp_listen_input+0x1c0>)
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f001 fd14 	bl	800fbe8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e1c0:	4b1d      	ldr	r3, [pc, #116]	; (800e238 <tcp_listen_input+0x1ac>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	89db      	ldrh	r3, [r3, #14]
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	f7ff fad5 	bl	800d794 <tcp_eff_send_mss_impl>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e1f2:	2112      	movs	r1, #18
 800e1f4:	6978      	ldr	r0, [r7, #20]
 800e1f6:	f002 fae1 	bl	80107bc <tcp_enqueue_flags>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800e206:	2100      	movs	r1, #0
 800e208:	6978      	ldr	r0, [r7, #20]
 800e20a:	f7fe f8f3 	bl	800c3f4 <tcp_abandon>
      return;
 800e20e:	e007      	b.n	800e220 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800e210:	6978      	ldr	r0, [r7, #20]
 800e212:	f002 fc2b 	bl	8010a6c <tcp_output>
  return;
 800e216:	bf00      	nop
 800e218:	e001      	b.n	800e21e <tcp_listen_input+0x192>
    return;
 800e21a:	bf00      	nop
 800e21c:	e000      	b.n	800e220 <tcp_listen_input+0x194>
  return;
 800e21e:	bf00      	nop
}
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20008908 	.word	0x20008908
 800e22c:	20008900 	.word	0x20008900
 800e230:	20008906 	.word	0x20008906
 800e234:	200088fc 	.word	0x200088fc
 800e238:	200088ec 	.word	0x200088ec
 800e23c:	2000c03c 	.word	0x2000c03c
 800e240:	2000c040 	.word	0x2000c040
 800e244:	2000c02c 	.word	0x2000c02c
 800e248:	2000f75c 	.word	0x2000f75c
 800e24c:	2000f758 	.word	0x2000f758

0800e250 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af02      	add	r7, sp, #8
 800e256:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e258:	4b29      	ldr	r3, [pc, #164]	; (800e300 <tcp_timewait_input+0xb0>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	f003 0304 	and.w	r3, r3, #4
 800e260:	2b00      	cmp	r3, #0
 800e262:	d147      	bne.n	800e2f4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e264:	4b26      	ldr	r3, [pc, #152]	; (800e300 <tcp_timewait_input+0xb0>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d027      	beq.n	800e2c0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e270:	4b24      	ldr	r3, [pc, #144]	; (800e304 <tcp_timewait_input+0xb4>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	db2a      	blt.n	800e2d4 <tcp_timewait_input+0x84>
 800e27e:	4b21      	ldr	r3, [pc, #132]	; (800e304 <tcp_timewait_input+0xb4>)
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e28a:	440b      	add	r3, r1
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	2b00      	cmp	r3, #0
 800e290:	dc20      	bgt.n	800e2d4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e292:	4b1d      	ldr	r3, [pc, #116]	; (800e308 <tcp_timewait_input+0xb8>)
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	4b1d      	ldr	r3, [pc, #116]	; (800e30c <tcp_timewait_input+0xbc>)
 800e298:	881b      	ldrh	r3, [r3, #0]
 800e29a:	461a      	mov	r2, r3
 800e29c:	4b19      	ldr	r3, [pc, #100]	; (800e304 <tcp_timewait_input+0xb4>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2a2:	4b1b      	ldr	r3, [pc, #108]	; (800e310 <tcp_timewait_input+0xc0>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2a6:	885b      	ldrh	r3, [r3, #2]
 800e2a8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2aa:	4a19      	ldr	r2, [pc, #100]	; (800e310 <tcp_timewait_input+0xc0>)
 800e2ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ae:	8812      	ldrh	r2, [r2, #0]
 800e2b0:	b292      	uxth	r2, r2
 800e2b2:	9201      	str	r2, [sp, #4]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	4b17      	ldr	r3, [pc, #92]	; (800e314 <tcp_timewait_input+0xc4>)
 800e2b8:	4a17      	ldr	r2, [pc, #92]	; (800e318 <tcp_timewait_input+0xc8>)
 800e2ba:	f002 fe61 	bl	8010f80 <tcp_rst>
      return;
 800e2be:	e01c      	b.n	800e2fa <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800e2c0:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <tcp_timewait_input+0xb0>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d003      	beq.n	800e2d4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e2cc:	4b13      	ldr	r3, [pc, #76]	; (800e31c <tcp_timewait_input+0xcc>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2d4:	4b0d      	ldr	r3, [pc, #52]	; (800e30c <tcp_timewait_input+0xbc>)
 800e2d6:	881b      	ldrh	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00d      	beq.n	800e2f8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	7e9b      	ldrb	r3, [r3, #26]
 800e2e0:	f043 0302 	orr.w	r3, r3, #2
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f002 fbbe 	bl	8010a6c <tcp_output>
  }
  return;
 800e2f0:	bf00      	nop
 800e2f2:	e001      	b.n	800e2f8 <tcp_timewait_input+0xa8>
    return;
 800e2f4:	bf00      	nop
 800e2f6:	e000      	b.n	800e2fa <tcp_timewait_input+0xaa>
  return;
 800e2f8:	bf00      	nop
}
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20008908 	.word	0x20008908
 800e304:	200088fc 	.word	0x200088fc
 800e308:	20008900 	.word	0x20008900
 800e30c:	20008906 	.word	0x20008906
 800e310:	200088ec 	.word	0x200088ec
 800e314:	2000c03c 	.word	0x2000c03c
 800e318:	2000c040 	.word	0x2000c040
 800e31c:	2000f760 	.word	0x2000f760

0800e320 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af02      	add	r7, sp, #8
 800e326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e330:	4ba4      	ldr	r3, [pc, #656]	; (800e5c4 <tcp_process+0x2a4>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	f003 0304 	and.w	r3, r3, #4
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d04e      	beq.n	800e3da <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	7d1b      	ldrb	r3, [r3, #20]
 800e340:	2b02      	cmp	r3, #2
 800e342:	d108      	bne.n	800e356 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e348:	4b9f      	ldr	r3, [pc, #636]	; (800e5c8 <tcp_process+0x2a8>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d123      	bne.n	800e398 <tcp_process+0x78>
        acceptable = 1;
 800e350:	2301      	movs	r3, #1
 800e352:	76fb      	strb	r3, [r7, #27]
 800e354:	e020      	b.n	800e398 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e35a:	4b9c      	ldr	r3, [pc, #624]	; (800e5cc <tcp_process+0x2ac>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d102      	bne.n	800e368 <tcp_process+0x48>
        acceptable = 1;
 800e362:	2301      	movs	r3, #1
 800e364:	76fb      	strb	r3, [r7, #27]
 800e366:	e017      	b.n	800e398 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e368:	4b98      	ldr	r3, [pc, #608]	; (800e5cc <tcp_process+0x2ac>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	db10      	blt.n	800e398 <tcp_process+0x78>
 800e376:	4b95      	ldr	r3, [pc, #596]	; (800e5cc <tcp_process+0x2ac>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e382:	440b      	add	r3, r1
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	dc06      	bgt.n	800e398 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	7e9b      	ldrb	r3, [r3, #26]
 800e38e:	f043 0302 	orr.w	r3, r3, #2
 800e392:	b2da      	uxtb	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e398:	7efb      	ldrb	r3, [r7, #27]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d01b      	beq.n	800e3d6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7d1b      	ldrb	r3, [r3, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <tcp_process+0x94>
 800e3a6:	4b8a      	ldr	r3, [pc, #552]	; (800e5d0 <tcp_process+0x2b0>)
 800e3a8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e3ac:	4989      	ldr	r1, [pc, #548]	; (800e5d4 <tcp_process+0x2b4>)
 800e3ae:	488a      	ldr	r0, [pc, #552]	; (800e5d8 <tcp_process+0x2b8>)
 800e3b0:	f008 f88c 	bl	80164cc <iprintf>
      recv_flags |= TF_RESET;
 800e3b4:	4b89      	ldr	r3, [pc, #548]	; (800e5dc <tcp_process+0x2bc>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	f043 0308 	orr.w	r3, r3, #8
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	4b87      	ldr	r3, [pc, #540]	; (800e5dc <tcp_process+0x2bc>)
 800e3c0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7e9b      	ldrb	r3, [r3, #26]
 800e3c6:	f023 0301 	bic.w	r3, r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800e3d0:	f06f 030d 	mvn.w	r3, #13
 800e3d4:	e34d      	b.n	800ea72 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e34b      	b.n	800ea72 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e3da:	4b7a      	ldr	r3, [pc, #488]	; (800e5c4 <tcp_process+0x2a4>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 0302 	and.w	r3, r3, #2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d010      	beq.n	800e408 <tcp_process+0xe8>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	d00c      	beq.n	800e408 <tcp_process+0xe8>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	d008      	beq.n	800e408 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7e9b      	ldrb	r3, [r3, #26]
 800e3fa:	f043 0302 	orr.w	r3, r3, #2
 800e3fe:	b2da      	uxtb	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	e334      	b.n	800ea72 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7e9b      	ldrb	r3, [r3, #26]
 800e40c:	f003 0310 	and.w	r3, r3, #16
 800e410:	2b00      	cmp	r3, #0
 800e412:	d103      	bne.n	800e41c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e414:	4b72      	ldr	r3, [pc, #456]	; (800e5e0 <tcp_process+0x2c0>)
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f001 fbdf 	bl	800fbe8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	3b02      	subs	r3, #2
 800e430:	2b07      	cmp	r3, #7
 800e432:	f200 830e 	bhi.w	800ea52 <tcp_process+0x732>
 800e436:	a201      	add	r2, pc, #4	; (adr r2, 800e43c <tcp_process+0x11c>)
 800e438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43c:	0800e45d 	.word	0x0800e45d
 800e440:	0800e655 	.word	0x0800e655
 800e444:	0800e7ad 	.word	0x0800e7ad
 800e448:	0800e7d7 	.word	0x0800e7d7
 800e44c:	0800e901 	.word	0x0800e901
 800e450:	0800e7ad 	.word	0x0800e7ad
 800e454:	0800e98d 	.word	0x0800e98d
 800e458:	0800ea1d 	.word	0x0800ea1d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e45c:	4b59      	ldr	r3, [pc, #356]	; (800e5c4 <tcp_process+0x2a4>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f003 0310 	and.w	r3, r3, #16
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 80cb 	beq.w	800e600 <tcp_process+0x2e0>
 800e46a:	4b56      	ldr	r3, [pc, #344]	; (800e5c4 <tcp_process+0x2a4>)
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	f003 0302 	and.w	r3, r3, #2
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 80c4 	beq.w	800e600 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	4b52      	ldr	r3, [pc, #328]	; (800e5c8 <tcp_process+0x2a8>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	429a      	cmp	r2, r3
 800e484:	f040 80bc 	bne.w	800e600 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800e488:	4b50      	ldr	r3, [pc, #320]	; (800e5cc <tcp_process+0x2ac>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800e49a:	4b4b      	ldr	r3, [pc, #300]	; (800e5c8 <tcp_process+0x2a8>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800e4a2:	4b50      	ldr	r3, [pc, #320]	; (800e5e4 <tcp_process+0x2c4>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	89db      	ldrh	r3, [r3, #14]
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e4bc:	4b43      	ldr	r3, [pc, #268]	; (800e5cc <tcp_process+0x2ac>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	1e5a      	subs	r2, r3, #1
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2204      	movs	r2, #4
 800e4ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	f7ff f95c 	bl	800d794 <tcp_eff_send_mss_impl>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	461a      	mov	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4e8:	005b      	lsls	r3, r3, #1
 800e4ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	bf38      	it	cc
 800e4f2:	461a      	movcc	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	bf28      	it	cs
 800e4fe:	4613      	movcs	r3, r2
 800e500:	b29a      	uxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d106      	bne.n	800e520 <tcp_process+0x200>
 800e512:	4b2f      	ldr	r3, [pc, #188]	; (800e5d0 <tcp_process+0x2b0>)
 800e514:	f240 321a 	movw	r2, #794	; 0x31a
 800e518:	4933      	ldr	r1, [pc, #204]	; (800e5e8 <tcp_process+0x2c8>)
 800e51a:	482f      	ldr	r0, [pc, #188]	; (800e5d8 <tcp_process+0x2b8>)
 800e51c:	f007 ffd6 	bl	80164cc <iprintf>
      --pcb->snd_queuelen;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e526:	3b01      	subs	r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e534:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d111      	bne.n	800e560 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e540:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_process+0x236>
 800e548:	4b21      	ldr	r3, [pc, #132]	; (800e5d0 <tcp_process+0x2b0>)
 800e54a:	f240 3222 	movw	r2, #802	; 0x322
 800e54e:	4927      	ldr	r1, [pc, #156]	; (800e5ec <tcp_process+0x2cc>)
 800e550:	4821      	ldr	r0, [pc, #132]	; (800e5d8 <tcp_process+0x2b8>)
 800e552:	f007 ffbb 	bl	80164cc <iprintf>
        pcb->unsent = rseg->next;
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	669a      	str	r2, [r3, #104]	; 0x68
 800e55e:	e003      	b.n	800e568 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800e568:	69f8      	ldr	r0, [r7, #28]
 800e56a:	f7fe fdda 	bl	800d122 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d104      	bne.n	800e580 <tcp_process+0x260>
        pcb->rtime = -1;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e57c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e57e:	e006      	b.n	800e58e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00a      	beq.n	800e5ae <tcp_process+0x28e>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	6910      	ldr	r0, [r2, #16]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	4798      	blx	r3
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	76bb      	strb	r3, [r7, #26]
 800e5ac:	e001      	b.n	800e5b2 <tcp_process+0x292>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800e5b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5b6:	f113 0f0d 	cmn.w	r3, #13
 800e5ba:	d119      	bne.n	800e5f0 <tcp_process+0x2d0>
        return ERR_ABRT;
 800e5bc:	f06f 030c 	mvn.w	r3, #12
 800e5c0:	e257      	b.n	800ea72 <tcp_process+0x752>
 800e5c2:	bf00      	nop
 800e5c4:	20008908 	.word	0x20008908
 800e5c8:	20008900 	.word	0x20008900
 800e5cc:	200088fc 	.word	0x200088fc
 800e5d0:	08018d4c 	.word	0x08018d4c
 800e5d4:	08018f04 	.word	0x08018f04
 800e5d8:	08018d90 	.word	0x08018d90
 800e5dc:	20008909 	.word	0x20008909
 800e5e0:	2000f760 	.word	0x2000f760
 800e5e4:	200088ec 	.word	0x200088ec
 800e5e8:	08018f24 	.word	0x08018f24
 800e5ec:	08018f3c 	.word	0x08018f3c
      }
      tcp_ack_now(pcb);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	7e9b      	ldrb	r3, [r3, #26]
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800e5fe:	e22a      	b.n	800ea56 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800e600:	4b9f      	ldr	r3, [pc, #636]	; (800e880 <tcp_process+0x560>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 0310 	and.w	r3, r3, #16
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 8224 	beq.w	800ea56 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e60e:	4b9d      	ldr	r3, [pc, #628]	; (800e884 <tcp_process+0x564>)
 800e610:	6818      	ldr	r0, [r3, #0]
 800e612:	4b9d      	ldr	r3, [pc, #628]	; (800e888 <tcp_process+0x568>)
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	461a      	mov	r2, r3
 800e618:	4b9c      	ldr	r3, [pc, #624]	; (800e88c <tcp_process+0x56c>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e61e:	4b9c      	ldr	r3, [pc, #624]	; (800e890 <tcp_process+0x570>)
 800e620:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e622:	885b      	ldrh	r3, [r3, #2]
 800e624:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e626:	4a9a      	ldr	r2, [pc, #616]	; (800e890 <tcp_process+0x570>)
 800e628:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e62a:	8812      	ldrh	r2, [r2, #0]
 800e62c:	b292      	uxth	r2, r2
 800e62e:	9201      	str	r2, [sp, #4]
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	4b98      	ldr	r3, [pc, #608]	; (800e894 <tcp_process+0x574>)
 800e634:	4a98      	ldr	r2, [pc, #608]	; (800e898 <tcp_process+0x578>)
 800e636:	f002 fca3 	bl	8010f80 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e640:	2b05      	cmp	r3, #5
 800e642:	f200 8208 	bhi.w	800ea56 <tcp_process+0x736>
        pcb->rtime = 0;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f002 fd0d 	bl	801106c <tcp_rexmit_rto>
    break;
 800e652:	e200      	b.n	800ea56 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800e654:	4b8a      	ldr	r3, [pc, #552]	; (800e880 <tcp_process+0x560>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	f003 0310 	and.w	r3, r3, #16
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 8091 	beq.w	800e784 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800e662:	4b88      	ldr	r3, [pc, #544]	; (800e884 <tcp_process+0x564>)
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	3b01      	subs	r3, #1
 800e66e:	2b00      	cmp	r3, #0
 800e670:	db71      	blt.n	800e756 <tcp_process+0x436>
 800e672:	4b84      	ldr	r3, [pc, #528]	; (800e884 <tcp_process+0x564>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	dc6a      	bgt.n	800e756 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2204      	movs	r2, #4
 800e684:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00b      	beq.n	800e6a6 <tcp_process+0x386>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d106      	bne.n	800e6a6 <tcp_process+0x386>
 800e698:	4b80      	ldr	r3, [pc, #512]	; (800e89c <tcp_process+0x57c>)
 800e69a:	f240 3251 	movw	r2, #849	; 0x351
 800e69e:	4980      	ldr	r1, [pc, #512]	; (800e8a0 <tcp_process+0x580>)
 800e6a0:	4880      	ldr	r0, [pc, #512]	; (800e8a4 <tcp_process+0x584>)
 800e6a2:	f007 ff13 	bl	80164cc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d102      	bne.n	800e6b4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800e6ae:	23fa      	movs	r3, #250	; 0xfa
 800e6b0:	76bb      	strb	r3, [r7, #26]
 800e6b2:	e011      	b.n	800e6d8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <tcp_process+0x3b4>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	6910      	ldr	r0, [r2, #16]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	76bb      	strb	r3, [r7, #26]
 800e6d2:	e001      	b.n	800e6d8 <tcp_process+0x3b8>
 800e6d4:	23f0      	movs	r3, #240	; 0xf0
 800e6d6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800e6d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00a      	beq.n	800e6f6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800e6e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6e4:	f113 0f0d 	cmn.w	r3, #13
 800e6e8:	d002      	beq.n	800e6f0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7fd ff34 	bl	800c558 <tcp_abort>
          }
          return ERR_ABRT;
 800e6f0:	f06f 030c 	mvn.w	r3, #12
 800e6f4:	e1bd      	b.n	800ea72 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fa42 	bl	800eb80 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800e6fc:	4b6a      	ldr	r3, [pc, #424]	; (800e8a8 <tcp_process+0x588>)
 800e6fe:	881b      	ldrh	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d005      	beq.n	800e710 <tcp_process+0x3f0>
          recv_acked--;
 800e704:	4b68      	ldr	r3, [pc, #416]	; (800e8a8 <tcp_process+0x588>)
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	3b01      	subs	r3, #1
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	4b66      	ldr	r3, [pc, #408]	; (800e8a8 <tcp_process+0x588>)
 800e70e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e714:	005b      	lsls	r3, r3, #1
 800e716:	f241 121c 	movw	r2, #4380	; 0x111c
 800e71a:	429a      	cmp	r2, r3
 800e71c:	bf38      	it	cc
 800e71e:	461a      	movcc	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4293      	cmp	r3, r2
 800e728:	bf28      	it	cs
 800e72a:	4613      	movcs	r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800e734:	4b5d      	ldr	r3, [pc, #372]	; (800e8ac <tcp_process+0x58c>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	f003 0320 	and.w	r3, r3, #32
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d034      	beq.n	800e7aa <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7e9b      	ldrb	r3, [r3, #26]
 800e744:	f043 0302 	orr.w	r3, r3, #2
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2207      	movs	r2, #7
 800e752:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800e754:	e029      	b.n	800e7aa <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e756:	4b4b      	ldr	r3, [pc, #300]	; (800e884 <tcp_process+0x564>)
 800e758:	6818      	ldr	r0, [r3, #0]
 800e75a:	4b4b      	ldr	r3, [pc, #300]	; (800e888 <tcp_process+0x568>)
 800e75c:	881b      	ldrh	r3, [r3, #0]
 800e75e:	461a      	mov	r2, r3
 800e760:	4b4a      	ldr	r3, [pc, #296]	; (800e88c <tcp_process+0x56c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e766:	4b4a      	ldr	r3, [pc, #296]	; (800e890 <tcp_process+0x570>)
 800e768:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e76a:	885b      	ldrh	r3, [r3, #2]
 800e76c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e76e:	4a48      	ldr	r2, [pc, #288]	; (800e890 <tcp_process+0x570>)
 800e770:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e772:	8812      	ldrh	r2, [r2, #0]
 800e774:	b292      	uxth	r2, r2
 800e776:	9201      	str	r2, [sp, #4]
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	4b46      	ldr	r3, [pc, #280]	; (800e894 <tcp_process+0x574>)
 800e77c:	4a46      	ldr	r2, [pc, #280]	; (800e898 <tcp_process+0x578>)
 800e77e:	f002 fbff 	bl	8010f80 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800e782:	e16a      	b.n	800ea5a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e784:	4b3e      	ldr	r3, [pc, #248]	; (800e880 <tcp_process+0x560>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 0302 	and.w	r3, r3, #2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 8164 	beq.w	800ea5a <tcp_process+0x73a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	4b3c      	ldr	r3, [pc, #240]	; (800e88c <tcp_process+0x56c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	f040 815c 	bne.w	800ea5a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f002 fc98 	bl	80110d8 <tcp_rexmit>
    break;
 800e7a8:	e157      	b.n	800ea5a <tcp_process+0x73a>
 800e7aa:	e156      	b.n	800ea5a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f9e7 	bl	800eb80 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e7b2:	4b3e      	ldr	r3, [pc, #248]	; (800e8ac <tcp_process+0x58c>)
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	f003 0320 	and.w	r3, r3, #32
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 814f 	beq.w	800ea5e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	7e9b      	ldrb	r3, [r3, #26]
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	b2da      	uxtb	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2207      	movs	r2, #7
 800e7d2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e7d4:	e143      	b.n	800ea5e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f9d2 	bl	800eb80 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e7dc:	4b33      	ldr	r3, [pc, #204]	; (800e8ac <tcp_process+0x58c>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	f003 0320 	and.w	r3, r3, #32
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d074      	beq.n	800e8d2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7e8:	4b25      	ldr	r3, [pc, #148]	; (800e880 <tcp_process+0x560>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	f003 0310 	and.w	r3, r3, #16
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d063      	beq.n	800e8bc <tcp_process+0x59c>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7f8:	4b22      	ldr	r3, [pc, #136]	; (800e884 <tcp_process+0x564>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d15d      	bne.n	800e8bc <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e804:	2b00      	cmp	r3, #0
 800e806:	d159      	bne.n	800e8bc <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7e9b      	ldrb	r3, [r3, #26]
 800e80c:	f043 0302 	orr.w	r3, r3, #2
 800e810:	b2da      	uxtb	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7fe fee6 	bl	800d5e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e81c:	4b24      	ldr	r3, [pc, #144]	; (800e8b0 <tcp_process+0x590>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d105      	bne.n	800e832 <tcp_process+0x512>
 800e826:	4b22      	ldr	r3, [pc, #136]	; (800e8b0 <tcp_process+0x590>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	4a20      	ldr	r2, [pc, #128]	; (800e8b0 <tcp_process+0x590>)
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	e013      	b.n	800e85a <tcp_process+0x53a>
 800e832:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <tcp_process+0x590>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	617b      	str	r3, [r7, #20]
 800e838:	e00c      	b.n	800e854 <tcp_process+0x534>
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d104      	bne.n	800e84e <tcp_process+0x52e>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	68da      	ldr	r2, [r3, #12]
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	60da      	str	r2, [r3, #12]
 800e84c:	e005      	b.n	800e85a <tcp_process+0x53a>
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	617b      	str	r3, [r7, #20]
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1ef      	bne.n	800e83a <tcp_process+0x51a>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	60da      	str	r2, [r3, #12]
 800e860:	4b14      	ldr	r3, [pc, #80]	; (800e8b4 <tcp_process+0x594>)
 800e862:	2201      	movs	r2, #1
 800e864:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	220a      	movs	r2, #10
 800e86a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e86c:	4b12      	ldr	r3, [pc, #72]	; (800e8b8 <tcp_process+0x598>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	60da      	str	r2, [r3, #12]
 800e874:	4a10      	ldr	r2, [pc, #64]	; (800e8b8 <tcp_process+0x598>)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	f002 fdd1 	bl	8011420 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800e87e:	e0f0      	b.n	800ea62 <tcp_process+0x742>
 800e880:	20008908 	.word	0x20008908
 800e884:	20008900 	.word	0x20008900
 800e888:	20008906 	.word	0x20008906
 800e88c:	200088fc 	.word	0x200088fc
 800e890:	200088ec 	.word	0x200088ec
 800e894:	2000c03c 	.word	0x2000c03c
 800e898:	2000c040 	.word	0x2000c040
 800e89c:	08018d4c 	.word	0x08018d4c
 800e8a0:	08018f50 	.word	0x08018f50
 800e8a4:	08018d90 	.word	0x08018d90
 800e8a8:	20008904 	.word	0x20008904
 800e8ac:	20008909 	.word	0x20008909
 800e8b0:	2000f75c 	.word	0x2000f75c
 800e8b4:	2000f758 	.word	0x2000f758
 800e8b8:	2000f76c 	.word	0x2000f76c
        tcp_ack_now(pcb);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7e9b      	ldrb	r3, [r3, #26]
 800e8c0:	f043 0302 	orr.w	r3, r3, #2
 800e8c4:	b2da      	uxtb	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2208      	movs	r2, #8
 800e8ce:	751a      	strb	r2, [r3, #20]
    break;
 800e8d0:	e0c7      	b.n	800ea62 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8d2:	4b6a      	ldr	r3, [pc, #424]	; (800ea7c <tcp_process+0x75c>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	f003 0310 	and.w	r3, r3, #16
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 80c1 	beq.w	800ea62 <tcp_process+0x742>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8e4:	4b66      	ldr	r3, [pc, #408]	; (800ea80 <tcp_process+0x760>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	f040 80ba 	bne.w	800ea62 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f040 80b5 	bne.w	800ea62 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2206      	movs	r2, #6
 800e8fc:	751a      	strb	r2, [r3, #20]
    break;
 800e8fe:	e0b0      	b.n	800ea62 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 f93d 	bl	800eb80 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e906:	4b5f      	ldr	r3, [pc, #380]	; (800ea84 <tcp_process+0x764>)
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	f003 0320 	and.w	r3, r3, #32
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f000 80a9 	beq.w	800ea66 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7e9b      	ldrb	r3, [r3, #26]
 800e918:	f043 0302 	orr.w	r3, r3, #2
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7fe fe60 	bl	800d5e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e928:	4b57      	ldr	r3, [pc, #348]	; (800ea88 <tcp_process+0x768>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d105      	bne.n	800e93e <tcp_process+0x61e>
 800e932:	4b55      	ldr	r3, [pc, #340]	; (800ea88 <tcp_process+0x768>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	4a53      	ldr	r2, [pc, #332]	; (800ea88 <tcp_process+0x768>)
 800e93a:	6013      	str	r3, [r2, #0]
 800e93c:	e013      	b.n	800e966 <tcp_process+0x646>
 800e93e:	4b52      	ldr	r3, [pc, #328]	; (800ea88 <tcp_process+0x768>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	613b      	str	r3, [r7, #16]
 800e944:	e00c      	b.n	800e960 <tcp_process+0x640>
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d104      	bne.n	800e95a <tcp_process+0x63a>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	68da      	ldr	r2, [r3, #12]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	60da      	str	r2, [r3, #12]
 800e958:	e005      	b.n	800e966 <tcp_process+0x646>
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	613b      	str	r3, [r7, #16]
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1ef      	bne.n	800e946 <tcp_process+0x626>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	60da      	str	r2, [r3, #12]
 800e96c:	4b47      	ldr	r3, [pc, #284]	; (800ea8c <tcp_process+0x76c>)
 800e96e:	2201      	movs	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	220a      	movs	r2, #10
 800e976:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800e978:	4b45      	ldr	r3, [pc, #276]	; (800ea90 <tcp_process+0x770>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	60da      	str	r2, [r3, #12]
 800e980:	4a43      	ldr	r2, [pc, #268]	; (800ea90 <tcp_process+0x770>)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	f002 fd4b 	bl	8011420 <tcp_timer_needed>
    }
    break;
 800e98a:	e06c      	b.n	800ea66 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 f8f7 	bl	800eb80 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e992:	4b3a      	ldr	r3, [pc, #232]	; (800ea7c <tcp_process+0x75c>)
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	f003 0310 	and.w	r3, r3, #16
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d065      	beq.n	800ea6a <tcp_process+0x74a>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e9a2:	4b37      	ldr	r3, [pc, #220]	; (800ea80 <tcp_process+0x760>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d15f      	bne.n	800ea6a <tcp_process+0x74a>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d15b      	bne.n	800ea6a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f7fe fe18 	bl	800d5e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e9b8:	4b33      	ldr	r3, [pc, #204]	; (800ea88 <tcp_process+0x768>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	687a      	ldr	r2, [r7, #4]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d105      	bne.n	800e9ce <tcp_process+0x6ae>
 800e9c2:	4b31      	ldr	r3, [pc, #196]	; (800ea88 <tcp_process+0x768>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	4a2f      	ldr	r2, [pc, #188]	; (800ea88 <tcp_process+0x768>)
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	e013      	b.n	800e9f6 <tcp_process+0x6d6>
 800e9ce:	4b2e      	ldr	r3, [pc, #184]	; (800ea88 <tcp_process+0x768>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	60fb      	str	r3, [r7, #12]
 800e9d4:	e00c      	b.n	800e9f0 <tcp_process+0x6d0>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d104      	bne.n	800e9ea <tcp_process+0x6ca>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	68da      	ldr	r2, [r3, #12]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	60da      	str	r2, [r3, #12]
 800e9e8:	e005      	b.n	800e9f6 <tcp_process+0x6d6>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1ef      	bne.n	800e9d6 <tcp_process+0x6b6>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	60da      	str	r2, [r3, #12]
 800e9fc:	4b23      	ldr	r3, [pc, #140]	; (800ea8c <tcp_process+0x76c>)
 800e9fe:	2201      	movs	r2, #1
 800ea00:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	220a      	movs	r2, #10
 800ea06:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ea08:	4b21      	ldr	r3, [pc, #132]	; (800ea90 <tcp_process+0x770>)
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	60da      	str	r2, [r3, #12]
 800ea10:	4a1f      	ldr	r2, [pc, #124]	; (800ea90 <tcp_process+0x770>)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	f002 fd03 	bl	8011420 <tcp_timer_needed>
    }
    break;
 800ea1a:	e026      	b.n	800ea6a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 f8af 	bl	800eb80 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea22:	4b16      	ldr	r3, [pc, #88]	; (800ea7c <tcp_process+0x75c>)
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	f003 0310 	and.w	r3, r3, #16
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d01f      	beq.n	800ea6e <tcp_process+0x74e>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea32:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <tcp_process+0x760>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d119      	bne.n	800ea6e <tcp_process+0x74e>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d115      	bne.n	800ea6e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800ea42:	4b10      	ldr	r3, [pc, #64]	; (800ea84 <tcp_process+0x764>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	f043 0310 	orr.w	r3, r3, #16
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <tcp_process+0x764>)
 800ea4e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ea50:	e00d      	b.n	800ea6e <tcp_process+0x74e>
  default:
    break;
 800ea52:	bf00      	nop
 800ea54:	e00c      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea56:	bf00      	nop
 800ea58:	e00a      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea5a:	bf00      	nop
 800ea5c:	e008      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea5e:	bf00      	nop
 800ea60:	e006      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea62:	bf00      	nop
 800ea64:	e004      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea66:	bf00      	nop
 800ea68:	e002      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea6a:	bf00      	nop
 800ea6c:	e000      	b.n	800ea70 <tcp_process+0x750>
    break;
 800ea6e:	bf00      	nop
  }
  return ERR_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3720      	adds	r7, #32
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20008908 	.word	0x20008908
 800ea80:	20008900 	.word	0x20008900
 800ea84:	20008909 	.word	0x20008909
 800ea88:	2000f75c 	.word	0x2000f75c
 800ea8c:	2000f758 	.word	0x2000f758
 800ea90:	2000f76c 	.word	0x2000f76c

0800ea94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ea94:	b590      	push	{r4, r7, lr}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	899b      	ldrh	r3, [r3, #12]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fb fe28 	bl	800a6fc <lwip_htons>
 800eaac:	4603      	mov	r3, r0
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d027      	beq.n	800eb06 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eab6:	6838      	ldr	r0, [r7, #0]
 800eab8:	f7fe fb1f 	bl	800d0fa <tcp_segs_free>
    next = NULL;
 800eabc:	2300      	movs	r3, #0
 800eabe:	603b      	str	r3, [r7, #0]
 800eac0:	e055      	b.n	800eb6e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	899b      	ldrh	r3, [r3, #12]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fb fe16 	bl	800a6fc <lwip_htons>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00d      	beq.n	800eaf6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	899b      	ldrh	r3, [r3, #12]
 800eae0:	b29c      	uxth	r4, r3
 800eae2:	2001      	movs	r0, #1
 800eae4:	f7fb fe0a 	bl	800a6fc <lwip_htons>
 800eae8:	4603      	mov	r3, r0
 800eaea:	461a      	mov	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	4322      	orrs	r2, r4
 800eaf2:	b292      	uxth	r2, r2
 800eaf4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7fe fb0e 	bl	800d122 <tcp_seg_free>
    while (next &&
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00e      	beq.n	800eb2a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	891b      	ldrh	r3, [r3, #8]
 800eb10:	461a      	mov	r2, r3
 800eb12:	4b1a      	ldr	r3, [pc, #104]	; (800eb7c <tcp_oos_insert_segment+0xe8>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	441a      	add	r2, r3
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	6839      	ldr	r1, [r7, #0]
 800eb20:	8909      	ldrh	r1, [r1, #8]
 800eb22:	440b      	add	r3, r1
 800eb24:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	dacb      	bge.n	800eac2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d01e      	beq.n	800eb6e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	891b      	ldrh	r3, [r3, #8]
 800eb34:	461a      	mov	r2, r3
 800eb36:	4b11      	ldr	r3, [pc, #68]	; (800eb7c <tcp_oos_insert_segment+0xe8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	441a      	add	r2, r3
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dd12      	ble.n	800eb6e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	4b0a      	ldr	r3, [pc, #40]	; (800eb7c <tcp_oos_insert_segment+0xe8>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	1ad3      	subs	r3, r2, r3
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	891b      	ldrh	r3, [r3, #8]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7fc fe2b 	bl	800b7c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	601a      	str	r2, [r3, #0]
}
 800eb74:	bf00      	nop
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd90      	pop	{r4, r7, pc}
 800eb7c:	200088fc 	.word	0x200088fc

0800eb80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	b08d      	sub	sp, #52	; 0x34
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7d1b      	ldrb	r3, [r3, #20]
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d806      	bhi.n	800eba2 <tcp_receive+0x22>
 800eb94:	4ba6      	ldr	r3, [pc, #664]	; (800ee30 <tcp_receive+0x2b0>)
 800eb96:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800eb9a:	49a6      	ldr	r1, [pc, #664]	; (800ee34 <tcp_receive+0x2b4>)
 800eb9c:	48a6      	ldr	r0, [pc, #664]	; (800ee38 <tcp_receive+0x2b8>)
 800eb9e:	f007 fc95 	bl	80164cc <iprintf>

  if (flags & TCP_ACK) {
 800eba2:	4ba6      	ldr	r3, [pc, #664]	; (800ee3c <tcp_receive+0x2bc>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0310 	and.w	r3, r3, #16
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f000 82bf 	beq.w	800f12e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebbc:	4413      	add	r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebc4:	4b9e      	ldr	r3, [pc, #632]	; (800ee40 <tcp_receive+0x2c0>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	db1b      	blt.n	800ec06 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebd2:	4b9b      	ldr	r3, [pc, #620]	; (800ee40 <tcp_receive+0x2c0>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d106      	bne.n	800ebe8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebde:	4b99      	ldr	r3, [pc, #612]	; (800ee44 <tcp_receive+0x2c4>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	db0e      	blt.n	800ec06 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebec:	4b95      	ldr	r3, [pc, #596]	; (800ee44 <tcp_receive+0x2c4>)
 800ebee:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d141      	bne.n	800ec78 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ebf4:	4b94      	ldr	r3, [pc, #592]	; (800ee48 <tcp_receive+0x2c8>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	89db      	ldrh	r3, [r3, #14]
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d938      	bls.n	800ec78 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ec06:	4b90      	ldr	r3, [pc, #576]	; (800ee48 <tcp_receive+0x2c8>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	89db      	ldrh	r3, [r3, #14]
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d205      	bcs.n	800ec30 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800ec30:	4b83      	ldr	r3, [pc, #524]	; (800ee40 <tcp_receive+0x2c0>)
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800ec38:	4b82      	ldr	r3, [pc, #520]	; (800ee44 <tcp_receive+0x2c4>)
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10d      	bne.n	800ec66 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d111      	bne.n	800ec78 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ec64:	e008      	b.n	800ec78 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d003      	beq.n	800ec78 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ec78:	4b72      	ldr	r3, [pc, #456]	; (800ee44 <tcp_receive+0x2c4>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	dc53      	bgt.n	800ed2e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800ec86:	4b71      	ldr	r3, [pc, #452]	; (800ee4c <tcp_receive+0x2cc>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d146      	bne.n	800ed1c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ec98:	4413      	add	r3, r2
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d13d      	bne.n	800ed1c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	db38      	blt.n	800ed1c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecae:	4b65      	ldr	r3, [pc, #404]	; (800ee44 <tcp_receive+0x2c4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d132      	bne.n	800ed1c <tcp_receive+0x19c>
              found_dupack = 1;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecc0:	2bff      	cmp	r3, #255	; 0xff
 800ecc2:	d007      	beq.n	800ecd4 <tcp_receive+0x154>
                ++pcb->dupacks;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecca:	3301      	adds	r3, #1
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	d916      	bls.n	800ed0c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ece8:	4413      	add	r3, r2
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d912      	bls.n	800ed1c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed00:	4413      	add	r3, r2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed0a:	e007      	b.n	800ed1c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed12:	2b03      	cmp	r3, #3
 800ed14:	d102      	bne.n	800ed1c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f002 fa2e 	bl	8011178 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f040 8169 	bne.w	800eff6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed2c:	e163      	b.n	800eff6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ed2e:	4b45      	ldr	r3, [pc, #276]	; (800ee44 <tcp_receive+0x2c4>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f2c0 8107 	blt.w	800ef4e <tcp_receive+0x3ce>
 800ed40:	4b40      	ldr	r3, [pc, #256]	; (800ee44 <tcp_receive+0x2c4>)
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f300 80ff 	bgt.w	800ef4e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7e9b      	ldrb	r3, [r3, #26]
 800ed54:	f003 0304 	and.w	r3, r3, #4
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00c      	beq.n	800ed76 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	7e9b      	ldrb	r3, [r3, #26]
 800ed60:	f023 0304 	bic.w	r3, r3, #4
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ed84:	10db      	asrs	r3, r3, #3
 800ed86:	b21b      	sxth	r3, r3
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	4413      	add	r3, r2
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	b21a      	sxth	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800eda6:	4b27      	ldr	r3, [pc, #156]	; (800ee44 <tcp_receive+0x2c4>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	7d1b      	ldrb	r3, [r3, #20]
 800edb2:	2b03      	cmp	r3, #3
 800edb4:	f240 8094 	bls.w	800eee0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d216      	bcs.n	800edf6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edd2:	4413      	add	r3, r2
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eddc:	429a      	cmp	r2, r3
 800edde:	d97f      	bls.n	800eee0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edea:	4413      	add	r3, r2
 800edec:	b29a      	uxth	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800edf4:	e074      	b.n	800eee0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee00:	4619      	mov	r1, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee06:	fb03 f301 	mul.w	r3, r3, r1
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800ee10:	fb93 f3f1 	sdiv	r3, r3, r1
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4413      	add	r3, r2
 800ee18:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee20:	8a7a      	ldrh	r2, [r7, #18]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d95c      	bls.n	800eee0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	8a7a      	ldrh	r2, [r7, #18]
 800ee2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800ee2e:	e057      	b.n	800eee0 <tcp_receive+0x360>
 800ee30:	08018d4c 	.word	0x08018d4c
 800ee34:	08018f70 	.word	0x08018f70
 800ee38:	08018d90 	.word	0x08018d90
 800ee3c:	20008908 	.word	0x20008908
 800ee40:	200088fc 	.word	0x200088fc
 800ee44:	20008900 	.word	0x20008900
 800ee48:	200088ec 	.word	0x200088ec
 800ee4c:	20008906 	.word	0x20008906
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee54:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7fc feb8 	bl	800bbe0 <pbuf_clen>
 800ee70:	4603      	mov	r3, r0
 800ee72:	429c      	cmp	r4, r3
 800ee74:	d206      	bcs.n	800ee84 <tcp_receive+0x304>
 800ee76:	4b70      	ldr	r3, [pc, #448]	; (800f038 <tcp_receive+0x4b8>)
 800ee78:	f240 429e 	movw	r2, #1182	; 0x49e
 800ee7c:	496f      	ldr	r1, [pc, #444]	; (800f03c <tcp_receive+0x4bc>)
 800ee7e:	4870      	ldr	r0, [pc, #448]	; (800f040 <tcp_receive+0x4c0>)
 800ee80:	f007 fb24 	bl	80164cc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fc fea9 	bl	800bbe0 <pbuf_clen>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	461a      	mov	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee98:	1a9b      	subs	r3, r3, r2
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	891a      	ldrh	r2, [r3, #8]
 800eea6:	4b67      	ldr	r3, [pc, #412]	; (800f044 <tcp_receive+0x4c4>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	4b65      	ldr	r3, [pc, #404]	; (800f044 <tcp_receive+0x4c4>)
 800eeb0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800eeb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeb4:	f7fe f935 	bl	800d122 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00e      	beq.n	800eee0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10a      	bne.n	800eee0 <tcp_receive+0x360>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <tcp_receive+0x360>
 800eed2:	4b59      	ldr	r3, [pc, #356]	; (800f038 <tcp_receive+0x4b8>)
 800eed4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800eed8:	495b      	ldr	r1, [pc, #364]	; (800f048 <tcp_receive+0x4c8>)
 800eeda:	4859      	ldr	r0, [pc, #356]	; (800f040 <tcp_receive+0x4c0>)
 800eedc:	f007 faf6 	bl	80164cc <iprintf>
      while (pcb->unacked != NULL &&
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d022      	beq.n	800ef2e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fb fc11 	bl	800a718 <lwip_htonl>
 800eef6:	4604      	mov	r4, r0
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eefc:	891b      	ldrh	r3, [r3, #8]
 800eefe:	461d      	mov	r5, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	899b      	ldrh	r3, [r3, #12]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fb fbf6 	bl	800a6fc <lwip_htons>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f003 0303 	and.w	r3, r3, #3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <tcp_receive+0x39e>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e000      	b.n	800ef20 <tcp_receive+0x3a0>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	442b      	add	r3, r5
 800ef22:	18e2      	adds	r2, r4, r3
 800ef24:	4b49      	ldr	r3, [pc, #292]	; (800f04c <tcp_receive+0x4cc>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	dd90      	ble.n	800ee50 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d104      	bne.n	800ef40 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef3c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ef3e:	e002      	b.n	800ef46 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	76da      	strb	r2, [r3, #27]
 800ef4c:	e002      	b.n	800ef54 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f001 fd30 	bl	80109b4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800ef54:	e04f      	b.n	800eff6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fc fe2d 	bl	800bbe0 <pbuf_clen>
 800ef86:	4603      	mov	r3, r0
 800ef88:	429c      	cmp	r4, r3
 800ef8a:	d206      	bcs.n	800ef9a <tcp_receive+0x41a>
 800ef8c:	4b2a      	ldr	r3, [pc, #168]	; (800f038 <tcp_receive+0x4b8>)
 800ef8e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef92:	492a      	ldr	r1, [pc, #168]	; (800f03c <tcp_receive+0x4bc>)
 800ef94:	482a      	ldr	r0, [pc, #168]	; (800f040 <tcp_receive+0x4c0>)
 800ef96:	f007 fa99 	bl	80164cc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	685b      	ldr	r3, [r3, #4]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fc fe1e 	bl	800bbe0 <pbuf_clen>
 800efa4:	4603      	mov	r3, r0
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efae:	1a9b      	subs	r3, r3, r2
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	891a      	ldrh	r2, [r3, #8]
 800efbc:	4b21      	ldr	r3, [pc, #132]	; (800f044 <tcp_receive+0x4c4>)
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	4b1f      	ldr	r3, [pc, #124]	; (800f044 <tcp_receive+0x4c4>)
 800efc6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800efc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efca:	f7fe f8aa 	bl	800d122 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00e      	beq.n	800eff6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10a      	bne.n	800eff6 <tcp_receive+0x476>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d106      	bne.n	800eff6 <tcp_receive+0x476>
 800efe8:	4b13      	ldr	r3, [pc, #76]	; (800f038 <tcp_receive+0x4b8>)
 800efea:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800efee:	4916      	ldr	r1, [pc, #88]	; (800f048 <tcp_receive+0x4c8>)
 800eff0:	4813      	ldr	r0, [pc, #76]	; (800f040 <tcp_receive+0x4c0>)
 800eff2:	f007 fa6b 	bl	80164cc <iprintf>
    while (pcb->unsent != NULL &&
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800effa:	2b00      	cmp	r3, #0
 800effc:	d036      	beq.n	800f06c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800effe:	4b13      	ldr	r3, [pc, #76]	; (800f04c <tcp_receive+0x4cc>)
 800f000:	681c      	ldr	r4, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fb fb84 	bl	800a718 <lwip_htonl>
 800f010:	4605      	mov	r5, r0
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f016:	891b      	ldrh	r3, [r3, #8]
 800f018:	461e      	mov	r6, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	899b      	ldrh	r3, [r3, #12]
 800f022:	b29b      	uxth	r3, r3
 800f024:	4618      	mov	r0, r3
 800f026:	f7fb fb69 	bl	800a6fc <lwip_htons>
 800f02a:	4603      	mov	r3, r0
 800f02c:	f003 0303 	and.w	r3, r3, #3
 800f030:	2b00      	cmp	r3, #0
 800f032:	d00d      	beq.n	800f050 <tcp_receive+0x4d0>
 800f034:	2301      	movs	r3, #1
 800f036:	e00c      	b.n	800f052 <tcp_receive+0x4d2>
 800f038:	08018d4c 	.word	0x08018d4c
 800f03c:	08018f8c 	.word	0x08018f8c
 800f040:	08018d90 	.word	0x08018d90
 800f044:	20008904 	.word	0x20008904
 800f048:	08018fb4 	.word	0x08018fb4
 800f04c:	20008900 	.word	0x20008900
 800f050:	2300      	movs	r3, #0
 800f052:	4433      	add	r3, r6
 800f054:	442b      	add	r3, r5
 800f056:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f058:	2b00      	cmp	r3, #0
 800f05a:	db07      	blt.n	800f06c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f05c:	4b8d      	ldr	r3, [pc, #564]	; (800f294 <tcp_receive+0x714>)
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f064:	1ad3      	subs	r3, r2, r3
 800f066:	2b00      	cmp	r3, #0
 800f068:	f77f af75 	ble.w	800ef56 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f072:	4b89      	ldr	r3, [pc, #548]	; (800f298 <tcp_receive+0x718>)
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	4413      	add	r3, r2
 800f078:	b29a      	uxth	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f084:	2b00      	cmp	r3, #0
 800f086:	d052      	beq.n	800f12e <tcp_receive+0x5ae>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f08c:	4b81      	ldr	r3, [pc, #516]	; (800f294 <tcp_receive+0x714>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	2b00      	cmp	r3, #0
 800f094:	da4b      	bge.n	800f12e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f096:	4b81      	ldr	r3, [pc, #516]	; (800f29c <tcp_receive+0x71c>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f0a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0b0:	10db      	asrs	r3, r3, #3
 800f0b2:	b21b      	sxth	r3, r3
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0c6:	4413      	add	r3, r2
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	b21a      	sxth	r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f0d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	da03      	bge.n	800f0e0 <tcp_receive+0x560>
        m = -m;
 800f0d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0da:	425b      	negs	r3, r3
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800f0e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0e8:	109b      	asrs	r3, r3, #2
 800f0ea:	b21b      	sxth	r3, r3
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0fe:	4413      	add	r3, r2
 800f100:	b29b      	uxth	r3, r3
 800f102:	b21a      	sxth	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f10e:	10db      	asrs	r3, r3, #3
 800f110:	b21b      	sxth	r3, r3
 800f112:	b29a      	uxth	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4413      	add	r3, r2
 800f11e:	b29b      	uxth	r3, r3
 800f120:	b21a      	sxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f12e:	4b5c      	ldr	r3, [pc, #368]	; (800f2a0 <tcp_receive+0x720>)
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 84f1 	beq.w	800fb1a <tcp_receive+0xf9a>
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	7d1b      	ldrb	r3, [r3, #20]
 800f13c:	2b06      	cmp	r3, #6
 800f13e:	f200 84ec 	bhi.w	800fb1a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f146:	4b57      	ldr	r3, [pc, #348]	; (800f2a4 <tcp_receive+0x724>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	3b01      	subs	r3, #1
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f2c0 80b8 	blt.w	800f2c4 <tcp_receive+0x744>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f158:	4b51      	ldr	r3, [pc, #324]	; (800f2a0 <tcp_receive+0x720>)
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	4619      	mov	r1, r3
 800f15e:	4b51      	ldr	r3, [pc, #324]	; (800f2a4 <tcp_receive+0x724>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	440b      	add	r3, r1
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	3301      	adds	r3, #1
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f300 80ab 	bgt.w	800f2c4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f16e:	4b4e      	ldr	r3, [pc, #312]	; (800f2a8 <tcp_receive+0x728>)
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f178:	4b4a      	ldr	r3, [pc, #296]	; (800f2a4 <tcp_receive+0x724>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f180:	4b49      	ldr	r3, [pc, #292]	; (800f2a8 <tcp_receive+0x728>)
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d106      	bne.n	800f196 <tcp_receive+0x616>
 800f188:	4b48      	ldr	r3, [pc, #288]	; (800f2ac <tcp_receive+0x72c>)
 800f18a:	f240 523c 	movw	r2, #1340	; 0x53c
 800f18e:	4948      	ldr	r1, [pc, #288]	; (800f2b0 <tcp_receive+0x730>)
 800f190:	4848      	ldr	r0, [pc, #288]	; (800f2b4 <tcp_receive+0x734>)
 800f192:	f007 f99b 	bl	80164cc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f198:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f19c:	4293      	cmp	r3, r2
 800f19e:	dd06      	ble.n	800f1ae <tcp_receive+0x62e>
 800f1a0:	4b42      	ldr	r3, [pc, #264]	; (800f2ac <tcp_receive+0x72c>)
 800f1a2:	f240 523d 	movw	r2, #1341	; 0x53d
 800f1a6:	4944      	ldr	r1, [pc, #272]	; (800f2b8 <tcp_receive+0x738>)
 800f1a8:	4842      	ldr	r0, [pc, #264]	; (800f2b4 <tcp_receive+0x734>)
 800f1aa:	f007 f98f 	bl	80164cc <iprintf>
      if (inseg.p->len < off) {
 800f1ae:	4b3e      	ldr	r3, [pc, #248]	; (800f2a8 <tcp_receive+0x728>)
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	895b      	ldrh	r3, [r3, #10]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	dd3e      	ble.n	800f23a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f1bc:	4b3a      	ldr	r3, [pc, #232]	; (800f2a8 <tcp_receive+0x728>)
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	891b      	ldrh	r3, [r3, #8]
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	dd06      	ble.n	800f1d8 <tcp_receive+0x658>
 800f1ca:	4b38      	ldr	r3, [pc, #224]	; (800f2ac <tcp_receive+0x72c>)
 800f1cc:	f240 523f 	movw	r2, #1343	; 0x53f
 800f1d0:	493a      	ldr	r1, [pc, #232]	; (800f2bc <tcp_receive+0x73c>)
 800f1d2:	4838      	ldr	r0, [pc, #224]	; (800f2b4 <tcp_receive+0x734>)
 800f1d4:	f007 f97a 	bl	80164cc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f1d8:	4b33      	ldr	r3, [pc, #204]	; (800f2a8 <tcp_receive+0x728>)
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	891a      	ldrh	r2, [r3, #8]
 800f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800f1e6:	e00e      	b.n	800f206 <tcp_receive+0x686>
          off -= p->len;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	895b      	ldrh	r3, [r3, #10]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f0:	1a9b      	subs	r3, r3, r2
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	8a3a      	ldrh	r2, [r7, #16]
 800f1f8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	895b      	ldrh	r3, [r3, #10]
 800f20a:	461a      	mov	r2, r3
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	4293      	cmp	r3, r2
 800f210:	dcea      	bgt.n	800f1e8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800f212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f214:	b29b      	uxth	r3, r3
 800f216:	425b      	negs	r3, r3
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b21b      	sxth	r3, r3
 800f21c:	4619      	mov	r1, r3
 800f21e:	69b8      	ldr	r0, [r7, #24]
 800f220:	f7fc fc20 	bl	800ba64 <pbuf_header>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d01c      	beq.n	800f264 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f22a:	4b20      	ldr	r3, [pc, #128]	; (800f2ac <tcp_receive+0x72c>)
 800f22c:	f240 524c 	movw	r2, #1356	; 0x54c
 800f230:	4923      	ldr	r1, [pc, #140]	; (800f2c0 <tcp_receive+0x740>)
 800f232:	4820      	ldr	r0, [pc, #128]	; (800f2b4 <tcp_receive+0x734>)
 800f234:	f007 f94a 	bl	80164cc <iprintf>
 800f238:	e014      	b.n	800f264 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800f23a:	4b1b      	ldr	r3, [pc, #108]	; (800f2a8 <tcp_receive+0x728>)
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f240:	b292      	uxth	r2, r2
 800f242:	4252      	negs	r2, r2
 800f244:	b292      	uxth	r2, r2
 800f246:	b212      	sxth	r2, r2
 800f248:	4611      	mov	r1, r2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fc fc0a 	bl	800ba64 <pbuf_header>
 800f250:	4603      	mov	r3, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	d006      	beq.n	800f264 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f256:	4b15      	ldr	r3, [pc, #84]	; (800f2ac <tcp_receive+0x72c>)
 800f258:	f240 5251 	movw	r2, #1361	; 0x551
 800f25c:	4918      	ldr	r1, [pc, #96]	; (800f2c0 <tcp_receive+0x740>)
 800f25e:	4815      	ldr	r0, [pc, #84]	; (800f2b4 <tcp_receive+0x734>)
 800f260:	f007 f934 	bl	80164cc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800f264:	4b10      	ldr	r3, [pc, #64]	; (800f2a8 <tcp_receive+0x728>)
 800f266:	891a      	ldrh	r2, [r3, #8]
 800f268:	4b0e      	ldr	r3, [pc, #56]	; (800f2a4 <tcp_receive+0x724>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	b299      	uxth	r1, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	b29b      	uxth	r3, r3
 800f274:	1acb      	subs	r3, r1, r3
 800f276:	b29b      	uxth	r3, r3
 800f278:	4413      	add	r3, r2
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	4b0a      	ldr	r3, [pc, #40]	; (800f2a8 <tcp_receive+0x728>)
 800f27e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f284:	4a07      	ldr	r2, [pc, #28]	; (800f2a4 <tcp_receive+0x724>)
 800f286:	6013      	str	r3, [r2, #0]
 800f288:	4b07      	ldr	r3, [pc, #28]	; (800f2a8 <tcp_receive+0x728>)
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	4a05      	ldr	r2, [pc, #20]	; (800f2a4 <tcp_receive+0x724>)
 800f28e:	6812      	ldr	r2, [r2, #0]
 800f290:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f292:	e025      	b.n	800f2e0 <tcp_receive+0x760>
 800f294:	20008900 	.word	0x20008900
 800f298:	20008904 	.word	0x20008904
 800f29c:	2000f760 	.word	0x2000f760
 800f2a0:	20008906 	.word	0x20008906
 800f2a4:	200088fc 	.word	0x200088fc
 800f2a8:	200088dc 	.word	0x200088dc
 800f2ac:	08018d4c 	.word	0x08018d4c
 800f2b0:	08018fd4 	.word	0x08018fd4
 800f2b4:	08018d90 	.word	0x08018d90
 800f2b8:	08018fe4 	.word	0x08018fe4
 800f2bc:	08018ff4 	.word	0x08018ff4
 800f2c0:	08019004 	.word	0x08019004
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f2c4:	4b87      	ldr	r3, [pc, #540]	; (800f4e4 <tcp_receive+0x964>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da06      	bge.n	800f2e0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	7e9b      	ldrb	r3, [r3, #26]
 800f2d6:	f043 0302 	orr.w	r3, r3, #2
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2e0:	4b80      	ldr	r3, [pc, #512]	; (800f4e4 <tcp_receive+0x964>)
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f2c0 8410 	blt.w	800fb10 <tcp_receive+0xf90>
 800f2f0:	4b7c      	ldr	r3, [pc, #496]	; (800f4e4 <tcp_receive+0x964>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f8:	6879      	ldr	r1, [r7, #4]
 800f2fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2fc:	440b      	add	r3, r1
 800f2fe:	1ad3      	subs	r3, r2, r3
 800f300:	3301      	adds	r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	f300 8404 	bgt.w	800fb10 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f30c:	4b75      	ldr	r3, [pc, #468]	; (800f4e4 <tcp_receive+0x964>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	f040 8287 	bne.w	800f824 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f316:	4b74      	ldr	r3, [pc, #464]	; (800f4e8 <tcp_receive+0x968>)
 800f318:	891c      	ldrh	r4, [r3, #8]
 800f31a:	4b73      	ldr	r3, [pc, #460]	; (800f4e8 <tcp_receive+0x968>)
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	899b      	ldrh	r3, [r3, #12]
 800f320:	b29b      	uxth	r3, r3
 800f322:	4618      	mov	r0, r3
 800f324:	f7fb f9ea 	bl	800a6fc <lwip_htons>
 800f328:	4603      	mov	r3, r0
 800f32a:	f003 0303 	and.w	r3, r3, #3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <tcp_receive+0x7b6>
 800f332:	2301      	movs	r3, #1
 800f334:	e000      	b.n	800f338 <tcp_receive+0x7b8>
 800f336:	2300      	movs	r3, #0
 800f338:	4423      	add	r3, r4
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	4b6b      	ldr	r3, [pc, #428]	; (800f4ec <tcp_receive+0x96c>)
 800f33e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f344:	4b69      	ldr	r3, [pc, #420]	; (800f4ec <tcp_receive+0x96c>)
 800f346:	881b      	ldrh	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d26e      	bcs.n	800f42a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f34c:	4b66      	ldr	r3, [pc, #408]	; (800f4e8 <tcp_receive+0x968>)
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	b29b      	uxth	r3, r3
 800f354:	4618      	mov	r0, r3
 800f356:	f7fb f9d1 	bl	800a6fc <lwip_htons>
 800f35a:	4603      	mov	r3, r0
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01b      	beq.n	800f39c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f364:	4b60      	ldr	r3, [pc, #384]	; (800f4e8 <tcp_receive+0x968>)
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	899b      	ldrh	r3, [r3, #12]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f370:	b29c      	uxth	r4, r3
 800f372:	4b5d      	ldr	r3, [pc, #372]	; (800f4e8 <tcp_receive+0x968>)
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	899b      	ldrh	r3, [r3, #12]
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fb f9be 	bl	800a6fc <lwip_htons>
 800f380:	4603      	mov	r3, r0
 800f382:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f386:	b29b      	uxth	r3, r3
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fb f9b7 	bl	800a6fc <lwip_htons>
 800f38e:	4603      	mov	r3, r0
 800f390:	461a      	mov	r2, r3
 800f392:	4b55      	ldr	r3, [pc, #340]	; (800f4e8 <tcp_receive+0x968>)
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	4322      	orrs	r2, r4
 800f398:	b292      	uxth	r2, r2
 800f39a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3a0:	4b51      	ldr	r3, [pc, #324]	; (800f4e8 <tcp_receive+0x968>)
 800f3a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f3a4:	4b50      	ldr	r3, [pc, #320]	; (800f4e8 <tcp_receive+0x968>)
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	899b      	ldrh	r3, [r3, #12]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fb f9a5 	bl	800a6fc <lwip_htons>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <tcp_receive+0x848>
            inseg.len -= 1;
 800f3bc:	4b4a      	ldr	r3, [pc, #296]	; (800f4e8 <tcp_receive+0x968>)
 800f3be:	891b      	ldrh	r3, [r3, #8]
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	4b48      	ldr	r3, [pc, #288]	; (800f4e8 <tcp_receive+0x968>)
 800f3c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f3c8:	4b47      	ldr	r3, [pc, #284]	; (800f4e8 <tcp_receive+0x968>)
 800f3ca:	685a      	ldr	r2, [r3, #4]
 800f3cc:	4b46      	ldr	r3, [pc, #280]	; (800f4e8 <tcp_receive+0x968>)
 800f3ce:	891b      	ldrh	r3, [r3, #8]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	f7fc f9f6 	bl	800b7c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f3d8:	4b43      	ldr	r3, [pc, #268]	; (800f4e8 <tcp_receive+0x968>)
 800f3da:	891c      	ldrh	r4, [r3, #8]
 800f3dc:	4b42      	ldr	r3, [pc, #264]	; (800f4e8 <tcp_receive+0x968>)
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	899b      	ldrh	r3, [r3, #12]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fb f989 	bl	800a6fc <lwip_htons>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	f003 0303 	and.w	r3, r3, #3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <tcp_receive+0x878>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e000      	b.n	800f3fa <tcp_receive+0x87a>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4423      	add	r3, r4
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	4b3b      	ldr	r3, [pc, #236]	; (800f4ec <tcp_receive+0x96c>)
 800f400:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f402:	4b3a      	ldr	r3, [pc, #232]	; (800f4ec <tcp_receive+0x96c>)
 800f404:	881b      	ldrh	r3, [r3, #0]
 800f406:	461a      	mov	r2, r3
 800f408:	4b36      	ldr	r3, [pc, #216]	; (800f4e4 <tcp_receive+0x964>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	441a      	add	r2, r3
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f416:	440b      	add	r3, r1
 800f418:	429a      	cmp	r2, r3
 800f41a:	d006      	beq.n	800f42a <tcp_receive+0x8aa>
 800f41c:	4b34      	ldr	r3, [pc, #208]	; (800f4f0 <tcp_receive+0x970>)
 800f41e:	f240 527f 	movw	r2, #1407	; 0x57f
 800f422:	4934      	ldr	r1, [pc, #208]	; (800f4f4 <tcp_receive+0x974>)
 800f424:	4834      	ldr	r0, [pc, #208]	; (800f4f8 <tcp_receive+0x978>)
 800f426:	f007 f851 	bl	80164cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f000 80e1 	beq.w	800f5f6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f434:	4b2c      	ldr	r3, [pc, #176]	; (800f4e8 <tcp_receive+0x968>)
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	899b      	ldrh	r3, [r3, #12]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fb f95d 	bl	800a6fc <lwip_htons>
 800f442:	4603      	mov	r3, r0
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d010      	beq.n	800f46e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f44c:	e00a      	b.n	800f464 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f452:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800f45e:	68b8      	ldr	r0, [r7, #8]
 800f460:	f7fd fe5f 	bl	800d122 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1f0      	bne.n	800f44e <tcp_receive+0x8ce>
 800f46c:	e0c3      	b.n	800f5f6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f472:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f474:	e04f      	b.n	800f516 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	899b      	ldrh	r3, [r3, #12]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fb f93c 	bl	800a6fc <lwip_htons>
 800f484:	4603      	mov	r3, r0
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d03b      	beq.n	800f506 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f48e:	4b16      	ldr	r3, [pc, #88]	; (800f4e8 <tcp_receive+0x968>)
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	899b      	ldrh	r3, [r3, #12]
 800f494:	b29b      	uxth	r3, r3
 800f496:	4618      	mov	r0, r3
 800f498:	f7fb f930 	bl	800a6fc <lwip_htons>
 800f49c:	4603      	mov	r3, r0
 800f49e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d12f      	bne.n	800f506 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f4a6:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <tcp_receive+0x968>)
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	899b      	ldrh	r3, [r3, #12]
 800f4ac:	b29c      	uxth	r4, r3
 800f4ae:	2001      	movs	r0, #1
 800f4b0:	f7fb f924 	bl	800a6fc <lwip_htons>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	4b0b      	ldr	r3, [pc, #44]	; (800f4e8 <tcp_receive+0x968>)
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	4322      	orrs	r2, r4
 800f4be:	b292      	uxth	r2, r2
 800f4c0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f4c2:	4b09      	ldr	r3, [pc, #36]	; (800f4e8 <tcp_receive+0x968>)
 800f4c4:	891c      	ldrh	r4, [r3, #8]
 800f4c6:	4b08      	ldr	r3, [pc, #32]	; (800f4e8 <tcp_receive+0x968>)
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	899b      	ldrh	r3, [r3, #12]
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fb f914 	bl	800a6fc <lwip_htons>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f003 0303 	and.w	r3, r3, #3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00e      	beq.n	800f4fc <tcp_receive+0x97c>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	e00d      	b.n	800f4fe <tcp_receive+0x97e>
 800f4e2:	bf00      	nop
 800f4e4:	200088fc 	.word	0x200088fc
 800f4e8:	200088dc 	.word	0x200088dc
 800f4ec:	20008906 	.word	0x20008906
 800f4f0:	08018d4c 	.word	0x08018d4c
 800f4f4:	08019018 	.word	0x08019018
 800f4f8:	08018d90 	.word	0x08018d90
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4423      	add	r3, r4
 800f500:	b29a      	uxth	r2, r3
 800f502:	4b95      	ldr	r3, [pc, #596]	; (800f758 <tcp_receive+0xbd8>)
 800f504:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800f50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800f510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f512:	f7fd fe06 	bl	800d122 <tcp_seg_free>
            while (next &&
 800f516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00e      	beq.n	800f53a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f51c:	4b8e      	ldr	r3, [pc, #568]	; (800f758 <tcp_receive+0xbd8>)
 800f51e:	881b      	ldrh	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	4b8e      	ldr	r3, [pc, #568]	; (800f75c <tcp_receive+0xbdc>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	441a      	add	r2, r3
 800f528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f530:	8909      	ldrh	r1, [r1, #8]
 800f532:	440b      	add	r3, r1
 800f534:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f536:	2b00      	cmp	r3, #0
 800f538:	da9d      	bge.n	800f476 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d057      	beq.n	800f5f0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800f540:	4b85      	ldr	r3, [pc, #532]	; (800f758 <tcp_receive+0xbd8>)
 800f542:	881b      	ldrh	r3, [r3, #0]
 800f544:	461a      	mov	r2, r3
 800f546:	4b85      	ldr	r3, [pc, #532]	; (800f75c <tcp_receive+0xbdc>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	441a      	add	r2, r3
 800f54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f554:	2b00      	cmp	r3, #0
 800f556:	dd4b      	ble.n	800f5f0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	b29a      	uxth	r2, r3
 800f560:	4b7e      	ldr	r3, [pc, #504]	; (800f75c <tcp_receive+0xbdc>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	b29b      	uxth	r3, r3
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	b29a      	uxth	r2, r3
 800f56a:	4b7d      	ldr	r3, [pc, #500]	; (800f760 <tcp_receive+0xbe0>)
 800f56c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f56e:	4b7c      	ldr	r3, [pc, #496]	; (800f760 <tcp_receive+0xbe0>)
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	899b      	ldrh	r3, [r3, #12]
 800f574:	b29b      	uxth	r3, r3
 800f576:	4618      	mov	r0, r3
 800f578:	f7fb f8c0 	bl	800a6fc <lwip_htons>
 800f57c:	4603      	mov	r3, r0
 800f57e:	f003 0302 	and.w	r3, r3, #2
 800f582:	2b00      	cmp	r3, #0
 800f584:	d005      	beq.n	800f592 <tcp_receive+0xa12>
                inseg.len -= 1;
 800f586:	4b76      	ldr	r3, [pc, #472]	; (800f760 <tcp_receive+0xbe0>)
 800f588:	891b      	ldrh	r3, [r3, #8]
 800f58a:	3b01      	subs	r3, #1
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	4b74      	ldr	r3, [pc, #464]	; (800f760 <tcp_receive+0xbe0>)
 800f590:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f592:	4b73      	ldr	r3, [pc, #460]	; (800f760 <tcp_receive+0xbe0>)
 800f594:	685a      	ldr	r2, [r3, #4]
 800f596:	4b72      	ldr	r3, [pc, #456]	; (800f760 <tcp_receive+0xbe0>)
 800f598:	891b      	ldrh	r3, [r3, #8]
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7fc f911 	bl	800b7c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f5a2:	4b6f      	ldr	r3, [pc, #444]	; (800f760 <tcp_receive+0xbe0>)
 800f5a4:	891c      	ldrh	r4, [r3, #8]
 800f5a6:	4b6e      	ldr	r3, [pc, #440]	; (800f760 <tcp_receive+0xbe0>)
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	899b      	ldrh	r3, [r3, #12]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb f8a4 	bl	800a6fc <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f003 0303 	and.w	r3, r3, #3
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <tcp_receive+0xa42>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e000      	b.n	800f5c4 <tcp_receive+0xa44>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4423      	add	r3, r4
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	4b63      	ldr	r3, [pc, #396]	; (800f758 <tcp_receive+0xbd8>)
 800f5ca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f5cc:	4b62      	ldr	r3, [pc, #392]	; (800f758 <tcp_receive+0xbd8>)
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4b62      	ldr	r3, [pc, #392]	; (800f75c <tcp_receive+0xbdc>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	441a      	add	r2, r3
 800f5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d006      	beq.n	800f5f0 <tcp_receive+0xa70>
 800f5e2:	4b60      	ldr	r3, [pc, #384]	; (800f764 <tcp_receive+0xbe4>)
 800f5e4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f5e8:	495f      	ldr	r1, [pc, #380]	; (800f768 <tcp_receive+0xbe8>)
 800f5ea:	4860      	ldr	r0, [pc, #384]	; (800f76c <tcp_receive+0xbec>)
 800f5ec:	f006 ff6e 	bl	80164cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5f4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f5f6:	4b58      	ldr	r3, [pc, #352]	; (800f758 <tcp_receive+0xbd8>)
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	4b57      	ldr	r3, [pc, #348]	; (800f75c <tcp_receive+0xbdc>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	441a      	add	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f60a:	4b53      	ldr	r3, [pc, #332]	; (800f758 <tcp_receive+0xbd8>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d206      	bcs.n	800f620 <tcp_receive+0xaa0>
 800f612:	4b54      	ldr	r3, [pc, #336]	; (800f764 <tcp_receive+0xbe4>)
 800f614:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f618:	4955      	ldr	r1, [pc, #340]	; (800f770 <tcp_receive+0xbf0>)
 800f61a:	4854      	ldr	r0, [pc, #336]	; (800f76c <tcp_receive+0xbec>)
 800f61c:	f006 ff56 	bl	80164cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f624:	4b4c      	ldr	r3, [pc, #304]	; (800f758 <tcp_receive+0xbd8>)
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f7fd f8e9 	bl	800c808 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f636:	4b4a      	ldr	r3, [pc, #296]	; (800f760 <tcp_receive+0xbe0>)
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	891b      	ldrh	r3, [r3, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d006      	beq.n	800f64e <tcp_receive+0xace>
          recv_data = inseg.p;
 800f640:	4b47      	ldr	r3, [pc, #284]	; (800f760 <tcp_receive+0xbe0>)
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4a4b      	ldr	r2, [pc, #300]	; (800f774 <tcp_receive+0xbf4>)
 800f646:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f648:	4b45      	ldr	r3, [pc, #276]	; (800f760 <tcp_receive+0xbe0>)
 800f64a:	2200      	movs	r2, #0
 800f64c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f64e:	4b44      	ldr	r3, [pc, #272]	; (800f760 <tcp_receive+0xbe0>)
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	899b      	ldrh	r3, [r3, #12]
 800f654:	b29b      	uxth	r3, r3
 800f656:	4618      	mov	r0, r3
 800f658:	f7fb f850 	bl	800a6fc <lwip_htons>
 800f65c:	4603      	mov	r3, r0
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	f000 80b4 	beq.w	800f7d0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f668:	4b43      	ldr	r3, [pc, #268]	; (800f778 <tcp_receive+0xbf8>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f043 0320 	orr.w	r3, r3, #32
 800f670:	b2da      	uxtb	r2, r3
 800f672:	4b41      	ldr	r3, [pc, #260]	; (800f778 <tcp_receive+0xbf8>)
 800f674:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f676:	e0ab      	b.n	800f7d0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f67c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	4a35      	ldr	r2, [pc, #212]	; (800f75c <tcp_receive+0xbdc>)
 800f688:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	891b      	ldrh	r3, [r3, #8]
 800f68e:	461c      	mov	r4, r3
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	899b      	ldrh	r3, [r3, #12]
 800f696:	b29b      	uxth	r3, r3
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fb f82f 	bl	800a6fc <lwip_htons>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	f003 0303 	and.w	r3, r3, #3
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d001      	beq.n	800f6ac <tcp_receive+0xb2c>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e000      	b.n	800f6ae <tcp_receive+0xb2e>
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	191a      	adds	r2, r3, r4
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b4:	441a      	add	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6be:	461c      	mov	r4, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	891b      	ldrh	r3, [r3, #8]
 800f6c4:	461d      	mov	r5, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	899b      	ldrh	r3, [r3, #12]
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fb f814 	bl	800a6fc <lwip_htons>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	f003 0303 	and.w	r3, r3, #3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <tcp_receive+0xb62>
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e000      	b.n	800f6e4 <tcp_receive+0xb64>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	442b      	add	r3, r5
 800f6e6:	429c      	cmp	r4, r3
 800f6e8:	d206      	bcs.n	800f6f8 <tcp_receive+0xb78>
 800f6ea:	4b1e      	ldr	r3, [pc, #120]	; (800f764 <tcp_receive+0xbe4>)
 800f6ec:	f240 52de 	movw	r2, #1502	; 0x5de
 800f6f0:	4922      	ldr	r1, [pc, #136]	; (800f77c <tcp_receive+0xbfc>)
 800f6f2:	481e      	ldr	r0, [pc, #120]	; (800f76c <tcp_receive+0xbec>)
 800f6f4:	f006 feea 	bl	80164cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	891b      	ldrh	r3, [r3, #8]
 800f6fc:	461c      	mov	r4, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	899b      	ldrh	r3, [r3, #12]
 800f704:	b29b      	uxth	r3, r3
 800f706:	4618      	mov	r0, r3
 800f708:	f7fa fff8 	bl	800a6fc <lwip_htons>
 800f70c:	4603      	mov	r3, r0
 800f70e:	f003 0303 	and.w	r3, r3, #3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <tcp_receive+0xb9a>
 800f716:	2301      	movs	r3, #1
 800f718:	e000      	b.n	800f71c <tcp_receive+0xb9c>
 800f71a:	2300      	movs	r3, #0
 800f71c:	1919      	adds	r1, r3, r4
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f722:	b28b      	uxth	r3, r1
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7fd f86b 	bl	800c808 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	891b      	ldrh	r3, [r3, #8]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d028      	beq.n	800f78e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <tcp_receive+0xbf4>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d01d      	beq.n	800f780 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800f744:	4b0b      	ldr	r3, [pc, #44]	; (800f774 <tcp_receive+0xbf4>)
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	4619      	mov	r1, r3
 800f74e:	4610      	mov	r0, r2
 800f750:	f7fc fa86 	bl	800bc60 <pbuf_cat>
 800f754:	e018      	b.n	800f788 <tcp_receive+0xc08>
 800f756:	bf00      	nop
 800f758:	20008906 	.word	0x20008906
 800f75c:	200088fc 	.word	0x200088fc
 800f760:	200088dc 	.word	0x200088dc
 800f764:	08018d4c 	.word	0x08018d4c
 800f768:	08019050 	.word	0x08019050
 800f76c:	08018d90 	.word	0x08018d90
 800f770:	0801908c 	.word	0x0801908c
 800f774:	2000890c 	.word	0x2000890c
 800f778:	20008909 	.word	0x20008909
 800f77c:	080190ac 	.word	0x080190ac
            } else {
              recv_data = cseg->p;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	4a71      	ldr	r2, [pc, #452]	; (800f94c <tcp_receive+0xdcc>)
 800f786:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	899b      	ldrh	r3, [r3, #12]
 800f794:	b29b      	uxth	r3, r3
 800f796:	4618      	mov	r0, r3
 800f798:	f7fa ffb0 	bl	800a6fc <lwip_htons>
 800f79c:	4603      	mov	r3, r0
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00d      	beq.n	800f7c2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f7a6:	4b6a      	ldr	r3, [pc, #424]	; (800f950 <tcp_receive+0xdd0>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	f043 0320 	orr.w	r3, r3, #32
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	4b67      	ldr	r3, [pc, #412]	; (800f950 <tcp_receive+0xdd0>)
 800f7b2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7d1b      	ldrb	r3, [r3, #20]
 800f7b8:	2b04      	cmp	r3, #4
 800f7ba:	d102      	bne.n	800f7c2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2207      	movs	r2, #7
 800f7c0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7fd fca9 	bl	800d122 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d008      	beq.n	800f7ea <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	f43f af47 	beq.w	800f678 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	7e9b      	ldrb	r3, [r3, #26]
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00e      	beq.n	800f814 <tcp_receive+0xc94>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	7e9b      	ldrb	r3, [r3, #26]
 800f7fa:	f023 0301 	bic.w	r3, r3, #1
 800f7fe:	b2da      	uxtb	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	769a      	strb	r2, [r3, #26]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7e9b      	ldrb	r3, [r3, #26]
 800f808:	f043 0302 	orr.w	r3, r3, #2
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f812:	e181      	b.n	800fb18 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	7e9b      	ldrb	r3, [r3, #26]
 800f818:	f043 0301 	orr.w	r3, r3, #1
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f822:	e179      	b.n	800fb18 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f001 f8c5 	bl	80109b4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d106      	bne.n	800f840 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f832:	4848      	ldr	r0, [pc, #288]	; (800f954 <tcp_receive+0xdd4>)
 800f834:	f7fd fc9c 	bl	800d170 <tcp_seg_copy>
 800f838:	4602      	mov	r2, r0
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800f83e:	e16b      	b.n	800fb18 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800f840:	2300      	movs	r3, #0
 800f842:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f84a:	e150      	b.n	800faee <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800f84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	4b41      	ldr	r3, [pc, #260]	; (800f958 <tcp_receive+0xdd8>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	429a      	cmp	r2, r3
 800f858:	d11d      	bne.n	800f896 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f85a:	4b3e      	ldr	r3, [pc, #248]	; (800f954 <tcp_receive+0xdd4>)
 800f85c:	891a      	ldrh	r2, [r3, #8]
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f860:	891b      	ldrh	r3, [r3, #8]
 800f862:	429a      	cmp	r2, r3
 800f864:	f240 8148 	bls.w	800faf8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800f868:	483a      	ldr	r0, [pc, #232]	; (800f954 <tcp_receive+0xdd4>)
 800f86a:	f7fd fc81 	bl	800d170 <tcp_seg_copy>
 800f86e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	f000 8142 	beq.w	800fafc <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d003      	beq.n	800f886 <tcp_receive+0xd06>
                    prev->next = cseg;
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]
 800f884:	e002      	b.n	800f88c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f88c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f7ff f900 	bl	800ea94 <tcp_oos_insert_segment>
                }
                break;
 800f894:	e132      	b.n	800fafc <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d117      	bne.n	800f8cc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f89c:	4b2e      	ldr	r3, [pc, #184]	; (800f958 <tcp_receive+0xdd8>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	1ad3      	subs	r3, r2, r3
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	da57      	bge.n	800f95c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800f8ac:	4829      	ldr	r0, [pc, #164]	; (800f954 <tcp_receive+0xdd4>)
 800f8ae:	f7fd fc5f 	bl	800d170 <tcp_seg_copy>
 800f8b2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f000 8122 	beq.w	800fb00 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800f8c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7ff f8e5 	bl	800ea94 <tcp_oos_insert_segment>
                  }
                  break;
 800f8ca:	e119      	b.n	800fb00 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800f8cc:	4b22      	ldr	r3, [pc, #136]	; (800f958 <tcp_receive+0xdd8>)
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d2:	68db      	ldr	r3, [r3, #12]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	1ad3      	subs	r3, r2, r3
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	db3e      	blt.n	800f95c <tcp_receive+0xddc>
 800f8de:	4b1e      	ldr	r3, [pc, #120]	; (800f958 <tcp_receive+0xdd8>)
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dc35      	bgt.n	800f95c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800f8f0:	4818      	ldr	r0, [pc, #96]	; (800f954 <tcp_receive+0xdd4>)
 800f8f2:	f7fd fc3d 	bl	800d170 <tcp_seg_copy>
 800f8f6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 8102 	beq.w	800fb04 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f908:	8912      	ldrh	r2, [r2, #8]
 800f90a:	441a      	add	r2, r3
 800f90c:	4b12      	ldr	r3, [pc, #72]	; (800f958 <tcp_receive+0xdd8>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	dd12      	ble.n	800f93c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <tcp_receive+0xdd8>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	b29b      	uxth	r3, r3
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	b29a      	uxth	r2, r3
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92e:	685a      	ldr	r2, [r3, #4]
 800f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f932:	891b      	ldrh	r3, [r3, #8]
 800f934:	4619      	mov	r1, r3
 800f936:	4610      	mov	r0, r2
 800f938:	f7fb ff44 	bl	800b7c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff f8a5 	bl	800ea94 <tcp_oos_insert_segment>
                  }
                  break;
 800f94a:	e0db      	b.n	800fb04 <tcp_receive+0xf84>
 800f94c:	2000890c 	.word	0x2000890c
 800f950:	20008909 	.word	0x20008909
 800f954:	200088dc 	.word	0x200088dc
 800f958:	200088fc 	.word	0x200088fc
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f040 80bf 	bne.w	800fae4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f966:	4b7c      	ldr	r3, [pc, #496]	; (800fb58 <tcp_receive+0xfd8>)
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f972:	2b00      	cmp	r3, #0
 800f974:	f340 80b6 	ble.w	800fae4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	899b      	ldrh	r3, [r3, #12]
 800f97e:	b29b      	uxth	r3, r3
 800f980:	4618      	mov	r0, r3
 800f982:	f7fa febb 	bl	800a6fc <lwip_htons>
 800f986:	4603      	mov	r3, r0
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 80bb 	bne.w	800fb08 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f992:	4872      	ldr	r0, [pc, #456]	; (800fb5c <tcp_receive+0xfdc>)
 800f994:	f7fd fbec 	bl	800d170 <tcp_seg_copy>
 800f998:	4602      	mov	r2, r0
 800f99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f000 80b2 	beq.w	800fb0c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9b0:	8912      	ldrh	r2, [r2, #8]
 800f9b2:	441a      	add	r2, r3
 800f9b4:	4b68      	ldr	r3, [pc, #416]	; (800fb58 <tcp_receive+0xfd8>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	dd12      	ble.n	800f9e4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f9be:	4b66      	ldr	r3, [pc, #408]	; (800fb58 <tcp_receive+0xfd8>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	1ad3      	subs	r3, r2, r3
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d6:	685a      	ldr	r2, [r3, #4]
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	891b      	ldrh	r3, [r3, #8]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4610      	mov	r0, r2
 800f9e0:	f7fb fef0 	bl	800b7c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f9e4:	4b5e      	ldr	r3, [pc, #376]	; (800fb60 <tcp_receive+0xfe0>)
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4b5b      	ldr	r3, [pc, #364]	; (800fb58 <tcp_receive+0xfd8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	441a      	add	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f4:	6879      	ldr	r1, [r7, #4]
 800f9f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9f8:	440b      	add	r3, r1
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f340 8085 	ble.w	800fb0c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	899b      	ldrh	r3, [r3, #12]
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fa fe75 	bl	800a6fc <lwip_htons>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f003 0301 	and.w	r3, r3, #1
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01e      	beq.n	800fa5a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	899b      	ldrh	r3, [r3, #12]
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa2a:	b29c      	uxth	r4, r3
 800fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	899b      	ldrh	r3, [r3, #12]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fa fe60 	bl	800a6fc <lwip_htons>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fa fe59 	bl	800a6fc <lwip_htons>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	4322      	orrs	r2, r4
 800fa56:	b292      	uxth	r2, r2
 800fa58:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa64:	4413      	add	r3, r2
 800fa66:	b299      	uxth	r1, r3
 800fa68:	4b3b      	ldr	r3, [pc, #236]	; (800fb58 <tcp_receive+0xfd8>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	1a8a      	subs	r2, r1, r2
 800fa74:	b292      	uxth	r2, r2
 800fa76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	891b      	ldrh	r3, [r3, #8]
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f7fb fe9c 	bl	800b7c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	891c      	ldrh	r4, [r3, #8]
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	899b      	ldrh	r3, [r3, #12]
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fa fe2d 	bl	800a6fc <lwip_htons>
 800faa2:	4603      	mov	r3, r0
 800faa4:	f003 0303 	and.w	r3, r3, #3
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <tcp_receive+0xf30>
 800faac:	2301      	movs	r3, #1
 800faae:	e000      	b.n	800fab2 <tcp_receive+0xf32>
 800fab0:	2300      	movs	r3, #0
 800fab2:	4423      	add	r3, r4
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	4b2a      	ldr	r3, [pc, #168]	; (800fb60 <tcp_receive+0xfe0>)
 800fab8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800faba:	4b29      	ldr	r3, [pc, #164]	; (800fb60 <tcp_receive+0xfe0>)
 800fabc:	881b      	ldrh	r3, [r3, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	4b25      	ldr	r3, [pc, #148]	; (800fb58 <tcp_receive+0xfd8>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	441a      	add	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faca:	6879      	ldr	r1, [r7, #4]
 800facc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800face:	440b      	add	r3, r1
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d01b      	beq.n	800fb0c <tcp_receive+0xf8c>
 800fad4:	4b23      	ldr	r3, [pc, #140]	; (800fb64 <tcp_receive+0xfe4>)
 800fad6:	f240 627b 	movw	r2, #1659	; 0x67b
 800fada:	4923      	ldr	r1, [pc, #140]	; (800fb68 <tcp_receive+0xfe8>)
 800fadc:	4823      	ldr	r0, [pc, #140]	; (800fb6c <tcp_receive+0xfec>)
 800fade:	f006 fcf5 	bl	80164cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fae2:	e013      	b.n	800fb0c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800faee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f47f aeab 	bne.w	800f84c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800faf6:	e00f      	b.n	800fb18 <tcp_receive+0xf98>
                break;
 800faf8:	bf00      	nop
 800fafa:	e00d      	b.n	800fb18 <tcp_receive+0xf98>
                break;
 800fafc:	bf00      	nop
 800fafe:	e00b      	b.n	800fb18 <tcp_receive+0xf98>
                  break;
 800fb00:	bf00      	nop
 800fb02:	e009      	b.n	800fb18 <tcp_receive+0xf98>
                  break;
 800fb04:	bf00      	nop
 800fb06:	e007      	b.n	800fb18 <tcp_receive+0xf98>
                  break;
 800fb08:	bf00      	nop
 800fb0a:	e005      	b.n	800fb18 <tcp_receive+0xf98>
                break;
 800fb0c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800fb0e:	e003      	b.n	800fb18 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 ff4f 	bl	80109b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb16:	e01a      	b.n	800fb4e <tcp_receive+0xfce>
 800fb18:	e019      	b.n	800fb4e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fb1a:	4b0f      	ldr	r3, [pc, #60]	; (800fb58 <tcp_receive+0xfd8>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	db0a      	blt.n	800fb3e <tcp_receive+0xfbe>
 800fb28:	4b0b      	ldr	r3, [pc, #44]	; (800fb58 <tcp_receive+0xfd8>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb34:	440b      	add	r3, r1
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	3301      	adds	r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	dd07      	ble.n	800fb4e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7e9b      	ldrb	r3, [r3, #26]
 800fb42:	f043 0302 	orr.w	r3, r3, #2
 800fb46:	b2da      	uxtb	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800fb4c:	e7ff      	b.n	800fb4e <tcp_receive+0xfce>
 800fb4e:	bf00      	nop
 800fb50:	3734      	adds	r7, #52	; 0x34
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb56:	bf00      	nop
 800fb58:	200088fc 	.word	0x200088fc
 800fb5c:	200088dc 	.word	0x200088dc
 800fb60:	20008906 	.word	0x20008906
 800fb64:	08018d4c 	.word	0x08018d4c
 800fb68:	08019018 	.word	0x08019018
 800fb6c:	08018d90 	.word	0x08018d90

0800fb70 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800fb76:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <tcp_getoptbyte+0x68>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d005      	beq.n	800fb8a <tcp_getoptbyte+0x1a>
 800fb7e:	4b17      	ldr	r3, [pc, #92]	; (800fbdc <tcp_getoptbyte+0x6c>)
 800fb80:	881a      	ldrh	r2, [r3, #0]
 800fb82:	4b17      	ldr	r3, [pc, #92]	; (800fbe0 <tcp_getoptbyte+0x70>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d20e      	bcs.n	800fba8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb8a:	4b16      	ldr	r3, [pc, #88]	; (800fbe4 <tcp_getoptbyte+0x74>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3314      	adds	r3, #20
 800fb90:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800fb92:	4b12      	ldr	r3, [pc, #72]	; (800fbdc <tcp_getoptbyte+0x6c>)
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	1c5a      	adds	r2, r3, #1
 800fb98:	b291      	uxth	r1, r2
 800fb9a:	4a10      	ldr	r2, [pc, #64]	; (800fbdc <tcp_getoptbyte+0x6c>)
 800fb9c:	8011      	strh	r1, [r2, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	4413      	add	r3, r2
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	e010      	b.n	800fbca <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800fba8:	4b0c      	ldr	r3, [pc, #48]	; (800fbdc <tcp_getoptbyte+0x6c>)
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	b291      	uxth	r1, r2
 800fbb0:	4a0a      	ldr	r2, [pc, #40]	; (800fbdc <tcp_getoptbyte+0x6c>)
 800fbb2:	8011      	strh	r1, [r2, #0]
 800fbb4:	b2da      	uxtb	r2, r3
 800fbb6:	4b0a      	ldr	r3, [pc, #40]	; (800fbe0 <tcp_getoptbyte+0x70>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800fbc0:	4b05      	ldr	r3, [pc, #20]	; (800fbd8 <tcp_getoptbyte+0x68>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	200088f4 	.word	0x200088f4
 800fbdc:	200088f8 	.word	0x200088f8
 800fbe0:	200088f2 	.word	0x200088f2
 800fbe4:	200088ec 	.word	0x200088ec

0800fbe8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fbf0:	4b2d      	ldr	r3, [pc, #180]	; (800fca8 <tcp_parseopt+0xc0>)
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d053      	beq.n	800fca0 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fbf8:	4b2c      	ldr	r3, [pc, #176]	; (800fcac <tcp_parseopt+0xc4>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	801a      	strh	r2, [r3, #0]
 800fbfe:	e043      	b.n	800fc88 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800fc00:	f7ff ffb6 	bl	800fb70 <tcp_getoptbyte>
 800fc04:	4603      	mov	r3, r0
 800fc06:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fc08:	7bfb      	ldrb	r3, [r7, #15]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d03c      	beq.n	800fc88 <tcp_parseopt+0xa0>
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d002      	beq.n	800fc18 <tcp_parseopt+0x30>
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d03f      	beq.n	800fc96 <tcp_parseopt+0xae>
 800fc16:	e026      	b.n	800fc66 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fc18:	f7ff ffaa 	bl	800fb70 <tcp_getoptbyte>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	d13b      	bne.n	800fc9a <tcp_parseopt+0xb2>
 800fc22:	4b22      	ldr	r3, [pc, #136]	; (800fcac <tcp_parseopt+0xc4>)
 800fc24:	881b      	ldrh	r3, [r3, #0]
 800fc26:	3302      	adds	r3, #2
 800fc28:	4a1f      	ldr	r2, [pc, #124]	; (800fca8 <tcp_parseopt+0xc0>)
 800fc2a:	8812      	ldrh	r2, [r2, #0]
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	dc34      	bgt.n	800fc9a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800fc30:	f7ff ff9e 	bl	800fb70 <tcp_getoptbyte>
 800fc34:	4603      	mov	r3, r0
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	021b      	lsls	r3, r3, #8
 800fc3a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800fc3c:	f7ff ff98 	bl	800fb70 <tcp_getoptbyte>
 800fc40:	4603      	mov	r3, r0
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	89bb      	ldrh	r3, [r7, #12]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fc4a:	89bb      	ldrh	r3, [r7, #12]
 800fc4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc50:	d804      	bhi.n	800fc5c <tcp_parseopt+0x74>
 800fc52:	89bb      	ldrh	r3, [r7, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <tcp_parseopt+0x74>
 800fc58:	89ba      	ldrh	r2, [r7, #12]
 800fc5a:	e001      	b.n	800fc60 <tcp_parseopt+0x78>
 800fc5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800fc64:	e010      	b.n	800fc88 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800fc66:	f7ff ff83 	bl	800fb70 <tcp_getoptbyte>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800fc6e:	7afb      	ldrb	r3, [r7, #11]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d914      	bls.n	800fc9e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800fc74:	7afb      	ldrb	r3, [r7, #11]
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	4b0c      	ldr	r3, [pc, #48]	; (800fcac <tcp_parseopt+0xc4>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	3b02      	subs	r3, #2
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	4b09      	ldr	r3, [pc, #36]	; (800fcac <tcp_parseopt+0xc4>)
 800fc86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc88:	4b08      	ldr	r3, [pc, #32]	; (800fcac <tcp_parseopt+0xc4>)
 800fc8a:	881a      	ldrh	r2, [r3, #0]
 800fc8c:	4b06      	ldr	r3, [pc, #24]	; (800fca8 <tcp_parseopt+0xc0>)
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d3b5      	bcc.n	800fc00 <tcp_parseopt+0x18>
 800fc94:	e004      	b.n	800fca0 <tcp_parseopt+0xb8>
        return;
 800fc96:	bf00      	nop
 800fc98:	e002      	b.n	800fca0 <tcp_parseopt+0xb8>
          return;
 800fc9a:	bf00      	nop
 800fc9c:	e000      	b.n	800fca0 <tcp_parseopt+0xb8>
          return;
 800fc9e:	bf00      	nop
      }
    }
  }
}
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	200088f0 	.word	0x200088f0
 800fcac:	200088f8 	.word	0x200088f8

0800fcb0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fcb4:	4b05      	ldr	r3, [pc, #20]	; (800fccc <tcp_trigger_input_pcb_close+0x1c>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f043 0310 	orr.w	r3, r3, #16
 800fcbc:	b2da      	uxtb	r2, r3
 800fcbe:	4b03      	ldr	r3, [pc, #12]	; (800fccc <tcp_trigger_input_pcb_close+0x1c>)
 800fcc0:	701a      	strb	r2, [r3, #0]
}
 800fcc2:	bf00      	nop
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	20008909 	.word	0x20008909

0800fcd0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	607b      	str	r3, [r7, #4]
 800fcda:	460b      	mov	r3, r1
 800fcdc:	817b      	strh	r3, [r7, #10]
 800fcde:	4613      	mov	r3, r2
 800fce0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fce2:	897a      	ldrh	r2, [r7, #10]
 800fce4:	893b      	ldrh	r3, [r7, #8]
 800fce6:	4413      	add	r3, r2
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	3314      	adds	r3, #20
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	2200      	movs	r2, #0
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2001      	movs	r0, #1
 800fcf4:	f7fb fb68 	bl	800b3c8 <pbuf_alloc>
 800fcf8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d057      	beq.n	800fdb0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	895b      	ldrh	r3, [r3, #10]
 800fd04:	461a      	mov	r2, r3
 800fd06:	897b      	ldrh	r3, [r7, #10]
 800fd08:	3314      	adds	r3, #20
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	da05      	bge.n	800fd1a <tcp_output_alloc_header+0x4a>
 800fd0e:	4b2b      	ldr	r3, [pc, #172]	; (800fdbc <tcp_output_alloc_header+0xec>)
 800fd10:	2273      	movs	r2, #115	; 0x73
 800fd12:	492b      	ldr	r1, [pc, #172]	; (800fdc0 <tcp_output_alloc_header+0xf0>)
 800fd14:	482b      	ldr	r0, [pc, #172]	; (800fdc4 <tcp_output_alloc_header+0xf4>)
 800fd16:	f006 fbd9 	bl	80164cc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	8adb      	ldrh	r3, [r3, #22]
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fa fce9 	bl	800a6fc <lwip_htons>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	8b1b      	ldrh	r3, [r3, #24]
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fa fce0 	bl	800a6fc <lwip_htons>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fa fce2 	bl	800a718 <lwip_htonl>
 800fd54:	4602      	mov	r2, r0
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800fd5a:	897b      	ldrh	r3, [r7, #10]
 800fd5c:	089b      	lsrs	r3, r3, #2
 800fd5e:	b29b      	uxth	r3, r3
 800fd60:	3305      	adds	r3, #5
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	031b      	lsls	r3, r3, #12
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	f043 0310 	orr.w	r3, r3, #16
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fa fcc4 	bl	800a6fc <lwip_htons>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461a      	mov	r2, r3
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fa fcbb 	bl	800a6fc <lwip_htons>
 800fd86:	4603      	mov	r3, r0
 800fd88:	461a      	mov	r2, r3
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2200      	movs	r2, #0
 800fd92:	741a      	strb	r2, [r3, #16]
 800fd94:	2200      	movs	r2, #0
 800fd96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	749a      	strb	r2, [r3, #18]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fdaa:	441a      	add	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fdb0:	697b      	ldr	r3, [r7, #20]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3718      	adds	r7, #24
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	080190d4 	.word	0x080190d4
 800fdc0:	08019108 	.word	0x08019108
 800fdc4:	08019138 	.word	0x08019138

0800fdc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fdc8:	b590      	push	{r4, r7, lr}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d02d      	beq.n	800fe34 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fddc:	60fb      	str	r3, [r7, #12]
 800fdde:	e002      	b.n	800fde6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d1f8      	bne.n	800fde0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	899b      	ldrh	r3, [r3, #12]
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fa fc80 	bl	800a6fc <lwip_htons>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d116      	bne.n	800fe34 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	b29c      	uxth	r4, r3
 800fe0e:	2001      	movs	r0, #1
 800fe10:	f7fa fc74 	bl	800a6fc <lwip_htons>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	4322      	orrs	r2, r4
 800fe1e:	b292      	uxth	r2, r2
 800fe20:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	7e9b      	ldrb	r3, [r3, #26]
 800fe26:	f043 0320 	orr.w	r3, r3, #32
 800fe2a:	b2da      	uxtb	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	e004      	b.n	800fe3e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fe34:	2101      	movs	r1, #1
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fcc0 	bl	80107bc <tcp_enqueue_flags>
 800fe3c:	4603      	mov	r3, r0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd90      	pop	{r4, r7, pc}
	...

0800fe48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800fe48:	b590      	push	{r4, r7, lr}
 800fe4a:	b087      	sub	sp, #28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	603b      	str	r3, [r7, #0]
 800fe54:	4613      	mov	r3, r2
 800fe56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fe58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	f003 0304 	and.w	r3, r3, #4
 800fe64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe66:	2003      	movs	r0, #3
 800fe68:	f7fb f86c 	bl	800af44 <memp_malloc>
 800fe6c:	6138      	str	r0, [r7, #16]
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d104      	bne.n	800fe7e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe74:	68b8      	ldr	r0, [r7, #8]
 800fe76:	f7fb fe19 	bl	800baac <pbuf_free>
    return NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e061      	b.n	800ff42 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	891a      	ldrh	r2, [r3, #8]
 800fe96:	7dfb      	ldrb	r3, [r7, #23]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d205      	bcs.n	800feaa <tcp_create_segment+0x62>
 800fe9e:	4b2b      	ldr	r3, [pc, #172]	; (800ff4c <tcp_create_segment+0x104>)
 800fea0:	22ba      	movs	r2, #186	; 0xba
 800fea2:	492b      	ldr	r1, [pc, #172]	; (800ff50 <tcp_create_segment+0x108>)
 800fea4:	482b      	ldr	r0, [pc, #172]	; (800ff54 <tcp_create_segment+0x10c>)
 800fea6:	f006 fb11 	bl	80164cc <iprintf>
  seg->len = p->tot_len - optlen;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	891a      	ldrh	r2, [r3, #8]
 800feae:	7dfb      	ldrb	r3, [r7, #23]
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800feba:	2114      	movs	r1, #20
 800febc:	68b8      	ldr	r0, [r7, #8]
 800febe:	f7fb fdd1 	bl	800ba64 <pbuf_header>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d004      	beq.n	800fed2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fec8:	6938      	ldr	r0, [r7, #16]
 800feca:	f7fd f92a 	bl	800d122 <tcp_seg_free>
    return NULL;
 800fece:	2300      	movs	r3, #0
 800fed0:	e037      	b.n	800ff42 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	8ada      	ldrh	r2, [r3, #22]
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	68dc      	ldr	r4, [r3, #12]
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7fa fc09 	bl	800a6fc <lwip_htons>
 800feea:	4603      	mov	r3, r0
 800feec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	8b1a      	ldrh	r2, [r3, #24]
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	68dc      	ldr	r4, [r3, #12]
 800fef6:	4610      	mov	r0, r2
 800fef8:	f7fa fc00 	bl	800a6fc <lwip_htons>
 800fefc:	4603      	mov	r3, r0
 800fefe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	68dc      	ldr	r4, [r3, #12]
 800ff04:	6838      	ldr	r0, [r7, #0]
 800ff06:	f7fa fc07 	bl	800a718 <lwip_htonl>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ff0e:	7dfb      	ldrb	r3, [r7, #23]
 800ff10:	089b      	lsrs	r3, r3, #2
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	3305      	adds	r3, #5
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	031b      	lsls	r3, r3, #12
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	4313      	orrs	r3, r2
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	68dc      	ldr	r4, [r3, #12]
 800ff2a:	4610      	mov	r0, r2
 800ff2c:	f7fa fbe6 	bl	800a6fc <lwip_htons>
 800ff30:	4603      	mov	r3, r0
 800ff32:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	749a      	strb	r2, [r3, #18]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ff40:	693b      	ldr	r3, [r7, #16]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	371c      	adds	r7, #28
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd90      	pop	{r4, r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	080190d4 	.word	0x080190d4
 800ff50:	08019160 	.word	0x08019160
 800ff54:	08019138 	.word	0x08019138

0800ff58 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	607b      	str	r3, [r7, #4]
 800ff60:	4603      	mov	r3, r0
 800ff62:	73fb      	strb	r3, [r7, #15]
 800ff64:	460b      	mov	r3, r1
 800ff66:	81bb      	strh	r3, [r7, #12]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ff6c:	89bb      	ldrh	r3, [r7, #12]
 800ff6e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ff70:	89ba      	ldrh	r2, [r7, #12]
 800ff72:	897b      	ldrh	r3, [r7, #10]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d221      	bcs.n	800ffbc <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff7c:	f003 0302 	and.w	r3, r3, #2
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d111      	bne.n	800ffa8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800ff84:	6a3b      	ldr	r3, [r7, #32]
 800ff86:	7e9b      	ldrb	r3, [r3, #26]
 800ff88:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d115      	bne.n	800ffbc <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800ff90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d007      	beq.n	800ffa8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d103      	bne.n	800ffa8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ffa8:	89bb      	ldrh	r3, [r7, #12]
 800ffaa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ffae:	f023 0203 	bic.w	r2, r3, #3
 800ffb2:	897b      	ldrh	r3, [r7, #10]
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	bf28      	it	cs
 800ffb8:	4613      	movcs	r3, r2
 800ffba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ffbc:	8af9      	ldrh	r1, [r7, #22]
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fb fa00 	bl	800b3c8 <pbuf_alloc>
 800ffc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	e019      	b.n	8010008 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <tcp_pbuf_prealloc+0x92>
 800ffdc:	4b0c      	ldr	r3, [pc, #48]	; (8010010 <tcp_pbuf_prealloc+0xb8>)
 800ffde:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ffe2:	490c      	ldr	r1, [pc, #48]	; (8010014 <tcp_pbuf_prealloc+0xbc>)
 800ffe4:	480c      	ldr	r0, [pc, #48]	; (8010018 <tcp_pbuf_prealloc+0xc0>)
 800ffe6:	f006 fa71 	bl	80164cc <iprintf>
  *oversize = p->len - length;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	895a      	ldrh	r2, [r3, #10]
 800ffee:	89bb      	ldrh	r3, [r7, #12]
 800fff0:	1ad3      	subs	r3, r2, r3
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	89ba      	ldrh	r2, [r7, #12]
 800fffc:	811a      	strh	r2, [r3, #8]
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	891a      	ldrh	r2, [r3, #8]
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	815a      	strh	r2, [r3, #10]
  return p;
 8010006:	693b      	ldr	r3, [r7, #16]
}
 8010008:	4618      	mov	r0, r3
 801000a:	3718      	adds	r7, #24
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	080190d4 	.word	0x080190d4
 8010014:	08019178 	.word	0x08019178
 8010018:	08019138 	.word	0x08019138

0801001c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	460b      	mov	r3, r1
 8010026:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	2b04      	cmp	r3, #4
 801002e:	d00e      	beq.n	801004e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010034:	2b07      	cmp	r3, #7
 8010036:	d00a      	beq.n	801004e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801003c:	2b02      	cmp	r3, #2
 801003e:	d006      	beq.n	801004e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010044:	2b03      	cmp	r3, #3
 8010046:	d002      	beq.n	801004e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010048:	f06f 030a 	mvn.w	r3, #10
 801004c:	e04f      	b.n	80100ee <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801004e:	887b      	ldrh	r3, [r7, #2]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	e04a      	b.n	80100ee <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801005e:	887a      	ldrh	r2, [r7, #2]
 8010060:	429a      	cmp	r2, r3
 8010062:	d909      	bls.n	8010078 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	7e9b      	ldrb	r3, [r3, #26]
 8010068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801006c:	b2da      	uxtb	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010076:	e03a      	b.n	80100ee <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801007e:	2b08      	cmp	r3, #8
 8010080:	d806      	bhi.n	8010090 <tcp_write_checks+0x74>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010088:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801008c:	4293      	cmp	r3, r2
 801008e:	d909      	bls.n	80100a4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	7e9b      	ldrb	r3, [r3, #26]
 8010094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010098:	b2da      	uxtb	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801009e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100a2:	e024      	b.n	80100ee <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d00f      	beq.n	80100ce <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d11a      	bne.n	80100ec <tcp_write_checks+0xd0>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d116      	bne.n	80100ec <tcp_write_checks+0xd0>
 80100be:	4b0e      	ldr	r3, [pc, #56]	; (80100f8 <tcp_write_checks+0xdc>)
 80100c0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80100c4:	490d      	ldr	r1, [pc, #52]	; (80100fc <tcp_write_checks+0xe0>)
 80100c6:	480e      	ldr	r0, [pc, #56]	; (8010100 <tcp_write_checks+0xe4>)
 80100c8:	f006 fa00 	bl	80164cc <iprintf>
 80100cc:	e00e      	b.n	80100ec <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d103      	bne.n	80100de <tcp_write_checks+0xc2>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d006      	beq.n	80100ec <tcp_write_checks+0xd0>
 80100de:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <tcp_write_checks+0xdc>)
 80100e0:	f240 1259 	movw	r2, #345	; 0x159
 80100e4:	4907      	ldr	r1, [pc, #28]	; (8010104 <tcp_write_checks+0xe8>)
 80100e6:	4806      	ldr	r0, [pc, #24]	; (8010100 <tcp_write_checks+0xe4>)
 80100e8:	f006 f9f0 	bl	80164cc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	080190d4 	.word	0x080190d4
 80100fc:	0801918c 	.word	0x0801918c
 8010100:	08019138 	.word	0x08019138
 8010104:	080191c8 	.word	0x080191c8

08010108 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010108:	b590      	push	{r4, r7, lr}
 801010a:	b09b      	sub	sp, #108	; 0x6c
 801010c:	af04      	add	r7, sp, #16
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	4611      	mov	r1, r2
 8010114:	461a      	mov	r2, r3
 8010116:	460b      	mov	r3, r1
 8010118:	80fb      	strh	r3, [r7, #6]
 801011a:	4613      	mov	r3, r2
 801011c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801011e:	2300      	movs	r3, #0
 8010120:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010122:	2300      	movs	r3, #0
 8010124:	653b      	str	r3, [r7, #80]	; 0x50
 8010126:	2300      	movs	r3, #0
 8010128:	64fb      	str	r3, [r7, #76]	; 0x4c
 801012a:	2300      	movs	r3, #0
 801012c:	64bb      	str	r3, [r7, #72]	; 0x48
 801012e:	2300      	movs	r3, #0
 8010130:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010132:	2300      	movs	r3, #0
 8010134:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010138:	2300      	movs	r3, #0
 801013a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010144:	2300      	movs	r3, #0
 8010146:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801014c:	2300      	movs	r3, #0
 801014e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010156:	085b      	lsrs	r3, r3, #1
 8010158:	b29a      	uxth	r2, r3
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801015e:	4293      	cmp	r3, r2
 8010160:	bf28      	it	cs
 8010162:	4613      	movcs	r3, r2
 8010164:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010168:	2b00      	cmp	r3, #0
 801016a:	d102      	bne.n	8010172 <tcp_write+0x6a>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010170:	e000      	b.n	8010174 <tcp_write+0x6c>
 8010172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010174:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d109      	bne.n	8010190 <tcp_write+0x88>
 801017c:	4b92      	ldr	r3, [pc, #584]	; (80103c8 <tcp_write+0x2c0>)
 801017e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8010182:	4992      	ldr	r1, [pc, #584]	; (80103cc <tcp_write+0x2c4>)
 8010184:	4892      	ldr	r0, [pc, #584]	; (80103d0 <tcp_write+0x2c8>)
 8010186:	f006 f9a1 	bl	80164cc <iprintf>
 801018a:	f06f 030f 	mvn.w	r3, #15
 801018e:	e30a      	b.n	80107a6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	4619      	mov	r1, r3
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7ff ff41 	bl	801001c <tcp_write_checks>
 801019a:	4603      	mov	r3, r0
 801019c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80101a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <tcp_write+0xa6>
    return err;
 80101a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80101ac:	e2fb      	b.n	80107a6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 80f5 	beq.w	80103ac <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101c6:	653b      	str	r3, [r7, #80]	; 0x50
 80101c8:	e002      	b.n	80101d0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80101ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1f8      	bne.n	80101ca <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80101d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101da:	7a9b      	ldrb	r3, [r3, #10]
 80101dc:	009b      	lsls	r3, r3, #2
 80101de:	b29b      	uxth	r3, r3
 80101e0:	f003 0304 	and.w	r3, r3, #4
 80101e4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80101e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ea:	891b      	ldrh	r3, [r3, #8]
 80101ec:	4619      	mov	r1, r3
 80101ee:	8c3b      	ldrh	r3, [r7, #32]
 80101f0:	440b      	add	r3, r1
 80101f2:	429a      	cmp	r2, r3
 80101f4:	da06      	bge.n	8010204 <tcp_write+0xfc>
 80101f6:	4b74      	ldr	r3, [pc, #464]	; (80103c8 <tcp_write+0x2c0>)
 80101f8:	f240 12c7 	movw	r2, #455	; 0x1c7
 80101fc:	4975      	ldr	r1, [pc, #468]	; (80103d4 <tcp_write+0x2cc>)
 80101fe:	4874      	ldr	r0, [pc, #464]	; (80103d0 <tcp_write+0x2c8>)
 8010200:	f006 f964 	bl	80164cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010206:	891a      	ldrh	r2, [r3, #8]
 8010208:	8c3b      	ldrh	r3, [r7, #32]
 801020a:	4413      	add	r3, r2
 801020c:	b29b      	uxth	r3, r3
 801020e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010210:	1ad3      	subs	r3, r2, r3
 8010212:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801021a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d027      	beq.n	8010272 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010222:	8a7b      	ldrh	r3, [r7, #18]
 8010224:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010226:	429a      	cmp	r2, r3
 8010228:	d206      	bcs.n	8010238 <tcp_write+0x130>
 801022a:	4b67      	ldr	r3, [pc, #412]	; (80103c8 <tcp_write+0x2c0>)
 801022c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010230:	4969      	ldr	r1, [pc, #420]	; (80103d8 <tcp_write+0x2d0>)
 8010232:	4867      	ldr	r0, [pc, #412]	; (80103d0 <tcp_write+0x2c8>)
 8010234:	f006 f94a 	bl	80164cc <iprintf>
      seg = last_unsent;
 8010238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801023a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801023c:	8a7b      	ldrh	r3, [r7, #18]
 801023e:	88fa      	ldrh	r2, [r7, #6]
 8010240:	429a      	cmp	r2, r3
 8010242:	d901      	bls.n	8010248 <tcp_write+0x140>
 8010244:	8a7b      	ldrh	r3, [r7, #18]
 8010246:	e000      	b.n	801024a <tcp_write+0x142>
 8010248:	88fb      	ldrh	r3, [r7, #6]
 801024a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801024c:	4293      	cmp	r3, r2
 801024e:	bfa8      	it	ge
 8010250:	4613      	movge	r3, r2
 8010252:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010258:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801025a:	4413      	add	r3, r2
 801025c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010260:	8a7a      	ldrh	r2, [r7, #18]
 8010262:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	b29b      	uxth	r3, r3
 8010268:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801026a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801026c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010272:	8a7b      	ldrh	r3, [r7, #18]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00b      	beq.n	8010290 <tcp_write+0x188>
 8010278:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801027c:	88fb      	ldrh	r3, [r7, #6]
 801027e:	429a      	cmp	r2, r3
 8010280:	d006      	beq.n	8010290 <tcp_write+0x188>
 8010282:	4b51      	ldr	r3, [pc, #324]	; (80103c8 <tcp_write+0x2c0>)
 8010284:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010288:	4954      	ldr	r1, [pc, #336]	; (80103dc <tcp_write+0x2d4>)
 801028a:	4851      	ldr	r0, [pc, #324]	; (80103d0 <tcp_write+0x2c8>)
 801028c:	f006 f91e 	bl	80164cc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010290:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010294:	88fb      	ldrh	r3, [r7, #6]
 8010296:	429a      	cmp	r2, r3
 8010298:	f080 8168 	bcs.w	801056c <tcp_write+0x464>
 801029c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801029e:	2b00      	cmp	r3, #0
 80102a0:	f000 8164 	beq.w	801056c <tcp_write+0x464>
 80102a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a6:	891b      	ldrh	r3, [r3, #8]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 815f 	beq.w	801056c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80102ae:	88fa      	ldrh	r2, [r7, #6]
 80102b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102b4:	1ad2      	subs	r2, r2, r3
 80102b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102b8:	4293      	cmp	r3, r2
 80102ba:	bfa8      	it	ge
 80102bc:	4613      	movge	r3, r2
 80102be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80102c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80102c4:	797b      	ldrb	r3, [r7, #5]
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d027      	beq.n	801031e <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80102ce:	f107 0012 	add.w	r0, r7, #18
 80102d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102d4:	8bf9      	ldrh	r1, [r7, #30]
 80102d6:	2301      	movs	r3, #1
 80102d8:	9302      	str	r3, [sp, #8]
 80102da:	797b      	ldrb	r3, [r7, #5]
 80102dc:	9301      	str	r3, [sp, #4]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4603      	mov	r3, r0
 80102e4:	2004      	movs	r0, #4
 80102e6:	f7ff fe37 	bl	800ff58 <tcp_pbuf_prealloc>
 80102ea:	6578      	str	r0, [r7, #84]	; 0x54
 80102ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f000 8227 	beq.w	8010742 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80102f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102f6:	6858      	ldr	r0, [r3, #4]
 80102f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	4413      	add	r3, r2
 8010300:	8bfa      	ldrh	r2, [r7, #30]
 8010302:	4619      	mov	r1, r3
 8010304:	f006 f8cf 	bl	80164a6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010308:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801030a:	f7fb fc69 	bl	800bbe0 <pbuf_clen>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010316:	4413      	add	r3, r2
 8010318:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801031c:	e03f      	b.n	801039e <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801031e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
 8010324:	e002      	b.n	801032c <tcp_write+0x224>
 8010326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	637b      	str	r3, [r7, #52]	; 0x34
 801032c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1f8      	bne.n	8010326 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010336:	7b1b      	ldrb	r3, [r3, #12]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d115      	bne.n	8010368 <tcp_write+0x260>
 801033c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010342:	8952      	ldrh	r2, [r2, #10]
 8010344:	4413      	add	r3, r2
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	429a      	cmp	r2, r3
 801034a:	d10d      	bne.n	8010368 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801034c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010350:	2b00      	cmp	r3, #0
 8010352:	d006      	beq.n	8010362 <tcp_write+0x25a>
 8010354:	4b1c      	ldr	r3, [pc, #112]	; (80103c8 <tcp_write+0x2c0>)
 8010356:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801035a:	4921      	ldr	r1, [pc, #132]	; (80103e0 <tcp_write+0x2d8>)
 801035c:	481c      	ldr	r0, [pc, #112]	; (80103d0 <tcp_write+0x2c8>)
 801035e:	f006 f8b5 	bl	80164cc <iprintf>
          extendlen = seglen;
 8010362:	8bfb      	ldrh	r3, [r7, #30]
 8010364:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010366:	e01a      	b.n	801039e <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010368:	8bfb      	ldrh	r3, [r7, #30]
 801036a:	2201      	movs	r2, #1
 801036c:	4619      	mov	r1, r3
 801036e:	2004      	movs	r0, #4
 8010370:	f7fb f82a 	bl	800b3c8 <pbuf_alloc>
 8010374:	6578      	str	r0, [r7, #84]	; 0x54
 8010376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010378:	2b00      	cmp	r3, #0
 801037a:	f000 81e4 	beq.w	8010746 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801037e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010382:	68ba      	ldr	r2, [r7, #8]
 8010384:	441a      	add	r2, r3
 8010386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010388:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801038a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801038c:	f7fb fc28 	bl	800bbe0 <pbuf_clen>
 8010390:	4603      	mov	r3, r0
 8010392:	461a      	mov	r2, r3
 8010394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010398:	4413      	add	r3, r2
 801039a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801039e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103a2:	8bfb      	ldrh	r3, [r7, #30]
 80103a4:	4413      	add	r3, r2
 80103a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80103aa:	e0df      	b.n	801056c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 80da 	beq.w	801056c <tcp_write+0x464>
 80103b8:	4b03      	ldr	r3, [pc, #12]	; (80103c8 <tcp_write+0x2c0>)
 80103ba:	f240 2225 	movw	r2, #549	; 0x225
 80103be:	4909      	ldr	r1, [pc, #36]	; (80103e4 <tcp_write+0x2dc>)
 80103c0:	4803      	ldr	r0, [pc, #12]	; (80103d0 <tcp_write+0x2c8>)
 80103c2:	f006 f883 	bl	80164cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80103c6:	e0d1      	b.n	801056c <tcp_write+0x464>
 80103c8:	080190d4 	.word	0x080190d4
 80103cc:	080191fc 	.word	0x080191fc
 80103d0:	08019138 	.word	0x08019138
 80103d4:	08019230 	.word	0x08019230
 80103d8:	08019248 	.word	0x08019248
 80103dc:	08019268 	.word	0x08019268
 80103e0:	08019288 	.word	0x08019288
 80103e4:	080192b4 	.word	0x080192b4
    struct pbuf *p;
    u16_t left = len - pos;
 80103e8:	88fa      	ldrh	r2, [r7, #6]
 80103ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80103f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80103fa:	1ad3      	subs	r3, r2, r3
 80103fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80103fe:	8b7a      	ldrh	r2, [r7, #26]
 8010400:	8bbb      	ldrh	r3, [r7, #28]
 8010402:	4293      	cmp	r3, r2
 8010404:	bf28      	it	cs
 8010406:	4613      	movcs	r3, r2
 8010408:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801040a:	797b      	ldrb	r3, [r7, #5]
 801040c:	f003 0301 	and.w	r3, r3, #1
 8010410:	2b00      	cmp	r3, #0
 8010412:	d036      	beq.n	8010482 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010418:	b29a      	uxth	r2, r3
 801041a:	8b3b      	ldrh	r3, [r7, #24]
 801041c:	4413      	add	r3, r2
 801041e:	b299      	uxth	r1, r3
 8010420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010422:	2b00      	cmp	r3, #0
 8010424:	bf0c      	ite	eq
 8010426:	2301      	moveq	r3, #1
 8010428:	2300      	movne	r3, #0
 801042a:	b2db      	uxtb	r3, r3
 801042c:	f107 0012 	add.w	r0, r7, #18
 8010430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010432:	9302      	str	r3, [sp, #8]
 8010434:	797b      	ldrb	r3, [r7, #5]
 8010436:	9301      	str	r3, [sp, #4]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	4603      	mov	r3, r0
 801043e:	2000      	movs	r0, #0
 8010440:	f7ff fd8a 	bl	800ff58 <tcp_pbuf_prealloc>
 8010444:	6338      	str	r0, [r7, #48]	; 0x30
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 817e 	beq.w	801074a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	895b      	ldrh	r3, [r3, #10]
 8010452:	8b3a      	ldrh	r2, [r7, #24]
 8010454:	429a      	cmp	r2, r3
 8010456:	d906      	bls.n	8010466 <tcp_write+0x35e>
 8010458:	4b8f      	ldr	r3, [pc, #572]	; (8010698 <tcp_write+0x590>)
 801045a:	f240 2241 	movw	r2, #577	; 0x241
 801045e:	498f      	ldr	r1, [pc, #572]	; (801069c <tcp_write+0x594>)
 8010460:	488f      	ldr	r0, [pc, #572]	; (80106a0 <tcp_write+0x598>)
 8010462:	f006 f833 	bl	80164cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801046e:	18d0      	adds	r0, r2, r3
 8010470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	8b3a      	ldrh	r2, [r7, #24]
 801047a:	4619      	mov	r1, r3
 801047c:	f006 f813 	bl	80164a6 <memcpy>
 8010480:	e02e      	b.n	80104e0 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010482:	8a7b      	ldrh	r3, [r7, #18]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d006      	beq.n	8010496 <tcp_write+0x38e>
 8010488:	4b83      	ldr	r3, [pc, #524]	; (8010698 <tcp_write+0x590>)
 801048a:	f240 224b 	movw	r2, #587	; 0x24b
 801048e:	4985      	ldr	r1, [pc, #532]	; (80106a4 <tcp_write+0x59c>)
 8010490:	4883      	ldr	r0, [pc, #524]	; (80106a0 <tcp_write+0x598>)
 8010492:	f006 f81b 	bl	80164cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010496:	8b3b      	ldrh	r3, [r7, #24]
 8010498:	2201      	movs	r2, #1
 801049a:	4619      	mov	r1, r3
 801049c:	2000      	movs	r0, #0
 801049e:	f7fa ff93 	bl	800b3c8 <pbuf_alloc>
 80104a2:	6178      	str	r0, [r7, #20]
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f000 8151 	beq.w	801074e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80104ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	441a      	add	r2, r3
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80104b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104bc:	b29b      	uxth	r3, r3
 80104be:	2200      	movs	r2, #0
 80104c0:	4619      	mov	r1, r3
 80104c2:	2000      	movs	r0, #0
 80104c4:	f7fa ff80 	bl	800b3c8 <pbuf_alloc>
 80104c8:	6338      	str	r0, [r7, #48]	; 0x30
 80104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80104d0:	6978      	ldr	r0, [r7, #20]
 80104d2:	f7fb faeb 	bl	800baac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80104d6:	e13d      	b.n	8010754 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80104d8:	6979      	ldr	r1, [r7, #20]
 80104da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104dc:	f7fb fbc0 	bl	800bc60 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80104e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e2:	f7fb fb7d 	bl	800bbe0 <pbuf_clen>
 80104e6:	4603      	mov	r3, r0
 80104e8:	461a      	mov	r2, r3
 80104ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104ee:	4413      	add	r3, r2
 80104f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80104f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104f8:	2b09      	cmp	r3, #9
 80104fa:	d805      	bhi.n	8010508 <tcp_write+0x400>
 80104fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010500:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010504:	4293      	cmp	r3, r2
 8010506:	d903      	bls.n	8010510 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801050a:	f7fb facf 	bl	800baac <pbuf_free>
      goto memerr;
 801050e:	e121      	b.n	8010754 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010518:	441a      	add	r2, r3
 801051a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	4613      	mov	r3, r2
 8010522:	2200      	movs	r2, #0
 8010524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7ff fc8e 	bl	800fe48 <tcp_create_segment>
 801052c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801052e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010530:	2b00      	cmp	r3, #0
 8010532:	f000 810e 	beq.w	8010752 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010538:	2b00      	cmp	r3, #0
 801053a:	d102      	bne.n	8010542 <tcp_write+0x43a>
      queue = seg;
 801053c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801053e:	647b      	str	r3, [r7, #68]	; 0x44
 8010540:	e00c      	b.n	801055c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <tcp_write+0x44e>
 8010548:	4b53      	ldr	r3, [pc, #332]	; (8010698 <tcp_write+0x590>)
 801054a:	f240 2285 	movw	r2, #645	; 0x285
 801054e:	4956      	ldr	r1, [pc, #344]	; (80106a8 <tcp_write+0x5a0>)
 8010550:	4853      	ldr	r0, [pc, #332]	; (80106a0 <tcp_write+0x598>)
 8010552:	f005 ffbb 	bl	80164cc <iprintf>
      prev_seg->next = seg;
 8010556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801055a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801055c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801055e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010564:	8b3b      	ldrh	r3, [r7, #24]
 8010566:	4413      	add	r3, r2
 8010568:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801056c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010570:	88fb      	ldrh	r3, [r7, #6]
 8010572:	429a      	cmp	r2, r3
 8010574:	f4ff af38 	bcc.w	80103e8 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010578:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801057a:	2b00      	cmp	r3, #0
 801057c:	d02c      	beq.n	80105d8 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801057e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010584:	e01e      	b.n	80105c4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010588:	891a      	ldrh	r2, [r3, #8]
 801058a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801058c:	4413      	add	r3, r2
 801058e:	b29a      	uxth	r2, r3
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d110      	bne.n	80105be <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105a2:	8952      	ldrh	r2, [r2, #10]
 80105a4:	4413      	add	r3, r2
 80105a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80105a8:	68b9      	ldr	r1, [r7, #8]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f005 ff7b 	bl	80164a6 <memcpy>
        p->len += oversize_used;
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	895a      	ldrh	r2, [r3, #10]
 80105b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105b6:	4413      	add	r3, r2
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1dd      	bne.n	8010586 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80105ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105cc:	891a      	ldrh	r2, [r3, #8]
 80105ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105d0:	4413      	add	r3, r2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105d6:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80105d8:	8a7a      	ldrh	r2, [r7, #18]
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80105e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d018      	beq.n	8010618 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80105e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d106      	bne.n	80105fa <tcp_write+0x4f2>
 80105ec:	4b2a      	ldr	r3, [pc, #168]	; (8010698 <tcp_write+0x590>)
 80105ee:	f240 22bb 	movw	r2, #699	; 0x2bb
 80105f2:	492e      	ldr	r1, [pc, #184]	; (80106ac <tcp_write+0x5a4>)
 80105f4:	482a      	ldr	r0, [pc, #168]	; (80106a0 <tcp_write+0x598>)
 80105f6:	f005 ff69 	bl	80164cc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80105fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010600:	4618      	mov	r0, r3
 8010602:	f7fb fb2d 	bl	800bc60 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010608:	891a      	ldrh	r2, [r3, #8]
 801060a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801060c:	891b      	ldrh	r3, [r3, #8]
 801060e:	4413      	add	r3, r2
 8010610:	b29a      	uxth	r2, r3
 8010612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010614:	811a      	strh	r2, [r3, #8]
 8010616:	e037      	b.n	8010688 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010618:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801061a:	2b00      	cmp	r3, #0
 801061c:	d034      	beq.n	8010688 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801061e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010620:	2b00      	cmp	r3, #0
 8010622:	d003      	beq.n	801062c <tcp_write+0x524>
 8010624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d106      	bne.n	801063a <tcp_write+0x532>
 801062c:	4b1a      	ldr	r3, [pc, #104]	; (8010698 <tcp_write+0x590>)
 801062e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8010632:	491f      	ldr	r1, [pc, #124]	; (80106b0 <tcp_write+0x5a8>)
 8010634:	481a      	ldr	r0, [pc, #104]	; (80106a0 <tcp_write+0x598>)
 8010636:	f005 ff49 	bl	80164cc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801063a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010640:	e009      	b.n	8010656 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	891a      	ldrh	r2, [r3, #8]
 8010646:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010648:	4413      	add	r3, r2
 801064a:	b29a      	uxth	r2, r3
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	62bb      	str	r3, [r7, #40]	; 0x28
 8010656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1f1      	bne.n	8010642 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010660:	891a      	ldrh	r2, [r3, #8]
 8010662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010664:	4413      	add	r3, r2
 8010666:	b29a      	uxth	r2, r3
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801066c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066e:	895a      	ldrh	r2, [r3, #10]
 8010670:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010672:	4413      	add	r3, r2
 8010674:	b29a      	uxth	r2, r3
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067c:	891a      	ldrh	r2, [r3, #8]
 801067e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010680:	4413      	add	r3, r2
 8010682:	b29a      	uxth	r2, r3
 8010684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010686:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801068a:	2b00      	cmp	r3, #0
 801068c:	d112      	bne.n	80106b4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010692:	669a      	str	r2, [r3, #104]	; 0x68
 8010694:	e011      	b.n	80106ba <tcp_write+0x5b2>
 8010696:	bf00      	nop
 8010698:	080190d4 	.word	0x080190d4
 801069c:	080192e4 	.word	0x080192e4
 80106a0:	08019138 	.word	0x08019138
 80106a4:	08019324 	.word	0x08019324
 80106a8:	08019334 	.word	0x08019334
 80106ac:	08019348 	.word	0x08019348
 80106b0:	08019380 	.word	0x08019380
  } else {
    last_unsent->next = queue;
 80106b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106be:	88fb      	ldrh	r3, [r7, #6]
 80106c0:	441a      	add	r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106cc:	88fb      	ldrh	r3, [r7, #6]
 80106ce:	1ad3      	subs	r3, r2, r3
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80106de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00e      	beq.n	801070a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <tcp_write+0x602>
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <tcp_write+0x602>
 80106fc:	4b2c      	ldr	r3, [pc, #176]	; (80107b0 <tcp_write+0x6a8>)
 80106fe:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010702:	492c      	ldr	r1, [pc, #176]	; (80107b4 <tcp_write+0x6ac>)
 8010704:	482c      	ldr	r0, [pc, #176]	; (80107b8 <tcp_write+0x6b0>)
 8010706:	f005 fee1 	bl	80164cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801070a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801070c:	2b00      	cmp	r3, #0
 801070e:	d016      	beq.n	801073e <tcp_write+0x636>
 8010710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d012      	beq.n	801073e <tcp_write+0x636>
 8010718:	797b      	ldrb	r3, [r7, #5]
 801071a:	f003 0302 	and.w	r3, r3, #2
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10d      	bne.n	801073e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	899b      	ldrh	r3, [r3, #12]
 8010728:	b29c      	uxth	r4, r3
 801072a:	2008      	movs	r0, #8
 801072c:	f7f9 ffe6 	bl	800a6fc <lwip_htons>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	4322      	orrs	r2, r4
 801073a:	b292      	uxth	r2, r2
 801073c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801073e:	2300      	movs	r3, #0
 8010740:	e031      	b.n	80107a6 <tcp_write+0x69e>
          goto memerr;
 8010742:	bf00      	nop
 8010744:	e006      	b.n	8010754 <tcp_write+0x64c>
            goto memerr;
 8010746:	bf00      	nop
 8010748:	e004      	b.n	8010754 <tcp_write+0x64c>
        goto memerr;
 801074a:	bf00      	nop
 801074c:	e002      	b.n	8010754 <tcp_write+0x64c>
        goto memerr;
 801074e:	bf00      	nop
 8010750:	e000      	b.n	8010754 <tcp_write+0x64c>
      goto memerr;
 8010752:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	7e9b      	ldrb	r3, [r3, #26]
 8010758:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801075c:	b2da      	uxtb	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010764:	2b00      	cmp	r3, #0
 8010766:	d002      	beq.n	801076e <tcp_write+0x666>
    pbuf_free(concat_p);
 8010768:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801076a:	f7fb f99f 	bl	800baac <pbuf_free>
  }
  if (queue != NULL) {
 801076e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010770:	2b00      	cmp	r3, #0
 8010772:	d002      	beq.n	801077a <tcp_write+0x672>
    tcp_segs_free(queue);
 8010774:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010776:	f7fc fcc0 	bl	800d0fa <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00e      	beq.n	80107a2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010788:	2b00      	cmp	r3, #0
 801078a:	d10a      	bne.n	80107a2 <tcp_write+0x69a>
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010790:	2b00      	cmp	r3, #0
 8010792:	d106      	bne.n	80107a2 <tcp_write+0x69a>
 8010794:	4b06      	ldr	r3, [pc, #24]	; (80107b0 <tcp_write+0x6a8>)
 8010796:	f240 3202 	movw	r2, #770	; 0x302
 801079a:	4906      	ldr	r1, [pc, #24]	; (80107b4 <tcp_write+0x6ac>)
 801079c:	4806      	ldr	r0, [pc, #24]	; (80107b8 <tcp_write+0x6b0>)
 801079e:	f005 fe95 	bl	80164cc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80107a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	375c      	adds	r7, #92	; 0x5c
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd90      	pop	{r4, r7, pc}
 80107ae:	bf00      	nop
 80107b0:	080190d4 	.word	0x080190d4
 80107b4:	080193b8 	.word	0x080193b8
 80107b8:	08019138 	.word	0x08019138

080107bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08a      	sub	sp, #40	; 0x28
 80107c0:	af02      	add	r7, sp, #8
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80107c8:	2300      	movs	r3, #0
 80107ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80107cc:	2300      	movs	r3, #0
 80107ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80107d0:	78fb      	ldrb	r3, [r7, #3]
 80107d2:	f003 0303 	and.w	r3, r3, #3
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <tcp_enqueue_flags+0x2c>
 80107da:	4b6f      	ldr	r3, [pc, #444]	; (8010998 <tcp_enqueue_flags+0x1dc>)
 80107dc:	f240 321b 	movw	r2, #795	; 0x31b
 80107e0:	496e      	ldr	r1, [pc, #440]	; (801099c <tcp_enqueue_flags+0x1e0>)
 80107e2:	486f      	ldr	r0, [pc, #444]	; (80109a0 <tcp_enqueue_flags+0x1e4>)
 80107e4:	f005 fe72 	bl	80164cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80107ee:	2b08      	cmp	r3, #8
 80107f0:	d806      	bhi.n	8010800 <tcp_enqueue_flags+0x44>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80107f8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d90e      	bls.n	801081e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010800:	78fb      	ldrb	r3, [r7, #3]
 8010802:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010806:	2b00      	cmp	r3, #0
 8010808:	d109      	bne.n	801081e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7e9b      	ldrb	r3, [r3, #26]
 801080e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010812:	b2da      	uxtb	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801081c:	e0b7      	b.n	801098e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801081e:	78fb      	ldrb	r3, [r7, #3]
 8010820:	f003 0302 	and.w	r3, r3, #2
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010828:	2301      	movs	r3, #1
 801082a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801082c:	7ffb      	ldrb	r3, [r7, #31]
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	b2db      	uxtb	r3, r3
 8010832:	f003 0304 	and.w	r3, r3, #4
 8010836:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010838:	7dfb      	ldrb	r3, [r7, #23]
 801083a:	b29b      	uxth	r3, r3
 801083c:	2200      	movs	r2, #0
 801083e:	4619      	mov	r1, r3
 8010840:	2000      	movs	r0, #0
 8010842:	f7fa fdc1 	bl	800b3c8 <pbuf_alloc>
 8010846:	6138      	str	r0, [r7, #16]
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d109      	bne.n	8010862 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7e9b      	ldrb	r3, [r3, #26]
 8010852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010856:	b2da      	uxtb	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801085c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010860:	e095      	b.n	801098e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	895a      	ldrh	r2, [r3, #10]
 8010866:	7dfb      	ldrb	r3, [r7, #23]
 8010868:	b29b      	uxth	r3, r3
 801086a:	429a      	cmp	r2, r3
 801086c:	d206      	bcs.n	801087c <tcp_enqueue_flags+0xc0>
 801086e:	4b4a      	ldr	r3, [pc, #296]	; (8010998 <tcp_enqueue_flags+0x1dc>)
 8010870:	f240 3241 	movw	r2, #833	; 0x341
 8010874:	494b      	ldr	r1, [pc, #300]	; (80109a4 <tcp_enqueue_flags+0x1e8>)
 8010876:	484a      	ldr	r0, [pc, #296]	; (80109a0 <tcp_enqueue_flags+0x1e4>)
 8010878:	f005 fe28 	bl	80164cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010880:	78fa      	ldrb	r2, [r7, #3]
 8010882:	7ffb      	ldrb	r3, [r7, #31]
 8010884:	9300      	str	r3, [sp, #0]
 8010886:	460b      	mov	r3, r1
 8010888:	6939      	ldr	r1, [r7, #16]
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff fadc 	bl	800fe48 <tcp_create_segment>
 8010890:	60f8      	str	r0, [r7, #12]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d109      	bne.n	80108ac <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	7e9b      	ldrb	r3, [r3, #26]
 801089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80108a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108aa:	e070      	b.n	801098e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	f003 0303 	and.w	r3, r3, #3
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d006      	beq.n	80108c6 <tcp_enqueue_flags+0x10a>
 80108b8:	4b37      	ldr	r3, [pc, #220]	; (8010998 <tcp_enqueue_flags+0x1dc>)
 80108ba:	f240 3249 	movw	r2, #841	; 0x349
 80108be:	493a      	ldr	r1, [pc, #232]	; (80109a8 <tcp_enqueue_flags+0x1ec>)
 80108c0:	4837      	ldr	r0, [pc, #220]	; (80109a0 <tcp_enqueue_flags+0x1e4>)
 80108c2:	f005 fe03 	bl	80164cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	891b      	ldrh	r3, [r3, #8]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d006      	beq.n	80108dc <tcp_enqueue_flags+0x120>
 80108ce:	4b32      	ldr	r3, [pc, #200]	; (8010998 <tcp_enqueue_flags+0x1dc>)
 80108d0:	f240 324a 	movw	r2, #842	; 0x34a
 80108d4:	4935      	ldr	r1, [pc, #212]	; (80109ac <tcp_enqueue_flags+0x1f0>)
 80108d6:	4832      	ldr	r0, [pc, #200]	; (80109a0 <tcp_enqueue_flags+0x1e4>)
 80108d8:	f005 fdf8 	bl	80164cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d103      	bne.n	80108ec <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	669a      	str	r2, [r3, #104]	; 0x68
 80108ea:	e00d      	b.n	8010908 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108f0:	61bb      	str	r3, [r7, #24]
 80108f2:	e002      	b.n	80108fa <tcp_enqueue_flags+0x13e>
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	61bb      	str	r3, [r7, #24]
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1f8      	bne.n	80108f4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010910:	78fb      	ldrb	r3, [r7, #3]
 8010912:	f003 0302 	and.w	r3, r3, #2
 8010916:	2b00      	cmp	r3, #0
 8010918:	d104      	bne.n	8010924 <tcp_enqueue_flags+0x168>
 801091a:	78fb      	ldrb	r3, [r7, #3]
 801091c:	f003 0301 	and.w	r3, r3, #1
 8010920:	2b00      	cmp	r3, #0
 8010922:	d004      	beq.n	801092e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010928:	1c5a      	adds	r2, r3, #1
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801092e:	78fb      	ldrb	r3, [r7, #3]
 8010930:	f003 0301 	and.w	r3, r3, #1
 8010934:	2b00      	cmp	r3, #0
 8010936:	d006      	beq.n	8010946 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	7e9b      	ldrb	r3, [r3, #26]
 801093c:	f043 0320 	orr.w	r3, r3, #32
 8010940:	b2da      	uxtb	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	4618      	mov	r0, r3
 801094c:	f7fb f948 	bl	800bbe0 <pbuf_clen>
 8010950:	4603      	mov	r3, r0
 8010952:	461a      	mov	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801095a:	4413      	add	r3, r2
 801095c:	b29a      	uxth	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00e      	beq.n	801098c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010972:	2b00      	cmp	r3, #0
 8010974:	d10a      	bne.n	801098c <tcp_enqueue_flags+0x1d0>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801097a:	2b00      	cmp	r3, #0
 801097c:	d106      	bne.n	801098c <tcp_enqueue_flags+0x1d0>
 801097e:	4b06      	ldr	r3, [pc, #24]	; (8010998 <tcp_enqueue_flags+0x1dc>)
 8010980:	f240 326d 	movw	r2, #877	; 0x36d
 8010984:	490a      	ldr	r1, [pc, #40]	; (80109b0 <tcp_enqueue_flags+0x1f4>)
 8010986:	4806      	ldr	r0, [pc, #24]	; (80109a0 <tcp_enqueue_flags+0x1e4>)
 8010988:	f005 fda0 	bl	80164cc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801098c:	2300      	movs	r3, #0
}
 801098e:	4618      	mov	r0, r3
 8010990:	3720      	adds	r7, #32
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	080190d4 	.word	0x080190d4
 801099c:	080193d8 	.word	0x080193d8
 80109a0:	08019138 	.word	0x08019138
 80109a4:	08019430 	.word	0x08019430
 80109a8:	0801946c 	.word	0x0801946c
 80109ac:	08019484 	.word	0x08019484
 80109b0:	080194b0 	.word	0x080194b0

080109b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80109b4:	b590      	push	{r4, r7, lr}
 80109b6:	b08b      	sub	sp, #44	; 0x2c
 80109b8:	af04      	add	r7, sp, #16
 80109ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80109c0:	7dbb      	ldrb	r3, [r7, #22]
 80109c2:	b29c      	uxth	r4, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7f9 fea5 	bl	800a718 <lwip_htonl>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2200      	movs	r2, #0
 80109d2:	4621      	mov	r1, r4
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff f97b 	bl	800fcd0 <tcp_output_alloc_header>
 80109da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d109      	bne.n	80109f6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7e9b      	ldrb	r3, [r3, #26]
 80109e6:	f043 0303 	orr.w	r3, r3, #3
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80109f0:	f06f 0301 	mvn.w	r3, #1
 80109f4:	e036      	b.n	8010a64 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	3304      	adds	r3, #4
 80109fa:	4618      	mov	r0, r3
 80109fc:	f004 f9a6 	bl	8014d4c <ip4_route>
 8010a00:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010a08:	23fc      	movs	r3, #252	; 0xfc
 8010a0a:	75fb      	strb	r3, [r7, #23]
 8010a0c:	e012      	b.n	8010a34 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8010a0e:	6879      	ldr	r1, [r7, #4]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	1d18      	adds	r0, r3, #4
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	7a9c      	ldrb	r4, [r3, #10]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7a5b      	ldrb	r3, [r3, #9]
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	9202      	str	r2, [sp, #8]
 8010a20:	2206      	movs	r2, #6
 8010a22:	9201      	str	r2, [sp, #4]
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	4623      	mov	r3, r4
 8010a28:	4602      	mov	r2, r0
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f004 fb54 	bl	80150d8 <ip4_output_if>
 8010a30:	4603      	mov	r3, r0
 8010a32:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010a34:	6938      	ldr	r0, [r7, #16]
 8010a36:	f7fb f839 	bl	800baac <pbuf_free>

  if (err != ERR_OK) {
 8010a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d007      	beq.n	8010a52 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	7e9b      	ldrb	r3, [r3, #26]
 8010a46:	f043 0303 	orr.w	r3, r3, #3
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	769a      	strb	r2, [r3, #26]
 8010a50:	e006      	b.n	8010a60 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	7e9b      	ldrb	r3, [r3, #26]
 8010a56:	f023 0303 	bic.w	r3, r3, #3
 8010a5a:	b2da      	uxtb	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	371c      	adds	r7, #28
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd90      	pop	{r4, r7, pc}

08010a6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a6c:	b5b0      	push	{r4, r5, r7, lr}
 8010a6e:	b08a      	sub	sp, #40	; 0x28
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	7d1b      	ldrb	r3, [r3, #20]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d106      	bne.n	8010a8a <tcp_output+0x1e>
 8010a7c:	4b9b      	ldr	r3, [pc, #620]	; (8010cec <tcp_output+0x280>)
 8010a7e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010a82:	499b      	ldr	r1, [pc, #620]	; (8010cf0 <tcp_output+0x284>)
 8010a84:	489b      	ldr	r0, [pc, #620]	; (8010cf4 <tcp_output+0x288>)
 8010a86:	f005 fd21 	bl	80164cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010a8a:	4b9b      	ldr	r3, [pc, #620]	; (8010cf8 <tcp_output+0x28c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d101      	bne.n	8010a98 <tcp_output+0x2c>
    return ERR_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	e1cf      	b.n	8010e38 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d203      	bcs.n	8010ab0 <tcp_output+0x44>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010aae:	e002      	b.n	8010ab6 <tcp_output+0x4a>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ab6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010abc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	7e9b      	ldrb	r3, [r3, #26]
 8010ac2:	f003 0302 	and.w	r3, r3, #2
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d017      	beq.n	8010afa <tcp_output+0x8e>
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00f      	beq.n	8010af0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f9 fe1e 	bl	800a718 <lwip_htonl>
 8010adc:	4602      	mov	r2, r0
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ae2:	1ad3      	subs	r3, r2, r3
 8010ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ae6:	8912      	ldrh	r2, [r2, #8]
 8010ae8:	4413      	add	r3, r2
     (seg == NULL ||
 8010aea:	69ba      	ldr	r2, [r7, #24]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d204      	bcs.n	8010afa <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff ff5f 	bl	80109b4 <tcp_send_empty_ack>
 8010af6:	4603      	mov	r3, r0
 8010af8:	e19e      	b.n	8010e38 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010afe:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d007      	beq.n	8010b16 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8010b06:	e002      	b.n	8010b0e <tcp_output+0xa2>
 8010b08:	6a3b      	ldr	r3, [r7, #32]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	623b      	str	r3, [r7, #32]
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1f8      	bne.n	8010b08 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f004 f916 	bl	8014d4c <ip4_route>
 8010b20:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d102      	bne.n	8010b2e <tcp_output+0xc2>
    return ERR_RTE;
 8010b28:	f06f 0303 	mvn.w	r3, #3
 8010b2c:	e184      	b.n	8010e38 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d003      	beq.n	8010b3c <tcp_output+0xd0>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d111      	bne.n	8010b60 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d002      	beq.n	8010b48 <tcp_output+0xdc>
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	3304      	adds	r3, #4
 8010b46:	e000      	b.n	8010b4a <tcp_output+0xde>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d102      	bne.n	8010b58 <tcp_output+0xec>
      return ERR_RTE;
 8010b52:	f06f 0303 	mvn.w	r3, #3
 8010b56:	e16f      	b.n	8010e38 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f000 813e 	beq.w	8010de4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7f9 fdd2 	bl	800a718 <lwip_htonl>
 8010b74:	4602      	mov	r2, r0
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b7e:	8912      	ldrh	r2, [r2, #8]
 8010b80:	4413      	add	r3, r2
  if (seg != NULL &&
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	f080 812d 	bcs.w	8010de4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 8129 	beq.w	8010de4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b98:	461a      	mov	r2, r3
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	f040 8121 	bne.w	8010de4 <tcp_output+0x378>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f040 811c 	bne.w	8010de4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f040 812b 	bne.w	8010e0e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8010bc8:	e121      	b.n	8010e0e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	899b      	ldrh	r3, [r3, #12]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7f9 fd92 	bl	800a6fc <lwip_htons>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	f003 0304 	and.w	r3, r3, #4
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d006      	beq.n	8010bf0 <tcp_output+0x184>
 8010be2:	4b42      	ldr	r3, [pc, #264]	; (8010cec <tcp_output+0x280>)
 8010be4:	f240 4246 	movw	r2, #1094	; 0x446
 8010be8:	4944      	ldr	r1, [pc, #272]	; (8010cfc <tcp_output+0x290>)
 8010bea:	4842      	ldr	r0, [pc, #264]	; (8010cf4 <tcp_output+0x288>)
 8010bec:	f005 fc6e 	bl	80164cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d01f      	beq.n	8010c38 <tcp_output+0x1cc>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	7e9b      	ldrb	r3, [r3, #26]
 8010bfc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d119      	bne.n	8010c38 <tcp_output+0x1cc>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d00b      	beq.n	8010c24 <tcp_output+0x1b8>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d110      	bne.n	8010c38 <tcp_output+0x1cc>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c1a:	891a      	ldrh	r2, [r3, #8]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d209      	bcs.n	8010c38 <tcp_output+0x1cc>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d004      	beq.n	8010c38 <tcp_output+0x1cc>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c34:	2b08      	cmp	r3, #8
 8010c36:	d901      	bls.n	8010c3c <tcp_output+0x1d0>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e000      	b.n	8010c3e <tcp_output+0x1d2>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d106      	bne.n	8010c50 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	7e9b      	ldrb	r3, [r3, #26]
 8010c46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f000 80e1 	beq.w	8010e12 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	7d1b      	ldrb	r3, [r3, #20]
 8010c54:	2b02      	cmp	r3, #2
 8010c56:	d00d      	beq.n	8010c74 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	899b      	ldrh	r3, [r3, #12]
 8010c5e:	b29c      	uxth	r4, r3
 8010c60:	2010      	movs	r0, #16
 8010c62:	f7f9 fd4b 	bl	800a6fc <lwip_htons>
 8010c66:	4603      	mov	r3, r0
 8010c68:	461a      	mov	r2, r3
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	4322      	orrs	r2, r4
 8010c70:	b292      	uxth	r2, r2
 8010c72:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8010c74:	697a      	ldr	r2, [r7, #20]
 8010c76:	6879      	ldr	r1, [r7, #4]
 8010c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c7a:	f000 f8e1 	bl	8010e40 <tcp_output_segment>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d009      	beq.n	8010c9e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	7e9b      	ldrb	r3, [r3, #26]
 8010c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	769a      	strb	r2, [r3, #26]
      return err;
 8010c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c9c:	e0cc      	b.n	8010e38 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d006      	beq.n	8010cbc <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	7e9b      	ldrb	r3, [r3, #26]
 8010cb2:	f023 0303 	bic.w	r3, r3, #3
 8010cb6:	b2da      	uxtb	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7f9 fd28 	bl	800a718 <lwip_htonl>
 8010cc8:	4604      	mov	r4, r0
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	891b      	ldrh	r3, [r3, #8]
 8010cce:	461d      	mov	r5, r3
 8010cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	899b      	ldrh	r3, [r3, #12]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7f9 fd0f 	bl	800a6fc <lwip_htons>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	f003 0303 	and.w	r3, r3, #3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d00b      	beq.n	8010d00 <tcp_output+0x294>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e00a      	b.n	8010d02 <tcp_output+0x296>
 8010cec:	080190d4 	.word	0x080190d4
 8010cf0:	080194d8 	.word	0x080194d8
 8010cf4:	08019138 	.word	0x08019138
 8010cf8:	2000f770 	.word	0x2000f770
 8010cfc:	08019500 	.word	0x08019500
 8010d00:	2300      	movs	r3, #0
 8010d02:	442b      	add	r3, r5
 8010d04:	4423      	add	r3, r4
 8010d06:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	1ad3      	subs	r3, r2, r3
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	da02      	bge.n	8010d1a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1c:	891b      	ldrh	r3, [r3, #8]
 8010d1e:	461c      	mov	r4, r3
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	899b      	ldrh	r3, [r3, #12]
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7f9 fce7 	bl	800a6fc <lwip_htons>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	f003 0303 	and.w	r3, r3, #3
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <tcp_output+0x2d0>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e000      	b.n	8010d3e <tcp_output+0x2d2>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4423      	add	r3, r4
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d049      	beq.n	8010dd8 <tcp_output+0x36c>
      seg->next = NULL;
 8010d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d46:	2200      	movs	r2, #0
 8010d48:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d105      	bne.n	8010d5e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d56:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8010d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5a:	623b      	str	r3, [r7, #32]
 8010d5c:	e03f      	b.n	8010dde <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	68db      	ldr	r3, [r3, #12]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f9 fcd7 	bl	800a718 <lwip_htonl>
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f9 fcd0 	bl	800a718 <lwip_htonl>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	1ae3      	subs	r3, r4, r3
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	da24      	bge.n	8010dca <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	336c      	adds	r3, #108	; 0x6c
 8010d84:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d86:	e002      	b.n	8010d8e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d011      	beq.n	8010dba <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f9 fcba 	bl	800a718 <lwip_htonl>
 8010da4:	4604      	mov	r4, r0
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f9 fcb3 	bl	800a718 <lwip_htonl>
 8010db2:	4603      	mov	r3, r0
 8010db4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	dbe6      	blt.n	8010d88 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	681a      	ldr	r2, [r3, #0]
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	e009      	b.n	8010dde <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dce:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010dd0:	6a3b      	ldr	r3, [r7, #32]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	623b      	str	r3, [r7, #32]
 8010dd6:	e002      	b.n	8010dde <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dda:	f7fc f9a2 	bl	800d122 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010de2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d015      	beq.n	8010e16 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f9 fc91 	bl	800a718 <lwip_htonl>
 8010df6:	4602      	mov	r2, r0
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e00:	8912      	ldrh	r2, [r2, #8]
 8010e02:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	f4bf aedf 	bcs.w	8010bca <tcp_output+0x15e>
  }
output_done:
 8010e0c:	e003      	b.n	8010e16 <tcp_output+0x3aa>
    goto output_done;
 8010e0e:	bf00      	nop
 8010e10:	e002      	b.n	8010e18 <tcp_output+0x3ac>
      break;
 8010e12:	bf00      	nop
 8010e14:	e000      	b.n	8010e18 <tcp_output+0x3ac>
output_done:
 8010e16:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d103      	bne.n	8010e28 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	7e9b      	ldrb	r3, [r3, #26]
 8010e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3728      	adds	r7, #40	; 0x28
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bdb0      	pop	{r4, r5, r7, pc}

08010e40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010e40:	b5b0      	push	{r4, r5, r7, lr}
 8010e42:	b08c      	sub	sp, #48	; 0x30
 8010e44:	af04      	add	r7, sp, #16
 8010e46:	60f8      	str	r0, [r7, #12]
 8010e48:	60b9      	str	r1, [r7, #8]
 8010e4a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	89db      	ldrh	r3, [r3, #14]
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d001      	beq.n	8010e5a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e08b      	b.n	8010f72 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	68dc      	ldr	r4, [r3, #12]
 8010e62:	4610      	mov	r0, r2
 8010e64:	f7f9 fc58 	bl	800a718 <lwip_htonl>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	68dc      	ldr	r4, [r3, #12]
 8010e74:	4610      	mov	r0, r2
 8010e76:	f7f9 fc41 	bl	800a6fc <lwip_htons>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e86:	441a      	add	r2, r3
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	3314      	adds	r3, #20
 8010e92:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	7a9b      	ldrb	r3, [r3, #10]
 8010e98:	f003 0301 	and.w	r3, r3, #1
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d014      	beq.n	8010eca <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010eaa:	f7fc fc73 	bl	800d794 <tcp_eff_send_mss_impl>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010eb2:	8b7b      	ldrh	r3, [r7, #26]
 8010eb4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7f9 fc2d 	bl	800a718 <lwip_htonl>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	da02      	bge.n	8010eda <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d10c      	bne.n	8010efc <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8010ee2:	4b26      	ldr	r3, [pc, #152]	; (8010f7c <tcp_output_segment+0x13c>)
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68db      	ldr	r3, [r3, #12]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7f9 fc11 	bl	800a718 <lwip_htonl>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	461a      	mov	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	8959      	ldrh	r1, [r3, #10]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	8b3a      	ldrh	r2, [r7, #24]
 8010f18:	1a8a      	subs	r2, r1, r2
 8010f1a:	b292      	uxth	r2, r2
 8010f1c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	8919      	ldrh	r1, [r3, #8]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	8b3a      	ldrh	r2, [r7, #24]
 8010f2a:	1a8a      	subs	r2, r1, r2
 8010f2c:	b292      	uxth	r2, r2
 8010f2e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	68d2      	ldr	r2, [r2, #12]
 8010f38:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	741a      	strb	r2, [r3, #16]
 8010f42:	2200      	movs	r2, #0
 8010f44:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6858      	ldr	r0, [r3, #4]
 8010f4a:	68b9      	ldr	r1, [r7, #8]
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	1d1c      	adds	r4, r3, #4
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	7a9d      	ldrb	r5, [r3, #10]
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	7a5b      	ldrb	r3, [r3, #9]
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	9202      	str	r2, [sp, #8]
 8010f5c:	2206      	movs	r2, #6
 8010f5e:	9201      	str	r2, [sp, #4]
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	462b      	mov	r3, r5
 8010f64:	4622      	mov	r2, r4
 8010f66:	f004 f8b7 	bl	80150d8 <ip4_output_if>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8010f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3720      	adds	r7, #32
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bdb0      	pop	{r4, r5, r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	2000f760 	.word	0x2000f760

08010f80 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b08c      	sub	sp, #48	; 0x30
 8010f84:	af04      	add	r7, sp, #16
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
 8010f8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8010f8e:	2200      	movs	r2, #0
 8010f90:	2114      	movs	r1, #20
 8010f92:	2001      	movs	r0, #1
 8010f94:	f7fa fa18 	bl	800b3c8 <pbuf_alloc>
 8010f98:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d05b      	beq.n	8011058 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	895b      	ldrh	r3, [r3, #10]
 8010fa4:	2b13      	cmp	r3, #19
 8010fa6:	d806      	bhi.n	8010fb6 <tcp_rst+0x36>
 8010fa8:	4b2d      	ldr	r3, [pc, #180]	; (8011060 <tcp_rst+0xe0>)
 8010faa:	f240 524d 	movw	r2, #1357	; 0x54d
 8010fae:	492d      	ldr	r1, [pc, #180]	; (8011064 <tcp_rst+0xe4>)
 8010fb0:	482d      	ldr	r0, [pc, #180]	; (8011068 <tcp_rst+0xe8>)
 8010fb2:	f005 fa8b 	bl	80164cc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8010fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7f9 fb9c 	bl	800a6fc <lwip_htons>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8010fcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7f9 fb94 	bl	800a6fc <lwip_htons>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7f9 fb9b 	bl	800a718 <lwip_htonl>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8010fe8:	68b8      	ldr	r0, [r7, #8]
 8010fea:	f7f9 fb95 	bl	800a718 <lwip_htonl>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8010ff4:	f245 0014 	movw	r0, #20500	; 0x5014
 8010ff8:	f7f9 fb80 	bl	800a6fc <lwip_htons>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	2200      	movs	r2, #0
 8011008:	f042 0208 	orr.w	r2, r2, #8
 801100c:	739a      	strb	r2, [r3, #14]
 801100e:	2200      	movs	r2, #0
 8011010:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011014:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	2200      	movs	r2, #0
 801101a:	741a      	strb	r2, [r3, #16]
 801101c:	2200      	movs	r2, #0
 801101e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	2200      	movs	r2, #0
 8011024:	749a      	strb	r2, [r3, #18]
 8011026:	2200      	movs	r2, #0
 8011028:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801102a:	6838      	ldr	r0, [r7, #0]
 801102c:	f003 fe8e 	bl	8014d4c <ip4_route>
 8011030:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d00b      	beq.n	8011050 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	9302      	str	r3, [sp, #8]
 801103c:	2306      	movs	r3, #6
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	2300      	movs	r3, #0
 8011042:	9300      	str	r3, [sp, #0]
 8011044:	23ff      	movs	r3, #255	; 0xff
 8011046:	683a      	ldr	r2, [r7, #0]
 8011048:	6879      	ldr	r1, [r7, #4]
 801104a:	69f8      	ldr	r0, [r7, #28]
 801104c:	f004 f844 	bl	80150d8 <ip4_output_if>
  }
  pbuf_free(p);
 8011050:	69f8      	ldr	r0, [r7, #28]
 8011052:	f7fa fd2b 	bl	800baac <pbuf_free>
 8011056:	e000      	b.n	801105a <tcp_rst+0xda>
    return;
 8011058:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801105a:	3720      	adds	r7, #32
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}
 8011060:	080190d4 	.word	0x080190d4
 8011064:	08019108 	.word	0x08019108
 8011068:	08019138 	.word	0x08019138

0801106c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b084      	sub	sp, #16
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011078:	2b00      	cmp	r3, #0
 801107a:	d029      	beq.n	80110d0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011080:	60fb      	str	r3, [r7, #12]
 8011082:	e002      	b.n	801108a <tcp_rexmit_rto+0x1e>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	60fb      	str	r3, [r7, #12]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1f8      	bne.n	8011084 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2200      	movs	r2, #0
 80110a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110ae:	2bff      	cmp	r3, #255	; 0xff
 80110b0:	d007      	beq.n	80110c2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80110b8:	3301      	adds	r3, #1
 80110ba:	b2da      	uxtb	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2200      	movs	r2, #0
 80110c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff fccf 	bl	8010a6c <tcp_output>
 80110ce:	e000      	b.n	80110d2 <tcp_rexmit_rto+0x66>
    return;
 80110d0:	bf00      	nop
}
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80110d8:	b590      	push	{r4, r7, lr}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d043      	beq.n	8011170 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110ec:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3368      	adds	r3, #104	; 0x68
 80110fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80110fc:	e002      	b.n	8011104 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d011      	beq.n	8011130 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	f7f9 faff 	bl	800a718 <lwip_htonl>
 801111a:	4604      	mov	r4, r0
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	4618      	mov	r0, r3
 8011124:	f7f9 faf8 	bl	800a718 <lwip_htonl>
 8011128:	4603      	mov	r3, r0
 801112a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801112c:	2b00      	cmp	r3, #0
 801112e:	dbe6      	blt.n	80110fe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d103      	bne.n	801114e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2200      	movs	r2, #0
 801114a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011154:	2bff      	cmp	r3, #255	; 0xff
 8011156:	d007      	beq.n	8011168 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801115e:	3301      	adds	r3, #1
 8011160:	b2da      	uxtb	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	635a      	str	r2, [r3, #52]	; 0x34
 801116e:	e000      	b.n	8011172 <tcp_rexmit+0x9a>
    return;
 8011170:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	bd90      	pop	{r4, r7, pc}

08011178 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011184:	2b00      	cmp	r3, #0
 8011186:	d04a      	beq.n	801121e <tcp_rexmit_fast+0xa6>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7e9b      	ldrb	r3, [r3, #26]
 801118c:	f003 0304 	and.w	r3, r3, #4
 8011190:	2b00      	cmp	r3, #0
 8011192:	d144      	bne.n	801121e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7ff ff9f 	bl	80110d8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d207      	bcs.n	80111ba <tcp_rexmit_fast+0x42>
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111b0:	0fda      	lsrs	r2, r3, #31
 80111b2:	4413      	add	r3, r2
 80111b4:	105b      	asrs	r3, r3, #1
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	e006      	b.n	80111c8 <tcp_rexmit_fast+0x50>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80111c0:	0fda      	lsrs	r2, r3, #31
 80111c2:	4413      	add	r3, r2
 80111c4:	105b      	asrs	r3, r3, #1
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80111d4:	461a      	mov	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111da:	005b      	lsls	r3, r3, #1
 80111dc:	429a      	cmp	r2, r3
 80111de:	d206      	bcs.n	80111ee <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111f8:	4619      	mov	r1, r3
 80111fa:	0049      	lsls	r1, r1, #1
 80111fc:	440b      	add	r3, r1
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4413      	add	r3, r2
 8011202:	b29a      	uxth	r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7e9b      	ldrb	r3, [r3, #26]
 801120e:	f043 0304 	orr.w	r3, r3, #4
 8011212:	b2da      	uxtb	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801121e:	bf00      	nop
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b08a      	sub	sp, #40	; 0x28
 801122a:	af04      	add	r7, sp, #16
 801122c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011232:	3b01      	subs	r3, #1
 8011234:	4618      	mov	r0, r3
 8011236:	f7f9 fa6f 	bl	800a718 <lwip_htonl>
 801123a:	4603      	mov	r3, r0
 801123c:	2200      	movs	r2, #0
 801123e:	2100      	movs	r1, #0
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7fe fd45 	bl	800fcd0 <tcp_output_alloc_header>
 8011246:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d102      	bne.n	8011254 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801124e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011252:	e021      	b.n	8011298 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3304      	adds	r3, #4
 8011258:	4618      	mov	r0, r3
 801125a:	f003 fd77 	bl	8014d4c <ip4_route>
 801125e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d102      	bne.n	801126c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011266:	23fc      	movs	r3, #252	; 0xfc
 8011268:	75fb      	strb	r3, [r7, #23]
 801126a:	e010      	b.n	801128e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801126c:	6879      	ldr	r1, [r7, #4]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	1d1a      	adds	r2, r3, #4
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	7a98      	ldrb	r0, [r3, #10]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	9302      	str	r3, [sp, #8]
 801127a:	2306      	movs	r3, #6
 801127c:	9301      	str	r3, [sp, #4]
 801127e:	2300      	movs	r3, #0
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	4603      	mov	r3, r0
 8011284:	6938      	ldr	r0, [r7, #16]
 8011286:	f003 ff27 	bl	80150d8 <ip4_output_if>
 801128a:	4603      	mov	r3, r0
 801128c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801128e:	6938      	ldr	r0, [r7, #16]
 8011290:	f7fa fc0c 	bl	800baac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3718      	adds	r7, #24
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80112a0:	b590      	push	{r4, r7, lr}
 80112a2:	b08f      	sub	sp, #60	; 0x3c
 80112a4:	af04      	add	r7, sp, #16
 80112a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ac:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80112ae:	6a3b      	ldr	r3, [r7, #32]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d102      	bne.n	80112ba <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112b8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d101      	bne.n	80112c4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	e085      	b.n	80113d0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	899b      	ldrh	r3, [r3, #12]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7f9 fa15 	bl	800a6fc <lwip_htons>
 80112d2:	4603      	mov	r3, r0
 80112d4:	f003 0301 	and.w	r3, r3, #1
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d005      	beq.n	80112e8 <tcp_zero_window_probe+0x48>
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	891b      	ldrh	r3, [r3, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d101      	bne.n	80112e8 <tcp_zero_window_probe+0x48>
 80112e4:	2301      	movs	r3, #1
 80112e6:	e000      	b.n	80112ea <tcp_zero_window_probe+0x4a>
 80112e8:	2300      	movs	r3, #0
 80112ea:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80112ec:	7ffb      	ldrb	r3, [r7, #31]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	bf0c      	ite	eq
 80112f2:	2301      	moveq	r3, #1
 80112f4:	2300      	movne	r3, #0
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80112fa:	6a3b      	ldr	r3, [r7, #32]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	8bba      	ldrh	r2, [r7, #28]
 8011302:	2100      	movs	r1, #0
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fe fce3 	bl	800fcd0 <tcp_output_alloc_header>
 801130a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d102      	bne.n	8011318 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011316:	e05b      	b.n	80113d0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801131e:	7ffb      	ldrb	r3, [r7, #31]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00e      	beq.n	8011342 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	899b      	ldrh	r3, [r3, #12]
 8011328:	b29b      	uxth	r3, r3
 801132a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801132e:	b29c      	uxth	r4, r3
 8011330:	2011      	movs	r0, #17
 8011332:	f7f9 f9e3 	bl	800a6fc <lwip_htons>
 8011336:	4603      	mov	r3, r0
 8011338:	4323      	orrs	r3, r4
 801133a:	b29a      	uxth	r2, r3
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	819a      	strh	r2, [r3, #12]
 8011340:	e010      	b.n	8011364 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	3314      	adds	r3, #20
 8011348:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	6858      	ldr	r0, [r3, #4]
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	891a      	ldrh	r2, [r3, #8]
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	891b      	ldrh	r3, [r3, #8]
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	b29b      	uxth	r3, r3
 801135c:	2201      	movs	r2, #1
 801135e:	6939      	ldr	r1, [r7, #16]
 8011360:	f7fa fdb0 	bl	800bec4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	f7f9 f9d4 	bl	800a718 <lwip_htonl>
 8011370:	4603      	mov	r3, r0
 8011372:	3301      	adds	r3, #1
 8011374:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	1ad3      	subs	r3, r2, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	da02      	bge.n	8011388 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68fa      	ldr	r2, [r7, #12]
 8011386:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3304      	adds	r3, #4
 801138c:	4618      	mov	r0, r3
 801138e:	f003 fcdd 	bl	8014d4c <ip4_route>
 8011392:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d103      	bne.n	80113a2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801139a:	23fc      	movs	r3, #252	; 0xfc
 801139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113a0:	e011      	b.n	80113c6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113a2:	6879      	ldr	r1, [r7, #4]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	1d1a      	adds	r2, r3, #4
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	7a98      	ldrb	r0, [r3, #10]
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	9302      	str	r3, [sp, #8]
 80113b0:	2306      	movs	r3, #6
 80113b2:	9301      	str	r3, [sp, #4]
 80113b4:	2300      	movs	r3, #0
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	4603      	mov	r3, r0
 80113ba:	69b8      	ldr	r0, [r7, #24]
 80113bc:	f003 fe8c 	bl	80150d8 <ip4_output_if>
 80113c0:	4603      	mov	r3, r0
 80113c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80113c6:	69b8      	ldr	r0, [r7, #24]
 80113c8:	f7fa fb70 	bl	800baac <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80113cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	372c      	adds	r7, #44	; 0x2c
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd90      	pop	{r4, r7, pc}

080113d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80113e0:	f7fa fdf2 	bl	800bfc8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80113e4:	4b0a      	ldr	r3, [pc, #40]	; (8011410 <tcpip_tcp_timer+0x38>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d103      	bne.n	80113f4 <tcpip_tcp_timer+0x1c>
 80113ec:	4b09      	ldr	r3, [pc, #36]	; (8011414 <tcpip_tcp_timer+0x3c>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d005      	beq.n	8011400 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80113f4:	2200      	movs	r2, #0
 80113f6:	4908      	ldr	r1, [pc, #32]	; (8011418 <tcpip_tcp_timer+0x40>)
 80113f8:	20fa      	movs	r0, #250	; 0xfa
 80113fa:	f000 f86f 	bl	80114dc <sys_timeout>
 80113fe:	e002      	b.n	8011406 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011400:	4b06      	ldr	r3, [pc, #24]	; (801141c <tcpip_tcp_timer+0x44>)
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]
  }
}
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	2000f75c 	.word	0x2000f75c
 8011414:	2000f76c 	.word	0x2000f76c
 8011418:	080113d9 	.word	0x080113d9
 801141c:	20008918 	.word	0x20008918

08011420 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011424:	4b0a      	ldr	r3, [pc, #40]	; (8011450 <tcp_timer_needed+0x30>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d10f      	bne.n	801144c <tcp_timer_needed+0x2c>
 801142c:	4b09      	ldr	r3, [pc, #36]	; (8011454 <tcp_timer_needed+0x34>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d103      	bne.n	801143c <tcp_timer_needed+0x1c>
 8011434:	4b08      	ldr	r3, [pc, #32]	; (8011458 <tcp_timer_needed+0x38>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d007      	beq.n	801144c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801143c:	4b04      	ldr	r3, [pc, #16]	; (8011450 <tcp_timer_needed+0x30>)
 801143e:	2201      	movs	r2, #1
 8011440:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011442:	2200      	movs	r2, #0
 8011444:	4905      	ldr	r1, [pc, #20]	; (801145c <tcp_timer_needed+0x3c>)
 8011446:	20fa      	movs	r0, #250	; 0xfa
 8011448:	f000 f848 	bl	80114dc <sys_timeout>
  }
}
 801144c:	bf00      	nop
 801144e:	bd80      	pop	{r7, pc}
 8011450:	20008918 	.word	0x20008918
 8011454:	2000f75c 	.word	0x2000f75c
 8011458:	2000f76c 	.word	0x2000f76c
 801145c:	080113d9 	.word	0x080113d9

08011460 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b084      	sub	sp, #16
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	4903      	ldr	r1, [pc, #12]	; (8011488 <cyclic_timer+0x28>)
 801147a:	4618      	mov	r0, r3
 801147c:	f000 f82e 	bl	80114dc <sys_timeout>
}
 8011480:	bf00      	nop
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	08011461 	.word	0x08011461

0801148c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011492:	2301      	movs	r3, #1
 8011494:	607b      	str	r3, [r7, #4]
 8011496:	e00e      	b.n	80114b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011498:	4a0d      	ldr	r2, [pc, #52]	; (80114d0 <sys_timeouts_init+0x44>)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	00db      	lsls	r3, r3, #3
 80114a4:	4a0a      	ldr	r2, [pc, #40]	; (80114d0 <sys_timeouts_init+0x44>)
 80114a6:	4413      	add	r3, r2
 80114a8:	461a      	mov	r2, r3
 80114aa:	490a      	ldr	r1, [pc, #40]	; (80114d4 <sys_timeouts_init+0x48>)
 80114ac:	f000 f816 	bl	80114dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	3301      	adds	r3, #1
 80114b4:	607b      	str	r3, [r7, #4]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b04      	cmp	r3, #4
 80114ba:	d9ed      	bls.n	8011498 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80114bc:	f7f3 f990 	bl	80047e0 <sys_now>
 80114c0:	4602      	mov	r2, r0
 80114c2:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <sys_timeouts_init+0x4c>)
 80114c4:	601a      	str	r2, [r3, #0]
}
 80114c6:	bf00      	nop
 80114c8:	3708      	adds	r7, #8
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	080256b0 	.word	0x080256b0
 80114d4:	08011461 	.word	0x08011461
 80114d8:	20008914 	.word	0x20008914

080114dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b088      	sub	sp, #32
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80114e8:	200a      	movs	r0, #10
 80114ea:	f7f9 fd2b 	bl	800af44 <memp_malloc>
 80114ee:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10a      	bne.n	801150c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f040 8084 	bne.w	8011606 <sys_timeout+0x12a>
 80114fe:	4b44      	ldr	r3, [pc, #272]	; (8011610 <sys_timeout+0x134>)
 8011500:	22d4      	movs	r2, #212	; 0xd4
 8011502:	4944      	ldr	r1, [pc, #272]	; (8011614 <sys_timeout+0x138>)
 8011504:	4844      	ldr	r0, [pc, #272]	; (8011618 <sys_timeout+0x13c>)
 8011506:	f004 ffe1 	bl	80164cc <iprintf>
    return;
 801150a:	e07c      	b.n	8011606 <sys_timeout+0x12a>
  }

  now = sys_now();
 801150c:	f7f3 f968 	bl	80047e0 <sys_now>
 8011510:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011512:	4b42      	ldr	r3, [pc, #264]	; (801161c <sys_timeout+0x140>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d105      	bne.n	8011526 <sys_timeout+0x4a>
    diff = 0;
 801151a:	2300      	movs	r3, #0
 801151c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801151e:	4a40      	ldr	r2, [pc, #256]	; (8011620 <sys_timeout+0x144>)
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	6013      	str	r3, [r2, #0]
 8011524:	e004      	b.n	8011530 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011526:	4b3e      	ldr	r3, [pc, #248]	; (8011620 <sys_timeout+0x144>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	693a      	ldr	r2, [r7, #16]
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	441a      	add	r2, r3
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801154c:	4b33      	ldr	r3, [pc, #204]	; (801161c <sys_timeout+0x140>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d103      	bne.n	801155c <sys_timeout+0x80>
    next_timeout = timeout;
 8011554:	4a31      	ldr	r2, [pc, #196]	; (801161c <sys_timeout+0x140>)
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	6013      	str	r3, [r2, #0]
    return;
 801155a:	e055      	b.n	8011608 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801155c:	4b2f      	ldr	r3, [pc, #188]	; (801161c <sys_timeout+0x140>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	429a      	cmp	r2, r3
 8011566:	d20f      	bcs.n	8011588 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011568:	4b2c      	ldr	r3, [pc, #176]	; (801161c <sys_timeout+0x140>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6859      	ldr	r1, [r3, #4]
 801156e:	4b2b      	ldr	r3, [pc, #172]	; (801161c <sys_timeout+0x140>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	1a8a      	subs	r2, r1, r2
 8011576:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011578:	4b28      	ldr	r3, [pc, #160]	; (801161c <sys_timeout+0x140>)
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011580:	4a26      	ldr	r2, [pc, #152]	; (801161c <sys_timeout+0x140>)
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	e03f      	b.n	8011608 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011588:	4b24      	ldr	r3, [pc, #144]	; (801161c <sys_timeout+0x140>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	61fb      	str	r3, [r7, #28]
 801158e:	e036      	b.n	80115fe <sys_timeout+0x122>
      timeout->time -= t->time;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	1ad2      	subs	r2, r2, r3
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <sys_timeout+0xd8>
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d921      	bls.n	80115f8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d009      	beq.n	80115d0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	6859      	ldr	r1, [r3, #4]
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	1a8a      	subs	r2, r1, r2
 80115cc:	605a      	str	r2, [r3, #4]
 80115ce:	e00b      	b.n	80115e8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	68fa      	ldr	r2, [r7, #12]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d206      	bcs.n	80115e8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80115da:	4b10      	ldr	r3, [pc, #64]	; (801161c <sys_timeout+0x140>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	685a      	ldr	r2, [r3, #4]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	441a      	add	r2, r3
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80115f0:	69fb      	ldr	r3, [r7, #28]
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	601a      	str	r2, [r3, #0]
        break;
 80115f6:	e007      	b.n	8011608 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80115f8:	69fb      	ldr	r3, [r7, #28]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	61fb      	str	r3, [r7, #28]
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1c5      	bne.n	8011590 <sys_timeout+0xb4>
 8011604:	e000      	b.n	8011608 <sys_timeout+0x12c>
    return;
 8011606:	bf00      	nop
      }
    }
  }
}
 8011608:	3720      	adds	r7, #32
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	08019518 	.word	0x08019518
 8011614:	0801954c 	.word	0x0801954c
 8011618:	0801958c 	.word	0x0801958c
 801161c:	20008910 	.word	0x20008910
 8011620:	20008914 	.word	0x20008914

08011624 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b086      	sub	sp, #24
 8011628:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801162a:	4b24      	ldr	r3, [pc, #144]	; (80116bc <sys_check_timeouts+0x98>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d03f      	beq.n	80116b2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011632:	f7f3 f8d5 	bl	80047e0 <sys_now>
 8011636:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011638:	4b21      	ldr	r3, [pc, #132]	; (80116c0 <sys_check_timeouts+0x9c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	1ad3      	subs	r3, r2, r3
 8011640:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011646:	4b1d      	ldr	r3, [pc, #116]	; (80116bc <sys_check_timeouts+0x98>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d02c      	beq.n	80116ac <sys_check_timeouts+0x88>
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	697a      	ldr	r2, [r7, #20]
 8011658:	429a      	cmp	r2, r3
 801165a:	d327      	bcc.n	80116ac <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 801165c:	2301      	movs	r3, #1
 801165e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	4b16      	ldr	r3, [pc, #88]	; (80116c0 <sys_check_timeouts+0x9c>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4413      	add	r3, r2
 801166a:	4a15      	ldr	r2, [pc, #84]	; (80116c0 <sys_check_timeouts+0x9c>)
 801166c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4a0f      	ldr	r2, [pc, #60]	; (80116bc <sys_check_timeouts+0x98>)
 801167e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	689b      	ldr	r3, [r3, #8]
 8011684:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801168c:	68b9      	ldr	r1, [r7, #8]
 801168e:	200a      	movs	r0, #10
 8011690:	f7f9 fcaa 	bl	800afe8 <memp_free>
        if (handler != NULL) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d008      	beq.n	80116ac <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801169a:	480a      	ldr	r0, [pc, #40]	; (80116c4 <sys_check_timeouts+0xa0>)
 801169c:	f004 fe70 	bl	8016380 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6838      	ldr	r0, [r7, #0]
 80116a4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80116a6:	4807      	ldr	r0, [pc, #28]	; (80116c4 <sys_check_timeouts+0xa0>)
 80116a8:	f004 fe79 	bl	801639e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80116ac:	7cfb      	ldrb	r3, [r7, #19]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1c7      	bne.n	8011642 <sys_check_timeouts+0x1e>
  }
}
 80116b2:	bf00      	nop
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	20008910 	.word	0x20008910
 80116c0:	20008914 	.word	0x20008914
 80116c4:	2000c028 	.word	0x2000c028

080116c8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80116ce:	4b0f      	ldr	r3, [pc, #60]	; (801170c <sys_timeouts_sleeptime+0x44>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d102      	bne.n	80116dc <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80116d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116da:	e013      	b.n	8011704 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80116dc:	f7f3 f880 	bl	80047e0 <sys_now>
 80116e0:	4602      	mov	r2, r0
 80116e2:	4b0b      	ldr	r3, [pc, #44]	; (8011710 <sys_timeouts_sleeptime+0x48>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80116ea:	4b08      	ldr	r3, [pc, #32]	; (801170c <sys_timeouts_sleeptime+0x44>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d901      	bls.n	80116fa <sys_timeouts_sleeptime+0x32>
    return 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	e004      	b.n	8011704 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80116fa:	4b04      	ldr	r3, [pc, #16]	; (801170c <sys_timeouts_sleeptime+0x44>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	685a      	ldr	r2, [r3, #4]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	1ad3      	subs	r3, r2, r3
  }
}
 8011704:	4618      	mov	r0, r3
 8011706:	3708      	adds	r7, #8
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	20008910 	.word	0x20008910
 8011710:	20008914 	.word	0x20008914

08011714 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801171e:	4b0f      	ldr	r3, [pc, #60]	; (801175c <sys_timeouts_mbox_fetch+0x48>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d105      	bne.n	8011732 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011726:	2200      	movs	r2, #0
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f004 fcf3 	bl	8016116 <sys_arch_mbox_fetch>
    return;
 8011730:	e011      	b.n	8011756 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011732:	f7ff ffc9 	bl	80116c8 <sys_timeouts_sleeptime>
 8011736:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d008      	beq.n	8011750 <sys_timeouts_mbox_fetch+0x3c>
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f004 fce7 	bl	8016116 <sys_arch_mbox_fetch>
 8011748:	4603      	mov	r3, r0
 801174a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801174e:	d102      	bne.n	8011756 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011750:	f7ff ff68 	bl	8011624 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011754:	e7e3      	b.n	801171e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	20008910 	.word	0x20008910

08011760 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011760:	b480      	push	{r7}
 8011762:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011764:	bf00      	nop
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr
	...

08011770 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801177a:	4b17      	ldr	r3, [pc, #92]	; (80117d8 <udp_new_port+0x68>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	b291      	uxth	r1, r2
 8011782:	4a15      	ldr	r2, [pc, #84]	; (80117d8 <udp_new_port+0x68>)
 8011784:	8011      	strh	r1, [r2, #0]
 8011786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801178a:	4293      	cmp	r3, r2
 801178c:	d103      	bne.n	8011796 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801178e:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <udp_new_port+0x68>)
 8011790:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011794:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011796:	4b11      	ldr	r3, [pc, #68]	; (80117dc <udp_new_port+0x6c>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	603b      	str	r3, [r7, #0]
 801179c:	e011      	b.n	80117c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	8a5a      	ldrh	r2, [r3, #18]
 80117a2:	4b0d      	ldr	r3, [pc, #52]	; (80117d8 <udp_new_port+0x68>)
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d108      	bne.n	80117bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80117aa:	88fb      	ldrh	r3, [r7, #6]
 80117ac:	3301      	adds	r3, #1
 80117ae:	80fb      	strh	r3, [r7, #6]
 80117b0:	88fb      	ldrh	r3, [r7, #6]
 80117b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117b6:	d3e0      	bcc.n	801177a <udp_new_port+0xa>
        return 0;
 80117b8:	2300      	movs	r3, #0
 80117ba:	e007      	b.n	80117cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	603b      	str	r3, [r7, #0]
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1ea      	bne.n	801179e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80117c8:	4b03      	ldr	r3, [pc, #12]	; (80117d8 <udp_new_port+0x68>)
 80117ca:	881b      	ldrh	r3, [r3, #0]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	370c      	adds	r7, #12
 80117d0:	46bd      	mov	sp, r7
 80117d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d6:	4770      	bx	lr
 80117d8:	20000018 	.word	0x20000018
 80117dc:	2000f774 	.word	0x2000f774

080117e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b085      	sub	sp, #20
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	4613      	mov	r3, r2
 80117ec:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d018      	beq.n	8011826 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d013      	beq.n	8011822 <udp_input_local_match+0x42>
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00f      	beq.n	8011822 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011802:	4b14      	ldr	r3, [pc, #80]	; (8011854 <udp_input_local_match+0x74>)
 8011804:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801180a:	d00a      	beq.n	8011822 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	4b10      	ldr	r3, [pc, #64]	; (8011854 <udp_input_local_match+0x74>)
 8011812:	695b      	ldr	r3, [r3, #20]
 8011814:	405a      	eors	r2, r3
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	3308      	adds	r3, #8
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801181e:	2b00      	cmp	r3, #0
 8011820:	d110      	bne.n	8011844 <udp_input_local_match+0x64>
          return 1;
 8011822:	2301      	movs	r3, #1
 8011824:	e00f      	b.n	8011846 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d009      	beq.n	8011840 <udp_input_local_match+0x60>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d005      	beq.n	8011840 <udp_input_local_match+0x60>
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	4b06      	ldr	r3, [pc, #24]	; (8011854 <udp_input_local_match+0x74>)
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	429a      	cmp	r2, r3
 801183e:	d101      	bne.n	8011844 <udp_input_local_match+0x64>
      return 1;
 8011840:	2301      	movs	r3, #1
 8011842:	e000      	b.n	8011846 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8011844:	2300      	movs	r3, #0
}
 8011846:	4618      	mov	r0, r3
 8011848:	3714      	adds	r7, #20
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	2000c02c 	.word	0x2000c02c

08011858 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011858:	b590      	push	{r4, r7, lr}
 801185a:	b08d      	sub	sp, #52	; 0x34
 801185c:	af02      	add	r7, sp, #8
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	895b      	ldrh	r3, [r3, #10]
 801186a:	2b07      	cmp	r3, #7
 801186c:	d803      	bhi.n	8011876 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7fa f91c 	bl	800baac <pbuf_free>
    goto end;
 8011874:	e0c6      	b.n	8011a04 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801187c:	4b63      	ldr	r3, [pc, #396]	; (8011a0c <udp_input+0x1b4>)
 801187e:	695a      	ldr	r2, [r3, #20]
 8011880:	4b62      	ldr	r3, [pc, #392]	; (8011a0c <udp_input+0x1b4>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f003 fcf8 	bl	801527c <ip4_addr_isbroadcast_u32>
 801188c:	4603      	mov	r3, r0
 801188e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	881b      	ldrh	r3, [r3, #0]
 8011894:	b29b      	uxth	r3, r3
 8011896:	4618      	mov	r0, r3
 8011898:	f7f8 ff30 	bl	800a6fc <lwip_htons>
 801189c:	4603      	mov	r3, r0
 801189e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	885b      	ldrh	r3, [r3, #2]
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7f8 ff28 	bl	800a6fc <lwip_htons>
 80118ac:	4603      	mov	r3, r0
 80118ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80118b0:	2300      	movs	r3, #0
 80118b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80118b4:	2300      	movs	r3, #0
 80118b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80118b8:	2300      	movs	r3, #0
 80118ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118bc:	4b54      	ldr	r3, [pc, #336]	; (8011a10 <udp_input+0x1b8>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	627b      	str	r3, [r7, #36]	; 0x24
 80118c2:	e03b      	b.n	801193c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80118c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c6:	8a5b      	ldrh	r3, [r3, #18]
 80118c8:	89fa      	ldrh	r2, [r7, #14]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d131      	bne.n	8011932 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80118ce:	7cfb      	ldrb	r3, [r7, #19]
 80118d0:	461a      	mov	r2, r3
 80118d2:	6839      	ldr	r1, [r7, #0]
 80118d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118d6:	f7ff ff83 	bl	80117e0 <udp_input_local_match>
 80118da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d028      	beq.n	8011932 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80118e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e2:	7c1b      	ldrb	r3, [r3, #16]
 80118e4:	f003 0304 	and.w	r3, r3, #4
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d104      	bne.n	80118f6 <udp_input+0x9e>
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80118f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80118f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f8:	8a9b      	ldrh	r3, [r3, #20]
 80118fa:	8a3a      	ldrh	r2, [r7, #16]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d118      	bne.n	8011932 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011904:	2b00      	cmp	r3, #0
 8011906:	d005      	beq.n	8011914 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	4b3f      	ldr	r3, [pc, #252]	; (8011a0c <udp_input+0x1b4>)
 801190e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011910:	429a      	cmp	r2, r3
 8011912:	d10e      	bne.n	8011932 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011914:	6a3b      	ldr	r3, [r7, #32]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d014      	beq.n	8011944 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191c:	68da      	ldr	r2, [r3, #12]
 801191e:	6a3b      	ldr	r3, [r7, #32]
 8011920:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011922:	4b3b      	ldr	r3, [pc, #236]	; (8011a10 <udp_input+0x1b8>)
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011928:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801192a:	4a39      	ldr	r2, [pc, #228]	; (8011a10 <udp_input+0x1b8>)
 801192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011930:	e008      	b.n	8011944 <udp_input+0xec>
      }
    }

    prev = pcb;
 8011932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011934:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	627b      	str	r3, [r7, #36]	; 0x24
 801193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1c0      	bne.n	80118c4 <udp_input+0x6c>
 8011942:	e000      	b.n	8011946 <udp_input+0xee>
        break;
 8011944:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011948:	2b00      	cmp	r3, #0
 801194a:	d101      	bne.n	8011950 <udp_input+0xf8>
    pcb = uncon_pcb;
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d002      	beq.n	801195c <udp_input+0x104>
    for_us = 1;
 8011956:	2301      	movs	r3, #1
 8011958:	76fb      	strb	r3, [r7, #27]
 801195a:	e00a      	b.n	8011972 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	3304      	adds	r3, #4
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	4b2a      	ldr	r3, [pc, #168]	; (8011a0c <udp_input+0x1b4>)
 8011964:	695b      	ldr	r3, [r3, #20]
 8011966:	429a      	cmp	r2, r3
 8011968:	bf0c      	ite	eq
 801196a:	2301      	moveq	r3, #1
 801196c:	2300      	movne	r3, #0
 801196e:	b2db      	uxtb	r3, r3
 8011970:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011972:	7efb      	ldrb	r3, [r7, #27]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d042      	beq.n	80119fe <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8011978:	f06f 0107 	mvn.w	r1, #7
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7fa f871 	bl	800ba64 <pbuf_header>
 8011982:	4603      	mov	r3, r0
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00a      	beq.n	801199e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8011988:	4b22      	ldr	r3, [pc, #136]	; (8011a14 <udp_input+0x1bc>)
 801198a:	f240 1255 	movw	r2, #341	; 0x155
 801198e:	4922      	ldr	r1, [pc, #136]	; (8011a18 <udp_input+0x1c0>)
 8011990:	4822      	ldr	r0, [pc, #136]	; (8011a1c <udp_input+0x1c4>)
 8011992:	f004 fd9b 	bl	80164cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7fa f888 	bl	800baac <pbuf_free>
      goto end;
 801199c:	e032      	b.n	8011a04 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d012      	beq.n	80119ca <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80119a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a6:	699b      	ldr	r3, [r3, #24]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00a      	beq.n	80119c2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80119ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ae:	699c      	ldr	r4, [r3, #24]
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	69d8      	ldr	r0, [r3, #28]
 80119b4:	8a3b      	ldrh	r3, [r7, #16]
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	4b19      	ldr	r3, [pc, #100]	; (8011a20 <udp_input+0x1c8>)
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80119c0:	e021      	b.n	8011a06 <udp_input+0x1ae>
        pbuf_free(p);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f7fa f872 	bl	800baac <pbuf_free>
        goto end;
 80119c8:	e01c      	b.n	8011a04 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80119ca:	7cfb      	ldrb	r3, [r7, #19]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d112      	bne.n	80119f6 <udp_input+0x19e>
 80119d0:	4b0e      	ldr	r3, [pc, #56]	; (8011a0c <udp_input+0x1b4>)
 80119d2:	695b      	ldr	r3, [r3, #20]
 80119d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119d8:	2be0      	cmp	r3, #224	; 0xe0
 80119da:	d00c      	beq.n	80119f6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80119dc:	4b0b      	ldr	r3, [pc, #44]	; (8011a0c <udp_input+0x1b4>)
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	3308      	adds	r3, #8
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	b21b      	sxth	r3, r3
 80119e6:	4619      	mov	r1, r3
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7fa f84d 	bl	800ba88 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80119ee:	2103      	movs	r1, #3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f003 f923 	bl	8014c3c <icmp_dest_unreach>
      pbuf_free(p);
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7fa f858 	bl	800baac <pbuf_free>
  return;
 80119fc:	e003      	b.n	8011a06 <udp_input+0x1ae>
    pbuf_free(p);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7fa f854 	bl	800baac <pbuf_free>
  return;
 8011a04:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011a06:	372c      	adds	r7, #44	; 0x2c
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd90      	pop	{r4, r7, pc}
 8011a0c:	2000c02c 	.word	0x2000c02c
 8011a10:	2000f774 	.word	0x2000f774
 8011a14:	080195b4 	.word	0x080195b4
 8011a18:	080195e4 	.word	0x080195e4
 8011a1c:	080195f8 	.word	0x080195f8
 8011a20:	2000c03c 	.word	0x2000c03c

08011a24 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b088      	sub	sp, #32
 8011a28:	af02      	add	r7, sp, #8
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
 8011a30:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d002      	beq.n	8011a3e <udp_sendto_if+0x1a>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d102      	bne.n	8011a44 <udp_sendto_if+0x20>
    return ERR_VAL;
 8011a3e:	f06f 0305 	mvn.w	r3, #5
 8011a42:	e028      	b.n	8011a96 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d009      	beq.n	8011a5e <udp_sendto_if+0x3a>
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d005      	beq.n	8011a5e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a5a:	2be0      	cmp	r3, #224	; 0xe0
 8011a5c:	d103      	bne.n	8011a66 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	3304      	adds	r3, #4
 8011a62:	617b      	str	r3, [r7, #20]
 8011a64:	e00b      	b.n	8011a7e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	3304      	adds	r3, #4
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d002      	beq.n	8011a7a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8011a74:	f06f 0303 	mvn.w	r3, #3
 8011a78:	e00d      	b.n	8011a96 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011a7e:	887a      	ldrh	r2, [r7, #2]
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	9301      	str	r3, [sp, #4]
 8011a84:	6a3b      	ldr	r3, [r7, #32]
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	4613      	mov	r3, r2
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	68b9      	ldr	r1, [r7, #8]
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	f000 f806 	bl	8011aa0 <udp_sendto_if_src>
 8011a94:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3718      	adds	r7, #24
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b08c      	sub	sp, #48	; 0x30
 8011aa4:	af04      	add	r7, sp, #16
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
 8011aac:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <udp_sendto_if_src+0x1a>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8011aba:	f06f 0305 	mvn.w	r3, #5
 8011abe:	e07e      	b.n	8011bbe <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	8a5b      	ldrh	r3, [r3, #18]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10f      	bne.n	8011ae8 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011ac8:	68f9      	ldr	r1, [r7, #12]
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	8a5b      	ldrh	r3, [r3, #18]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f000 f87f 	bl	8011bd4 <udp_bind>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011ada:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d002      	beq.n	8011ae8 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011ae2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ae6:	e06a      	b.n	8011bbe <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8011ae8:	2108      	movs	r1, #8
 8011aea:	68b8      	ldr	r0, [r7, #8]
 8011aec:	f7f9 ffba 	bl	800ba64 <pbuf_header>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d014      	beq.n	8011b20 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011af6:	2200      	movs	r2, #0
 8011af8:	2108      	movs	r1, #8
 8011afa:	2001      	movs	r0, #1
 8011afc:	f7f9 fc64 	bl	800b3c8 <pbuf_alloc>
 8011b00:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d102      	bne.n	8011b0e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b0c:	e057      	b.n	8011bbe <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	891b      	ldrh	r3, [r3, #8]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d006      	beq.n	8011b24 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011b16:	68b9      	ldr	r1, [r7, #8]
 8011b18:	69f8      	ldr	r0, [r7, #28]
 8011b1a:	f7fa f8f7 	bl	800bd0c <pbuf_chain>
 8011b1e:	e001      	b.n	8011b24 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	895b      	ldrh	r3, [r3, #10]
 8011b28:	2b07      	cmp	r3, #7
 8011b2a:	d806      	bhi.n	8011b3a <udp_sendto_if_src+0x9a>
 8011b2c:	4b26      	ldr	r3, [pc, #152]	; (8011bc8 <udp_sendto_if_src+0x128>)
 8011b2e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011b32:	4926      	ldr	r1, [pc, #152]	; (8011bcc <udp_sendto_if_src+0x12c>)
 8011b34:	4826      	ldr	r0, [pc, #152]	; (8011bd0 <udp_sendto_if_src+0x130>)
 8011b36:	f004 fcc9 	bl	80164cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	8a5b      	ldrh	r3, [r3, #18]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7f8 fdd9 	bl	800a6fc <lwip_htons>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011b52:	887b      	ldrh	r3, [r7, #2]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f8 fdd1 	bl	800a6fc <lwip_htons>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	2200      	movs	r2, #0
 8011b66:	719a      	strb	r2, [r3, #6]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	891b      	ldrh	r3, [r3, #8]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7f8 fdc3 	bl	800a6fc <lwip_htons>
 8011b76:	4603      	mov	r3, r0
 8011b78:	461a      	mov	r2, r3
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011b7e:	2311      	movs	r3, #17
 8011b80:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	7a9b      	ldrb	r3, [r3, #10]
 8011b86:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	7a5b      	ldrb	r3, [r3, #9]
 8011b8c:	7cb9      	ldrb	r1, [r7, #18]
 8011b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b90:	9202      	str	r2, [sp, #8]
 8011b92:	7cfa      	ldrb	r2, [r7, #19]
 8011b94:	9201      	str	r2, [sp, #4]
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b9e:	69f8      	ldr	r0, [r7, #28]
 8011ba0:	f003 fac4 	bl	801512c <ip4_output_if_src>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011ba8:	69fa      	ldr	r2, [r7, #28]
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d004      	beq.n	8011bba <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8011bb0:	69f8      	ldr	r0, [r7, #28]
 8011bb2:	f7f9 ff7b 	bl	800baac <pbuf_free>
    q = NULL;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011bba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3720      	adds	r7, #32
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	080195b4 	.word	0x080195b4
 8011bcc:	08019620 	.word	0x08019620
 8011bd0:	080195f8 	.word	0x080195f8

08011bd4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	60f8      	str	r0, [r7, #12]
 8011bdc:	60b9      	str	r1, [r7, #8]
 8011bde:	4613      	mov	r3, r2
 8011be0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d101      	bne.n	8011bec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011be8:	4b30      	ldr	r3, [pc, #192]	; (8011cac <udp_bind+0xd8>)
 8011bea:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d002      	beq.n	8011bf8 <udp_bind+0x24>
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d102      	bne.n	8011bfe <udp_bind+0x2a>
    return ERR_VAL;
 8011bf8:	f06f 0305 	mvn.w	r3, #5
 8011bfc:	e052      	b.n	8011ca4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c02:	4b2b      	ldr	r3, [pc, #172]	; (8011cb0 <udp_bind+0xdc>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	617b      	str	r3, [r7, #20]
 8011c08:	e009      	b.n	8011c1e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d102      	bne.n	8011c18 <udp_bind+0x44>
      rebind = 1;
 8011c12:	2301      	movs	r3, #1
 8011c14:	74fb      	strb	r3, [r7, #19]
      break;
 8011c16:	e005      	b.n	8011c24 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	68db      	ldr	r3, [r3, #12]
 8011c1c:	617b      	str	r3, [r7, #20]
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d1f2      	bne.n	8011c0a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8011c24:	88fb      	ldrh	r3, [r7, #6]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d109      	bne.n	8011c3e <udp_bind+0x6a>
    port = udp_new_port();
 8011c2a:	f7ff fda1 	bl	8011770 <udp_new_port>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011c32:	88fb      	ldrh	r3, [r7, #6]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d11e      	bne.n	8011c76 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011c38:	f06f 0307 	mvn.w	r3, #7
 8011c3c:	e032      	b.n	8011ca4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c3e:	4b1c      	ldr	r3, [pc, #112]	; (8011cb0 <udp_bind+0xdc>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	e014      	b.n	8011c70 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d00d      	beq.n	8011c6a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	8a5b      	ldrh	r3, [r3, #18]
 8011c52:	88fa      	ldrh	r2, [r7, #6]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d108      	bne.n	8011c6a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d102      	bne.n	8011c6a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011c64:	f06f 0307 	mvn.w	r3, #7
 8011c68:	e01c      	b.n	8011ca4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	68db      	ldr	r3, [r3, #12]
 8011c6e:	617b      	str	r3, [r7, #20]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d1e7      	bne.n	8011c46 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <udp_bind+0xae>
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	e000      	b.n	8011c84 <udp_bind+0xb0>
 8011c82:	2300      	movs	r3, #0
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	88fa      	ldrh	r2, [r7, #6]
 8011c8c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011c8e:	7cfb      	ldrb	r3, [r7, #19]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d106      	bne.n	8011ca2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011c94:	4b06      	ldr	r3, [pc, #24]	; (8011cb0 <udp_bind+0xdc>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011c9c:	4a04      	ldr	r2, [pc, #16]	; (8011cb0 <udp_bind+0xdc>)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011ca2:	2300      	movs	r3, #0
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	080256d8 	.word	0x080256d8
 8011cb0:	2000f774 	.word	0x2000f774

08011cb4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b086      	sub	sp, #24
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <udp_connect+0x1a>
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d102      	bne.n	8011cd4 <udp_connect+0x20>
    return ERR_VAL;
 8011cce:	f06f 0305 	mvn.w	r3, #5
 8011cd2:	e03e      	b.n	8011d52 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	8a5b      	ldrh	r3, [r3, #18]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d10f      	bne.n	8011cfc <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011cdc:	68f9      	ldr	r1, [r7, #12]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	8a5b      	ldrh	r3, [r3, #18]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	68f8      	ldr	r0, [r7, #12]
 8011ce6:	f7ff ff75 	bl	8011bd4 <udp_bind>
 8011cea:	4603      	mov	r3, r0
 8011cec:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011cee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <udp_connect+0x48>
      return err;
 8011cf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cfa:	e02a      	b.n	8011d52 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d002      	beq.n	8011d08 <udp_connect+0x54>
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	e000      	b.n	8011d0a <udp_connect+0x56>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	88fa      	ldrh	r2, [r7, #6]
 8011d12:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	7c1b      	ldrb	r3, [r3, #16]
 8011d18:	f043 0304 	orr.w	r3, r3, #4
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d22:	4b0e      	ldr	r3, [pc, #56]	; (8011d5c <udp_connect+0xa8>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e008      	b.n	8011d3c <udp_connect+0x88>
    if (pcb == ipcb) {
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d101      	bne.n	8011d36 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e00d      	b.n	8011d52 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	617b      	str	r3, [r7, #20]
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d1f3      	bne.n	8011d2a <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011d42:	4b06      	ldr	r3, [pc, #24]	; (8011d5c <udp_connect+0xa8>)
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011d4a:	4a04      	ldr	r2, [pc, #16]	; (8011d5c <udp_connect+0xa8>)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011d50:	2300      	movs	r3, #0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	2000f774 	.word	0x2000f774

08011d60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b085      	sub	sp, #20
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	68ba      	ldr	r2, [r7, #8]
 8011d70:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	61da      	str	r2, [r3, #28]
}
 8011d78:	bf00      	nop
 8011d7a:	3714      	adds	r7, #20
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr

08011d84 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011d8c:	4b15      	ldr	r3, [pc, #84]	; (8011de4 <udp_remove+0x60>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d105      	bne.n	8011da2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d96:	4b13      	ldr	r3, [pc, #76]	; (8011de4 <udp_remove+0x60>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	4a11      	ldr	r2, [pc, #68]	; (8011de4 <udp_remove+0x60>)
 8011d9e:	6013      	str	r3, [r2, #0]
 8011da0:	e017      	b.n	8011dd2 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011da2:	4b10      	ldr	r3, [pc, #64]	; (8011de4 <udp_remove+0x60>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	e010      	b.n	8011dcc <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	68db      	ldr	r3, [r3, #12]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d009      	beq.n	8011dc6 <udp_remove+0x42>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	68db      	ldr	r3, [r3, #12]
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d104      	bne.n	8011dc6 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	68da      	ldr	r2, [r3, #12]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	60da      	str	r2, [r3, #12]
        break;
 8011dc4:	e005      	b.n	8011dd2 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	68db      	ldr	r3, [r3, #12]
 8011dca:	60fb      	str	r3, [r7, #12]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1eb      	bne.n	8011daa <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011dd2:	6879      	ldr	r1, [r7, #4]
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	f7f9 f907 	bl	800afe8 <memp_free>
}
 8011dda:	bf00      	nop
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	2000f774 	.word	0x2000f774

08011de8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011dee:	2000      	movs	r0, #0
 8011df0:	f7f9 f8a8 	bl	800af44 <memp_malloc>
 8011df4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d007      	beq.n	8011e0c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011dfc:	2220      	movs	r2, #32
 8011dfe:	2100      	movs	r1, #0
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f004 fb5b 	bl	80164bc <memset>
    pcb->ttl = UDP_TTL;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	22ff      	movs	r2, #255	; 0xff
 8011e0a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011e0c:	687b      	ldr	r3, [r7, #4]
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b084      	sub	sp, #16
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8011e20:	f7ff ffe2 	bl	8011de8 <udp_new>
 8011e24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011e26:	68fb      	ldr	r3, [r7, #12]
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d01e      	beq.n	8011e7e <udp_netif_ip_addr_changed+0x4e>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d01a      	beq.n	8011e7e <udp_netif_ip_addr_changed+0x4e>
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d017      	beq.n	8011e7e <udp_netif_ip_addr_changed+0x4e>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d013      	beq.n	8011e7e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e56:	4b0d      	ldr	r3, [pc, #52]	; (8011e8c <udp_netif_ip_addr_changed+0x5c>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	e00c      	b.n	8011e78 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d103      	bne.n	8011e72 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	60fb      	str	r3, [r7, #12]
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d1ef      	bne.n	8011e5e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011e7e:	bf00      	nop
 8011e80:	3714      	adds	r7, #20
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	2000f774 	.word	0x2000f774

08011e90 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011e94:	4b20      	ldr	r3, [pc, #128]	; (8011f18 <dhcp_inc_pcb_refcount+0x88>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d133      	bne.n	8011f04 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011e9c:	4b1f      	ldr	r3, [pc, #124]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d005      	beq.n	8011eb0 <dhcp_inc_pcb_refcount+0x20>
 8011ea4:	4b1e      	ldr	r3, [pc, #120]	; (8011f20 <dhcp_inc_pcb_refcount+0x90>)
 8011ea6:	22d9      	movs	r2, #217	; 0xd9
 8011ea8:	491e      	ldr	r1, [pc, #120]	; (8011f24 <dhcp_inc_pcb_refcount+0x94>)
 8011eaa:	481f      	ldr	r0, [pc, #124]	; (8011f28 <dhcp_inc_pcb_refcount+0x98>)
 8011eac:	f004 fb0e 	bl	80164cc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011eb0:	f7ff ff9a 	bl	8011de8 <udp_new>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011eb8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8011eba:	4b18      	ldr	r3, [pc, #96]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d102      	bne.n	8011ec8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ec6:	e024      	b.n	8011f12 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011ec8:	4b14      	ldr	r3, [pc, #80]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	7a1a      	ldrb	r2, [r3, #8]
 8011ece:	4b13      	ldr	r3, [pc, #76]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f042 0220 	orr.w	r2, r2, #32
 8011ed6:	b2d2      	uxtb	r2, r2
 8011ed8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8011eda:	4b10      	ldr	r3, [pc, #64]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2244      	movs	r2, #68	; 0x44
 8011ee0:	4912      	ldr	r1, [pc, #72]	; (8011f2c <dhcp_inc_pcb_refcount+0x9c>)
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ff fe76 	bl	8011bd4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8011ee8:	4b0c      	ldr	r3, [pc, #48]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2243      	movs	r2, #67	; 0x43
 8011eee:	490f      	ldr	r1, [pc, #60]	; (8011f2c <dhcp_inc_pcb_refcount+0x9c>)
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7ff fedf 	bl	8011cb4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011ef6:	4b09      	ldr	r3, [pc, #36]	; (8011f1c <dhcp_inc_pcb_refcount+0x8c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	2200      	movs	r2, #0
 8011efc:	490c      	ldr	r1, [pc, #48]	; (8011f30 <dhcp_inc_pcb_refcount+0xa0>)
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff ff2e 	bl	8011d60 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011f04:	4b04      	ldr	r3, [pc, #16]	; (8011f18 <dhcp_inc_pcb_refcount+0x88>)
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	4b02      	ldr	r3, [pc, #8]	; (8011f18 <dhcp_inc_pcb_refcount+0x88>)
 8011f0e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011f10:	2300      	movs	r3, #0
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	20008920 	.word	0x20008920
 8011f1c:	2000891c 	.word	0x2000891c
 8011f20:	08019650 	.word	0x08019650
 8011f24:	08019688 	.word	0x08019688
 8011f28:	080196b0 	.word	0x080196b0
 8011f2c:	080256d8 	.word	0x080256d8
 8011f30:	080135ed 	.word	0x080135ed

08011f34 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011f38:	4b0e      	ldr	r3, [pc, #56]	; (8011f74 <dhcp_dec_pcb_refcount+0x40>)
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d105      	bne.n	8011f4c <dhcp_dec_pcb_refcount+0x18>
 8011f40:	4b0d      	ldr	r3, [pc, #52]	; (8011f78 <dhcp_dec_pcb_refcount+0x44>)
 8011f42:	22f3      	movs	r2, #243	; 0xf3
 8011f44:	490d      	ldr	r1, [pc, #52]	; (8011f7c <dhcp_dec_pcb_refcount+0x48>)
 8011f46:	480e      	ldr	r0, [pc, #56]	; (8011f80 <dhcp_dec_pcb_refcount+0x4c>)
 8011f48:	f004 fac0 	bl	80164cc <iprintf>
  dhcp_pcb_refcount--;
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <dhcp_dec_pcb_refcount+0x40>)
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	3b01      	subs	r3, #1
 8011f52:	b2da      	uxtb	r2, r3
 8011f54:	4b07      	ldr	r3, [pc, #28]	; (8011f74 <dhcp_dec_pcb_refcount+0x40>)
 8011f56:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011f58:	4b06      	ldr	r3, [pc, #24]	; (8011f74 <dhcp_dec_pcb_refcount+0x40>)
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d107      	bne.n	8011f70 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011f60:	4b08      	ldr	r3, [pc, #32]	; (8011f84 <dhcp_dec_pcb_refcount+0x50>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7ff ff0d 	bl	8011d84 <udp_remove>
    dhcp_pcb = NULL;
 8011f6a:	4b06      	ldr	r3, [pc, #24]	; (8011f84 <dhcp_dec_pcb_refcount+0x50>)
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	601a      	str	r2, [r3, #0]
  }
}
 8011f70:	bf00      	nop
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	20008920 	.word	0x20008920
 8011f78:	08019650 	.word	0x08019650
 8011f7c:	080196d8 	.word	0x080196d8
 8011f80:	080196b0 	.word	0x080196b0
 8011f84:	2000891c 	.word	0x2000891c

08011f88 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a1b      	ldr	r3, [r3, #32]
 8011f94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011f96:	210c      	movs	r1, #12
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f000 ff85 	bl	8012ea8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011f9e:	4b06      	ldr	r3, [pc, #24]	; (8011fb8 <dhcp_handle_nak+0x30>)
 8011fa0:	4a05      	ldr	r2, [pc, #20]	; (8011fb8 <dhcp_handle_nak+0x30>)
 8011fa2:	4905      	ldr	r1, [pc, #20]	; (8011fb8 <dhcp_handle_nak+0x30>)
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7f9 f8ad 	bl	800b104 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 fbb6 	bl	801271c <dhcp_discover>
}
 8011fb0:	bf00      	nop
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	080256d8 	.word	0x080256d8

08011fbc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6a1b      	ldr	r3, [r3, #32]
 8011fc8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011fca:	2108      	movs	r1, #8
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f000 ff6b 	bl	8012ea8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	3328      	adds	r3, #40	; 0x28
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	4619      	mov	r1, r3
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f002 fb1e 	bl	801461c <etharp_query>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	7a9b      	ldrb	r3, [r3, #10]
 8011fe8:	2bff      	cmp	r3, #255	; 0xff
 8011fea:	d005      	beq.n	8011ff8 <dhcp_check+0x3c>
    dhcp->tries++;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	7a9b      	ldrb	r3, [r3, #10]
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8011ff8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011ffc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8011ffe:	893b      	ldrh	r3, [r7, #8]
 8012000:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012004:	4a06      	ldr	r2, [pc, #24]	; (8012020 <dhcp_check+0x64>)
 8012006:	fb82 1203 	smull	r1, r2, r2, r3
 801200a:	1152      	asrs	r2, r2, #5
 801200c:	17db      	asrs	r3, r3, #31
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	b29a      	uxth	r2, r3
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012016:	bf00      	nop
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	10624dd3 	.word	0x10624dd3

08012024 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6a1b      	ldr	r3, [r3, #32]
 8012030:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012032:	4b0c      	ldr	r3, [pc, #48]	; (8012064 <dhcp_handle_offer+0x40>)
 8012034:	789b      	ldrb	r3, [r3, #2]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d00f      	beq.n	801205a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801203a:	4b0b      	ldr	r3, [pc, #44]	; (8012068 <dhcp_handle_offer+0x44>)
 801203c:	689b      	ldr	r3, [r3, #8]
 801203e:	4618      	mov	r0, r3
 8012040:	f7f8 fb6a 	bl	800a718 <lwip_htonl>
 8012044:	4602      	mov	r2, r0
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	691a      	ldr	r2, [r3, #16]
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f000 f809 	bl	801206c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801205a:	bf00      	nop
 801205c:	3710      	adds	r7, #16
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	2000f778 	.word	0x2000f778
 8012068:	2000f780 	.word	0x2000f780

0801206c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b088      	sub	sp, #32
 8012070:	af02      	add	r7, sp, #8
 8012072:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6a1b      	ldr	r3, [r3, #32]
 8012078:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801207a:	2101      	movs	r1, #1
 801207c:	6938      	ldr	r0, [r7, #16]
 801207e:	f000 ff13 	bl	8012ea8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012082:	2203      	movs	r2, #3
 8012084:	6939      	ldr	r1, [r7, #16]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f001 fb94 	bl	80137b4 <dhcp_create_msg>
 801208c:	4603      	mov	r3, r0
 801208e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d159      	bne.n	801214c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012098:	2202      	movs	r2, #2
 801209a:	2139      	movs	r1, #57	; 0x39
 801209c:	6938      	ldr	r0, [r7, #16]
 801209e:	f000 ff1d 	bl	8012edc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80120a6:	4619      	mov	r1, r3
 80120a8:	6938      	ldr	r0, [r7, #16]
 80120aa:	f000 ff79 	bl	8012fa0 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80120ae:	2204      	movs	r2, #4
 80120b0:	2132      	movs	r1, #50	; 0x32
 80120b2:	6938      	ldr	r0, [r7, #16]
 80120b4:	f000 ff12 	bl	8012edc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120bc:	4618      	mov	r0, r3
 80120be:	f7f8 fb2b 	bl	800a718 <lwip_htonl>
 80120c2:	4603      	mov	r3, r0
 80120c4:	4619      	mov	r1, r3
 80120c6:	6938      	ldr	r0, [r7, #16]
 80120c8:	f000 ffa4 	bl	8013014 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80120cc:	2204      	movs	r2, #4
 80120ce:	2136      	movs	r1, #54	; 0x36
 80120d0:	6938      	ldr	r0, [r7, #16]
 80120d2:	f000 ff03 	bl	8012edc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120da:	4618      	mov	r0, r3
 80120dc:	f7f8 fb1c 	bl	800a718 <lwip_htonl>
 80120e0:	4603      	mov	r3, r0
 80120e2:	4619      	mov	r1, r3
 80120e4:	6938      	ldr	r0, [r7, #16]
 80120e6:	f000 ff95 	bl	8013014 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80120ea:	2203      	movs	r2, #3
 80120ec:	2137      	movs	r1, #55	; 0x37
 80120ee:	6938      	ldr	r0, [r7, #16]
 80120f0:	f000 fef4 	bl	8012edc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80120f4:	2300      	movs	r3, #0
 80120f6:	75fb      	strb	r3, [r7, #23]
 80120f8:	e009      	b.n	801210e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	4a29      	ldr	r2, [pc, #164]	; (80121a4 <dhcp_select+0x138>)
 80120fe:	5cd3      	ldrb	r3, [r2, r3]
 8012100:	4619      	mov	r1, r3
 8012102:	6938      	ldr	r0, [r7, #16]
 8012104:	f000 ff24 	bl	8012f50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012108:	7dfb      	ldrb	r3, [r7, #23]
 801210a:	3301      	adds	r3, #1
 801210c:	75fb      	strb	r3, [r7, #23]
 801210e:	7dfb      	ldrb	r3, [r7, #23]
 8012110:	2b02      	cmp	r3, #2
 8012112:	d9f2      	bls.n	80120fa <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8012114:	6938      	ldr	r0, [r7, #16]
 8012116:	f001 fcf1 	bl	8013afc <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	68da      	ldr	r2, [r3, #12]
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	8a9b      	ldrh	r3, [r3, #20]
 8012122:	33f0      	adds	r3, #240	; 0xf0
 8012124:	b29b      	uxth	r3, r3
 8012126:	4619      	mov	r1, r3
 8012128:	4610      	mov	r0, r2
 801212a:	f7f9 fb4b 	bl	800b7c4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801212e:	4b1e      	ldr	r3, [pc, #120]	; (80121a8 <dhcp_select+0x13c>)
 8012130:	6818      	ldr	r0, [r3, #0]
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	68d9      	ldr	r1, [r3, #12]
 8012136:	4b1d      	ldr	r3, [pc, #116]	; (80121ac <dhcp_select+0x140>)
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	2343      	movs	r3, #67	; 0x43
 8012140:	4a1b      	ldr	r2, [pc, #108]	; (80121b0 <dhcp_select+0x144>)
 8012142:	f7ff fcad 	bl	8011aa0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012146:	6938      	ldr	r0, [r7, #16]
 8012148:	f001 fc96 	bl	8013a78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	7a9b      	ldrb	r3, [r3, #10]
 8012150:	2bff      	cmp	r3, #255	; 0xff
 8012152:	d005      	beq.n	8012160 <dhcp_select+0xf4>
    dhcp->tries++;
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	7a9b      	ldrb	r3, [r3, #10]
 8012158:	3301      	adds	r3, #1
 801215a:	b2da      	uxtb	r2, r3
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	7a9b      	ldrb	r3, [r3, #10]
 8012164:	2b05      	cmp	r3, #5
 8012166:	d807      	bhi.n	8012178 <dhcp_select+0x10c>
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	7a9b      	ldrb	r3, [r3, #10]
 801216c:	461a      	mov	r2, r3
 801216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012172:	4093      	lsls	r3, r2
 8012174:	b29b      	uxth	r3, r3
 8012176:	e001      	b.n	801217c <dhcp_select+0x110>
 8012178:	f64e 2360 	movw	r3, #60000	; 0xea60
 801217c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801217e:	89bb      	ldrh	r3, [r7, #12]
 8012180:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012184:	4a0b      	ldr	r2, [pc, #44]	; (80121b4 <dhcp_select+0x148>)
 8012186:	fb82 1203 	smull	r1, r2, r2, r3
 801218a:	1152      	asrs	r2, r2, #5
 801218c:	17db      	asrs	r3, r3, #31
 801218e:	1ad3      	subs	r3, r2, r3
 8012190:	b29a      	uxth	r2, r3
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801219a:	4618      	mov	r0, r3
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	2000001c 	.word	0x2000001c
 80121a8:	2000891c 	.word	0x2000891c
 80121ac:	080256d8 	.word	0x080256d8
 80121b0:	080256dc 	.word	0x080256dc
 80121b4:	10624dd3 	.word	0x10624dd3

080121b8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80121be:	4b27      	ldr	r3, [pc, #156]	; (801225c <dhcp_coarse_tmr+0xa4>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 80121c4:	e042      	b.n	801224c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d039      	beq.n	8012246 <dhcp_coarse_tmr+0x8e>
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	7a5b      	ldrb	r3, [r3, #9]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d035      	beq.n	8012246 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d012      	beq.n	8012208 <dhcp_coarse_tmr+0x50>
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	8c1b      	ldrh	r3, [r3, #32]
 80121e6:	3301      	adds	r3, #1
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	841a      	strh	r2, [r3, #32]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	8c1a      	ldrh	r2, [r3, #32]
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d106      	bne.n	8012208 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fd94 	bl	8012d28 <dhcp_release>
        dhcp_discover(netif);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f000 fa8b 	bl	801271c <dhcp_discover>
 8012206:	e01e      	b.n	8012246 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	8bdb      	ldrh	r3, [r3, #30]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00b      	beq.n	8012228 <dhcp_coarse_tmr+0x70>
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	8bdb      	ldrh	r3, [r3, #30]
 8012214:	1e5a      	subs	r2, r3, #1
 8012216:	b291      	uxth	r1, r2
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	83d1      	strh	r1, [r2, #30]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d103      	bne.n	8012228 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f8c6 	bl	80123b2 <dhcp_t2_timeout>
 8012226:	e00e      	b.n	8012246 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	8b9b      	ldrh	r3, [r3, #28]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d00a      	beq.n	8012246 <dhcp_coarse_tmr+0x8e>
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	8b9b      	ldrh	r3, [r3, #28]
 8012234:	1e5a      	subs	r2, r3, #1
 8012236:	b291      	uxth	r1, r2
 8012238:	683a      	ldr	r2, [r7, #0]
 801223a:	8391      	strh	r1, [r2, #28]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d102      	bne.n	8012246 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f000 f888 	bl	8012356 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1b9      	bne.n	80121c6 <dhcp_coarse_tmr+0xe>
  }
}
 8012252:	bf00      	nop
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	2000f74c 	.word	0x2000f74c

08012260 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8012266:	4b16      	ldr	r3, [pc, #88]	; (80122c0 <dhcp_fine_tmr+0x60>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801226c:	e020      	b.n	80122b0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6a1b      	ldr	r3, [r3, #32]
 8012272:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d017      	beq.n	80122aa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	8adb      	ldrh	r3, [r3, #22]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d906      	bls.n	8012290 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	8adb      	ldrh	r3, [r3, #22]
 8012286:	3b01      	subs	r3, #1
 8012288:	b29a      	uxth	r2, r3
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	82da      	strh	r2, [r3, #22]
 801228e:	e00c      	b.n	80122aa <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	8adb      	ldrh	r3, [r3, #22]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d108      	bne.n	80122aa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	8adb      	ldrh	r3, [r3, #22]
 801229c:	3b01      	subs	r3, #1
 801229e:	b29a      	uxth	r2, r3
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f80d 	bl	80122c4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d1db      	bne.n	801226e <dhcp_fine_tmr+0xe>
  }
}
 80122b6:	bf00      	nop
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	2000f74c 	.word	0x2000f74c

080122c4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6a1b      	ldr	r3, [r3, #32]
 80122d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	7a5b      	ldrb	r3, [r3, #9]
 80122d6:	2b0c      	cmp	r3, #12
 80122d8:	d003      	beq.n	80122e2 <dhcp_timeout+0x1e>
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	7a5b      	ldrb	r3, [r3, #9]
 80122de:	2b06      	cmp	r3, #6
 80122e0:	d103      	bne.n	80122ea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fa1a 	bl	801271c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80122e8:	e031      	b.n	801234e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	7a5b      	ldrb	r3, [r3, #9]
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d10e      	bne.n	8012310 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	7a9b      	ldrb	r3, [r3, #10]
 80122f6:	2b05      	cmp	r3, #5
 80122f8:	d803      	bhi.n	8012302 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7ff feb6 	bl	801206c <dhcp_select>
}
 8012300:	e025      	b.n	801234e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fd10 	bl	8012d28 <dhcp_release>
      dhcp_discover(netif);
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 fa07 	bl	801271c <dhcp_discover>
}
 801230e:	e01e      	b.n	801234e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7a5b      	ldrb	r3, [r3, #9]
 8012314:	2b08      	cmp	r3, #8
 8012316:	d10b      	bne.n	8012330 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	7a9b      	ldrb	r3, [r3, #10]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d803      	bhi.n	8012328 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7ff fe4b 	bl	8011fbc <dhcp_check>
}
 8012326:	e012      	b.n	801234e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 fa83 	bl	8012834 <dhcp_bind>
}
 801232e:	e00e      	b.n	801234e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	7a5b      	ldrb	r3, [r3, #9]
 8012334:	2b03      	cmp	r3, #3
 8012336:	d10a      	bne.n	801234e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	7a9b      	ldrb	r3, [r3, #10]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d803      	bhi.n	8012348 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 fc5d 	bl	8012c00 <dhcp_reboot>
}
 8012346:	e002      	b.n	801234e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f000 f9e7 	bl	801271c <dhcp_discover>
}
 801234e:	bf00      	nop
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}

08012356 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012356:	b580      	push	{r7, lr}
 8012358:	b084      	sub	sp, #16
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a1b      	ldr	r3, [r3, #32]
 8012362:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	7a5b      	ldrb	r3, [r3, #9]
 8012368:	2b01      	cmp	r3, #1
 801236a:	d007      	beq.n	801237c <dhcp_t1_timeout+0x26>
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	7a5b      	ldrb	r3, [r3, #9]
 8012370:	2b0a      	cmp	r3, #10
 8012372:	d003      	beq.n	801237c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012378:	2b05      	cmp	r3, #5
 801237a:	d116      	bne.n	80123aa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f000 fb33 	bl	80129e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	8b5b      	ldrh	r3, [r3, #26]
 8012386:	461a      	mov	r2, r3
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	8c1b      	ldrh	r3, [r3, #32]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	2b01      	cmp	r3, #1
 8012390:	dd0b      	ble.n	80123aa <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	461a      	mov	r2, r3
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	8c1b      	ldrh	r3, [r3, #32]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	0fda      	lsrs	r2, r3, #31
 80123a0:	4413      	add	r3, r2
 80123a2:	105b      	asrs	r3, r3, #1
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	839a      	strh	r2, [r3, #28]
    }
  }
}
 80123aa:	bf00      	nop
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b084      	sub	sp, #16
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a1b      	ldr	r3, [r3, #32]
 80123be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	7a5b      	ldrb	r3, [r3, #9]
 80123c4:	2b01      	cmp	r3, #1
 80123c6:	d00b      	beq.n	80123e0 <dhcp_t2_timeout+0x2e>
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	7a5b      	ldrb	r3, [r3, #9]
 80123cc:	2b0a      	cmp	r3, #10
 80123ce:	d007      	beq.n	80123e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80123d4:	2b05      	cmp	r3, #5
 80123d6:	d003      	beq.n	80123e0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	7a5b      	ldrb	r3, [r3, #9]
 80123dc:	2b04      	cmp	r3, #4
 80123de:	d116      	bne.n	801240e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 fb87 	bl	8012af4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80123ea:	461a      	mov	r2, r3
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	8c1b      	ldrh	r3, [r3, #32]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	dd0b      	ble.n	801240e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80123fa:	461a      	mov	r2, r3
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	8c1b      	ldrh	r3, [r3, #32]
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	0fda      	lsrs	r2, r3, #31
 8012404:	4413      	add	r3, r2
 8012406:	105b      	asrs	r3, r3, #1
 8012408:	b29a      	uxth	r2, r3
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801240e:	bf00      	nop
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6a1b      	ldr	r3, [r3, #32]
 8012424:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	2200      	movs	r2, #0
 8012430:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012432:	4b27      	ldr	r3, [pc, #156]	; (80124d0 <dhcp_handle_ack+0xb8>)
 8012434:	78db      	ldrb	r3, [r3, #3]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d003      	beq.n	8012442 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801243a:	4b26      	ldr	r3, [pc, #152]	; (80124d4 <dhcp_handle_ack+0xbc>)
 801243c:	68da      	ldr	r2, [r3, #12]
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012442:	4b23      	ldr	r3, [pc, #140]	; (80124d0 <dhcp_handle_ack+0xb8>)
 8012444:	791b      	ldrb	r3, [r3, #4]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d004      	beq.n	8012454 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801244a:	4b22      	ldr	r3, [pc, #136]	; (80124d4 <dhcp_handle_ack+0xbc>)
 801244c:	691a      	ldr	r2, [r3, #16]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	639a      	str	r2, [r3, #56]	; 0x38
 8012452:	e004      	b.n	801245e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012458:	085a      	lsrs	r2, r3, #1
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801245e:	4b1c      	ldr	r3, [pc, #112]	; (80124d0 <dhcp_handle_ack+0xb8>)
 8012460:	795b      	ldrb	r3, [r3, #5]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d004      	beq.n	8012470 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012466:	4b1b      	ldr	r3, [pc, #108]	; (80124d4 <dhcp_handle_ack+0xbc>)
 8012468:	695a      	ldr	r2, [r3, #20]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	63da      	str	r2, [r3, #60]	; 0x3c
 801246e:	e007      	b.n	8012480 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012474:	4613      	mov	r3, r2
 8012476:	00db      	lsls	r3, r3, #3
 8012478:	1a9b      	subs	r3, r3, r2
 801247a:	08da      	lsrs	r2, r3, #3
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	691a      	ldr	r2, [r3, #16]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801248a:	4b11      	ldr	r3, [pc, #68]	; (80124d0 <dhcp_handle_ack+0xb8>)
 801248c:	799b      	ldrb	r3, [r3, #6]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00b      	beq.n	80124aa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012492:	4b10      	ldr	r3, [pc, #64]	; (80124d4 <dhcp_handle_ack+0xbc>)
 8012494:	699b      	ldr	r3, [r3, #24]
 8012496:	4618      	mov	r0, r3
 8012498:	f7f8 f93e 	bl	800a718 <lwip_htonl>
 801249c:	4602      	mov	r2, r0
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2201      	movs	r2, #1
 80124a6:	72da      	strb	r2, [r3, #11]
 80124a8:	e002      	b.n	80124b0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80124b0:	4b07      	ldr	r3, [pc, #28]	; (80124d0 <dhcp_handle_ack+0xb8>)
 80124b2:	79db      	ldrb	r3, [r3, #7]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d007      	beq.n	80124c8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80124b8:	4b06      	ldr	r3, [pc, #24]	; (80124d4 <dhcp_handle_ack+0xbc>)
 80124ba:	69db      	ldr	r3, [r3, #28]
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f8 f92b 	bl	800a718 <lwip_htonl>
 80124c2:	4602      	mov	r2, r0
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80124c8:	bf00      	nop
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	2000f778 	.word	0x2000f778
 80124d4:	2000f780 	.word	0x2000f780

080124d8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d109      	bne.n	80124fa <dhcp_start+0x22>
 80124e6:	4b3c      	ldr	r3, [pc, #240]	; (80125d8 <dhcp_start+0x100>)
 80124e8:	f240 22d6 	movw	r2, #726	; 0x2d6
 80124ec:	493b      	ldr	r1, [pc, #236]	; (80125dc <dhcp_start+0x104>)
 80124ee:	483c      	ldr	r0, [pc, #240]	; (80125e0 <dhcp_start+0x108>)
 80124f0:	f003 ffec 	bl	80164cc <iprintf>
 80124f4:	f06f 030f 	mvn.w	r3, #15
 80124f8:	e069      	b.n	80125ce <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	2b00      	cmp	r3, #0
 8012506:	d109      	bne.n	801251c <dhcp_start+0x44>
 8012508:	4b33      	ldr	r3, [pc, #204]	; (80125d8 <dhcp_start+0x100>)
 801250a:	f240 22d7 	movw	r2, #727	; 0x2d7
 801250e:	4935      	ldr	r1, [pc, #212]	; (80125e4 <dhcp_start+0x10c>)
 8012510:	4833      	ldr	r0, [pc, #204]	; (80125e0 <dhcp_start+0x108>)
 8012512:	f003 ffdb 	bl	80164cc <iprintf>
 8012516:	f06f 030f 	mvn.w	r3, #15
 801251a:	e058      	b.n	80125ce <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6a1b      	ldr	r3, [r3, #32]
 8012520:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012526:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801252a:	d202      	bcs.n	8012532 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012530:	e04d      	b.n	80125ce <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10d      	bne.n	8012554 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012538:	2040      	movs	r0, #64	; 0x40
 801253a:	f7f8 fb93 	bl	800ac64 <mem_malloc>
 801253e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801254a:	e040      	b.n	80125ce <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	68fa      	ldr	r2, [r7, #12]
 8012550:	621a      	str	r2, [r3, #32]
 8012552:	e01b      	b.n	801258c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d006      	beq.n	801256a <dhcp_start+0x92>
 801255c:	4b1e      	ldr	r3, [pc, #120]	; (80125d8 <dhcp_start+0x100>)
 801255e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8012562:	4921      	ldr	r1, [pc, #132]	; (80125e8 <dhcp_start+0x110>)
 8012564:	481e      	ldr	r0, [pc, #120]	; (80125e0 <dhcp_start+0x108>)
 8012566:	f003 ffb1 	bl	80164cc <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d006      	beq.n	8012580 <dhcp_start+0xa8>
 8012572:	4b19      	ldr	r3, [pc, #100]	; (80125d8 <dhcp_start+0x100>)
 8012574:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012578:	491c      	ldr	r1, [pc, #112]	; (80125ec <dhcp_start+0x114>)
 801257a:	4819      	ldr	r0, [pc, #100]	; (80125e0 <dhcp_start+0x108>)
 801257c:	f003 ffa6 	bl	80164cc <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	7a1b      	ldrb	r3, [r3, #8]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d001      	beq.n	801258c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012588:	f7ff fcd4 	bl	8011f34 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801258c:	2240      	movs	r2, #64	; 0x40
 801258e:	2100      	movs	r1, #0
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f003 ff93 	bl	80164bc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012596:	f7ff fc7b 	bl	8011e90 <dhcp_inc_pcb_refcount>
 801259a:	4603      	mov	r3, r0
 801259c:	2b00      	cmp	r3, #0
 801259e:	d002      	beq.n	80125a6 <dhcp_start+0xce>
    return ERR_MEM;
 80125a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125a4:	e013      	b.n	80125ce <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2201      	movs	r2, #1
 80125aa:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f000 f8b5 	bl	801271c <dhcp_discover>
 80125b2:	4603      	mov	r3, r0
 80125b4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80125b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d005      	beq.n	80125ca <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 fc3a 	bl	8012e38 <dhcp_stop>
    return ERR_MEM;
 80125c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125c8:	e001      	b.n	80125ce <dhcp_start+0xf6>
  }
  return result;
 80125ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3710      	adds	r7, #16
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	08019650 	.word	0x08019650
 80125dc:	080196fc 	.word	0x080196fc
 80125e0:	080196b0 	.word	0x080196b0
 80125e4:	08019740 	.word	0x08019740
 80125e8:	08019764 	.word	0x08019764
 80125ec:	0801977c 	.word	0x0801977c

080125f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d107      	bne.n	8012610 <dhcp_arp_reply+0x20>
 8012600:	4b0e      	ldr	r3, [pc, #56]	; (801263c <dhcp_arp_reply+0x4c>)
 8012602:	f240 327b 	movw	r2, #891	; 0x37b
 8012606:	490e      	ldr	r1, [pc, #56]	; (8012640 <dhcp_arp_reply+0x50>)
 8012608:	480e      	ldr	r0, [pc, #56]	; (8012644 <dhcp_arp_reply+0x54>)
 801260a:	f003 ff5f 	bl	80164cc <iprintf>
 801260e:	e012      	b.n	8012636 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6a1b      	ldr	r3, [r3, #32]
 8012614:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d00c      	beq.n	8012636 <dhcp_arp_reply+0x46>
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	7a5b      	ldrb	r3, [r3, #9]
 8012620:	2b08      	cmp	r3, #8
 8012622:	d108      	bne.n	8012636 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262c:	429a      	cmp	r2, r3
 801262e:	d102      	bne.n	8012636 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f809 	bl	8012648 <dhcp_decline>
    }
  }
}
 8012636:	3710      	adds	r7, #16
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	08019650 	.word	0x08019650
 8012640:	080196fc 	.word	0x080196fc
 8012644:	080196b0 	.word	0x080196b0

08012648 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af02      	add	r7, sp, #8
 801264e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a1b      	ldr	r3, [r3, #32]
 8012654:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8012656:	2300      	movs	r3, #0
 8012658:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801265a:	210c      	movs	r1, #12
 801265c:	68f8      	ldr	r0, [r7, #12]
 801265e:	f000 fc23 	bl	8012ea8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8012662:	2204      	movs	r2, #4
 8012664:	68f9      	ldr	r1, [r7, #12]
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f001 f8a4 	bl	80137b4 <dhcp_create_msg>
 801266c:	4603      	mov	r3, r0
 801266e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8012670:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d12a      	bne.n	80126ce <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012678:	2204      	movs	r2, #4
 801267a:	2132      	movs	r1, #50	; 0x32
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f000 fc2d 	bl	8012edc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012686:	4618      	mov	r0, r3
 8012688:	f7f8 f846 	bl	800a718 <lwip_htonl>
 801268c:	4603      	mov	r3, r0
 801268e:	4619      	mov	r1, r3
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f000 fcbf 	bl	8013014 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f001 fa30 	bl	8013afc <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	68da      	ldr	r2, [r3, #12]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	8a9b      	ldrh	r3, [r3, #20]
 80126a4:	33f0      	adds	r3, #240	; 0xf0
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	4619      	mov	r1, r3
 80126aa:	4610      	mov	r0, r2
 80126ac:	f7f9 f88a 	bl	800b7c4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80126b0:	4b16      	ldr	r3, [pc, #88]	; (801270c <dhcp_decline+0xc4>)
 80126b2:	6818      	ldr	r0, [r3, #0]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	68d9      	ldr	r1, [r3, #12]
 80126b8:	4b15      	ldr	r3, [pc, #84]	; (8012710 <dhcp_decline+0xc8>)
 80126ba:	9301      	str	r3, [sp, #4]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	2343      	movs	r3, #67	; 0x43
 80126c2:	4a14      	ldr	r2, [pc, #80]	; (8012714 <dhcp_decline+0xcc>)
 80126c4:	f7ff f9ec 	bl	8011aa0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80126c8:	68f8      	ldr	r0, [r7, #12]
 80126ca:	f001 f9d5 	bl	8013a78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	7a9b      	ldrb	r3, [r3, #10]
 80126d2:	2bff      	cmp	r3, #255	; 0xff
 80126d4:	d005      	beq.n	80126e2 <dhcp_decline+0x9a>
    dhcp->tries++;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	7a9b      	ldrb	r3, [r3, #10]
 80126da:	3301      	adds	r3, #1
 80126dc:	b2da      	uxtb	r2, r3
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 80126e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80126e6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80126e8:	893b      	ldrh	r3, [r7, #8]
 80126ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126ee:	4a0a      	ldr	r2, [pc, #40]	; (8012718 <dhcp_decline+0xd0>)
 80126f0:	fb82 1203 	smull	r1, r2, r2, r3
 80126f4:	1152      	asrs	r2, r2, #5
 80126f6:	17db      	asrs	r3, r3, #31
 80126f8:	1ad3      	subs	r3, r2, r3
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012700:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012704:	4618      	mov	r0, r3
 8012706:	3710      	adds	r7, #16
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	2000891c 	.word	0x2000891c
 8012710:	080256d8 	.word	0x080256d8
 8012714:	080256dc 	.word	0x080256dc
 8012718:	10624dd3 	.word	0x10624dd3

0801271c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b088      	sub	sp, #32
 8012720:	af02      	add	r7, sp, #8
 8012722:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6a1b      	ldr	r3, [r3, #32]
 8012728:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801272a:	2300      	movs	r3, #0
 801272c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	2200      	movs	r2, #0
 8012732:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012734:	2106      	movs	r1, #6
 8012736:	6938      	ldr	r0, [r7, #16]
 8012738:	f000 fbb6 	bl	8012ea8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801273c:	2201      	movs	r2, #1
 801273e:	6939      	ldr	r1, [r7, #16]
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f001 f837 	bl	80137b4 <dhcp_create_msg>
 8012746:	4603      	mov	r3, r0
 8012748:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d13b      	bne.n	80127ca <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012752:	2202      	movs	r2, #2
 8012754:	2139      	movs	r1, #57	; 0x39
 8012756:	6938      	ldr	r0, [r7, #16]
 8012758:	f000 fbc0 	bl	8012edc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012760:	4619      	mov	r1, r3
 8012762:	6938      	ldr	r0, [r7, #16]
 8012764:	f000 fc1c 	bl	8012fa0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012768:	2203      	movs	r2, #3
 801276a:	2137      	movs	r1, #55	; 0x37
 801276c:	6938      	ldr	r0, [r7, #16]
 801276e:	f000 fbb5 	bl	8012edc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012772:	2300      	movs	r3, #0
 8012774:	75fb      	strb	r3, [r7, #23]
 8012776:	e009      	b.n	801278c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012778:	7dfb      	ldrb	r3, [r7, #23]
 801277a:	4a29      	ldr	r2, [pc, #164]	; (8012820 <dhcp_discover+0x104>)
 801277c:	5cd3      	ldrb	r3, [r2, r3]
 801277e:	4619      	mov	r1, r3
 8012780:	6938      	ldr	r0, [r7, #16]
 8012782:	f000 fbe5 	bl	8012f50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	3301      	adds	r3, #1
 801278a:	75fb      	strb	r3, [r7, #23]
 801278c:	7dfb      	ldrb	r3, [r7, #23]
 801278e:	2b02      	cmp	r3, #2
 8012790:	d9f2      	bls.n	8012778 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8012792:	6938      	ldr	r0, [r7, #16]
 8012794:	f001 f9b2 	bl	8013afc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	68da      	ldr	r2, [r3, #12]
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	8a9b      	ldrh	r3, [r3, #20]
 80127a0:	33f0      	adds	r3, #240	; 0xf0
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	4619      	mov	r1, r3
 80127a6:	4610      	mov	r0, r2
 80127a8:	f7f9 f80c 	bl	800b7c4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80127ac:	4b1d      	ldr	r3, [pc, #116]	; (8012824 <dhcp_discover+0x108>)
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	68d9      	ldr	r1, [r3, #12]
 80127b4:	4b1c      	ldr	r3, [pc, #112]	; (8012828 <dhcp_discover+0x10c>)
 80127b6:	9301      	str	r3, [sp, #4]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	9300      	str	r3, [sp, #0]
 80127bc:	2343      	movs	r3, #67	; 0x43
 80127be:	4a1b      	ldr	r2, [pc, #108]	; (801282c <dhcp_discover+0x110>)
 80127c0:	f7ff f96e 	bl	8011aa0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 80127c4:	6938      	ldr	r0, [r7, #16]
 80127c6:	f001 f957 	bl	8013a78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	7a9b      	ldrb	r3, [r3, #10]
 80127ce:	2bff      	cmp	r3, #255	; 0xff
 80127d0:	d005      	beq.n	80127de <dhcp_discover+0xc2>
    dhcp->tries++;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	7a9b      	ldrb	r3, [r3, #10]
 80127d6:	3301      	adds	r3, #1
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	7a9b      	ldrb	r3, [r3, #10]
 80127e2:	2b05      	cmp	r3, #5
 80127e4:	d807      	bhi.n	80127f6 <dhcp_discover+0xda>
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	7a9b      	ldrb	r3, [r3, #10]
 80127ea:	461a      	mov	r2, r3
 80127ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80127f0:	4093      	lsls	r3, r2
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	e001      	b.n	80127fa <dhcp_discover+0xde>
 80127f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80127fa:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80127fc:	89bb      	ldrh	r3, [r7, #12]
 80127fe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012802:	4a0b      	ldr	r2, [pc, #44]	; (8012830 <dhcp_discover+0x114>)
 8012804:	fb82 1203 	smull	r1, r2, r2, r3
 8012808:	1152      	asrs	r2, r2, #5
 801280a:	17db      	asrs	r3, r3, #31
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	b29a      	uxth	r2, r3
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012814:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012818:	4618      	mov	r0, r3
 801281a:	3718      	adds	r7, #24
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}
 8012820:	2000001c 	.word	0x2000001c
 8012824:	2000891c 	.word	0x2000891c
 8012828:	080256d8 	.word	0x080256d8
 801282c:	080256dc 	.word	0x080256dc
 8012830:	10624dd3 	.word	0x10624dd3

08012834 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b088      	sub	sp, #32
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d107      	bne.n	8012852 <dhcp_bind+0x1e>
 8012842:	4b64      	ldr	r3, [pc, #400]	; (80129d4 <dhcp_bind+0x1a0>)
 8012844:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8012848:	4963      	ldr	r1, [pc, #396]	; (80129d8 <dhcp_bind+0x1a4>)
 801284a:	4864      	ldr	r0, [pc, #400]	; (80129dc <dhcp_bind+0x1a8>)
 801284c:	f003 fe3e 	bl	80164cc <iprintf>
 8012850:	e0bc      	b.n	80129cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d107      	bne.n	801286e <dhcp_bind+0x3a>
 801285e:	4b5d      	ldr	r3, [pc, #372]	; (80129d4 <dhcp_bind+0x1a0>)
 8012860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012864:	495e      	ldr	r1, [pc, #376]	; (80129e0 <dhcp_bind+0x1ac>)
 8012866:	485d      	ldr	r0, [pc, #372]	; (80129dc <dhcp_bind+0x1a8>)
 8012868:	f003 fe30 	bl	80164cc <iprintf>
 801286c:	e0ae      	b.n	80129cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	2200      	movs	r2, #0
 8012872:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012874:	69bb      	ldr	r3, [r7, #24]
 8012876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801287c:	d019      	beq.n	80128b2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012882:	331e      	adds	r3, #30
 8012884:	4a57      	ldr	r2, [pc, #348]	; (80129e4 <dhcp_bind+0x1b0>)
 8012886:	fba2 2303 	umull	r2, r3, r2, r3
 801288a:	095b      	lsrs	r3, r3, #5
 801288c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012894:	d302      	bcc.n	801289c <dhcp_bind+0x68>
       timeout = 0xffff;
 8012896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801289a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	b29a      	uxth	r2, r3
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d102      	bne.n	80128b2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 80128ac:	69bb      	ldr	r3, [r7, #24]
 80128ae:	2201      	movs	r2, #1
 80128b0:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128ba:	d01d      	beq.n	80128f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128c0:	331e      	adds	r3, #30
 80128c2:	4a48      	ldr	r2, [pc, #288]	; (80129e4 <dhcp_bind+0x1b0>)
 80128c4:	fba2 2303 	umull	r2, r3, r2, r3
 80128c8:	095b      	lsrs	r3, r3, #5
 80128ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128d2:	d302      	bcc.n	80128da <dhcp_bind+0xa6>
      timeout = 0xffff;
 80128d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80128d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80128da:	69fb      	ldr	r3, [r7, #28]
 80128dc:	b29a      	uxth	r2, r3
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 80128e2:	69bb      	ldr	r3, [r7, #24]
 80128e4:	8b1b      	ldrh	r3, [r3, #24]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d102      	bne.n	80128f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	2201      	movs	r2, #1
 80128ee:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	8b1a      	ldrh	r2, [r3, #24]
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80128f8:	69bb      	ldr	r3, [r7, #24]
 80128fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012900:	d01d      	beq.n	801293e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012902:	69bb      	ldr	r3, [r7, #24]
 8012904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012906:	331e      	adds	r3, #30
 8012908:	4a36      	ldr	r2, [pc, #216]	; (80129e4 <dhcp_bind+0x1b0>)
 801290a:	fba2 2303 	umull	r2, r3, r2, r3
 801290e:	095b      	lsrs	r3, r3, #5
 8012910:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012912:	69fb      	ldr	r3, [r7, #28]
 8012914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012918:	d302      	bcc.n	8012920 <dhcp_bind+0xec>
      timeout = 0xffff;
 801291a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801291e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	b29a      	uxth	r2, r3
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	8b5b      	ldrh	r3, [r3, #26]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d102      	bne.n	8012936 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	2201      	movs	r2, #1
 8012934:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	8b5a      	ldrh	r2, [r3, #26]
 801293a:	69bb      	ldr	r3, [r7, #24]
 801293c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801293e:	69bb      	ldr	r3, [r7, #24]
 8012940:	8b1a      	ldrh	r2, [r3, #24]
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	8b5b      	ldrh	r3, [r3, #26]
 8012946:	429a      	cmp	r2, r3
 8012948:	d306      	bcc.n	8012958 <dhcp_bind+0x124>
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	8b5b      	ldrh	r3, [r3, #26]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d002      	beq.n	8012958 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	2200      	movs	r2, #0
 8012956:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	7adb      	ldrb	r3, [r3, #11]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d003      	beq.n	8012968 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012964:	613b      	str	r3, [r7, #16]
 8012966:	e014      	b.n	8012992 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	3328      	adds	r3, #40	; 0x28
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012974:	2b00      	cmp	r3, #0
 8012976:	db02      	blt.n	801297e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012978:	23ff      	movs	r3, #255	; 0xff
 801297a:	613b      	str	r3, [r7, #16]
 801297c:	e009      	b.n	8012992 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801297e:	7dfb      	ldrb	r3, [r7, #23]
 8012980:	2bbf      	cmp	r3, #191	; 0xbf
 8012982:	d903      	bls.n	801298c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012984:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012988:	613b      	str	r3, [r7, #16]
 801298a:	e002      	b.n	8012992 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801298c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012990:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012996:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d108      	bne.n	80129b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	4013      	ands	r3, r2
 80129a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80129ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80129b0:	210a      	movs	r1, #10
 80129b2:	69b8      	ldr	r0, [r7, #24]
 80129b4:	f000 fa78 	bl	8012ea8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80129be:	f107 030c 	add.w	r3, r7, #12
 80129c2:	f107 0210 	add.w	r2, r7, #16
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7f8 fb9c 	bl	800b104 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80129cc:	3720      	adds	r7, #32
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	08019650 	.word	0x08019650
 80129d8:	08019790 	.word	0x08019790
 80129dc:	080196b0 	.word	0x080196b0
 80129e0:	080197ac 	.word	0x080197ac
 80129e4:	88888889 	.word	0x88888889

080129e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af02      	add	r7, sp, #8
 80129ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80129f6:	2105      	movs	r1, #5
 80129f8:	6938      	ldr	r0, [r7, #16]
 80129fa:	f000 fa55 	bl	8012ea8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80129fe:	2203      	movs	r2, #3
 8012a00:	6939      	ldr	r1, [r7, #16]
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 fed6 	bl	80137b4 <dhcp_create_msg>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d13b      	bne.n	8012a8c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a14:	2202      	movs	r2, #2
 8012a16:	2139      	movs	r1, #57	; 0x39
 8012a18:	6938      	ldr	r0, [r7, #16]
 8012a1a:	f000 fa5f 	bl	8012edc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a22:	4619      	mov	r1, r3
 8012a24:	6938      	ldr	r0, [r7, #16]
 8012a26:	f000 fabb 	bl	8012fa0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012a2a:	2203      	movs	r2, #3
 8012a2c:	2137      	movs	r1, #55	; 0x37
 8012a2e:	6938      	ldr	r0, [r7, #16]
 8012a30:	f000 fa54 	bl	8012edc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a34:	2300      	movs	r3, #0
 8012a36:	75fb      	strb	r3, [r7, #23]
 8012a38:	e009      	b.n	8012a4e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012a3a:	7dfb      	ldrb	r3, [r7, #23]
 8012a3c:	4a2a      	ldr	r2, [pc, #168]	; (8012ae8 <dhcp_renew+0x100>)
 8012a3e:	5cd3      	ldrb	r3, [r2, r3]
 8012a40:	4619      	mov	r1, r3
 8012a42:	6938      	ldr	r0, [r7, #16]
 8012a44:	f000 fa84 	bl	8012f50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a48:	7dfb      	ldrb	r3, [r7, #23]
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	75fb      	strb	r3, [r7, #23]
 8012a4e:	7dfb      	ldrb	r3, [r7, #23]
 8012a50:	2b02      	cmp	r3, #2
 8012a52:	d9f2      	bls.n	8012a3a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8012a54:	6938      	ldr	r0, [r7, #16]
 8012a56:	f001 f851 	bl	8013afc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	68da      	ldr	r2, [r3, #12]
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	8a9b      	ldrh	r3, [r3, #20]
 8012a62:	33f0      	adds	r3, #240	; 0xf0
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	4619      	mov	r1, r3
 8012a68:	4610      	mov	r0, r2
 8012a6a:	f7f8 feab 	bl	800b7c4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8012a6e:	4b1f      	ldr	r3, [pc, #124]	; (8012aec <dhcp_renew+0x104>)
 8012a70:	6818      	ldr	r0, [r3, #0]
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	68d9      	ldr	r1, [r3, #12]
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	2343      	movs	r3, #67	; 0x43
 8012a82:	f7fe ffcf 	bl	8011a24 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012a86:	6938      	ldr	r0, [r7, #16]
 8012a88:	f000 fff6 	bl	8013a78 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	7a9b      	ldrb	r3, [r3, #10]
 8012a90:	2bff      	cmp	r3, #255	; 0xff
 8012a92:	d005      	beq.n	8012aa0 <dhcp_renew+0xb8>
    dhcp->tries++;
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	7a9b      	ldrb	r3, [r3, #10]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	b2da      	uxtb	r2, r3
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	7a9b      	ldrb	r3, [r3, #10]
 8012aa4:	2b09      	cmp	r3, #9
 8012aa6:	d80a      	bhi.n	8012abe <dhcp_renew+0xd6>
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	7a9b      	ldrb	r3, [r3, #10]
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	461a      	mov	r2, r3
 8012ab0:	0152      	lsls	r2, r2, #5
 8012ab2:	1ad2      	subs	r2, r2, r3
 8012ab4:	0092      	lsls	r2, r2, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	011b      	lsls	r3, r3, #4
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	e001      	b.n	8012ac2 <dhcp_renew+0xda>
 8012abe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012ac2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012ac4:	89bb      	ldrh	r3, [r7, #12]
 8012ac6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012aca:	4a09      	ldr	r2, [pc, #36]	; (8012af0 <dhcp_renew+0x108>)
 8012acc:	fb82 1203 	smull	r1, r2, r2, r3
 8012ad0:	1152      	asrs	r2, r2, #5
 8012ad2:	17db      	asrs	r3, r3, #31
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3718      	adds	r7, #24
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	2000001c 	.word	0x2000001c
 8012aec:	2000891c 	.word	0x2000891c
 8012af0:	10624dd3 	.word	0x10624dd3

08012af4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b088      	sub	sp, #32
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6a1b      	ldr	r3, [r3, #32]
 8012b00:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012b02:	2104      	movs	r1, #4
 8012b04:	6938      	ldr	r0, [r7, #16]
 8012b06:	f000 f9cf 	bl	8012ea8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012b0a:	2203      	movs	r2, #3
 8012b0c:	6939      	ldr	r1, [r7, #16]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fe50 	bl	80137b4 <dhcp_create_msg>
 8012b14:	4603      	mov	r3, r0
 8012b16:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d139      	bne.n	8012b94 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b20:	2202      	movs	r2, #2
 8012b22:	2139      	movs	r1, #57	; 0x39
 8012b24:	6938      	ldr	r0, [r7, #16]
 8012b26:	f000 f9d9 	bl	8012edc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6938      	ldr	r0, [r7, #16]
 8012b32:	f000 fa35 	bl	8012fa0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b36:	2203      	movs	r2, #3
 8012b38:	2137      	movs	r1, #55	; 0x37
 8012b3a:	6938      	ldr	r0, [r7, #16]
 8012b3c:	f000 f9ce 	bl	8012edc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b40:	2300      	movs	r3, #0
 8012b42:	75fb      	strb	r3, [r7, #23]
 8012b44:	e009      	b.n	8012b5a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012b46:	7dfb      	ldrb	r3, [r7, #23]
 8012b48:	4a29      	ldr	r2, [pc, #164]	; (8012bf0 <dhcp_rebind+0xfc>)
 8012b4a:	5cd3      	ldrb	r3, [r2, r3]
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	6938      	ldr	r0, [r7, #16]
 8012b50:	f000 f9fe 	bl	8012f50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b54:	7dfb      	ldrb	r3, [r7, #23]
 8012b56:	3301      	adds	r3, #1
 8012b58:	75fb      	strb	r3, [r7, #23]
 8012b5a:	7dfb      	ldrb	r3, [r7, #23]
 8012b5c:	2b02      	cmp	r3, #2
 8012b5e:	d9f2      	bls.n	8012b46 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8012b60:	6938      	ldr	r0, [r7, #16]
 8012b62:	f000 ffcb 	bl	8013afc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	68da      	ldr	r2, [r3, #12]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	8a9b      	ldrh	r3, [r3, #20]
 8012b6e:	33f0      	adds	r3, #240	; 0xf0
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	4619      	mov	r1, r3
 8012b74:	4610      	mov	r0, r2
 8012b76:	f7f8 fe25 	bl	800b7c4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8012b7a:	4b1e      	ldr	r3, [pc, #120]	; (8012bf4 <dhcp_rebind+0x100>)
 8012b7c:	6818      	ldr	r0, [r3, #0]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	68d9      	ldr	r1, [r3, #12]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	2343      	movs	r3, #67	; 0x43
 8012b88:	4a1b      	ldr	r2, [pc, #108]	; (8012bf8 <dhcp_rebind+0x104>)
 8012b8a:	f7fe ff4b 	bl	8011a24 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012b8e:	6938      	ldr	r0, [r7, #16]
 8012b90:	f000 ff72 	bl	8013a78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	7a9b      	ldrb	r3, [r3, #10]
 8012b98:	2bff      	cmp	r3, #255	; 0xff
 8012b9a:	d005      	beq.n	8012ba8 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	7a9b      	ldrb	r3, [r3, #10]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	7a9b      	ldrb	r3, [r3, #10]
 8012bac:	2b09      	cmp	r3, #9
 8012bae:	d80a      	bhi.n	8012bc6 <dhcp_rebind+0xd2>
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	7a9b      	ldrb	r3, [r3, #10]
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	461a      	mov	r2, r3
 8012bb8:	0152      	lsls	r2, r2, #5
 8012bba:	1ad2      	subs	r2, r2, r3
 8012bbc:	0092      	lsls	r2, r2, #2
 8012bbe:	4413      	add	r3, r2
 8012bc0:	00db      	lsls	r3, r3, #3
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	e001      	b.n	8012bca <dhcp_rebind+0xd6>
 8012bc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8012bca:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012bcc:	89bb      	ldrh	r3, [r7, #12]
 8012bce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bd2:	4a0a      	ldr	r2, [pc, #40]	; (8012bfc <dhcp_rebind+0x108>)
 8012bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8012bd8:	1152      	asrs	r2, r2, #5
 8012bda:	17db      	asrs	r3, r3, #31
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3718      	adds	r7, #24
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	2000001c 	.word	0x2000001c
 8012bf4:	2000891c 	.word	0x2000891c
 8012bf8:	080256dc 	.word	0x080256dc
 8012bfc:	10624dd3 	.word	0x10624dd3

08012c00 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b088      	sub	sp, #32
 8012c04:	af02      	add	r7, sp, #8
 8012c06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6a1b      	ldr	r3, [r3, #32]
 8012c0c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012c0e:	2103      	movs	r1, #3
 8012c10:	6938      	ldr	r0, [r7, #16]
 8012c12:	f000 f949 	bl	8012ea8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012c16:	2203      	movs	r2, #3
 8012c18:	6939      	ldr	r1, [r7, #16]
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 fdca 	bl	80137b4 <dhcp_create_msg>
 8012c20:	4603      	mov	r3, r0
 8012c22:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d147      	bne.n	8012cbc <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	2139      	movs	r1, #57	; 0x39
 8012c30:	6938      	ldr	r0, [r7, #16]
 8012c32:	f000 f953 	bl	8012edc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012c36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012c3a:	6938      	ldr	r0, [r7, #16]
 8012c3c:	f000 f9b0 	bl	8012fa0 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012c40:	2204      	movs	r2, #4
 8012c42:	2132      	movs	r1, #50	; 0x32
 8012c44:	6938      	ldr	r0, [r7, #16]
 8012c46:	f000 f949 	bl	8012edc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f7 fd62 	bl	800a718 <lwip_htonl>
 8012c54:	4603      	mov	r3, r0
 8012c56:	4619      	mov	r1, r3
 8012c58:	6938      	ldr	r0, [r7, #16]
 8012c5a:	f000 f9db 	bl	8013014 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012c5e:	2203      	movs	r2, #3
 8012c60:	2137      	movs	r1, #55	; 0x37
 8012c62:	6938      	ldr	r0, [r7, #16]
 8012c64:	f000 f93a 	bl	8012edc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c68:	2300      	movs	r3, #0
 8012c6a:	75fb      	strb	r3, [r7, #23]
 8012c6c:	e009      	b.n	8012c82 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012c6e:	7dfb      	ldrb	r3, [r7, #23]
 8012c70:	4a29      	ldr	r2, [pc, #164]	; (8012d18 <dhcp_reboot+0x118>)
 8012c72:	5cd3      	ldrb	r3, [r2, r3]
 8012c74:	4619      	mov	r1, r3
 8012c76:	6938      	ldr	r0, [r7, #16]
 8012c78:	f000 f96a 	bl	8012f50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c7c:	7dfb      	ldrb	r3, [r7, #23]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	75fb      	strb	r3, [r7, #23]
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d9f2      	bls.n	8012c6e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8012c88:	6938      	ldr	r0, [r7, #16]
 8012c8a:	f000 ff37 	bl	8013afc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	68da      	ldr	r2, [r3, #12]
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	8a9b      	ldrh	r3, [r3, #20]
 8012c96:	33f0      	adds	r3, #240	; 0xf0
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	4610      	mov	r0, r2
 8012c9e:	f7f8 fd91 	bl	800b7c4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8012ca2:	4b1e      	ldr	r3, [pc, #120]	; (8012d1c <dhcp_reboot+0x11c>)
 8012ca4:	6818      	ldr	r0, [r3, #0]
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	68d9      	ldr	r1, [r3, #12]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	2343      	movs	r3, #67	; 0x43
 8012cb0:	4a1b      	ldr	r2, [pc, #108]	; (8012d20 <dhcp_reboot+0x120>)
 8012cb2:	f7fe feb7 	bl	8011a24 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012cb6:	6938      	ldr	r0, [r7, #16]
 8012cb8:	f000 fede 	bl	8013a78 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	7a9b      	ldrb	r3, [r3, #10]
 8012cc0:	2bff      	cmp	r3, #255	; 0xff
 8012cc2:	d005      	beq.n	8012cd0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	7a9b      	ldrb	r3, [r3, #10]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	b2da      	uxtb	r2, r3
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	7a9b      	ldrb	r3, [r3, #10]
 8012cd4:	2b09      	cmp	r3, #9
 8012cd6:	d80a      	bhi.n	8012cee <dhcp_reboot+0xee>
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	7a9b      	ldrb	r3, [r3, #10]
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	461a      	mov	r2, r3
 8012ce0:	0152      	lsls	r2, r2, #5
 8012ce2:	1ad2      	subs	r2, r2, r3
 8012ce4:	0092      	lsls	r2, r2, #2
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	e001      	b.n	8012cf2 <dhcp_reboot+0xf2>
 8012cee:	f242 7310 	movw	r3, #10000	; 0x2710
 8012cf2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012cf4:	89bb      	ldrh	r3, [r7, #12]
 8012cf6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cfa:	4a0a      	ldr	r2, [pc, #40]	; (8012d24 <dhcp_reboot+0x124>)
 8012cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8012d00:	1152      	asrs	r2, r2, #5
 8012d02:	17db      	asrs	r3, r3, #31
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3718      	adds	r7, #24
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	2000001c 	.word	0x2000001c
 8012d1c:	2000891c 	.word	0x2000891c
 8012d20:	080256dc 	.word	0x080256dc
 8012d24:	10624dd3 	.word	0x10624dd3

08012d28 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af02      	add	r7, sp, #8
 8012d2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6a1b      	ldr	r3, [r3, #32]
 8012d34:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d102      	bne.n	8012d42 <dhcp_release+0x1a>
    return ERR_ARG;
 8012d3c:	f06f 030f 	mvn.w	r3, #15
 8012d40:	e072      	b.n	8012e28 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d46:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f000 ff31 	bl	8013bb0 <dhcp_supplied_address>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012d52:	2100      	movs	r1, #0
 8012d54:	6978      	ldr	r0, [r7, #20]
 8012d56:	f000 f8a7 	bl	8012ea8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	2200      	movs	r2, #0
 8012d64:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	2200      	movs	r2, #0
 8012d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	845a      	strh	r2, [r3, #34]	; 0x22
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	841a      	strh	r2, [r3, #32]
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	8c1a      	ldrh	r2, [r3, #32]
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	83da      	strh	r2, [r3, #30]
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	8bda      	ldrh	r2, [r3, #30]
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8012da6:	7cfb      	ldrb	r3, [r7, #19]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d101      	bne.n	8012db0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8012dac:	2300      	movs	r3, #0
 8012dae:	e03b      	b.n	8012e28 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8012db0:	2207      	movs	r2, #7
 8012db2:	6979      	ldr	r1, [r7, #20]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fcfd 	bl	80137b4 <dhcp_create_msg>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8012dbe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d128      	bne.n	8012e18 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8012dc6:	2204      	movs	r2, #4
 8012dc8:	2136      	movs	r1, #54	; 0x36
 8012dca:	6978      	ldr	r0, [r7, #20]
 8012dcc:	f000 f886 	bl	8012edc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f7 fca0 	bl	800a718 <lwip_htonl>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	4619      	mov	r1, r3
 8012ddc:	6978      	ldr	r0, [r7, #20]
 8012dde:	f000 f919 	bl	8013014 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8012de2:	6978      	ldr	r0, [r7, #20]
 8012de4:	f000 fe8a 	bl	8013afc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	68da      	ldr	r2, [r3, #12]
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	8a9b      	ldrh	r3, [r3, #20]
 8012df0:	33f0      	adds	r3, #240	; 0xf0
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	4619      	mov	r1, r3
 8012df6:	4610      	mov	r0, r2
 8012df8:	f7f8 fce4 	bl	800b7c4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8012dfc:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <dhcp_release+0x108>)
 8012dfe:	6818      	ldr	r0, [r3, #0]
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	68d9      	ldr	r1, [r3, #12]
 8012e04:	f107 020c 	add.w	r2, r7, #12
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	2343      	movs	r3, #67	; 0x43
 8012e0e:	f7fe fe09 	bl	8011a24 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012e12:	6978      	ldr	r0, [r7, #20]
 8012e14:	f000 fe30 	bl	8013a78 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012e18:	4b06      	ldr	r3, [pc, #24]	; (8012e34 <dhcp_release+0x10c>)
 8012e1a:	4a06      	ldr	r2, [pc, #24]	; (8012e34 <dhcp_release+0x10c>)
 8012e1c:	4905      	ldr	r1, [pc, #20]	; (8012e34 <dhcp_release+0x10c>)
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7f8 f970 	bl	800b104 <netif_set_addr>

  return result;
 8012e24:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3718      	adds	r7, #24
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	2000891c 	.word	0x2000891c
 8012e34:	080256d8 	.word	0x080256d8

08012e38 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d107      	bne.n	8012e56 <dhcp_stop+0x1e>
 8012e46:	4b14      	ldr	r3, [pc, #80]	; (8012e98 <dhcp_stop+0x60>)
 8012e48:	f240 5242 	movw	r2, #1346	; 0x542
 8012e4c:	4913      	ldr	r1, [pc, #76]	; (8012e9c <dhcp_stop+0x64>)
 8012e4e:	4814      	ldr	r0, [pc, #80]	; (8012ea0 <dhcp_stop+0x68>)
 8012e50:	f003 fb3c 	bl	80164cc <iprintf>
 8012e54:	e01d      	b.n	8012e92 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6a1b      	ldr	r3, [r3, #32]
 8012e5a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d017      	beq.n	8012e92 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d006      	beq.n	8012e78 <dhcp_stop+0x40>
 8012e6a:	4b0b      	ldr	r3, [pc, #44]	; (8012e98 <dhcp_stop+0x60>)
 8012e6c:	f240 524f 	movw	r2, #1359	; 0x54f
 8012e70:	490c      	ldr	r1, [pc, #48]	; (8012ea4 <dhcp_stop+0x6c>)
 8012e72:	480b      	ldr	r0, [pc, #44]	; (8012ea0 <dhcp_stop+0x68>)
 8012e74:	f003 fb2a 	bl	80164cc <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012e78:	2100      	movs	r1, #0
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f814 	bl	8012ea8 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	7a1b      	ldrb	r3, [r3, #8]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d004      	beq.n	8012e92 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012e88:	f7ff f854 	bl	8011f34 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	08019650 	.word	0x08019650
 8012e9c:	080197c4 	.word	0x080197c4
 8012ea0:	080196b0 	.word	0x080196b0
 8012ea4:	0801977c 	.word	0x0801977c

08012ea8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	7a5b      	ldrb	r3, [r3, #9]
 8012eb8:	78fa      	ldrb	r2, [r7, #3]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d008      	beq.n	8012ed0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	78fa      	ldrb	r2, [r7, #3]
 8012ec2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	82da      	strh	r2, [r3, #22]
  }
}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	460b      	mov	r3, r1
 8012ee6:	70fb      	strb	r3, [r7, #3]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	8a9b      	ldrh	r3, [r3, #20]
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	78bb      	ldrb	r3, [r7, #2]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	3302      	adds	r3, #2
 8012ef8:	2b44      	cmp	r3, #68	; 0x44
 8012efa:	d906      	bls.n	8012f0a <dhcp_option+0x2e>
 8012efc:	4b11      	ldr	r3, [pc, #68]	; (8012f44 <dhcp_option+0x68>)
 8012efe:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8012f02:	4911      	ldr	r1, [pc, #68]	; (8012f48 <dhcp_option+0x6c>)
 8012f04:	4811      	ldr	r0, [pc, #68]	; (8012f4c <dhcp_option+0x70>)
 8012f06:	f003 fae1 	bl	80164cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	691a      	ldr	r2, [r3, #16]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	8a9b      	ldrh	r3, [r3, #20]
 8012f12:	1c59      	adds	r1, r3, #1
 8012f14:	b288      	uxth	r0, r1
 8012f16:	6879      	ldr	r1, [r7, #4]
 8012f18:	8288      	strh	r0, [r1, #20]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	78fa      	ldrb	r2, [r7, #3]
 8012f1e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	691a      	ldr	r2, [r3, #16]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	8a9b      	ldrh	r3, [r3, #20]
 8012f2a:	1c59      	adds	r1, r3, #1
 8012f2c:	b288      	uxth	r0, r1
 8012f2e:	6879      	ldr	r1, [r7, #4]
 8012f30:	8288      	strh	r0, [r1, #20]
 8012f32:	4413      	add	r3, r2
 8012f34:	78ba      	ldrb	r2, [r7, #2]
 8012f36:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8012f3a:	bf00      	nop
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	08019650 	.word	0x08019650
 8012f48:	080197e0 	.word	0x080197e0
 8012f4c:	080196b0 	.word	0x080196b0

08012f50 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	8a9b      	ldrh	r3, [r3, #20]
 8012f60:	2b43      	cmp	r3, #67	; 0x43
 8012f62:	d906      	bls.n	8012f72 <dhcp_option_byte+0x22>
 8012f64:	4b0b      	ldr	r3, [pc, #44]	; (8012f94 <dhcp_option_byte+0x44>)
 8012f66:	f240 527b 	movw	r2, #1403	; 0x57b
 8012f6a:	490b      	ldr	r1, [pc, #44]	; (8012f98 <dhcp_option_byte+0x48>)
 8012f6c:	480b      	ldr	r0, [pc, #44]	; (8012f9c <dhcp_option_byte+0x4c>)
 8012f6e:	f003 faad 	bl	80164cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	691a      	ldr	r2, [r3, #16]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	8a9b      	ldrh	r3, [r3, #20]
 8012f7a:	1c59      	adds	r1, r3, #1
 8012f7c:	b288      	uxth	r0, r1
 8012f7e:	6879      	ldr	r1, [r7, #4]
 8012f80:	8288      	strh	r0, [r1, #20]
 8012f82:	4413      	add	r3, r2
 8012f84:	78fa      	ldrb	r2, [r7, #3]
 8012f86:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8012f8a:	bf00      	nop
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	08019650 	.word	0x08019650
 8012f98:	08019828 	.word	0x08019828
 8012f9c:	080196b0 	.word	0x080196b0

08012fa0 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8012fa0:	b590      	push	{r4, r7, lr}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	8a9b      	ldrh	r3, [r3, #20]
 8012fb0:	3302      	adds	r3, #2
 8012fb2:	2b44      	cmp	r3, #68	; 0x44
 8012fb4:	d906      	bls.n	8012fc4 <dhcp_option_short+0x24>
 8012fb6:	4b14      	ldr	r3, [pc, #80]	; (8013008 <dhcp_option_short+0x68>)
 8012fb8:	f240 5282 	movw	r2, #1410	; 0x582
 8012fbc:	4913      	ldr	r1, [pc, #76]	; (801300c <dhcp_option_short+0x6c>)
 8012fbe:	4814      	ldr	r0, [pc, #80]	; (8013010 <dhcp_option_short+0x70>)
 8012fc0:	f003 fa84 	bl	80164cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012fc4:	887b      	ldrh	r3, [r7, #2]
 8012fc6:	0a1b      	lsrs	r3, r3, #8
 8012fc8:	b298      	uxth	r0, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	691a      	ldr	r2, [r3, #16]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	8a9b      	ldrh	r3, [r3, #20]
 8012fd2:	1c59      	adds	r1, r3, #1
 8012fd4:	b28c      	uxth	r4, r1
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	828c      	strh	r4, [r1, #20]
 8012fda:	b2c1      	uxtb	r1, r0
 8012fdc:	4413      	add	r3, r2
 8012fde:	460a      	mov	r2, r1
 8012fe0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	691a      	ldr	r2, [r3, #16]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	8a9b      	ldrh	r3, [r3, #20]
 8012fec:	1c59      	adds	r1, r3, #1
 8012fee:	b288      	uxth	r0, r1
 8012ff0:	6879      	ldr	r1, [r7, #4]
 8012ff2:	8288      	strh	r0, [r1, #20]
 8012ff4:	8879      	ldrh	r1, [r7, #2]
 8012ff6:	b2c9      	uxtb	r1, r1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	460a      	mov	r2, r1
 8012ffc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013000:	bf00      	nop
 8013002:	370c      	adds	r7, #12
 8013004:	46bd      	mov	sp, r7
 8013006:	bd90      	pop	{r4, r7, pc}
 8013008:	08019650 	.word	0x08019650
 801300c:	08019864 	.word	0x08019864
 8013010:	080196b0 	.word	0x080196b0

08013014 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8013014:	b590      	push	{r4, r7, lr}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	8a9b      	ldrh	r3, [r3, #20]
 8013022:	3304      	adds	r3, #4
 8013024:	2b44      	cmp	r3, #68	; 0x44
 8013026:	d906      	bls.n	8013036 <dhcp_option_long+0x22>
 8013028:	4b22      	ldr	r3, [pc, #136]	; (80130b4 <dhcp_option_long+0xa0>)
 801302a:	f240 528a 	movw	r2, #1418	; 0x58a
 801302e:	4922      	ldr	r1, [pc, #136]	; (80130b8 <dhcp_option_long+0xa4>)
 8013030:	4822      	ldr	r0, [pc, #136]	; (80130bc <dhcp_option_long+0xa8>)
 8013032:	f003 fa4b 	bl	80164cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	0e18      	lsrs	r0, r3, #24
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	691a      	ldr	r2, [r3, #16]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	8a9b      	ldrh	r3, [r3, #20]
 8013042:	1c59      	adds	r1, r3, #1
 8013044:	b28c      	uxth	r4, r1
 8013046:	6879      	ldr	r1, [r7, #4]
 8013048:	828c      	strh	r4, [r1, #20]
 801304a:	b2c1      	uxtb	r1, r0
 801304c:	4413      	add	r3, r2
 801304e:	460a      	mov	r2, r1
 8013050:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	0c18      	lsrs	r0, r3, #16
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	691a      	ldr	r2, [r3, #16]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	8a9b      	ldrh	r3, [r3, #20]
 8013060:	1c59      	adds	r1, r3, #1
 8013062:	b28c      	uxth	r4, r1
 8013064:	6879      	ldr	r1, [r7, #4]
 8013066:	828c      	strh	r4, [r1, #20]
 8013068:	b2c1      	uxtb	r1, r0
 801306a:	4413      	add	r3, r2
 801306c:	460a      	mov	r2, r1
 801306e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	0a18      	lsrs	r0, r3, #8
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691a      	ldr	r2, [r3, #16]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	8a9b      	ldrh	r3, [r3, #20]
 801307e:	1c59      	adds	r1, r3, #1
 8013080:	b28c      	uxth	r4, r1
 8013082:	6879      	ldr	r1, [r7, #4]
 8013084:	828c      	strh	r4, [r1, #20]
 8013086:	b2c1      	uxtb	r1, r0
 8013088:	4413      	add	r3, r2
 801308a:	460a      	mov	r2, r1
 801308c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	691a      	ldr	r2, [r3, #16]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8a9b      	ldrh	r3, [r3, #20]
 8013098:	1c59      	adds	r1, r3, #1
 801309a:	b288      	uxth	r0, r1
 801309c:	6879      	ldr	r1, [r7, #4]
 801309e:	8288      	strh	r0, [r1, #20]
 80130a0:	6839      	ldr	r1, [r7, #0]
 80130a2:	b2c9      	uxtb	r1, r1
 80130a4:	4413      	add	r3, r2
 80130a6:	460a      	mov	r2, r1
 80130a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80130ac:	bf00      	nop
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd90      	pop	{r4, r7, pc}
 80130b4:	08019650 	.word	0x08019650
 80130b8:	080198a8 	.word	0x080198a8
 80130bc:	080196b0 	.word	0x080196b0

080130c0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08e      	sub	sp, #56	; 0x38
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80130d2:	2208      	movs	r2, #8
 80130d4:	2100      	movs	r1, #0
 80130d6:	48b3      	ldr	r0, [pc, #716]	; (80133a4 <dhcp_parse_reply+0x2e4>)
 80130d8:	f003 f9f0 	bl	80164bc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	895b      	ldrh	r3, [r3, #10]
 80130e0:	2b2b      	cmp	r3, #43	; 0x2b
 80130e2:	d802      	bhi.n	80130ea <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80130e4:	f06f 0301 	mvn.w	r3, #1
 80130e8:	e26a      	b.n	80135c0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	685a      	ldr	r2, [r3, #4]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80130f2:	23f0      	movs	r3, #240	; 0xf0
 80130f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	891b      	ldrh	r3, [r3, #8]
 80130fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8013100:	e00c      	b.n	801311c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 8013102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013104:	895b      	ldrh	r3, [r3, #10]
 8013106:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013108:	1ad3      	subs	r3, r2, r3
 801310a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 801310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310e:	895b      	ldrh	r3, [r3, #10]
 8013110:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8013116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311e:	2b00      	cmp	r3, #0
 8013120:	d004      	beq.n	801312c <dhcp_parse_reply+0x6c>
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	895b      	ldrh	r3, [r3, #10]
 8013126:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013128:	429a      	cmp	r2, r3
 801312a:	d2ea      	bcs.n	8013102 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312e:	2b00      	cmp	r3, #0
 8013130:	d102      	bne.n	8013138 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8013132:	f06f 0301 	mvn.w	r3, #1
 8013136:	e243      	b.n	80135c0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 8013138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801313a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 801313c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801313e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013146:	e1fb      	b.n	8013540 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8013148:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801314a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314c:	4413      	add	r3, r2
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8013156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801315a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801315c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801315e:	3302      	adds	r3, #2
 8013160:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013162:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013164:	3301      	adds	r3, #1
 8013166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013168:	8952      	ldrh	r2, [r2, #10]
 801316a:	4293      	cmp	r3, r2
 801316c:	da06      	bge.n	801317c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801316e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013170:	3301      	adds	r3, #1
 8013172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013174:	4413      	add	r3, r2
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	77fb      	strb	r3, [r7, #31]
 801317a:	e00a      	b.n	8013192 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d004      	beq.n	801318e <dhcp_parse_reply+0xce>
 8013184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	e000      	b.n	8013190 <dhcp_parse_reply+0xd0>
 801318e:	2300      	movs	r3, #0
 8013190:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013192:	7ffb      	ldrb	r3, [r7, #31]
 8013194:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8013196:	7d7b      	ldrb	r3, [r7, #21]
 8013198:	2b3b      	cmp	r3, #59	; 0x3b
 801319a:	f200 8121 	bhi.w	80133e0 <dhcp_parse_reply+0x320>
 801319e:	a201      	add	r2, pc, #4	; (adr r2, 80131a4 <dhcp_parse_reply+0xe4>)
 80131a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a4:	08013295 	.word	0x08013295
 80131a8:	080132a5 	.word	0x080132a5
 80131ac:	080133e1 	.word	0x080133e1
 80131b0:	080132c5 	.word	0x080132c5
 80131b4:	080133e1 	.word	0x080133e1
 80131b8:	080133e1 	.word	0x080133e1
 80131bc:	080133e1 	.word	0x080133e1
 80131c0:	080133e1 	.word	0x080133e1
 80131c4:	080133e1 	.word	0x080133e1
 80131c8:	080133e1 	.word	0x080133e1
 80131cc:	080133e1 	.word	0x080133e1
 80131d0:	080133e1 	.word	0x080133e1
 80131d4:	080133e1 	.word	0x080133e1
 80131d8:	080133e1 	.word	0x080133e1
 80131dc:	080133e1 	.word	0x080133e1
 80131e0:	080133e1 	.word	0x080133e1
 80131e4:	080133e1 	.word	0x080133e1
 80131e8:	080133e1 	.word	0x080133e1
 80131ec:	080133e1 	.word	0x080133e1
 80131f0:	080133e1 	.word	0x080133e1
 80131f4:	080133e1 	.word	0x080133e1
 80131f8:	080133e1 	.word	0x080133e1
 80131fc:	080133e1 	.word	0x080133e1
 8013200:	080133e1 	.word	0x080133e1
 8013204:	080133e1 	.word	0x080133e1
 8013208:	080133e1 	.word	0x080133e1
 801320c:	080133e1 	.word	0x080133e1
 8013210:	080133e1 	.word	0x080133e1
 8013214:	080133e1 	.word	0x080133e1
 8013218:	080133e1 	.word	0x080133e1
 801321c:	080133e1 	.word	0x080133e1
 8013220:	080133e1 	.word	0x080133e1
 8013224:	080133e1 	.word	0x080133e1
 8013228:	080133e1 	.word	0x080133e1
 801322c:	080133e1 	.word	0x080133e1
 8013230:	080133e1 	.word	0x080133e1
 8013234:	080133e1 	.word	0x080133e1
 8013238:	080133e1 	.word	0x080133e1
 801323c:	080133e1 	.word	0x080133e1
 8013240:	080133e1 	.word	0x080133e1
 8013244:	080133e1 	.word	0x080133e1
 8013248:	080133e1 	.word	0x080133e1
 801324c:	080133e1 	.word	0x080133e1
 8013250:	080133e1 	.word	0x080133e1
 8013254:	080133e1 	.word	0x080133e1
 8013258:	080133e1 	.word	0x080133e1
 801325c:	080133e1 	.word	0x080133e1
 8013260:	080133e1 	.word	0x080133e1
 8013264:	080133e1 	.word	0x080133e1
 8013268:	080133e1 	.word	0x080133e1
 801326c:	080133e1 	.word	0x080133e1
 8013270:	080132eb 	.word	0x080132eb
 8013274:	0801330b 	.word	0x0801330b
 8013278:	08013345 	.word	0x08013345
 801327c:	08013365 	.word	0x08013365
 8013280:	080133e1 	.word	0x080133e1
 8013284:	080133e1 	.word	0x080133e1
 8013288:	080133e1 	.word	0x080133e1
 801328c:	08013385 	.word	0x08013385
 8013290:	080133c1 	.word	0x080133c1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	77fb      	strb	r3, [r7, #31]
 8013298:	7ffb      	ldrb	r3, [r7, #31]
 801329a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801329c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801329e:	3b01      	subs	r3, #1
 80132a0:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 80132a2:	e0a0      	b.n	80133e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80132a4:	7ffb      	ldrb	r3, [r7, #31]
 80132a6:	2b04      	cmp	r3, #4
 80132a8:	d009      	beq.n	80132be <dhcp_parse_reply+0x1fe>
 80132aa:	4b3f      	ldr	r3, [pc, #252]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 80132ac:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80132b0:	493e      	ldr	r1, [pc, #248]	; (80133ac <dhcp_parse_reply+0x2ec>)
 80132b2:	483f      	ldr	r0, [pc, #252]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 80132b4:	f003 f90a 	bl	80164cc <iprintf>
 80132b8:	f06f 0305 	mvn.w	r3, #5
 80132bc:	e180      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80132be:	2306      	movs	r3, #6
 80132c0:	61bb      	str	r3, [r7, #24]
        break;
 80132c2:	e090      	b.n	80133e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80132c4:	2304      	movs	r3, #4
 80132c6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80132c8:	7ffa      	ldrb	r2, [r7, #31]
 80132ca:	7fbb      	ldrb	r3, [r7, #30]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d209      	bcs.n	80132e4 <dhcp_parse_reply+0x224>
 80132d0:	4b35      	ldr	r3, [pc, #212]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 80132d2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80132d6:	4937      	ldr	r1, [pc, #220]	; (80133b4 <dhcp_parse_reply+0x2f4>)
 80132d8:	4835      	ldr	r0, [pc, #212]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 80132da:	f003 f8f7 	bl	80164cc <iprintf>
 80132de:	f06f 0305 	mvn.w	r3, #5
 80132e2:	e16d      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80132e4:	2307      	movs	r3, #7
 80132e6:	61bb      	str	r3, [r7, #24]
        break;
 80132e8:	e07d      	b.n	80133e6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80132ea:	7ffb      	ldrb	r3, [r7, #31]
 80132ec:	2b04      	cmp	r3, #4
 80132ee:	d009      	beq.n	8013304 <dhcp_parse_reply+0x244>
 80132f0:	4b2d      	ldr	r3, [pc, #180]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 80132f2:	f240 6209 	movw	r2, #1545	; 0x609
 80132f6:	492d      	ldr	r1, [pc, #180]	; (80133ac <dhcp_parse_reply+0x2ec>)
 80132f8:	482d      	ldr	r0, [pc, #180]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 80132fa:	f003 f8e7 	bl	80164cc <iprintf>
 80132fe:	f06f 0305 	mvn.w	r3, #5
 8013302:	e15d      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013304:	2303      	movs	r3, #3
 8013306:	61bb      	str	r3, [r7, #24]
        break;
 8013308:	e06d      	b.n	80133e6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801330a:	7ffb      	ldrb	r3, [r7, #31]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d009      	beq.n	8013324 <dhcp_parse_reply+0x264>
 8013310:	4b25      	ldr	r3, [pc, #148]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 8013312:	f240 6217 	movw	r2, #1559	; 0x617
 8013316:	4928      	ldr	r1, [pc, #160]	; (80133b8 <dhcp_parse_reply+0x2f8>)
 8013318:	4825      	ldr	r0, [pc, #148]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 801331a:	f003 f8d7 	bl	80164cc <iprintf>
 801331e:	f06f 0305 	mvn.w	r3, #5
 8013322:	e14d      	b.n	80135c0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013326:	2bf0      	cmp	r3, #240	; 0xf0
 8013328:	d009      	beq.n	801333e <dhcp_parse_reply+0x27e>
 801332a:	4b1f      	ldr	r3, [pc, #124]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 801332c:	f240 6219 	movw	r2, #1561	; 0x619
 8013330:	4922      	ldr	r1, [pc, #136]	; (80133bc <dhcp_parse_reply+0x2fc>)
 8013332:	481f      	ldr	r0, [pc, #124]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 8013334:	f003 f8ca 	bl	80164cc <iprintf>
 8013338:	f06f 0305 	mvn.w	r3, #5
 801333c:	e140      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801333e:	2300      	movs	r3, #0
 8013340:	61bb      	str	r3, [r7, #24]
        break;
 8013342:	e050      	b.n	80133e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013344:	7ffb      	ldrb	r3, [r7, #31]
 8013346:	2b01      	cmp	r3, #1
 8013348:	d009      	beq.n	801335e <dhcp_parse_reply+0x29e>
 801334a:	4b17      	ldr	r3, [pc, #92]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 801334c:	f240 621d 	movw	r2, #1565	; 0x61d
 8013350:	4919      	ldr	r1, [pc, #100]	; (80133b8 <dhcp_parse_reply+0x2f8>)
 8013352:	4817      	ldr	r0, [pc, #92]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 8013354:	f003 f8ba 	bl	80164cc <iprintf>
 8013358:	f06f 0305 	mvn.w	r3, #5
 801335c:	e130      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801335e:	2301      	movs	r3, #1
 8013360:	61bb      	str	r3, [r7, #24]
        break;
 8013362:	e040      	b.n	80133e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013364:	7ffb      	ldrb	r3, [r7, #31]
 8013366:	2b04      	cmp	r3, #4
 8013368:	d009      	beq.n	801337e <dhcp_parse_reply+0x2be>
 801336a:	4b0f      	ldr	r3, [pc, #60]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 801336c:	f240 6221 	movw	r2, #1569	; 0x621
 8013370:	490e      	ldr	r1, [pc, #56]	; (80133ac <dhcp_parse_reply+0x2ec>)
 8013372:	480f      	ldr	r0, [pc, #60]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 8013374:	f003 f8aa 	bl	80164cc <iprintf>
 8013378:	f06f 0305 	mvn.w	r3, #5
 801337c:	e120      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801337e:	2302      	movs	r3, #2
 8013380:	61bb      	str	r3, [r7, #24]
        break;
 8013382:	e030      	b.n	80133e6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013384:	7ffb      	ldrb	r3, [r7, #31]
 8013386:	2b04      	cmp	r3, #4
 8013388:	d009      	beq.n	801339e <dhcp_parse_reply+0x2de>
 801338a:	4b07      	ldr	r3, [pc, #28]	; (80133a8 <dhcp_parse_reply+0x2e8>)
 801338c:	f240 6225 	movw	r2, #1573	; 0x625
 8013390:	4906      	ldr	r1, [pc, #24]	; (80133ac <dhcp_parse_reply+0x2ec>)
 8013392:	4807      	ldr	r0, [pc, #28]	; (80133b0 <dhcp_parse_reply+0x2f0>)
 8013394:	f003 f89a 	bl	80164cc <iprintf>
 8013398:	f06f 0305 	mvn.w	r3, #5
 801339c:	e110      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801339e:	2304      	movs	r3, #4
 80133a0:	61bb      	str	r3, [r7, #24]
        break;
 80133a2:	e020      	b.n	80133e6 <dhcp_parse_reply+0x326>
 80133a4:	2000f778 	.word	0x2000f778
 80133a8:	08019650 	.word	0x08019650
 80133ac:	080198e8 	.word	0x080198e8
 80133b0:	080196b0 	.word	0x080196b0
 80133b4:	080198f4 	.word	0x080198f4
 80133b8:	08019908 	.word	0x08019908
 80133bc:	08019914 	.word	0x08019914
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80133c0:	7ffb      	ldrb	r3, [r7, #31]
 80133c2:	2b04      	cmp	r3, #4
 80133c4:	d009      	beq.n	80133da <dhcp_parse_reply+0x31a>
 80133c6:	4b80      	ldr	r3, [pc, #512]	; (80135c8 <dhcp_parse_reply+0x508>)
 80133c8:	f240 6229 	movw	r2, #1577	; 0x629
 80133cc:	497f      	ldr	r1, [pc, #508]	; (80135cc <dhcp_parse_reply+0x50c>)
 80133ce:	4880      	ldr	r0, [pc, #512]	; (80135d0 <dhcp_parse_reply+0x510>)
 80133d0:	f003 f87c 	bl	80164cc <iprintf>
 80133d4:	f06f 0305 	mvn.w	r3, #5
 80133d8:	e0f2      	b.n	80135c0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 80133da:	2305      	movs	r3, #5
 80133dc:	61bb      	str	r3, [r7, #24]
        break;
 80133de:	e002      	b.n	80133e6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 80133e0:	2300      	movs	r3, #0
 80133e2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80133e4:	bf00      	nop
    }
    offset += len + 2;
 80133e6:	7ffb      	ldrb	r3, [r7, #31]
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80133ec:	4413      	add	r3, r2
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	3302      	adds	r3, #2
 80133f2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80133f4:	7fbb      	ldrb	r3, [r7, #30]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d079      	beq.n	80134ee <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 80133fa:	2300      	movs	r3, #0
 80133fc:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	db02      	blt.n	801340a <dhcp_parse_reply+0x34a>
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	2b07      	cmp	r3, #7
 8013408:	dd06      	ble.n	8013418 <dhcp_parse_reply+0x358>
 801340a:	4b6f      	ldr	r3, [pc, #444]	; (80135c8 <dhcp_parse_reply+0x508>)
 801340c:	f240 6236 	movw	r2, #1590	; 0x636
 8013410:	4970      	ldr	r1, [pc, #448]	; (80135d4 <dhcp_parse_reply+0x514>)
 8013412:	486f      	ldr	r0, [pc, #444]	; (80135d0 <dhcp_parse_reply+0x510>)
 8013414:	f003 f85a 	bl	80164cc <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8013418:	4a6f      	ldr	r2, [pc, #444]	; (80135d8 <dhcp_parse_reply+0x518>)
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	4413      	add	r3, r2
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d164      	bne.n	80134ee <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8013424:	7fbb      	ldrb	r3, [r7, #30]
 8013426:	2b04      	cmp	r3, #4
 8013428:	bf28      	it	cs
 801342a:	2304      	movcs	r3, #4
 801342c:	b2db      	uxtb	r3, r3
 801342e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013430:	8afb      	ldrh	r3, [r7, #22]
 8013432:	8a7a      	ldrh	r2, [r7, #18]
 8013434:	f107 0108 	add.w	r1, r7, #8
 8013438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801343a:	f7f8 fd43 	bl	800bec4 <pbuf_copy_partial>
 801343e:	4603      	mov	r3, r0
 8013440:	461a      	mov	r2, r3
 8013442:	8a7b      	ldrh	r3, [r7, #18]
 8013444:	4293      	cmp	r3, r2
 8013446:	d002      	beq.n	801344e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8013448:	f06f 0301 	mvn.w	r3, #1
 801344c:	e0b8      	b.n	80135c0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801344e:	7fbb      	ldrb	r3, [r7, #30]
 8013450:	2b04      	cmp	r3, #4
 8013452:	d927      	bls.n	80134a4 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013454:	7fbb      	ldrb	r3, [r7, #30]
 8013456:	f003 0303 	and.w	r3, r3, #3
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2b00      	cmp	r3, #0
 801345e:	d009      	beq.n	8013474 <dhcp_parse_reply+0x3b4>
 8013460:	4b59      	ldr	r3, [pc, #356]	; (80135c8 <dhcp_parse_reply+0x508>)
 8013462:	f240 623e 	movw	r2, #1598	; 0x63e
 8013466:	495d      	ldr	r1, [pc, #372]	; (80135dc <dhcp_parse_reply+0x51c>)
 8013468:	4859      	ldr	r0, [pc, #356]	; (80135d0 <dhcp_parse_reply+0x510>)
 801346a:	f003 f82f 	bl	80164cc <iprintf>
 801346e:	f06f 0305 	mvn.w	r3, #5
 8013472:	e0a5      	b.n	80135c0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8013474:	4a58      	ldr	r2, [pc, #352]	; (80135d8 <dhcp_parse_reply+0x518>)
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	4413      	add	r3, r2
 801347a:	2201      	movs	r2, #1
 801347c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	4618      	mov	r0, r3
 8013482:	f7f7 f949 	bl	800a718 <lwip_htonl>
 8013486:	4601      	mov	r1, r0
 8013488:	4a55      	ldr	r2, [pc, #340]	; (80135e0 <dhcp_parse_reply+0x520>)
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8013490:	7fbb      	ldrb	r3, [r7, #30]
 8013492:	3b04      	subs	r3, #4
 8013494:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8013496:	8afb      	ldrh	r3, [r7, #22]
 8013498:	3304      	adds	r3, #4
 801349a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	3301      	adds	r3, #1
 80134a0:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 80134a2:	e7ac      	b.n	80133fe <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 80134a4:	7fbb      	ldrb	r3, [r7, #30]
 80134a6:	2b04      	cmp	r3, #4
 80134a8:	d106      	bne.n	80134b8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7f7 f933 	bl	800a718 <lwip_htonl>
 80134b2:	4603      	mov	r3, r0
 80134b4:	60bb      	str	r3, [r7, #8]
 80134b6:	e010      	b.n	80134da <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80134b8:	7fbb      	ldrb	r3, [r7, #30]
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d009      	beq.n	80134d2 <dhcp_parse_reply+0x412>
 80134be:	4b42      	ldr	r3, [pc, #264]	; (80135c8 <dhcp_parse_reply+0x508>)
 80134c0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80134c4:	4947      	ldr	r1, [pc, #284]	; (80135e4 <dhcp_parse_reply+0x524>)
 80134c6:	4842      	ldr	r0, [pc, #264]	; (80135d0 <dhcp_parse_reply+0x510>)
 80134c8:	f003 f800 	bl	80164cc <iprintf>
 80134cc:	f06f 0305 	mvn.w	r3, #5
 80134d0:	e076      	b.n	80135c0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 80134d2:	f107 0308 	add.w	r3, r7, #8
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80134da:	4a3f      	ldr	r2, [pc, #252]	; (80135d8 <dhcp_parse_reply+0x518>)
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	4413      	add	r3, r2
 80134e0:	2201      	movs	r2, #1
 80134e2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	493e      	ldr	r1, [pc, #248]	; (80135e0 <dhcp_parse_reply+0x520>)
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80134ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f0:	895b      	ldrh	r3, [r3, #10]
 80134f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d323      	bcc.n	8013540 <dhcp_parse_reply+0x480>
      offset -= q->len;
 80134f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fa:	895b      	ldrh	r3, [r3, #10]
 80134fc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8013502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013504:	895b      	ldrh	r3, [r3, #10]
 8013506:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 801350c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801350e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013510:	429a      	cmp	r2, r3
 8013512:	d223      	bcs.n	801355c <dhcp_parse_reply+0x49c>
 8013514:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013516:	2b00      	cmp	r3, #0
 8013518:	d020      	beq.n	801355c <dhcp_parse_reply+0x49c>
        q = q->next;
 801351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013522:	2b00      	cmp	r3, #0
 8013524:	d109      	bne.n	801353a <dhcp_parse_reply+0x47a>
 8013526:	4b28      	ldr	r3, [pc, #160]	; (80135c8 <dhcp_parse_reply+0x508>)
 8013528:	f240 6254 	movw	r2, #1620	; 0x654
 801352c:	492e      	ldr	r1, [pc, #184]	; (80135e8 <dhcp_parse_reply+0x528>)
 801352e:	4828      	ldr	r0, [pc, #160]	; (80135d0 <dhcp_parse_reply+0x510>)
 8013530:	f002 ffcc 	bl	80164cc <iprintf>
 8013534:	f06f 0305 	mvn.w	r3, #5
 8013538:	e042      	b.n	80135c0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013542:	2b00      	cmp	r3, #0
 8013544:	d00a      	beq.n	801355c <dhcp_parse_reply+0x49c>
 8013546:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013548:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801354a:	429a      	cmp	r2, r3
 801354c:	d206      	bcs.n	801355c <dhcp_parse_reply+0x49c>
 801354e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013552:	4413      	add	r3, r2
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	2bff      	cmp	r3, #255	; 0xff
 8013558:	f47f adf6 	bne.w	8013148 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801355c:	4b1e      	ldr	r3, [pc, #120]	; (80135d8 <dhcp_parse_reply+0x518>)
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d018      	beq.n	8013596 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013564:	4b1e      	ldr	r3, [pc, #120]	; (80135e0 <dhcp_parse_reply+0x520>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801356a:	4b1b      	ldr	r3, [pc, #108]	; (80135d8 <dhcp_parse_reply+0x518>)
 801356c:	2200      	movs	r2, #0
 801356e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2b01      	cmp	r3, #1
 8013574:	d102      	bne.n	801357c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8013576:	2301      	movs	r3, #1
 8013578:	627b      	str	r3, [r7, #36]	; 0x24
 801357a:	e00c      	b.n	8013596 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2b02      	cmp	r3, #2
 8013580:	d102      	bne.n	8013588 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8013582:	2301      	movs	r3, #1
 8013584:	623b      	str	r3, [r7, #32]
 8013586:	e006      	b.n	8013596 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2b03      	cmp	r3, #3
 801358c:	d103      	bne.n	8013596 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801358e:	2301      	movs	r3, #1
 8013590:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8013592:	2301      	movs	r3, #1
 8013594:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8013596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013598:	2b00      	cmp	r3, #0
 801359a:	d006      	beq.n	80135aa <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801359c:	2300      	movs	r3, #0
 801359e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 80135a0:	236c      	movs	r3, #108	; 0x6c
 80135a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80135a4:	23ec      	movs	r3, #236	; 0xec
 80135a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80135a8:	e5a8      	b.n	80130fc <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 80135aa:	6a3b      	ldr	r3, [r7, #32]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d006      	beq.n	80135be <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 80135b0:	2300      	movs	r3, #0
 80135b2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80135b4:	232c      	movs	r3, #44	; 0x2c
 80135b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80135b8:	236c      	movs	r3, #108	; 0x6c
 80135ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80135bc:	e59e      	b.n	80130fc <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80135be:	2300      	movs	r3, #0
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3738      	adds	r7, #56	; 0x38
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	08019650 	.word	0x08019650
 80135cc:	080198e8 	.word	0x080198e8
 80135d0:	080196b0 	.word	0x080196b0
 80135d4:	0801992c 	.word	0x0801992c
 80135d8:	2000f778 	.word	0x2000f778
 80135dc:	08019940 	.word	0x08019940
 80135e0:	2000f780 	.word	0x2000f780
 80135e4:	08019958 	.word	0x08019958
 80135e8:	0801996c 	.word	0x0801996c

080135ec <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b08a      	sub	sp, #40	; 0x28
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
 80135f8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80135fa:	4b68      	ldr	r3, [pc, #416]	; (801379c <dhcp_recv+0x1b0>)
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013600:	6a3b      	ldr	r3, [r7, #32]
 8013602:	6a1b      	ldr	r3, [r3, #32]
 8013604:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	2b00      	cmp	r3, #0
 8013610:	f000 80a9 	beq.w	8013766 <dhcp_recv+0x17a>
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	7a1b      	ldrb	r3, [r3, #8]
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 80a4 	beq.w	8013766 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d006      	beq.n	8013634 <dhcp_recv+0x48>
 8013626:	4b5e      	ldr	r3, [pc, #376]	; (80137a0 <dhcp_recv+0x1b4>)
 8013628:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 801362c:	495d      	ldr	r1, [pc, #372]	; (80137a4 <dhcp_recv+0x1b8>)
 801362e:	485e      	ldr	r0, [pc, #376]	; (80137a8 <dhcp_recv+0x1bc>)
 8013630:	f002 ff4c 	bl	80164cc <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	895b      	ldrh	r3, [r3, #10]
 8013638:	2b2b      	cmp	r3, #43	; 0x2b
 801363a:	f240 8096 	bls.w	801376a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801363e:	69bb      	ldr	r3, [r7, #24]
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	2b02      	cmp	r3, #2
 8013644:	f040 8093 	bne.w	801376e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013648:	2300      	movs	r3, #0
 801364a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801364e:	e012      	b.n	8013676 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013654:	6a3a      	ldr	r2, [r7, #32]
 8013656:	4413      	add	r3, r2
 8013658:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013660:	69b9      	ldr	r1, [r7, #24]
 8013662:	440b      	add	r3, r1
 8013664:	7f1b      	ldrb	r3, [r3, #28]
 8013666:	429a      	cmp	r2, r3
 8013668:	f040 8083 	bne.w	8013772 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013670:	3301      	adds	r3, #1
 8013672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013676:	6a3b      	ldr	r3, [r7, #32]
 8013678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801367c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013680:	429a      	cmp	r2, r3
 8013682:	d207      	bcs.n	8013694 <dhcp_recv+0xa8>
 8013684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013688:	2b05      	cmp	r3, #5
 801368a:	d803      	bhi.n	8013694 <dhcp_recv+0xa8>
 801368c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013690:	2b0f      	cmp	r3, #15
 8013692:	d9dd      	bls.n	8013650 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	4618      	mov	r0, r3
 801369a:	f7f7 f83d 	bl	800a718 <lwip_htonl>
 801369e:	4602      	mov	r2, r0
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d166      	bne.n	8013776 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 80136a8:	6879      	ldr	r1, [r7, #4]
 80136aa:	69f8      	ldr	r0, [r7, #28]
 80136ac:	f7ff fd08 	bl	80130c0 <dhcp_parse_reply>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d161      	bne.n	801377a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80136b6:	4b3d      	ldr	r3, [pc, #244]	; (80137ac <dhcp_recv+0x1c0>)
 80136b8:	785b      	ldrb	r3, [r3, #1]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d05f      	beq.n	801377e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80136be:	4b3c      	ldr	r3, [pc, #240]	; (80137b0 <dhcp_recv+0x1c4>)
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
 80136c6:	2b05      	cmp	r3, #5
 80136c8:	d128      	bne.n	801371c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80136ca:	69fb      	ldr	r3, [r7, #28]
 80136cc:	7a5b      	ldrb	r3, [r3, #9]
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d111      	bne.n	80136f6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 80136d2:	6a38      	ldr	r0, [r7, #32]
 80136d4:	f7fe fea0 	bl	8012418 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80136d8:	6a3b      	ldr	r3, [r7, #32]
 80136da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80136de:	f003 0308 	and.w	r3, r3, #8
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d003      	beq.n	80136ee <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80136e6:	6a38      	ldr	r0, [r7, #32]
 80136e8:	f7fe fc68 	bl	8011fbc <dhcp_check>
 80136ec:	e048      	b.n	8013780 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80136ee:	6a38      	ldr	r0, [r7, #32]
 80136f0:	f7ff f8a0 	bl	8012834 <dhcp_bind>
 80136f4:	e044      	b.n	8013780 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	7a5b      	ldrb	r3, [r3, #9]
 80136fa:	2b03      	cmp	r3, #3
 80136fc:	d007      	beq.n	801370e <dhcp_recv+0x122>
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	7a5b      	ldrb	r3, [r3, #9]
 8013702:	2b04      	cmp	r3, #4
 8013704:	d003      	beq.n	801370e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801370a:	2b05      	cmp	r3, #5
 801370c:	d138      	bne.n	8013780 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 801370e:	6a38      	ldr	r0, [r7, #32]
 8013710:	f7fe fe82 	bl	8012418 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013714:	6a38      	ldr	r0, [r7, #32]
 8013716:	f7ff f88d 	bl	8012834 <dhcp_bind>
 801371a:	e031      	b.n	8013780 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801371c:	7dfb      	ldrb	r3, [r7, #23]
 801371e:	2b06      	cmp	r3, #6
 8013720:	d113      	bne.n	801374a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013722:	69fb      	ldr	r3, [r7, #28]
 8013724:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8013726:	2b03      	cmp	r3, #3
 8013728:	d00b      	beq.n	8013742 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801372a:	69fb      	ldr	r3, [r7, #28]
 801372c:	7a5b      	ldrb	r3, [r3, #9]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d007      	beq.n	8013742 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013736:	2b04      	cmp	r3, #4
 8013738:	d003      	beq.n	8013742 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	7a5b      	ldrb	r3, [r3, #9]
 801373e:	2b05      	cmp	r3, #5
 8013740:	d103      	bne.n	801374a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013742:	6a38      	ldr	r0, [r7, #32]
 8013744:	f7fe fc20 	bl	8011f88 <dhcp_handle_nak>
 8013748:	e01a      	b.n	8013780 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801374a:	7dfb      	ldrb	r3, [r7, #23]
 801374c:	2b02      	cmp	r3, #2
 801374e:	d10a      	bne.n	8013766 <dhcp_recv+0x17a>
 8013750:	69fb      	ldr	r3, [r7, #28]
 8013752:	7a5b      	ldrb	r3, [r3, #9]
 8013754:	2b06      	cmp	r3, #6
 8013756:	d106      	bne.n	8013766 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	2200      	movs	r2, #0
 801375c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801375e:	6a38      	ldr	r0, [r7, #32]
 8013760:	f7fe fc60 	bl	8012024 <dhcp_handle_offer>
 8013764:	e00c      	b.n	8013780 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8013766:	bf00      	nop
 8013768:	e00a      	b.n	8013780 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801376a:	bf00      	nop
 801376c:	e008      	b.n	8013780 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801376e:	bf00      	nop
 8013770:	e006      	b.n	8013780 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8013772:	bf00      	nop
 8013774:	e004      	b.n	8013780 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013776:	bf00      	nop
 8013778:	e002      	b.n	8013780 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801377a:	bf00      	nop
 801377c:	e000      	b.n	8013780 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801377e:	bf00      	nop
  if (dhcp != NULL) {
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d002      	beq.n	801378c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	2200      	movs	r2, #0
 801378a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7f8 f98d 	bl	800baac <pbuf_free>
}
 8013792:	bf00      	nop
 8013794:	3728      	adds	r7, #40	; 0x28
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	2000c02c 	.word	0x2000c02c
 80137a0:	08019650 	.word	0x08019650
 80137a4:	0801977c 	.word	0x0801977c
 80137a8:	080196b0 	.word	0x080196b0
 80137ac:	2000f778 	.word	0x2000f778
 80137b0:	2000f780 	.word	0x2000f780

080137b4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80137b4:	b590      	push	{r4, r7, lr}
 80137b6:	b087      	sub	sp, #28
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	4613      	mov	r3, r2
 80137c0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d109      	bne.n	80137dc <dhcp_create_msg+0x28>
 80137c8:	4ba3      	ldr	r3, [pc, #652]	; (8013a58 <dhcp_create_msg+0x2a4>)
 80137ca:	f240 721d 	movw	r2, #1821	; 0x71d
 80137ce:	49a3      	ldr	r1, [pc, #652]	; (8013a5c <dhcp_create_msg+0x2a8>)
 80137d0:	48a3      	ldr	r0, [pc, #652]	; (8013a60 <dhcp_create_msg+0x2ac>)
 80137d2:	f002 fe7b 	bl	80164cc <iprintf>
 80137d6:	f06f 030f 	mvn.w	r3, #15
 80137da:	e138      	b.n	8013a4e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d109      	bne.n	80137f6 <dhcp_create_msg+0x42>
 80137e2:	4b9d      	ldr	r3, [pc, #628]	; (8013a58 <dhcp_create_msg+0x2a4>)
 80137e4:	f240 721e 	movw	r2, #1822	; 0x71e
 80137e8:	499e      	ldr	r1, [pc, #632]	; (8013a64 <dhcp_create_msg+0x2b0>)
 80137ea:	489d      	ldr	r0, [pc, #628]	; (8013a60 <dhcp_create_msg+0x2ac>)
 80137ec:	f002 fe6e 	bl	80164cc <iprintf>
 80137f0:	f06f 0305 	mvn.w	r3, #5
 80137f4:	e12b      	b.n	8013a4e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d006      	beq.n	801380c <dhcp_create_msg+0x58>
 80137fe:	4b96      	ldr	r3, [pc, #600]	; (8013a58 <dhcp_create_msg+0x2a4>)
 8013800:	f240 721f 	movw	r2, #1823	; 0x71f
 8013804:	4998      	ldr	r1, [pc, #608]	; (8013a68 <dhcp_create_msg+0x2b4>)
 8013806:	4896      	ldr	r0, [pc, #600]	; (8013a60 <dhcp_create_msg+0x2ac>)
 8013808:	f002 fe60 	bl	80164cc <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	691b      	ldr	r3, [r3, #16]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d006      	beq.n	8013822 <dhcp_create_msg+0x6e>
 8013814:	4b90      	ldr	r3, [pc, #576]	; (8013a58 <dhcp_create_msg+0x2a4>)
 8013816:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 801381a:	4994      	ldr	r1, [pc, #592]	; (8013a6c <dhcp_create_msg+0x2b8>)
 801381c:	4890      	ldr	r0, [pc, #576]	; (8013a60 <dhcp_create_msg+0x2ac>)
 801381e:	f002 fe55 	bl	80164cc <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013822:	2200      	movs	r2, #0
 8013824:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013828:	2000      	movs	r0, #0
 801382a:	f7f7 fdcd 	bl	800b3c8 <pbuf_alloc>
 801382e:	4602      	mov	r2, r0
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d102      	bne.n	8013842 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801383c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013840:	e105      	b.n	8013a4e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	895b      	ldrh	r3, [r3, #10]
 8013848:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801384c:	d206      	bcs.n	801385c <dhcp_create_msg+0xa8>
 801384e:	4b82      	ldr	r3, [pc, #520]	; (8013a58 <dhcp_create_msg+0x2a4>)
 8013850:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013854:	4986      	ldr	r1, [pc, #536]	; (8013a70 <dhcp_create_msg+0x2bc>)
 8013856:	4882      	ldr	r0, [pc, #520]	; (8013a60 <dhcp_create_msg+0x2ac>)
 8013858:	f002 fe38 	bl	80164cc <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801385c:	79fb      	ldrb	r3, [r7, #7]
 801385e:	2b03      	cmp	r3, #3
 8013860:	d103      	bne.n	801386a <dhcp_create_msg+0xb6>
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	7a5b      	ldrb	r3, [r3, #9]
 8013866:	2b03      	cmp	r3, #3
 8013868:	d10d      	bne.n	8013886 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	7a9b      	ldrb	r3, [r3, #10]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d105      	bne.n	801387e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013872:	f002 fe43 	bl	80164fc <rand>
 8013876:	4603      	mov	r3, r0
 8013878:	461a      	mov	r2, r3
 801387a:	4b7e      	ldr	r3, [pc, #504]	; (8013a74 <dhcp_create_msg+0x2c0>)
 801387c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801387e:	4b7d      	ldr	r3, [pc, #500]	; (8013a74 <dhcp_create_msg+0x2c0>)
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	691b      	ldr	r3, [r3, #16]
 8013894:	2201      	movs	r2, #1
 8013896:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	691b      	ldr	r3, [r3, #16]
 801389c:	2201      	movs	r2, #1
 801389e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	691b      	ldr	r3, [r3, #16]
 80138a4:	68fa      	ldr	r2, [r7, #12]
 80138a6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80138aa:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	691b      	ldr	r3, [r3, #16]
 80138b0:	2200      	movs	r2, #0
 80138b2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	691c      	ldr	r4, [r3, #16]
 80138bc:	4610      	mov	r0, r2
 80138be:	f7f6 ff2b 	bl	800a718 <lwip_htonl>
 80138c2:	4603      	mov	r3, r0
 80138c4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	2200      	movs	r2, #0
 80138cc:	721a      	strb	r2, [r3, #8]
 80138ce:	2200      	movs	r2, #0
 80138d0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	691b      	ldr	r3, [r3, #16]
 80138d6:	2200      	movs	r2, #0
 80138d8:	729a      	strb	r2, [r3, #10]
 80138da:	2200      	movs	r2, #0
 80138dc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	691b      	ldr	r3, [r3, #16]
 80138e2:	2200      	movs	r2, #0
 80138e4:	731a      	strb	r2, [r3, #12]
 80138e6:	2200      	movs	r2, #0
 80138e8:	735a      	strb	r2, [r3, #13]
 80138ea:	2200      	movs	r2, #0
 80138ec:	739a      	strb	r2, [r3, #14]
 80138ee:	2200      	movs	r2, #0
 80138f0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80138f2:	79fb      	ldrb	r3, [r7, #7]
 80138f4:	2b08      	cmp	r3, #8
 80138f6:	d010      	beq.n	801391a <dhcp_create_msg+0x166>
 80138f8:	79fb      	ldrb	r3, [r7, #7]
 80138fa:	2b04      	cmp	r3, #4
 80138fc:	d00d      	beq.n	801391a <dhcp_create_msg+0x166>
 80138fe:	79fb      	ldrb	r3, [r7, #7]
 8013900:	2b07      	cmp	r3, #7
 8013902:	d00a      	beq.n	801391a <dhcp_create_msg+0x166>
 8013904:	79fb      	ldrb	r3, [r7, #7]
 8013906:	2b03      	cmp	r3, #3
 8013908:	d10d      	bne.n	8013926 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801390e:	2b05      	cmp	r3, #5
 8013910:	d003      	beq.n	801391a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	7a5b      	ldrb	r3, [r3, #9]
 8013916:	2b04      	cmp	r3, #4
 8013918:	d105      	bne.n	8013926 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	1d1a      	adds	r2, r3, #4
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	691b      	ldr	r3, [r3, #16]
 8013922:	6812      	ldr	r2, [r2, #0]
 8013924:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	691b      	ldr	r3, [r3, #16]
 801392a:	2200      	movs	r2, #0
 801392c:	741a      	strb	r2, [r3, #16]
 801392e:	2200      	movs	r2, #0
 8013930:	745a      	strb	r2, [r3, #17]
 8013932:	2200      	movs	r2, #0
 8013934:	749a      	strb	r2, [r3, #18]
 8013936:	2200      	movs	r2, #0
 8013938:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801393a:	68bb      	ldr	r3, [r7, #8]
 801393c:	691b      	ldr	r3, [r3, #16]
 801393e:	2200      	movs	r2, #0
 8013940:	751a      	strb	r2, [r3, #20]
 8013942:	2200      	movs	r2, #0
 8013944:	755a      	strb	r2, [r3, #21]
 8013946:	2200      	movs	r2, #0
 8013948:	759a      	strb	r2, [r3, #22]
 801394a:	2200      	movs	r2, #0
 801394c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	2200      	movs	r2, #0
 8013954:	761a      	strb	r2, [r3, #24]
 8013956:	2200      	movs	r2, #0
 8013958:	765a      	strb	r2, [r3, #25]
 801395a:	2200      	movs	r2, #0
 801395c:	769a      	strb	r2, [r3, #26]
 801395e:	2200      	movs	r2, #0
 8013960:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8013962:	2300      	movs	r3, #0
 8013964:	82fb      	strh	r3, [r7, #22]
 8013966:	e019      	b.n	801399c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801396e:	b29b      	uxth	r3, r3
 8013970:	8afa      	ldrh	r2, [r7, #22]
 8013972:	429a      	cmp	r2, r3
 8013974:	d208      	bcs.n	8013988 <dhcp_create_msg+0x1d4>
 8013976:	8afb      	ldrh	r3, [r7, #22]
 8013978:	2b05      	cmp	r3, #5
 801397a:	d805      	bhi.n	8013988 <dhcp_create_msg+0x1d4>
 801397c:	8afb      	ldrh	r3, [r7, #22]
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	4413      	add	r3, r2
 8013982:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8013986:	e000      	b.n	801398a <dhcp_create_msg+0x1d6>
 8013988:	2100      	movs	r1, #0
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	691a      	ldr	r2, [r3, #16]
 801398e:	8afb      	ldrh	r3, [r7, #22]
 8013990:	4413      	add	r3, r2
 8013992:	460a      	mov	r2, r1
 8013994:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8013996:	8afb      	ldrh	r3, [r7, #22]
 8013998:	3301      	adds	r3, #1
 801399a:	82fb      	strh	r3, [r7, #22]
 801399c:	8afb      	ldrh	r3, [r7, #22]
 801399e:	2b0f      	cmp	r3, #15
 80139a0:	d9e2      	bls.n	8013968 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80139a2:	2300      	movs	r3, #0
 80139a4:	82fb      	strh	r3, [r7, #22]
 80139a6:	e009      	b.n	80139bc <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	691a      	ldr	r2, [r3, #16]
 80139ac:	8afb      	ldrh	r3, [r7, #22]
 80139ae:	4413      	add	r3, r2
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80139b6:	8afb      	ldrh	r3, [r7, #22]
 80139b8:	3301      	adds	r3, #1
 80139ba:	82fb      	strh	r3, [r7, #22]
 80139bc:	8afb      	ldrh	r3, [r7, #22]
 80139be:	2b3f      	cmp	r3, #63	; 0x3f
 80139c0:	d9f2      	bls.n	80139a8 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80139c2:	2300      	movs	r3, #0
 80139c4:	82fb      	strh	r3, [r7, #22]
 80139c6:	e009      	b.n	80139dc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	691a      	ldr	r2, [r3, #16]
 80139cc:	8afb      	ldrh	r3, [r7, #22]
 80139ce:	4413      	add	r3, r2
 80139d0:	2200      	movs	r2, #0
 80139d2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80139d6:	8afb      	ldrh	r3, [r7, #22]
 80139d8:	3301      	adds	r3, #1
 80139da:	82fb      	strh	r3, [r7, #22]
 80139dc:	8afb      	ldrh	r3, [r7, #22]
 80139de:	2b7f      	cmp	r3, #127	; 0x7f
 80139e0:	d9f2      	bls.n	80139c8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80139ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80139f0:	2200      	movs	r2, #0
 80139f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80139f6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80139fa:	2200      	movs	r2, #0
 80139fc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013a00:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013a04:	2200      	movs	r2, #0
 8013a06:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013a0a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	2200      	movs	r2, #0
 8013a12:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8013a14:	2300      	movs	r3, #0
 8013a16:	82fb      	strh	r3, [r7, #22]
 8013a18:	e00b      	b.n	8013a32 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	691a      	ldr	r2, [r3, #16]
 8013a1e:	8afb      	ldrh	r3, [r7, #22]
 8013a20:	8af9      	ldrh	r1, [r7, #22]
 8013a22:	b2c9      	uxtb	r1, r1
 8013a24:	4413      	add	r3, r2
 8013a26:	460a      	mov	r2, r1
 8013a28:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8013a2c:	8afb      	ldrh	r3, [r7, #22]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	82fb      	strh	r3, [r7, #22]
 8013a32:	8afb      	ldrh	r3, [r7, #22]
 8013a34:	2b43      	cmp	r3, #67	; 0x43
 8013a36:	d9f0      	bls.n	8013a1a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013a38:	2201      	movs	r2, #1
 8013a3a:	2135      	movs	r1, #53	; 0x35
 8013a3c:	68b8      	ldr	r0, [r7, #8]
 8013a3e:	f7ff fa4d 	bl	8012edc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8013a42:	79fb      	ldrb	r3, [r7, #7]
 8013a44:	4619      	mov	r1, r3
 8013a46:	68b8      	ldr	r0, [r7, #8]
 8013a48:	f7ff fa82 	bl	8012f50 <dhcp_option_byte>
  return ERR_OK;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	371c      	adds	r7, #28
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd90      	pop	{r4, r7, pc}
 8013a56:	bf00      	nop
 8013a58:	08019650 	.word	0x08019650
 8013a5c:	08019980 	.word	0x08019980
 8013a60:	080196b0 	.word	0x080196b0
 8013a64:	080199a0 	.word	0x080199a0
 8013a68:	080199c0 	.word	0x080199c0
 8013a6c:	080199e8 	.word	0x080199e8
 8013a70:	08019a10 	.word	0x08019a10
 8013a74:	20008924 	.word	0x20008924

08013a78 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d107      	bne.n	8013a96 <dhcp_delete_msg+0x1e>
 8013a86:	4b18      	ldr	r3, [pc, #96]	; (8013ae8 <dhcp_delete_msg+0x70>)
 8013a88:	f240 726d 	movw	r2, #1901	; 0x76d
 8013a8c:	4917      	ldr	r1, [pc, #92]	; (8013aec <dhcp_delete_msg+0x74>)
 8013a8e:	4818      	ldr	r0, [pc, #96]	; (8013af0 <dhcp_delete_msg+0x78>)
 8013a90:	f002 fd1c 	bl	80164cc <iprintf>
 8013a94:	e024      	b.n	8013ae0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d106      	bne.n	8013aac <dhcp_delete_msg+0x34>
 8013a9e:	4b12      	ldr	r3, [pc, #72]	; (8013ae8 <dhcp_delete_msg+0x70>)
 8013aa0:	f240 726e 	movw	r2, #1902	; 0x76e
 8013aa4:	4913      	ldr	r1, [pc, #76]	; (8013af4 <dhcp_delete_msg+0x7c>)
 8013aa6:	4812      	ldr	r0, [pc, #72]	; (8013af0 <dhcp_delete_msg+0x78>)
 8013aa8:	f002 fd10 	bl	80164cc <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	691b      	ldr	r3, [r3, #16]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d106      	bne.n	8013ac2 <dhcp_delete_msg+0x4a>
 8013ab4:	4b0c      	ldr	r3, [pc, #48]	; (8013ae8 <dhcp_delete_msg+0x70>)
 8013ab6:	f240 726f 	movw	r2, #1903	; 0x76f
 8013aba:	490f      	ldr	r1, [pc, #60]	; (8013af8 <dhcp_delete_msg+0x80>)
 8013abc:	480c      	ldr	r0, [pc, #48]	; (8013af0 <dhcp_delete_msg+0x78>)
 8013abe:	f002 fd05 	bl	80164cc <iprintf>
  if (dhcp->p_out != NULL) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	68db      	ldr	r3, [r3, #12]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d004      	beq.n	8013ad4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7f7 ffec 	bl	800baac <pbuf_free>
  }
  dhcp->p_out = NULL;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2200      	movs	r2, #0
 8013ade:	611a      	str	r2, [r3, #16]
}
 8013ae0:	3708      	adds	r7, #8
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}
 8013ae6:	bf00      	nop
 8013ae8:	08019650 	.word	0x08019650
 8013aec:	08019a50 	.word	0x08019a50
 8013af0:	080196b0 	.word	0x080196b0
 8013af4:	08019a70 	.word	0x08019a70
 8013af8:	08019a98 	.word	0x08019a98

08013afc <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d107      	bne.n	8013b1a <dhcp_option_trailer+0x1e>
 8013b0a:	4b24      	ldr	r3, [pc, #144]	; (8013b9c <dhcp_option_trailer+0xa0>)
 8013b0c:	f240 7282 	movw	r2, #1922	; 0x782
 8013b10:	4923      	ldr	r1, [pc, #140]	; (8013ba0 <dhcp_option_trailer+0xa4>)
 8013b12:	4824      	ldr	r0, [pc, #144]	; (8013ba4 <dhcp_option_trailer+0xa8>)
 8013b14:	f002 fcda 	bl	80164cc <iprintf>
 8013b18:	e03c      	b.n	8013b94 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	691b      	ldr	r3, [r3, #16]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d106      	bne.n	8013b30 <dhcp_option_trailer+0x34>
 8013b22:	4b1e      	ldr	r3, [pc, #120]	; (8013b9c <dhcp_option_trailer+0xa0>)
 8013b24:	f240 7283 	movw	r2, #1923	; 0x783
 8013b28:	491f      	ldr	r1, [pc, #124]	; (8013ba8 <dhcp_option_trailer+0xac>)
 8013b2a:	481e      	ldr	r0, [pc, #120]	; (8013ba4 <dhcp_option_trailer+0xa8>)
 8013b2c:	f002 fcce 	bl	80164cc <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8a9b      	ldrh	r3, [r3, #20]
 8013b34:	2b43      	cmp	r3, #67	; 0x43
 8013b36:	d906      	bls.n	8013b46 <dhcp_option_trailer+0x4a>
 8013b38:	4b18      	ldr	r3, [pc, #96]	; (8013b9c <dhcp_option_trailer+0xa0>)
 8013b3a:	f240 7284 	movw	r2, #1924	; 0x784
 8013b3e:	491b      	ldr	r1, [pc, #108]	; (8013bac <dhcp_option_trailer+0xb0>)
 8013b40:	4818      	ldr	r0, [pc, #96]	; (8013ba4 <dhcp_option_trailer+0xa8>)
 8013b42:	f002 fcc3 	bl	80164cc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	691a      	ldr	r2, [r3, #16]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8a9b      	ldrh	r3, [r3, #20]
 8013b4e:	1c59      	adds	r1, r3, #1
 8013b50:	b288      	uxth	r0, r1
 8013b52:	6879      	ldr	r1, [r7, #4]
 8013b54:	8288      	strh	r0, [r1, #20]
 8013b56:	4413      	add	r3, r2
 8013b58:	22ff      	movs	r2, #255	; 0xff
 8013b5a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013b5e:	e00b      	b.n	8013b78 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	691a      	ldr	r2, [r3, #16]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	8a9b      	ldrh	r3, [r3, #20]
 8013b68:	1c59      	adds	r1, r3, #1
 8013b6a:	b288      	uxth	r0, r1
 8013b6c:	6879      	ldr	r1, [r7, #4]
 8013b6e:	8288      	strh	r0, [r1, #20]
 8013b70:	4413      	add	r3, r2
 8013b72:	2200      	movs	r2, #0
 8013b74:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	8a9b      	ldrh	r3, [r3, #20]
 8013b7c:	2b43      	cmp	r3, #67	; 0x43
 8013b7e:	d905      	bls.n	8013b8c <dhcp_option_trailer+0x90>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	8a9b      	ldrh	r3, [r3, #20]
 8013b84:	f003 0303 	and.w	r3, r3, #3
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d003      	beq.n	8013b94 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013b90:	2b43      	cmp	r3, #67	; 0x43
 8013b92:	d9e5      	bls.n	8013b60 <dhcp_option_trailer+0x64>
  }
}
 8013b94:	3708      	adds	r7, #8
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	08019650 	.word	0x08019650
 8013ba0:	08019ac0 	.word	0x08019ac0
 8013ba4:	080196b0 	.word	0x080196b0
 8013ba8:	08019ae4 	.word	0x08019ae4
 8013bac:	08019b10 	.word	0x08019b10

08013bb0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b085      	sub	sp, #20
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d017      	beq.n	8013bee <dhcp_supplied_address+0x3e>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a1b      	ldr	r3, [r3, #32]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d013      	beq.n	8013bee <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6a1b      	ldr	r3, [r3, #32]
 8013bca:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	7a5b      	ldrb	r3, [r3, #9]
 8013bd0:	2b0a      	cmp	r3, #10
 8013bd2:	d007      	beq.n	8013be4 <dhcp_supplied_address+0x34>
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	7a5b      	ldrb	r3, [r3, #9]
 8013bd8:	2b05      	cmp	r3, #5
 8013bda:	d003      	beq.n	8013be4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013be0:	2b04      	cmp	r3, #4
 8013be2:	d101      	bne.n	8013be8 <dhcp_supplied_address+0x38>
 8013be4:	2301      	movs	r3, #1
 8013be6:	e000      	b.n	8013bea <dhcp_supplied_address+0x3a>
 8013be8:	2300      	movs	r3, #0
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	e000      	b.n	8013bf0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3714      	adds	r7, #20
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr

08013bfc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013c04:	4915      	ldr	r1, [pc, #84]	; (8013c5c <etharp_free_entry+0x60>)
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	005b      	lsls	r3, r3, #1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	00db      	lsls	r3, r3, #3
 8013c10:	440b      	add	r3, r1
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d013      	beq.n	8013c40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013c18:	4910      	ldr	r1, [pc, #64]	; (8013c5c <etharp_free_entry+0x60>)
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	4613      	mov	r3, r2
 8013c1e:	005b      	lsls	r3, r3, #1
 8013c20:	4413      	add	r3, r2
 8013c22:	00db      	lsls	r3, r3, #3
 8013c24:	440b      	add	r3, r1
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7f7 ff3f 	bl	800baac <pbuf_free>
    arp_table[i].q = NULL;
 8013c2e:	490b      	ldr	r1, [pc, #44]	; (8013c5c <etharp_free_entry+0x60>)
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	4613      	mov	r3, r2
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	4413      	add	r3, r2
 8013c38:	00db      	lsls	r3, r3, #3
 8013c3a:	440b      	add	r3, r1
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013c40:	4906      	ldr	r1, [pc, #24]	; (8013c5c <etharp_free_entry+0x60>)
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	4613      	mov	r3, r2
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	4413      	add	r3, r2
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	440b      	add	r3, r1
 8013c4e:	3314      	adds	r3, #20
 8013c50:	2200      	movs	r2, #0
 8013c52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013c54:	bf00      	nop
 8013c56:	3708      	adds	r7, #8
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	20008928 	.word	0x20008928

08013c60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c66:	2300      	movs	r3, #0
 8013c68:	71fb      	strb	r3, [r7, #7]
 8013c6a:	e096      	b.n	8013d9a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013c6c:	79fa      	ldrb	r2, [r7, #7]
 8013c6e:	494f      	ldr	r1, [pc, #316]	; (8013dac <etharp_tmr+0x14c>)
 8013c70:	4613      	mov	r3, r2
 8013c72:	005b      	lsls	r3, r3, #1
 8013c74:	4413      	add	r3, r2
 8013c76:	00db      	lsls	r3, r3, #3
 8013c78:	440b      	add	r3, r1
 8013c7a:	3314      	adds	r3, #20
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8013c80:	79bb      	ldrb	r3, [r7, #6]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	f000 8086 	beq.w	8013d94 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8013c88:	79fa      	ldrb	r2, [r7, #7]
 8013c8a:	4948      	ldr	r1, [pc, #288]	; (8013dac <etharp_tmr+0x14c>)
 8013c8c:	4613      	mov	r3, r2
 8013c8e:	005b      	lsls	r3, r3, #1
 8013c90:	4413      	add	r3, r2
 8013c92:	00db      	lsls	r3, r3, #3
 8013c94:	440b      	add	r3, r1
 8013c96:	3312      	adds	r3, #18
 8013c98:	881b      	ldrh	r3, [r3, #0]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	b298      	uxth	r0, r3
 8013c9e:	4943      	ldr	r1, [pc, #268]	; (8013dac <etharp_tmr+0x14c>)
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	005b      	lsls	r3, r3, #1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	00db      	lsls	r3, r3, #3
 8013ca8:	440b      	add	r3, r1
 8013caa:	3312      	adds	r3, #18
 8013cac:	4602      	mov	r2, r0
 8013cae:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013cb0:	79fa      	ldrb	r2, [r7, #7]
 8013cb2:	493e      	ldr	r1, [pc, #248]	; (8013dac <etharp_tmr+0x14c>)
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	005b      	lsls	r3, r3, #1
 8013cb8:	4413      	add	r3, r2
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	440b      	add	r3, r1
 8013cbe:	3312      	adds	r3, #18
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013cc6:	d215      	bcs.n	8013cf4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013cc8:	79fa      	ldrb	r2, [r7, #7]
 8013cca:	4938      	ldr	r1, [pc, #224]	; (8013dac <etharp_tmr+0x14c>)
 8013ccc:	4613      	mov	r3, r2
 8013cce:	005b      	lsls	r3, r3, #1
 8013cd0:	4413      	add	r3, r2
 8013cd2:	00db      	lsls	r3, r3, #3
 8013cd4:	440b      	add	r3, r1
 8013cd6:	3314      	adds	r3, #20
 8013cd8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d10f      	bne.n	8013cfe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013cde:	79fa      	ldrb	r2, [r7, #7]
 8013ce0:	4932      	ldr	r1, [pc, #200]	; (8013dac <etharp_tmr+0x14c>)
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	005b      	lsls	r3, r3, #1
 8013ce6:	4413      	add	r3, r2
 8013ce8:	00db      	lsls	r3, r3, #3
 8013cea:	440b      	add	r3, r1
 8013cec:	3312      	adds	r3, #18
 8013cee:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013cf0:	2b04      	cmp	r3, #4
 8013cf2:	d904      	bls.n	8013cfe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013cf4:	79fb      	ldrb	r3, [r7, #7]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff ff80 	bl	8013bfc <etharp_free_entry>
 8013cfc:	e04a      	b.n	8013d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013cfe:	79fa      	ldrb	r2, [r7, #7]
 8013d00:	492a      	ldr	r1, [pc, #168]	; (8013dac <etharp_tmr+0x14c>)
 8013d02:	4613      	mov	r3, r2
 8013d04:	005b      	lsls	r3, r3, #1
 8013d06:	4413      	add	r3, r2
 8013d08:	00db      	lsls	r3, r3, #3
 8013d0a:	440b      	add	r3, r1
 8013d0c:	3314      	adds	r3, #20
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	2b03      	cmp	r3, #3
 8013d12:	d10a      	bne.n	8013d2a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013d14:	79fa      	ldrb	r2, [r7, #7]
 8013d16:	4925      	ldr	r1, [pc, #148]	; (8013dac <etharp_tmr+0x14c>)
 8013d18:	4613      	mov	r3, r2
 8013d1a:	005b      	lsls	r3, r3, #1
 8013d1c:	4413      	add	r3, r2
 8013d1e:	00db      	lsls	r3, r3, #3
 8013d20:	440b      	add	r3, r1
 8013d22:	3314      	adds	r3, #20
 8013d24:	2204      	movs	r2, #4
 8013d26:	701a      	strb	r2, [r3, #0]
 8013d28:	e034      	b.n	8013d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013d2a:	79fa      	ldrb	r2, [r7, #7]
 8013d2c:	491f      	ldr	r1, [pc, #124]	; (8013dac <etharp_tmr+0x14c>)
 8013d2e:	4613      	mov	r3, r2
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	4413      	add	r3, r2
 8013d34:	00db      	lsls	r3, r3, #3
 8013d36:	440b      	add	r3, r1
 8013d38:	3314      	adds	r3, #20
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	2b04      	cmp	r3, #4
 8013d3e:	d10a      	bne.n	8013d56 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013d40:	79fa      	ldrb	r2, [r7, #7]
 8013d42:	491a      	ldr	r1, [pc, #104]	; (8013dac <etharp_tmr+0x14c>)
 8013d44:	4613      	mov	r3, r2
 8013d46:	005b      	lsls	r3, r3, #1
 8013d48:	4413      	add	r3, r2
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	440b      	add	r3, r1
 8013d4e:	3314      	adds	r3, #20
 8013d50:	2202      	movs	r2, #2
 8013d52:	701a      	strb	r2, [r3, #0]
 8013d54:	e01e      	b.n	8013d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013d56:	79fa      	ldrb	r2, [r7, #7]
 8013d58:	4914      	ldr	r1, [pc, #80]	; (8013dac <etharp_tmr+0x14c>)
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	4413      	add	r3, r2
 8013d60:	00db      	lsls	r3, r3, #3
 8013d62:	440b      	add	r3, r1
 8013d64:	3314      	adds	r3, #20
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	2b01      	cmp	r3, #1
 8013d6a:	d113      	bne.n	8013d94 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013d6c:	79fa      	ldrb	r2, [r7, #7]
 8013d6e:	490f      	ldr	r1, [pc, #60]	; (8013dac <etharp_tmr+0x14c>)
 8013d70:	4613      	mov	r3, r2
 8013d72:	005b      	lsls	r3, r3, #1
 8013d74:	4413      	add	r3, r2
 8013d76:	00db      	lsls	r3, r3, #3
 8013d78:	440b      	add	r3, r1
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	6818      	ldr	r0, [r3, #0]
 8013d7e:	79fa      	ldrb	r2, [r7, #7]
 8013d80:	4613      	mov	r3, r2
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	4413      	add	r3, r2
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	4a08      	ldr	r2, [pc, #32]	; (8013dac <etharp_tmr+0x14c>)
 8013d8a:	4413      	add	r3, r2
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	4619      	mov	r1, r3
 8013d90:	f000 fe3c 	bl	8014a0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d94:	79fb      	ldrb	r3, [r7, #7]
 8013d96:	3301      	adds	r3, #1
 8013d98:	71fb      	strb	r3, [r7, #7]
 8013d9a:	79fb      	ldrb	r3, [r7, #7]
 8013d9c:	2b09      	cmp	r3, #9
 8013d9e:	f67f af65 	bls.w	8013c6c <etharp_tmr+0xc>
      }
    }
  }
}
 8013da2:	bf00      	nop
 8013da4:	3708      	adds	r7, #8
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	20008928 	.word	0x20008928

08013db0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b088      	sub	sp, #32
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	460b      	mov	r3, r1
 8013dba:	607a      	str	r2, [r7, #4]
 8013dbc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013dbe:	230a      	movs	r3, #10
 8013dc0:	77fb      	strb	r3, [r7, #31]
 8013dc2:	230a      	movs	r3, #10
 8013dc4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8013dc6:	230a      	movs	r3, #10
 8013dc8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8013dce:	230a      	movs	r3, #10
 8013dd0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	833b      	strh	r3, [r7, #24]
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	82fb      	strh	r3, [r7, #22]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dde:	2300      	movs	r3, #0
 8013de0:	773b      	strb	r3, [r7, #28]
 8013de2:	e093      	b.n	8013f0c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8013de4:	7f3a      	ldrb	r2, [r7, #28]
 8013de6:	4990      	ldr	r1, [pc, #576]	; (8014028 <etharp_find_entry+0x278>)
 8013de8:	4613      	mov	r3, r2
 8013dea:	005b      	lsls	r3, r3, #1
 8013dec:	4413      	add	r3, r2
 8013dee:	00db      	lsls	r3, r3, #3
 8013df0:	440b      	add	r3, r1
 8013df2:	3314      	adds	r3, #20
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013df8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013dfc:	2b0a      	cmp	r3, #10
 8013dfe:	d105      	bne.n	8013e0c <etharp_find_entry+0x5c>
 8013e00:	7cfb      	ldrb	r3, [r7, #19]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d102      	bne.n	8013e0c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8013e06:	7f3b      	ldrb	r3, [r7, #28]
 8013e08:	777b      	strb	r3, [r7, #29]
 8013e0a:	e07c      	b.n	8013f06 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013e0c:	7cfb      	ldrb	r3, [r7, #19]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d079      	beq.n	8013f06 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013e12:	7cfb      	ldrb	r3, [r7, #19]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d009      	beq.n	8013e2c <etharp_find_entry+0x7c>
 8013e18:	7cfb      	ldrb	r3, [r7, #19]
 8013e1a:	2b01      	cmp	r3, #1
 8013e1c:	d806      	bhi.n	8013e2c <etharp_find_entry+0x7c>
 8013e1e:	4b83      	ldr	r3, [pc, #524]	; (801402c <etharp_find_entry+0x27c>)
 8013e20:	f44f 7293 	mov.w	r2, #294	; 0x126
 8013e24:	4982      	ldr	r1, [pc, #520]	; (8014030 <etharp_find_entry+0x280>)
 8013e26:	4883      	ldr	r0, [pc, #524]	; (8014034 <etharp_find_entry+0x284>)
 8013e28:	f002 fb50 	bl	80164cc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d00f      	beq.n	8013e52 <etharp_find_entry+0xa2>
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6819      	ldr	r1, [r3, #0]
 8013e36:	7f3a      	ldrb	r2, [r7, #28]
 8013e38:	487b      	ldr	r0, [pc, #492]	; (8014028 <etharp_find_entry+0x278>)
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	4403      	add	r3, r0
 8013e44:	3304      	adds	r3, #4
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4299      	cmp	r1, r3
 8013e4a:	d102      	bne.n	8013e52 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013e4c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8013e50:	e0e5      	b.n	801401e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013e52:	7cfb      	ldrb	r3, [r7, #19]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d13b      	bne.n	8013ed0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013e58:	7f3a      	ldrb	r2, [r7, #28]
 8013e5a:	4973      	ldr	r1, [pc, #460]	; (8014028 <etharp_find_entry+0x278>)
 8013e5c:	4613      	mov	r3, r2
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	4413      	add	r3, r2
 8013e62:	00db      	lsls	r3, r3, #3
 8013e64:	440b      	add	r3, r1
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d018      	beq.n	8013e9e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8013e6c:	7f3a      	ldrb	r2, [r7, #28]
 8013e6e:	496e      	ldr	r1, [pc, #440]	; (8014028 <etharp_find_entry+0x278>)
 8013e70:	4613      	mov	r3, r2
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	4413      	add	r3, r2
 8013e76:	00db      	lsls	r3, r3, #3
 8013e78:	440b      	add	r3, r1
 8013e7a:	3312      	adds	r3, #18
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	8b3a      	ldrh	r2, [r7, #24]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d840      	bhi.n	8013f06 <etharp_find_entry+0x156>
            old_queue = i;
 8013e84:	7f3b      	ldrb	r3, [r7, #28]
 8013e86:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8013e88:	7f3a      	ldrb	r2, [r7, #28]
 8013e8a:	4967      	ldr	r1, [pc, #412]	; (8014028 <etharp_find_entry+0x278>)
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	440b      	add	r3, r1
 8013e96:	3312      	adds	r3, #18
 8013e98:	881b      	ldrh	r3, [r3, #0]
 8013e9a:	833b      	strh	r3, [r7, #24]
 8013e9c:	e033      	b.n	8013f06 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013e9e:	7f3a      	ldrb	r2, [r7, #28]
 8013ea0:	4961      	ldr	r1, [pc, #388]	; (8014028 <etharp_find_entry+0x278>)
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	4413      	add	r3, r2
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	440b      	add	r3, r1
 8013eac:	3312      	adds	r3, #18
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	8afa      	ldrh	r2, [r7, #22]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d827      	bhi.n	8013f06 <etharp_find_entry+0x156>
            old_pending = i;
 8013eb6:	7f3b      	ldrb	r3, [r7, #28]
 8013eb8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8013eba:	7f3a      	ldrb	r2, [r7, #28]
 8013ebc:	495a      	ldr	r1, [pc, #360]	; (8014028 <etharp_find_entry+0x278>)
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	005b      	lsls	r3, r3, #1
 8013ec2:	4413      	add	r3, r2
 8013ec4:	00db      	lsls	r3, r3, #3
 8013ec6:	440b      	add	r3, r1
 8013ec8:	3312      	adds	r3, #18
 8013eca:	881b      	ldrh	r3, [r3, #0]
 8013ecc:	82fb      	strh	r3, [r7, #22]
 8013ece:	e01a      	b.n	8013f06 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013ed0:	7cfb      	ldrb	r3, [r7, #19]
 8013ed2:	2b01      	cmp	r3, #1
 8013ed4:	d917      	bls.n	8013f06 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013ed6:	7f3a      	ldrb	r2, [r7, #28]
 8013ed8:	4953      	ldr	r1, [pc, #332]	; (8014028 <etharp_find_entry+0x278>)
 8013eda:	4613      	mov	r3, r2
 8013edc:	005b      	lsls	r3, r3, #1
 8013ede:	4413      	add	r3, r2
 8013ee0:	00db      	lsls	r3, r3, #3
 8013ee2:	440b      	add	r3, r1
 8013ee4:	3312      	adds	r3, #18
 8013ee6:	881b      	ldrh	r3, [r3, #0]
 8013ee8:	8aba      	ldrh	r2, [r7, #20]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d80b      	bhi.n	8013f06 <etharp_find_entry+0x156>
            old_stable = i;
 8013eee:	7f3b      	ldrb	r3, [r7, #28]
 8013ef0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8013ef2:	7f3a      	ldrb	r2, [r7, #28]
 8013ef4:	494c      	ldr	r1, [pc, #304]	; (8014028 <etharp_find_entry+0x278>)
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	005b      	lsls	r3, r3, #1
 8013efa:	4413      	add	r3, r2
 8013efc:	00db      	lsls	r3, r3, #3
 8013efe:	440b      	add	r3, r1
 8013f00:	3312      	adds	r3, #18
 8013f02:	881b      	ldrh	r3, [r3, #0]
 8013f04:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f06:	7f3b      	ldrb	r3, [r7, #28]
 8013f08:	3301      	adds	r3, #1
 8013f0a:	773b      	strb	r3, [r7, #28]
 8013f0c:	7f3b      	ldrb	r3, [r7, #28]
 8013f0e:	2b09      	cmp	r3, #9
 8013f10:	f67f af68 	bls.w	8013de4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013f14:	7afb      	ldrb	r3, [r7, #11]
 8013f16:	f003 0302 	and.w	r3, r3, #2
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d108      	bne.n	8013f30 <etharp_find_entry+0x180>
 8013f1e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013f22:	2b0a      	cmp	r3, #10
 8013f24:	d107      	bne.n	8013f36 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013f26:	7afb      	ldrb	r3, [r7, #11]
 8013f28:	f003 0301 	and.w	r3, r3, #1
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d102      	bne.n	8013f36 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8013f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f34:	e073      	b.n	801401e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013f36:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013f3a:	2b09      	cmp	r3, #9
 8013f3c:	dc02      	bgt.n	8013f44 <etharp_find_entry+0x194>
    i = empty;
 8013f3e:	7f7b      	ldrb	r3, [r7, #29]
 8013f40:	773b      	strb	r3, [r7, #28]
 8013f42:	e036      	b.n	8013fb2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013f44:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013f48:	2b09      	cmp	r3, #9
 8013f4a:	dc13      	bgt.n	8013f74 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8013f4c:	7fbb      	ldrb	r3, [r7, #30]
 8013f4e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013f50:	7f3a      	ldrb	r2, [r7, #28]
 8013f52:	4935      	ldr	r1, [pc, #212]	; (8014028 <etharp_find_entry+0x278>)
 8013f54:	4613      	mov	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	4413      	add	r3, r2
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	440b      	add	r3, r1
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d018      	beq.n	8013f96 <etharp_find_entry+0x1e6>
 8013f64:	4b31      	ldr	r3, [pc, #196]	; (801402c <etharp_find_entry+0x27c>)
 8013f66:	f240 126f 	movw	r2, #367	; 0x16f
 8013f6a:	4933      	ldr	r1, [pc, #204]	; (8014038 <etharp_find_entry+0x288>)
 8013f6c:	4831      	ldr	r0, [pc, #196]	; (8014034 <etharp_find_entry+0x284>)
 8013f6e:	f002 faad 	bl	80164cc <iprintf>
 8013f72:	e010      	b.n	8013f96 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013f74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013f78:	2b09      	cmp	r3, #9
 8013f7a:	dc02      	bgt.n	8013f82 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8013f7c:	7ffb      	ldrb	r3, [r7, #31]
 8013f7e:	773b      	strb	r3, [r7, #28]
 8013f80:	e009      	b.n	8013f96 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013f82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013f86:	2b09      	cmp	r3, #9
 8013f88:	dc02      	bgt.n	8013f90 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013f8a:	7efb      	ldrb	r3, [r7, #27]
 8013f8c:	773b      	strb	r3, [r7, #28]
 8013f8e:	e002      	b.n	8013f96 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8013f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f94:	e043      	b.n	801401e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013f96:	7f3b      	ldrb	r3, [r7, #28]
 8013f98:	2b09      	cmp	r3, #9
 8013f9a:	d906      	bls.n	8013faa <etharp_find_entry+0x1fa>
 8013f9c:	4b23      	ldr	r3, [pc, #140]	; (801402c <etharp_find_entry+0x27c>)
 8013f9e:	f240 1281 	movw	r2, #385	; 0x181
 8013fa2:	4926      	ldr	r1, [pc, #152]	; (801403c <etharp_find_entry+0x28c>)
 8013fa4:	4823      	ldr	r0, [pc, #140]	; (8014034 <etharp_find_entry+0x284>)
 8013fa6:	f002 fa91 	bl	80164cc <iprintf>
    etharp_free_entry(i);
 8013faa:	7f3b      	ldrb	r3, [r7, #28]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7ff fe25 	bl	8013bfc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013fb2:	7f3b      	ldrb	r3, [r7, #28]
 8013fb4:	2b09      	cmp	r3, #9
 8013fb6:	d906      	bls.n	8013fc6 <etharp_find_entry+0x216>
 8013fb8:	4b1c      	ldr	r3, [pc, #112]	; (801402c <etharp_find_entry+0x27c>)
 8013fba:	f240 1285 	movw	r2, #389	; 0x185
 8013fbe:	491f      	ldr	r1, [pc, #124]	; (801403c <etharp_find_entry+0x28c>)
 8013fc0:	481c      	ldr	r0, [pc, #112]	; (8014034 <etharp_find_entry+0x284>)
 8013fc2:	f002 fa83 	bl	80164cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013fc6:	7f3a      	ldrb	r2, [r7, #28]
 8013fc8:	4917      	ldr	r1, [pc, #92]	; (8014028 <etharp_find_entry+0x278>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3314      	adds	r3, #20
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d006      	beq.n	8013fea <etharp_find_entry+0x23a>
 8013fdc:	4b13      	ldr	r3, [pc, #76]	; (801402c <etharp_find_entry+0x27c>)
 8013fde:	f240 1287 	movw	r2, #391	; 0x187
 8013fe2:	4917      	ldr	r1, [pc, #92]	; (8014040 <etharp_find_entry+0x290>)
 8013fe4:	4813      	ldr	r0, [pc, #76]	; (8014034 <etharp_find_entry+0x284>)
 8013fe6:	f002 fa71 	bl	80164cc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d00a      	beq.n	8014006 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013ff0:	7f3a      	ldrb	r2, [r7, #28]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6819      	ldr	r1, [r3, #0]
 8013ff6:	480c      	ldr	r0, [pc, #48]	; (8014028 <etharp_find_entry+0x278>)
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	4403      	add	r3, r0
 8014002:	3304      	adds	r3, #4
 8014004:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014006:	7f3a      	ldrb	r2, [r7, #28]
 8014008:	4907      	ldr	r1, [pc, #28]	; (8014028 <etharp_find_entry+0x278>)
 801400a:	4613      	mov	r3, r2
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	4413      	add	r3, r2
 8014010:	00db      	lsls	r3, r3, #3
 8014012:	440b      	add	r3, r1
 8014014:	3312      	adds	r3, #18
 8014016:	2200      	movs	r2, #0
 8014018:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801401a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3720      	adds	r7, #32
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	20008928 	.word	0x20008928
 801402c:	08019b50 	.word	0x08019b50
 8014030:	08019b88 	.word	0x08019b88
 8014034:	08019bc8 	.word	0x08019bc8
 8014038:	08019bf0 	.word	0x08019bf0
 801403c:	08019c08 	.word	0x08019c08
 8014040:	08019c1c 	.word	0x08019c1c

08014044 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b088      	sub	sp, #32
 8014048:	af02      	add	r7, sp, #8
 801404a:	60f8      	str	r0, [r7, #12]
 801404c:	60b9      	str	r1, [r7, #8]
 801404e:	607a      	str	r2, [r7, #4]
 8014050:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014058:	2b06      	cmp	r3, #6
 801405a:	d006      	beq.n	801406a <etharp_update_arp_entry+0x26>
 801405c:	4b48      	ldr	r3, [pc, #288]	; (8014180 <etharp_update_arp_entry+0x13c>)
 801405e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014062:	4948      	ldr	r1, [pc, #288]	; (8014184 <etharp_update_arp_entry+0x140>)
 8014064:	4848      	ldr	r0, [pc, #288]	; (8014188 <etharp_update_arp_entry+0x144>)
 8014066:	f002 fa31 	bl	80164cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801406a:	68bb      	ldr	r3, [r7, #8]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d012      	beq.n	8014096 <etharp_update_arp_entry+0x52>
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00e      	beq.n	8014096 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	68f9      	ldr	r1, [r7, #12]
 801407e:	4618      	mov	r0, r3
 8014080:	f001 f8fc 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014084:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014086:	2b00      	cmp	r3, #0
 8014088:	d105      	bne.n	8014096 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014092:	2be0      	cmp	r3, #224	; 0xe0
 8014094:	d102      	bne.n	801409c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014096:	f06f 030f 	mvn.w	r3, #15
 801409a:	e06c      	b.n	8014176 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801409c:	78fb      	ldrb	r3, [r7, #3]
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	4619      	mov	r1, r3
 80140a2:	68b8      	ldr	r0, [r7, #8]
 80140a4:	f7ff fe84 	bl	8013db0 <etharp_find_entry>
 80140a8:	4603      	mov	r3, r0
 80140aa:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80140ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	da02      	bge.n	80140ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80140b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140b8:	e05d      	b.n	8014176 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80140ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80140be:	4933      	ldr	r1, [pc, #204]	; (801418c <etharp_update_arp_entry+0x148>)
 80140c0:	4613      	mov	r3, r2
 80140c2:	005b      	lsls	r3, r3, #1
 80140c4:	4413      	add	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	440b      	add	r3, r1
 80140ca:	3314      	adds	r3, #20
 80140cc:	2202      	movs	r2, #2
 80140ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80140d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80140d4:	492d      	ldr	r1, [pc, #180]	; (801418c <etharp_update_arp_entry+0x148>)
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	440b      	add	r3, r1
 80140e0:	3308      	adds	r3, #8
 80140e2:	68fa      	ldr	r2, [r7, #12]
 80140e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80140e6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80140ea:	4613      	mov	r3, r2
 80140ec:	005b      	lsls	r3, r3, #1
 80140ee:	4413      	add	r3, r2
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	3308      	adds	r3, #8
 80140f4:	4a25      	ldr	r2, [pc, #148]	; (801418c <etharp_update_arp_entry+0x148>)
 80140f6:	4413      	add	r3, r2
 80140f8:	3304      	adds	r3, #4
 80140fa:	2206      	movs	r2, #6
 80140fc:	6879      	ldr	r1, [r7, #4]
 80140fe:	4618      	mov	r0, r3
 8014100:	f002 f9d1 	bl	80164a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014104:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014108:	4920      	ldr	r1, [pc, #128]	; (801418c <etharp_update_arp_entry+0x148>)
 801410a:	4613      	mov	r3, r2
 801410c:	005b      	lsls	r3, r3, #1
 801410e:	4413      	add	r3, r2
 8014110:	00db      	lsls	r3, r3, #3
 8014112:	440b      	add	r3, r1
 8014114:	3312      	adds	r3, #18
 8014116:	2200      	movs	r2, #0
 8014118:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801411a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801411e:	491b      	ldr	r1, [pc, #108]	; (801418c <etharp_update_arp_entry+0x148>)
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	440b      	add	r3, r1
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d021      	beq.n	8014174 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014130:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014134:	4915      	ldr	r1, [pc, #84]	; (801418c <etharp_update_arp_entry+0x148>)
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014144:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014148:	4910      	ldr	r1, [pc, #64]	; (801418c <etharp_update_arp_entry+0x148>)
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801415e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014162:	9300      	str	r3, [sp, #0]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6939      	ldr	r1, [r7, #16]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f001 ff29 	bl	8015fc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801416e:	6938      	ldr	r0, [r7, #16]
 8014170:	f7f7 fc9c 	bl	800baac <pbuf_free>
  }
  return ERR_OK;
 8014174:	2300      	movs	r3, #0
}
 8014176:	4618      	mov	r0, r3
 8014178:	3718      	adds	r7, #24
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	08019b50 	.word	0x08019b50
 8014184:	08019c48 	.word	0x08019c48
 8014188:	08019bc8 	.word	0x08019bc8
 801418c:	20008928 	.word	0x20008928

08014190 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b084      	sub	sp, #16
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014198:	2300      	movs	r3, #0
 801419a:	73fb      	strb	r3, [r7, #15]
 801419c:	e01f      	b.n	80141de <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801419e:	7bfa      	ldrb	r2, [r7, #15]
 80141a0:	4912      	ldr	r1, [pc, #72]	; (80141ec <etharp_cleanup_netif+0x5c>)
 80141a2:	4613      	mov	r3, r2
 80141a4:	005b      	lsls	r3, r3, #1
 80141a6:	4413      	add	r3, r2
 80141a8:	00db      	lsls	r3, r3, #3
 80141aa:	440b      	add	r3, r1
 80141ac:	3314      	adds	r3, #20
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80141b2:	7bbb      	ldrb	r3, [r7, #14]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d00f      	beq.n	80141d8 <etharp_cleanup_netif+0x48>
 80141b8:	7bfa      	ldrb	r2, [r7, #15]
 80141ba:	490c      	ldr	r1, [pc, #48]	; (80141ec <etharp_cleanup_netif+0x5c>)
 80141bc:	4613      	mov	r3, r2
 80141be:	005b      	lsls	r3, r3, #1
 80141c0:	4413      	add	r3, r2
 80141c2:	00db      	lsls	r3, r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	3308      	adds	r3, #8
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	687a      	ldr	r2, [r7, #4]
 80141cc:	429a      	cmp	r2, r3
 80141ce:	d103      	bne.n	80141d8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80141d0:	7bfb      	ldrb	r3, [r7, #15]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7ff fd12 	bl	8013bfc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141d8:	7bfb      	ldrb	r3, [r7, #15]
 80141da:	3301      	adds	r3, #1
 80141dc:	73fb      	strb	r3, [r7, #15]
 80141de:	7bfb      	ldrb	r3, [r7, #15]
 80141e0:	2b09      	cmp	r3, #9
 80141e2:	d9dc      	bls.n	801419e <etharp_cleanup_netif+0xe>
    }
  }
}
 80141e4:	bf00      	nop
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	20008928 	.word	0x20008928

080141f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80141f0:	b5b0      	push	{r4, r5, r7, lr}
 80141f2:	b08a      	sub	sp, #40	; 0x28
 80141f4:	af04      	add	r7, sp, #16
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d107      	bne.n	8014210 <etharp_input+0x20>
 8014200:	4b3f      	ldr	r3, [pc, #252]	; (8014300 <etharp_input+0x110>)
 8014202:	f44f 7222 	mov.w	r2, #648	; 0x288
 8014206:	493f      	ldr	r1, [pc, #252]	; (8014304 <etharp_input+0x114>)
 8014208:	483f      	ldr	r0, [pc, #252]	; (8014308 <etharp_input+0x118>)
 801420a:	f002 f95f 	bl	80164cc <iprintf>
 801420e:	e074      	b.n	80142fa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	881b      	ldrh	r3, [r3, #0]
 801421a:	b29b      	uxth	r3, r3
 801421c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014220:	d10c      	bne.n	801423c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8014226:	2b06      	cmp	r3, #6
 8014228:	d108      	bne.n	801423c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801422e:	2b04      	cmp	r3, #4
 8014230:	d104      	bne.n	801423c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	885b      	ldrh	r3, [r3, #2]
 8014236:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014238:	2b08      	cmp	r3, #8
 801423a:	d003      	beq.n	8014244 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7f7 fc35 	bl	800baac <pbuf_free>
    return;
 8014242:	e05a      	b.n	80142fa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	330e      	adds	r3, #14
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	3318      	adds	r3, #24
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	3304      	adds	r3, #4
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d102      	bne.n	8014264 <etharp_input+0x74>
    for_us = 0;
 801425e:	2300      	movs	r3, #0
 8014260:	75fb      	strb	r3, [r7, #23]
 8014262:	e009      	b.n	8014278 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014264:	68ba      	ldr	r2, [r7, #8]
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	3304      	adds	r3, #4
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	429a      	cmp	r2, r3
 801426e:	bf0c      	ite	eq
 8014270:	2301      	moveq	r3, #1
 8014272:	2300      	movne	r3, #0
 8014274:	b2db      	uxtb	r3, r3
 8014276:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	f103 0208 	add.w	r2, r3, #8
 801427e:	7dfb      	ldrb	r3, [r7, #23]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d001      	beq.n	8014288 <etharp_input+0x98>
 8014284:	2301      	movs	r3, #1
 8014286:	e000      	b.n	801428a <etharp_input+0x9a>
 8014288:	2302      	movs	r3, #2
 801428a:	f107 010c 	add.w	r1, r7, #12
 801428e:	6838      	ldr	r0, [r7, #0]
 8014290:	f7ff fed8 	bl	8014044 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	88db      	ldrh	r3, [r3, #6]
 8014298:	b29b      	uxth	r3, r3
 801429a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801429e:	d003      	beq.n	80142a8 <etharp_input+0xb8>
 80142a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80142a4:	d01e      	beq.n	80142e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80142a6:	e025      	b.n	80142f4 <etharp_input+0x104>
    if (for_us) {
 80142a8:	7dfb      	ldrb	r3, [r7, #23]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d021      	beq.n	80142f2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80142ba:	683b      	ldr	r3, [r7, #0]
 80142bc:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80142c4:	693a      	ldr	r2, [r7, #16]
 80142c6:	3208      	adds	r2, #8
      etharp_raw(netif,
 80142c8:	2102      	movs	r1, #2
 80142ca:	9103      	str	r1, [sp, #12]
 80142cc:	f107 010c 	add.w	r1, r7, #12
 80142d0:	9102      	str	r1, [sp, #8]
 80142d2:	9201      	str	r2, [sp, #4]
 80142d4:	9300      	str	r3, [sp, #0]
 80142d6:	462b      	mov	r3, r5
 80142d8:	4622      	mov	r2, r4
 80142da:	4601      	mov	r1, r0
 80142dc:	6838      	ldr	r0, [r7, #0]
 80142de:	f000 fae7 	bl	80148b0 <etharp_raw>
    break;
 80142e2:	e006      	b.n	80142f2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80142e4:	f107 030c 	add.w	r3, r7, #12
 80142e8:	4619      	mov	r1, r3
 80142ea:	6838      	ldr	r0, [r7, #0]
 80142ec:	f7fe f980 	bl	80125f0 <dhcp_arp_reply>
    break;
 80142f0:	e000      	b.n	80142f4 <etharp_input+0x104>
    break;
 80142f2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7f7 fbd9 	bl	800baac <pbuf_free>
}
 80142fa:	3718      	adds	r7, #24
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014300:	08019b50 	.word	0x08019b50
 8014304:	08019ca0 	.word	0x08019ca0
 8014308:	08019bc8 	.word	0x08019bc8

0801430c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b086      	sub	sp, #24
 8014310:	af02      	add	r7, sp, #8
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	4613      	mov	r3, r2
 8014318:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801431a:	79fa      	ldrb	r2, [r7, #7]
 801431c:	4944      	ldr	r1, [pc, #272]	; (8014430 <etharp_output_to_arp_index+0x124>)
 801431e:	4613      	mov	r3, r2
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	4413      	add	r3, r2
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	440b      	add	r3, r1
 8014328:	3314      	adds	r3, #20
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d806      	bhi.n	801433e <etharp_output_to_arp_index+0x32>
 8014330:	4b40      	ldr	r3, [pc, #256]	; (8014434 <etharp_output_to_arp_index+0x128>)
 8014332:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014336:	4940      	ldr	r1, [pc, #256]	; (8014438 <etharp_output_to_arp_index+0x12c>)
 8014338:	4840      	ldr	r0, [pc, #256]	; (801443c <etharp_output_to_arp_index+0x130>)
 801433a:	f002 f8c7 	bl	80164cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801433e:	79fa      	ldrb	r2, [r7, #7]
 8014340:	493b      	ldr	r1, [pc, #236]	; (8014430 <etharp_output_to_arp_index+0x124>)
 8014342:	4613      	mov	r3, r2
 8014344:	005b      	lsls	r3, r3, #1
 8014346:	4413      	add	r3, r2
 8014348:	00db      	lsls	r3, r3, #3
 801434a:	440b      	add	r3, r1
 801434c:	3314      	adds	r3, #20
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b02      	cmp	r3, #2
 8014352:	d153      	bne.n	80143fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014354:	79fa      	ldrb	r2, [r7, #7]
 8014356:	4936      	ldr	r1, [pc, #216]	; (8014430 <etharp_output_to_arp_index+0x124>)
 8014358:	4613      	mov	r3, r2
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	4413      	add	r3, r2
 801435e:	00db      	lsls	r3, r3, #3
 8014360:	440b      	add	r3, r1
 8014362:	3312      	adds	r3, #18
 8014364:	881b      	ldrh	r3, [r3, #0]
 8014366:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801436a:	d919      	bls.n	80143a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801436c:	79fa      	ldrb	r2, [r7, #7]
 801436e:	4613      	mov	r3, r2
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	4413      	add	r3, r2
 8014374:	00db      	lsls	r3, r3, #3
 8014376:	4a2e      	ldr	r2, [pc, #184]	; (8014430 <etharp_output_to_arp_index+0x124>)
 8014378:	4413      	add	r3, r2
 801437a:	3304      	adds	r3, #4
 801437c:	4619      	mov	r1, r3
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f000 fb44 	bl	8014a0c <etharp_request>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d138      	bne.n	80143fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801438a:	79fa      	ldrb	r2, [r7, #7]
 801438c:	4928      	ldr	r1, [pc, #160]	; (8014430 <etharp_output_to_arp_index+0x124>)
 801438e:	4613      	mov	r3, r2
 8014390:	005b      	lsls	r3, r3, #1
 8014392:	4413      	add	r3, r2
 8014394:	00db      	lsls	r3, r3, #3
 8014396:	440b      	add	r3, r1
 8014398:	3314      	adds	r3, #20
 801439a:	2203      	movs	r2, #3
 801439c:	701a      	strb	r2, [r3, #0]
 801439e:	e02d      	b.n	80143fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80143a0:	79fa      	ldrb	r2, [r7, #7]
 80143a2:	4923      	ldr	r1, [pc, #140]	; (8014430 <etharp_output_to_arp_index+0x124>)
 80143a4:	4613      	mov	r3, r2
 80143a6:	005b      	lsls	r3, r3, #1
 80143a8:	4413      	add	r3, r2
 80143aa:	00db      	lsls	r3, r3, #3
 80143ac:	440b      	add	r3, r1
 80143ae:	3312      	adds	r3, #18
 80143b0:	881b      	ldrh	r3, [r3, #0]
 80143b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80143b6:	d321      	bcc.n	80143fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80143b8:	79fa      	ldrb	r2, [r7, #7]
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	4a1b      	ldr	r2, [pc, #108]	; (8014430 <etharp_output_to_arp_index+0x124>)
 80143c4:	4413      	add	r3, r2
 80143c6:	1d19      	adds	r1, r3, #4
 80143c8:	79fa      	ldrb	r2, [r7, #7]
 80143ca:	4613      	mov	r3, r2
 80143cc:	005b      	lsls	r3, r3, #1
 80143ce:	4413      	add	r3, r2
 80143d0:	00db      	lsls	r3, r3, #3
 80143d2:	3308      	adds	r3, #8
 80143d4:	4a16      	ldr	r2, [pc, #88]	; (8014430 <etharp_output_to_arp_index+0x124>)
 80143d6:	4413      	add	r3, r2
 80143d8:	3304      	adds	r3, #4
 80143da:	461a      	mov	r2, r3
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f000 faf3 	bl	80149c8 <etharp_request_dst>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80143e8:	79fa      	ldrb	r2, [r7, #7]
 80143ea:	4911      	ldr	r1, [pc, #68]	; (8014430 <etharp_output_to_arp_index+0x124>)
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	440b      	add	r3, r1
 80143f6:	3314      	adds	r3, #20
 80143f8:	2203      	movs	r2, #3
 80143fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8014402:	79fa      	ldrb	r2, [r7, #7]
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	3308      	adds	r3, #8
 801440e:	4a08      	ldr	r2, [pc, #32]	; (8014430 <etharp_output_to_arp_index+0x124>)
 8014410:	4413      	add	r3, r2
 8014412:	1d1a      	adds	r2, r3, #4
 8014414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014418:	9300      	str	r3, [sp, #0]
 801441a:	4613      	mov	r3, r2
 801441c:	460a      	mov	r2, r1
 801441e:	68b9      	ldr	r1, [r7, #8]
 8014420:	68f8      	ldr	r0, [r7, #12]
 8014422:	f001 fdcd 	bl	8015fc0 <ethernet_output>
 8014426:	4603      	mov	r3, r0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	20008928 	.word	0x20008928
 8014434:	08019b50 	.word	0x08019b50
 8014438:	08019cc0 	.word	0x08019cc0
 801443c:	08019bc8 	.word	0x08019bc8

08014440 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b08a      	sub	sp, #40	; 0x28
 8014444:	af02      	add	r7, sp, #8
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d106      	bne.n	8014464 <etharp_output+0x24>
 8014456:	4b69      	ldr	r3, [pc, #420]	; (80145fc <etharp_output+0x1bc>)
 8014458:	f240 321b 	movw	r2, #795	; 0x31b
 801445c:	4968      	ldr	r1, [pc, #416]	; (8014600 <etharp_output+0x1c0>)
 801445e:	4869      	ldr	r0, [pc, #420]	; (8014604 <etharp_output+0x1c4>)
 8014460:	f002 f834 	bl	80164cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d106      	bne.n	8014478 <etharp_output+0x38>
 801446a:	4b64      	ldr	r3, [pc, #400]	; (80145fc <etharp_output+0x1bc>)
 801446c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014470:	4965      	ldr	r1, [pc, #404]	; (8014608 <etharp_output+0x1c8>)
 8014472:	4864      	ldr	r0, [pc, #400]	; (8014604 <etharp_output+0x1c4>)
 8014474:	f002 f82a 	bl	80164cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d106      	bne.n	801448c <etharp_output+0x4c>
 801447e:	4b5f      	ldr	r3, [pc, #380]	; (80145fc <etharp_output+0x1bc>)
 8014480:	f240 321d 	movw	r2, #797	; 0x31d
 8014484:	4961      	ldr	r1, [pc, #388]	; (801460c <etharp_output+0x1cc>)
 8014486:	485f      	ldr	r0, [pc, #380]	; (8014604 <etharp_output+0x1c4>)
 8014488:	f002 f820 	bl	80164cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	68f9      	ldr	r1, [r7, #12]
 8014492:	4618      	mov	r0, r3
 8014494:	f000 fef2 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d002      	beq.n	80144a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801449e:	4b5c      	ldr	r3, [pc, #368]	; (8014610 <etharp_output+0x1d0>)
 80144a0:	61fb      	str	r3, [r7, #28]
 80144a2:	e09b      	b.n	80145dc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144ac:	2be0      	cmp	r3, #224	; 0xe0
 80144ae:	d118      	bne.n	80144e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80144b0:	2301      	movs	r3, #1
 80144b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80144b4:	2300      	movs	r3, #0
 80144b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80144b8:	235e      	movs	r3, #94	; 0x5e
 80144ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3301      	adds	r3, #1
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	3302      	adds	r3, #2
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	3303      	adds	r3, #3
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80144da:	f107 0310 	add.w	r3, r7, #16
 80144de:	61fb      	str	r3, [r7, #28]
 80144e0:	e07c      	b.n	80145dc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	3304      	adds	r3, #4
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	405a      	eors	r2, r3
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	3308      	adds	r3, #8
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4013      	ands	r3, r2
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d012      	beq.n	8014520 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014500:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014504:	4293      	cmp	r3, r2
 8014506:	d00b      	beq.n	8014520 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	330c      	adds	r3, #12
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d003      	beq.n	801451a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	330c      	adds	r3, #12
 8014516:	61bb      	str	r3, [r7, #24]
 8014518:	e002      	b.n	8014520 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801451a:	f06f 0303 	mvn.w	r3, #3
 801451e:	e069      	b.n	80145f4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014520:	4b3c      	ldr	r3, [pc, #240]	; (8014614 <etharp_output+0x1d4>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	4619      	mov	r1, r3
 8014526:	4a3c      	ldr	r2, [pc, #240]	; (8014618 <etharp_output+0x1d8>)
 8014528:	460b      	mov	r3, r1
 801452a:	005b      	lsls	r3, r3, #1
 801452c:	440b      	add	r3, r1
 801452e:	00db      	lsls	r3, r3, #3
 8014530:	4413      	add	r3, r2
 8014532:	3314      	adds	r3, #20
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	2b01      	cmp	r3, #1
 8014538:	d917      	bls.n	801456a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	681a      	ldr	r2, [r3, #0]
 801453e:	4b35      	ldr	r3, [pc, #212]	; (8014614 <etharp_output+0x1d4>)
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	4618      	mov	r0, r3
 8014544:	4934      	ldr	r1, [pc, #208]	; (8014618 <etharp_output+0x1d8>)
 8014546:	4603      	mov	r3, r0
 8014548:	005b      	lsls	r3, r3, #1
 801454a:	4403      	add	r3, r0
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	440b      	add	r3, r1
 8014550:	3304      	adds	r3, #4
 8014552:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014554:	429a      	cmp	r2, r3
 8014556:	d108      	bne.n	801456a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014558:	4b2e      	ldr	r3, [pc, #184]	; (8014614 <etharp_output+0x1d4>)
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	461a      	mov	r2, r3
 801455e:	68b9      	ldr	r1, [r7, #8]
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f7ff fed3 	bl	801430c <etharp_output_to_arp_index>
 8014566:	4603      	mov	r3, r0
 8014568:	e044      	b.n	80145f4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801456a:	2300      	movs	r3, #0
 801456c:	75fb      	strb	r3, [r7, #23]
 801456e:	e02a      	b.n	80145c6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014570:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014574:	4928      	ldr	r1, [pc, #160]	; (8014618 <etharp_output+0x1d8>)
 8014576:	4613      	mov	r3, r2
 8014578:	005b      	lsls	r3, r3, #1
 801457a:	4413      	add	r3, r2
 801457c:	00db      	lsls	r3, r3, #3
 801457e:	440b      	add	r3, r1
 8014580:	3314      	adds	r3, #20
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d918      	bls.n	80145ba <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	6819      	ldr	r1, [r3, #0]
 801458c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014590:	4821      	ldr	r0, [pc, #132]	; (8014618 <etharp_output+0x1d8>)
 8014592:	4613      	mov	r3, r2
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	4413      	add	r3, r2
 8014598:	00db      	lsls	r3, r3, #3
 801459a:	4403      	add	r3, r0
 801459c:	3304      	adds	r3, #4
 801459e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80145a0:	4299      	cmp	r1, r3
 80145a2:	d10a      	bne.n	80145ba <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80145a4:	7dfa      	ldrb	r2, [r7, #23]
 80145a6:	4b1b      	ldr	r3, [pc, #108]	; (8014614 <etharp_output+0x1d4>)
 80145a8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80145aa:	7dfb      	ldrb	r3, [r7, #23]
 80145ac:	461a      	mov	r2, r3
 80145ae:	68b9      	ldr	r1, [r7, #8]
 80145b0:	68f8      	ldr	r0, [r7, #12]
 80145b2:	f7ff feab 	bl	801430c <etharp_output_to_arp_index>
 80145b6:	4603      	mov	r3, r0
 80145b8:	e01c      	b.n	80145f4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80145ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	3301      	adds	r3, #1
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	75fb      	strb	r3, [r7, #23]
 80145c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145ca:	2b09      	cmp	r3, #9
 80145cc:	ddd0      	ble.n	8014570 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80145ce:	68ba      	ldr	r2, [r7, #8]
 80145d0:	69b9      	ldr	r1, [r7, #24]
 80145d2:	68f8      	ldr	r0, [r7, #12]
 80145d4:	f000 f822 	bl	801461c <etharp_query>
 80145d8:	4603      	mov	r3, r0
 80145da:	e00b      	b.n	80145f4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80145e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	68b9      	ldr	r1, [r7, #8]
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f001 fce7 	bl	8015fc0 <ethernet_output>
 80145f2:	4603      	mov	r3, r0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3720      	adds	r7, #32
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	08019b50 	.word	0x08019b50
 8014600:	08019ca0 	.word	0x08019ca0
 8014604:	08019bc8 	.word	0x08019bc8
 8014608:	08019cf0 	.word	0x08019cf0
 801460c:	08019c90 	.word	0x08019c90
 8014610:	080256e0 	.word	0x080256e0
 8014614:	20008a18 	.word	0x20008a18
 8014618:	20008928 	.word	0x20008928

0801461c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b08c      	sub	sp, #48	; 0x30
 8014620:	af02      	add	r7, sp, #8
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	3329      	adds	r3, #41	; 0x29
 801462c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801462e:	23ff      	movs	r3, #255	; 0xff
 8014630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014634:	2300      	movs	r3, #0
 8014636:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	68f9      	ldr	r1, [r7, #12]
 801463e:	4618      	mov	r0, r3
 8014640:	f000 fe1c 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014644:	4603      	mov	r3, r0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d10c      	bne.n	8014664 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014652:	2be0      	cmp	r3, #224	; 0xe0
 8014654:	d006      	beq.n	8014664 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d003      	beq.n	8014664 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d102      	bne.n	801466a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014664:	f06f 030f 	mvn.w	r3, #15
 8014668:	e10f      	b.n	801488a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801466a:	68fa      	ldr	r2, [r7, #12]
 801466c:	2101      	movs	r1, #1
 801466e:	68b8      	ldr	r0, [r7, #8]
 8014670:	f7ff fb9e 	bl	8013db0 <etharp_find_entry>
 8014674:	4603      	mov	r3, r0
 8014676:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8014678:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801467c:	2b00      	cmp	r3, #0
 801467e:	da02      	bge.n	8014686 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8014680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014684:	e101      	b.n	801488a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014686:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801468a:	4982      	ldr	r1, [pc, #520]	; (8014894 <etharp_query+0x278>)
 801468c:	4613      	mov	r3, r2
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	4413      	add	r3, r2
 8014692:	00db      	lsls	r3, r3, #3
 8014694:	440b      	add	r3, r1
 8014696:	3314      	adds	r3, #20
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d117      	bne.n	80146ce <etharp_query+0xb2>
    is_new_entry = 1;
 801469e:	2301      	movs	r3, #1
 80146a0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80146a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80146a6:	497b      	ldr	r1, [pc, #492]	; (8014894 <etharp_query+0x278>)
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	440b      	add	r3, r1
 80146b2:	3314      	adds	r3, #20
 80146b4:	2201      	movs	r2, #1
 80146b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80146b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80146bc:	4975      	ldr	r1, [pc, #468]	; (8014894 <etharp_query+0x278>)
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	3308      	adds	r3, #8
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80146ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80146d2:	4970      	ldr	r1, [pc, #448]	; (8014894 <etharp_query+0x278>)
 80146d4:	4613      	mov	r3, r2
 80146d6:	005b      	lsls	r3, r3, #1
 80146d8:	4413      	add	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	440b      	add	r3, r1
 80146de:	3314      	adds	r3, #20
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d012      	beq.n	801470c <etharp_query+0xf0>
 80146e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80146ea:	496a      	ldr	r1, [pc, #424]	; (8014894 <etharp_query+0x278>)
 80146ec:	4613      	mov	r3, r2
 80146ee:	005b      	lsls	r3, r3, #1
 80146f0:	4413      	add	r3, r2
 80146f2:	00db      	lsls	r3, r3, #3
 80146f4:	440b      	add	r3, r1
 80146f6:	3314      	adds	r3, #20
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	2b01      	cmp	r3, #1
 80146fc:	d806      	bhi.n	801470c <etharp_query+0xf0>
 80146fe:	4b66      	ldr	r3, [pc, #408]	; (8014898 <etharp_query+0x27c>)
 8014700:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014704:	4965      	ldr	r1, [pc, #404]	; (801489c <etharp_query+0x280>)
 8014706:	4866      	ldr	r0, [pc, #408]	; (80148a0 <etharp_query+0x284>)
 8014708:	f001 fee0 	bl	80164cc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801470c:	6a3b      	ldr	r3, [r7, #32]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d102      	bne.n	8014718 <etharp_query+0xfc>
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d10c      	bne.n	8014732 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014718:	68b9      	ldr	r1, [r7, #8]
 801471a:	68f8      	ldr	r0, [r7, #12]
 801471c:	f000 f976 	bl	8014a0c <etharp_request>
 8014720:	4603      	mov	r3, r0
 8014722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d102      	bne.n	8014732 <etharp_query+0x116>
      return result;
 801472c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014730:	e0ab      	b.n	801488a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d106      	bne.n	8014746 <etharp_query+0x12a>
 8014738:	4b57      	ldr	r3, [pc, #348]	; (8014898 <etharp_query+0x27c>)
 801473a:	f240 32db 	movw	r2, #987	; 0x3db
 801473e:	4959      	ldr	r1, [pc, #356]	; (80148a4 <etharp_query+0x288>)
 8014740:	4857      	ldr	r0, [pc, #348]	; (80148a0 <etharp_query+0x284>)
 8014742:	f001 fec3 	bl	80164cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014746:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801474a:	4952      	ldr	r1, [pc, #328]	; (8014894 <etharp_query+0x278>)
 801474c:	4613      	mov	r3, r2
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	4413      	add	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	440b      	add	r3, r1
 8014756:	3314      	adds	r3, #20
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	2b01      	cmp	r3, #1
 801475c:	d919      	bls.n	8014792 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801475e:	7cfa      	ldrb	r2, [r7, #19]
 8014760:	4b51      	ldr	r3, [pc, #324]	; (80148a8 <etharp_query+0x28c>)
 8014762:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014764:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014768:	4613      	mov	r3, r2
 801476a:	005b      	lsls	r3, r3, #1
 801476c:	4413      	add	r3, r2
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	3308      	adds	r3, #8
 8014772:	4a48      	ldr	r2, [pc, #288]	; (8014894 <etharp_query+0x278>)
 8014774:	4413      	add	r3, r2
 8014776:	1d1a      	adds	r2, r3, #4
 8014778:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801477c:	9300      	str	r3, [sp, #0]
 801477e:	4613      	mov	r3, r2
 8014780:	697a      	ldr	r2, [r7, #20]
 8014782:	6879      	ldr	r1, [r7, #4]
 8014784:	68f8      	ldr	r0, [r7, #12]
 8014786:	f001 fc1b 	bl	8015fc0 <ethernet_output>
 801478a:	4603      	mov	r3, r0
 801478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014790:	e079      	b.n	8014886 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014792:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014796:	493f      	ldr	r1, [pc, #252]	; (8014894 <etharp_query+0x278>)
 8014798:	4613      	mov	r3, r2
 801479a:	005b      	lsls	r3, r3, #1
 801479c:	4413      	add	r3, r2
 801479e:	00db      	lsls	r3, r3, #3
 80147a0:	440b      	add	r3, r1
 80147a2:	3314      	adds	r3, #20
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d16d      	bne.n	8014886 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80147aa:	2300      	movs	r3, #0
 80147ac:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80147b2:	e01a      	b.n	80147ea <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80147b4:	69fb      	ldr	r3, [r7, #28]
 80147b6:	895a      	ldrh	r2, [r3, #10]
 80147b8:	69fb      	ldr	r3, [r7, #28]
 80147ba:	891b      	ldrh	r3, [r3, #8]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d10a      	bne.n	80147d6 <etharp_query+0x1ba>
 80147c0:	69fb      	ldr	r3, [r7, #28]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d006      	beq.n	80147d6 <etharp_query+0x1ba>
 80147c8:	4b33      	ldr	r3, [pc, #204]	; (8014898 <etharp_query+0x27c>)
 80147ca:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80147ce:	4937      	ldr	r1, [pc, #220]	; (80148ac <etharp_query+0x290>)
 80147d0:	4833      	ldr	r0, [pc, #204]	; (80148a0 <etharp_query+0x284>)
 80147d2:	f001 fe7b 	bl	80164cc <iprintf>
      if (p->type != PBUF_ROM) {
 80147d6:	69fb      	ldr	r3, [r7, #28]
 80147d8:	7b1b      	ldrb	r3, [r3, #12]
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d002      	beq.n	80147e4 <etharp_query+0x1c8>
        copy_needed = 1;
 80147de:	2301      	movs	r3, #1
 80147e0:	61bb      	str	r3, [r7, #24]
        break;
 80147e2:	e005      	b.n	80147f0 <etharp_query+0x1d4>
      }
      p = p->next;
 80147e4:	69fb      	ldr	r3, [r7, #28]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d1e1      	bne.n	80147b4 <etharp_query+0x198>
    }
    if (copy_needed) {
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d017      	beq.n	8014826 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	891b      	ldrh	r3, [r3, #8]
 80147fa:	2200      	movs	r2, #0
 80147fc:	4619      	mov	r1, r3
 80147fe:	2002      	movs	r0, #2
 8014800:	f7f6 fde2 	bl	800b3c8 <pbuf_alloc>
 8014804:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d011      	beq.n	8014830 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801480c:	6879      	ldr	r1, [r7, #4]
 801480e:	69f8      	ldr	r0, [r7, #28]
 8014810:	f7f7 fa8c 	bl	800bd2c <pbuf_copy>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00a      	beq.n	8014830 <etharp_query+0x214>
          pbuf_free(p);
 801481a:	69f8      	ldr	r0, [r7, #28]
 801481c:	f7f7 f946 	bl	800baac <pbuf_free>
          p = NULL;
 8014820:	2300      	movs	r3, #0
 8014822:	61fb      	str	r3, [r7, #28]
 8014824:	e004      	b.n	8014830 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801482a:	69f8      	ldr	r0, [r7, #28]
 801482c:	f7f7 f9f0 	bl	800bc10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d024      	beq.n	8014880 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014836:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801483a:	4916      	ldr	r1, [pc, #88]	; (8014894 <etharp_query+0x278>)
 801483c:	4613      	mov	r3, r2
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	00db      	lsls	r3, r3, #3
 8014844:	440b      	add	r3, r1
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d00b      	beq.n	8014864 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801484c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014850:	4910      	ldr	r1, [pc, #64]	; (8014894 <etharp_query+0x278>)
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	4618      	mov	r0, r3
 8014860:	f7f7 f924 	bl	800baac <pbuf_free>
      }
      arp_table[i].q = p;
 8014864:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014868:	490a      	ldr	r1, [pc, #40]	; (8014894 <etharp_query+0x278>)
 801486a:	4613      	mov	r3, r2
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	4413      	add	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	440b      	add	r3, r1
 8014874:	69fa      	ldr	r2, [r7, #28]
 8014876:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014878:	2300      	movs	r3, #0
 801487a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801487e:	e002      	b.n	8014886 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014880:	23ff      	movs	r3, #255	; 0xff
 8014882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801488a:	4618      	mov	r0, r3
 801488c:	3728      	adds	r7, #40	; 0x28
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	20008928 	.word	0x20008928
 8014898:	08019b50 	.word	0x08019b50
 801489c:	08019cfc 	.word	0x08019cfc
 80148a0:	08019bc8 	.word	0x08019bc8
 80148a4:	08019cf0 	.word	0x08019cf0
 80148a8:	20008a18 	.word	0x20008a18
 80148ac:	08019d24 	.word	0x08019d24

080148b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b08a      	sub	sp, #40	; 0x28
 80148b4:	af02      	add	r7, sp, #8
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	607a      	str	r2, [r7, #4]
 80148bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d106      	bne.n	80148d6 <etharp_raw+0x26>
 80148c8:	4b3a      	ldr	r3, [pc, #232]	; (80149b4 <etharp_raw+0x104>)
 80148ca:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80148ce:	493a      	ldr	r1, [pc, #232]	; (80149b8 <etharp_raw+0x108>)
 80148d0:	483a      	ldr	r0, [pc, #232]	; (80149bc <etharp_raw+0x10c>)
 80148d2:	f001 fdfb 	bl	80164cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80148d6:	2200      	movs	r2, #0
 80148d8:	211c      	movs	r1, #28
 80148da:	2002      	movs	r0, #2
 80148dc:	f7f6 fd74 	bl	800b3c8 <pbuf_alloc>
 80148e0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d102      	bne.n	80148ee <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80148e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148ec:	e05d      	b.n	80149aa <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	895b      	ldrh	r3, [r3, #10]
 80148f2:	2b1b      	cmp	r3, #27
 80148f4:	d806      	bhi.n	8014904 <etharp_raw+0x54>
 80148f6:	4b2f      	ldr	r3, [pc, #188]	; (80149b4 <etharp_raw+0x104>)
 80148f8:	f240 4264 	movw	r2, #1124	; 0x464
 80148fc:	4930      	ldr	r1, [pc, #192]	; (80149c0 <etharp_raw+0x110>)
 80148fe:	482f      	ldr	r0, [pc, #188]	; (80149bc <etharp_raw+0x10c>)
 8014900:	f001 fde4 	bl	80164cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014904:	69bb      	ldr	r3, [r7, #24]
 8014906:	685b      	ldr	r3, [r3, #4]
 8014908:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801490a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801490c:	4618      	mov	r0, r3
 801490e:	f7f5 fef5 	bl	800a6fc <lwip_htons>
 8014912:	4603      	mov	r3, r0
 8014914:	461a      	mov	r2, r3
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014920:	2b06      	cmp	r3, #6
 8014922:	d006      	beq.n	8014932 <etharp_raw+0x82>
 8014924:	4b23      	ldr	r3, [pc, #140]	; (80149b4 <etharp_raw+0x104>)
 8014926:	f240 426b 	movw	r2, #1131	; 0x46b
 801492a:	4926      	ldr	r1, [pc, #152]	; (80149c4 <etharp_raw+0x114>)
 801492c:	4823      	ldr	r0, [pc, #140]	; (80149bc <etharp_raw+0x10c>)
 801492e:	f001 fdcd 	bl	80164cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	3308      	adds	r3, #8
 8014936:	2206      	movs	r2, #6
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	4618      	mov	r0, r3
 801493c:	f001 fdb3 	bl	80164a6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	3312      	adds	r3, #18
 8014944:	2206      	movs	r2, #6
 8014946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014948:	4618      	mov	r0, r3
 801494a:	f001 fdac 	bl	80164a6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	330e      	adds	r3, #14
 8014952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014954:	6812      	ldr	r2, [r2, #0]
 8014956:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	3318      	adds	r3, #24
 801495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801495e:	6812      	ldr	r2, [r2, #0]
 8014960:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	2200      	movs	r2, #0
 8014966:	701a      	strb	r2, [r3, #0]
 8014968:	2200      	movs	r2, #0
 801496a:	f042 0201 	orr.w	r2, r2, #1
 801496e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	2200      	movs	r2, #0
 8014974:	f042 0208 	orr.w	r2, r2, #8
 8014978:	709a      	strb	r2, [r3, #2]
 801497a:	2200      	movs	r2, #0
 801497c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	2206      	movs	r2, #6
 8014982:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	2204      	movs	r2, #4
 8014988:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801498a:	f640 0306 	movw	r3, #2054	; 0x806
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	69b9      	ldr	r1, [r7, #24]
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	f001 fb12 	bl	8015fc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801499c:	69b8      	ldr	r0, [r7, #24]
 801499e:	f7f7 f885 	bl	800baac <pbuf_free>
  p = NULL;
 80149a2:	2300      	movs	r3, #0
 80149a4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80149a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3720      	adds	r7, #32
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	08019b50 	.word	0x08019b50
 80149b8:	08019ca0 	.word	0x08019ca0
 80149bc:	08019bc8 	.word	0x08019bc8
 80149c0:	08019d40 	.word	0x08019d40
 80149c4:	08019d74 	.word	0x08019d74

080149c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b088      	sub	sp, #32
 80149cc:	af04      	add	r7, sp, #16
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80149e4:	2201      	movs	r2, #1
 80149e6:	9203      	str	r2, [sp, #12]
 80149e8:	68ba      	ldr	r2, [r7, #8]
 80149ea:	9202      	str	r2, [sp, #8]
 80149ec:	4a06      	ldr	r2, [pc, #24]	; (8014a08 <etharp_request_dst+0x40>)
 80149ee:	9201      	str	r2, [sp, #4]
 80149f0:	9300      	str	r3, [sp, #0]
 80149f2:	4603      	mov	r3, r0
 80149f4:	687a      	ldr	r2, [r7, #4]
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f7ff ff5a 	bl	80148b0 <etharp_raw>
 80149fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3710      	adds	r7, #16
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	080256e8 	.word	0x080256e8

08014a0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014a16:	4a05      	ldr	r2, [pc, #20]	; (8014a2c <etharp_request+0x20>)
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7ff ffd4 	bl	80149c8 <etharp_request_dst>
 8014a20:	4603      	mov	r3, r0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3708      	adds	r7, #8
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	080256e0 	.word	0x080256e0

08014a30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b08e      	sub	sp, #56	; 0x38
 8014a34:	af04      	add	r7, sp, #16
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014a3a:	4b7a      	ldr	r3, [pc, #488]	; (8014c24 <icmp_input+0x1f4>)
 8014a3c:	689b      	ldr	r3, [r3, #8]
 8014a3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	f003 030f 	and.w	r3, r3, #15
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014a52:	2b13      	cmp	r3, #19
 8014a54:	f240 80d1 	bls.w	8014bfa <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	895b      	ldrh	r3, [r3, #10]
 8014a5c:	2b03      	cmp	r3, #3
 8014a5e:	f240 80ce 	bls.w	8014bfe <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f000 80bb 	beq.w	8014bec <icmp_input+0x1bc>
 8014a76:	2b08      	cmp	r3, #8
 8014a78:	f040 80bb 	bne.w	8014bf2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8014a7c:	4b6a      	ldr	r3, [pc, #424]	; (8014c28 <icmp_input+0x1f8>)
 8014a7e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a80:	4b68      	ldr	r3, [pc, #416]	; (8014c24 <icmp_input+0x1f4>)
 8014a82:	695b      	ldr	r3, [r3, #20]
 8014a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a88:	2be0      	cmp	r3, #224	; 0xe0
 8014a8a:	f000 80bf 	beq.w	8014c0c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014a8e:	4b65      	ldr	r3, [pc, #404]	; (8014c24 <icmp_input+0x1f4>)
 8014a90:	695a      	ldr	r2, [r3, #20]
 8014a92:	4b64      	ldr	r3, [pc, #400]	; (8014c24 <icmp_input+0x1f4>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	4619      	mov	r1, r3
 8014a98:	4610      	mov	r0, r2
 8014a9a:	f000 fbef 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	f040 80b5 	bne.w	8014c10 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	891b      	ldrh	r3, [r3, #8]
 8014aaa:	2b07      	cmp	r3, #7
 8014aac:	f240 80a9 	bls.w	8014c02 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ab2:	330e      	adds	r3, #14
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	b21b      	sxth	r3, r3
 8014ab8:	4619      	mov	r1, r3
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f7f6 ffd2 	bl	800ba64 <pbuf_header>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d046      	beq.n	8014b54 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	891a      	ldrh	r2, [r3, #8]
 8014aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014acc:	4413      	add	r3, r2
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	2002      	movs	r0, #2
 8014ad6:	f7f6 fc77 	bl	800b3c8 <pbuf_alloc>
 8014ada:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8014adc:	69bb      	ldr	r3, [r7, #24]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f000 8098 	beq.w	8014c14 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ae4:	69bb      	ldr	r3, [r7, #24]
 8014ae6:	895b      	ldrh	r3, [r3, #10]
 8014ae8:	461a      	mov	r2, r3
 8014aea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014aec:	3308      	adds	r3, #8
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d203      	bcs.n	8014afa <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8014af2:	69b8      	ldr	r0, [r7, #24]
 8014af4:	f7f6 ffda 	bl	800baac <pbuf_free>
        goto icmperr;
 8014af8:	e08d      	b.n	8014c16 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8014afa:	69bb      	ldr	r3, [r7, #24]
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b02:	4618      	mov	r0, r3
 8014b04:	f001 fccf 	bl	80164a6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8014b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0a:	425b      	negs	r3, r3
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	b21b      	sxth	r3, r3
 8014b10:	4619      	mov	r1, r3
 8014b12:	69b8      	ldr	r0, [r7, #24]
 8014b14:	f7f6 ffa6 	bl	800ba64 <pbuf_header>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d009      	beq.n	8014b32 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014b1e:	4b43      	ldr	r3, [pc, #268]	; (8014c2c <icmp_input+0x1fc>)
 8014b20:	22af      	movs	r2, #175	; 0xaf
 8014b22:	4943      	ldr	r1, [pc, #268]	; (8014c30 <icmp_input+0x200>)
 8014b24:	4843      	ldr	r0, [pc, #268]	; (8014c34 <icmp_input+0x204>)
 8014b26:	f001 fcd1 	bl	80164cc <iprintf>
        pbuf_free(r);
 8014b2a:	69b8      	ldr	r0, [r7, #24]
 8014b2c:	f7f6 ffbe 	bl	800baac <pbuf_free>
        goto icmperr;
 8014b30:	e071      	b.n	8014c16 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8014b32:	6879      	ldr	r1, [r7, #4]
 8014b34:	69b8      	ldr	r0, [r7, #24]
 8014b36:	f7f7 f8f9 	bl	800bd2c <pbuf_copy>
 8014b3a:	4603      	mov	r3, r0
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d003      	beq.n	8014b48 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8014b40:	69b8      	ldr	r0, [r7, #24]
 8014b42:	f7f6 ffb3 	bl	800baac <pbuf_free>
        goto icmperr;
 8014b46:	e066      	b.n	8014c16 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f7f6 ffaf 	bl	800baac <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	607b      	str	r3, [r7, #4]
 8014b52:	e015      	b.n	8014b80 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014b54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b56:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8014b5a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014b5e:	33f2      	adds	r3, #242	; 0xf2
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	b21b      	sxth	r3, r3
 8014b64:	4619      	mov	r1, r3
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f7f6 ff7c 	bl	800ba64 <pbuf_header>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d006      	beq.n	8014b80 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014b72:	4b2e      	ldr	r3, [pc, #184]	; (8014c2c <icmp_input+0x1fc>)
 8014b74:	22c0      	movs	r2, #192	; 0xc0
 8014b76:	4930      	ldr	r1, [pc, #192]	; (8014c38 <icmp_input+0x208>)
 8014b78:	482e      	ldr	r0, [pc, #184]	; (8014c34 <icmp_input+0x204>)
 8014b7a:	f001 fca7 	bl	80164cc <iprintf>
        goto icmperr;
 8014b7e:	e04a      	b.n	8014c16 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8014b86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f7f6 ff69 	bl	800ba64 <pbuf_header>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d12b      	bne.n	8014bf0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014ba6:	4b1f      	ldr	r3, [pc, #124]	; (8014c24 <icmp_input+0x1f4>)
 8014ba8:	691a      	ldr	r2, [r3, #16]
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	709a      	strb	r2, [r3, #2]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	22ff      	movs	r2, #255	; 0xff
 8014bc2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	729a      	strb	r2, [r3, #10]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	9302      	str	r3, [sp, #8]
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	9301      	str	r3, [sp, #4]
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	23ff      	movs	r3, #255	; 0xff
 8014bdc:	2200      	movs	r2, #0
 8014bde:	69f9      	ldr	r1, [r7, #28]
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f000 fa79 	bl	80150d8 <ip4_output_if>
 8014be6:	4603      	mov	r3, r0
 8014be8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8014bea:	e001      	b.n	8014bf0 <icmp_input+0x1c0>
    break;
 8014bec:	bf00      	nop
 8014bee:	e000      	b.n	8014bf2 <icmp_input+0x1c2>
    break;
 8014bf0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7f6 ff5a 	bl	800baac <pbuf_free>
  return;
 8014bf8:	e011      	b.n	8014c1e <icmp_input+0x1ee>
    goto lenerr;
 8014bfa:	bf00      	nop
 8014bfc:	e002      	b.n	8014c04 <icmp_input+0x1d4>
    goto lenerr;
 8014bfe:	bf00      	nop
 8014c00:	e000      	b.n	8014c04 <icmp_input+0x1d4>
      goto lenerr;
 8014c02:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7f6 ff51 	bl	800baac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c0a:	e008      	b.n	8014c1e <icmp_input+0x1ee>
      goto icmperr;
 8014c0c:	bf00      	nop
 8014c0e:	e002      	b.n	8014c16 <icmp_input+0x1e6>
      goto icmperr;
 8014c10:	bf00      	nop
 8014c12:	e000      	b.n	8014c16 <icmp_input+0x1e6>
        goto icmperr;
 8014c14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7f6 ff48 	bl	800baac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014c1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014c1e:	3728      	adds	r7, #40	; 0x28
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	2000c02c 	.word	0x2000c02c
 8014c28:	2000c040 	.word	0x2000c040
 8014c2c:	08019db8 	.word	0x08019db8
 8014c30:	08019df0 	.word	0x08019df0
 8014c34:	08019e28 	.word	0x08019e28
 8014c38:	08019e50 	.word	0x08019e50

08014c3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	460b      	mov	r3, r1
 8014c46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014c48:	78fb      	ldrb	r3, [r7, #3]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	2103      	movs	r1, #3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 f814 	bl	8014c7c <icmp_send_response>
}
 8014c54:	bf00      	nop
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b082      	sub	sp, #8
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	460b      	mov	r3, r1
 8014c66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014c68:	78fb      	ldrb	r3, [r7, #3]
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	210b      	movs	r1, #11
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f000 f804 	bl	8014c7c <icmp_send_response>
}
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}

08014c7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b08c      	sub	sp, #48	; 0x30
 8014c80:	af04      	add	r7, sp, #16
 8014c82:	6078      	str	r0, [r7, #4]
 8014c84:	460b      	mov	r3, r1
 8014c86:	70fb      	strb	r3, [r7, #3]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	2124      	movs	r1, #36	; 0x24
 8014c90:	2001      	movs	r0, #1
 8014c92:	f7f6 fb99 	bl	800b3c8 <pbuf_alloc>
 8014c96:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d04c      	beq.n	8014d38 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	895b      	ldrh	r3, [r3, #10]
 8014ca2:	2b23      	cmp	r3, #35	; 0x23
 8014ca4:	d806      	bhi.n	8014cb4 <icmp_send_response+0x38>
 8014ca6:	4b26      	ldr	r3, [pc, #152]	; (8014d40 <icmp_send_response+0xc4>)
 8014ca8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8014cac:	4925      	ldr	r1, [pc, #148]	; (8014d44 <icmp_send_response+0xc8>)
 8014cae:	4826      	ldr	r0, [pc, #152]	; (8014d48 <icmp_send_response+0xcc>)
 8014cb0:	f001 fc0c 	bl	80164cc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	78fa      	ldrb	r2, [r7, #3]
 8014cc4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014cc6:	697b      	ldr	r3, [r7, #20]
 8014cc8:	78ba      	ldrb	r2, [r7, #2]
 8014cca:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	711a      	strb	r2, [r3, #4]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	719a      	strb	r2, [r3, #6]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014ce0:	69fb      	ldr	r3, [r7, #28]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	f103 0008 	add.w	r0, r3, #8
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	221c      	movs	r2, #28
 8014cee:	4619      	mov	r1, r3
 8014cf0:	f001 fbd9 	bl	80164a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014cfa:	f107 030c 	add.w	r3, r7, #12
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f000 f824 	bl	8014d4c <ip4_route>
 8014d04:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d011      	beq.n	8014d30 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	709a      	strb	r2, [r3, #2]
 8014d12:	2200      	movs	r2, #0
 8014d14:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014d16:	f107 020c 	add.w	r2, r7, #12
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	9302      	str	r3, [sp, #8]
 8014d1e:	2301      	movs	r3, #1
 8014d20:	9301      	str	r3, [sp, #4]
 8014d22:	2300      	movs	r3, #0
 8014d24:	9300      	str	r3, [sp, #0]
 8014d26:	23ff      	movs	r3, #255	; 0xff
 8014d28:	2100      	movs	r1, #0
 8014d2a:	69f8      	ldr	r0, [r7, #28]
 8014d2c:	f000 f9d4 	bl	80150d8 <ip4_output_if>
  }
  pbuf_free(q);
 8014d30:	69f8      	ldr	r0, [r7, #28]
 8014d32:	f7f6 febb 	bl	800baac <pbuf_free>
 8014d36:	e000      	b.n	8014d3a <icmp_send_response+0xbe>
    return;
 8014d38:	bf00      	nop
}
 8014d3a:	3720      	adds	r7, #32
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}
 8014d40:	08019db8 	.word	0x08019db8
 8014d44:	08019e84 	.word	0x08019e84
 8014d48:	08019e28 	.word	0x08019e28

08014d4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b085      	sub	sp, #20
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014d54:	4b30      	ldr	r3, [pc, #192]	; (8014e18 <ip4_route+0xcc>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	60fb      	str	r3, [r7, #12]
 8014d5a:	e036      	b.n	8014dca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d02b      	beq.n	8014dc4 <ip4_route+0x78>
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014d72:	089b      	lsrs	r3, r3, #2
 8014d74:	f003 0301 	and.w	r3, r3, #1
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d022      	beq.n	8014dc4 <ip4_route+0x78>
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	3304      	adds	r3, #4
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d01d      	beq.n	8014dc4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	3304      	adds	r3, #4
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	405a      	eors	r2, r3
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	3308      	adds	r3, #8
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	4013      	ands	r3, r2
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	e033      	b.n	8014e0c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014daa:	f003 0302 	and.w	r3, r3, #2
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d108      	bne.n	8014dc4 <ip4_route+0x78>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681a      	ldr	r2, [r3, #0]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	330c      	adds	r3, #12
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d101      	bne.n	8014dc4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	e023      	b.n	8014e0c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	60fb      	str	r3, [r7, #12]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d1c5      	bne.n	8014d5c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014dd0:	4b12      	ldr	r3, [pc, #72]	; (8014e1c <ip4_route+0xd0>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d015      	beq.n	8014e04 <ip4_route+0xb8>
 8014dd8:	4b10      	ldr	r3, [pc, #64]	; (8014e1c <ip4_route+0xd0>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014de0:	f003 0301 	and.w	r3, r3, #1
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00d      	beq.n	8014e04 <ip4_route+0xb8>
 8014de8:	4b0c      	ldr	r3, [pc, #48]	; (8014e1c <ip4_route+0xd0>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014df0:	f003 0304 	and.w	r3, r3, #4
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d005      	beq.n	8014e04 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8014df8:	4b08      	ldr	r3, [pc, #32]	; (8014e1c <ip4_route+0xd0>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d101      	bne.n	8014e08 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014e04:	2300      	movs	r3, #0
 8014e06:	e001      	b.n	8014e0c <ip4_route+0xc0>
  }

  return netif_default;
 8014e08:	4b04      	ldr	r3, [pc, #16]	; (8014e1c <ip4_route+0xd0>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	3714      	adds	r7, #20
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr
 8014e18:	2000f74c 	.word	0x2000f74c
 8014e1c:	2000f750 	.word	0x2000f750

08014e20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b088      	sub	sp, #32
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	091b      	lsrs	r3, r3, #4
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b04      	cmp	r3, #4
 8014e3e:	d004      	beq.n	8014e4a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7f6 fe33 	bl	800baac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	e13e      	b.n	80150c8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	f003 030f 	and.w	r3, r3, #15
 8014e54:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8014e56:	89fb      	ldrh	r3, [r7, #14]
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014e5c:	69fb      	ldr	r3, [r7, #28]
 8014e5e:	885b      	ldrh	r3, [r3, #2]
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7f5 fc4a 	bl	800a6fc <lwip_htons>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	891b      	ldrh	r3, [r3, #8]
 8014e70:	89ba      	ldrh	r2, [r7, #12]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d204      	bcs.n	8014e80 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8014e76:	89bb      	ldrh	r3, [r7, #12]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7f6 fca2 	bl	800b7c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	895b      	ldrh	r3, [r3, #10]
 8014e84:	89fa      	ldrh	r2, [r7, #14]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d807      	bhi.n	8014e9a <ip4_input+0x7a>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	891b      	ldrh	r3, [r3, #8]
 8014e8e:	89ba      	ldrh	r2, [r7, #12]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d802      	bhi.n	8014e9a <ip4_input+0x7a>
 8014e94:	89fb      	ldrh	r3, [r7, #14]
 8014e96:	2b13      	cmp	r3, #19
 8014e98:	d804      	bhi.n	8014ea4 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7f6 fe06 	bl	800baac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	e111      	b.n	80150c8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	691b      	ldr	r3, [r3, #16]
 8014ea8:	4a89      	ldr	r2, [pc, #548]	; (80150d0 <ip4_input+0x2b0>)
 8014eaa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	68db      	ldr	r3, [r3, #12]
 8014eb0:	4a87      	ldr	r2, [pc, #540]	; (80150d0 <ip4_input+0x2b0>)
 8014eb2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014eb4:	4b86      	ldr	r3, [pc, #536]	; (80150d0 <ip4_input+0x2b0>)
 8014eb6:	695b      	ldr	r3, [r3, #20]
 8014eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ebc:	2be0      	cmp	r3, #224	; 0xe0
 8014ebe:	d112      	bne.n	8014ee6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ec6:	f003 0301 	and.w	r3, r3, #1
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d007      	beq.n	8014ee0 <ip4_input+0xc0>
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	3304      	adds	r3, #4
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d002      	beq.n	8014ee0 <ip4_input+0xc0>
      netif = inp;
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	61bb      	str	r3, [r7, #24]
 8014ede:	e041      	b.n	8014f64 <ip4_input+0x144>
    } else {
      netif = NULL;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	61bb      	str	r3, [r7, #24]
 8014ee4:	e03e      	b.n	8014f64 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	613b      	str	r3, [r7, #16]
    netif = inp;
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ef4:	f003 0301 	and.w	r3, r3, #1
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d014      	beq.n	8014f28 <ip4_input+0x108>
 8014efe:	69bb      	ldr	r3, [r7, #24]
 8014f00:	3304      	adds	r3, #4
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d00f      	beq.n	8014f28 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f08:	4b71      	ldr	r3, [pc, #452]	; (80150d0 <ip4_input+0x2b0>)
 8014f0a:	695a      	ldr	r2, [r3, #20]
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	3304      	adds	r3, #4
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d026      	beq.n	8014f64 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014f16:	4b6e      	ldr	r3, [pc, #440]	; (80150d0 <ip4_input+0x2b0>)
 8014f18:	695b      	ldr	r3, [r3, #20]
 8014f1a:	69b9      	ldr	r1, [r7, #24]
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f000 f9ad 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014f22:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d11d      	bne.n	8014f64 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00d      	beq.n	8014f4a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8014f2e:	4b68      	ldr	r3, [pc, #416]	; (80150d0 <ip4_input+0x2b0>)
 8014f30:	695b      	ldr	r3, [r3, #20]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b7f      	cmp	r3, #127	; 0x7f
 8014f36:	d102      	bne.n	8014f3e <ip4_input+0x11e>
          netif = NULL;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	61bb      	str	r3, [r7, #24]
          break;
 8014f3c:	e012      	b.n	8014f64 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8014f42:	4b64      	ldr	r3, [pc, #400]	; (80150d4 <ip4_input+0x2b4>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	61bb      	str	r3, [r7, #24]
 8014f48:	e002      	b.n	8014f50 <ip4_input+0x130>
      } else {
        netif = netif->next;
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8014f50:	69ba      	ldr	r2, [r7, #24]
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d102      	bne.n	8014f5e <ip4_input+0x13e>
        netif = netif->next;
 8014f58:	69bb      	ldr	r3, [r7, #24]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d1c4      	bne.n	8014eee <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d111      	bne.n	8014f8e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014f6a:	69fb      	ldr	r3, [r7, #28]
 8014f6c:	7a5b      	ldrb	r3, [r3, #9]
 8014f6e:	2b11      	cmp	r3, #17
 8014f70:	d10d      	bne.n	8014f8e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8014f72:	89fb      	ldrh	r3, [r7, #14]
 8014f74:	69fa      	ldr	r2, [r7, #28]
 8014f76:	4413      	add	r3, r2
 8014f78:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	885b      	ldrh	r3, [r3, #2]
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8014f84:	d103      	bne.n	8014f8e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d017      	beq.n	8014fc4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8014f94:	4b4e      	ldr	r3, [pc, #312]	; (80150d0 <ip4_input+0x2b0>)
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d013      	beq.n	8014fc4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014f9c:	4b4c      	ldr	r3, [pc, #304]	; (80150d0 <ip4_input+0x2b0>)
 8014f9e:	691b      	ldr	r3, [r3, #16]
 8014fa0:	6839      	ldr	r1, [r7, #0]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f000 f96a 	bl	801527c <ip4_addr_isbroadcast_u32>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d105      	bne.n	8014fba <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014fae:	4b48      	ldr	r3, [pc, #288]	; (80150d0 <ip4_input+0x2b0>)
 8014fb0:	691b      	ldr	r3, [r3, #16]
 8014fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014fb6:	2be0      	cmp	r3, #224	; 0xe0
 8014fb8:	d104      	bne.n	8014fc4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7f6 fd76 	bl	800baac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	e081      	b.n	80150c8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d104      	bne.n	8014fd4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7f6 fd6e 	bl	800baac <pbuf_free>
    return ERR_OK;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	e079      	b.n	80150c8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	88db      	ldrh	r3, [r3, #6]
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	461a      	mov	r2, r3
 8014fdc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014fe0:	4013      	ands	r3, r2
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00b      	beq.n	8014ffe <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f000 fc8e 	bl	8015908 <ip4_reass>
 8014fec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d101      	bne.n	8014ff8 <ip4_input+0x1d8>
      return ERR_OK;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	e067      	b.n	80150c8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014ffe:	4a34      	ldr	r2, [pc, #208]	; (80150d0 <ip4_input+0x2b0>)
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015004:	4a32      	ldr	r2, [pc, #200]	; (80150d0 <ip4_input+0x2b0>)
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801500a:	4a31      	ldr	r2, [pc, #196]	; (80150d0 <ip4_input+0x2b0>)
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015010:	69fb      	ldr	r3, [r7, #28]
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	b29b      	uxth	r3, r3
 8015016:	f003 030f 	and.w	r3, r3, #15
 801501a:	b29b      	uxth	r3, r3
 801501c:	009b      	lsls	r3, r3, #2
 801501e:	b29a      	uxth	r2, r3
 8015020:	4b2b      	ldr	r3, [pc, #172]	; (80150d0 <ip4_input+0x2b0>)
 8015022:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015024:	89fb      	ldrh	r3, [r7, #14]
 8015026:	425b      	negs	r3, r3
 8015028:	b29b      	uxth	r3, r3
 801502a:	b21b      	sxth	r3, r3
 801502c:	4619      	mov	r1, r3
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f7f6 fd18 	bl	800ba64 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8015034:	69fb      	ldr	r3, [r7, #28]
 8015036:	7a5b      	ldrb	r3, [r3, #9]
 8015038:	2b06      	cmp	r3, #6
 801503a:	d009      	beq.n	8015050 <ip4_input+0x230>
 801503c:	2b11      	cmp	r3, #17
 801503e:	d002      	beq.n	8015046 <ip4_input+0x226>
 8015040:	2b01      	cmp	r3, #1
 8015042:	d00a      	beq.n	801505a <ip4_input+0x23a>
 8015044:	e00e      	b.n	8015064 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8015046:	6839      	ldr	r1, [r7, #0]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f7fc fc05 	bl	8011858 <udp_input>
      break;
 801504e:	e028      	b.n	80150a2 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8015050:	6839      	ldr	r1, [r7, #0]
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f7f8 fc24 	bl	800d8a0 <tcp_input>
      break;
 8015058:	e023      	b.n	80150a2 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801505a:	6839      	ldr	r1, [r7, #0]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff fce7 	bl	8014a30 <icmp_input>
      break;
 8015062:	e01e      	b.n	80150a2 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015064:	4b1a      	ldr	r3, [pc, #104]	; (80150d0 <ip4_input+0x2b0>)
 8015066:	695b      	ldr	r3, [r3, #20]
 8015068:	69b9      	ldr	r1, [r7, #24]
 801506a:	4618      	mov	r0, r3
 801506c:	f000 f906 	bl	801527c <ip4_addr_isbroadcast_u32>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d112      	bne.n	801509c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015076:	4b16      	ldr	r3, [pc, #88]	; (80150d0 <ip4_input+0x2b0>)
 8015078:	695b      	ldr	r3, [r3, #20]
 801507a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801507e:	2be0      	cmp	r3, #224	; 0xe0
 8015080:	d00c      	beq.n	801509c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8015082:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015086:	4619      	mov	r1, r3
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f7f6 fcfd 	bl	800ba88 <pbuf_header_force>
        p->payload = iphdr;
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	69fa      	ldr	r2, [r7, #28]
 8015092:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015094:	2102      	movs	r1, #2
 8015096:	6878      	ldr	r0, [r7, #4]
 8015098:	f7ff fdd0 	bl	8014c3c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f7f6 fd05 	bl	800baac <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80150a2:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <ip4_input+0x2b0>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80150a8:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <ip4_input+0x2b0>)
 80150aa:	2200      	movs	r2, #0
 80150ac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80150ae:	4b08      	ldr	r3, [pc, #32]	; (80150d0 <ip4_input+0x2b0>)
 80150b0:	2200      	movs	r2, #0
 80150b2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80150b4:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <ip4_input+0x2b0>)
 80150b6:	2200      	movs	r2, #0
 80150b8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80150ba:	4b05      	ldr	r3, [pc, #20]	; (80150d0 <ip4_input+0x2b0>)
 80150bc:	2200      	movs	r2, #0
 80150be:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80150c0:	4b03      	ldr	r3, [pc, #12]	; (80150d0 <ip4_input+0x2b0>)
 80150c2:	2200      	movs	r2, #0
 80150c4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80150c6:	2300      	movs	r3, #0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3720      	adds	r7, #32
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	2000c02c 	.word	0x2000c02c
 80150d4:	2000f74c 	.word	0x2000f74c

080150d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b08a      	sub	sp, #40	; 0x28
 80150dc:	af04      	add	r7, sp, #16
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
 80150e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d009      	beq.n	8015104 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d003      	beq.n	80150fe <ip4_output_if+0x26>
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d102      	bne.n	8015104 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80150fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015100:	3304      	adds	r3, #4
 8015102:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015104:	78fa      	ldrb	r2, [r7, #3]
 8015106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015108:	9302      	str	r3, [sp, #8]
 801510a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801510e:	9301      	str	r3, [sp, #4]
 8015110:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	4613      	mov	r3, r2
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	6979      	ldr	r1, [r7, #20]
 801511c:	68f8      	ldr	r0, [r7, #12]
 801511e:	f000 f805 	bl	801512c <ip4_output_if_src>
 8015122:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015124:	4618      	mov	r0, r3
 8015126:	3718      	adds	r7, #24
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b088      	sub	sp, #32
 8015130:	af00      	add	r7, sp, #0
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	607a      	str	r2, [r7, #4]
 8015138:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	89db      	ldrh	r3, [r3, #14]
 801513e:	2b01      	cmp	r3, #1
 8015140:	d006      	beq.n	8015150 <ip4_output_if_src+0x24>
 8015142:	4b48      	ldr	r3, [pc, #288]	; (8015264 <ip4_output_if_src+0x138>)
 8015144:	f240 3233 	movw	r2, #819	; 0x333
 8015148:	4947      	ldr	r1, [pc, #284]	; (8015268 <ip4_output_if_src+0x13c>)
 801514a:	4848      	ldr	r0, [pc, #288]	; (801526c <ip4_output_if_src+0x140>)
 801514c:	f001 f9be 	bl	80164cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d060      	beq.n	8015218 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015156:	2314      	movs	r3, #20
 8015158:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801515a:	2114      	movs	r1, #20
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f7f6 fc81 	bl	800ba64 <pbuf_header>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d002      	beq.n	801516e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015168:	f06f 0301 	mvn.w	r3, #1
 801516c:	e075      	b.n	801525a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	895b      	ldrh	r3, [r3, #10]
 8015178:	2b13      	cmp	r3, #19
 801517a:	d806      	bhi.n	801518a <ip4_output_if_src+0x5e>
 801517c:	4b39      	ldr	r3, [pc, #228]	; (8015264 <ip4_output_if_src+0x138>)
 801517e:	f240 3261 	movw	r2, #865	; 0x361
 8015182:	493b      	ldr	r1, [pc, #236]	; (8015270 <ip4_output_if_src+0x144>)
 8015184:	4839      	ldr	r0, [pc, #228]	; (801526c <ip4_output_if_src+0x140>)
 8015186:	f001 f9a1 	bl	80164cc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801518a:	69fb      	ldr	r3, [r7, #28]
 801518c:	78fa      	ldrb	r2, [r7, #3]
 801518e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015196:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	69fb      	ldr	r3, [r7, #28]
 801519e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80151a0:	8b7b      	ldrh	r3, [r7, #26]
 80151a2:	089b      	lsrs	r3, r3, #2
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	b2db      	uxtb	r3, r3
 80151a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151ac:	b2da      	uxtb	r2, r3
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80151b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	891b      	ldrh	r3, [r3, #8]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7f5 fa9c 	bl	800a6fc <lwip_htons>
 80151c4:	4603      	mov	r3, r0
 80151c6:	461a      	mov	r2, r3
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	2200      	movs	r2, #0
 80151d0:	719a      	strb	r2, [r3, #6]
 80151d2:	2200      	movs	r2, #0
 80151d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80151d6:	4b27      	ldr	r3, [pc, #156]	; (8015274 <ip4_output_if_src+0x148>)
 80151d8:	881b      	ldrh	r3, [r3, #0]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7f5 fa8e 	bl	800a6fc <lwip_htons>
 80151e0:	4603      	mov	r3, r0
 80151e2:	461a      	mov	r2, r3
 80151e4:	69fb      	ldr	r3, [r7, #28]
 80151e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80151e8:	4b22      	ldr	r3, [pc, #136]	; (8015274 <ip4_output_if_src+0x148>)
 80151ea:	881b      	ldrh	r3, [r3, #0]
 80151ec:	3301      	adds	r3, #1
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	4b20      	ldr	r3, [pc, #128]	; (8015274 <ip4_output_if_src+0x148>)
 80151f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d104      	bne.n	8015204 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80151fa:	4b1f      	ldr	r3, [pc, #124]	; (8015278 <ip4_output_if_src+0x14c>)
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	69fb      	ldr	r3, [r7, #28]
 8015200:	60da      	str	r2, [r3, #12]
 8015202:	e003      	b.n	801520c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	2200      	movs	r2, #0
 8015210:	729a      	strb	r2, [r3, #10]
 8015212:	2200      	movs	r2, #0
 8015214:	72da      	strb	r2, [r3, #11]
 8015216:	e008      	b.n	801522a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801521e:	69fb      	ldr	r3, [r7, #28]
 8015220:	691b      	ldr	r3, [r3, #16]
 8015222:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015224:	f107 0314 	add.w	r3, r7, #20
 8015228:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801522e:	2b00      	cmp	r3, #0
 8015230:	d00c      	beq.n	801524c <ip4_output_if_src+0x120>
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	891a      	ldrh	r2, [r3, #8]
 8015236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801523a:	429a      	cmp	r2, r3
 801523c:	d906      	bls.n	801524c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015242:	68f8      	ldr	r0, [r7, #12]
 8015244:	f000 fd0a 	bl	8015c5c <ip4_frag>
 8015248:	4603      	mov	r3, r0
 801524a:	e006      	b.n	801525a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524e:	695b      	ldr	r3, [r3, #20]
 8015250:	687a      	ldr	r2, [r7, #4]
 8015252:	68f9      	ldr	r1, [r7, #12]
 8015254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015256:	4798      	blx	r3
 8015258:	4603      	mov	r3, r0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3720      	adds	r7, #32
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	08019eb0 	.word	0x08019eb0
 8015268:	08019ee4 	.word	0x08019ee4
 801526c:	08019ef0 	.word	0x08019ef0
 8015270:	08019f18 	.word	0x08019f18
 8015274:	20008a1a 	.word	0x20008a1a
 8015278:	080256d8 	.word	0x080256d8

0801527c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801527c:	b480      	push	{r7}
 801527e:	b085      	sub	sp, #20
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015290:	d002      	beq.n	8015298 <ip4_addr_isbroadcast_u32+0x1c>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d101      	bne.n	801529c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015298:	2301      	movs	r3, #1
 801529a:	e02a      	b.n	80152f2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80152a2:	f003 0302 	and.w	r3, r3, #2
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d101      	bne.n	80152ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	e021      	b.n	80152f2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	3304      	adds	r3, #4
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d101      	bne.n	80152be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80152ba:	2300      	movs	r3, #0
 80152bc:	e019      	b.n	80152f2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	405a      	eors	r2, r3
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	3308      	adds	r3, #8
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	4013      	ands	r3, r2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d10d      	bne.n	80152f0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	3308      	adds	r3, #8
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	43da      	mvns	r2, r3
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	3308      	adds	r3, #8
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80152e8:	429a      	cmp	r2, r3
 80152ea:	d101      	bne.n	80152f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80152ec:	2301      	movs	r3, #1
 80152ee:	e000      	b.n	80152f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80152f0:	2300      	movs	r3, #0
  }
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3714      	adds	r7, #20
 80152f6:	46bd      	mov	sp, r7
 80152f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fc:	4770      	bx	lr
	...

08015300 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b084      	sub	sp, #16
 8015304:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015306:	2300      	movs	r3, #0
 8015308:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801530a:	4b12      	ldr	r3, [pc, #72]	; (8015354 <ip_reass_tmr+0x54>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015310:	e018      	b.n	8015344 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	7fdb      	ldrb	r3, [r3, #31]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d00b      	beq.n	8015332 <ip_reass_tmr+0x32>
      r->timer--;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	7fdb      	ldrb	r3, [r3, #31]
 801531e:	3b01      	subs	r3, #1
 8015320:	b2da      	uxtb	r2, r3
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	60fb      	str	r3, [r7, #12]
 8015330:	e008      	b.n	8015344 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801533c:	68b9      	ldr	r1, [r7, #8]
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f000 f80a 	bl	8015358 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d1e3      	bne.n	8015312 <ip_reass_tmr+0x12>
     }
   }
}
 801534a:	bf00      	nop
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	20008a1c 	.word	0x20008a1c

08015358 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b088      	sub	sp, #32
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015362:	2300      	movs	r3, #0
 8015364:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015366:	683a      	ldr	r2, [r7, #0]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	429a      	cmp	r2, r3
 801536c:	d105      	bne.n	801537a <ip_reass_free_complete_datagram+0x22>
 801536e:	4b45      	ldr	r3, [pc, #276]	; (8015484 <ip_reass_free_complete_datagram+0x12c>)
 8015370:	22ab      	movs	r2, #171	; 0xab
 8015372:	4945      	ldr	r1, [pc, #276]	; (8015488 <ip_reass_free_complete_datagram+0x130>)
 8015374:	4845      	ldr	r0, [pc, #276]	; (801548c <ip_reass_free_complete_datagram+0x134>)
 8015376:	f001 f8a9 	bl	80164cc <iprintf>
  if (prev != NULL) {
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d00a      	beq.n	8015396 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	429a      	cmp	r2, r3
 8015388:	d005      	beq.n	8015396 <ip_reass_free_complete_datagram+0x3e>
 801538a:	4b3e      	ldr	r3, [pc, #248]	; (8015484 <ip_reass_free_complete_datagram+0x12c>)
 801538c:	22ad      	movs	r2, #173	; 0xad
 801538e:	4940      	ldr	r1, [pc, #256]	; (8015490 <ip_reass_free_complete_datagram+0x138>)
 8015390:	483e      	ldr	r0, [pc, #248]	; (801548c <ip_reass_free_complete_datagram+0x134>)
 8015392:	f001 f89b 	bl	80164cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	685b      	ldr	r3, [r3, #4]
 801539c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	889b      	ldrh	r3, [r3, #4]
 80153a2:	b29b      	uxth	r3, r3
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d12a      	bne.n	80153fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	681a      	ldr	r2, [r3, #0]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80153b6:	69bb      	ldr	r3, [r7, #24]
 80153b8:	6858      	ldr	r0, [r3, #4]
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	3308      	adds	r3, #8
 80153be:	2214      	movs	r2, #20
 80153c0:	4619      	mov	r1, r3
 80153c2:	f001 f870 	bl	80164a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80153c6:	2101      	movs	r1, #1
 80153c8:	69b8      	ldr	r0, [r7, #24]
 80153ca:	f7ff fc47 	bl	8014c5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80153ce:	69b8      	ldr	r0, [r7, #24]
 80153d0:	f7f6 fc06 	bl	800bbe0 <pbuf_clen>
 80153d4:	4603      	mov	r3, r0
 80153d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80153d8:	8bfa      	ldrh	r2, [r7, #30]
 80153da:	8a7b      	ldrh	r3, [r7, #18]
 80153dc:	4413      	add	r3, r2
 80153de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80153e2:	db05      	blt.n	80153f0 <ip_reass_free_complete_datagram+0x98>
 80153e4:	4b27      	ldr	r3, [pc, #156]	; (8015484 <ip_reass_free_complete_datagram+0x12c>)
 80153e6:	22bc      	movs	r2, #188	; 0xbc
 80153e8:	492a      	ldr	r1, [pc, #168]	; (8015494 <ip_reass_free_complete_datagram+0x13c>)
 80153ea:	4828      	ldr	r0, [pc, #160]	; (801548c <ip_reass_free_complete_datagram+0x134>)
 80153ec:	f001 f86e 	bl	80164cc <iprintf>
    pbufs_freed += clen;
 80153f0:	8bfa      	ldrh	r2, [r7, #30]
 80153f2:	8a7b      	ldrh	r3, [r7, #18]
 80153f4:	4413      	add	r3, r2
 80153f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80153f8:	69b8      	ldr	r0, [r7, #24]
 80153fa:	f7f6 fb57 	bl	800baac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015404:	e01f      	b.n	8015446 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	f7f6 fbe2 	bl	800bbe0 <pbuf_clen>
 801541c:	4603      	mov	r3, r0
 801541e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015420:	8bfa      	ldrh	r2, [r7, #30]
 8015422:	8a7b      	ldrh	r3, [r7, #18]
 8015424:	4413      	add	r3, r2
 8015426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801542a:	db05      	blt.n	8015438 <ip_reass_free_complete_datagram+0xe0>
 801542c:	4b15      	ldr	r3, [pc, #84]	; (8015484 <ip_reass_free_complete_datagram+0x12c>)
 801542e:	22cc      	movs	r2, #204	; 0xcc
 8015430:	4918      	ldr	r1, [pc, #96]	; (8015494 <ip_reass_free_complete_datagram+0x13c>)
 8015432:	4816      	ldr	r0, [pc, #88]	; (801548c <ip_reass_free_complete_datagram+0x134>)
 8015434:	f001 f84a 	bl	80164cc <iprintf>
    pbufs_freed += clen;
 8015438:	8bfa      	ldrh	r2, [r7, #30]
 801543a:	8a7b      	ldrh	r3, [r7, #18]
 801543c:	4413      	add	r3, r2
 801543e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	f7f6 fb33 	bl	800baac <pbuf_free>
  while (p != NULL) {
 8015446:	69bb      	ldr	r3, [r7, #24]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1dc      	bne.n	8015406 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801544c:	6839      	ldr	r1, [r7, #0]
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 f8c2 	bl	80155d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015454:	4b10      	ldr	r3, [pc, #64]	; (8015498 <ip_reass_free_complete_datagram+0x140>)
 8015456:	881b      	ldrh	r3, [r3, #0]
 8015458:	8bfa      	ldrh	r2, [r7, #30]
 801545a:	429a      	cmp	r2, r3
 801545c:	d905      	bls.n	801546a <ip_reass_free_complete_datagram+0x112>
 801545e:	4b09      	ldr	r3, [pc, #36]	; (8015484 <ip_reass_free_complete_datagram+0x12c>)
 8015460:	22d2      	movs	r2, #210	; 0xd2
 8015462:	490e      	ldr	r1, [pc, #56]	; (801549c <ip_reass_free_complete_datagram+0x144>)
 8015464:	4809      	ldr	r0, [pc, #36]	; (801548c <ip_reass_free_complete_datagram+0x134>)
 8015466:	f001 f831 	bl	80164cc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801546a:	4b0b      	ldr	r3, [pc, #44]	; (8015498 <ip_reass_free_complete_datagram+0x140>)
 801546c:	881a      	ldrh	r2, [r3, #0]
 801546e:	8bfb      	ldrh	r3, [r7, #30]
 8015470:	1ad3      	subs	r3, r2, r3
 8015472:	b29a      	uxth	r2, r3
 8015474:	4b08      	ldr	r3, [pc, #32]	; (8015498 <ip_reass_free_complete_datagram+0x140>)
 8015476:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015478:	8bfb      	ldrh	r3, [r7, #30]
}
 801547a:	4618      	mov	r0, r3
 801547c:	3720      	adds	r7, #32
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}
 8015482:	bf00      	nop
 8015484:	08019f48 	.word	0x08019f48
 8015488:	08019f84 	.word	0x08019f84
 801548c:	08019f90 	.word	0x08019f90
 8015490:	08019fb8 	.word	0x08019fb8
 8015494:	08019fcc 	.word	0x08019fcc
 8015498:	20008a20 	.word	0x20008a20
 801549c:	08019fec 	.word	0x08019fec

080154a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08a      	sub	sp, #40	; 0x28
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
 80154a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80154aa:	2300      	movs	r3, #0
 80154ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80154ae:	2300      	movs	r3, #0
 80154b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80154b2:	2300      	movs	r3, #0
 80154b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80154b6:	2300      	movs	r3, #0
 80154b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80154ba:	2300      	movs	r3, #0
 80154bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80154be:	4b28      	ldr	r3, [pc, #160]	; (8015560 <ip_reass_remove_oldest_datagram+0xc0>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80154c4:	e030      	b.n	8015528 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80154c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c8:	695a      	ldr	r2, [r3, #20]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	68db      	ldr	r3, [r3, #12]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d10c      	bne.n	80154ec <ip_reass_remove_oldest_datagram+0x4c>
 80154d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d4:	699a      	ldr	r2, [r3, #24]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	691b      	ldr	r3, [r3, #16]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d106      	bne.n	80154ec <ip_reass_remove_oldest_datagram+0x4c>
 80154de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e0:	899a      	ldrh	r2, [r3, #12]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	889b      	ldrh	r3, [r3, #4]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d014      	beq.n	8015516 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	3301      	adds	r3, #1
 80154f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80154f2:	6a3b      	ldr	r3, [r7, #32]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d104      	bne.n	8015502 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80154f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	61bb      	str	r3, [r7, #24]
 8015500:	e009      	b.n	8015516 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	7fda      	ldrb	r2, [r3, #31]
 8015506:	6a3b      	ldr	r3, [r7, #32]
 8015508:	7fdb      	ldrb	r3, [r3, #31]
 801550a:	429a      	cmp	r2, r3
 801550c:	d803      	bhi.n	8015516 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015510:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015520:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1cb      	bne.n	80154c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801552e:	6a3b      	ldr	r3, [r7, #32]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d008      	beq.n	8015546 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015534:	69b9      	ldr	r1, [r7, #24]
 8015536:	6a38      	ldr	r0, [r7, #32]
 8015538:	f7ff ff0e 	bl	8015358 <ip_reass_free_complete_datagram>
 801553c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	4413      	add	r3, r2
 8015544:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015546:	697a      	ldr	r2, [r7, #20]
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	429a      	cmp	r2, r3
 801554c:	da02      	bge.n	8015554 <ip_reass_remove_oldest_datagram+0xb4>
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	2b01      	cmp	r3, #1
 8015552:	dcac      	bgt.n	80154ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015554:	697b      	ldr	r3, [r7, #20]
}
 8015556:	4618      	mov	r0, r3
 8015558:	3728      	adds	r7, #40	; 0x28
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	20008a1c 	.word	0x20008a1c

08015564 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801556e:	2004      	movs	r0, #4
 8015570:	f7f5 fce8 	bl	800af44 <memp_malloc>
 8015574:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d110      	bne.n	801559e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801557c:	6839      	ldr	r1, [r7, #0]
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7ff ff8e 	bl	80154a0 <ip_reass_remove_oldest_datagram>
 8015584:	4602      	mov	r2, r0
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	4293      	cmp	r3, r2
 801558a:	dc03      	bgt.n	8015594 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801558c:	2004      	movs	r0, #4
 801558e:	f7f5 fcd9 	bl	800af44 <memp_malloc>
 8015592:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d101      	bne.n	801559e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801559a:	2300      	movs	r3, #0
 801559c:	e016      	b.n	80155cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801559e:	2220      	movs	r2, #32
 80155a0:	2100      	movs	r1, #0
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f000 ff8a 	bl	80164bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2203      	movs	r2, #3
 80155ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80155ae:	4b09      	ldr	r3, [pc, #36]	; (80155d4 <ip_reass_enqueue_new_datagram+0x70>)
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80155b6:	4a07      	ldr	r2, [pc, #28]	; (80155d4 <ip_reass_enqueue_new_datagram+0x70>)
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	3308      	adds	r3, #8
 80155c0:	2214      	movs	r2, #20
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f000 ff6e 	bl	80164a6 <memcpy>
  return ipr;
 80155ca:	68fb      	ldr	r3, [r7, #12]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	20008a1c 	.word	0x20008a1c

080155d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80155e2:	4b10      	ldr	r3, [pc, #64]	; (8015624 <ip_reass_dequeue_datagram+0x4c>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	687a      	ldr	r2, [r7, #4]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d104      	bne.n	80155f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4a0c      	ldr	r2, [pc, #48]	; (8015624 <ip_reass_dequeue_datagram+0x4c>)
 80155f2:	6013      	str	r3, [r2, #0]
 80155f4:	e00d      	b.n	8015612 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d106      	bne.n	801560a <ip_reass_dequeue_datagram+0x32>
 80155fc:	4b0a      	ldr	r3, [pc, #40]	; (8015628 <ip_reass_dequeue_datagram+0x50>)
 80155fe:	f240 1245 	movw	r2, #325	; 0x145
 8015602:	490a      	ldr	r1, [pc, #40]	; (801562c <ip_reass_dequeue_datagram+0x54>)
 8015604:	480a      	ldr	r0, [pc, #40]	; (8015630 <ip_reass_dequeue_datagram+0x58>)
 8015606:	f000 ff61 	bl	80164cc <iprintf>
    prev->next = ipr->next;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015612:	6879      	ldr	r1, [r7, #4]
 8015614:	2004      	movs	r0, #4
 8015616:	f7f5 fce7 	bl	800afe8 <memp_free>
}
 801561a:	bf00      	nop
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	20008a1c 	.word	0x20008a1c
 8015628:	08019f48 	.word	0x08019f48
 801562c:	0801a008 	.word	0x0801a008
 8015630:	08019f90 	.word	0x08019f90

08015634 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b08c      	sub	sp, #48	; 0x30
 8015638:	af00      	add	r7, sp, #0
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8015640:	2300      	movs	r3, #0
 8015642:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015644:	2301      	movs	r3, #1
 8015646:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801564e:	69fb      	ldr	r3, [r7, #28]
 8015650:	885b      	ldrh	r3, [r3, #2]
 8015652:	b29b      	uxth	r3, r3
 8015654:	4618      	mov	r0, r3
 8015656:	f7f5 f851 	bl	800a6fc <lwip_htons>
 801565a:	4603      	mov	r3, r0
 801565c:	461a      	mov	r2, r3
 801565e:	69fb      	ldr	r3, [r7, #28]
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	b29b      	uxth	r3, r3
 8015664:	f003 030f 	and.w	r3, r3, #15
 8015668:	b29b      	uxth	r3, r3
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	b29b      	uxth	r3, r3
 801566e:	1ad3      	subs	r3, r2, r3
 8015670:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015672:	69fb      	ldr	r3, [r7, #28]
 8015674:	88db      	ldrh	r3, [r3, #6]
 8015676:	b29b      	uxth	r3, r3
 8015678:	4618      	mov	r0, r3
 801567a:	f7f5 f83f 	bl	800a6fc <lwip_htons>
 801567e:	4603      	mov	r3, r0
 8015680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015684:	b29b      	uxth	r3, r3
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015692:	2200      	movs	r2, #0
 8015694:	701a      	strb	r2, [r3, #0]
 8015696:	2200      	movs	r2, #0
 8015698:	705a      	strb	r2, [r3, #1]
 801569a:	2200      	movs	r2, #0
 801569c:	709a      	strb	r2, [r3, #2]
 801569e:	2200      	movs	r2, #0
 80156a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80156a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a4:	8b3a      	ldrh	r2, [r7, #24]
 80156a6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80156a8:	8b3a      	ldrh	r2, [r7, #24]
 80156aa:	8b7b      	ldrh	r3, [r7, #26]
 80156ac:	4413      	add	r3, r2
 80156ae:	b29a      	uxth	r2, r3
 80156b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	627b      	str	r3, [r7, #36]	; 0x24
 80156ba:	e061      	b.n	8015780 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80156bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80156c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c4:	889b      	ldrh	r3, [r3, #4]
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	889b      	ldrh	r3, [r3, #4]
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d232      	bcs.n	8015738 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80156d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156d6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80156d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d01f      	beq.n	801571e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80156de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e0:	889b      	ldrh	r3, [r3, #4]
 80156e2:	b29a      	uxth	r2, r3
 80156e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e6:	88db      	ldrh	r3, [r3, #6]
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	429a      	cmp	r2, r3
 80156ec:	f0c0 80e3 	bcc.w	80158b6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f2:	88db      	ldrh	r3, [r3, #6]
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	889b      	ldrh	r3, [r3, #4]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	429a      	cmp	r2, r3
 80156fe:	f200 80da 	bhi.w	80158b6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015704:	68ba      	ldr	r2, [r7, #8]
 8015706:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570a:	88db      	ldrh	r3, [r3, #6]
 801570c:	b29a      	uxth	r2, r3
 801570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015710:	889b      	ldrh	r3, [r3, #4]
 8015712:	b29b      	uxth	r3, r3
 8015714:	429a      	cmp	r2, r3
 8015716:	d037      	beq.n	8015788 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015718:	2300      	movs	r3, #0
 801571a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801571c:	e034      	b.n	8015788 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015720:	88db      	ldrh	r3, [r3, #6]
 8015722:	b29a      	uxth	r2, r3
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	889b      	ldrh	r3, [r3, #4]
 8015728:	b29b      	uxth	r3, r3
 801572a:	429a      	cmp	r2, r3
 801572c:	f200 80c5 	bhi.w	80158ba <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	68ba      	ldr	r2, [r7, #8]
 8015734:	605a      	str	r2, [r3, #4]
      break;
 8015736:	e027      	b.n	8015788 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8015738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573a:	889b      	ldrh	r3, [r3, #4]
 801573c:	b29a      	uxth	r2, r3
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	889b      	ldrh	r3, [r3, #4]
 8015742:	b29b      	uxth	r3, r3
 8015744:	429a      	cmp	r2, r3
 8015746:	f000 80ba 	beq.w	80158be <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574c:	889b      	ldrh	r3, [r3, #4]
 801574e:	b29a      	uxth	r2, r3
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	88db      	ldrh	r3, [r3, #6]
 8015754:	b29b      	uxth	r3, r3
 8015756:	429a      	cmp	r2, r3
 8015758:	f0c0 80b3 	bcc.w	80158c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575e:	2b00      	cmp	r3, #0
 8015760:	d009      	beq.n	8015776 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	88db      	ldrh	r3, [r3, #6]
 8015766:	b29a      	uxth	r2, r3
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	889b      	ldrh	r3, [r3, #4]
 801576c:	b29b      	uxth	r3, r3
 801576e:	429a      	cmp	r2, r3
 8015770:	d001      	beq.n	8015776 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015772:	2300      	movs	r3, #0
 8015774:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015782:	2b00      	cmp	r3, #0
 8015784:	d19a      	bne.n	80156bc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8015786:	e000      	b.n	801578a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8015788:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578c:	2b00      	cmp	r3, #0
 801578e:	d12d      	bne.n	80157ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	2b00      	cmp	r3, #0
 8015794:	d01c      	beq.n	80157d0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015798:	88db      	ldrh	r3, [r3, #6]
 801579a:	b29a      	uxth	r2, r3
 801579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579e:	889b      	ldrh	r3, [r3, #4]
 80157a0:	b29b      	uxth	r3, r3
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d906      	bls.n	80157b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80157a6:	4b51      	ldr	r3, [pc, #324]	; (80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80157a8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80157ac:	4950      	ldr	r1, [pc, #320]	; (80158f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80157ae:	4851      	ldr	r0, [pc, #324]	; (80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80157b0:	f000 fe8c 	bl	80164cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80157b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157b6:	68ba      	ldr	r2, [r7, #8]
 80157b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80157ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157bc:	88db      	ldrh	r3, [r3, #6]
 80157be:	b29a      	uxth	r2, r3
 80157c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c2:	889b      	ldrh	r3, [r3, #4]
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d010      	beq.n	80157ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	623b      	str	r3, [r7, #32]
 80157ce:	e00d      	b.n	80157ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d006      	beq.n	80157e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80157d8:	4b44      	ldr	r3, [pc, #272]	; (80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80157da:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80157de:	4946      	ldr	r1, [pc, #280]	; (80158f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80157e0:	4844      	ldr	r0, [pc, #272]	; (80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80157e2:	f000 fe73 	bl	80164cc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	68ba      	ldr	r2, [r7, #8]
 80157ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d105      	bne.n	80157fe <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	7f9b      	ldrb	r3, [r3, #30]
 80157f6:	f003 0301 	and.w	r3, r3, #1
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d059      	beq.n	80158b2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80157fe:	6a3b      	ldr	r3, [r7, #32]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d04f      	beq.n	80158a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d006      	beq.n	801581a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	889b      	ldrh	r3, [r3, #4]
 8015814:	b29b      	uxth	r3, r3
 8015816:	2b00      	cmp	r3, #0
 8015818:	d002      	beq.n	8015820 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	623b      	str	r3, [r7, #32]
 801581e:	e041      	b.n	80158a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015822:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801582a:	e012      	b.n	8015852 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015834:	88db      	ldrh	r3, [r3, #6]
 8015836:	b29a      	uxth	r2, r3
 8015838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583a:	889b      	ldrh	r3, [r3, #4]
 801583c:	b29b      	uxth	r3, r3
 801583e:	429a      	cmp	r2, r3
 8015840:	d002      	beq.n	8015848 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8015842:	2300      	movs	r3, #0
 8015844:	623b      	str	r3, [r7, #32]
            break;
 8015846:	e007      	b.n	8015858 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8015848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015854:	2b00      	cmp	r3, #0
 8015856:	d1e9      	bne.n	801582c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015858:	6a3b      	ldr	r3, [r7, #32]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d022      	beq.n	80158a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d106      	bne.n	8015874 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8015866:	4b21      	ldr	r3, [pc, #132]	; (80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015868:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801586c:	4923      	ldr	r1, [pc, #140]	; (80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801586e:	4821      	ldr	r0, [pc, #132]	; (80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015870:	f000 fe2c 	bl	80164cc <iprintf>
          LWIP_ASSERT("sanity check",
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801587c:	429a      	cmp	r2, r3
 801587e:	d106      	bne.n	801588e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015880:	4b1a      	ldr	r3, [pc, #104]	; (80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015882:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015886:	491d      	ldr	r1, [pc, #116]	; (80158fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015888:	481a      	ldr	r0, [pc, #104]	; (80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801588a:	f000 fe1f 	bl	80164cc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d006      	beq.n	80158a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8015896:	4b15      	ldr	r3, [pc, #84]	; (80158ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015898:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801589c:	4918      	ldr	r1, [pc, #96]	; (8015900 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801589e:	4815      	ldr	r0, [pc, #84]	; (80158f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80158a0:	f000 fe14 	bl	80164cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80158a4:	6a3b      	ldr	r3, [r7, #32]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	bf14      	ite	ne
 80158aa:	2301      	movne	r3, #1
 80158ac:	2300      	moveq	r3, #0
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	e018      	b.n	80158e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80158b2:	2300      	movs	r3, #0
 80158b4:	e016      	b.n	80158e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80158b6:	bf00      	nop
 80158b8:	e004      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80158ba:	bf00      	nop
 80158bc:	e002      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80158be:	bf00      	nop
 80158c0:	e000      	b.n	80158c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80158c2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80158c4:	68b8      	ldr	r0, [r7, #8]
 80158c6:	f7f6 f98b 	bl	800bbe0 <pbuf_clen>
 80158ca:	4603      	mov	r3, r0
 80158cc:	461a      	mov	r2, r3
 80158ce:	4b0d      	ldr	r3, [pc, #52]	; (8015904 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80158d0:	881b      	ldrh	r3, [r3, #0]
 80158d2:	1a9b      	subs	r3, r3, r2
 80158d4:	b29a      	uxth	r2, r3
 80158d6:	4b0b      	ldr	r3, [pc, #44]	; (8015904 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80158d8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80158da:	68b8      	ldr	r0, [r7, #8]
 80158dc:	f7f6 f8e6 	bl	800baac <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3730      	adds	r7, #48	; 0x30
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}
 80158ec:	08019f48 	.word	0x08019f48
 80158f0:	0801a024 	.word	0x0801a024
 80158f4:	08019f90 	.word	0x08019f90
 80158f8:	0801a044 	.word	0x0801a044
 80158fc:	0801a07c 	.word	0x0801a07c
 8015900:	0801a08c 	.word	0x0801a08c
 8015904:	20008a20 	.word	0x20008a20

08015908 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b08e      	sub	sp, #56	; 0x38
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	f003 030f 	and.w	r3, r3, #15
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	2b14      	cmp	r3, #20
 8015922:	f040 8131 	bne.w	8015b88 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015928:	88db      	ldrh	r3, [r3, #6]
 801592a:	b29b      	uxth	r3, r3
 801592c:	4618      	mov	r0, r3
 801592e:	f7f4 fee5 	bl	800a6fc <lwip_htons>
 8015932:	4603      	mov	r3, r0
 8015934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015938:	b29b      	uxth	r3, r3
 801593a:	00db      	lsls	r3, r3, #3
 801593c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015940:	885b      	ldrh	r3, [r3, #2]
 8015942:	b29b      	uxth	r3, r3
 8015944:	4618      	mov	r0, r3
 8015946:	f7f4 fed9 	bl	800a6fc <lwip_htons>
 801594a:	4603      	mov	r3, r0
 801594c:	461a      	mov	r2, r3
 801594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	b29b      	uxth	r3, r3
 8015954:	f003 030f 	and.w	r3, r3, #15
 8015958:	b29b      	uxth	r3, r3
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	b29b      	uxth	r3, r3
 801595e:	1ad3      	subs	r3, r2, r3
 8015960:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f7f6 f93c 	bl	800bbe0 <pbuf_clen>
 8015968:	4603      	mov	r3, r0
 801596a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801596c:	4b8d      	ldr	r3, [pc, #564]	; (8015ba4 <ip4_reass+0x29c>)
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	461a      	mov	r2, r3
 8015972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015974:	4413      	add	r3, r2
 8015976:	2b0a      	cmp	r3, #10
 8015978:	dd10      	ble.n	801599c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801597a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801597c:	4619      	mov	r1, r3
 801597e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015980:	f7ff fd8e 	bl	80154a0 <ip_reass_remove_oldest_datagram>
 8015984:	4603      	mov	r3, r0
 8015986:	2b00      	cmp	r3, #0
 8015988:	f000 8100 	beq.w	8015b8c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801598c:	4b85      	ldr	r3, [pc, #532]	; (8015ba4 <ip4_reass+0x29c>)
 801598e:	881b      	ldrh	r3, [r3, #0]
 8015990:	461a      	mov	r2, r3
 8015992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015994:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015996:	2b0a      	cmp	r3, #10
 8015998:	f300 80f8 	bgt.w	8015b8c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801599c:	4b82      	ldr	r3, [pc, #520]	; (8015ba8 <ip4_reass+0x2a0>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	633b      	str	r3, [r7, #48]	; 0x30
 80159a2:	e015      	b.n	80159d0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80159a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a6:	695a      	ldr	r2, [r3, #20]
 80159a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d10c      	bne.n	80159ca <ip4_reass+0xc2>
 80159b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b2:	699a      	ldr	r2, [r3, #24]
 80159b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b6:	691b      	ldr	r3, [r3, #16]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d106      	bne.n	80159ca <ip4_reass+0xc2>
 80159bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159be:	899a      	ldrh	r2, [r3, #12]
 80159c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c2:	889b      	ldrh	r3, [r3, #4]
 80159c4:	b29b      	uxth	r3, r3
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d006      	beq.n	80159d8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80159ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	633b      	str	r3, [r7, #48]	; 0x30
 80159d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d1e6      	bne.n	80159a4 <ip4_reass+0x9c>
 80159d6:	e000      	b.n	80159da <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80159d8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d109      	bne.n	80159f4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80159e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e2:	4619      	mov	r1, r3
 80159e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159e6:	f7ff fdbd 	bl	8015564 <ip_reass_enqueue_new_datagram>
 80159ea:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d11c      	bne.n	8015a2c <ip4_reass+0x124>
      goto nullreturn;
 80159f2:	e0ce      	b.n	8015b92 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80159f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f6:	88db      	ldrh	r3, [r3, #6]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f4 fe7e 	bl	800a6fc <lwip_htons>
 8015a00:	4603      	mov	r3, r0
 8015a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d110      	bne.n	8015a2c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0c:	89db      	ldrh	r3, [r3, #14]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7f4 fe74 	bl	800a6fc <lwip_htons>
 8015a14:	4603      	mov	r3, r0
 8015a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d006      	beq.n	8015a2c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a20:	3308      	adds	r3, #8
 8015a22:	2214      	movs	r2, #20
 8015a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 fd3d 	bl	80164a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2e:	88db      	ldrh	r3, [r3, #6]
 8015a30:	b29b      	uxth	r3, r3
 8015a32:	f003 0320 	and.w	r3, r3, #32
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	bf0c      	ite	eq
 8015a3a:	2301      	moveq	r3, #1
 8015a3c:	2300      	movne	r3, #0
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d00e      	beq.n	8015a66 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a4c:	4413      	add	r3, r2
 8015a4e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015a50:	8b7a      	ldrh	r2, [r7, #26]
 8015a52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015a54:	429a      	cmp	r2, r3
 8015a56:	f0c0 8099 	bcc.w	8015b8c <ip4_reass+0x284>
 8015a5a:	8b7b      	ldrh	r3, [r7, #26]
 8015a5c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015a60:	4293      	cmp	r3, r2
 8015a62:	f200 8093 	bhi.w	8015b8c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015a66:	69fa      	ldr	r2, [r7, #28]
 8015a68:	6879      	ldr	r1, [r7, #4]
 8015a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a6c:	f7ff fde2 	bl	8015634 <ip_reass_chain_frag_into_datagram_and_validate>
 8015a70:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a78:	f000 808a 	beq.w	8015b90 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015a7c:	4b49      	ldr	r3, [pc, #292]	; (8015ba4 <ip4_reass+0x29c>)
 8015a7e:	881a      	ldrh	r2, [r3, #0]
 8015a80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a82:	4413      	add	r3, r2
 8015a84:	b29a      	uxth	r2, r3
 8015a86:	4b47      	ldr	r3, [pc, #284]	; (8015ba4 <ip4_reass+0x29c>)
 8015a88:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d00d      	beq.n	8015aac <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8015a90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015a94:	4413      	add	r3, r2
 8015a96:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	8a7a      	ldrh	r2, [r7, #18]
 8015a9c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa0:	7f9b      	ldrb	r3, [r3, #30]
 8015aa2:	f043 0301 	orr.w	r3, r3, #1
 8015aa6:	b2da      	uxtb	r2, r3
 8015aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aaa:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d168      	bne.n	8015b84 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8015ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab4:	8b9b      	ldrh	r3, [r3, #28]
 8015ab6:	3314      	adds	r3, #20
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015abc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	685b      	ldr	r3, [r3, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8015ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad2:	3308      	adds	r3, #8
 8015ad4:	2214      	movs	r2, #20
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ada:	f000 fce4 	bl	80164a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae0:	8b9b      	ldrh	r3, [r3, #28]
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7f4 fe0a 	bl	800a6fc <lwip_htons>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	461a      	mov	r2, r3
 8015aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af2:	2200      	movs	r2, #0
 8015af4:	719a      	strb	r2, [r3, #6]
 8015af6:	2200      	movs	r2, #0
 8015af8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afc:	2200      	movs	r2, #0
 8015afe:	729a      	strb	r2, [r3, #10]
 8015b00:	2200      	movs	r2, #0
 8015b02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015b0a:	e00e      	b.n	8015b2a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8015b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8015b12:	f06f 0113 	mvn.w	r1, #19
 8015b16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015b18:	f7f5 ffa4 	bl	800ba64 <pbuf_header>
      pbuf_cat(p, r);
 8015b1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f7f6 f89e 	bl	800bc60 <pbuf_cat>
      r = iprh->next_pbuf;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d1ed      	bne.n	8015b0c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015b30:	4b1d      	ldr	r3, [pc, #116]	; (8015ba8 <ip4_reass+0x2a0>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d102      	bne.n	8015b40 <ip4_reass+0x238>
      ipr_prev = NULL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b3e:	e010      	b.n	8015b62 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b40:	4b19      	ldr	r3, [pc, #100]	; (8015ba8 <ip4_reass+0x2a0>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b46:	e007      	b.n	8015b58 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8015b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d006      	beq.n	8015b60 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1f4      	bne.n	8015b48 <ip4_reass+0x240>
 8015b5e:	e000      	b.n	8015b62 <ip4_reass+0x25a>
          break;
 8015b60:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b66:	f7ff fd37 	bl	80155d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f7f6 f838 	bl	800bbe0 <pbuf_clen>
 8015b70:	4603      	mov	r3, r0
 8015b72:	461a      	mov	r2, r3
 8015b74:	4b0b      	ldr	r3, [pc, #44]	; (8015ba4 <ip4_reass+0x29c>)
 8015b76:	881b      	ldrh	r3, [r3, #0]
 8015b78:	1a9b      	subs	r3, r3, r2
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	4b09      	ldr	r3, [pc, #36]	; (8015ba4 <ip4_reass+0x29c>)
 8015b7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	e00a      	b.n	8015b9a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015b84:	2300      	movs	r3, #0
 8015b86:	e008      	b.n	8015b9a <ip4_reass+0x292>
    goto nullreturn;
 8015b88:	bf00      	nop
 8015b8a:	e002      	b.n	8015b92 <ip4_reass+0x28a>

nullreturn:
 8015b8c:	bf00      	nop
 8015b8e:	e000      	b.n	8015b92 <ip4_reass+0x28a>
    goto nullreturn;
 8015b90:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f7f5 ff8a 	bl	800baac <pbuf_free>
  return NULL;
 8015b98:	2300      	movs	r3, #0
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3738      	adds	r7, #56	; 0x38
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	20008a20 	.word	0x20008a20
 8015ba8:	20008a1c 	.word	0x20008a1c

08015bac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8015bb0:	2005      	movs	r0, #5
 8015bb2:	f7f5 f9c7 	bl	800af44 <memp_malloc>
 8015bb6:	4603      	mov	r3, r0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	bd80      	pop	{r7, pc}

08015bbc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d106      	bne.n	8015bd8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015bca:	4b07      	ldr	r3, [pc, #28]	; (8015be8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015bcc:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015bd0:	4906      	ldr	r1, [pc, #24]	; (8015bec <ip_frag_free_pbuf_custom_ref+0x30>)
 8015bd2:	4807      	ldr	r0, [pc, #28]	; (8015bf0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015bd4:	f000 fc7a 	bl	80164cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015bd8:	6879      	ldr	r1, [r7, #4]
 8015bda:	2005      	movs	r0, #5
 8015bdc:	f7f5 fa04 	bl	800afe8 <memp_free>
}
 8015be0:	bf00      	nop
 8015be2:	3708      	adds	r7, #8
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}
 8015be8:	08019f48 	.word	0x08019f48
 8015bec:	0801a0b0 	.word	0x0801a0b0
 8015bf0:	08019f90 	.word	0x08019f90

08015bf4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <ipfrag_free_pbuf_custom+0x20>
 8015c06:	4b11      	ldr	r3, [pc, #68]	; (8015c4c <ipfrag_free_pbuf_custom+0x58>)
 8015c08:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8015c0c:	4910      	ldr	r1, [pc, #64]	; (8015c50 <ipfrag_free_pbuf_custom+0x5c>)
 8015c0e:	4811      	ldr	r0, [pc, #68]	; (8015c54 <ipfrag_free_pbuf_custom+0x60>)
 8015c10:	f000 fc5c 	bl	80164cc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8015c14:	68fa      	ldr	r2, [r7, #12]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d006      	beq.n	8015c2a <ipfrag_free_pbuf_custom+0x36>
 8015c1c:	4b0b      	ldr	r3, [pc, #44]	; (8015c4c <ipfrag_free_pbuf_custom+0x58>)
 8015c1e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8015c22:	490d      	ldr	r1, [pc, #52]	; (8015c58 <ipfrag_free_pbuf_custom+0x64>)
 8015c24:	480b      	ldr	r0, [pc, #44]	; (8015c54 <ipfrag_free_pbuf_custom+0x60>)
 8015c26:	f000 fc51 	bl	80164cc <iprintf>
  if (pcr->original != NULL) {
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	695b      	ldr	r3, [r3, #20]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d004      	beq.n	8015c3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	695b      	ldr	r3, [r3, #20]
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f5 ff38 	bl	800baac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015c3c:	68f8      	ldr	r0, [r7, #12]
 8015c3e:	f7ff ffbd 	bl	8015bbc <ip_frag_free_pbuf_custom_ref>
}
 8015c42:	bf00      	nop
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	08019f48 	.word	0x08019f48
 8015c50:	0801a0bc 	.word	0x0801a0bc
 8015c54:	08019f90 	.word	0x08019f90
 8015c58:	0801a0c8 	.word	0x0801a0c8

08015c5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b092      	sub	sp, #72	; 0x48
 8015c60:	af02      	add	r7, sp, #8
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015c70:	3b14      	subs	r3, #20
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	da00      	bge.n	8015c78 <ip4_frag+0x1c>
 8015c76:	3307      	adds	r3, #7
 8015c78:	10db      	asrs	r3, r3, #3
 8015c7a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015c7c:	2314      	movs	r3, #20
 8015c7e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8015c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c88:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8015c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	f003 030f 	and.w	r3, r3, #15
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	2b14      	cmp	r3, #20
 8015c96:	d009      	beq.n	8015cac <ip4_frag+0x50>
 8015c98:	4b79      	ldr	r3, [pc, #484]	; (8015e80 <ip4_frag+0x224>)
 8015c9a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8015c9e:	4979      	ldr	r1, [pc, #484]	; (8015e84 <ip4_frag+0x228>)
 8015ca0:	4879      	ldr	r0, [pc, #484]	; (8015e88 <ip4_frag+0x22c>)
 8015ca2:	f000 fc13 	bl	80164cc <iprintf>
 8015ca6:	f06f 0305 	mvn.w	r3, #5
 8015caa:	e0e5      	b.n	8015e78 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cae:	88db      	ldrh	r3, [r3, #6]
 8015cb0:	b29b      	uxth	r3, r3
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7f4 fd22 	bl	800a6fc <lwip_htons>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8015cbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015cbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cc2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8015cc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d009      	beq.n	8015ce2 <ip4_frag+0x86>
 8015cce:	4b6c      	ldr	r3, [pc, #432]	; (8015e80 <ip4_frag+0x224>)
 8015cd0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015cd4:	496d      	ldr	r1, [pc, #436]	; (8015e8c <ip4_frag+0x230>)
 8015cd6:	486c      	ldr	r0, [pc, #432]	; (8015e88 <ip4_frag+0x22c>)
 8015cd8:	f000 fbf8 	bl	80164cc <iprintf>
 8015cdc:	f06f 0305 	mvn.w	r3, #5
 8015ce0:	e0ca      	b.n	8015e78 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	891b      	ldrh	r3, [r3, #8]
 8015ce6:	3b14      	subs	r3, #20
 8015ce8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8015cea:	e0bc      	b.n	8015e66 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8015cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015cee:	00da      	lsls	r2, r3, #3
 8015cf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	bfa8      	it	ge
 8015cf6:	4613      	movge	r3, r2
 8015cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	2114      	movs	r1, #20
 8015cfe:	2002      	movs	r0, #2
 8015d00:	f7f5 fb62 	bl	800b3c8 <pbuf_alloc>
 8015d04:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	f000 80b2 	beq.w	8015e72 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	895b      	ldrh	r3, [r3, #10]
 8015d12:	2b13      	cmp	r3, #19
 8015d14:	d806      	bhi.n	8015d24 <ip4_frag+0xc8>
 8015d16:	4b5a      	ldr	r3, [pc, #360]	; (8015e80 <ip4_frag+0x224>)
 8015d18:	f240 3209 	movw	r2, #777	; 0x309
 8015d1c:	495c      	ldr	r1, [pc, #368]	; (8015e90 <ip4_frag+0x234>)
 8015d1e:	485a      	ldr	r0, [pc, #360]	; (8015e88 <ip4_frag+0x22c>)
 8015d20:	f000 fbd4 	bl	80164cc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015d24:	6a3b      	ldr	r3, [r7, #32]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	2214      	movs	r2, #20
 8015d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f000 fbba 	bl	80164a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015d32:	6a3b      	ldr	r3, [r7, #32]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8015d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8015d3c:	e04f      	b.n	8015dde <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	895a      	ldrh	r2, [r3, #10]
 8015d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015d48:	8b7a      	ldrh	r2, [r7, #26]
 8015d4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	bf28      	it	cs
 8015d50:	4613      	movcs	r3, r2
 8015d52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015d54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d105      	bne.n	8015d66 <ip4_frag+0x10a>
        poff = 0;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	60fb      	str	r3, [r7, #12]
        continue;
 8015d64:	e03b      	b.n	8015dde <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015d66:	f7ff ff21 	bl	8015bac <ip_frag_alloc_pbuf_custom_ref>
 8015d6a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d103      	bne.n	8015d7a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8015d72:	6a38      	ldr	r0, [r7, #32]
 8015d74:	f7f5 fe9a 	bl	800baac <pbuf_free>
        goto memerr;
 8015d78:	e07c      	b.n	8015e74 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d7a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d82:	4413      	add	r3, r2
 8015d84:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8015d86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d88:	9201      	str	r2, [sp, #4]
 8015d8a:	9300      	str	r3, [sp, #0]
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	2202      	movs	r2, #2
 8015d90:	2004      	movs	r0, #4
 8015d92:	f7f5 fcad 	bl	800b6f0 <pbuf_alloced_custom>
 8015d96:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d106      	bne.n	8015dac <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015d9e:	6978      	ldr	r0, [r7, #20]
 8015da0:	f7ff ff0c 	bl	8015bbc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015da4:	6a38      	ldr	r0, [r7, #32]
 8015da6:	f7f5 fe81 	bl	800baac <pbuf_free>
        goto memerr;
 8015daa:	e063      	b.n	8015e74 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f7f5 ff2f 	bl	800bc10 <pbuf_ref>
      pcr->original = p;
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	4a36      	ldr	r2, [pc, #216]	; (8015e94 <ip4_frag+0x238>)
 8015dbc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015dbe:	6939      	ldr	r1, [r7, #16]
 8015dc0:	6a38      	ldr	r0, [r7, #32]
 8015dc2:	f7f5 ff4d 	bl	800bc60 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8015dc6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8015dc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8015dce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d004      	beq.n	8015dde <ip4_frag+0x182>
        poff = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015dde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d1ac      	bne.n	8015d3e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8015de4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015de6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015de8:	4413      	add	r3, r2
 8015dea:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015dec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015df2:	3b14      	subs	r3, #20
 8015df4:	429a      	cmp	r2, r3
 8015df6:	bfd4      	ite	le
 8015df8:	2301      	movle	r3, #1
 8015dfa:	2300      	movgt	r3, #0
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015e00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e06:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8015e08:	69fb      	ldr	r3, [r7, #28]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d103      	bne.n	8015e16 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8015e0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015e14:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015e16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7f4 fc6f 	bl	800a6fc <lwip_htons>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	461a      	mov	r2, r3
 8015e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8015e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e28:	3314      	adds	r3, #20
 8015e2a:	b29b      	uxth	r3, r3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7f4 fc65 	bl	800a6fc <lwip_htons>
 8015e32:	4603      	mov	r3, r0
 8015e34:	461a      	mov	r2, r3
 8015e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	729a      	strb	r2, [r3, #10]
 8015e40:	2200      	movs	r2, #0
 8015e42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	695b      	ldr	r3, [r3, #20]
 8015e48:	687a      	ldr	r2, [r7, #4]
 8015e4a:	6a39      	ldr	r1, [r7, #32]
 8015e4c:	68b8      	ldr	r0, [r7, #8]
 8015e4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015e50:	6a38      	ldr	r0, [r7, #32]
 8015e52:	f7f5 fe2b 	bl	800baac <pbuf_free>
    left -= fragsize;
 8015e56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8015e5e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015e60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8015e62:	4413      	add	r3, r2
 8015e64:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8015e66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	f47f af3f 	bne.w	8015cec <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e002      	b.n	8015e78 <ip4_frag+0x21c>
      goto memerr;
 8015e72:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	3740      	adds	r7, #64	; 0x40
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}
 8015e80:	08019f48 	.word	0x08019f48
 8015e84:	0801a0d4 	.word	0x0801a0d4
 8015e88:	08019f90 	.word	0x08019f90
 8015e8c:	0801a0fc 	.word	0x0801a0fc
 8015e90:	0801a118 	.word	0x0801a118
 8015e94:	08015bf5 	.word	0x08015bf5

08015e98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8015ea2:	230e      	movs	r3, #14
 8015ea4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	895b      	ldrh	r3, [r3, #10]
 8015eaa:	2b0e      	cmp	r3, #14
 8015eac:	d977      	bls.n	8015f9e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	7b1a      	ldrb	r2, [r3, #12]
 8015eb8:	7b5b      	ldrb	r3, [r3, #13]
 8015eba:	021b      	lsls	r3, r3, #8
 8015ebc:	4313      	orrs	r3, r2
 8015ebe:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	f003 0301 	and.w	r3, r3, #1
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d023      	beq.n	8015f14 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	2b01      	cmp	r3, #1
 8015ed2:	d10f      	bne.n	8015ef4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	785b      	ldrb	r3, [r3, #1]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d11b      	bne.n	8015f14 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015ee0:	2b5e      	cmp	r3, #94	; 0x5e
 8015ee2:	d117      	bne.n	8015f14 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	7b5b      	ldrb	r3, [r3, #13]
 8015ee8:	f043 0310 	orr.w	r3, r3, #16
 8015eec:	b2da      	uxtb	r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	735a      	strb	r2, [r3, #13]
 8015ef2:	e00f      	b.n	8015f14 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	2206      	movs	r2, #6
 8015ef8:	4930      	ldr	r1, [pc, #192]	; (8015fbc <ethernet_input+0x124>)
 8015efa:	4618      	mov	r0, r3
 8015efc:	f000 fac4 	bl	8016488 <memcmp>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d106      	bne.n	8015f14 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	7b5b      	ldrb	r3, [r3, #13]
 8015f0a:	f043 0308 	orr.w	r3, r3, #8
 8015f0e:	b2da      	uxtb	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015f14:	89fb      	ldrh	r3, [r7, #14]
 8015f16:	2b08      	cmp	r3, #8
 8015f18:	d003      	beq.n	8015f22 <ethernet_input+0x8a>
 8015f1a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015f1e:	d01e      	beq.n	8015f5e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015f20:	e044      	b.n	8015fac <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015f28:	f003 0308 	and.w	r3, r3, #8
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d038      	beq.n	8015fa2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	895b      	ldrh	r3, [r3, #10]
 8015f34:	461a      	mov	r2, r3
 8015f36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	db33      	blt.n	8015fa6 <ethernet_input+0x10e>
 8015f3e:	8afb      	ldrh	r3, [r7, #22]
 8015f40:	425b      	negs	r3, r3
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	b21b      	sxth	r3, r3
 8015f46:	4619      	mov	r1, r3
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7f5 fd8b 	bl	800ba64 <pbuf_header>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d128      	bne.n	8015fa6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f7fe ff62 	bl	8014e20 <ip4_input>
      break;
 8015f5c:	e01d      	b.n	8015f9a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015f64:	f003 0308 	and.w	r3, r3, #8
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d01e      	beq.n	8015faa <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	895b      	ldrh	r3, [r3, #10]
 8015f70:	461a      	mov	r2, r3
 8015f72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	db15      	blt.n	8015fa6 <ethernet_input+0x10e>
 8015f7a:	8afb      	ldrh	r3, [r7, #22]
 8015f7c:	425b      	negs	r3, r3
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	b21b      	sxth	r3, r3
 8015f82:	4619      	mov	r1, r3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7f5 fd6d 	bl	800ba64 <pbuf_header>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d10a      	bne.n	8015fa6 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8015f90:	6839      	ldr	r1, [r7, #0]
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f7fe f92c 	bl	80141f0 <etharp_input>
      break;
 8015f98:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	e00a      	b.n	8015fb4 <ethernet_input+0x11c>
    goto free_and_return;
 8015f9e:	bf00      	nop
 8015fa0:	e004      	b.n	8015fac <ethernet_input+0x114>
        goto free_and_return;
 8015fa2:	bf00      	nop
 8015fa4:	e002      	b.n	8015fac <ethernet_input+0x114>

free_and_return:
 8015fa6:	bf00      	nop
 8015fa8:	e000      	b.n	8015fac <ethernet_input+0x114>
        goto free_and_return;
 8015faa:	bf00      	nop
  pbuf_free(p);
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7f5 fd7d 	bl	800baac <pbuf_free>
  return ERR_OK;
 8015fb2:	2300      	movs	r3, #0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3718      	adds	r7, #24
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	080256e0 	.word	0x080256e0

08015fc0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
 8015fcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015fce:	8c3b      	ldrh	r3, [r7, #32]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7f4 fb93 	bl	800a6fc <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8015fda:	210e      	movs	r1, #14
 8015fdc:	68b8      	ldr	r0, [r7, #8]
 8015fde:	f7f5 fd41 	bl	800ba64 <pbuf_header>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d125      	bne.n	8016034 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	685b      	ldr	r3, [r3, #4]
 8015fec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	8afa      	ldrh	r2, [r7, #22]
 8015ff2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	2206      	movs	r2, #6
 8015ff8:	6839      	ldr	r1, [r7, #0]
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f000 fa53 	bl	80164a6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	3306      	adds	r3, #6
 8016004:	2206      	movs	r2, #6
 8016006:	6879      	ldr	r1, [r7, #4]
 8016008:	4618      	mov	r0, r3
 801600a:	f000 fa4c 	bl	80164a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016014:	2b06      	cmp	r3, #6
 8016016:	d006      	beq.n	8016026 <ethernet_output+0x66>
 8016018:	4b0a      	ldr	r3, [pc, #40]	; (8016044 <ethernet_output+0x84>)
 801601a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801601e:	490a      	ldr	r1, [pc, #40]	; (8016048 <ethernet_output+0x88>)
 8016020:	480a      	ldr	r0, [pc, #40]	; (801604c <ethernet_output+0x8c>)
 8016022:	f000 fa53 	bl	80164cc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	699b      	ldr	r3, [r3, #24]
 801602a:	68b9      	ldr	r1, [r7, #8]
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	4798      	blx	r3
 8016030:	4603      	mov	r3, r0
 8016032:	e002      	b.n	801603a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016034:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016036:	f06f 0301 	mvn.w	r3, #1
}
 801603a:	4618      	mov	r0, r3
 801603c:	3718      	adds	r7, #24
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	0801a138 	.word	0x0801a138
 8016048:	0801a170 	.word	0x0801a170
 801604c:	0801a1a4 	.word	0x0801a1a4

08016050 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	60bb      	str	r3, [r7, #8]
 801605e:	2304      	movs	r3, #4
 8016060:	60fb      	str	r3, [r7, #12]
 8016062:	2300      	movs	r3, #0
 8016064:	613b      	str	r3, [r7, #16]
 8016066:	2300      	movs	r3, #0
 8016068:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801606a:	f107 0308 	add.w	r3, r7, #8
 801606e:	2100      	movs	r1, #0
 8016070:	4618      	mov	r0, r3
 8016072:	f7ee fdc4 	bl	8004bfe <osMessageCreate>
 8016076:	4602      	mov	r2, r0
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d102      	bne.n	801608a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016088:	e000      	b.n	801608c <sys_mbox_new+0x3c>

  return ERR_OK;
 801608a:	2300      	movs	r3, #0
}
 801608c:	4618      	mov	r0, r3
 801608e:	3718      	adds	r7, #24
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}

08016094 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ee fe89 	bl	8004db8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7ee fe9a 	bl	8004de4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80160b0:	bf00      	nop
 80160b2:	3708      	adds	r7, #8
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b082      	sub	sp, #8
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80160c2:	bf00      	nop
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	6839      	ldr	r1, [r7, #0]
 80160ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ee fdbe 	bl	8004c50 <osMessagePut>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1f4      	bne.n	80160c4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80160da:	bf00      	nop
 80160dc:	3708      	adds	r7, #8
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b084      	sub	sp, #16
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	6078      	str	r0, [r7, #4]
 80160ea:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	6839      	ldr	r1, [r7, #0]
 80160f2:	2200      	movs	r2, #0
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7ee fdab 	bl	8004c50 <osMessagePut>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d102      	bne.n	8016106 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016100:	2300      	movs	r3, #0
 8016102:	73fb      	strb	r3, [r7, #15]
 8016104:	e001      	b.n	801610a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016106:	23ff      	movs	r3, #255	; 0xff
 8016108:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801610a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3710      	adds	r7, #16
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}

08016116 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016116:	b580      	push	{r7, lr}
 8016118:	b08c      	sub	sp, #48	; 0x30
 801611a:	af00      	add	r7, sp, #0
 801611c:	61f8      	str	r0, [r7, #28]
 801611e:	61b9      	str	r1, [r7, #24]
 8016120:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016122:	f7ee fb95 	bl	8004850 <osKernelSysTick>
 8016126:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016128:	697b      	ldr	r3, [r7, #20]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d017      	beq.n	801615e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801612e:	69fb      	ldr	r3, [r7, #28]
 8016130:	6819      	ldr	r1, [r3, #0]
 8016132:	f107 0320 	add.w	r3, r7, #32
 8016136:	697a      	ldr	r2, [r7, #20]
 8016138:	4618      	mov	r0, r3
 801613a:	f7ee fdc9 	bl	8004cd0 <osMessageGet>

    if(event.status == osEventMessage)
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	2b10      	cmp	r3, #16
 8016142:	d109      	bne.n	8016158 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016146:	461a      	mov	r2, r3
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801614c:	f7ee fb80 	bl	8004850 <osKernelSysTick>
 8016150:	4602      	mov	r2, r0
 8016152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016154:	1ad3      	subs	r3, r2, r3
 8016156:	e019      	b.n	801618c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801615c:	e016      	b.n	801618c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	6819      	ldr	r1, [r3, #0]
 8016162:	463b      	mov	r3, r7
 8016164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016168:	4618      	mov	r0, r3
 801616a:	f7ee fdb1 	bl	8004cd0 <osMessageGet>
 801616e:	f107 0320 	add.w	r3, r7, #32
 8016172:	463a      	mov	r2, r7
 8016174:	ca07      	ldmia	r2, {r0, r1, r2}
 8016176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801617c:	461a      	mov	r2, r3
 801617e:	69bb      	ldr	r3, [r7, #24]
 8016180:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016182:	f7ee fb65 	bl	8004850 <osKernelSysTick>
 8016186:	4602      	mov	r2, r0
 8016188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801618c:	4618      	mov	r0, r3
 801618e:	3730      	adds	r7, #48	; 0x30
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}

08016194 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	6819      	ldr	r1, [r3, #0]
 80161a2:	f107 030c 	add.w	r3, r7, #12
 80161a6:	2200      	movs	r2, #0
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7ee fd91 	bl	8004cd0 <osMessageGet>

  if(event.status == osEventMessage)
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2b10      	cmp	r3, #16
 80161b2:	d105      	bne.n	80161c0 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	461a      	mov	r2, r3
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80161bc:	2300      	movs	r3, #0
 80161be:	e001      	b.n	80161c4 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80161c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3718      	adds	r7, #24
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d101      	bne.n	80161e0 <sys_mbox_valid+0x14>
    return 0;
 80161dc:	2300      	movs	r3, #0
 80161de:	e000      	b.n	80161e2 <sys_mbox_valid+0x16>
  else
    return 1;
 80161e0:	2301      	movs	r3, #1
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	370c      	adds	r7, #12
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr

080161ee <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80161ee:	b480      	push	{r7}
 80161f0:	b083      	sub	sp, #12
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	2200      	movs	r2, #0
 80161fa:	601a      	str	r2, [r3, #0]
}
 80161fc:	bf00      	nop
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	460b      	mov	r3, r1
 8016212:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016214:	2300      	movs	r3, #0
 8016216:	60bb      	str	r3, [r7, #8]
 8016218:	2300      	movs	r3, #0
 801621a:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801621c:	f107 0308 	add.w	r3, r7, #8
 8016220:	2101      	movs	r1, #1
 8016222:	4618      	mov	r0, r3
 8016224:	f7ee fc20 	bl	8004a68 <osSemaphoreCreate>
 8016228:	4602      	mov	r2, r0
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d102      	bne.n	801623c <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801623a:	e009      	b.n	8016250 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801623c:	78fb      	ldrb	r3, [r7, #3]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d105      	bne.n	801624e <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2100      	movs	r1, #0
 8016248:	4618      	mov	r0, r3
 801624a:	f7ee fc41 	bl	8004ad0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801624e:	2300      	movs	r3, #0
}
 8016250:	4618      	mov	r0, r3
 8016252:	3710      	adds	r7, #16
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}

08016258 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016262:	f7ee faf5 	bl	8004850 <osKernelSysTick>
 8016266:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d011      	beq.n	8016292 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	6839      	ldr	r1, [r7, #0]
 8016274:	4618      	mov	r0, r3
 8016276:	f7ee fc2b 	bl	8004ad0 <osSemaphoreWait>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d105      	bne.n	801628c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016280:	f7ee fae6 	bl	8004850 <osKernelSysTick>
 8016284:	4602      	mov	r2, r0
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	1ad3      	subs	r3, r2, r3
 801628a:	e012      	b.n	80162b2 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801628c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016290:	e00f      	b.n	80162b2 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016292:	bf00      	nop
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801629c:	4618      	mov	r0, r3
 801629e:	f7ee fc17 	bl	8004ad0 <osSemaphoreWait>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d1f5      	bne.n	8016294 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80162a8:	f7ee fad2 	bl	8004850 <osKernelSysTick>
 80162ac:	4602      	mov	r2, r0
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3710      	adds	r7, #16
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}

080162ba <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80162ba:	b580      	push	{r7, lr}
 80162bc:	b082      	sub	sp, #8
 80162be:	af00      	add	r7, sp, #0
 80162c0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	4618      	mov	r0, r3
 80162c8:	f7ee fc50 	bl	8004b6c <osSemaphoreRelease>
}
 80162cc:	bf00      	nop
 80162ce:	3708      	adds	r7, #8
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b082      	sub	sp, #8
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7ee fc79 	bl	8004bd8 <osSemaphoreDelete>
}
 80162e6:	bf00      	nop
 80162e8:	3708      	adds	r7, #8
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}

080162ee <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80162ee:	b480      	push	{r7}
 80162f0:	b083      	sub	sp, #12
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d101      	bne.n	8016302 <sys_sem_valid+0x14>
    return 0;
 80162fe:	2300      	movs	r3, #0
 8016300:	e000      	b.n	8016304 <sys_sem_valid+0x16>
  else
    return 1;
 8016302:	2301      	movs	r3, #1
}
 8016304:	4618      	mov	r0, r3
 8016306:	370c      	adds	r7, #12
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr

08016310 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2200      	movs	r2, #0
 801631c:	601a      	str	r2, [r3, #0]
}
 801631e:	bf00      	nop
 8016320:	370c      	adds	r7, #12
 8016322:	46bd      	mov	sp, r7
 8016324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016328:	4770      	bx	lr
	...

0801632c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016330:	4803      	ldr	r0, [pc, #12]	; (8016340 <sys_init+0x14>)
 8016332:	f7ee fafd 	bl	8004930 <osMutexCreate>
 8016336:	4602      	mov	r2, r0
 8016338:	4b02      	ldr	r3, [pc, #8]	; (8016344 <sys_init+0x18>)
 801633a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801633c:	bf00      	nop
 801633e:	bd80      	pop	{r7, pc}
 8016340:	080256f0 	.word	0x080256f0
 8016344:	2000f7a4 	.word	0x2000f7a4

08016348 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016350:	2300      	movs	r3, #0
 8016352:	60bb      	str	r3, [r7, #8]
 8016354:	2300      	movs	r3, #0
 8016356:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016358:	f107 0308 	add.w	r3, r7, #8
 801635c:	4618      	mov	r0, r3
 801635e:	f7ee fae7 	bl	8004930 <osMutexCreate>
 8016362:	4602      	mov	r2, r0
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d102      	bne.n	8016376 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016374:	e000      	b.n	8016378 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016376:	2300      	movs	r3, #0
}
 8016378:	4618      	mov	r0, r3
 801637a:	3710      	adds	r7, #16
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016390:	4618      	mov	r0, r3
 8016392:	f7ee fae5 	bl	8004960 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016396:	bf00      	nop
 8016398:	3708      	adds	r7, #8
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}

0801639e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7ee fb26 	bl	80049fc <osMutexRelease>
}
 80163b0:	bf00      	nop
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b08c      	sub	sp, #48	; 0x30
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
 80163c4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80163c6:	f107 0314 	add.w	r3, r7, #20
 80163ca:	2200      	movs	r2, #0
 80163cc:	601a      	str	r2, [r3, #0]
 80163ce:	605a      	str	r2, [r3, #4]
 80163d0:	609a      	str	r2, [r3, #8]
 80163d2:	60da      	str	r2, [r3, #12]
 80163d4:	611a      	str	r2, [r3, #16]
 80163d6:	615a      	str	r2, [r3, #20]
 80163d8:	619a      	str	r2, [r3, #24]
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	617b      	str	r3, [r7, #20]
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	61bb      	str	r3, [r7, #24]
 80163e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e4:	b21b      	sxth	r3, r3
 80163e6:	83bb      	strh	r3, [r7, #28]
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80163ec:	f107 0314 	add.w	r3, r7, #20
 80163f0:	6879      	ldr	r1, [r7, #4]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7ee fa3c 	bl	8004870 <osThreadCreate>
 80163f8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3730      	adds	r7, #48	; 0x30
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
	...

08016404 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016408:	4b04      	ldr	r3, [pc, #16]	; (801641c <sys_arch_protect+0x18>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016410:	4618      	mov	r0, r3
 8016412:	f7ee faa5 	bl	8004960 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016416:	2301      	movs	r3, #1
}
 8016418:	4618      	mov	r0, r3
 801641a:	bd80      	pop	{r7, pc}
 801641c:	2000f7a4 	.word	0x2000f7a4

08016420 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016428:	4b04      	ldr	r3, [pc, #16]	; (801643c <sys_arch_unprotect+0x1c>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	4618      	mov	r0, r3
 801642e:	f7ee fae5 	bl	80049fc <osMutexRelease>
}
 8016432:	bf00      	nop
 8016434:	3708      	adds	r7, #8
 8016436:	46bd      	mov	sp, r7
 8016438:	bd80      	pop	{r7, pc}
 801643a:	bf00      	nop
 801643c:	2000f7a4 	.word	0x2000f7a4

08016440 <__libc_init_array>:
 8016440:	b570      	push	{r4, r5, r6, lr}
 8016442:	4e0d      	ldr	r6, [pc, #52]	; (8016478 <__libc_init_array+0x38>)
 8016444:	4c0d      	ldr	r4, [pc, #52]	; (801647c <__libc_init_array+0x3c>)
 8016446:	1ba4      	subs	r4, r4, r6
 8016448:	10a4      	asrs	r4, r4, #2
 801644a:	2500      	movs	r5, #0
 801644c:	42a5      	cmp	r5, r4
 801644e:	d109      	bne.n	8016464 <__libc_init_array+0x24>
 8016450:	4e0b      	ldr	r6, [pc, #44]	; (8016480 <__libc_init_array+0x40>)
 8016452:	4c0c      	ldr	r4, [pc, #48]	; (8016484 <__libc_init_array+0x44>)
 8016454:	f000 ff7a 	bl	801734c <_init>
 8016458:	1ba4      	subs	r4, r4, r6
 801645a:	10a4      	asrs	r4, r4, #2
 801645c:	2500      	movs	r5, #0
 801645e:	42a5      	cmp	r5, r4
 8016460:	d105      	bne.n	801646e <__libc_init_array+0x2e>
 8016462:	bd70      	pop	{r4, r5, r6, pc}
 8016464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016468:	4798      	blx	r3
 801646a:	3501      	adds	r5, #1
 801646c:	e7ee      	b.n	801644c <__libc_init_array+0xc>
 801646e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016472:	4798      	blx	r3
 8016474:	3501      	adds	r5, #1
 8016476:	e7f2      	b.n	801645e <__libc_init_array+0x1e>
 8016478:	08025798 	.word	0x08025798
 801647c:	08025798 	.word	0x08025798
 8016480:	08025798 	.word	0x08025798
 8016484:	0802579c 	.word	0x0802579c

08016488 <memcmp>:
 8016488:	b530      	push	{r4, r5, lr}
 801648a:	2400      	movs	r4, #0
 801648c:	42a2      	cmp	r2, r4
 801648e:	d101      	bne.n	8016494 <memcmp+0xc>
 8016490:	2000      	movs	r0, #0
 8016492:	e007      	b.n	80164a4 <memcmp+0x1c>
 8016494:	5d03      	ldrb	r3, [r0, r4]
 8016496:	3401      	adds	r4, #1
 8016498:	190d      	adds	r5, r1, r4
 801649a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801649e:	42ab      	cmp	r3, r5
 80164a0:	d0f4      	beq.n	801648c <memcmp+0x4>
 80164a2:	1b58      	subs	r0, r3, r5
 80164a4:	bd30      	pop	{r4, r5, pc}

080164a6 <memcpy>:
 80164a6:	b510      	push	{r4, lr}
 80164a8:	1e43      	subs	r3, r0, #1
 80164aa:	440a      	add	r2, r1
 80164ac:	4291      	cmp	r1, r2
 80164ae:	d100      	bne.n	80164b2 <memcpy+0xc>
 80164b0:	bd10      	pop	{r4, pc}
 80164b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164ba:	e7f7      	b.n	80164ac <memcpy+0x6>

080164bc <memset>:
 80164bc:	4402      	add	r2, r0
 80164be:	4603      	mov	r3, r0
 80164c0:	4293      	cmp	r3, r2
 80164c2:	d100      	bne.n	80164c6 <memset+0xa>
 80164c4:	4770      	bx	lr
 80164c6:	f803 1b01 	strb.w	r1, [r3], #1
 80164ca:	e7f9      	b.n	80164c0 <memset+0x4>

080164cc <iprintf>:
 80164cc:	b40f      	push	{r0, r1, r2, r3}
 80164ce:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <iprintf+0x2c>)
 80164d0:	b513      	push	{r0, r1, r4, lr}
 80164d2:	681c      	ldr	r4, [r3, #0]
 80164d4:	b124      	cbz	r4, 80164e0 <iprintf+0x14>
 80164d6:	69a3      	ldr	r3, [r4, #24]
 80164d8:	b913      	cbnz	r3, 80164e0 <iprintf+0x14>
 80164da:	4620      	mov	r0, r4
 80164dc:	f000 f8a2 	bl	8016624 <__sinit>
 80164e0:	ab05      	add	r3, sp, #20
 80164e2:	9a04      	ldr	r2, [sp, #16]
 80164e4:	68a1      	ldr	r1, [r4, #8]
 80164e6:	9301      	str	r3, [sp, #4]
 80164e8:	4620      	mov	r0, r4
 80164ea:	f000 f9ff 	bl	80168ec <_vfiprintf_r>
 80164ee:	b002      	add	sp, #8
 80164f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164f4:	b004      	add	sp, #16
 80164f6:	4770      	bx	lr
 80164f8:	20000020 	.word	0x20000020

080164fc <rand>:
 80164fc:	b538      	push	{r3, r4, r5, lr}
 80164fe:	4b13      	ldr	r3, [pc, #76]	; (801654c <rand+0x50>)
 8016500:	681c      	ldr	r4, [r3, #0]
 8016502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016504:	b97b      	cbnz	r3, 8016526 <rand+0x2a>
 8016506:	2018      	movs	r0, #24
 8016508:	f000 f916 	bl	8016738 <malloc>
 801650c:	4a10      	ldr	r2, [pc, #64]	; (8016550 <rand+0x54>)
 801650e:	4b11      	ldr	r3, [pc, #68]	; (8016554 <rand+0x58>)
 8016510:	63a0      	str	r0, [r4, #56]	; 0x38
 8016512:	e9c0 2300 	strd	r2, r3, [r0]
 8016516:	4b10      	ldr	r3, [pc, #64]	; (8016558 <rand+0x5c>)
 8016518:	6083      	str	r3, [r0, #8]
 801651a:	230b      	movs	r3, #11
 801651c:	8183      	strh	r3, [r0, #12]
 801651e:	2201      	movs	r2, #1
 8016520:	2300      	movs	r3, #0
 8016522:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016528:	480c      	ldr	r0, [pc, #48]	; (801655c <rand+0x60>)
 801652a:	690a      	ldr	r2, [r1, #16]
 801652c:	694b      	ldr	r3, [r1, #20]
 801652e:	4c0c      	ldr	r4, [pc, #48]	; (8016560 <rand+0x64>)
 8016530:	4350      	muls	r0, r2
 8016532:	fb04 0003 	mla	r0, r4, r3, r0
 8016536:	fba2 2304 	umull	r2, r3, r2, r4
 801653a:	4403      	add	r3, r0
 801653c:	1c54      	adds	r4, r2, #1
 801653e:	f143 0500 	adc.w	r5, r3, #0
 8016542:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016546:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801654a:	bd38      	pop	{r3, r4, r5, pc}
 801654c:	20000020 	.word	0x20000020
 8016550:	abcd330e 	.word	0xabcd330e
 8016554:	e66d1234 	.word	0xe66d1234
 8016558:	0005deec 	.word	0x0005deec
 801655c:	5851f42d 	.word	0x5851f42d
 8016560:	4c957f2d 	.word	0x4c957f2d

08016564 <strchr>:
 8016564:	b2c9      	uxtb	r1, r1
 8016566:	4603      	mov	r3, r0
 8016568:	f810 2b01 	ldrb.w	r2, [r0], #1
 801656c:	b11a      	cbz	r2, 8016576 <strchr+0x12>
 801656e:	428a      	cmp	r2, r1
 8016570:	d1f9      	bne.n	8016566 <strchr+0x2>
 8016572:	4618      	mov	r0, r3
 8016574:	4770      	bx	lr
 8016576:	2900      	cmp	r1, #0
 8016578:	bf18      	it	ne
 801657a:	2300      	movne	r3, #0
 801657c:	e7f9      	b.n	8016572 <strchr+0xe>

0801657e <strncmp>:
 801657e:	b510      	push	{r4, lr}
 8016580:	b16a      	cbz	r2, 801659e <strncmp+0x20>
 8016582:	3901      	subs	r1, #1
 8016584:	1884      	adds	r4, r0, r2
 8016586:	f810 3b01 	ldrb.w	r3, [r0], #1
 801658a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801658e:	4293      	cmp	r3, r2
 8016590:	d103      	bne.n	801659a <strncmp+0x1c>
 8016592:	42a0      	cmp	r0, r4
 8016594:	d001      	beq.n	801659a <strncmp+0x1c>
 8016596:	2b00      	cmp	r3, #0
 8016598:	d1f5      	bne.n	8016586 <strncmp+0x8>
 801659a:	1a98      	subs	r0, r3, r2
 801659c:	bd10      	pop	{r4, pc}
 801659e:	4610      	mov	r0, r2
 80165a0:	e7fc      	b.n	801659c <strncmp+0x1e>
	...

080165a4 <std>:
 80165a4:	2300      	movs	r3, #0
 80165a6:	b510      	push	{r4, lr}
 80165a8:	4604      	mov	r4, r0
 80165aa:	e9c0 3300 	strd	r3, r3, [r0]
 80165ae:	6083      	str	r3, [r0, #8]
 80165b0:	8181      	strh	r1, [r0, #12]
 80165b2:	6643      	str	r3, [r0, #100]	; 0x64
 80165b4:	81c2      	strh	r2, [r0, #14]
 80165b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165ba:	6183      	str	r3, [r0, #24]
 80165bc:	4619      	mov	r1, r3
 80165be:	2208      	movs	r2, #8
 80165c0:	305c      	adds	r0, #92	; 0x5c
 80165c2:	f7ff ff7b 	bl	80164bc <memset>
 80165c6:	4b05      	ldr	r3, [pc, #20]	; (80165dc <std+0x38>)
 80165c8:	6263      	str	r3, [r4, #36]	; 0x24
 80165ca:	4b05      	ldr	r3, [pc, #20]	; (80165e0 <std+0x3c>)
 80165cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80165ce:	4b05      	ldr	r3, [pc, #20]	; (80165e4 <std+0x40>)
 80165d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80165d2:	4b05      	ldr	r3, [pc, #20]	; (80165e8 <std+0x44>)
 80165d4:	6224      	str	r4, [r4, #32]
 80165d6:	6323      	str	r3, [r4, #48]	; 0x30
 80165d8:	bd10      	pop	{r4, pc}
 80165da:	bf00      	nop
 80165dc:	08016e49 	.word	0x08016e49
 80165e0:	08016e6b 	.word	0x08016e6b
 80165e4:	08016ea3 	.word	0x08016ea3
 80165e8:	08016ec7 	.word	0x08016ec7

080165ec <_cleanup_r>:
 80165ec:	4901      	ldr	r1, [pc, #4]	; (80165f4 <_cleanup_r+0x8>)
 80165ee:	f000 b885 	b.w	80166fc <_fwalk_reent>
 80165f2:	bf00      	nop
 80165f4:	080171a1 	.word	0x080171a1

080165f8 <__sfmoreglue>:
 80165f8:	b570      	push	{r4, r5, r6, lr}
 80165fa:	1e4a      	subs	r2, r1, #1
 80165fc:	2568      	movs	r5, #104	; 0x68
 80165fe:	4355      	muls	r5, r2
 8016600:	460e      	mov	r6, r1
 8016602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016606:	f000 f8ed 	bl	80167e4 <_malloc_r>
 801660a:	4604      	mov	r4, r0
 801660c:	b140      	cbz	r0, 8016620 <__sfmoreglue+0x28>
 801660e:	2100      	movs	r1, #0
 8016610:	e9c0 1600 	strd	r1, r6, [r0]
 8016614:	300c      	adds	r0, #12
 8016616:	60a0      	str	r0, [r4, #8]
 8016618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801661c:	f7ff ff4e 	bl	80164bc <memset>
 8016620:	4620      	mov	r0, r4
 8016622:	bd70      	pop	{r4, r5, r6, pc}

08016624 <__sinit>:
 8016624:	6983      	ldr	r3, [r0, #24]
 8016626:	b510      	push	{r4, lr}
 8016628:	4604      	mov	r4, r0
 801662a:	bb33      	cbnz	r3, 801667a <__sinit+0x56>
 801662c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016630:	6503      	str	r3, [r0, #80]	; 0x50
 8016632:	4b12      	ldr	r3, [pc, #72]	; (801667c <__sinit+0x58>)
 8016634:	4a12      	ldr	r2, [pc, #72]	; (8016680 <__sinit+0x5c>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	6282      	str	r2, [r0, #40]	; 0x28
 801663a:	4298      	cmp	r0, r3
 801663c:	bf04      	itt	eq
 801663e:	2301      	moveq	r3, #1
 8016640:	6183      	streq	r3, [r0, #24]
 8016642:	f000 f81f 	bl	8016684 <__sfp>
 8016646:	6060      	str	r0, [r4, #4]
 8016648:	4620      	mov	r0, r4
 801664a:	f000 f81b 	bl	8016684 <__sfp>
 801664e:	60a0      	str	r0, [r4, #8]
 8016650:	4620      	mov	r0, r4
 8016652:	f000 f817 	bl	8016684 <__sfp>
 8016656:	2200      	movs	r2, #0
 8016658:	60e0      	str	r0, [r4, #12]
 801665a:	2104      	movs	r1, #4
 801665c:	6860      	ldr	r0, [r4, #4]
 801665e:	f7ff ffa1 	bl	80165a4 <std>
 8016662:	2201      	movs	r2, #1
 8016664:	2109      	movs	r1, #9
 8016666:	68a0      	ldr	r0, [r4, #8]
 8016668:	f7ff ff9c 	bl	80165a4 <std>
 801666c:	2202      	movs	r2, #2
 801666e:	2112      	movs	r1, #18
 8016670:	68e0      	ldr	r0, [r4, #12]
 8016672:	f7ff ff97 	bl	80165a4 <std>
 8016676:	2301      	movs	r3, #1
 8016678:	61a3      	str	r3, [r4, #24]
 801667a:	bd10      	pop	{r4, pc}
 801667c:	080256f8 	.word	0x080256f8
 8016680:	080165ed 	.word	0x080165ed

08016684 <__sfp>:
 8016684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016686:	4b1b      	ldr	r3, [pc, #108]	; (80166f4 <__sfp+0x70>)
 8016688:	681e      	ldr	r6, [r3, #0]
 801668a:	69b3      	ldr	r3, [r6, #24]
 801668c:	4607      	mov	r7, r0
 801668e:	b913      	cbnz	r3, 8016696 <__sfp+0x12>
 8016690:	4630      	mov	r0, r6
 8016692:	f7ff ffc7 	bl	8016624 <__sinit>
 8016696:	3648      	adds	r6, #72	; 0x48
 8016698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801669c:	3b01      	subs	r3, #1
 801669e:	d503      	bpl.n	80166a8 <__sfp+0x24>
 80166a0:	6833      	ldr	r3, [r6, #0]
 80166a2:	b133      	cbz	r3, 80166b2 <__sfp+0x2e>
 80166a4:	6836      	ldr	r6, [r6, #0]
 80166a6:	e7f7      	b.n	8016698 <__sfp+0x14>
 80166a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80166ac:	b16d      	cbz	r5, 80166ca <__sfp+0x46>
 80166ae:	3468      	adds	r4, #104	; 0x68
 80166b0:	e7f4      	b.n	801669c <__sfp+0x18>
 80166b2:	2104      	movs	r1, #4
 80166b4:	4638      	mov	r0, r7
 80166b6:	f7ff ff9f 	bl	80165f8 <__sfmoreglue>
 80166ba:	6030      	str	r0, [r6, #0]
 80166bc:	2800      	cmp	r0, #0
 80166be:	d1f1      	bne.n	80166a4 <__sfp+0x20>
 80166c0:	230c      	movs	r3, #12
 80166c2:	603b      	str	r3, [r7, #0]
 80166c4:	4604      	mov	r4, r0
 80166c6:	4620      	mov	r0, r4
 80166c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166ca:	4b0b      	ldr	r3, [pc, #44]	; (80166f8 <__sfp+0x74>)
 80166cc:	6665      	str	r5, [r4, #100]	; 0x64
 80166ce:	e9c4 5500 	strd	r5, r5, [r4]
 80166d2:	60a5      	str	r5, [r4, #8]
 80166d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80166d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80166dc:	2208      	movs	r2, #8
 80166de:	4629      	mov	r1, r5
 80166e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80166e4:	f7ff feea 	bl	80164bc <memset>
 80166e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80166ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80166f0:	e7e9      	b.n	80166c6 <__sfp+0x42>
 80166f2:	bf00      	nop
 80166f4:	080256f8 	.word	0x080256f8
 80166f8:	ffff0001 	.word	0xffff0001

080166fc <_fwalk_reent>:
 80166fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016700:	4680      	mov	r8, r0
 8016702:	4689      	mov	r9, r1
 8016704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016708:	2600      	movs	r6, #0
 801670a:	b914      	cbnz	r4, 8016712 <_fwalk_reent+0x16>
 801670c:	4630      	mov	r0, r6
 801670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016712:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016716:	3f01      	subs	r7, #1
 8016718:	d501      	bpl.n	801671e <_fwalk_reent+0x22>
 801671a:	6824      	ldr	r4, [r4, #0]
 801671c:	e7f5      	b.n	801670a <_fwalk_reent+0xe>
 801671e:	89ab      	ldrh	r3, [r5, #12]
 8016720:	2b01      	cmp	r3, #1
 8016722:	d907      	bls.n	8016734 <_fwalk_reent+0x38>
 8016724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016728:	3301      	adds	r3, #1
 801672a:	d003      	beq.n	8016734 <_fwalk_reent+0x38>
 801672c:	4629      	mov	r1, r5
 801672e:	4640      	mov	r0, r8
 8016730:	47c8      	blx	r9
 8016732:	4306      	orrs	r6, r0
 8016734:	3568      	adds	r5, #104	; 0x68
 8016736:	e7ee      	b.n	8016716 <_fwalk_reent+0x1a>

08016738 <malloc>:
 8016738:	4b02      	ldr	r3, [pc, #8]	; (8016744 <malloc+0xc>)
 801673a:	4601      	mov	r1, r0
 801673c:	6818      	ldr	r0, [r3, #0]
 801673e:	f000 b851 	b.w	80167e4 <_malloc_r>
 8016742:	bf00      	nop
 8016744:	20000020 	.word	0x20000020

08016748 <_free_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	4605      	mov	r5, r0
 801674c:	2900      	cmp	r1, #0
 801674e:	d045      	beq.n	80167dc <_free_r+0x94>
 8016750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016754:	1f0c      	subs	r4, r1, #4
 8016756:	2b00      	cmp	r3, #0
 8016758:	bfb8      	it	lt
 801675a:	18e4      	addlt	r4, r4, r3
 801675c:	f000 fdc0 	bl	80172e0 <__malloc_lock>
 8016760:	4a1f      	ldr	r2, [pc, #124]	; (80167e0 <_free_r+0x98>)
 8016762:	6813      	ldr	r3, [r2, #0]
 8016764:	4610      	mov	r0, r2
 8016766:	b933      	cbnz	r3, 8016776 <_free_r+0x2e>
 8016768:	6063      	str	r3, [r4, #4]
 801676a:	6014      	str	r4, [r2, #0]
 801676c:	4628      	mov	r0, r5
 801676e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016772:	f000 bdb6 	b.w	80172e2 <__malloc_unlock>
 8016776:	42a3      	cmp	r3, r4
 8016778:	d90c      	bls.n	8016794 <_free_r+0x4c>
 801677a:	6821      	ldr	r1, [r4, #0]
 801677c:	1862      	adds	r2, r4, r1
 801677e:	4293      	cmp	r3, r2
 8016780:	bf04      	itt	eq
 8016782:	681a      	ldreq	r2, [r3, #0]
 8016784:	685b      	ldreq	r3, [r3, #4]
 8016786:	6063      	str	r3, [r4, #4]
 8016788:	bf04      	itt	eq
 801678a:	1852      	addeq	r2, r2, r1
 801678c:	6022      	streq	r2, [r4, #0]
 801678e:	6004      	str	r4, [r0, #0]
 8016790:	e7ec      	b.n	801676c <_free_r+0x24>
 8016792:	4613      	mov	r3, r2
 8016794:	685a      	ldr	r2, [r3, #4]
 8016796:	b10a      	cbz	r2, 801679c <_free_r+0x54>
 8016798:	42a2      	cmp	r2, r4
 801679a:	d9fa      	bls.n	8016792 <_free_r+0x4a>
 801679c:	6819      	ldr	r1, [r3, #0]
 801679e:	1858      	adds	r0, r3, r1
 80167a0:	42a0      	cmp	r0, r4
 80167a2:	d10b      	bne.n	80167bc <_free_r+0x74>
 80167a4:	6820      	ldr	r0, [r4, #0]
 80167a6:	4401      	add	r1, r0
 80167a8:	1858      	adds	r0, r3, r1
 80167aa:	4282      	cmp	r2, r0
 80167ac:	6019      	str	r1, [r3, #0]
 80167ae:	d1dd      	bne.n	801676c <_free_r+0x24>
 80167b0:	6810      	ldr	r0, [r2, #0]
 80167b2:	6852      	ldr	r2, [r2, #4]
 80167b4:	605a      	str	r2, [r3, #4]
 80167b6:	4401      	add	r1, r0
 80167b8:	6019      	str	r1, [r3, #0]
 80167ba:	e7d7      	b.n	801676c <_free_r+0x24>
 80167bc:	d902      	bls.n	80167c4 <_free_r+0x7c>
 80167be:	230c      	movs	r3, #12
 80167c0:	602b      	str	r3, [r5, #0]
 80167c2:	e7d3      	b.n	801676c <_free_r+0x24>
 80167c4:	6820      	ldr	r0, [r4, #0]
 80167c6:	1821      	adds	r1, r4, r0
 80167c8:	428a      	cmp	r2, r1
 80167ca:	bf04      	itt	eq
 80167cc:	6811      	ldreq	r1, [r2, #0]
 80167ce:	6852      	ldreq	r2, [r2, #4]
 80167d0:	6062      	str	r2, [r4, #4]
 80167d2:	bf04      	itt	eq
 80167d4:	1809      	addeq	r1, r1, r0
 80167d6:	6021      	streq	r1, [r4, #0]
 80167d8:	605c      	str	r4, [r3, #4]
 80167da:	e7c7      	b.n	801676c <_free_r+0x24>
 80167dc:	bd38      	pop	{r3, r4, r5, pc}
 80167de:	bf00      	nop
 80167e0:	20008a24 	.word	0x20008a24

080167e4 <_malloc_r>:
 80167e4:	b570      	push	{r4, r5, r6, lr}
 80167e6:	1ccd      	adds	r5, r1, #3
 80167e8:	f025 0503 	bic.w	r5, r5, #3
 80167ec:	3508      	adds	r5, #8
 80167ee:	2d0c      	cmp	r5, #12
 80167f0:	bf38      	it	cc
 80167f2:	250c      	movcc	r5, #12
 80167f4:	2d00      	cmp	r5, #0
 80167f6:	4606      	mov	r6, r0
 80167f8:	db01      	blt.n	80167fe <_malloc_r+0x1a>
 80167fa:	42a9      	cmp	r1, r5
 80167fc:	d903      	bls.n	8016806 <_malloc_r+0x22>
 80167fe:	230c      	movs	r3, #12
 8016800:	6033      	str	r3, [r6, #0]
 8016802:	2000      	movs	r0, #0
 8016804:	bd70      	pop	{r4, r5, r6, pc}
 8016806:	f000 fd6b 	bl	80172e0 <__malloc_lock>
 801680a:	4a21      	ldr	r2, [pc, #132]	; (8016890 <_malloc_r+0xac>)
 801680c:	6814      	ldr	r4, [r2, #0]
 801680e:	4621      	mov	r1, r4
 8016810:	b991      	cbnz	r1, 8016838 <_malloc_r+0x54>
 8016812:	4c20      	ldr	r4, [pc, #128]	; (8016894 <_malloc_r+0xb0>)
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	b91b      	cbnz	r3, 8016820 <_malloc_r+0x3c>
 8016818:	4630      	mov	r0, r6
 801681a:	f000 fb05 	bl	8016e28 <_sbrk_r>
 801681e:	6020      	str	r0, [r4, #0]
 8016820:	4629      	mov	r1, r5
 8016822:	4630      	mov	r0, r6
 8016824:	f000 fb00 	bl	8016e28 <_sbrk_r>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	d124      	bne.n	8016876 <_malloc_r+0x92>
 801682c:	230c      	movs	r3, #12
 801682e:	6033      	str	r3, [r6, #0]
 8016830:	4630      	mov	r0, r6
 8016832:	f000 fd56 	bl	80172e2 <__malloc_unlock>
 8016836:	e7e4      	b.n	8016802 <_malloc_r+0x1e>
 8016838:	680b      	ldr	r3, [r1, #0]
 801683a:	1b5b      	subs	r3, r3, r5
 801683c:	d418      	bmi.n	8016870 <_malloc_r+0x8c>
 801683e:	2b0b      	cmp	r3, #11
 8016840:	d90f      	bls.n	8016862 <_malloc_r+0x7e>
 8016842:	600b      	str	r3, [r1, #0]
 8016844:	50cd      	str	r5, [r1, r3]
 8016846:	18cc      	adds	r4, r1, r3
 8016848:	4630      	mov	r0, r6
 801684a:	f000 fd4a 	bl	80172e2 <__malloc_unlock>
 801684e:	f104 000b 	add.w	r0, r4, #11
 8016852:	1d23      	adds	r3, r4, #4
 8016854:	f020 0007 	bic.w	r0, r0, #7
 8016858:	1ac3      	subs	r3, r0, r3
 801685a:	d0d3      	beq.n	8016804 <_malloc_r+0x20>
 801685c:	425a      	negs	r2, r3
 801685e:	50e2      	str	r2, [r4, r3]
 8016860:	e7d0      	b.n	8016804 <_malloc_r+0x20>
 8016862:	428c      	cmp	r4, r1
 8016864:	684b      	ldr	r3, [r1, #4]
 8016866:	bf16      	itet	ne
 8016868:	6063      	strne	r3, [r4, #4]
 801686a:	6013      	streq	r3, [r2, #0]
 801686c:	460c      	movne	r4, r1
 801686e:	e7eb      	b.n	8016848 <_malloc_r+0x64>
 8016870:	460c      	mov	r4, r1
 8016872:	6849      	ldr	r1, [r1, #4]
 8016874:	e7cc      	b.n	8016810 <_malloc_r+0x2c>
 8016876:	1cc4      	adds	r4, r0, #3
 8016878:	f024 0403 	bic.w	r4, r4, #3
 801687c:	42a0      	cmp	r0, r4
 801687e:	d005      	beq.n	801688c <_malloc_r+0xa8>
 8016880:	1a21      	subs	r1, r4, r0
 8016882:	4630      	mov	r0, r6
 8016884:	f000 fad0 	bl	8016e28 <_sbrk_r>
 8016888:	3001      	adds	r0, #1
 801688a:	d0cf      	beq.n	801682c <_malloc_r+0x48>
 801688c:	6025      	str	r5, [r4, #0]
 801688e:	e7db      	b.n	8016848 <_malloc_r+0x64>
 8016890:	20008a24 	.word	0x20008a24
 8016894:	20008a28 	.word	0x20008a28

08016898 <__sfputc_r>:
 8016898:	6893      	ldr	r3, [r2, #8]
 801689a:	3b01      	subs	r3, #1
 801689c:	2b00      	cmp	r3, #0
 801689e:	b410      	push	{r4}
 80168a0:	6093      	str	r3, [r2, #8]
 80168a2:	da08      	bge.n	80168b6 <__sfputc_r+0x1e>
 80168a4:	6994      	ldr	r4, [r2, #24]
 80168a6:	42a3      	cmp	r3, r4
 80168a8:	db01      	blt.n	80168ae <__sfputc_r+0x16>
 80168aa:	290a      	cmp	r1, #10
 80168ac:	d103      	bne.n	80168b6 <__sfputc_r+0x1e>
 80168ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168b2:	f000 bb0d 	b.w	8016ed0 <__swbuf_r>
 80168b6:	6813      	ldr	r3, [r2, #0]
 80168b8:	1c58      	adds	r0, r3, #1
 80168ba:	6010      	str	r0, [r2, #0]
 80168bc:	7019      	strb	r1, [r3, #0]
 80168be:	4608      	mov	r0, r1
 80168c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168c4:	4770      	bx	lr

080168c6 <__sfputs_r>:
 80168c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c8:	4606      	mov	r6, r0
 80168ca:	460f      	mov	r7, r1
 80168cc:	4614      	mov	r4, r2
 80168ce:	18d5      	adds	r5, r2, r3
 80168d0:	42ac      	cmp	r4, r5
 80168d2:	d101      	bne.n	80168d8 <__sfputs_r+0x12>
 80168d4:	2000      	movs	r0, #0
 80168d6:	e007      	b.n	80168e8 <__sfputs_r+0x22>
 80168d8:	463a      	mov	r2, r7
 80168da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168de:	4630      	mov	r0, r6
 80168e0:	f7ff ffda 	bl	8016898 <__sfputc_r>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	d1f3      	bne.n	80168d0 <__sfputs_r+0xa>
 80168e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080168ec <_vfiprintf_r>:
 80168ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f0:	460c      	mov	r4, r1
 80168f2:	b09d      	sub	sp, #116	; 0x74
 80168f4:	4617      	mov	r7, r2
 80168f6:	461d      	mov	r5, r3
 80168f8:	4606      	mov	r6, r0
 80168fa:	b118      	cbz	r0, 8016904 <_vfiprintf_r+0x18>
 80168fc:	6983      	ldr	r3, [r0, #24]
 80168fe:	b90b      	cbnz	r3, 8016904 <_vfiprintf_r+0x18>
 8016900:	f7ff fe90 	bl	8016624 <__sinit>
 8016904:	4b7c      	ldr	r3, [pc, #496]	; (8016af8 <_vfiprintf_r+0x20c>)
 8016906:	429c      	cmp	r4, r3
 8016908:	d158      	bne.n	80169bc <_vfiprintf_r+0xd0>
 801690a:	6874      	ldr	r4, [r6, #4]
 801690c:	89a3      	ldrh	r3, [r4, #12]
 801690e:	0718      	lsls	r0, r3, #28
 8016910:	d55e      	bpl.n	80169d0 <_vfiprintf_r+0xe4>
 8016912:	6923      	ldr	r3, [r4, #16]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d05b      	beq.n	80169d0 <_vfiprintf_r+0xe4>
 8016918:	2300      	movs	r3, #0
 801691a:	9309      	str	r3, [sp, #36]	; 0x24
 801691c:	2320      	movs	r3, #32
 801691e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016922:	2330      	movs	r3, #48	; 0x30
 8016924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016928:	9503      	str	r5, [sp, #12]
 801692a:	f04f 0b01 	mov.w	fp, #1
 801692e:	46b8      	mov	r8, r7
 8016930:	4645      	mov	r5, r8
 8016932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016936:	b10b      	cbz	r3, 801693c <_vfiprintf_r+0x50>
 8016938:	2b25      	cmp	r3, #37	; 0x25
 801693a:	d154      	bne.n	80169e6 <_vfiprintf_r+0xfa>
 801693c:	ebb8 0a07 	subs.w	sl, r8, r7
 8016940:	d00b      	beq.n	801695a <_vfiprintf_r+0x6e>
 8016942:	4653      	mov	r3, sl
 8016944:	463a      	mov	r2, r7
 8016946:	4621      	mov	r1, r4
 8016948:	4630      	mov	r0, r6
 801694a:	f7ff ffbc 	bl	80168c6 <__sfputs_r>
 801694e:	3001      	adds	r0, #1
 8016950:	f000 80c2 	beq.w	8016ad8 <_vfiprintf_r+0x1ec>
 8016954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016956:	4453      	add	r3, sl
 8016958:	9309      	str	r3, [sp, #36]	; 0x24
 801695a:	f898 3000 	ldrb.w	r3, [r8]
 801695e:	2b00      	cmp	r3, #0
 8016960:	f000 80ba 	beq.w	8016ad8 <_vfiprintf_r+0x1ec>
 8016964:	2300      	movs	r3, #0
 8016966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801696a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801696e:	9304      	str	r3, [sp, #16]
 8016970:	9307      	str	r3, [sp, #28]
 8016972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016976:	931a      	str	r3, [sp, #104]	; 0x68
 8016978:	46a8      	mov	r8, r5
 801697a:	2205      	movs	r2, #5
 801697c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016980:	485e      	ldr	r0, [pc, #376]	; (8016afc <_vfiprintf_r+0x210>)
 8016982:	f7e9 fc4d 	bl	8000220 <memchr>
 8016986:	9b04      	ldr	r3, [sp, #16]
 8016988:	bb78      	cbnz	r0, 80169ea <_vfiprintf_r+0xfe>
 801698a:	06d9      	lsls	r1, r3, #27
 801698c:	bf44      	itt	mi
 801698e:	2220      	movmi	r2, #32
 8016990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016994:	071a      	lsls	r2, r3, #28
 8016996:	bf44      	itt	mi
 8016998:	222b      	movmi	r2, #43	; 0x2b
 801699a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801699e:	782a      	ldrb	r2, [r5, #0]
 80169a0:	2a2a      	cmp	r2, #42	; 0x2a
 80169a2:	d02a      	beq.n	80169fa <_vfiprintf_r+0x10e>
 80169a4:	9a07      	ldr	r2, [sp, #28]
 80169a6:	46a8      	mov	r8, r5
 80169a8:	2000      	movs	r0, #0
 80169aa:	250a      	movs	r5, #10
 80169ac:	4641      	mov	r1, r8
 80169ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169b2:	3b30      	subs	r3, #48	; 0x30
 80169b4:	2b09      	cmp	r3, #9
 80169b6:	d969      	bls.n	8016a8c <_vfiprintf_r+0x1a0>
 80169b8:	b360      	cbz	r0, 8016a14 <_vfiprintf_r+0x128>
 80169ba:	e024      	b.n	8016a06 <_vfiprintf_r+0x11a>
 80169bc:	4b50      	ldr	r3, [pc, #320]	; (8016b00 <_vfiprintf_r+0x214>)
 80169be:	429c      	cmp	r4, r3
 80169c0:	d101      	bne.n	80169c6 <_vfiprintf_r+0xda>
 80169c2:	68b4      	ldr	r4, [r6, #8]
 80169c4:	e7a2      	b.n	801690c <_vfiprintf_r+0x20>
 80169c6:	4b4f      	ldr	r3, [pc, #316]	; (8016b04 <_vfiprintf_r+0x218>)
 80169c8:	429c      	cmp	r4, r3
 80169ca:	bf08      	it	eq
 80169cc:	68f4      	ldreq	r4, [r6, #12]
 80169ce:	e79d      	b.n	801690c <_vfiprintf_r+0x20>
 80169d0:	4621      	mov	r1, r4
 80169d2:	4630      	mov	r0, r6
 80169d4:	f000 fae0 	bl	8016f98 <__swsetup_r>
 80169d8:	2800      	cmp	r0, #0
 80169da:	d09d      	beq.n	8016918 <_vfiprintf_r+0x2c>
 80169dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169e0:	b01d      	add	sp, #116	; 0x74
 80169e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e6:	46a8      	mov	r8, r5
 80169e8:	e7a2      	b.n	8016930 <_vfiprintf_r+0x44>
 80169ea:	4a44      	ldr	r2, [pc, #272]	; (8016afc <_vfiprintf_r+0x210>)
 80169ec:	1a80      	subs	r0, r0, r2
 80169ee:	fa0b f000 	lsl.w	r0, fp, r0
 80169f2:	4318      	orrs	r0, r3
 80169f4:	9004      	str	r0, [sp, #16]
 80169f6:	4645      	mov	r5, r8
 80169f8:	e7be      	b.n	8016978 <_vfiprintf_r+0x8c>
 80169fa:	9a03      	ldr	r2, [sp, #12]
 80169fc:	1d11      	adds	r1, r2, #4
 80169fe:	6812      	ldr	r2, [r2, #0]
 8016a00:	9103      	str	r1, [sp, #12]
 8016a02:	2a00      	cmp	r2, #0
 8016a04:	db01      	blt.n	8016a0a <_vfiprintf_r+0x11e>
 8016a06:	9207      	str	r2, [sp, #28]
 8016a08:	e004      	b.n	8016a14 <_vfiprintf_r+0x128>
 8016a0a:	4252      	negs	r2, r2
 8016a0c:	f043 0302 	orr.w	r3, r3, #2
 8016a10:	9207      	str	r2, [sp, #28]
 8016a12:	9304      	str	r3, [sp, #16]
 8016a14:	f898 3000 	ldrb.w	r3, [r8]
 8016a18:	2b2e      	cmp	r3, #46	; 0x2e
 8016a1a:	d10e      	bne.n	8016a3a <_vfiprintf_r+0x14e>
 8016a1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016a20:	2b2a      	cmp	r3, #42	; 0x2a
 8016a22:	d138      	bne.n	8016a96 <_vfiprintf_r+0x1aa>
 8016a24:	9b03      	ldr	r3, [sp, #12]
 8016a26:	1d1a      	adds	r2, r3, #4
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	9203      	str	r2, [sp, #12]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	bfb8      	it	lt
 8016a30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a34:	f108 0802 	add.w	r8, r8, #2
 8016a38:	9305      	str	r3, [sp, #20]
 8016a3a:	4d33      	ldr	r5, [pc, #204]	; (8016b08 <_vfiprintf_r+0x21c>)
 8016a3c:	f898 1000 	ldrb.w	r1, [r8]
 8016a40:	2203      	movs	r2, #3
 8016a42:	4628      	mov	r0, r5
 8016a44:	f7e9 fbec 	bl	8000220 <memchr>
 8016a48:	b140      	cbz	r0, 8016a5c <_vfiprintf_r+0x170>
 8016a4a:	2340      	movs	r3, #64	; 0x40
 8016a4c:	1b40      	subs	r0, r0, r5
 8016a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8016a52:	9b04      	ldr	r3, [sp, #16]
 8016a54:	4303      	orrs	r3, r0
 8016a56:	f108 0801 	add.w	r8, r8, #1
 8016a5a:	9304      	str	r3, [sp, #16]
 8016a5c:	f898 1000 	ldrb.w	r1, [r8]
 8016a60:	482a      	ldr	r0, [pc, #168]	; (8016b0c <_vfiprintf_r+0x220>)
 8016a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a66:	2206      	movs	r2, #6
 8016a68:	f108 0701 	add.w	r7, r8, #1
 8016a6c:	f7e9 fbd8 	bl	8000220 <memchr>
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d037      	beq.n	8016ae4 <_vfiprintf_r+0x1f8>
 8016a74:	4b26      	ldr	r3, [pc, #152]	; (8016b10 <_vfiprintf_r+0x224>)
 8016a76:	bb1b      	cbnz	r3, 8016ac0 <_vfiprintf_r+0x1d4>
 8016a78:	9b03      	ldr	r3, [sp, #12]
 8016a7a:	3307      	adds	r3, #7
 8016a7c:	f023 0307 	bic.w	r3, r3, #7
 8016a80:	3308      	adds	r3, #8
 8016a82:	9303      	str	r3, [sp, #12]
 8016a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a86:	444b      	add	r3, r9
 8016a88:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8a:	e750      	b.n	801692e <_vfiprintf_r+0x42>
 8016a8c:	fb05 3202 	mla	r2, r5, r2, r3
 8016a90:	2001      	movs	r0, #1
 8016a92:	4688      	mov	r8, r1
 8016a94:	e78a      	b.n	80169ac <_vfiprintf_r+0xc0>
 8016a96:	2300      	movs	r3, #0
 8016a98:	f108 0801 	add.w	r8, r8, #1
 8016a9c:	9305      	str	r3, [sp, #20]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	250a      	movs	r5, #10
 8016aa2:	4640      	mov	r0, r8
 8016aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aa8:	3a30      	subs	r2, #48	; 0x30
 8016aaa:	2a09      	cmp	r2, #9
 8016aac:	d903      	bls.n	8016ab6 <_vfiprintf_r+0x1ca>
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d0c3      	beq.n	8016a3a <_vfiprintf_r+0x14e>
 8016ab2:	9105      	str	r1, [sp, #20]
 8016ab4:	e7c1      	b.n	8016a3a <_vfiprintf_r+0x14e>
 8016ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8016aba:	2301      	movs	r3, #1
 8016abc:	4680      	mov	r8, r0
 8016abe:	e7f0      	b.n	8016aa2 <_vfiprintf_r+0x1b6>
 8016ac0:	ab03      	add	r3, sp, #12
 8016ac2:	9300      	str	r3, [sp, #0]
 8016ac4:	4622      	mov	r2, r4
 8016ac6:	4b13      	ldr	r3, [pc, #76]	; (8016b14 <_vfiprintf_r+0x228>)
 8016ac8:	a904      	add	r1, sp, #16
 8016aca:	4630      	mov	r0, r6
 8016acc:	f3af 8000 	nop.w
 8016ad0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016ad4:	4681      	mov	r9, r0
 8016ad6:	d1d5      	bne.n	8016a84 <_vfiprintf_r+0x198>
 8016ad8:	89a3      	ldrh	r3, [r4, #12]
 8016ada:	065b      	lsls	r3, r3, #25
 8016adc:	f53f af7e 	bmi.w	80169dc <_vfiprintf_r+0xf0>
 8016ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ae2:	e77d      	b.n	80169e0 <_vfiprintf_r+0xf4>
 8016ae4:	ab03      	add	r3, sp, #12
 8016ae6:	9300      	str	r3, [sp, #0]
 8016ae8:	4622      	mov	r2, r4
 8016aea:	4b0a      	ldr	r3, [pc, #40]	; (8016b14 <_vfiprintf_r+0x228>)
 8016aec:	a904      	add	r1, sp, #16
 8016aee:	4630      	mov	r0, r6
 8016af0:	f000 f888 	bl	8016c04 <_printf_i>
 8016af4:	e7ec      	b.n	8016ad0 <_vfiprintf_r+0x1e4>
 8016af6:	bf00      	nop
 8016af8:	0802571c 	.word	0x0802571c
 8016afc:	0802575c 	.word	0x0802575c
 8016b00:	0802573c 	.word	0x0802573c
 8016b04:	080256fc 	.word	0x080256fc
 8016b08:	08025762 	.word	0x08025762
 8016b0c:	08025766 	.word	0x08025766
 8016b10:	00000000 	.word	0x00000000
 8016b14:	080168c7 	.word	0x080168c7

08016b18 <_printf_common>:
 8016b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b1c:	4691      	mov	r9, r2
 8016b1e:	461f      	mov	r7, r3
 8016b20:	688a      	ldr	r2, [r1, #8]
 8016b22:	690b      	ldr	r3, [r1, #16]
 8016b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b28:	4293      	cmp	r3, r2
 8016b2a:	bfb8      	it	lt
 8016b2c:	4613      	movlt	r3, r2
 8016b2e:	f8c9 3000 	str.w	r3, [r9]
 8016b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b36:	4606      	mov	r6, r0
 8016b38:	460c      	mov	r4, r1
 8016b3a:	b112      	cbz	r2, 8016b42 <_printf_common+0x2a>
 8016b3c:	3301      	adds	r3, #1
 8016b3e:	f8c9 3000 	str.w	r3, [r9]
 8016b42:	6823      	ldr	r3, [r4, #0]
 8016b44:	0699      	lsls	r1, r3, #26
 8016b46:	bf42      	ittt	mi
 8016b48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016b4c:	3302      	addmi	r3, #2
 8016b4e:	f8c9 3000 	strmi.w	r3, [r9]
 8016b52:	6825      	ldr	r5, [r4, #0]
 8016b54:	f015 0506 	ands.w	r5, r5, #6
 8016b58:	d107      	bne.n	8016b6a <_printf_common+0x52>
 8016b5a:	f104 0a19 	add.w	sl, r4, #25
 8016b5e:	68e3      	ldr	r3, [r4, #12]
 8016b60:	f8d9 2000 	ldr.w	r2, [r9]
 8016b64:	1a9b      	subs	r3, r3, r2
 8016b66:	42ab      	cmp	r3, r5
 8016b68:	dc28      	bgt.n	8016bbc <_printf_common+0xa4>
 8016b6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016b6e:	6822      	ldr	r2, [r4, #0]
 8016b70:	3300      	adds	r3, #0
 8016b72:	bf18      	it	ne
 8016b74:	2301      	movne	r3, #1
 8016b76:	0692      	lsls	r2, r2, #26
 8016b78:	d42d      	bmi.n	8016bd6 <_printf_common+0xbe>
 8016b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b7e:	4639      	mov	r1, r7
 8016b80:	4630      	mov	r0, r6
 8016b82:	47c0      	blx	r8
 8016b84:	3001      	adds	r0, #1
 8016b86:	d020      	beq.n	8016bca <_printf_common+0xb2>
 8016b88:	6823      	ldr	r3, [r4, #0]
 8016b8a:	68e5      	ldr	r5, [r4, #12]
 8016b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8016b90:	f003 0306 	and.w	r3, r3, #6
 8016b94:	2b04      	cmp	r3, #4
 8016b96:	bf08      	it	eq
 8016b98:	1aad      	subeq	r5, r5, r2
 8016b9a:	68a3      	ldr	r3, [r4, #8]
 8016b9c:	6922      	ldr	r2, [r4, #16]
 8016b9e:	bf0c      	ite	eq
 8016ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016ba4:	2500      	movne	r5, #0
 8016ba6:	4293      	cmp	r3, r2
 8016ba8:	bfc4      	itt	gt
 8016baa:	1a9b      	subgt	r3, r3, r2
 8016bac:	18ed      	addgt	r5, r5, r3
 8016bae:	f04f 0900 	mov.w	r9, #0
 8016bb2:	341a      	adds	r4, #26
 8016bb4:	454d      	cmp	r5, r9
 8016bb6:	d11a      	bne.n	8016bee <_printf_common+0xd6>
 8016bb8:	2000      	movs	r0, #0
 8016bba:	e008      	b.n	8016bce <_printf_common+0xb6>
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	4652      	mov	r2, sl
 8016bc0:	4639      	mov	r1, r7
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	47c0      	blx	r8
 8016bc6:	3001      	adds	r0, #1
 8016bc8:	d103      	bne.n	8016bd2 <_printf_common+0xba>
 8016bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bd2:	3501      	adds	r5, #1
 8016bd4:	e7c3      	b.n	8016b5e <_printf_common+0x46>
 8016bd6:	18e1      	adds	r1, r4, r3
 8016bd8:	1c5a      	adds	r2, r3, #1
 8016bda:	2030      	movs	r0, #48	; 0x30
 8016bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016be0:	4422      	add	r2, r4
 8016be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016bea:	3302      	adds	r3, #2
 8016bec:	e7c5      	b.n	8016b7a <_printf_common+0x62>
 8016bee:	2301      	movs	r3, #1
 8016bf0:	4622      	mov	r2, r4
 8016bf2:	4639      	mov	r1, r7
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	47c0      	blx	r8
 8016bf8:	3001      	adds	r0, #1
 8016bfa:	d0e6      	beq.n	8016bca <_printf_common+0xb2>
 8016bfc:	f109 0901 	add.w	r9, r9, #1
 8016c00:	e7d8      	b.n	8016bb4 <_printf_common+0x9c>
	...

08016c04 <_printf_i>:
 8016c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016c0c:	460c      	mov	r4, r1
 8016c0e:	7e09      	ldrb	r1, [r1, #24]
 8016c10:	b085      	sub	sp, #20
 8016c12:	296e      	cmp	r1, #110	; 0x6e
 8016c14:	4617      	mov	r7, r2
 8016c16:	4606      	mov	r6, r0
 8016c18:	4698      	mov	r8, r3
 8016c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c1c:	f000 80b3 	beq.w	8016d86 <_printf_i+0x182>
 8016c20:	d822      	bhi.n	8016c68 <_printf_i+0x64>
 8016c22:	2963      	cmp	r1, #99	; 0x63
 8016c24:	d036      	beq.n	8016c94 <_printf_i+0x90>
 8016c26:	d80a      	bhi.n	8016c3e <_printf_i+0x3a>
 8016c28:	2900      	cmp	r1, #0
 8016c2a:	f000 80b9 	beq.w	8016da0 <_printf_i+0x19c>
 8016c2e:	2958      	cmp	r1, #88	; 0x58
 8016c30:	f000 8083 	beq.w	8016d3a <_printf_i+0x136>
 8016c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016c38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016c3c:	e032      	b.n	8016ca4 <_printf_i+0xa0>
 8016c3e:	2964      	cmp	r1, #100	; 0x64
 8016c40:	d001      	beq.n	8016c46 <_printf_i+0x42>
 8016c42:	2969      	cmp	r1, #105	; 0x69
 8016c44:	d1f6      	bne.n	8016c34 <_printf_i+0x30>
 8016c46:	6820      	ldr	r0, [r4, #0]
 8016c48:	6813      	ldr	r3, [r2, #0]
 8016c4a:	0605      	lsls	r5, r0, #24
 8016c4c:	f103 0104 	add.w	r1, r3, #4
 8016c50:	d52a      	bpl.n	8016ca8 <_printf_i+0xa4>
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	6011      	str	r1, [r2, #0]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	da03      	bge.n	8016c62 <_printf_i+0x5e>
 8016c5a:	222d      	movs	r2, #45	; 0x2d
 8016c5c:	425b      	negs	r3, r3
 8016c5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016c62:	486f      	ldr	r0, [pc, #444]	; (8016e20 <_printf_i+0x21c>)
 8016c64:	220a      	movs	r2, #10
 8016c66:	e039      	b.n	8016cdc <_printf_i+0xd8>
 8016c68:	2973      	cmp	r1, #115	; 0x73
 8016c6a:	f000 809d 	beq.w	8016da8 <_printf_i+0x1a4>
 8016c6e:	d808      	bhi.n	8016c82 <_printf_i+0x7e>
 8016c70:	296f      	cmp	r1, #111	; 0x6f
 8016c72:	d020      	beq.n	8016cb6 <_printf_i+0xb2>
 8016c74:	2970      	cmp	r1, #112	; 0x70
 8016c76:	d1dd      	bne.n	8016c34 <_printf_i+0x30>
 8016c78:	6823      	ldr	r3, [r4, #0]
 8016c7a:	f043 0320 	orr.w	r3, r3, #32
 8016c7e:	6023      	str	r3, [r4, #0]
 8016c80:	e003      	b.n	8016c8a <_printf_i+0x86>
 8016c82:	2975      	cmp	r1, #117	; 0x75
 8016c84:	d017      	beq.n	8016cb6 <_printf_i+0xb2>
 8016c86:	2978      	cmp	r1, #120	; 0x78
 8016c88:	d1d4      	bne.n	8016c34 <_printf_i+0x30>
 8016c8a:	2378      	movs	r3, #120	; 0x78
 8016c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016c90:	4864      	ldr	r0, [pc, #400]	; (8016e24 <_printf_i+0x220>)
 8016c92:	e055      	b.n	8016d40 <_printf_i+0x13c>
 8016c94:	6813      	ldr	r3, [r2, #0]
 8016c96:	1d19      	adds	r1, r3, #4
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6011      	str	r1, [r2, #0]
 8016c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	e08c      	b.n	8016dc2 <_printf_i+0x1be>
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	6011      	str	r1, [r2, #0]
 8016cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016cb0:	bf18      	it	ne
 8016cb2:	b21b      	sxthne	r3, r3
 8016cb4:	e7cf      	b.n	8016c56 <_printf_i+0x52>
 8016cb6:	6813      	ldr	r3, [r2, #0]
 8016cb8:	6825      	ldr	r5, [r4, #0]
 8016cba:	1d18      	adds	r0, r3, #4
 8016cbc:	6010      	str	r0, [r2, #0]
 8016cbe:	0628      	lsls	r0, r5, #24
 8016cc0:	d501      	bpl.n	8016cc6 <_printf_i+0xc2>
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	e002      	b.n	8016ccc <_printf_i+0xc8>
 8016cc6:	0668      	lsls	r0, r5, #25
 8016cc8:	d5fb      	bpl.n	8016cc2 <_printf_i+0xbe>
 8016cca:	881b      	ldrh	r3, [r3, #0]
 8016ccc:	4854      	ldr	r0, [pc, #336]	; (8016e20 <_printf_i+0x21c>)
 8016cce:	296f      	cmp	r1, #111	; 0x6f
 8016cd0:	bf14      	ite	ne
 8016cd2:	220a      	movne	r2, #10
 8016cd4:	2208      	moveq	r2, #8
 8016cd6:	2100      	movs	r1, #0
 8016cd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016cdc:	6865      	ldr	r5, [r4, #4]
 8016cde:	60a5      	str	r5, [r4, #8]
 8016ce0:	2d00      	cmp	r5, #0
 8016ce2:	f2c0 8095 	blt.w	8016e10 <_printf_i+0x20c>
 8016ce6:	6821      	ldr	r1, [r4, #0]
 8016ce8:	f021 0104 	bic.w	r1, r1, #4
 8016cec:	6021      	str	r1, [r4, #0]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d13d      	bne.n	8016d6e <_printf_i+0x16a>
 8016cf2:	2d00      	cmp	r5, #0
 8016cf4:	f040 808e 	bne.w	8016e14 <_printf_i+0x210>
 8016cf8:	4665      	mov	r5, ip
 8016cfa:	2a08      	cmp	r2, #8
 8016cfc:	d10b      	bne.n	8016d16 <_printf_i+0x112>
 8016cfe:	6823      	ldr	r3, [r4, #0]
 8016d00:	07db      	lsls	r3, r3, #31
 8016d02:	d508      	bpl.n	8016d16 <_printf_i+0x112>
 8016d04:	6923      	ldr	r3, [r4, #16]
 8016d06:	6862      	ldr	r2, [r4, #4]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	bfde      	ittt	le
 8016d0c:	2330      	movle	r3, #48	; 0x30
 8016d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016d12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016d16:	ebac 0305 	sub.w	r3, ip, r5
 8016d1a:	6123      	str	r3, [r4, #16]
 8016d1c:	f8cd 8000 	str.w	r8, [sp]
 8016d20:	463b      	mov	r3, r7
 8016d22:	aa03      	add	r2, sp, #12
 8016d24:	4621      	mov	r1, r4
 8016d26:	4630      	mov	r0, r6
 8016d28:	f7ff fef6 	bl	8016b18 <_printf_common>
 8016d2c:	3001      	adds	r0, #1
 8016d2e:	d14d      	bne.n	8016dcc <_printf_i+0x1c8>
 8016d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d34:	b005      	add	sp, #20
 8016d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d3a:	4839      	ldr	r0, [pc, #228]	; (8016e20 <_printf_i+0x21c>)
 8016d3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016d40:	6813      	ldr	r3, [r2, #0]
 8016d42:	6821      	ldr	r1, [r4, #0]
 8016d44:	1d1d      	adds	r5, r3, #4
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	6015      	str	r5, [r2, #0]
 8016d4a:	060a      	lsls	r2, r1, #24
 8016d4c:	d50b      	bpl.n	8016d66 <_printf_i+0x162>
 8016d4e:	07ca      	lsls	r2, r1, #31
 8016d50:	bf44      	itt	mi
 8016d52:	f041 0120 	orrmi.w	r1, r1, #32
 8016d56:	6021      	strmi	r1, [r4, #0]
 8016d58:	b91b      	cbnz	r3, 8016d62 <_printf_i+0x15e>
 8016d5a:	6822      	ldr	r2, [r4, #0]
 8016d5c:	f022 0220 	bic.w	r2, r2, #32
 8016d60:	6022      	str	r2, [r4, #0]
 8016d62:	2210      	movs	r2, #16
 8016d64:	e7b7      	b.n	8016cd6 <_printf_i+0xd2>
 8016d66:	064d      	lsls	r5, r1, #25
 8016d68:	bf48      	it	mi
 8016d6a:	b29b      	uxthmi	r3, r3
 8016d6c:	e7ef      	b.n	8016d4e <_printf_i+0x14a>
 8016d6e:	4665      	mov	r5, ip
 8016d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d74:	fb02 3311 	mls	r3, r2, r1, r3
 8016d78:	5cc3      	ldrb	r3, [r0, r3]
 8016d7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016d7e:	460b      	mov	r3, r1
 8016d80:	2900      	cmp	r1, #0
 8016d82:	d1f5      	bne.n	8016d70 <_printf_i+0x16c>
 8016d84:	e7b9      	b.n	8016cfa <_printf_i+0xf6>
 8016d86:	6813      	ldr	r3, [r2, #0]
 8016d88:	6825      	ldr	r5, [r4, #0]
 8016d8a:	6961      	ldr	r1, [r4, #20]
 8016d8c:	1d18      	adds	r0, r3, #4
 8016d8e:	6010      	str	r0, [r2, #0]
 8016d90:	0628      	lsls	r0, r5, #24
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	d501      	bpl.n	8016d9a <_printf_i+0x196>
 8016d96:	6019      	str	r1, [r3, #0]
 8016d98:	e002      	b.n	8016da0 <_printf_i+0x19c>
 8016d9a:	066a      	lsls	r2, r5, #25
 8016d9c:	d5fb      	bpl.n	8016d96 <_printf_i+0x192>
 8016d9e:	8019      	strh	r1, [r3, #0]
 8016da0:	2300      	movs	r3, #0
 8016da2:	6123      	str	r3, [r4, #16]
 8016da4:	4665      	mov	r5, ip
 8016da6:	e7b9      	b.n	8016d1c <_printf_i+0x118>
 8016da8:	6813      	ldr	r3, [r2, #0]
 8016daa:	1d19      	adds	r1, r3, #4
 8016dac:	6011      	str	r1, [r2, #0]
 8016dae:	681d      	ldr	r5, [r3, #0]
 8016db0:	6862      	ldr	r2, [r4, #4]
 8016db2:	2100      	movs	r1, #0
 8016db4:	4628      	mov	r0, r5
 8016db6:	f7e9 fa33 	bl	8000220 <memchr>
 8016dba:	b108      	cbz	r0, 8016dc0 <_printf_i+0x1bc>
 8016dbc:	1b40      	subs	r0, r0, r5
 8016dbe:	6060      	str	r0, [r4, #4]
 8016dc0:	6863      	ldr	r3, [r4, #4]
 8016dc2:	6123      	str	r3, [r4, #16]
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dca:	e7a7      	b.n	8016d1c <_printf_i+0x118>
 8016dcc:	6923      	ldr	r3, [r4, #16]
 8016dce:	462a      	mov	r2, r5
 8016dd0:	4639      	mov	r1, r7
 8016dd2:	4630      	mov	r0, r6
 8016dd4:	47c0      	blx	r8
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	d0aa      	beq.n	8016d30 <_printf_i+0x12c>
 8016dda:	6823      	ldr	r3, [r4, #0]
 8016ddc:	079b      	lsls	r3, r3, #30
 8016dde:	d413      	bmi.n	8016e08 <_printf_i+0x204>
 8016de0:	68e0      	ldr	r0, [r4, #12]
 8016de2:	9b03      	ldr	r3, [sp, #12]
 8016de4:	4298      	cmp	r0, r3
 8016de6:	bfb8      	it	lt
 8016de8:	4618      	movlt	r0, r3
 8016dea:	e7a3      	b.n	8016d34 <_printf_i+0x130>
 8016dec:	2301      	movs	r3, #1
 8016dee:	464a      	mov	r2, r9
 8016df0:	4639      	mov	r1, r7
 8016df2:	4630      	mov	r0, r6
 8016df4:	47c0      	blx	r8
 8016df6:	3001      	adds	r0, #1
 8016df8:	d09a      	beq.n	8016d30 <_printf_i+0x12c>
 8016dfa:	3501      	adds	r5, #1
 8016dfc:	68e3      	ldr	r3, [r4, #12]
 8016dfe:	9a03      	ldr	r2, [sp, #12]
 8016e00:	1a9b      	subs	r3, r3, r2
 8016e02:	42ab      	cmp	r3, r5
 8016e04:	dcf2      	bgt.n	8016dec <_printf_i+0x1e8>
 8016e06:	e7eb      	b.n	8016de0 <_printf_i+0x1dc>
 8016e08:	2500      	movs	r5, #0
 8016e0a:	f104 0919 	add.w	r9, r4, #25
 8016e0e:	e7f5      	b.n	8016dfc <_printf_i+0x1f8>
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d1ac      	bne.n	8016d6e <_printf_i+0x16a>
 8016e14:	7803      	ldrb	r3, [r0, #0]
 8016e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e1e:	e76c      	b.n	8016cfa <_printf_i+0xf6>
 8016e20:	0802576d 	.word	0x0802576d
 8016e24:	0802577e 	.word	0x0802577e

08016e28 <_sbrk_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4c06      	ldr	r4, [pc, #24]	; (8016e44 <_sbrk_r+0x1c>)
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	4605      	mov	r5, r0
 8016e30:	4608      	mov	r0, r1
 8016e32:	6023      	str	r3, [r4, #0]
 8016e34:	f7e9 ff56 	bl	8000ce4 <_sbrk>
 8016e38:	1c43      	adds	r3, r0, #1
 8016e3a:	d102      	bne.n	8016e42 <_sbrk_r+0x1a>
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	b103      	cbz	r3, 8016e42 <_sbrk_r+0x1a>
 8016e40:	602b      	str	r3, [r5, #0]
 8016e42:	bd38      	pop	{r3, r4, r5, pc}
 8016e44:	2000f7a0 	.word	0x2000f7a0

08016e48 <__sread>:
 8016e48:	b510      	push	{r4, lr}
 8016e4a:	460c      	mov	r4, r1
 8016e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e50:	f000 fa48 	bl	80172e4 <_read_r>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	bfab      	itete	ge
 8016e58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e5a:	89a3      	ldrhlt	r3, [r4, #12]
 8016e5c:	181b      	addge	r3, r3, r0
 8016e5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e62:	bfac      	ite	ge
 8016e64:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e66:	81a3      	strhlt	r3, [r4, #12]
 8016e68:	bd10      	pop	{r4, pc}

08016e6a <__swrite>:
 8016e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6e:	461f      	mov	r7, r3
 8016e70:	898b      	ldrh	r3, [r1, #12]
 8016e72:	05db      	lsls	r3, r3, #23
 8016e74:	4605      	mov	r5, r0
 8016e76:	460c      	mov	r4, r1
 8016e78:	4616      	mov	r6, r2
 8016e7a:	d505      	bpl.n	8016e88 <__swrite+0x1e>
 8016e7c:	2302      	movs	r3, #2
 8016e7e:	2200      	movs	r2, #0
 8016e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e84:	f000 f9b6 	bl	80171f4 <_lseek_r>
 8016e88:	89a3      	ldrh	r3, [r4, #12]
 8016e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e92:	81a3      	strh	r3, [r4, #12]
 8016e94:	4632      	mov	r2, r6
 8016e96:	463b      	mov	r3, r7
 8016e98:	4628      	mov	r0, r5
 8016e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e9e:	f000 b869 	b.w	8016f74 <_write_r>

08016ea2 <__sseek>:
 8016ea2:	b510      	push	{r4, lr}
 8016ea4:	460c      	mov	r4, r1
 8016ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eaa:	f000 f9a3 	bl	80171f4 <_lseek_r>
 8016eae:	1c43      	adds	r3, r0, #1
 8016eb0:	89a3      	ldrh	r3, [r4, #12]
 8016eb2:	bf15      	itete	ne
 8016eb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8016eb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016eba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016ebe:	81a3      	strheq	r3, [r4, #12]
 8016ec0:	bf18      	it	ne
 8016ec2:	81a3      	strhne	r3, [r4, #12]
 8016ec4:	bd10      	pop	{r4, pc}

08016ec6 <__sclose>:
 8016ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eca:	f000 b8d3 	b.w	8017074 <_close_r>
	...

08016ed0 <__swbuf_r>:
 8016ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ed2:	460e      	mov	r6, r1
 8016ed4:	4614      	mov	r4, r2
 8016ed6:	4605      	mov	r5, r0
 8016ed8:	b118      	cbz	r0, 8016ee2 <__swbuf_r+0x12>
 8016eda:	6983      	ldr	r3, [r0, #24]
 8016edc:	b90b      	cbnz	r3, 8016ee2 <__swbuf_r+0x12>
 8016ede:	f7ff fba1 	bl	8016624 <__sinit>
 8016ee2:	4b21      	ldr	r3, [pc, #132]	; (8016f68 <__swbuf_r+0x98>)
 8016ee4:	429c      	cmp	r4, r3
 8016ee6:	d12a      	bne.n	8016f3e <__swbuf_r+0x6e>
 8016ee8:	686c      	ldr	r4, [r5, #4]
 8016eea:	69a3      	ldr	r3, [r4, #24]
 8016eec:	60a3      	str	r3, [r4, #8]
 8016eee:	89a3      	ldrh	r3, [r4, #12]
 8016ef0:	071a      	lsls	r2, r3, #28
 8016ef2:	d52e      	bpl.n	8016f52 <__swbuf_r+0x82>
 8016ef4:	6923      	ldr	r3, [r4, #16]
 8016ef6:	b363      	cbz	r3, 8016f52 <__swbuf_r+0x82>
 8016ef8:	6923      	ldr	r3, [r4, #16]
 8016efa:	6820      	ldr	r0, [r4, #0]
 8016efc:	1ac0      	subs	r0, r0, r3
 8016efe:	6963      	ldr	r3, [r4, #20]
 8016f00:	b2f6      	uxtb	r6, r6
 8016f02:	4283      	cmp	r3, r0
 8016f04:	4637      	mov	r7, r6
 8016f06:	dc04      	bgt.n	8016f12 <__swbuf_r+0x42>
 8016f08:	4621      	mov	r1, r4
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	f000 f948 	bl	80171a0 <_fflush_r>
 8016f10:	bb28      	cbnz	r0, 8016f5e <__swbuf_r+0x8e>
 8016f12:	68a3      	ldr	r3, [r4, #8]
 8016f14:	3b01      	subs	r3, #1
 8016f16:	60a3      	str	r3, [r4, #8]
 8016f18:	6823      	ldr	r3, [r4, #0]
 8016f1a:	1c5a      	adds	r2, r3, #1
 8016f1c:	6022      	str	r2, [r4, #0]
 8016f1e:	701e      	strb	r6, [r3, #0]
 8016f20:	6963      	ldr	r3, [r4, #20]
 8016f22:	3001      	adds	r0, #1
 8016f24:	4283      	cmp	r3, r0
 8016f26:	d004      	beq.n	8016f32 <__swbuf_r+0x62>
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	07db      	lsls	r3, r3, #31
 8016f2c:	d519      	bpl.n	8016f62 <__swbuf_r+0x92>
 8016f2e:	2e0a      	cmp	r6, #10
 8016f30:	d117      	bne.n	8016f62 <__swbuf_r+0x92>
 8016f32:	4621      	mov	r1, r4
 8016f34:	4628      	mov	r0, r5
 8016f36:	f000 f933 	bl	80171a0 <_fflush_r>
 8016f3a:	b190      	cbz	r0, 8016f62 <__swbuf_r+0x92>
 8016f3c:	e00f      	b.n	8016f5e <__swbuf_r+0x8e>
 8016f3e:	4b0b      	ldr	r3, [pc, #44]	; (8016f6c <__swbuf_r+0x9c>)
 8016f40:	429c      	cmp	r4, r3
 8016f42:	d101      	bne.n	8016f48 <__swbuf_r+0x78>
 8016f44:	68ac      	ldr	r4, [r5, #8]
 8016f46:	e7d0      	b.n	8016eea <__swbuf_r+0x1a>
 8016f48:	4b09      	ldr	r3, [pc, #36]	; (8016f70 <__swbuf_r+0xa0>)
 8016f4a:	429c      	cmp	r4, r3
 8016f4c:	bf08      	it	eq
 8016f4e:	68ec      	ldreq	r4, [r5, #12]
 8016f50:	e7cb      	b.n	8016eea <__swbuf_r+0x1a>
 8016f52:	4621      	mov	r1, r4
 8016f54:	4628      	mov	r0, r5
 8016f56:	f000 f81f 	bl	8016f98 <__swsetup_r>
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d0cc      	beq.n	8016ef8 <__swbuf_r+0x28>
 8016f5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f62:	4638      	mov	r0, r7
 8016f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f66:	bf00      	nop
 8016f68:	0802571c 	.word	0x0802571c
 8016f6c:	0802573c 	.word	0x0802573c
 8016f70:	080256fc 	.word	0x080256fc

08016f74 <_write_r>:
 8016f74:	b538      	push	{r3, r4, r5, lr}
 8016f76:	4c07      	ldr	r4, [pc, #28]	; (8016f94 <_write_r+0x20>)
 8016f78:	4605      	mov	r5, r0
 8016f7a:	4608      	mov	r0, r1
 8016f7c:	4611      	mov	r1, r2
 8016f7e:	2200      	movs	r2, #0
 8016f80:	6022      	str	r2, [r4, #0]
 8016f82:	461a      	mov	r2, r3
 8016f84:	f7e9 fe5d 	bl	8000c42 <_write>
 8016f88:	1c43      	adds	r3, r0, #1
 8016f8a:	d102      	bne.n	8016f92 <_write_r+0x1e>
 8016f8c:	6823      	ldr	r3, [r4, #0]
 8016f8e:	b103      	cbz	r3, 8016f92 <_write_r+0x1e>
 8016f90:	602b      	str	r3, [r5, #0]
 8016f92:	bd38      	pop	{r3, r4, r5, pc}
 8016f94:	2000f7a0 	.word	0x2000f7a0

08016f98 <__swsetup_r>:
 8016f98:	4b32      	ldr	r3, [pc, #200]	; (8017064 <__swsetup_r+0xcc>)
 8016f9a:	b570      	push	{r4, r5, r6, lr}
 8016f9c:	681d      	ldr	r5, [r3, #0]
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	b125      	cbz	r5, 8016fae <__swsetup_r+0x16>
 8016fa4:	69ab      	ldr	r3, [r5, #24]
 8016fa6:	b913      	cbnz	r3, 8016fae <__swsetup_r+0x16>
 8016fa8:	4628      	mov	r0, r5
 8016faa:	f7ff fb3b 	bl	8016624 <__sinit>
 8016fae:	4b2e      	ldr	r3, [pc, #184]	; (8017068 <__swsetup_r+0xd0>)
 8016fb0:	429c      	cmp	r4, r3
 8016fb2:	d10f      	bne.n	8016fd4 <__swsetup_r+0x3c>
 8016fb4:	686c      	ldr	r4, [r5, #4]
 8016fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fba:	b29a      	uxth	r2, r3
 8016fbc:	0715      	lsls	r5, r2, #28
 8016fbe:	d42c      	bmi.n	801701a <__swsetup_r+0x82>
 8016fc0:	06d0      	lsls	r0, r2, #27
 8016fc2:	d411      	bmi.n	8016fe8 <__swsetup_r+0x50>
 8016fc4:	2209      	movs	r2, #9
 8016fc6:	6032      	str	r2, [r6, #0]
 8016fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fcc:	81a3      	strh	r3, [r4, #12]
 8016fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fd2:	e03e      	b.n	8017052 <__swsetup_r+0xba>
 8016fd4:	4b25      	ldr	r3, [pc, #148]	; (801706c <__swsetup_r+0xd4>)
 8016fd6:	429c      	cmp	r4, r3
 8016fd8:	d101      	bne.n	8016fde <__swsetup_r+0x46>
 8016fda:	68ac      	ldr	r4, [r5, #8]
 8016fdc:	e7eb      	b.n	8016fb6 <__swsetup_r+0x1e>
 8016fde:	4b24      	ldr	r3, [pc, #144]	; (8017070 <__swsetup_r+0xd8>)
 8016fe0:	429c      	cmp	r4, r3
 8016fe2:	bf08      	it	eq
 8016fe4:	68ec      	ldreq	r4, [r5, #12]
 8016fe6:	e7e6      	b.n	8016fb6 <__swsetup_r+0x1e>
 8016fe8:	0751      	lsls	r1, r2, #29
 8016fea:	d512      	bpl.n	8017012 <__swsetup_r+0x7a>
 8016fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fee:	b141      	cbz	r1, 8017002 <__swsetup_r+0x6a>
 8016ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ff4:	4299      	cmp	r1, r3
 8016ff6:	d002      	beq.n	8016ffe <__swsetup_r+0x66>
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	f7ff fba5 	bl	8016748 <_free_r>
 8016ffe:	2300      	movs	r3, #0
 8017000:	6363      	str	r3, [r4, #52]	; 0x34
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017008:	81a3      	strh	r3, [r4, #12]
 801700a:	2300      	movs	r3, #0
 801700c:	6063      	str	r3, [r4, #4]
 801700e:	6923      	ldr	r3, [r4, #16]
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	89a3      	ldrh	r3, [r4, #12]
 8017014:	f043 0308 	orr.w	r3, r3, #8
 8017018:	81a3      	strh	r3, [r4, #12]
 801701a:	6923      	ldr	r3, [r4, #16]
 801701c:	b94b      	cbnz	r3, 8017032 <__swsetup_r+0x9a>
 801701e:	89a3      	ldrh	r3, [r4, #12]
 8017020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017028:	d003      	beq.n	8017032 <__swsetup_r+0x9a>
 801702a:	4621      	mov	r1, r4
 801702c:	4630      	mov	r0, r6
 801702e:	f000 f917 	bl	8017260 <__smakebuf_r>
 8017032:	89a2      	ldrh	r2, [r4, #12]
 8017034:	f012 0301 	ands.w	r3, r2, #1
 8017038:	d00c      	beq.n	8017054 <__swsetup_r+0xbc>
 801703a:	2300      	movs	r3, #0
 801703c:	60a3      	str	r3, [r4, #8]
 801703e:	6963      	ldr	r3, [r4, #20]
 8017040:	425b      	negs	r3, r3
 8017042:	61a3      	str	r3, [r4, #24]
 8017044:	6923      	ldr	r3, [r4, #16]
 8017046:	b953      	cbnz	r3, 801705e <__swsetup_r+0xc6>
 8017048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801704c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017050:	d1ba      	bne.n	8016fc8 <__swsetup_r+0x30>
 8017052:	bd70      	pop	{r4, r5, r6, pc}
 8017054:	0792      	lsls	r2, r2, #30
 8017056:	bf58      	it	pl
 8017058:	6963      	ldrpl	r3, [r4, #20]
 801705a:	60a3      	str	r3, [r4, #8]
 801705c:	e7f2      	b.n	8017044 <__swsetup_r+0xac>
 801705e:	2000      	movs	r0, #0
 8017060:	e7f7      	b.n	8017052 <__swsetup_r+0xba>
 8017062:	bf00      	nop
 8017064:	20000020 	.word	0x20000020
 8017068:	0802571c 	.word	0x0802571c
 801706c:	0802573c 	.word	0x0802573c
 8017070:	080256fc 	.word	0x080256fc

08017074 <_close_r>:
 8017074:	b538      	push	{r3, r4, r5, lr}
 8017076:	4c06      	ldr	r4, [pc, #24]	; (8017090 <_close_r+0x1c>)
 8017078:	2300      	movs	r3, #0
 801707a:	4605      	mov	r5, r0
 801707c:	4608      	mov	r0, r1
 801707e:	6023      	str	r3, [r4, #0]
 8017080:	f7e9 fdfb 	bl	8000c7a <_close>
 8017084:	1c43      	adds	r3, r0, #1
 8017086:	d102      	bne.n	801708e <_close_r+0x1a>
 8017088:	6823      	ldr	r3, [r4, #0]
 801708a:	b103      	cbz	r3, 801708e <_close_r+0x1a>
 801708c:	602b      	str	r3, [r5, #0]
 801708e:	bd38      	pop	{r3, r4, r5, pc}
 8017090:	2000f7a0 	.word	0x2000f7a0

08017094 <__sflush_r>:
 8017094:	898a      	ldrh	r2, [r1, #12]
 8017096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801709a:	4605      	mov	r5, r0
 801709c:	0710      	lsls	r0, r2, #28
 801709e:	460c      	mov	r4, r1
 80170a0:	d458      	bmi.n	8017154 <__sflush_r+0xc0>
 80170a2:	684b      	ldr	r3, [r1, #4]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	dc05      	bgt.n	80170b4 <__sflush_r+0x20>
 80170a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	dc02      	bgt.n	80170b4 <__sflush_r+0x20>
 80170ae:	2000      	movs	r0, #0
 80170b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170b6:	2e00      	cmp	r6, #0
 80170b8:	d0f9      	beq.n	80170ae <__sflush_r+0x1a>
 80170ba:	2300      	movs	r3, #0
 80170bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80170c0:	682f      	ldr	r7, [r5, #0]
 80170c2:	6a21      	ldr	r1, [r4, #32]
 80170c4:	602b      	str	r3, [r5, #0]
 80170c6:	d032      	beq.n	801712e <__sflush_r+0x9a>
 80170c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80170ca:	89a3      	ldrh	r3, [r4, #12]
 80170cc:	075a      	lsls	r2, r3, #29
 80170ce:	d505      	bpl.n	80170dc <__sflush_r+0x48>
 80170d0:	6863      	ldr	r3, [r4, #4]
 80170d2:	1ac0      	subs	r0, r0, r3
 80170d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170d6:	b10b      	cbz	r3, 80170dc <__sflush_r+0x48>
 80170d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170da:	1ac0      	subs	r0, r0, r3
 80170dc:	2300      	movs	r3, #0
 80170de:	4602      	mov	r2, r0
 80170e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170e2:	6a21      	ldr	r1, [r4, #32]
 80170e4:	4628      	mov	r0, r5
 80170e6:	47b0      	blx	r6
 80170e8:	1c43      	adds	r3, r0, #1
 80170ea:	89a3      	ldrh	r3, [r4, #12]
 80170ec:	d106      	bne.n	80170fc <__sflush_r+0x68>
 80170ee:	6829      	ldr	r1, [r5, #0]
 80170f0:	291d      	cmp	r1, #29
 80170f2:	d848      	bhi.n	8017186 <__sflush_r+0xf2>
 80170f4:	4a29      	ldr	r2, [pc, #164]	; (801719c <__sflush_r+0x108>)
 80170f6:	40ca      	lsrs	r2, r1
 80170f8:	07d6      	lsls	r6, r2, #31
 80170fa:	d544      	bpl.n	8017186 <__sflush_r+0xf2>
 80170fc:	2200      	movs	r2, #0
 80170fe:	6062      	str	r2, [r4, #4]
 8017100:	04d9      	lsls	r1, r3, #19
 8017102:	6922      	ldr	r2, [r4, #16]
 8017104:	6022      	str	r2, [r4, #0]
 8017106:	d504      	bpl.n	8017112 <__sflush_r+0x7e>
 8017108:	1c42      	adds	r2, r0, #1
 801710a:	d101      	bne.n	8017110 <__sflush_r+0x7c>
 801710c:	682b      	ldr	r3, [r5, #0]
 801710e:	b903      	cbnz	r3, 8017112 <__sflush_r+0x7e>
 8017110:	6560      	str	r0, [r4, #84]	; 0x54
 8017112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017114:	602f      	str	r7, [r5, #0]
 8017116:	2900      	cmp	r1, #0
 8017118:	d0c9      	beq.n	80170ae <__sflush_r+0x1a>
 801711a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801711e:	4299      	cmp	r1, r3
 8017120:	d002      	beq.n	8017128 <__sflush_r+0x94>
 8017122:	4628      	mov	r0, r5
 8017124:	f7ff fb10 	bl	8016748 <_free_r>
 8017128:	2000      	movs	r0, #0
 801712a:	6360      	str	r0, [r4, #52]	; 0x34
 801712c:	e7c0      	b.n	80170b0 <__sflush_r+0x1c>
 801712e:	2301      	movs	r3, #1
 8017130:	4628      	mov	r0, r5
 8017132:	47b0      	blx	r6
 8017134:	1c41      	adds	r1, r0, #1
 8017136:	d1c8      	bne.n	80170ca <__sflush_r+0x36>
 8017138:	682b      	ldr	r3, [r5, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d0c5      	beq.n	80170ca <__sflush_r+0x36>
 801713e:	2b1d      	cmp	r3, #29
 8017140:	d001      	beq.n	8017146 <__sflush_r+0xb2>
 8017142:	2b16      	cmp	r3, #22
 8017144:	d101      	bne.n	801714a <__sflush_r+0xb6>
 8017146:	602f      	str	r7, [r5, #0]
 8017148:	e7b1      	b.n	80170ae <__sflush_r+0x1a>
 801714a:	89a3      	ldrh	r3, [r4, #12]
 801714c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017150:	81a3      	strh	r3, [r4, #12]
 8017152:	e7ad      	b.n	80170b0 <__sflush_r+0x1c>
 8017154:	690f      	ldr	r7, [r1, #16]
 8017156:	2f00      	cmp	r7, #0
 8017158:	d0a9      	beq.n	80170ae <__sflush_r+0x1a>
 801715a:	0793      	lsls	r3, r2, #30
 801715c:	680e      	ldr	r6, [r1, #0]
 801715e:	bf08      	it	eq
 8017160:	694b      	ldreq	r3, [r1, #20]
 8017162:	600f      	str	r7, [r1, #0]
 8017164:	bf18      	it	ne
 8017166:	2300      	movne	r3, #0
 8017168:	eba6 0807 	sub.w	r8, r6, r7
 801716c:	608b      	str	r3, [r1, #8]
 801716e:	f1b8 0f00 	cmp.w	r8, #0
 8017172:	dd9c      	ble.n	80170ae <__sflush_r+0x1a>
 8017174:	4643      	mov	r3, r8
 8017176:	463a      	mov	r2, r7
 8017178:	6a21      	ldr	r1, [r4, #32]
 801717a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801717c:	4628      	mov	r0, r5
 801717e:	47b0      	blx	r6
 8017180:	2800      	cmp	r0, #0
 8017182:	dc06      	bgt.n	8017192 <__sflush_r+0xfe>
 8017184:	89a3      	ldrh	r3, [r4, #12]
 8017186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801718a:	81a3      	strh	r3, [r4, #12]
 801718c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017190:	e78e      	b.n	80170b0 <__sflush_r+0x1c>
 8017192:	4407      	add	r7, r0
 8017194:	eba8 0800 	sub.w	r8, r8, r0
 8017198:	e7e9      	b.n	801716e <__sflush_r+0xda>
 801719a:	bf00      	nop
 801719c:	20400001 	.word	0x20400001

080171a0 <_fflush_r>:
 80171a0:	b538      	push	{r3, r4, r5, lr}
 80171a2:	690b      	ldr	r3, [r1, #16]
 80171a4:	4605      	mov	r5, r0
 80171a6:	460c      	mov	r4, r1
 80171a8:	b1db      	cbz	r3, 80171e2 <_fflush_r+0x42>
 80171aa:	b118      	cbz	r0, 80171b4 <_fflush_r+0x14>
 80171ac:	6983      	ldr	r3, [r0, #24]
 80171ae:	b90b      	cbnz	r3, 80171b4 <_fflush_r+0x14>
 80171b0:	f7ff fa38 	bl	8016624 <__sinit>
 80171b4:	4b0c      	ldr	r3, [pc, #48]	; (80171e8 <_fflush_r+0x48>)
 80171b6:	429c      	cmp	r4, r3
 80171b8:	d109      	bne.n	80171ce <_fflush_r+0x2e>
 80171ba:	686c      	ldr	r4, [r5, #4]
 80171bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171c0:	b17b      	cbz	r3, 80171e2 <_fflush_r+0x42>
 80171c2:	4621      	mov	r1, r4
 80171c4:	4628      	mov	r0, r5
 80171c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171ca:	f7ff bf63 	b.w	8017094 <__sflush_r>
 80171ce:	4b07      	ldr	r3, [pc, #28]	; (80171ec <_fflush_r+0x4c>)
 80171d0:	429c      	cmp	r4, r3
 80171d2:	d101      	bne.n	80171d8 <_fflush_r+0x38>
 80171d4:	68ac      	ldr	r4, [r5, #8]
 80171d6:	e7f1      	b.n	80171bc <_fflush_r+0x1c>
 80171d8:	4b05      	ldr	r3, [pc, #20]	; (80171f0 <_fflush_r+0x50>)
 80171da:	429c      	cmp	r4, r3
 80171dc:	bf08      	it	eq
 80171de:	68ec      	ldreq	r4, [r5, #12]
 80171e0:	e7ec      	b.n	80171bc <_fflush_r+0x1c>
 80171e2:	2000      	movs	r0, #0
 80171e4:	bd38      	pop	{r3, r4, r5, pc}
 80171e6:	bf00      	nop
 80171e8:	0802571c 	.word	0x0802571c
 80171ec:	0802573c 	.word	0x0802573c
 80171f0:	080256fc 	.word	0x080256fc

080171f4 <_lseek_r>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4c07      	ldr	r4, [pc, #28]	; (8017214 <_lseek_r+0x20>)
 80171f8:	4605      	mov	r5, r0
 80171fa:	4608      	mov	r0, r1
 80171fc:	4611      	mov	r1, r2
 80171fe:	2200      	movs	r2, #0
 8017200:	6022      	str	r2, [r4, #0]
 8017202:	461a      	mov	r2, r3
 8017204:	f7e9 fd60 	bl	8000cc8 <_lseek>
 8017208:	1c43      	adds	r3, r0, #1
 801720a:	d102      	bne.n	8017212 <_lseek_r+0x1e>
 801720c:	6823      	ldr	r3, [r4, #0]
 801720e:	b103      	cbz	r3, 8017212 <_lseek_r+0x1e>
 8017210:	602b      	str	r3, [r5, #0]
 8017212:	bd38      	pop	{r3, r4, r5, pc}
 8017214:	2000f7a0 	.word	0x2000f7a0

08017218 <__swhatbuf_r>:
 8017218:	b570      	push	{r4, r5, r6, lr}
 801721a:	460e      	mov	r6, r1
 801721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017220:	2900      	cmp	r1, #0
 8017222:	b096      	sub	sp, #88	; 0x58
 8017224:	4614      	mov	r4, r2
 8017226:	461d      	mov	r5, r3
 8017228:	da07      	bge.n	801723a <__swhatbuf_r+0x22>
 801722a:	2300      	movs	r3, #0
 801722c:	602b      	str	r3, [r5, #0]
 801722e:	89b3      	ldrh	r3, [r6, #12]
 8017230:	061a      	lsls	r2, r3, #24
 8017232:	d410      	bmi.n	8017256 <__swhatbuf_r+0x3e>
 8017234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017238:	e00e      	b.n	8017258 <__swhatbuf_r+0x40>
 801723a:	466a      	mov	r2, sp
 801723c:	f000 f864 	bl	8017308 <_fstat_r>
 8017240:	2800      	cmp	r0, #0
 8017242:	dbf2      	blt.n	801722a <__swhatbuf_r+0x12>
 8017244:	9a01      	ldr	r2, [sp, #4]
 8017246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801724a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801724e:	425a      	negs	r2, r3
 8017250:	415a      	adcs	r2, r3
 8017252:	602a      	str	r2, [r5, #0]
 8017254:	e7ee      	b.n	8017234 <__swhatbuf_r+0x1c>
 8017256:	2340      	movs	r3, #64	; 0x40
 8017258:	2000      	movs	r0, #0
 801725a:	6023      	str	r3, [r4, #0]
 801725c:	b016      	add	sp, #88	; 0x58
 801725e:	bd70      	pop	{r4, r5, r6, pc}

08017260 <__smakebuf_r>:
 8017260:	898b      	ldrh	r3, [r1, #12]
 8017262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017264:	079d      	lsls	r5, r3, #30
 8017266:	4606      	mov	r6, r0
 8017268:	460c      	mov	r4, r1
 801726a:	d507      	bpl.n	801727c <__smakebuf_r+0x1c>
 801726c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017270:	6023      	str	r3, [r4, #0]
 8017272:	6123      	str	r3, [r4, #16]
 8017274:	2301      	movs	r3, #1
 8017276:	6163      	str	r3, [r4, #20]
 8017278:	b002      	add	sp, #8
 801727a:	bd70      	pop	{r4, r5, r6, pc}
 801727c:	ab01      	add	r3, sp, #4
 801727e:	466a      	mov	r2, sp
 8017280:	f7ff ffca 	bl	8017218 <__swhatbuf_r>
 8017284:	9900      	ldr	r1, [sp, #0]
 8017286:	4605      	mov	r5, r0
 8017288:	4630      	mov	r0, r6
 801728a:	f7ff faab 	bl	80167e4 <_malloc_r>
 801728e:	b948      	cbnz	r0, 80172a4 <__smakebuf_r+0x44>
 8017290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017294:	059a      	lsls	r2, r3, #22
 8017296:	d4ef      	bmi.n	8017278 <__smakebuf_r+0x18>
 8017298:	f023 0303 	bic.w	r3, r3, #3
 801729c:	f043 0302 	orr.w	r3, r3, #2
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	e7e3      	b.n	801726c <__smakebuf_r+0xc>
 80172a4:	4b0d      	ldr	r3, [pc, #52]	; (80172dc <__smakebuf_r+0x7c>)
 80172a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80172a8:	89a3      	ldrh	r3, [r4, #12]
 80172aa:	6020      	str	r0, [r4, #0]
 80172ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172b0:	81a3      	strh	r3, [r4, #12]
 80172b2:	9b00      	ldr	r3, [sp, #0]
 80172b4:	6163      	str	r3, [r4, #20]
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	6120      	str	r0, [r4, #16]
 80172ba:	b15b      	cbz	r3, 80172d4 <__smakebuf_r+0x74>
 80172bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172c0:	4630      	mov	r0, r6
 80172c2:	f000 f833 	bl	801732c <_isatty_r>
 80172c6:	b128      	cbz	r0, 80172d4 <__smakebuf_r+0x74>
 80172c8:	89a3      	ldrh	r3, [r4, #12]
 80172ca:	f023 0303 	bic.w	r3, r3, #3
 80172ce:	f043 0301 	orr.w	r3, r3, #1
 80172d2:	81a3      	strh	r3, [r4, #12]
 80172d4:	89a3      	ldrh	r3, [r4, #12]
 80172d6:	431d      	orrs	r5, r3
 80172d8:	81a5      	strh	r5, [r4, #12]
 80172da:	e7cd      	b.n	8017278 <__smakebuf_r+0x18>
 80172dc:	080165ed 	.word	0x080165ed

080172e0 <__malloc_lock>:
 80172e0:	4770      	bx	lr

080172e2 <__malloc_unlock>:
 80172e2:	4770      	bx	lr

080172e4 <_read_r>:
 80172e4:	b538      	push	{r3, r4, r5, lr}
 80172e6:	4c07      	ldr	r4, [pc, #28]	; (8017304 <_read_r+0x20>)
 80172e8:	4605      	mov	r5, r0
 80172ea:	4608      	mov	r0, r1
 80172ec:	4611      	mov	r1, r2
 80172ee:	2200      	movs	r2, #0
 80172f0:	6022      	str	r2, [r4, #0]
 80172f2:	461a      	mov	r2, r3
 80172f4:	f7e9 fc88 	bl	8000c08 <_read>
 80172f8:	1c43      	adds	r3, r0, #1
 80172fa:	d102      	bne.n	8017302 <_read_r+0x1e>
 80172fc:	6823      	ldr	r3, [r4, #0]
 80172fe:	b103      	cbz	r3, 8017302 <_read_r+0x1e>
 8017300:	602b      	str	r3, [r5, #0]
 8017302:	bd38      	pop	{r3, r4, r5, pc}
 8017304:	2000f7a0 	.word	0x2000f7a0

08017308 <_fstat_r>:
 8017308:	b538      	push	{r3, r4, r5, lr}
 801730a:	4c07      	ldr	r4, [pc, #28]	; (8017328 <_fstat_r+0x20>)
 801730c:	2300      	movs	r3, #0
 801730e:	4605      	mov	r5, r0
 8017310:	4608      	mov	r0, r1
 8017312:	4611      	mov	r1, r2
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	f7e9 fcbc 	bl	8000c92 <_fstat>
 801731a:	1c43      	adds	r3, r0, #1
 801731c:	d102      	bne.n	8017324 <_fstat_r+0x1c>
 801731e:	6823      	ldr	r3, [r4, #0]
 8017320:	b103      	cbz	r3, 8017324 <_fstat_r+0x1c>
 8017322:	602b      	str	r3, [r5, #0]
 8017324:	bd38      	pop	{r3, r4, r5, pc}
 8017326:	bf00      	nop
 8017328:	2000f7a0 	.word	0x2000f7a0

0801732c <_isatty_r>:
 801732c:	b538      	push	{r3, r4, r5, lr}
 801732e:	4c06      	ldr	r4, [pc, #24]	; (8017348 <_isatty_r+0x1c>)
 8017330:	2300      	movs	r3, #0
 8017332:	4605      	mov	r5, r0
 8017334:	4608      	mov	r0, r1
 8017336:	6023      	str	r3, [r4, #0]
 8017338:	f7e9 fcbb 	bl	8000cb2 <_isatty>
 801733c:	1c43      	adds	r3, r0, #1
 801733e:	d102      	bne.n	8017346 <_isatty_r+0x1a>
 8017340:	6823      	ldr	r3, [r4, #0]
 8017342:	b103      	cbz	r3, 8017346 <_isatty_r+0x1a>
 8017344:	602b      	str	r3, [r5, #0]
 8017346:	bd38      	pop	{r3, r4, r5, pc}
 8017348:	2000f7a0 	.word	0x2000f7a0

0801734c <_init>:
 801734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801734e:	bf00      	nop
 8017350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017352:	bc08      	pop	{r3}
 8017354:	469e      	mov	lr, r3
 8017356:	4770      	bx	lr

08017358 <_fini>:
 8017358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801735a:	bf00      	nop
 801735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801735e:	bc08      	pop	{r3}
 8017360:	469e      	mov	lr, r3
 8017362:	4770      	bx	lr
