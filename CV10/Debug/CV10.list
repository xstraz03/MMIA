
CV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e624  08017e84  08017e84  00027e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080264a8  080264a8  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  080264a8  080264a8  000364a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080264b0  080264b0  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080264b0  080264b0  000364b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080264b4  080264b4  000364b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080264b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f930  200001f0  080266a8  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fb20  080266a8  0004fb20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046a3f  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008503  00000000  00000000  00086c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002418  00000000  00000000  0008f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002190  00000000  00000000  00091580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036a09  00000000  00000000  00093710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f588  00000000  00000000  000ca119  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe409  00000000  00000000  000f96a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f7aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ca0  00000000  00000000  001f7b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017e6c 	.word	0x08017e6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08017e6c 	.word	0x08017e6c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <LEDS_CGI_Handler>:

/**
  * @brief  CGI handler for LEDs control 
  */
const char * LEDS_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
  uint32_t i=0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  
  /* We have only one SSI handler iIndex = 0 */
  if (iIndex==0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d15b      	bne.n	80006c4 <LEDS_CGI_Handler+0xd0>
  {
    /* All leds off */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	482f      	ldr	r0, [pc, #188]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000612:	f002 f957 	bl	80028c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	482d      	ldr	r0, [pc, #180]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 800061c:	f002 f952 	bl	80028c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	482a      	ldr	r0, [pc, #168]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000628:	f002 f94c 	bl	80028c4 <HAL_GPIO_WritePin>
    
    /* Check cgi parameter : application GET /leds.cgi?led=2&led=4 */
    for (i=0; i<iNumParams; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e044      	b.n	80006bc <LEDS_CGI_Handler+0xc8>
    {
      /* check parameter "led" */
      if (strcmp(pcParam[i] , "led")==0)   
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4925      	ldr	r1, [pc, #148]	; (80006d4 <LEDS_CGI_Handler+0xe0>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdd6 	bl	80001f0 <strcmp>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d135      	bne.n	80006b6 <LEDS_CGI_Handler+0xc2>
      {
        /* switch led1 ON if 1 */
        if(strcmp(pcValue[i], "1") ==0) 
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	4413      	add	r3, r2
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4920      	ldr	r1, [pc, #128]	; (80006d8 <LEDS_CGI_Handler+0xe4>)
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fdca 	bl	80001f0 <strcmp>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d105      	bne.n	800066e <LEDS_CGI_Handler+0x7a>
        	 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2101      	movs	r1, #1
 8000666:	481a      	ldr	r0, [pc, #104]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 8000668:	f002 f92c 	bl	80028c4 <HAL_GPIO_WritePin>
 800066c:	e023      	b.n	80006b6 <LEDS_CGI_Handler+0xc2>
          
        /* switch led2 ON if 2 */
        else if(strcmp(pcValue[i], "2") ==0) 
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4918      	ldr	r1, [pc, #96]	; (80006dc <LEDS_CGI_Handler+0xe8>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fdb8 	bl	80001f0 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <LEDS_CGI_Handler+0x9e>
        	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	4811      	ldr	r0, [pc, #68]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 800068c:	f002 f91a 	bl	80028c4 <HAL_GPIO_WritePin>
 8000690:	e011      	b.n	80006b6 <LEDS_CGI_Handler+0xc2>
        
        /* switch led3 ON if 3 */
        else if(strcmp(pcValue[i], "3") ==0) 
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4413      	add	r3, r2
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4910      	ldr	r1, [pc, #64]	; (80006e0 <LEDS_CGI_Handler+0xec>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fda6 	bl	80001f0 <strcmp>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <LEDS_CGI_Handler+0xc2>
        	 HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <LEDS_CGI_Handler+0xdc>)
 80006b2:	f002 f907 	bl	80028c4 <HAL_GPIO_WritePin>
    for (i=0; i<iNumParams; i++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	697a      	ldr	r2, [r7, #20]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3b6      	bcc.n	8000632 <LEDS_CGI_Handler+0x3e>
        
      }
    }
  }
  /* uri to send after cgi call*/
  return "/STM32F4xxLED.html";  
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <LEDS_CGI_Handler+0xf0>)
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400
 80006d4:	08017e94 	.word	0x08017e94
 80006d8:	08017e98 	.word	0x08017e98
 80006dc:	08017e9c 	.word	0x08017e9c
 80006e0:	08017ea0 	.word	0x08017ea0
 80006e4:	08017ea4 	.word	0x08017ea4

080006e8 <http_server_init>:

/**
  * @brief  Http webserver Init
  */
void http_server_init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Httpd Init */
  httpd_init();
 80006ec:	f00a fae8 	bl	800acc0 <httpd_init>
  

  /* configure CGI handlers (LEDs control CGI) */
  CGI_TAB[0] = LEDS_CGI;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <http_server_init+0x20>)
 80006f2:	4a06      	ldr	r2, [pc, #24]	; (800070c <http_server_init+0x24>)
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 1);  
 80006fc:	2101      	movs	r1, #1
 80006fe:	4802      	ldr	r0, [pc, #8]	; (8000708 <http_server_init+0x20>)
 8000700:	f00a fb2a 	bl	800ad58 <http_set_cgi_handlers>
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20008d90 	.word	0x20008d90
 800070c:	0801add0 	.word	0x0801add0

08000710 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000716:	f000 fe35 	bl	8001384 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071a:	f000 f821 	bl	8000760 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800071e:	f000 f8e1 	bl	80008e4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000722:	f000 f887 	bl	8000834 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000726:	f000 f8af 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
	MX_LWIP_Init();
 800072a:	f003 ff59 	bl	80045e0 <MX_LWIP_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <main+0x48>)
 8000730:	1d3c      	adds	r4, r7, #4
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fb19 	bl	8004d7c <osThreadCreate>
 800074a:	4602      	mov	r2, r0
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <main+0x4c>)
 800074e:	601a      	str	r2, [r3, #0]
	/* add threads, ... */

	/* We should never get here as control is now taken by the scheduler */

	/* Start scheduler */
	osKernelStart();
 8000750:	f004 fafd 	bl	8004d4e <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x44>
 8000756:	bf00      	nop
 8000758:	08017ec4 	.word	0x08017ec4
 800075c:	20008d98 	.word	0x20008d98

08000760 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f016 fa02 	bl	8016b78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	; (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80007d4:	23a8      	movs	r3, #168	; 0xa8
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 f9a3 	bl	8002b30 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007f0:	f000 f948 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2105      	movs	r1, #5
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fbfc 	bl	8003010 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800081e:	f000 f931 	bl	8000a84 <Error_Handler>
	}
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART3_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x4c>)
 800086c:	f003 f832 	bl	80038d4 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000876:	f000 f905 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20008d9c 	.word	0x20008d9c
 8000884:	40004800 	.word	0x40004800

08000888 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2204      	movs	r2, #4
 8000898:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f002 f813 	bl	80028f6 <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
	{
		Error_Handler();
 80008d6:	f000 f8d5 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20008ddc 	.word	0x20008ddc

080008e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4a      	ldr	r2, [pc, #296]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <MX_GPIO_Init+0x148>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b44      	ldr	r3, [pc, #272]	; (8000a2c <MX_GPIO_Init+0x148>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a3c      	ldr	r2, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x148>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a35      	ldr	r2, [pc, #212]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a2e      	ldr	r2, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_GPIO_Init+0x148>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x148>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x148>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4821      	ldr	r0, [pc, #132]	; (8000a30 <MX_GPIO_Init+0x14c>)
 80009aa:	f001 ff8b 	bl	80028c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4820      	ldr	r0, [pc, #128]	; (8000a34 <MX_GPIO_Init+0x150>)
 80009b4:	f001 ff86 	bl	80028c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_GPIO_Init+0x154>)
 80009c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <MX_GPIO_Init+0x158>)
 80009ce:	f001 fdb7 	bl	8002540 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_GPIO_Init+0x14c>)
 80009ec:	f001 fda8 	bl	8002540 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000a08:	f001 fd9a 	bl	8002540 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_GPIO_Init+0x150>)
 8000a20:	f001 fd8e 	bl	8002540 <HAL_GPIO_Init>

}
 8000a24:	bf00      	nop
 8000a26:	3730      	adds	r7, #48	; 0x30
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	40020800 	.word	0x40020800

08000a40 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	/* Initialize tcp echo server */
	tcpecho_init();
 8000a48:	f000 fa82 	bl	8000f50 <tcpecho_init>

	/* Initialize HTTP server */
	httpd_init();
 8000a4c:	f00a f938 	bl	800acc0 <httpd_init>

	/* Initialize telnet server */
	telnet_init();
 8000a50:	f000 fc5a 	bl	8001308 <telnet_init>

	/* Initialize cgi server */
	http_server_init();
 8000a54:	f7ff fe48 	bl	80006e8 <http_server_init>
	/* USER CODE END RTOS_THREADS */

	for(;;)
	{
		osDelay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f004 f9db 	bl	8004e14 <osDelay>
 8000a5e:	e7fb      	b.n	8000a58 <StartDefaultTask+0x18>

08000a60 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a72:	f000 fca9 	bl	80013c8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010000 	.word	0x40010000

08000a84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f000 fd6f 	bl	80015bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12c      	bne.n	8000b68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0x8c>)
 8000b64:	f001 fcec 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b9c:	d13f      	bne.n	8000c1e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a20      	ldr	r2, [pc, #128]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bba:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bcc:	230a      	movs	r3, #10
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4815      	ldr	r0, [pc, #84]	; (8000c2c <HAL_PCD_MspInit+0xb0>)
 8000bd8:	f001 fcb2 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480e      	ldr	r0, [pc, #56]	; (8000c2c <HAL_PCD_MspInit+0xb0>)
 8000bf2:	f001 fca5 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6353      	str	r3, [r2, #52]	; 0x34
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_PCD_MspInit+0xac>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	2019      	movs	r0, #25
 8000c46:	f000 fcb9 	bl	80015bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f000 fcd2 	bl	80015f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_InitTick+0xa4>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6c:	f107 0210 	add.w	r2, r7, #16
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fbbc 	bl	80033f4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c7c:	f002 fba6 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8000c80:	4603      	mov	r3, r0
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c88:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <HAL_InitTick+0xa8>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3b01      	subs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_InitTick+0xac>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_InitTick+0xb0>)
 8000c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_InitTick+0xac>)
 8000c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_InitTick+0xac>)
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_InitTick+0xac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_InitTick+0xac>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HAL_InitTick+0xac>)
 8000cb6:	f002 fbcf 	bl	8003458 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HAL_InitTick+0xac>)
 8000cc2:	f002 fbfe 	bl	80034c2 <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	200091e4 	.word	0x200091e4
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d1e:	f002 fbf4 	bl	800350a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200091e4 	.word	0x200091e4

08000d2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4601      	mov	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
	}

return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
	}
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_isatty>:

int _isatty(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x50>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x16>
		heap_end = &end;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <_sbrk+0x50>)
 8000e1a:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <_sbrk+0x54>)
 8000e1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <_sbrk+0x50>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <_sbrk+0x50>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	466a      	mov	r2, sp
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d905      	bls.n	8000e3e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <_sbrk+0x58>)
 8000e34:	220c      	movs	r2, #12
 8000e36:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3c:	e006      	b.n	8000e4c <_sbrk+0x44>
	}

	heap_end += incr;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <_sbrk+0x50>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <_sbrk+0x50>)
 8000e48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20000460 	.word	0x20000460
 8000e5c:	2000fb20 	.word	0x2000fb20
 8000e60:	2000fb18 	.word	0x2000fb18

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x28>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x28>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x28>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2010      	movs	r0, #16
 8000e9e:	f006 feeb 	bl	8007c78 <netconn_new_with_proto_and_callback>
 8000ea2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d04e      	beq.n	8000f48 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000eaa:	2207      	movs	r2, #7
 8000eac:	2100      	movs	r1, #0
 8000eae:	69f8      	ldr	r0, [r7, #28]
 8000eb0:	f006 ff82 	bl	8007db8 <netconn_bind>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000eb8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d13f      	bne.n	8000f40 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000ec0:	21ff      	movs	r1, #255	; 0xff
 8000ec2:	69f8      	ldr	r0, [r7, #28]
 8000ec4:	f006 ffb0 	bl	8007e28 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	69f8      	ldr	r0, [r7, #28]
 8000ed0:	f006 ffd6 	bl	8007e80 <netconn_accept>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000ed8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f3      	bne.n	8000ec8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000ee0:	e01b      	b.n	8000f1a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	f107 020a 	add.w	r2, r7, #10
 8000ee8:	f107 010c 	add.w	r1, r7, #12
 8000eec:	4618      	mov	r0, r3
 8000eee:	f008 fe91 	bl	8009c14 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	897b      	ldrh	r3, [r7, #10]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	f007 f984 	bl	800820c <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f008 fece 	bl	8009ca8 <netbuf_next>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	dae7      	bge.n	8000ee2 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f008 fe5d 	bl	8009bd4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f107 0210 	add.w	r2, r7, #16
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f007 f8fa 	bl	800811c <netconn_recv>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0d9      	beq.n	8000ee2 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f007 fa13 	bl	800835c <netconn_close>
          netconn_delete(newconn);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 ff17 	bl	8007d6c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000f3e:	e7c3      	b.n	8000ec8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f006 ff12 	bl	8007d6c <netconn_delete>
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000f56:	2304      	movs	r3, #4
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	2200      	movs	r2, #0
 8000f60:	4903      	ldr	r1, [pc, #12]	; (8000f70 <tcpecho_init+0x20>)
 8000f62:	4804      	ldr	r0, [pc, #16]	; (8000f74 <tcpecho_init+0x24>)
 8000f64:	f015 fd86 	bl	8016a74 <sys_thread_new>
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08000e91 	.word	0x08000e91
 8000f74:	08017ee0 	.word	0x08017ee0

08000f78 <telnet_process_command>:




static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	char *token, *saveptr;// saveptr interni promena kvuli strtok_r
	static char s[CHAR_BUFFER];


	token = strtok_r(cmd, " ",&saveptr);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	461a      	mov	r2, r3
 8000f88:	497f      	ldr	r1, [pc, #508]	; (8001188 <telnet_process_command+0x210>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f015 fecf 	bl	8016d2e <strtok_r>
 8000f90:	60f8      	str	r0, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 8000f92:	497e      	ldr	r1, [pc, #504]	; (800118c <telnet_process_command+0x214>)
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f015 fe63 	bl	8016c60 <strcasecmp>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d114      	bne.n	8000fca <telnet_process_command+0x52>
	{
		sprintf(s, "Komunikace OK\n");
 8000fa0:	4a7b      	ldr	r2, [pc, #492]	; (8001190 <telnet_process_command+0x218>)
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	; (8001194 <telnet_process_command+0x21c>)
 8000fa4:	4614      	mov	r4, r2
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	c407      	stmia	r4!, {r0, r1, r2}
 8000faa:	8023      	strh	r3, [r4, #0]
 8000fac:	3402      	adds	r4, #2
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	7023      	strb	r3, [r4, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000fb2:	4877      	ldr	r0, [pc, #476]	; (8001190 <telnet_process_command+0x218>)
 8000fb4:	f7ff f926 	bl	8000204 <strlen>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4973      	ldr	r1, [pc, #460]	; (8001190 <telnet_process_command+0x218>)
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f007 f922 	bl	800820c <netconn_write_partly>
		sprintf(s, "STATUS: LED1 %s LED2 %s LED3 %s", LED1_status, LED2_status,LED3_status);
		netconn_write(conn, s, strlen(s), NETCONN_COPY);

	}

}
 8000fc8:	e0da      	b.n	8001180 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED1") == 0)
 8000fca:	4973      	ldr	r1, [pc, #460]	; (8001198 <telnet_process_command+0x220>)
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f015 fe47 	bl	8016c60 <strcasecmp>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d121      	bne.n	800101c <telnet_process_command+0xa4>
		token = strtok_r(cmd, " ",&saveptr);
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	461a      	mov	r2, r3
 8000fde:	496a      	ldr	r1, [pc, #424]	; (8001188 <telnet_process_command+0x210>)
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f015 fea4 	bl	8016d2e <strtok_r>
 8000fe6:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000fe8:	496c      	ldr	r1, [pc, #432]	; (800119c <telnet_process_command+0x224>)
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f015 fe38 	bl	8016c60 <strcasecmp>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d104      	bne.n	8001000 <telnet_process_command+0x88>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4869      	ldr	r0, [pc, #420]	; (80011a0 <telnet_process_command+0x228>)
 8000ffc:	f001 fc62 	bl	80028c4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 8001000:	4968      	ldr	r1, [pc, #416]	; (80011a4 <telnet_process_command+0x22c>)
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f015 fe2c 	bl	8016c60 <strcasecmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 80b8 	bne.w	8001180 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,0);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	4862      	ldr	r0, [pc, #392]	; (80011a0 <telnet_process_command+0x228>)
 8001016:	f001 fc55 	bl	80028c4 <HAL_GPIO_WritePin>
}
 800101a:	e0b1      	b.n	8001180 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED2") == 0)
 800101c:	4962      	ldr	r1, [pc, #392]	; (80011a8 <telnet_process_command+0x230>)
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f015 fe1e 	bl	8016c60 <strcasecmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d121      	bne.n	800106e <telnet_process_command+0xf6>
		token = strtok_r(cmd, " ",&saveptr);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	461a      	mov	r2, r3
 8001030:	4955      	ldr	r1, [pc, #340]	; (8001188 <telnet_process_command+0x210>)
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f015 fe7b 	bl	8016d2e <strtok_r>
 8001038:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 800103a:	4958      	ldr	r1, [pc, #352]	; (800119c <telnet_process_command+0x224>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f015 fe0f 	bl	8016c60 <strcasecmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d104      	bne.n	8001052 <telnet_process_command+0xda>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 8001048:	2201      	movs	r2, #1
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	4854      	ldr	r0, [pc, #336]	; (80011a0 <telnet_process_command+0x228>)
 800104e:	f001 fc39 	bl	80028c4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 8001052:	4954      	ldr	r1, [pc, #336]	; (80011a4 <telnet_process_command+0x22c>)
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f015 fe03 	bl	8016c60 <strcasecmp>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 808f 	bne.w	8001180 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 8001062:	2200      	movs	r2, #0
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	484e      	ldr	r0, [pc, #312]	; (80011a0 <telnet_process_command+0x228>)
 8001068:	f001 fc2c 	bl	80028c4 <HAL_GPIO_WritePin>
}
 800106c:	e088      	b.n	8001180 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED3") == 0)
 800106e:	494f      	ldr	r1, [pc, #316]	; (80011ac <telnet_process_command+0x234>)
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f015 fdf5 	bl	8016c60 <strcasecmp>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d122      	bne.n	80010c2 <telnet_process_command+0x14a>
		token = strtok_r(cmd, " ",&saveptr);
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	461a      	mov	r2, r3
 8001082:	4941      	ldr	r1, [pc, #260]	; (8001188 <telnet_process_command+0x210>)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f015 fe52 	bl	8016d2e <strtok_r>
 800108a:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 800108c:	4943      	ldr	r1, [pc, #268]	; (800119c <telnet_process_command+0x224>)
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f015 fde6 	bl	8016c60 <strcasecmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <telnet_process_command+0x12e>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,1);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a0:	483f      	ldr	r0, [pc, #252]	; (80011a0 <telnet_process_command+0x228>)
 80010a2:	f001 fc0f 	bl	80028c4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 80010a6:	493f      	ldr	r1, [pc, #252]	; (80011a4 <telnet_process_command+0x22c>)
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f015 fdd9 	bl	8016c60 <strcasecmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d165      	bne.n	8001180 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ba:	4839      	ldr	r0, [pc, #228]	; (80011a0 <telnet_process_command+0x228>)
 80010bc:	f001 fc02 	bl	80028c4 <HAL_GPIO_WritePin>
}
 80010c0:	e05e      	b.n	8001180 <telnet_process_command+0x208>
	else if (strcasecmp(token, "STATUS") == 0)
 80010c2:	493b      	ldr	r1, [pc, #236]	; (80011b0 <telnet_process_command+0x238>)
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f015 fdcb 	bl	8016c60 <strcasecmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d157      	bne.n	8001180 <telnet_process_command+0x208>
		token = strtok_r(cmd, " ",&saveptr);
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	461a      	mov	r2, r3
 80010d6:	492c      	ldr	r1, [pc, #176]	; (8001188 <telnet_process_command+0x210>)
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f015 fe28 	bl	8016d2e <strtok_r>
 80010de:	60f8      	str	r0, [r7, #12]
		if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)==1) strcpy(LED1_status, "Zapnuto");
 80010e0:	2101      	movs	r1, #1
 80010e2:	482f      	ldr	r0, [pc, #188]	; (80011a0 <telnet_process_command+0x228>)
 80010e4:	f001 fbd6 	bl	8002894 <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d106      	bne.n	80010fc <telnet_process_command+0x184>
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <telnet_process_command+0x23c>)
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <telnet_process_command+0x240>)
 80010f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010fa:	e005      	b.n	8001108 <telnet_process_command+0x190>
		else strcpy(LED1_status, "Vypnuto");
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <telnet_process_command+0x23c>)
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <telnet_process_command+0x244>)
 8001100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001104:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)==1) strcpy(LED2_status, "Zapnuto");
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4825      	ldr	r0, [pc, #148]	; (80011a0 <telnet_process_command+0x228>)
 800110c:	f001 fbc2 	bl	8002894 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d106      	bne.n	8001124 <telnet_process_command+0x1ac>
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <telnet_process_command+0x248>)
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <telnet_process_command+0x240>)
 800111a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001122:	e005      	b.n	8001130 <telnet_process_command+0x1b8>
		else strcpy(LED2_status, "Vypnuto");
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <telnet_process_command+0x248>)
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <telnet_process_command+0x244>)
 8001128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112c:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin)==1) strcpy(LED3_status, "Zapnuto");
 8001130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <telnet_process_command+0x228>)
 8001136:	f001 fbad 	bl	8002894 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <telnet_process_command+0x1d6>
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <telnet_process_command+0x24c>)
 8001142:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <telnet_process_command+0x240>)
 8001144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001148:	e883 0003 	stmia.w	r3, {r0, r1}
 800114c:	e005      	b.n	800115a <telnet_process_command+0x1e2>
		else strcpy(LED3_status, "Vypnuto");
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <telnet_process_command+0x24c>)
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <telnet_process_command+0x244>)
 8001152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001156:	e883 0003 	stmia.w	r3, {r0, r1}
		sprintf(s, "STATUS: LED1 %s LED2 %s LED3 %s", LED1_status, LED2_status,LED3_status);
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <telnet_process_command+0x24c>)
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <telnet_process_command+0x248>)
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <telnet_process_command+0x23c>)
 8001162:	4919      	ldr	r1, [pc, #100]	; (80011c8 <telnet_process_command+0x250>)
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <telnet_process_command+0x218>)
 8001166:	f015 fd5b 	bl	8016c20 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <telnet_process_command+0x218>)
 800116c:	f7ff f84a 	bl	8000204 <strlen>
 8001170:	4602      	mov	r2, r0
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	4905      	ldr	r1, [pc, #20]	; (8001190 <telnet_process_command+0x218>)
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f007 f846 	bl	800820c <netconn_write_partly>
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	08017ef0 	.word	0x08017ef0
 800118c:	08017ef4 	.word	0x08017ef4
 8001190:	20000464 	.word	0x20000464
 8001194:	08017efc 	.word	0x08017efc
 8001198:	08017f0c 	.word	0x08017f0c
 800119c:	08017f14 	.word	0x08017f14
 80011a0:	40020400 	.word	0x40020400
 80011a4:	08017f18 	.word	0x08017f18
 80011a8:	08017f1c 	.word	0x08017f1c
 80011ac:	08017f24 	.word	0x08017f24
 80011b0:	08017f2c 	.word	0x08017f2c
 80011b4:	200004c8 	.word	0x200004c8
 80011b8:	08017f34 	.word	0x08017f34
 80011bc:	08017f3c 	.word	0x08017f3c
 80011c0:	2000052c 	.word	0x2000052c
 80011c4:	20000590 	.word	0x20000590
 80011c8:	08017f44 	.word	0x08017f44

080011cc <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <telnet_byte_available+0x64>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b63      	cmp	r3, #99	; 0x63
 80011de:	d810      	bhi.n	8001202 <telnet_byte_available+0x36>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b1f      	cmp	r3, #31
 80011e4:	d90d      	bls.n	8001202 <telnet_byte_available+0x36>
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db09      	blt.n	8001202 <telnet_byte_available+0x36>
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <telnet_byte_available+0x64>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	b291      	uxth	r1, r2
 80011f6:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <telnet_byte_available+0x64>)
 80011f8:	8011      	strh	r1, [r2, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <telnet_byte_available+0x68>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b0a      	cmp	r3, #10
 8001206:	d002      	beq.n	800120e <telnet_byte_available+0x42>
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b0d      	cmp	r3, #13
 800120c:	d10c      	bne.n	8001228 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <telnet_byte_available+0x64>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <telnet_byte_available+0x68>)
 8001216:	2100      	movs	r1, #0
 8001218:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <telnet_byte_available+0x68>)
 800121e:	f7ff feab 	bl	8000f78 <telnet_process_command>
		cnt = 0;
 8001222:	4b03      	ldr	r3, [pc, #12]	; (8001230 <telnet_byte_available+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	801a      	strh	r2, [r3, #0]
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200005f4 	.word	0x200005f4
 8001234:	200005f8 	.word	0x200005f8

08001238 <telnet_thread>:


/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2010      	movs	r0, #16
 8001246:	f006 fd17 	bl	8007c78 <netconn_new_with_proto_and_callback>
 800124a:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d055      	beq.n	80012fe <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 23);
 8001252:	2217      	movs	r2, #23
 8001254:	2100      	movs	r1, #0
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	f006 fdae 	bl	8007db8 <netconn_bind>
 800125c:	4603      	mov	r3, r0
 800125e:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001260:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d146      	bne.n	80012f6 <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001268:	21ff      	movs	r1, #255	; 0xff
 800126a:	69f8      	ldr	r0, [r7, #28]
 800126c:	f006 fddc 	bl	8007e28 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	69f8      	ldr	r0, [r7, #28]
 8001278:	f006 fe02 	bl	8007e80 <netconn_accept>
 800127c:	4603      	mov	r3, r0
 800127e:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001280:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f3      	bne.n	8001270 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001288:	e022      	b.n	80012d0 <telnet_thread+0x98>
					{
						do
						{

							netbuf_data(buf, (void**)&data, &len);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f107 020a 	add.w	r2, r7, #10
 8001290:	f107 010c 	add.w	r1, r7, #12
 8001294:	4618      	mov	r0, r3
 8001296:	f008 fcbd 	bl	8009c14 <netbuf_data>
							while (len--) telnet_byte_available((uintptr_t)data++, newconn); // nešlo s * -> uintptr_t
 800129a:	e008      	b.n	80012ae <telnet_thread+0x76>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60fa      	str	r2, [r7, #12]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff8f 	bl	80011cc <telnet_byte_available>
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	b292      	uxth	r2, r2
 80012b4:	817a      	strh	r2, [r7, #10]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <telnet_thread+0x64>

							// netbuf_data(buf, &data, &len);
							//netconn_write(newconn, data, len, NETCONN_COPY);

						}
						while (netbuf_next(buf) >= 0);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fcf3 	bl	8009ca8 <netbuf_next>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dae0      	bge.n	800128a <telnet_thread+0x52>

						netbuf_delete(buf);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 fc82 	bl	8009bd4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f107 0210 	add.w	r2, r7, #16
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 ff1f 	bl	800811c <netconn_recv>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0d2      	beq.n	800128a <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f007 f838 	bl	800835c <netconn_close>
					netconn_delete(newconn);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fd3c 	bl	8007d6c <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80012f4:	e7bc      	b.n	8001270 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fd37 	bl	8007d6c <netconn_delete>
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 800130e:	2304      	movs	r3, #4
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	2200      	movs	r2, #0
 8001318:	4903      	ldr	r1, [pc, #12]	; (8001328 <telnet_init+0x20>)
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <telnet_init+0x24>)
 800131c:	f015 fbaa 	bl	8016a74 <sys_thread_new>
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	08001239 	.word	0x08001239
 800132c:	08017f64 	.word	0x08017f64

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001336:	e003      	b.n	8001340 <LoopCopyDataInit>

08001338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800133a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800133c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800133e:	3104      	adds	r1, #4

08001340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001348:	d3f6      	bcc.n	8001338 <CopyDataInit>
  ldr  r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800134c:	e002      	b.n	8001354 <LoopFillZerobss>

0800134e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800134e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001350:	f842 3b04 	str.w	r3, [r2], #4

08001354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001358:	d3f9      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800135a:	f7ff fd83 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f015 fbcd 	bl	8016afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f9d5 	bl	8000710 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001368:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800136c:	080264b8 	.word	0x080264b8
  ldr  r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001374:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001378:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800137c:	2000fb20 	.word	0x2000fb20

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f8fa 	bl	80015a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fc3c 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fb6c 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20009224 	.word	0x20009224

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20009224 	.word	0x20009224

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_Delay+0x40>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000008 	.word	0x20000008

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	; 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff4c 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ce:	f7ff ff61 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f7ff ffb1 	bl	8001540 <NVIC_EncodePriority>
 80015de:	4602      	mov	r2, r0
 80015e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff80 	bl	80014ec <__NVIC_SetPriority>
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff54 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001620:	4baa      	ldr	r3, [pc, #680]	; (80018cc <HAL_ETH_Init+0x2bc>)
 8001622:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e185      	b.n	8001942 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f003 f80a 	bl	8004664 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_ETH_Init+0x2c0>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	4a9d      	ldr	r2, [pc, #628]	; (80018d0 <HAL_ETH_Init+0x2c0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6453      	str	r3, [r2, #68]	; 0x44
 8001660:	4b9b      	ldr	r3, [pc, #620]	; (80018d0 <HAL_ETH_Init+0x2c0>)
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800166c:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <HAL_ETH_Init+0x2c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a98      	ldr	r2, [pc, #608]	; (80018d4 <HAL_ETH_Init+0x2c4>)
 8001672:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001676:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001678:	4b96      	ldr	r3, [pc, #600]	; (80018d4 <HAL_ETH_Init+0x2c4>)
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4994      	ldr	r1, [pc, #592]	; (80018d4 <HAL_ETH_Init+0x2c4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800169e:	f7ff fea7 	bl	80013f0 <HAL_GetTick>
 80016a2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016a4:	e011      	b.n	80016ca <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80016a6:	f7ff fea3 	bl	80013f0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016b4:	d909      	bls.n	80016ca <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e13b      	b.n	8001942 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e4      	bne.n	80016a6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f023 031c 	bic.w	r3, r3, #28
 80016ea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016ec:	f001 fe4e 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80016f0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4a78      	ldr	r2, [pc, #480]	; (80018d8 <HAL_ETH_Init+0x2c8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d908      	bls.n	800170c <HAL_ETH_Init+0xfc>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4a77      	ldr	r2, [pc, #476]	; (80018dc <HAL_ETH_Init+0x2cc>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d804      	bhi.n	800170c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e027      	b.n	800175c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4a73      	ldr	r2, [pc, #460]	; (80018dc <HAL_ETH_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d908      	bls.n	8001726 <HAL_ETH_Init+0x116>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_ETH_Init+0x2d0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d804      	bhi.n	8001726 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f043 030c 	orr.w	r3, r3, #12
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	e01a      	b.n	800175c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_ETH_Init+0x2d0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d903      	bls.n	8001736 <HAL_ETH_Init+0x126>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4a6c      	ldr	r2, [pc, #432]	; (80018e4 <HAL_ETH_Init+0x2d4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d911      	bls.n	800175a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4a6a      	ldr	r2, [pc, #424]	; (80018e4 <HAL_ETH_Init+0x2d4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d908      	bls.n	8001750 <HAL_ETH_Init+0x140>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <HAL_ETH_Init+0x2d8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d804      	bhi.n	8001750 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e005      	b.n	800175c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	e000      	b.n	800175c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800175a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001768:	2100      	movs	r1, #0
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fb9e 	bl	8001eac <HAL_ETH_WritePHYRegister>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fc2b 	bl	8001fd8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0d9      	b.n	8001942 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800178e:	20ff      	movs	r0, #255	; 0xff
 8001790:	f7ff fe3a 	bl	8001408 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a7 	beq.w	80018ec <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800179e:	f7ff fe27 	bl	80013f0 <HAL_GetTick>
 80017a2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	461a      	mov	r2, r3
 80017aa:	2101      	movs	r1, #1
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fb15 	bl	8001ddc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80017b2:	f7ff fe1d 	bl	80013f0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d90f      	bls.n	80017e4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fc04 	bl	8001fd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0ae      	b.n	8001942 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0da      	beq.n	80017a4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80017ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f2:	2100      	movs	r1, #0
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fb59 	bl	8001eac <HAL_ETH_WritePHYRegister>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00b      	beq.n	8001818 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fbe6 	bl	8001fd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001814:	2301      	movs	r3, #1
 8001816:	e094      	b.n	8001942 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fdea 	bl	80013f0 <HAL_GetTick>
 800181c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	461a      	mov	r2, r3
 8001824:	2101      	movs	r1, #1
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fad8 	bl	8001ddc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800182c:	f7ff fde0 	bl	80013f0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d90f      	bls.n	800185e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001842:	6939      	ldr	r1, [r7, #16]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fbc7 	bl	8001fd8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e071      	b.n	8001942 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0da      	beq.n	800181e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	461a      	mov	r2, r3
 800186e:	211f      	movs	r1, #31
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 fab3 	bl	8001ddc <HAL_ETH_ReadPHYRegister>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00b      	beq.n	8001894 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fba8 	bl	8001fd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001890:	2301      	movs	r3, #1
 8001892:	e056      	b.n	8001942 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	e002      	b.n	80018ae <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	e037      	b.n	8001930 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e032      	b.n	8001930 <HAL_ETH_Init+0x320>
 80018ca:	bf00      	nop
 80018cc:	03938700 	.word	0x03938700
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40013800 	.word	0x40013800
 80018d8:	01312cff 	.word	0x01312cff
 80018dc:	02160ebf 	.word	0x02160ebf
 80018e0:	039386ff 	.word	0x039386ff
 80018e4:	05f5e0ff 	.word	0x05f5e0ff
 80018e8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fad1 	bl	8001eac <HAL_ETH_WritePHYRegister>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fb5e 	bl	8001fd8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e00c      	b.n	8001942 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001928:	f640 70ff 	movw	r0, #4095	; 0xfff
 800192c:	f7ff fd6c 	bl	8001408 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001930:	6939      	ldr	r1, [r7, #16]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fb50 	bl	8001fd8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3720      	adds	r7, #32
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop

0800194c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ETH_DMATxDescListInit+0x20>
 8001968:	2302      	movs	r3, #2
 800196a:	e052      	b.n	8001a12 <HAL_ETH_DMATxDescListInit+0xc6>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e030      	b.n	80019ea <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d105      	bne.n	80019c2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d208      	bcs.n	80019de <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	4413      	add	r3, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e002      	b.n	80019e4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3ca      	bcc.n	8001988 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fc:	3310      	adds	r3, #16
 80019fe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b087      	sub	sp, #28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ETH_DMARxDescListInit+0x20>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e056      	b.n	8001aec <HAL_ETH_DMARxDescListInit+0xce>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e034      	b.n	8001ac4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	015b      	lsls	r3, r3, #5
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	4413      	add	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001a72:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d208      	bcs.n	8001ab8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	4413      	add	r3, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	e002      	b.n	8001abe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d3c6      	bcc.n	8001a5a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ETH_TransmitFrame+0x24>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e0cd      	b.n	8001cb8 <HAL_ETH_TransmitFrame+0x1c0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0b8      	b.n	8001cb8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da09      	bge.n	8001b64 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2212      	movs	r2, #18
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0a9      	b.n	8001cb8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d915      	bls.n	8001b9a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	4b51      	ldr	r3, [pc, #324]	; (8001cc4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e001      	b.n	8001b9e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d11c      	bne.n	8001bde <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001bb2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001bbe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bce:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bdc:	e04b      	b.n	8001c76 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e044      	b.n	8001c6e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c08:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c12:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d116      	bne.n	8001c4c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c2c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001c32:	fb02 f203 	mul.w	r2, r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001c3e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c4a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c5a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d3b6      	bcc.n	8001be4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	3314      	adds	r3, #20
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	3314      	adds	r3, #20
 8001c94:	2204      	movs	r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	ac02b00b 	.word	0xac02b00b
 8001cc8:	fffffa0c 	.word	0xfffffa0c

08001ccc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e074      	b.n	8001dd0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001cf6:	e05a      	b.n	8001dae <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d10d      	bne.n	8001d2a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	461a      	mov	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
 8001d28:	e041      	b.n	8001dae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10b      	bne.n	8001d50 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001d4e:	e02e      	b.n	8001dae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d103      	bne.n	8001d72 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d7e:	1f1a      	subs	r2, r3, #4
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	461a      	mov	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e010      	b.n	8001dd0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db02      	blt.n	8001dbe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d99c      	bls.n	8001cf8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	460b      	mov	r3, r1
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b82      	cmp	r3, #130	; 0x82
 8001dfc:	d101      	bne.n	8001e02 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e050      	b.n	8001ea4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2282      	movs	r2, #130	; 0x82
 8001e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 031c 	and.w	r3, r3, #28
 8001e18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8a1b      	ldrh	r3, [r3, #16]
 8001e1e:	02db      	lsls	r3, r3, #11
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001e28:	897b      	ldrh	r3, [r7, #10]
 8001e2a:	019b      	lsls	r3, r3, #6
 8001e2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f023 0302 	bic.w	r3, r3, #2
 8001e3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4e:	f7ff facf 	bl	80013f0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e54:	e015      	b.n	8001e82 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e56:	f7ff facb 	bl	80013f0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d309      	bcc.n	8001e7a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e014      	b.n	8001ea4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e4      	bne.n	8001e56 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b42      	cmp	r3, #66	; 0x42
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e04e      	b.n	8001f70 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2242      	movs	r2, #66	; 0x42
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 031c 	and.w	r3, r3, #28
 8001ee8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8a1b      	ldrh	r3, [r3, #16]
 8001eee:	02db      	lsls	r3, r3, #11
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	019b      	lsls	r3, r3, #6
 8001efc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f28:	f7ff fa62 	bl	80013f0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f2e:	e015      	b.n	8001f5c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001f30:	f7ff fa5e 	bl	80013f0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d309      	bcc.n	8001f54 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e00d      	b.n	8001f70 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e4      	bne.n	8001f30 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_ETH_Start+0x16>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e01f      	b.n	8001fce <HAL_ETH_Start+0x56>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fa1c 	bl	80023dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fa36 	bl	8002416 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa80 	bl	80024b0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa4d 	bl	8002450 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa62 	bl	8002480 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0b0      	sub	sp, #192	; 0xc0
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ff4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002006:	2300      	movs	r3, #0
 8002008:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	663b      	str	r3, [r7, #96]	; 0x60
 8002024:	e001      	b.n	800202a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800202a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002034:	2300      	movs	r3, #0
 8002036:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002044:	2340      	movs	r3, #64	; 0x40
 8002046:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b0:	4bac      	ldr	r3, [pc, #688]	; (8002364 <ETH_MACDMAConfig+0x38c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80020ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020bc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020c0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020c4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020ca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020ce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020d2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020d8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020dc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020e0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020e4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020e8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020ec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80020ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002100:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210c:	2001      	movs	r0, #1
 800210e:	f7ff f97b 	bl	8001408 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800211a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800211c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800211e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002120:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002124:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800212a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800212c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002130:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002136:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800213c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002140:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002148:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800214a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff f956 	bl	8001408 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002164:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800216e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002178:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002188:	f64f 7341 	movw	r3, #65345	; 0xff41
 800218c:	4013      	ands	r3, r2
 800218e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002196:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800219c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800219e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80021b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80021b4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff f917 	bl	8001408 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fe:	2001      	movs	r0, #1
 8002200:	f7ff f902 	bl	8001408 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800221c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002220:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002232:	2304      	movs	r3, #4
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800223c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002252:	2300      	movs	r3, #0
 8002254:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002256:	2300      	movs	r3, #0
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002262:	3318      	adds	r3, #24
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800226a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <ETH_MACDMAConfig+0x390>)
 8002270:	4013      	ands	r3, r2
 8002272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002276:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002278:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800227a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800227c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800227e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002280:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002282:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002284:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002286:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002288:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800228a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800228c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800228e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002292:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002296:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022aa:	3318      	adds	r3, #24
 80022ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ba:	3318      	adds	r3, #24
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff f8a0 	bl	8001408 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d0:	3318      	adds	r3, #24
 80022d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80022f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff f879 	bl	8001408 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002322:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10f      	bne.n	800234c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	331c      	adds	r3, #28
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	331c      	adds	r3, #28
 800234a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	461a      	mov	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f809 	bl	800236c <ETH_MACAddressConfig>
}
 800235a:	bf00      	nop
 800235c:	37c0      	adds	r7, #192	; 0xc0
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	ff20810f 	.word	0xff20810f
 8002368:	f8de3f23 	.word	0xf8de3f23

0800236c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3305      	adds	r3, #5
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	3204      	adds	r2, #4
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <ETH_MACAddressConfig+0x68>)
 800238e:	4413      	add	r3, r2
 8002390:	461a      	mov	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3303      	adds	r3, #3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	061a      	lsls	r2, r3, #24
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3302      	adds	r3, #2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	041b      	lsls	r3, r3, #16
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3301      	adds	r3, #1
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	4313      	orrs	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <ETH_MACAddressConfig+0x6c>)
 80023be:	4413      	add	r3, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6013      	str	r3, [r2, #0]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40028040 	.word	0x40028040
 80023d8:	40028044 	.word	0x40028044

080023dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0208 	orr.w	r2, r2, #8
 80023f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002400:	2001      	movs	r0, #1
 8002402:	f000 f87f 	bl	8002504 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0204 	orr.w	r2, r2, #4
 8002430:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 f862 	bl	8002504 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	3318      	adds	r3, #24
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	3318      	adds	r3, #24
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	3318      	adds	r3, #24
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0202 	orr.w	r2, r2, #2
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	3318      	adds	r3, #24
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c4:	3318      	adds	r3, #24
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	3318      	adds	r3, #24
 80024d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e0:	3318      	adds	r3, #24
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f000 f80c 	bl	8002504 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	3318      	adds	r3, #24
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <ETH_Delay+0x34>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <ETH_Delay+0x38>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0a5b      	lsrs	r3, r3, #9
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002520:	bf00      	nop
  } 
  while (Delay --);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f9      	bne.n	8002520 <ETH_Delay+0x1c>
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e177      	b.n	800284c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8166 	bne.w	8002846 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00b      	beq.n	800259a <HAL_GPIO_Init+0x5a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258e:	2b11      	cmp	r3, #17
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b12      	cmp	r3, #18
 8002598:	d130      	bne.n	80025fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0201 	and.w	r2, r3, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0xfc>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b12      	cmp	r3, #18
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80c0 	beq.w	8002846 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <HAL_GPIO_Init+0x320>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a64      	ldr	r2, [pc, #400]	; (8002860 <HAL_GPIO_Init+0x320>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b62      	ldr	r3, [pc, #392]	; (8002860 <HAL_GPIO_Init+0x320>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_GPIO_Init+0x328>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d037      	beq.n	800277e <HAL_GPIO_Init+0x23e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_GPIO_Init+0x32c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d031      	beq.n	800277a <HAL_GPIO_Init+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a55      	ldr	r2, [pc, #340]	; (8002870 <HAL_GPIO_Init+0x330>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x236>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x334>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d025      	beq.n	8002772 <HAL_GPIO_Init+0x232>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_GPIO_Init+0x338>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_GPIO_Init+0x33c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x22a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_Init+0x340>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a50      	ldr	r2, [pc, #320]	; (8002884 <HAL_GPIO_Init+0x344>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <HAL_GPIO_Init+0x348>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_GPIO_Init+0x34c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x21a>
 8002756:	2309      	movs	r3, #9
 8002758:	e012      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275a:	230a      	movs	r3, #10
 800275c:	e010      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275e:	2308      	movs	r3, #8
 8002760:	e00e      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002762:	2307      	movs	r3, #7
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002766:	2306      	movs	r3, #6
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002790:	4934      	ldr	r1, [pc, #208]	; (8002864 <HAL_GPIO_Init+0x324>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_GPIO_Init+0x350>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c2:	4a33      	ldr	r2, [pc, #204]	; (8002890 <HAL_GPIO_Init+0x350>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_GPIO_Init+0x350>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ec:	4a28      	ldr	r2, [pc, #160]	; (8002890 <HAL_GPIO_Init+0x350>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_GPIO_Init+0x350>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002816:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_GPIO_Init+0x350>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_GPIO_Init+0x350>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_GPIO_Init+0x350>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae84 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40022000 	.word	0x40022000
 800288c:	40022400 	.word	0x40022400
 8002890:	40013c00 	.word	0x40013c00

08002894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]
 80028b0:	e001      	b.n	80028b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f8:	b08f      	sub	sp, #60	; 0x3c
 80028fa:	af0a      	add	r7, sp, #40	; 0x28
 80028fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e10f      	b.n	8002b28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f92a 	bl	8000b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2203      	movs	r2, #3
 800292c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fbef 	bl	800412a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	687e      	ldr	r6, [r7, #4]
 8002954:	466d      	mov	r5, sp
 8002956:	f106 0410 	add.w	r4, r6, #16
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002966:	e885 0003 	stmia.w	r5, {r0, r1}
 800296a:	1d33      	adds	r3, r6, #4
 800296c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f001 fb7a 	bl	8004068 <USB_CoreInit>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0d0      	b.n	8002b28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f001 fbdd 	bl	800414c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e04a      	b.n	8002a2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333d      	adds	r3, #61	; 0x3d
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	333c      	adds	r3, #60	; 0x3c
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	b298      	uxth	r0, r3
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3342      	adds	r3, #66	; 0x42
 80029d4:	4602      	mov	r2, r0
 80029d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	333f      	adds	r3, #63	; 0x3f
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3344      	adds	r3, #68	; 0x44
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3348      	adds	r3, #72	; 0x48
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3350      	adds	r3, #80	; 0x50
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d3af      	bcc.n	8002998 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e044      	b.n	8002ac8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d3b5      	bcc.n	8002a3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	687e      	ldr	r6, [r7, #4]
 8002ada:	466d      	mov	r5, sp
 8002adc:	f106 0410 	add.w	r4, r6, #16
 8002ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af0:	1d33      	adds	r3, r6, #4
 8002af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af4:	6838      	ldr	r0, [r7, #0]
 8002af6:	f001 fb53 	bl	80041a0 <USB_DevInit>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e00d      	b.n	8002b28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f001 fd10 	bl	8004546 <USB_DevDisconnect>

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e25b      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d075      	beq.n	8002c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4e:	4ba3      	ldr	r3, [pc, #652]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4ba0      	ldr	r3, [pc, #640]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b9d      	ldr	r3, [pc, #628]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b99      	ldr	r3, [pc, #612]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x108>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e236      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x74>
 8002b96:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a90      	ldr	r2, [pc, #576]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a8a      	ldr	r2, [pc, #552]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc02 	bl	80013f0 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fbfe 	bl	80013f0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1fb      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fbee 	bl	80013f0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fbea 	bl	80013f0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1e7      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe8>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b62      	ldr	r3, [pc, #392]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1bb      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4952      	ldr	r1, [pc, #328]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fba3 	bl	80013f0 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fb9f 	bl	80013f0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e19c      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4940      	ldr	r1, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x2b0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb82 	bl	80013f0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fb7e 	bl	80013f0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e17b      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_OscConfig+0x2b4>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fb62 	bl	80013f0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe fb5e 	bl	80013f0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e15b      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x200>
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_OscConfig+0x2b4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fb4b 	bl	80013f0 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fb47 	bl	80013f0 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e144      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a0 	beq.w	8002eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fb0d 	bl	80013f0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	e011      	b.n	8002dfe <HAL_RCC_OscConfig+0x2ce>
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
 8002de4:	42470e80 	.word	0x42470e80
 8002de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dec:	f7fe fb00 	bl	80013f0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0fd      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
 8002e12:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a7c      	ldr	r2, [pc, #496]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCC_OscConfig+0x32a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e28:	4b77      	ldr	r3, [pc, #476]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a76      	ldr	r2, [pc, #472]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b74      	ldr	r3, [pc, #464]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a73      	ldr	r2, [pc, #460]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x32a>
 8002e42:	4b71      	ldr	r3, [pc, #452]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a70      	ldr	r2, [pc, #448]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a6d      	ldr	r2, [pc, #436]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe fac5 	bl	80013f0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fac1 	bl	80013f0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0bc      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCC_OscConfig+0x33a>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe faaf 	bl	80013f0 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe faab 	bl	80013f0 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0a6      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	4b56      	ldr	r3, [pc, #344]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b52      	ldr	r3, [pc, #328]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a51      	ldr	r2, [pc, #324]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8092 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed4:	4b4c      	ldr	r3, [pc, #304]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d05c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d141      	bne.n	8002f6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b48      	ldr	r3, [pc, #288]	; (800300c <HAL_RCC_OscConfig+0x4dc>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe fa7f 	bl	80013f0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fa7b 	bl	80013f0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e078      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	019b      	lsls	r3, r3, #6
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	041b      	lsls	r3, r3, #16
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	061b      	lsls	r3, r3, #24
 8002f38:	4933      	ldr	r1, [pc, #204]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x4dc>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe fa54 	bl	80013f0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fa50 	bl	80013f0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04d      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	4b2a      	ldr	r3, [pc, #168]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x41c>
 8002f6a:	e045      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_RCC_OscConfig+0x4dc>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f72:	f7fe fa3d 	bl	80013f0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7fe fa39 	bl	80013f0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e036      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x44a>
 8002f98:	e02e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e029      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_RCC_OscConfig+0x4d8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40007000 	.word	0x40007000
 8003008:	40023800 	.word	0x40023800
 800300c:	42470060 	.word	0x42470060

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cc      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d90c      	bls.n	800304c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800306e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4934      	ldr	r1, [pc, #208]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7fe f976 	bl	80013f0 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe f972 	bl	80013f0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d20c      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4601      	mov	r1, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	fa21 f303 	lsr.w	r3, r1, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd fd3a 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023c00 	.word	0x40023c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	0801add8 	.word	0x0801add8
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d007      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x32>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d008      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x38>
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 80b4 	bne.w	8003370 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800320a:	60bb      	str	r3, [r7, #8]
       break;
 800320c:	e0b3      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320e:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003210:	60bb      	str	r3, [r7, #8]
      break;
 8003212:	e0b0      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003214:	4b5a      	ldr	r3, [pc, #360]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321e:	4b58      	ldr	r3, [pc, #352]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04a      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b55      	ldr	r3, [pc, #340]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	ea03 0501 	and.w	r5, r3, r1
 8003240:	ea04 0602 	and.w	r6, r4, r2
 8003244:	4629      	mov	r1, r5
 8003246:	4632      	mov	r2, r6
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f04f 0400 	mov.w	r4, #0
 8003250:	0154      	lsls	r4, r2, #5
 8003252:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003256:	014b      	lsls	r3, r1, #5
 8003258:	4619      	mov	r1, r3
 800325a:	4622      	mov	r2, r4
 800325c:	1b49      	subs	r1, r1, r5
 800325e:	eb62 0206 	sbc.w	r2, r2, r6
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f04f 0400 	mov.w	r4, #0
 800326a:	0194      	lsls	r4, r2, #6
 800326c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003270:	018b      	lsls	r3, r1, #6
 8003272:	1a5b      	subs	r3, r3, r1
 8003274:	eb64 0402 	sbc.w	r4, r4, r2
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	00e2      	lsls	r2, r4, #3
 8003282:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003286:	00d9      	lsls	r1, r3, #3
 8003288:	460b      	mov	r3, r1
 800328a:	4614      	mov	r4, r2
 800328c:	195b      	adds	r3, r3, r5
 800328e:	eb44 0406 	adc.w	r4, r4, r6
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	0262      	lsls	r2, r4, #9
 800329c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032a0:	0259      	lsls	r1, r3, #9
 80032a2:	460b      	mov	r3, r1
 80032a4:	4614      	mov	r4, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	4621      	mov	r1, r4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f04f 0400 	mov.w	r4, #0
 80032b0:	461a      	mov	r2, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	f7fd f804 	bl	80002c0 <__aeabi_uldivmod>
 80032b8:	4603      	mov	r3, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e049      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	ea03 0501 	and.w	r5, r3, r1
 80032d6:	ea04 0602 	and.w	r6, r4, r2
 80032da:	4629      	mov	r1, r5
 80032dc:	4632      	mov	r2, r6
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0154      	lsls	r4, r2, #5
 80032e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ec:	014b      	lsls	r3, r1, #5
 80032ee:	4619      	mov	r1, r3
 80032f0:	4622      	mov	r2, r4
 80032f2:	1b49      	subs	r1, r1, r5
 80032f4:	eb62 0206 	sbc.w	r2, r2, r6
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	0194      	lsls	r4, r2, #6
 8003302:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003306:	018b      	lsls	r3, r1, #6
 8003308:	1a5b      	subs	r3, r3, r1
 800330a:	eb64 0402 	sbc.w	r4, r4, r2
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	00e2      	lsls	r2, r4, #3
 8003318:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800331c:	00d9      	lsls	r1, r3, #3
 800331e:	460b      	mov	r3, r1
 8003320:	4614      	mov	r4, r2
 8003322:	195b      	adds	r3, r3, r5
 8003324:	eb44 0406 	adc.w	r4, r4, r6
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	02a2      	lsls	r2, r4, #10
 8003332:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003336:	0299      	lsls	r1, r3, #10
 8003338:	460b      	mov	r3, r1
 800333a:	4614      	mov	r4, r2
 800333c:	4618      	mov	r0, r3
 800333e:	4621      	mov	r1, r4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f04f 0400 	mov.w	r4, #0
 8003346:	461a      	mov	r2, r3
 8003348:	4623      	mov	r3, r4
 800334a:	f7fc ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800334e:	4603      	mov	r3, r0
 8003350:	460c      	mov	r4, r1
 8003352:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	60bb      	str	r3, [r7, #8]
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003372:	60bb      	str	r3, [r7, #8]
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	68bb      	ldr	r3, [r7, #8]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	00f42400 	.word	0x00f42400
 8003388:	007a1200 	.word	0x007a1200

0800338c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000000 	.word	0x20000000

080033a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a8:	f7ff fff0 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033ac:	4601      	mov	r1, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ba:	5cd3      	ldrb	r3, [r2, r3]
 80033bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	0801ade8 	.word	0x0801ade8

080033cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033d0:	f7ff ffdc 	bl	800338c <HAL_RCC_GetHCLKFreq>
 80033d4:	4601      	mov	r1, r0
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	0b5b      	lsrs	r3, r3, #13
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033e2:	5cd3      	ldrb	r3, [r2, r3]
 80033e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	0801ade8 	.word	0x0801ade8

080033f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	220f      	movs	r2, #15
 8003402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_GetClockConfig+0x5c>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0203 	and.w	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <HAL_RCC_GetClockConfig+0x5c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_RCC_GetClockConfig+0x5c>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_GetClockConfig+0x5c>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <HAL_RCC_GetClockConfig+0x60>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	601a      	str	r2, [r3, #0]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40023c00 	.word	0x40023c00

08003458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e01d      	b.n	80034a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f815 	bl	80034ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 f968 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d007      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d122      	bne.n	8003566 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d11b      	bne.n	8003566 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0202 	mvn.w	r2, #2
 8003536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8ee 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 8003552:	e005      	b.n	8003560 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8e0 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8f1 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d122      	bne.n	80035ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d11b      	bne.n	80035ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0204 	mvn.w	r2, #4
 800358a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8c4 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035a6:	e005      	b.n	80035b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8b6 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8c7 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d122      	bne.n	800360e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11b      	bne.n	800360e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0208 	mvn.w	r2, #8
 80035de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f89a 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80035fa:	e005      	b.n	8003608 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f88c 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f89d 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b10      	cmp	r3, #16
 800361a:	d122      	bne.n	8003662 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d11b      	bne.n	8003662 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0210 	mvn.w	r2, #16
 8003632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2208      	movs	r2, #8
 8003638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f870 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 800364e:	e005      	b.n	800365c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f862 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f873 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0201 	mvn.w	r2, #1
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd f9e9 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d10e      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f903 	bl	80038c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f838 	bl	8003756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0220 	mvn.w	r2, #32
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8cd 	bl	80038ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a40      	ldr	r2, [pc, #256]	; (8003880 <TIM_Base_SetConfig+0x114>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d00f      	beq.n	80037ac <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3d      	ldr	r2, [pc, #244]	; (8003884 <TIM_Base_SetConfig+0x118>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00b      	beq.n	80037ac <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <TIM_Base_SetConfig+0x11c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d007      	beq.n	80037ac <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <TIM_Base_SetConfig+0x120>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_Base_SetConfig+0x40>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a3a      	ldr	r2, [pc, #232]	; (8003890 <TIM_Base_SetConfig+0x124>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <TIM_Base_SetConfig+0x114>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02b      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d027      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <TIM_Base_SetConfig+0x118>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d023      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <TIM_Base_SetConfig+0x11c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01f      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <TIM_Base_SetConfig+0x120>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01b      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a29      	ldr	r2, [pc, #164]	; (8003890 <TIM_Base_SetConfig+0x124>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d017      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a28      	ldr	r2, [pc, #160]	; (8003894 <TIM_Base_SetConfig+0x128>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a27      	ldr	r2, [pc, #156]	; (8003898 <TIM_Base_SetConfig+0x12c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00f      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a26      	ldr	r2, [pc, #152]	; (800389c <TIM_Base_SetConfig+0x130>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a25      	ldr	r2, [pc, #148]	; (80038a0 <TIM_Base_SetConfig+0x134>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a24      	ldr	r2, [pc, #144]	; (80038a4 <TIM_Base_SetConfig+0x138>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d003      	beq.n	800381e <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <TIM_Base_SetConfig+0x13c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d108      	bne.n	8003830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <TIM_Base_SetConfig+0x114>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0xf8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <TIM_Base_SetConfig+0x124>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d103      	bne.n	800386c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	615a      	str	r2, [r3, #20]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40010400 	.word	0x40010400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800
 80038a0:	40001800 	.word	0x40001800
 80038a4:	40001c00 	.word	0x40001c00
 80038a8:	40002000 	.word	0x40002000

080038ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e03f      	b.n	8003966 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd f8f6 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f829 	bl	8003970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800394c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039b2:	f023 030c 	bic.w	r3, r3, #12
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	430b      	orrs	r3, r1
 80039be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039de:	f040 818b 	bne.w	8003cf8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4ac1      	ldr	r2, [pc, #772]	; (8003cec <UART_SetConfig+0x37c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d005      	beq.n	80039f8 <UART_SetConfig+0x88>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4abf      	ldr	r2, [pc, #764]	; (8003cf0 <UART_SetConfig+0x380>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f040 80bd 	bne.w	8003b72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7ff fce8 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 80039fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	461d      	mov	r5, r3
 8003a02:	f04f 0600 	mov.w	r6, #0
 8003a06:	46a8      	mov	r8, r5
 8003a08:	46b1      	mov	r9, r6
 8003a0a:	eb18 0308 	adds.w	r3, r8, r8
 8003a0e:	eb49 0409 	adc.w	r4, r9, r9
 8003a12:	4698      	mov	r8, r3
 8003a14:	46a1      	mov	r9, r4
 8003a16:	eb18 0805 	adds.w	r8, r8, r5
 8003a1a:	eb49 0906 	adc.w	r9, r9, r6
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a32:	4688      	mov	r8, r1
 8003a34:	4691      	mov	r9, r2
 8003a36:	eb18 0005 	adds.w	r0, r8, r5
 8003a3a:	eb49 0106 	adc.w	r1, r9, r6
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	461d      	mov	r5, r3
 8003a44:	f04f 0600 	mov.w	r6, #0
 8003a48:	196b      	adds	r3, r5, r5
 8003a4a:	eb46 0406 	adc.w	r4, r6, r6
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4623      	mov	r3, r4
 8003a52:	f7fc fc35 	bl	80002c0 <__aeabi_uldivmod>
 8003a56:	4603      	mov	r3, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <UART_SetConfig+0x384>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	f04f 0600 	mov.w	r6, #0
 8003a70:	46a9      	mov	r9, r5
 8003a72:	46b2      	mov	sl, r6
 8003a74:	eb19 0309 	adds.w	r3, r9, r9
 8003a78:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	eb19 0905 	adds.w	r9, r9, r5
 8003a84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9c:	4689      	mov	r9, r1
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	eb19 0005 	adds.w	r0, r9, r5
 8003aa4:	eb4a 0106 	adc.w	r1, sl, r6
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	461d      	mov	r5, r3
 8003aae:	f04f 0600 	mov.w	r6, #0
 8003ab2:	196b      	adds	r3, r5, r5
 8003ab4:	eb46 0406 	adc.w	r4, r6, r6
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fc00 	bl	80002c0 <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <UART_SetConfig+0x384>)
 8003ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	2164      	movs	r1, #100	; 0x64
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3332      	adds	r3, #50	; 0x32
 8003ada:	4a86      	ldr	r2, [pc, #536]	; (8003cf4 <UART_SetConfig+0x384>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ae8:	4498      	add	r8, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	461d      	mov	r5, r3
 8003aee:	f04f 0600 	mov.w	r6, #0
 8003af2:	46a9      	mov	r9, r5
 8003af4:	46b2      	mov	sl, r6
 8003af6:	eb19 0309 	adds.w	r3, r9, r9
 8003afa:	eb4a 040a 	adc.w	r4, sl, sl
 8003afe:	4699      	mov	r9, r3
 8003b00:	46a2      	mov	sl, r4
 8003b02:	eb19 0905 	adds.w	r9, r9, r5
 8003b06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1e:	4689      	mov	r9, r1
 8003b20:	4692      	mov	sl, r2
 8003b22:	eb19 0005 	adds.w	r0, r9, r5
 8003b26:	eb4a 0106 	adc.w	r1, sl, r6
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	461d      	mov	r5, r3
 8003b30:	f04f 0600 	mov.w	r6, #0
 8003b34:	196b      	adds	r3, r5, r5
 8003b36:	eb46 0406 	adc.w	r4, r6, r6
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	f7fc fbbf 	bl	80002c0 <__aeabi_uldivmod>
 8003b42:	4603      	mov	r3, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b6a      	ldr	r3, [pc, #424]	; (8003cf4 <UART_SetConfig+0x384>)
 8003b4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2164      	movs	r1, #100	; 0x64
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	3332      	adds	r3, #50	; 0x32
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <UART_SetConfig+0x384>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 0207 	and.w	r2, r3, #7
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4442      	add	r2, r8
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	e26f      	b.n	8004052 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b72:	f7ff fc17 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8003b76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	f04f 0600 	mov.w	r6, #0
 8003b80:	46a8      	mov	r8, r5
 8003b82:	46b1      	mov	r9, r6
 8003b84:	eb18 0308 	adds.w	r3, r8, r8
 8003b88:	eb49 0409 	adc.w	r4, r9, r9
 8003b8c:	4698      	mov	r8, r3
 8003b8e:	46a1      	mov	r9, r4
 8003b90:	eb18 0805 	adds.w	r8, r8, r5
 8003b94:	eb49 0906 	adc.w	r9, r9, r6
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ba4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bac:	4688      	mov	r8, r1
 8003bae:	4691      	mov	r9, r2
 8003bb0:	eb18 0005 	adds.w	r0, r8, r5
 8003bb4:	eb49 0106 	adc.w	r1, r9, r6
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	461d      	mov	r5, r3
 8003bbe:	f04f 0600 	mov.w	r6, #0
 8003bc2:	196b      	adds	r3, r5, r5
 8003bc4:	eb46 0406 	adc.w	r4, r6, r6
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	f7fc fb78 	bl	80002c0 <__aeabi_uldivmod>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <UART_SetConfig+0x384>)
 8003bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	461d      	mov	r5, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	46a9      	mov	r9, r5
 8003bec:	46b2      	mov	sl, r6
 8003bee:	eb19 0309 	adds.w	r3, r9, r9
 8003bf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	46a2      	mov	sl, r4
 8003bfa:	eb19 0905 	adds.w	r9, r9, r5
 8003bfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c16:	4689      	mov	r9, r1
 8003c18:	4692      	mov	sl, r2
 8003c1a:	eb19 0005 	adds.w	r0, r9, r5
 8003c1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	461d      	mov	r5, r3
 8003c28:	f04f 0600 	mov.w	r6, #0
 8003c2c:	196b      	adds	r3, r5, r5
 8003c2e:	eb46 0406 	adc.w	r4, r6, r6
 8003c32:	461a      	mov	r2, r3
 8003c34:	4623      	mov	r3, r4
 8003c36:	f7fc fb43 	bl	80002c0 <__aeabi_uldivmod>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <UART_SetConfig+0x384>)
 8003c42:	fba3 1302 	umull	r1, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2164      	movs	r1, #100	; 0x64
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a27      	ldr	r2, [pc, #156]	; (8003cf4 <UART_SetConfig+0x384>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c62:	4498      	add	r8, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0600 	mov.w	r6, #0
 8003c6c:	46a9      	mov	r9, r5
 8003c6e:	46b2      	mov	sl, r6
 8003c70:	eb19 0309 	adds.w	r3, r9, r9
 8003c74:	eb4a 040a 	adc.w	r4, sl, sl
 8003c78:	4699      	mov	r9, r3
 8003c7a:	46a2      	mov	sl, r4
 8003c7c:	eb19 0905 	adds.w	r9, r9, r5
 8003c80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c98:	4689      	mov	r9, r1
 8003c9a:	4692      	mov	sl, r2
 8003c9c:	eb19 0005 	adds.w	r0, r9, r5
 8003ca0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	196b      	adds	r3, r5, r5
 8003cb0:	eb46 0406 	adc.w	r4, r6, r6
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	f7fc fb02 	bl	80002c0 <__aeabi_uldivmod>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <UART_SetConfig+0x384>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <UART_SetConfig+0x384>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4442      	add	r2, r8
 8003ce8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cea:	e1b2      	b.n	8004052 <UART_SetConfig+0x6e2>
 8003cec:	40011000 	.word	0x40011000
 8003cf0:	40011400 	.word	0x40011400
 8003cf4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4ad7      	ldr	r2, [pc, #860]	; (800405c <UART_SetConfig+0x6ec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d005      	beq.n	8003d0e <UART_SetConfig+0x39e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4ad6      	ldr	r2, [pc, #856]	; (8004060 <UART_SetConfig+0x6f0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	f040 80d1 	bne.w	8003eb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d0e:	f7ff fb5d 	bl	80033cc <HAL_RCC_GetPCLK2Freq>
 8003d12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	469a      	mov	sl, r3
 8003d18:	f04f 0b00 	mov.w	fp, #0
 8003d1c:	46d0      	mov	r8, sl
 8003d1e:	46d9      	mov	r9, fp
 8003d20:	eb18 0308 	adds.w	r3, r8, r8
 8003d24:	eb49 0409 	adc.w	r4, r9, r9
 8003d28:	4698      	mov	r8, r3
 8003d2a:	46a1      	mov	r9, r4
 8003d2c:	eb18 080a 	adds.w	r8, r8, sl
 8003d30:	eb49 090b 	adc.w	r9, r9, fp
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d48:	4688      	mov	r8, r1
 8003d4a:	4691      	mov	r9, r2
 8003d4c:	eb1a 0508 	adds.w	r5, sl, r8
 8003d50:	eb4b 0609 	adc.w	r6, fp, r9
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	0094      	lsls	r4, r2, #2
 8003d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	4631      	mov	r1, r6
 8003d76:	f7fc faa3 	bl	80002c0 <__aeabi_uldivmod>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4bb8      	ldr	r3, [pc, #736]	; (8004064 <UART_SetConfig+0x6f4>)
 8003d82:	fba3 2302 	umull	r2, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	469b      	mov	fp, r3
 8003d90:	f04f 0c00 	mov.w	ip, #0
 8003d94:	46d9      	mov	r9, fp
 8003d96:	46e2      	mov	sl, ip
 8003d98:	eb19 0309 	adds.w	r3, r9, r9
 8003d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003da0:	4699      	mov	r9, r3
 8003da2:	46a2      	mov	sl, r4
 8003da4:	eb19 090b 	adds.w	r9, r9, fp
 8003da8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	4692      	mov	sl, r2
 8003dc4:	eb1b 0509 	adds.w	r5, fp, r9
 8003dc8:	eb4c 060a 	adc.w	r6, ip, sl
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	f04f 0400 	mov.w	r4, #0
 8003dde:	0094      	lsls	r4, r2, #2
 8003de0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003de4:	008b      	lsls	r3, r1, #2
 8003de6:	461a      	mov	r2, r3
 8003de8:	4623      	mov	r3, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	4631      	mov	r1, r6
 8003dee:	f7fc fa67 	bl	80002c0 <__aeabi_uldivmod>
 8003df2:	4603      	mov	r3, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b9a      	ldr	r3, [pc, #616]	; (8004064 <UART_SetConfig+0x6f4>)
 8003dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2164      	movs	r1, #100	; 0x64
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a95      	ldr	r2, [pc, #596]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e18:	4498      	add	r8, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	469b      	mov	fp, r3
 8003e1e:	f04f 0c00 	mov.w	ip, #0
 8003e22:	46d9      	mov	r9, fp
 8003e24:	46e2      	mov	sl, ip
 8003e26:	eb19 0309 	adds.w	r3, r9, r9
 8003e2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e2e:	4699      	mov	r9, r3
 8003e30:	46a2      	mov	sl, r4
 8003e32:	eb19 090b 	adds.w	r9, r9, fp
 8003e36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e4e:	4689      	mov	r9, r1
 8003e50:	4692      	mov	sl, r2
 8003e52:	eb1b 0509 	adds.w	r5, fp, r9
 8003e56:	eb4c 060a 	adc.w	r6, ip, sl
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	0094      	lsls	r4, r2, #2
 8003e6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e72:	008b      	lsls	r3, r1, #2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	4628      	mov	r0, r5
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	f7fc fa20 	bl	80002c0 <__aeabi_uldivmod>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b77      	ldr	r3, [pc, #476]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a72      	ldr	r2, [pc, #456]	; (8004064 <UART_SetConfig+0x6f4>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 020f 	and.w	r2, r3, #15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4442      	add	r2, r8
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	e0d0      	b.n	8004052 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7ff fa78 	bl	80033a4 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	469a      	mov	sl, r3
 8003eba:	f04f 0b00 	mov.w	fp, #0
 8003ebe:	46d0      	mov	r8, sl
 8003ec0:	46d9      	mov	r9, fp
 8003ec2:	eb18 0308 	adds.w	r3, r8, r8
 8003ec6:	eb49 0409 	adc.w	r4, r9, r9
 8003eca:	4698      	mov	r8, r3
 8003ecc:	46a1      	mov	r9, r4
 8003ece:	eb18 080a 	adds.w	r8, r8, sl
 8003ed2:	eb49 090b 	adc.w	r9, r9, fp
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ee6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eea:	4688      	mov	r8, r1
 8003eec:	4691      	mov	r9, r2
 8003eee:	eb1a 0508 	adds.w	r5, sl, r8
 8003ef2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	0094      	lsls	r4, r2, #2
 8003f0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	4631      	mov	r1, r6
 8003f18:	f7fc f9d2 	bl	80002c0 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b50      	ldr	r3, [pc, #320]	; (8004064 <UART_SetConfig+0x6f4>)
 8003f24:	fba3 2302 	umull	r2, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	469b      	mov	fp, r3
 8003f32:	f04f 0c00 	mov.w	ip, #0
 8003f36:	46d9      	mov	r9, fp
 8003f38:	46e2      	mov	sl, ip
 8003f3a:	eb19 0309 	adds.w	r3, r9, r9
 8003f3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f42:	4699      	mov	r9, r3
 8003f44:	46a2      	mov	sl, r4
 8003f46:	eb19 090b 	adds.w	r9, r9, fp
 8003f4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f62:	4689      	mov	r9, r1
 8003f64:	4692      	mov	sl, r2
 8003f66:	eb1b 0509 	adds.w	r5, fp, r9
 8003f6a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	f04f 0400 	mov.w	r4, #0
 8003f80:	0094      	lsls	r4, r2, #2
 8003f82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f86:	008b      	lsls	r3, r1, #2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	4631      	mov	r1, r6
 8003f90:	f7fc f996 	bl	80002c0 <__aeabi_uldivmod>
 8003f94:	4603      	mov	r3, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b32      	ldr	r3, [pc, #200]	; (8004064 <UART_SetConfig+0x6f4>)
 8003f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	2164      	movs	r1, #100	; 0x64
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	3332      	adds	r3, #50	; 0x32
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <UART_SetConfig+0x6f4>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fba:	4498      	add	r8, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	469b      	mov	fp, r3
 8003fc0:	f04f 0c00 	mov.w	ip, #0
 8003fc4:	46d9      	mov	r9, fp
 8003fc6:	46e2      	mov	sl, ip
 8003fc8:	eb19 0309 	adds.w	r3, r9, r9
 8003fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	eb19 090b 	adds.w	r9, r9, fp
 8003fd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	4692      	mov	sl, r2
 8003ff4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ff8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0094      	lsls	r4, r2, #2
 8004010:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004014:	008b      	lsls	r3, r1, #2
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	4628      	mov	r0, r5
 800401c:	4631      	mov	r1, r6
 800401e:	f7fc f94f 	bl	80002c0 <__aeabi_uldivmod>
 8004022:	4603      	mov	r3, r0
 8004024:	460c      	mov	r4, r1
 8004026:	461a      	mov	r2, r3
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <UART_SetConfig+0x6f4>)
 800402a:	fba3 1302 	umull	r1, r3, r3, r2
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2164      	movs	r1, #100	; 0x64
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	; 0x32
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <UART_SetConfig+0x6f4>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4442      	add	r2, r8
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	e7ff      	b.n	8004052 <UART_SetConfig+0x6e2>
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405c:	40011000 	.word	0x40011000
 8004060:	40011400 	.word	0x40011400
 8004064:	51eb851f 	.word	0x51eb851f

08004068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 001c 	add.w	r0, r7, #28
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2b01      	cmp	r3, #1
 800407e:	d122      	bne.n	80040c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa5c 	bl	8004578 <USB_CoreReset>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e01a      	b.n	80040fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa50 	bl	8004578 <USB_CoreReset>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
 80040ee:	e005      	b.n	80040fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d10b      	bne.n	800411a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f043 0206 	orr.w	r2, r3, #6
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004126:	b004      	add	sp, #16
 8004128:	4770      	bx	lr

0800412a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d106      	bne.n	8004178 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	e00b      	b.n	8004190 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	e001      	b.n	8004190 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e003      	b.n	8004198 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004190:	2032      	movs	r0, #50	; 0x32
 8004192:	f7fd f939 	bl	8001408 <HAL_Delay>

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041a0:	b084      	sub	sp, #16
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b086      	sub	sp, #24
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e009      	b.n	80041d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3340      	adds	r3, #64	; 0x40
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	2200      	movs	r2, #0
 80041cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b0e      	cmp	r3, #14
 80041d8:	d9f2      	bls.n	80041c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d112      	bne.n	8004206 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
 8004204:	e00b      	b.n	800421e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004224:	461a      	mov	r2, r3
 8004226:	2300      	movs	r3, #0
 8004228:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	4619      	mov	r1, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004238:	461a      	mov	r2, r3
 800423a:	680b      	ldr	r3, [r1, #0]
 800423c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10c      	bne.n	800425e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800424a:	2100      	movs	r1, #0
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f961 	bl	8004514 <USB_SetDevSpeed>
 8004252:	e008      	b.n	8004266 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004254:	2101      	movs	r1, #1
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f95c 	bl	8004514 <USB_SetDevSpeed>
 800425c:	e003      	b.n	8004266 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800425e:	2103      	movs	r1, #3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f957 	bl	8004514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004266:	2110      	movs	r1, #16
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f90b 	bl	8004484 <USB_FlushTxFifo>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f929 	bl	80044d0 <USB_FlushRxFifo>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e043      	b.n	800433a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042c8:	d118      	bne.n	80042fc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042dc:	461a      	mov	r2, r3
 80042de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e013      	b.n	800430e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e008      	b.n	800430e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	3301      	adds	r3, #1
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3b7      	bcc.n	80042b2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e043      	b.n	80043d0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	d118      	bne.n	8004392 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e013      	b.n	80043a4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e008      	b.n	80043a4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	3301      	adds	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d3b7      	bcc.n	8004348 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ea:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80043ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d111      	bne.n	8004416 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b20      	ldr	r3, [pc, #128]	; (800447c <USB_DevInit+0x2dc>)
 80043fc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004410:	f043 0303 	orr.w	r3, r3, #3
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004422:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f043 0210 	orr.w	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <USB_DevInit+0x2e0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f043 0208 	orr.w	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004476:	b004      	add	sp, #16
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	00800100 	.word	0x00800100
 8004480:	803c3800 	.word	0x803c3800

08004484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <USB_FlushTxFifo+0x48>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e006      	b.n	80044be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d0f0      	beq.n	800449e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	00030d40 	.word	0x00030d40

080044d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2210      	movs	r2, #16
 80044e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <USB_FlushRxFifo+0x40>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d0f0      	beq.n	80044e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	00030d40 	.word	0x00030d40

08004514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004566:	2003      	movs	r0, #3
 8004568:	f7fc ff4e 	bl	8001408 <HAL_Delay>

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <USB_CoreReset+0x64>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e01b      	b.n	80045ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	daf2      	bge.n	8004584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <USB_CoreReset+0x64>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e006      	b.n	80045ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d0f0      	beq.n	80045ae <USB_CoreReset+0x36>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	00030d40 	.word	0x00030d40

080045e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80045e6:	2100      	movs	r1, #0
 80045e8:	2000      	movs	r0, #0
 80045ea:	f005 fcb9 	bl	8009f60 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <MX_LWIP_Init+0x6c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80045f4:	4b16      	ldr	r3, [pc, #88]	; (8004650 <MX_LWIP_Init+0x70>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <MX_LWIP_Init+0x74>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <MX_LWIP_Init+0x78>)
 8004602:	9302      	str	r3, [sp, #8]
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <MX_LWIP_Init+0x7c>)
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <MX_LWIP_Init+0x74>)
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <MX_LWIP_Init+0x70>)
 8004610:	490e      	ldr	r1, [pc, #56]	; (800464c <MX_LWIP_Init+0x6c>)
 8004612:	4813      	ldr	r0, [pc, #76]	; (8004660 <MX_LWIP_Init+0x80>)
 8004614:	f007 f878 	bl	800b708 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004618:	4811      	ldr	r0, [pc, #68]	; (8004660 <MX_LWIP_Init+0x80>)
 800461a:	f007 f95d 	bl	800b8d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <MX_LWIP_Init+0x80>)
 8004620:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004630:	480b      	ldr	r0, [pc, #44]	; (8004660 <MX_LWIP_Init+0x80>)
 8004632:	f007 f961 	bl	800b8f8 <netif_set_up>
 8004636:	e002      	b.n	800463e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004638:	4809      	ldr	r0, [pc, #36]	; (8004660 <MX_LWIP_Init+0x80>)
 800463a:	f007 f9a1 	bl	800b980 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800463e:	4808      	ldr	r0, [pc, #32]	; (8004660 <MX_LWIP_Init+0x80>)
 8004640:	f00e faa8 	bl	8012b94 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2000925c 	.word	0x2000925c
 8004650:	20009260 	.word	0x20009260
 8004654:	20009264 	.word	0x20009264
 8004658:	08009e5d 	.word	0x08009e5d
 800465c:	08004c91 	.word	0x08004c91
 8004660:	20009228 	.word	0x20009228

08004664 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08e      	sub	sp, #56	; 0x38
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a55      	ldr	r2, [pc, #340]	; (80047d8 <HAL_ETH_MspInit+0x174>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f040 80a4 	bne.w	80047d0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	623b      	str	r3, [r7, #32]
 800468c:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a52      	ldr	r2, [pc, #328]	; (80047dc <HAL_ETH_MspInit+0x178>)
 8004692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004696:	6313      	str	r3, [r2, #48]	; 0x30
 8004698:	4b50      	ldr	r3, [pc, #320]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b2:	6313      	str	r3, [r2, #48]	; 0x30
 80046b4:	4b49      	ldr	r3, [pc, #292]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	4a44      	ldr	r2, [pc, #272]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046ce:	6313      	str	r3, [r2, #48]	; 0x30
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	4a3d      	ldr	r2, [pc, #244]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	6313      	str	r3, [r2, #48]	; 0x30
 80046ec:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_ETH_MspInit+0x178>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	4a36      	ldr	r2, [pc, #216]	; (80047dc <HAL_ETH_MspInit+0x178>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6313      	str	r3, [r2, #48]	; 0x30
 8004708:	4b34      	ldr	r3, [pc, #208]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	6313      	str	r3, [r2, #48]	; 0x30
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <HAL_ETH_MspInit+0x178>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_ETH_MspInit+0x178>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a28      	ldr	r2, [pc, #160]	; (80047dc <HAL_ETH_MspInit+0x178>)
 800473a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_ETH_MspInit+0x178>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800474c:	2332      	movs	r3, #50	; 0x32
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004750:	2302      	movs	r3, #2
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004758:	2303      	movs	r3, #3
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800475c:	230b      	movs	r3, #11
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004764:	4619      	mov	r1, r3
 8004766:	481e      	ldr	r0, [pc, #120]	; (80047e0 <HAL_ETH_MspInit+0x17c>)
 8004768:	f7fd feea 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800476c:	2386      	movs	r3, #134	; 0x86
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004770:	2302      	movs	r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800477c:	230b      	movs	r3, #11
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	4619      	mov	r1, r3
 8004786:	4817      	ldr	r0, [pc, #92]	; (80047e4 <HAL_ETH_MspInit+0x180>)
 8004788:	f7fd feda 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800478c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800479a:	2303      	movs	r3, #3
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800479e:	230b      	movs	r3, #11
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80047a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a6:	4619      	mov	r1, r3
 80047a8:	480f      	ldr	r0, [pc, #60]	; (80047e8 <HAL_ETH_MspInit+0x184>)
 80047aa:	f7fd fec9 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047c0:	230b      	movs	r3, #11
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c8:	4619      	mov	r1, r3
 80047ca:	4808      	ldr	r0, [pc, #32]	; (80047ec <HAL_ETH_MspInit+0x188>)
 80047cc:	f7fd feb8 	bl	8002540 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80047d0:	bf00      	nop
 80047d2:	3738      	adds	r7, #56	; 0x38
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40028000 	.word	0x40028000
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40020800 	.word	0x40020800
 80047e4:	40020000 	.word	0x40020000
 80047e8:	40020400 	.word	0x40020400
 80047ec:	40021800 	.word	0x40021800

080047f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80047f0:	b5b0      	push	{r4, r5, r7, lr}
 80047f2:	b090      	sub	sp, #64	; 0x40
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80047fc:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <low_level_init+0x180>)
 80047fe:	4a5d      	ldr	r2, [pc, #372]	; (8004974 <low_level_init+0x184>)
 8004800:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004802:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <low_level_init+0x180>)
 8004804:	2201      	movs	r2, #1
 8004806:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <low_level_init+0x180>)
 800480a:	2200      	movs	r2, #0
 800480c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800480e:	2300      	movs	r3, #0
 8004810:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800481a:	23e1      	movs	r3, #225	; 0xe1
 800481c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004820:	23fe      	movs	r3, #254	; 0xfe
 8004822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8004826:	23ec      	movs	r3, #236	; 0xec
 8004828:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 800482c:	2371      	movs	r3, #113	; 0x71
 800482e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004832:	4a4f      	ldr	r2, [pc, #316]	; (8004970 <low_level_init+0x180>)
 8004834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004838:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800483a:	4b4d      	ldr	r3, [pc, #308]	; (8004970 <low_level_init+0x180>)
 800483c:	2201      	movs	r2, #1
 800483e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <low_level_init+0x180>)
 8004842:	2200      	movs	r2, #0
 8004844:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004846:	4b4a      	ldr	r3, [pc, #296]	; (8004970 <low_level_init+0x180>)
 8004848:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800484c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800484e:	4848      	ldr	r0, [pc, #288]	; (8004970 <low_level_init+0x180>)
 8004850:	f7fc fede 	bl	8001610 <HAL_ETH_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800485a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	b2da      	uxtb	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004874:	2304      	movs	r3, #4
 8004876:	4a40      	ldr	r2, [pc, #256]	; (8004978 <low_level_init+0x188>)
 8004878:	4940      	ldr	r1, [pc, #256]	; (800497c <low_level_init+0x18c>)
 800487a:	483d      	ldr	r0, [pc, #244]	; (8004970 <low_level_init+0x180>)
 800487c:	f7fd f866 	bl	800194c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004880:	2304      	movs	r3, #4
 8004882:	4a3f      	ldr	r2, [pc, #252]	; (8004980 <low_level_init+0x190>)
 8004884:	493f      	ldr	r1, [pc, #252]	; (8004984 <low_level_init+0x194>)
 8004886:	483a      	ldr	r0, [pc, #232]	; (8004970 <low_level_init+0x180>)
 8004888:	f7fd f8c9 	bl	8001a1e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2206      	movs	r2, #6
 8004890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <low_level_init+0x180>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80048a0:	4b33      	ldr	r3, [pc, #204]	; (8004970 <low_level_init+0x180>)
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	785a      	ldrb	r2, [r3, #1]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80048ac:	4b30      	ldr	r3, [pc, #192]	; (8004970 <low_level_init+0x180>)
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	789a      	ldrb	r2, [r3, #2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <low_level_init+0x180>)
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	78da      	ldrb	r2, [r3, #3]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <low_level_init+0x180>)
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	791a      	ldrb	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <low_level_init+0x180>)
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	795a      	ldrb	r2, [r3, #5]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80048e2:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80048ea:	f043 030a 	orr.w	r3, r3, #10
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80048f6:	2300      	movs	r3, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	2300      	movs	r3, #0
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80048fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004902:	2101      	movs	r1, #1
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fb35 	bl	8004f74 <osSemaphoreCreate>
 800490a:	4602      	mov	r2, r0
 800490c:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <low_level_init+0x198>)
 800490e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <low_level_init+0x19c>)
 8004912:	f107 040c 	add.w	r4, r7, #12
 8004916:	461d      	mov	r5, r3
 8004918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800491a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800491c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fa26 	bl	8004d7c <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004930:	480f      	ldr	r0, [pc, #60]	; (8004970 <low_level_init+0x180>)
 8004932:	f7fd fb21 	bl	8001f78 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004936:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800493a:	461a      	mov	r2, r3
 800493c:	211d      	movs	r1, #29
 800493e:	480c      	ldr	r0, [pc, #48]	; (8004970 <low_level_init+0x180>)
 8004940:	f7fd fa4c 	bl	8001ddc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	f043 030b 	orr.w	r3, r3, #11
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	461a      	mov	r2, r3
 8004950:	211d      	movs	r1, #29
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <low_level_init+0x180>)
 8004954:	f7fd faaa 	bl	8001eac <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800495c:	461a      	mov	r2, r3
 800495e:	211d      	movs	r1, #29
 8004960:	4803      	ldr	r0, [pc, #12]	; (8004970 <low_level_init+0x180>)
 8004962:	f7fd fa3b 	bl	8001ddc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004966:	bf00      	nop
 8004968:	3740      	adds	r7, #64	; 0x40
 800496a:	46bd      	mov	sp, r7
 800496c:	bdb0      	pop	{r4, r5, r7, pc}
 800496e:	bf00      	nop
 8004970:	2000ab38 	.word	0x2000ab38
 8004974:	40028000 	.word	0x40028000
 8004978:	2000ab80 	.word	0x2000ab80
 800497c:	20009268 	.word	0x20009268
 8004980:	200092e8 	.word	0x200092e8
 8004984:	2000aab8 	.word	0x2000aab8
 8004988:	2000065c 	.word	0x2000065c
 800498c:	08017f7c 	.word	0x08017f7c

08004990 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	; 0x28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800499a:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <low_level_output+0x138>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80049b2:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <low_level_output+0x138>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	e05a      	b.n	8004a78 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da03      	bge.n	80049d2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80049ca:	23f8      	movs	r3, #248	; 0xf8
 80049cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80049d0:	e05c      	b.n	8004a8c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	895b      	ldrh	r3, [r3, #10]
 80049d6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049dc:	e02f      	b.n	8004a3e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	18d0      	adds	r0, r2, r3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	18d1      	adds	r1, r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80049f2:	3304      	adds	r3, #4
 80049f4:	461a      	mov	r2, r3
 80049f6:	f012 f8b4 	bl	8016b62 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	da03      	bge.n	8004a10 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a08:	23f8      	movs	r3, #248	; 0xf8
 8004a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a0e:	e03d      	b.n	8004a8c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a20:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a2c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a38:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d8c8      	bhi.n	80049de <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	18d0      	adds	r0, r2, r3
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f012 f880 	bl	8016b62 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1a1      	bne.n	80049c2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	4811      	ldr	r0, [pc, #68]	; (8004ac8 <low_level_output+0x138>)
 8004a82:	f7fd f839 	bl	8001af8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <low_level_output+0x138>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a94:	3314      	adds	r3, #20
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00d      	beq.n	8004abc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <low_level_output+0x138>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	2220      	movs	r2, #32
 8004aac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <low_level_output+0x138>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3728      	adds	r7, #40	; 0x28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	2000ab38 	.word	0x2000ab38

08004acc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	; 0x30
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004af0:	484e      	ldr	r0, [pc, #312]	; (8004c2c <low_level_input+0x160>)
 8004af2:	f7fd f8eb 	bl	8001ccc <HAL_ETH_GetReceivedFrame_IT>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <low_level_input+0x34>
  
    return NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e091      	b.n	8004c24 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004b00:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <low_level_input+0x160>)
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b06:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <low_level_input+0x160>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	2203      	movs	r2, #3
 8004b16:	4619      	mov	r1, r3
 8004b18:	2004      	movs	r0, #4
 8004b1a:	f006 ffb3 	bl	800ba84 <pbuf_alloc>
 8004b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04b      	beq.n	8004bbe <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b26:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <low_level_input+0x160>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b34:	e040      	b.n	8004bb8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	895b      	ldrh	r3, [r3, #10]
 8004b3a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b40:	e021      	b.n	8004b86 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	18d0      	adds	r0, r2, r3
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	18d1      	adds	r1, r2, r3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004b56:	3304      	adds	r3, #4
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f012 f802 	bl	8016b62 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004b74:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004b80:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d8d6      	bhi.n	8004b42 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	18d0      	adds	r0, r2, r3
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f011 ffdc 	bl	8016b62 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4413      	add	r3, r2
 8004bb0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1bb      	bne.n	8004b36 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <low_level_input+0x160>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e00b      	b.n	8004be2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3301      	adds	r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <low_level_input+0x160>)
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3ee      	bcc.n	8004bca <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <low_level_input+0x160>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <low_level_input+0x160>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfa:	3314      	adds	r3, #20
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <low_level_input+0x160>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0e:	3314      	adds	r3, #20
 8004c10:	2280      	movs	r2, #128	; 0x80
 8004c12:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <low_level_input+0x160>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3730      	adds	r7, #48	; 0x30
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	2000ab38 	.word	0x2000ab38

08004c30 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <ethernetif_input+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f9c9 	bl	8004fdc <osSemaphoreWait>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f5      	bne.n	8004c3c <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004c50:	480e      	ldr	r0, [pc, #56]	; (8004c8c <ethernetif_input+0x5c>)
 8004c52:	f011 fef3 	bl	8016a3c <sys_mutex_lock>
        p = low_level_input( netif );
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff38 	bl	8004acc <low_level_input>
 8004c5c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	68f9      	ldr	r1, [r7, #12]
 8004c6a:	68b8      	ldr	r0, [r7, #8]
 8004c6c:	4798      	blx	r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f007 fa77 	bl	800c168 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004c7a:	4804      	ldr	r0, [pc, #16]	; (8004c8c <ethernetif_input+0x5c>)
 8004c7c:	f011 feed 	bl	8016a5a <sys_mutex_unlock>
      } while(p!=NULL);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e4      	bne.n	8004c50 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004c86:	e7d9      	b.n	8004c3c <ethernetif_input+0xc>
 8004c88:	2000065c 	.word	0x2000065c
 8004c8c:	2000c394 	.word	0x2000c394

08004c90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <ethernetif_init+0x1c>
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <ethernetif_init+0x48>)
 8004ca0:	f240 222b 	movw	r2, #555	; 0x22b
 8004ca4:	490d      	ldr	r1, [pc, #52]	; (8004cdc <ethernetif_init+0x4c>)
 8004ca6:	480e      	ldr	r0, [pc, #56]	; (8004ce0 <ethernetif_init+0x50>)
 8004ca8:	f011 ff6e 	bl	8016b88 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2273      	movs	r2, #115	; 0x73
 8004cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2274      	movs	r2, #116	; 0x74
 8004cb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <ethernetif_init+0x54>)
 8004cc0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <ethernetif_init+0x58>)
 8004cc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff fd91 	bl	80047f0 <low_level_init>

  return ERR_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	08017f98 	.word	0x08017f98
 8004cdc:	08017fb4 	.word	0x08017fb4
 8004ce0:	08017fc4 	.word	0x08017fc4
 8004ce4:	08014afd 	.word	0x08014afd
 8004ce8:	08004991 	.word	0x08004991

08004cec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004cf0:	f7fc fb7e 	bl	80013f0 <HAL_GetTick>
 8004cf4:	4603      	mov	r3, r0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d0c:	2b84      	cmp	r3, #132	; 0x84
 8004d0e:	d005      	beq.n	8004d1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	3303      	adds	r3, #3
 8004d1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d30:	f3ef 8305 	mrs	r3, IPSR
 8004d34:	607b      	str	r3, [r7, #4]
  return(result);
 8004d36:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d52:	f001 fcf9 	bl	8006748 <vTaskStartScheduler>
  
  return osOK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004d60:	f7ff ffe3 	bl	8004d2a <inHandlerMode>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004d6a:	f001 fe05 	bl	8006978 <xTaskGetTickCountFromISR>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	e002      	b.n	8004d78 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004d72:	f001 fdf1 	bl	8006958 <xTaskGetTickCount>
 8004d76:	4603      	mov	r3, r0
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af04      	add	r7, sp, #16
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <osThreadCreate+0x54>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685c      	ldr	r4, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681d      	ldr	r5, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691e      	ldr	r6, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ffa6 	bl	8004cfa <makeFreeRtosPriority>
 8004dae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004db8:	9202      	str	r2, [sp, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9100      	str	r1, [sp, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f001 fb05 	bl	80063d4 <xTaskCreateStatic>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e01c      	b.n	8004e0a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685c      	ldr	r4, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ddc:	b29e      	uxth	r6, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff88 	bl	8004cfa <makeFreeRtosPriority>
 8004dea:	4602      	mov	r2, r0
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	9200      	str	r2, [sp, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4632      	mov	r2, r6
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f001 fb43 	bl	8006486 <xTaskCreate>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <osDelay+0x16>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	e000      	b.n	8004e2c <osDelay+0x18>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fc57 	bl	80066e0 <vTaskDelay>
  
  return osOK;
 8004e32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2001      	movs	r0, #1
 8004e54:	f000 fc7c 	bl	8005750 <xQueueCreateMutexStatic>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	e003      	b.n	8004e64 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	f000 fc5f 	bl	8005720 <xQueueCreateMutex>
 8004e62:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <osMutexWait+0x18>
    return osErrorParameter;
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	e03a      	b.n	8004efa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8e:	d103      	bne.n	8004e98 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e009      	b.n	8004eac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d006      	beq.n	8004eac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <osMutexWait+0x40>
      ticks = 1;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004eac:	f7ff ff3d 	bl	8004d2a <inHandlerMode>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 f85e 	bl	8005f80 <xQueueReceiveFromISR>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d001      	beq.n	8004ece <osMutexWait+0x62>
      return osErrorOS;
 8004eca:	23ff      	movs	r3, #255	; 0xff
 8004ecc:	e015      	b.n	8004efa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <osMutexWait+0x8c>
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <osMutexWait+0x98>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	e008      	b.n	8004ef8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 ff41 	bl	8005d70 <xQueueSemaphoreTake>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <osMutexWait+0x8c>
    return osErrorOS;
 8004ef4:	23ff      	movs	r3, #255	; 0xff
 8004ef6:	e000      	b.n	8004efa <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004f18:	f7ff ff07 	bl	8004d2a <inHandlerMode>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fdbb 	bl	8005aa4 <xQueueGiveFromISR>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d001      	beq.n	8004f38 <osMutexRelease+0x30>
      return osErrorOS;
 8004f34:	23ff      	movs	r3, #255	; 0xff
 8004f36:	e017      	b.n	8004f68 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d013      	beq.n	8004f66 <osMutexRelease+0x5e>
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <osMutexRelease+0x68>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	e00a      	b.n	8004f66 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f50:	2300      	movs	r3, #0
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fc16 	bl	8005788 <xQueueGenericSend>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d001      	beq.n	8004f66 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004f62:	23ff      	movs	r3, #255	; 0xff
 8004f64:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004f66:	68fb      	ldr	r3, [r7, #12]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d10b      	bne.n	8004fa4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	2303      	movs	r3, #3
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	f000 fad8 	bl	8005550 <xQueueGenericCreateStatic>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	e016      	b.n	8004fd2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e014      	b.n	8004fd2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d110      	bne.n	8004fd0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004fae:	2203      	movs	r2, #3
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f000 fb3e 	bl	8005634 <xQueueGenericCreate>
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <osSemaphoreCreate+0x58>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fbde 	bl	8005788 <xQueueGenericSend>
      return sema;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e000      	b.n	8004fd2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004fd0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	e03a      	b.n	800506a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffe:	d103      	bne.n	8005008 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e009      	b.n	800501c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <osSemaphoreWait+0x40>
      ticks = 1;
 8005018:	2301      	movs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800501c:	f7ff fe85 	bl	8004d2a <inHandlerMode>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d017      	beq.n	8005056 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	461a      	mov	r2, r3
 800502c:	2100      	movs	r1, #0
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 ffa6 	bl	8005f80 <xQueueReceiveFromISR>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <osSemaphoreWait+0x62>
      return osErrorOS;
 800503a:	23ff      	movs	r3, #255	; 0xff
 800503c:	e015      	b.n	800506a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d011      	beq.n	8005068 <osSemaphoreWait+0x8c>
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <osSemaphoreWait+0x98>)
 8005046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	e008      	b.n	8005068 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fe89 	bl	8005d70 <xQueueSemaphoreTake>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d001      	beq.n	8005068 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005064:	23ff      	movs	r3, #255	; 0xff
 8005066:	e000      	b.n	800506a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005088:	f7ff fe4f 	bl	8004d2a <inHandlerMode>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d016      	beq.n	80050c0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fd03 	bl	8005aa4 <xQueueGiveFromISR>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80050a4:	23ff      	movs	r3, #255	; 0xff
 80050a6:	e017      	b.n	80050d8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d013      	beq.n	80050d6 <osSemaphoreRelease+0x5e>
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <osSemaphoreRelease+0x68>)
 80050b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	e00a      	b.n	80050d6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80050c0:	2300      	movs	r3, #0
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb5e 	bl	8005788 <xQueueGenericSend>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d001      	beq.n	80050d6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80050d2:	23ff      	movs	r3, #255	; 0xff
 80050d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050ec:	f7ff fe1d 	bl	8004d2a <inHandlerMode>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80050f6:	2382      	movs	r3, #130	; 0x82
 80050f8:	e003      	b.n	8005102 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fff5 	bl	80060ea <vQueueDelete>

  return osOK; 
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800510a:	b590      	push	{r4, r7, lr}
 800510c:	b085      	sub	sp, #20
 800510e:	af02      	add	r7, sp, #8
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <osMessageCreate+0x38>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00e      	beq.n	8005142 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68dc      	ldr	r4, [r3, #12]
 8005134:	2300      	movs	r3, #0
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	4623      	mov	r3, r4
 800513a:	f000 fa09 	bl	8005550 <xQueueGenericCreateStatic>
 800513e:	4603      	mov	r3, r0
 8005140:	e008      	b.n	8005154 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	4619      	mov	r1, r3
 800514e:	f000 fa71 	bl	8005634 <xQueueGenericCreate>
 8005152:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bd90      	pop	{r4, r7, pc}

0800515c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <osMessagePut+0x1e>
    ticks = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800517a:	f7ff fdd6 	bl	8004d2a <inHandlerMode>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d018      	beq.n	80051b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005184:	f107 0210 	add.w	r2, r7, #16
 8005188:	f107 0108 	add.w	r1, r7, #8
 800518c:	2300      	movs	r3, #0
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fbf4 	bl	800597c <xQueueGenericSendFromISR>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d001      	beq.n	800519e <osMessagePut+0x42>
      return osErrorOS;
 800519a:	23ff      	movs	r3, #255	; 0xff
 800519c:	e018      	b.n	80051d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d014      	beq.n	80051ce <osMessagePut+0x72>
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <osMessagePut+0x7c>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	e00b      	b.n	80051ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80051b6:	f107 0108 	add.w	r1, r7, #8
 80051ba:	2300      	movs	r3, #0
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fae2 	bl	8005788 <xQueueGenericSend>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <osMessagePut+0x72>
      return osErrorOS;
 80051ca:	23ff      	movs	r3, #255	; 0xff
 80051cc:	e000      	b.n	80051d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b08b      	sub	sp, #44	; 0x2c
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	617b      	str	r3, [r7, #20]
    return event;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	461c      	mov	r4, r3
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800520a:	e054      	b.n	80052b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521a:	d103      	bne.n	8005224 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800521c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e009      	b.n	8005238 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <osMessageGet+0x5c>
      ticks = 1;
 8005234:	2301      	movs	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005238:	f7ff fd77 	bl	8004d2a <inHandlerMode>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01c      	beq.n	800527c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005242:	f107 0220 	add.w	r2, r7, #32
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	68b8      	ldr	r0, [r7, #8]
 8005250:	f000 fe96 	bl	8005f80 <xQueueReceiveFromISR>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d102      	bne.n	8005260 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800525a:	2310      	movs	r3, #16
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e001      	b.n	8005264 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01d      	beq.n	80052a6 <osMessageGet+0xca>
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <osMessageGet+0xe4>)
 800526c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	e014      	b.n	80052a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	3304      	adds	r3, #4
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	4619      	mov	r1, r3
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f000 fc96 	bl	8005bb8 <xQueueReceive>
 800528c:	4603      	mov	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005292:	2310      	movs	r3, #16
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e006      	b.n	80052a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <osMessageGet+0xc6>
 800529e:	2300      	movs	r3, #0
 80052a0:	e000      	b.n	80052a4 <osMessageGet+0xc8>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	461c      	mov	r4, r3
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	372c      	adds	r7, #44	; 0x2c
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	bf00      	nop
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052cc:	f7ff fd2d 	bl	8004d2a <inHandlerMode>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 feec 	bl	80060b4 <uxQueueMessagesWaitingFromISR>
 80052dc:	4603      	mov	r3, r0
 80052de:	e003      	b.n	80052e8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 feca 	bl	800607a <uxQueueMessagesWaiting>
 80052e6:	4603      	mov	r3, r0
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052f8:	f7ff fd17 	bl	8004d2a <inHandlerMode>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <osMessageDelete+0x16>
    return osErrorISR;
 8005302:	2382      	movs	r3, #130	; 0x82
 8005304:	e003      	b.n	800530e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 feef 	bl	80060ea <vQueueDelete>

  return osOK; 
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 0208 	add.w	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800532e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0208 	add.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f103 0208 	add.w	r2, r3, #8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ce:	d103      	bne.n	80053d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e00c      	b.n	80053f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3308      	adds	r3, #8
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e002      	b.n	80053e6 <vListInsert+0x2e>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d2f6      	bcs.n	80053e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d103      	bne.n	800545e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1e5a      	subs	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80054a8:	f002 f8d8 	bl	800765c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	68f9      	ldr	r1, [r7, #12]
 80054b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	441a      	add	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	3b01      	subs	r3, #1
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	441a      	add	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	22ff      	movs	r2, #255	; 0xff
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	22ff      	movs	r2, #255	; 0xff
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d114      	bne.n	8005528 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01a      	beq.n	800553c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3310      	adds	r3, #16
 800550a:	4618      	mov	r0, r3
 800550c:	f001 fb80 	bl	8006c10 <xTaskRemoveFromEventList>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <xQueueGenericReset+0xcc>)
 8005518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	e009      	b.n	800553c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3310      	adds	r3, #16
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fef2 	bl	8005316 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3324      	adds	r3, #36	; 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff feed 	bl	8005316 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800553c:	f002 f8bc 	bl	80076b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005540:	2301      	movs	r3, #1
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08e      	sub	sp, #56	; 0x38
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <xQueueGenericCreateStatic+0x28>
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
 8005576:	e7fe      	b.n	8005576 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <xQueueGenericCreateStatic+0x42>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	e7fe      	b.n	8005590 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <xQueueGenericCreateStatic+0x4e>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xQueueGenericCreateStatic+0x52>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueGenericCreateStatic+0x54>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <xQueueGenericCreateStatic+0x6c>
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	e7fe      	b.n	80055ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <xQueueGenericCreateStatic+0x78>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <xQueueGenericCreateStatic+0x7c>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <xQueueGenericCreateStatic+0x7e>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <xQueueGenericCreateStatic+0x96>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055e6:	2348      	movs	r3, #72	; 0x48
 80055e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b48      	cmp	r3, #72	; 0x48
 80055ee:	d009      	beq.n	8005604 <xQueueGenericCreateStatic+0xb4>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e7fe      	b.n	8005602 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005616:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f842 	bl	80056ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800562c:	4618      	mov	r0, r3
 800562e:	3730      	adds	r7, #48	; 0x30
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <xQueueGenericCreate+0x28>
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e7fe      	b.n	800565a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e004      	b.n	8005672 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	fb02 f303 	mul.w	r3, r2, r3
 8005670:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3348      	adds	r3, #72	; 0x48
 8005676:	4618      	mov	r0, r3
 8005678:	f002 f90a 	bl	8007890 <pvPortMalloc>
 800567c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00f      	beq.n	80056a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3348      	adds	r3, #72	; 0x48
 8005688:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005692:	79fa      	ldrb	r2, [r7, #7]
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f805 	bl	80056ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056a4:	69bb      	ldr	r3, [r7, #24]
	}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e002      	b.n	80056d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056dc:	2101      	movs	r1, #1
 80056de:	69b8      	ldr	r0, [r7, #24]
 80056e0:	f7ff fece 	bl	8005480 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00e      	beq.n	8005718 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800570c:	2300      	movs	r3, #0
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f838 	bl	8005788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800572a:	2301      	movs	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	461a      	mov	r2, r3
 8005736:	6939      	ldr	r1, [r7, #16]
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f7ff ff7b 	bl	8005634 <xQueueGenericCreate>
 800573e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ffd3 	bl	80056ec <prvInitialiseMutex>

		return pxNewQueue;
 8005746:	68fb      	ldr	r3, [r7, #12]
	}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	4603      	mov	r3, r0
 8005758:	6039      	str	r1, [r7, #0]
 800575a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	6939      	ldr	r1, [r7, #16]
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff feee 	bl	8005550 <xQueueGenericCreateStatic>
 8005774:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ffb8 	bl	80056ec <prvInitialiseMutex>

		return pxNewQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
	}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08e      	sub	sp, #56	; 0x38
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <xQueueGenericSend+0x30>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b6:	e7fe      	b.n	80057b6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <xQueueGenericSend+0x3e>
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <xQueueGenericSend+0x42>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e000      	b.n	80057cc <xQueueGenericSend+0x44>
 80057ca:	2300      	movs	r3, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <xQueueGenericSend+0x5c>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
 80057e2:	e7fe      	b.n	80057e2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d103      	bne.n	80057f2 <xQueueGenericSend+0x6a>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <xQueueGenericSend+0x6e>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <xQueueGenericSend+0x70>
 80057f6:	2300      	movs	r3, #0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <xQueueGenericSend+0x88>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	e7fe      	b.n	800580e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005810:	f001 fbba 	bl	8006f88 <xTaskGetSchedulerState>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <xQueueGenericSend+0x98>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <xQueueGenericSend+0x9c>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <xQueueGenericSend+0x9e>
 8005824:	2300      	movs	r3, #0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <xQueueGenericSend+0xb6>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	e7fe      	b.n	800583c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583e:	f001 ff0d 	bl	800765c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <xQueueGenericSend+0xcc>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d129      	bne.n	80058a8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fc80 	bl	800615e <prvCopyDataToQueue>
 800585e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d010      	beq.n	800588a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	3324      	adds	r3, #36	; 0x24
 800586c:	4618      	mov	r0, r3
 800586e:	f001 f9cf 	bl	8006c10 <xTaskRemoveFromEventList>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005878:	4b3f      	ldr	r3, [pc, #252]	; (8005978 <xQueueGenericSend+0x1f0>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	e00a      	b.n	80058a0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <xQueueGenericSend+0x1f0>)
 8005892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058a0:	f001 ff0a 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e063      	b.n	8005970 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ae:	f001 ff03 	bl	80076b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e05c      	b.n	8005970 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 fa07 	bl	8006cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ca:	f001 fef5 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ce:	f000 ff99 	bl	8006804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058d2:	f001 fec3 	bl	800765c <vPortEnterCritical>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e2:	d103      	bne.n	80058ec <xQueueGenericSend+0x164>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f8:	d103      	bne.n	8005902 <xQueueGenericSend+0x17a>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005902:	f001 fed9 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005906:	1d3a      	adds	r2, r7, #4
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f001 f9f6 	bl	8006d00 <xTaskCheckForTimeOut>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d124      	bne.n	8005964 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800591a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591c:	f000 fd17 	bl	800634e <prvIsQueueFull>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d018      	beq.n	8005958 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	3310      	adds	r3, #16
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f001 f94a 	bl	8006bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f000 fca2 	bl	800627e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800593a:	f000 ff71 	bl	8006820 <xTaskResumeAll>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f af7c 	bne.w	800583e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <xQueueGenericSend+0x1f0>)
 8005948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	e772      	b.n	800583e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595a:	f000 fc90 	bl	800627e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800595e:	f000 ff5f 	bl	8006820 <xTaskResumeAll>
 8005962:	e76c      	b.n	800583e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005966:	f000 fc8a 	bl	800627e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800596a:	f000 ff59 	bl	8006820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800596e:	2300      	movs	r3, #0
		}
	}
}
 8005970:	4618      	mov	r0, r3
 8005972:	3738      	adds	r7, #56	; 0x38
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08e      	sub	sp, #56	; 0x38
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <xQueueGenericSendFromISR+0x2c>
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e7fe      	b.n	80059a6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <xQueueGenericSendFromISR+0x3a>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <xQueueGenericSendFromISR+0x3e>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <xQueueGenericSendFromISR+0x40>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <xQueueGenericSendFromISR+0x58>
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	623b      	str	r3, [r7, #32]
 80059d2:	e7fe      	b.n	80059d2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d103      	bne.n	80059e2 <xQueueGenericSendFromISR+0x66>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <xQueueGenericSendFromISR+0x6a>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xQueueGenericSendFromISR+0x6c>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <xQueueGenericSendFromISR+0x84>
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e7fe      	b.n	80059fe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a00:	f001 ff08 	bl	8007814 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a04:	f3ef 8211 	mrs	r2, BASEPRI
 8005a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	61ba      	str	r2, [r7, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <xQueueGenericSendFromISR+0xb6>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d12c      	bne.n	8005a8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fb8c 	bl	800615e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4e:	d112      	bne.n	8005a76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d016      	beq.n	8005a86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f8d7 	bl	8006c10 <xTaskRemoveFromEventList>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e007      	b.n	8005a86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	b25a      	sxtb	r2, r3
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a86:	2301      	movs	r3, #1
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005a8a:	e001      	b.n	8005a90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3738      	adds	r7, #56	; 0x38
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08e      	sub	sp, #56	; 0x38
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <xQueueGiveFromISR+0x28>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	e7fe      	b.n	8005aca <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <xQueueGiveFromISR+0x44>
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e7fe      	b.n	8005ae6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <xQueueGiveFromISR+0x54>
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <xQueueGiveFromISR+0x58>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <xQueueGiveFromISR+0x5a>
 8005afc:	2300      	movs	r3, #0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <xQueueGiveFromISR+0x72>
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	e7fe      	b.n	8005b14 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b16:	f001 fe7d 	bl	8007814 <vPortValidateInterruptPriority>
	__asm volatile
 8005b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	617a      	str	r2, [r7, #20]
 8005b30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d22b      	bcs.n	8005b9e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b60:	d112      	bne.n	8005b88 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f84e 	bl	8006c10 <xTaskRemoveFromEventList>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00e      	beq.n	8005b98 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e007      	b.n	8005b98 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	b25a      	sxtb	r2, r3
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9c:	e001      	b.n	8005ba2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3738      	adds	r7, #56	; 0x38
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08c      	sub	sp, #48	; 0x30
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <xQueueReceive+0x2e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	e7fe      	b.n	8005be4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <xQueueReceive+0x3c>
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <xQueueReceive+0x40>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <xQueueReceive+0x42>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <xQueueReceive+0x5a>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e7fe      	b.n	8005c10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c12:	f001 f9b9 	bl	8006f88 <xTaskGetSchedulerState>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <xQueueReceive+0x6a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <xQueueReceive+0x6e>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e000      	b.n	8005c28 <xQueueReceive+0x70>
 8005c26:	2300      	movs	r3, #0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <xQueueReceive+0x88>
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e7fe      	b.n	8005c3e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c40:	f001 fd0c 	bl	800765c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01f      	beq.n	8005c90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c54:	f000 faed 	bl	8006232 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	1e5a      	subs	r2, r3, #1
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00f      	beq.n	8005c88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	3310      	adds	r3, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 ffcf 	bl	8006c10 <xTaskRemoveFromEventList>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c78:	4b3c      	ldr	r3, [pc, #240]	; (8005d6c <xQueueReceive+0x1b4>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c88:	f001 fd16 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e069      	b.n	8005d64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c96:	f001 fd0f 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e062      	b.n	8005d64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ca4:	f107 0310 	add.w	r3, r7, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 f813 	bl	8006cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cb2:	f001 fd01 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cb6:	f000 fda5 	bl	8006804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cba:	f001 fccf 	bl	800765c <vPortEnterCritical>
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x11c>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cda:	b25b      	sxtb	r3, r3
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce0:	d103      	bne.n	8005cea <xQueueReceive+0x132>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cea:	f001 fce5 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cee:	1d3a      	adds	r2, r7, #4
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f802 	bl	8006d00 <xTaskCheckForTimeOut>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d123      	bne.n	8005d4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d04:	f000 fb0d 	bl	8006322 <prvIsQueueEmpty>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d017      	beq.n	8005d3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 ff56 	bl	8006bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d1e:	f000 faae 	bl	800627e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d22:	f000 fd7d 	bl	8006820 <xTaskResumeAll>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d189      	bne.n	8005c40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <xQueueReceive+0x1b4>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e780      	b.n	8005c40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d40:	f000 fa9d 	bl	800627e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d44:	f000 fd6c 	bl	8006820 <xTaskResumeAll>
 8005d48:	e77a      	b.n	8005c40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4c:	f000 fa97 	bl	800627e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d50:	f000 fd66 	bl	8006820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d56:	f000 fae4 	bl	8006322 <prvIsQueueEmpty>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f43f af6f 	beq.w	8005c40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3730      	adds	r7, #48	; 0x30
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08e      	sub	sp, #56	; 0x38
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <xQueueSemaphoreTake+0x30>
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	e7fe      	b.n	8005d9e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <xQueueSemaphoreTake+0x4c>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e7fe      	b.n	8005dba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dbc:	f001 f8e4 	bl	8006f88 <xTaskGetSchedulerState>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <xQueueSemaphoreTake+0x5c>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <xQueueSemaphoreTake+0x60>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <xQueueSemaphoreTake+0x62>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <xQueueSemaphoreTake+0x7a>
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	e7fe      	b.n	8005de8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dea:	f001 fc37 	bl	800765c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d024      	beq.n	8005e44 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	1e5a      	subs	r2, r3, #1
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d104      	bne.n	8005e14 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005e0a:	f001 fa83 	bl	8007314 <pvTaskIncrementMutexHeldCount>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00f      	beq.n	8005e3c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	3310      	adds	r3, #16
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fef5 	bl	8006c10 <xTaskRemoveFromEventList>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e2c:	4b53      	ldr	r3, [pc, #332]	; (8005f7c <xQueueSemaphoreTake+0x20c>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e3c:	f001 fc3c 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e096      	b.n	8005f72 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <xQueueSemaphoreTake+0xf4>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	e7fe      	b.n	8005e62 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e64:	f001 fc28 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e082      	b.n	8005f72 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e72:	f107 030c 	add.w	r3, r7, #12
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 ff2c 	bl	8006cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e80:	f001 fc1a 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e84:	f000 fcbe 	bl	8006804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e88:	f001 fbe8 	bl	800765c <vPortEnterCritical>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e92:	b25b      	sxtb	r3, r3
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e98:	d103      	bne.n	8005ea2 <xQueueSemaphoreTake+0x132>
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eae:	d103      	bne.n	8005eb8 <xQueueSemaphoreTake+0x148>
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eb8:	f001 fbfe 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ebc:	463a      	mov	r2, r7
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 ff1b 	bl	8006d00 <xTaskCheckForTimeOut>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d132      	bne.n	8005f36 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ed2:	f000 fa26 	bl	8006322 <prvIsQueueEmpty>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d026      	beq.n	8005f2a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005ee4:	f001 fbba 	bl	800765c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 f869 	bl	8006fc4 <xTaskPriorityInherit>
 8005ef2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ef4:	f001 fbe0 	bl	80076b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	3324      	adds	r3, #36	; 0x24
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fe61 	bl	8006bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f08:	f000 f9b9 	bl	800627e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f0c:	f000 fc88 	bl	8006820 <xTaskResumeAll>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f47f af69 	bne.w	8005dea <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <xQueueSemaphoreTake+0x20c>)
 8005f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	e75f      	b.n	8005dea <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f2c:	f000 f9a7 	bl	800627e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f30:	f000 fc76 	bl	8006820 <xTaskResumeAll>
 8005f34:	e759      	b.n	8005dea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f38:	f000 f9a1 	bl	800627e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f3c:	f000 fc70 	bl	8006820 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f42:	f000 f9ee 	bl	8006322 <prvIsQueueEmpty>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f43f af4e 	beq.w	8005dea <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005f54:	f001 fb82 	bl	800765c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f5a:	f000 f8e8 	bl	800612e <prvGetDisinheritPriorityAfterTimeout>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f936 	bl	80071d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f6c:	f001 fba4 	bl	80076b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3738      	adds	r7, #56	; 0x38
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <xQueueReceiveFromISR+0x2a>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	623b      	str	r3, [r7, #32]
 8005fa8:	e7fe      	b.n	8005fa8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <xQueueReceiveFromISR+0x38>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <xQueueReceiveFromISR+0x3c>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <xQueueReceiveFromISR+0x3e>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d109      	bne.n	8005fd6 <xQueueReceiveFromISR+0x56>
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fd6:	f001 fc1d 	bl	8007814 <vPortValidateInterruptPriority>
	__asm volatile
 8005fda:	f3ef 8211 	mrs	r2, BASEPRI
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	61ba      	str	r2, [r7, #24]
 8005ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ff2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02f      	beq.n	8006062 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006010:	f000 f90f 	bl	8006232 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	1e5a      	subs	r2, r3, #1
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800601c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006024:	d112      	bne.n	800604c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	3310      	adds	r3, #16
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fdec 	bl	8006c10 <xTaskRemoveFromEventList>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e007      	b.n	800605c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800604c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006050:	3301      	adds	r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	b25a      	sxtb	r2, r3
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800605c:	2301      	movs	r3, #1
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	e001      	b.n	8006066 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006062:	2300      	movs	r3, #0
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	613b      	str	r3, [r7, #16]
	__asm volatile
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006072:	4618      	mov	r0, r3
 8006074:	3738      	adds	r7, #56	; 0x38
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d109      	bne.n	800609c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	e7fe      	b.n	800609a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800609c:	f001 fade 	bl	800765c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80060a6:	f001 fb07 	bl	80076b8 <vPortExitCritical>

	return uxReturn;
 80060aa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <uxQueueMessagesWaitingFromISR+0x22>
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	e7fe      	b.n	80060d4 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80060dc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <vQueueDelete+0x26>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	e7fe      	b.n	800610e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f935 	bl	8006380 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800611c:	2b00      	cmp	r3, #0
 800611e:	d102      	bne.n	8006126 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f001 fc77 	bl	8007a14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f1c3 0307 	rsb	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e001      	b.n	8006150 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006150:	68fb      	ldr	r3, [r7, #12]
	}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10d      	bne.n	8006198 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d14d      	bne.n	8006220 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 ffa1 	bl	80070d0 <xTaskPriorityDisinherit>
 800618e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	e043      	b.n	8006220 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d119      	bne.n	80061d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6898      	ldr	r0, [r3, #8]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	461a      	mov	r2, r3
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	f010 fcda 	bl	8016b62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	441a      	add	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d32b      	bcc.n	8006220 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	609a      	str	r2, [r3, #8]
 80061d0:	e026      	b.n	8006220 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68d8      	ldr	r0, [r3, #12]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	461a      	mov	r2, r3
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	f010 fcc0 	bl	8016b62 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	425b      	negs	r3, r3
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d207      	bcs.n	800620e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	425b      	negs	r3, r3
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d105      	bne.n	8006220 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	3b01      	subs	r3, #1
 800621e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006228:	697b      	ldr	r3, [r7, #20]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d018      	beq.n	8006276 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	441a      	add	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d303      	bcc.n	8006266 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	461a      	mov	r2, r3
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f010 fc76 	bl	8016b62 <memcpy>
	}
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006286:	f001 f9e9 	bl	800765c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006290:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006292:	e011      	b.n	80062b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d012      	beq.n	80062c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fcb5 	bl	8006c10 <xTaskRemoveFromEventList>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062ac:	f000 fd88 	bl	8006dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dce9      	bgt.n	8006294 <prvUnlockQueue+0x16>
 80062c0:	e000      	b.n	80062c4 <prvUnlockQueue+0x46>
					break;
 80062c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	22ff      	movs	r2, #255	; 0xff
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062cc:	f001 f9f4 	bl	80076b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062d0:	f001 f9c4 	bl	800765c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062dc:	e011      	b.n	8006302 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d012      	beq.n	800630c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3310      	adds	r3, #16
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fc90 	bl	8006c10 <xTaskRemoveFromEventList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062f6:	f000 fd63 	bl	8006dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	dce9      	bgt.n	80062de <prvUnlockQueue+0x60>
 800630a:	e000      	b.n	800630e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800630c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	22ff      	movs	r2, #255	; 0xff
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006316:	f001 f9cf 	bl	80076b8 <vPortExitCritical>
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800632a:	f001 f997 	bl	800765c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e001      	b.n	8006340 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006340:	f001 f9ba 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006356:	f001 f981 	bl	800765c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	429a      	cmp	r2, r3
 8006364:	d102      	bne.n	800636c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e001      	b.n	8006370 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006370:	f001 f9a2 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8006374:	68fb      	ldr	r3, [r7, #12]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e016      	b.n	80063bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800638e:	4a10      	ldr	r2, [pc, #64]	; (80063d0 <vQueueUnregisterQueue+0x50>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4413      	add	r3, r2
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d10b      	bne.n	80063b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800639e:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <vQueueUnregisterQueue+0x50>)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2100      	movs	r1, #0
 80063a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <vQueueUnregisterQueue+0x50>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]
				break;
 80063b4:	e005      	b.n	80063c2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b07      	cmp	r3, #7
 80063c0:	d9e5      	bls.n	800638e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80063c2:	bf00      	nop
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	2000c350 	.word	0x2000c350

080063d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08e      	sub	sp, #56	; 0x38
 80063d8:	af04      	add	r7, sp, #16
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d109      	bne.n	80063fc <xTaskCreateStatic+0x28>
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	623b      	str	r3, [r7, #32]
 80063fa:	e7fe      	b.n	80063fa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d109      	bne.n	8006416 <xTaskCreateStatic+0x42>
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e7fe      	b.n	8006414 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006416:	2354      	movs	r3, #84	; 0x54
 8006418:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b54      	cmp	r3, #84	; 0x54
 800641e:	d009      	beq.n	8006434 <xTaskCreateStatic+0x60>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e7fe      	b.n	8006432 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01e      	beq.n	8006478 <xTaskCreateStatic+0xa4>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01b      	beq.n	8006478 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006452:	2300      	movs	r3, #0
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	9302      	str	r3, [sp, #8]
 800645a:	f107 0314 	add.w	r3, r7, #20
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f850 	bl	8006510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006472:	f000 f8cb 	bl	800660c <prvAddNewTaskToReadyList>
 8006476:	e001      	b.n	800647c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800647c:	697b      	ldr	r3, [r7, #20]
	}
 800647e:	4618      	mov	r0, r3
 8006480:	3728      	adds	r7, #40	; 0x28
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006486:	b580      	push	{r7, lr}
 8006488:	b08c      	sub	sp, #48	; 0x30
 800648a:	af04      	add	r7, sp, #16
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 f9f8 	bl	8007890 <pvPortMalloc>
 80064a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80064a8:	2054      	movs	r0, #84	; 0x54
 80064aa:	f001 f9f1 	bl	8007890 <pvPortMalloc>
 80064ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
 80064bc:	e005      	b.n	80064ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f001 faa8 	bl	8007a14 <vPortFree>
 80064c4:	e001      	b.n	80064ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064d8:	88fa      	ldrh	r2, [r7, #6]
 80064da:	2300      	movs	r3, #0
 80064dc:	9303      	str	r3, [sp, #12]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	9302      	str	r3, [sp, #8]
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f80e 	bl	8006510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064f4:	69f8      	ldr	r0, [r7, #28]
 80064f6:	f000 f889 	bl	800660c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80064fa:	2301      	movs	r3, #1
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e002      	b.n	8006506 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006504:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006506:	69bb      	ldr	r3, [r7, #24]
	}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006528:	3b01      	subs	r3, #1
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <prvInitialiseNewTask+0x46>
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e7fe      	b.n	8006554 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e012      	b.n	8006582 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	7819      	ldrb	r1, [r3, #0]
 8006564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	3334      	adds	r3, #52	; 0x34
 800656c:	460a      	mov	r2, r1
 800656e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d006      	beq.n	800658a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3301      	adds	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b0f      	cmp	r3, #15
 8006586:	d9e9      	bls.n	800655c <prvInitialiseNewTask+0x4c>
 8006588:	e000      	b.n	800658c <prvInitialiseNewTask+0x7c>
		{
			break;
 800658a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b06      	cmp	r3, #6
 8006598:	d901      	bls.n	800659e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800659a:	2306      	movs	r3, #6
 800659c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fece 	bl	8005356 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	3318      	adds	r3, #24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe fec9 	bl	8005356 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	f1c3 0207 	rsb	r2, r3, #7
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	69b8      	ldr	r0, [r7, #24]
 80065ee:	f000 ff0b 	bl	8007408 <pxPortInitialiseStack>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006614:	f001 f822 	bl	800765c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006618:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <prvAddNewTaskToReadyList+0xb8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a29      	ldr	r2, [pc, #164]	; (80066c4 <prvAddNewTaskToReadyList+0xb8>)
 8006620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006622:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <prvAddNewTaskToReadyList+0xbc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800662a:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <prvAddNewTaskToReadyList+0xbc>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006630:	4b24      	ldr	r3, [pc, #144]	; (80066c4 <prvAddNewTaskToReadyList+0xb8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d110      	bne.n	800665a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006638:	f000 fbe6 	bl	8006e08 <prvInitialiseTaskLists>
 800663c:	e00d      	b.n	800665a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800663e:	4b23      	ldr	r3, [pc, #140]	; (80066cc <prvAddNewTaskToReadyList+0xc0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <prvAddNewTaskToReadyList+0xbc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	429a      	cmp	r2, r3
 8006652:	d802      	bhi.n	800665a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006654:	4a1c      	ldr	r2, [pc, #112]	; (80066c8 <prvAddNewTaskToReadyList+0xbc>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <prvAddNewTaskToReadyList+0xc4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <prvAddNewTaskToReadyList+0xc4>)
 8006662:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	2201      	movs	r2, #1
 800666a:	409a      	lsls	r2, r3
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4313      	orrs	r3, r2
 8006672:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <prvAddNewTaskToReadyList+0xc8>)
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <prvAddNewTaskToReadyList+0xcc>)
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3304      	adds	r3, #4
 800668a:	4619      	mov	r1, r3
 800668c:	4610      	mov	r0, r2
 800668e:	f7fe fe6f 	bl	8005370 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006692:	f001 f811 	bl	80076b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <prvAddNewTaskToReadyList+0xc0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <prvAddNewTaskToReadyList+0xbc>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d207      	bcs.n	80066bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <prvAddNewTaskToReadyList+0xd0>)
 80066ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000760 	.word	0x20000760
 80066c8:	20000660 	.word	0x20000660
 80066cc:	2000076c 	.word	0x2000076c
 80066d0:	2000077c 	.word	0x2000077c
 80066d4:	20000768 	.word	0x20000768
 80066d8:	20000664 	.word	0x20000664
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d016      	beq.n	8006720 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <vTaskDelay+0x60>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <vTaskDelay+0x2e>
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	e7fe      	b.n	800670c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800670e:	f000 f879 	bl	8006804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006712:	2100      	movs	r1, #0
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fe11 	bl	800733c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800671a:	f000 f881 	bl	8006820 <xTaskResumeAll>
 800671e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006726:	4b07      	ldr	r3, [pc, #28]	; (8006744 <vTaskDelay+0x64>)
 8006728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000788 	.word	0x20000788
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006756:	463a      	mov	r2, r7
 8006758:	1d39      	adds	r1, r7, #4
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4618      	mov	r0, r3
 8006760:	f7f9 ff2e 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	9202      	str	r2, [sp, #8]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	2300      	movs	r3, #0
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	460a      	mov	r2, r1
 8006776:	491d      	ldr	r1, [pc, #116]	; (80067ec <vTaskStartScheduler+0xa4>)
 8006778:	481d      	ldr	r0, [pc, #116]	; (80067f0 <vTaskStartScheduler+0xa8>)
 800677a:	f7ff fe2b 	bl	80063d4 <xTaskCreateStatic>
 800677e:	4602      	mov	r2, r0
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <vTaskStartScheduler+0xac>)
 8006782:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <vTaskStartScheduler+0xac>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e001      	b.n	8006796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d115      	bne.n	80067c8 <vTaskStartScheduler+0x80>
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <vTaskStartScheduler+0xb0>)
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <vTaskStartScheduler+0xb4>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <vTaskStartScheduler+0xb8>)
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067c2:	f000 fead 	bl	8007520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067c6:	e00d      	b.n	80067e4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ce:	d109      	bne.n	80067e4 <vTaskStartScheduler+0x9c>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e7fe      	b.n	80067e2 <vTaskStartScheduler+0x9a>
}
 80067e4:	bf00      	nop
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	08017fec 	.word	0x08017fec
 80067f0:	08006dd9 	.word	0x08006dd9
 80067f4:	20000784 	.word	0x20000784
 80067f8:	20000780 	.word	0x20000780
 80067fc:	2000076c 	.word	0x2000076c
 8006800:	20000764 	.word	0x20000764

08006804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <vTaskSuspendAll+0x18>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	4a03      	ldr	r2, [pc, #12]	; (800681c <vTaskSuspendAll+0x18>)
 8006810:	6013      	str	r3, [r2, #0]
}
 8006812:	bf00      	nop
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000788 	.word	0x20000788

08006820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <xTaskResumeAll+0x114>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <xTaskResumeAll+0x2a>
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	e7fe      	b.n	8006848 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800684a:	f000 ff07 	bl	800765c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800684e:	4b39      	ldr	r3, [pc, #228]	; (8006934 <xTaskResumeAll+0x114>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3b01      	subs	r3, #1
 8006854:	4a37      	ldr	r2, [pc, #220]	; (8006934 <xTaskResumeAll+0x114>)
 8006856:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006858:	4b36      	ldr	r3, [pc, #216]	; (8006934 <xTaskResumeAll+0x114>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d161      	bne.n	8006924 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006860:	4b35      	ldr	r3, [pc, #212]	; (8006938 <xTaskResumeAll+0x118>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05d      	beq.n	8006924 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006868:	e02e      	b.n	80068c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800686a:	4b34      	ldr	r3, [pc, #208]	; (800693c <xTaskResumeAll+0x11c>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3318      	adds	r3, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fdd7 	bl	800542a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3304      	adds	r3, #4
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fdd2 	bl	800542a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	2201      	movs	r2, #1
 800688c:	409a      	lsls	r2, r3
 800688e:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <xTaskResumeAll+0x120>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4313      	orrs	r3, r2
 8006894:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <xTaskResumeAll+0x120>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a27      	ldr	r2, [pc, #156]	; (8006944 <xTaskResumeAll+0x124>)
 80068a6:	441a      	add	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fd5e 	bl	8005370 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b8:	4b23      	ldr	r3, [pc, #140]	; (8006948 <xTaskResumeAll+0x128>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80068c2:	4b22      	ldr	r3, [pc, #136]	; (800694c <xTaskResumeAll+0x12c>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c8:	4b1c      	ldr	r3, [pc, #112]	; (800693c <xTaskResumeAll+0x11c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1cc      	bne.n	800686a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068d6:	f000 fb31 	bl	8006f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <xTaskResumeAll+0x130>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068e6:	f000 f859 	bl	800699c <xTaskIncrementTick>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80068f0:	4b16      	ldr	r3, [pc, #88]	; (800694c <xTaskResumeAll+0x12c>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f1      	bne.n	80068e6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <xTaskResumeAll+0x130>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006908:	4b10      	ldr	r3, [pc, #64]	; (800694c <xTaskResumeAll+0x12c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <xTaskResumeAll+0x134>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006924:	f000 fec8 	bl	80076b8 <vPortExitCritical>

	return xAlreadyYielded;
 8006928:	68bb      	ldr	r3, [r7, #8]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20000788 	.word	0x20000788
 8006938:	20000760 	.word	0x20000760
 800693c:	20000720 	.word	0x20000720
 8006940:	20000768 	.word	0x20000768
 8006944:	20000664 	.word	0x20000664
 8006948:	20000660 	.word	0x20000660
 800694c:	20000774 	.word	0x20000774
 8006950:	20000770 	.word	0x20000770
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <xTaskGetTickCount+0x1c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006964:	687b      	ldr	r3, [r7, #4]
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000764 	.word	0x20000764

08006978 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800697e:	f000 ff49 	bl	8007814 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006982:	2300      	movs	r3, #0
 8006984:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006986:	4b04      	ldr	r3, [pc, #16]	; (8006998 <xTaskGetTickCountFromISR+0x20>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800698c:	683b      	ldr	r3, [r7, #0]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000764 	.word	0x20000764

0800699c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a6:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <xTaskIncrementTick+0x14c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 808c 	bne.w	8006ac8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069b0:	4b4e      	ldr	r3, [pc, #312]	; (8006aec <xTaskIncrementTick+0x150>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069b8:	4a4c      	ldr	r2, [pc, #304]	; (8006aec <xTaskIncrementTick+0x150>)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d11f      	bne.n	8006a04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80069c4:	4b4a      	ldr	r3, [pc, #296]	; (8006af0 <xTaskIncrementTick+0x154>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <xTaskIncrementTick+0x46>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	e7fe      	b.n	80069e0 <xTaskIncrementTick+0x44>
 80069e2:	4b43      	ldr	r3, [pc, #268]	; (8006af0 <xTaskIncrementTick+0x154>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <xTaskIncrementTick+0x158>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a40      	ldr	r2, [pc, #256]	; (8006af0 <xTaskIncrementTick+0x154>)
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	4a40      	ldr	r2, [pc, #256]	; (8006af4 <xTaskIncrementTick+0x158>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <xTaskIncrementTick+0x15c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3301      	adds	r3, #1
 80069fc:	4a3e      	ldr	r2, [pc, #248]	; (8006af8 <xTaskIncrementTick+0x15c>)
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	f000 fa9c 	bl	8006f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a04:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <xTaskIncrementTick+0x160>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d34d      	bcc.n	8006aaa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0e:	4b38      	ldr	r3, [pc, #224]	; (8006af0 <xTaskIncrementTick+0x154>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <xTaskIncrementTick+0x80>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <xTaskIncrementTick+0x82>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a22:	4b36      	ldr	r3, [pc, #216]	; (8006afc <xTaskIncrementTick+0x160>)
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a28:	601a      	str	r2, [r3, #0]
					break;
 8006a2a:	e03e      	b.n	8006aaa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a2c:	4b30      	ldr	r3, [pc, #192]	; (8006af0 <xTaskIncrementTick+0x154>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d203      	bcs.n	8006a4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a44:	4a2d      	ldr	r2, [pc, #180]	; (8006afc <xTaskIncrementTick+0x160>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6013      	str	r3, [r2, #0]
						break;
 8006a4a:	e02e      	b.n	8006aaa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe fcea 	bl	800542a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	3318      	adds	r3, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fce1 	bl	800542a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <xTaskIncrementTick+0x164>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <xTaskIncrementTick+0x164>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <xTaskIncrementTick+0x168>)
 8006a88:	441a      	add	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe fc6d 	bl	8005370 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <xTaskIncrementTick+0x16c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d3b4      	bcc.n	8006a0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa8:	e7b1      	b.n	8006a0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aaa:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <xTaskIncrementTick+0x16c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4914      	ldr	r1, [pc, #80]	; (8006b04 <xTaskIncrementTick+0x168>)
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d907      	bls.n	8006ad2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e004      	b.n	8006ad2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006ac8:	4b10      	ldr	r3, [pc, #64]	; (8006b0c <xTaskIncrementTick+0x170>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <xTaskIncrementTick+0x170>)
 8006ad0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <xTaskIncrementTick+0x174>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006ada:	2301      	movs	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ade:	697b      	ldr	r3, [r7, #20]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000788 	.word	0x20000788
 8006aec:	20000764 	.word	0x20000764
 8006af0:	20000718 	.word	0x20000718
 8006af4:	2000071c 	.word	0x2000071c
 8006af8:	20000778 	.word	0x20000778
 8006afc:	20000780 	.word	0x20000780
 8006b00:	20000768 	.word	0x20000768
 8006b04:	20000664 	.word	0x20000664
 8006b08:	20000660 	.word	0x20000660
 8006b0c:	20000770 	.word	0x20000770
 8006b10:	20000774 	.word	0x20000774

08006b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b1a:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <vTaskSwitchContext+0xa0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b22:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <vTaskSwitchContext+0xa4>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b28:	e03e      	b.n	8006ba8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006b2a:	4b23      	ldr	r3, [pc, #140]	; (8006bb8 <vTaskSwitchContext+0xa4>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b30:	4b22      	ldr	r3, [pc, #136]	; (8006bbc <vTaskSwitchContext+0xa8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	fab3 f383 	clz	r3, r3
 8006b3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	f1c3 031f 	rsb	r3, r3, #31
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	491e      	ldr	r1, [pc, #120]	; (8006bc0 <vTaskSwitchContext+0xac>)
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	e7fe      	b.n	8006b6c <vTaskSwitchContext+0x58>
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <vTaskSwitchContext+0xac>)
 8006b7a:	4413      	add	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d104      	bne.n	8006b9e <vTaskSwitchContext+0x8a>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <vTaskSwitchContext+0xb0>)
 8006ba6:	6013      	str	r3, [r2, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000788 	.word	0x20000788
 8006bb8:	20000774 	.word	0x20000774
 8006bbc:	20000768 	.word	0x20000768
 8006bc0:	20000664 	.word	0x20000664
 8006bc4:	20000660 	.word	0x20000660

08006bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <vTaskPlaceOnEventList+0x24>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e7fe      	b.n	8006bea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <vTaskPlaceOnEventList+0x44>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3318      	adds	r3, #24
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fe fbdf 	bl	80053b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f000 fb9d 	bl	800733c <prvAddCurrentTaskToDelayedList>
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000660 	.word	0x20000660

08006c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <xTaskRemoveFromEventList+0x2a>
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e7fe      	b.n	8006c38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3318      	adds	r3, #24
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fbf3 	bl	800542a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <xTaskRemoveFromEventList+0xac>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11c      	bne.n	8006c86 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fbea 	bl	800542a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	409a      	lsls	r2, r3
 8006c5e:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <xTaskRemoveFromEventList+0xb0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	4a16      	ldr	r2, [pc, #88]	; (8006cc0 <xTaskRemoveFromEventList+0xb0>)
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4a13      	ldr	r2, [pc, #76]	; (8006cc4 <xTaskRemoveFromEventList+0xb4>)
 8006c76:	441a      	add	r2, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f7fe fb76 	bl	8005370 <vListInsertEnd>
 8006c84:	e005      	b.n	8006c92 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3318      	adds	r3, #24
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	480e      	ldr	r0, [pc, #56]	; (8006cc8 <xTaskRemoveFromEventList+0xb8>)
 8006c8e:	f7fe fb6f 	bl	8005370 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4b0d      	ldr	r3, [pc, #52]	; (8006ccc <xTaskRemoveFromEventList+0xbc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d905      	bls.n	8006cac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ca4:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <xTaskRemoveFromEventList+0xc0>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e001      	b.n	8006cb0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006cb0:	697b      	ldr	r3, [r7, #20]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000788 	.word	0x20000788
 8006cc0:	20000768 	.word	0x20000768
 8006cc4:	20000664 	.word	0x20000664
 8006cc8:	20000720 	.word	0x20000720
 8006ccc:	20000660 	.word	0x20000660
 8006cd0:	20000774 	.word	0x20000774

08006cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <vTaskInternalSetTimeOutState+0x24>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <vTaskInternalSetTimeOutState+0x28>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	605a      	str	r2, [r3, #4]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20000778 	.word	0x20000778
 8006cfc:	20000764 	.word	0x20000764

08006d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <xTaskCheckForTimeOut+0x24>
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e7fe      	b.n	8006d22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <xTaskCheckForTimeOut+0x3e>
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e7fe      	b.n	8006d3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006d3e:	f000 fc8d 	bl	800765c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d42:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <xTaskCheckForTimeOut+0xb8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5a:	d102      	bne.n	8006d62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	e023      	b.n	8006daa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <xTaskCheckForTimeOut+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d007      	beq.n	8006d7e <xTaskCheckForTimeOut+0x7e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e015      	b.n	8006daa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d20b      	bcs.n	8006da0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ff9d 	bl	8006cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	e004      	b.n	8006daa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f000 fc85 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8006dae:	69fb      	ldr	r3, [r7, #28]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000764 	.word	0x20000764
 8006dbc:	20000778 	.word	0x20000778

08006dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dc4:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <vTaskMissedYield+0x14>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	20000774 	.word	0x20000774

08006dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006de0:	f000 f852 	bl	8006e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvIdleTask+0x28>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d9f9      	bls.n	8006de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <prvIdleTask+0x2c>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006dfc:	e7f0      	b.n	8006de0 <prvIdleTask+0x8>
 8006dfe:	bf00      	nop
 8006e00:	20000664 	.word	0x20000664
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e0e:	2300      	movs	r3, #0
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	e00c      	b.n	8006e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <prvInitialiseTaskLists+0x60>)
 8006e20:	4413      	add	r3, r2
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fa77 	bl	8005316 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	607b      	str	r3, [r7, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b06      	cmp	r3, #6
 8006e32:	d9ef      	bls.n	8006e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e34:	480d      	ldr	r0, [pc, #52]	; (8006e6c <prvInitialiseTaskLists+0x64>)
 8006e36:	f7fe fa6e 	bl	8005316 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e3a:	480d      	ldr	r0, [pc, #52]	; (8006e70 <prvInitialiseTaskLists+0x68>)
 8006e3c:	f7fe fa6b 	bl	8005316 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e40:	480c      	ldr	r0, [pc, #48]	; (8006e74 <prvInitialiseTaskLists+0x6c>)
 8006e42:	f7fe fa68 	bl	8005316 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e46:	480c      	ldr	r0, [pc, #48]	; (8006e78 <prvInitialiseTaskLists+0x70>)
 8006e48:	f7fe fa65 	bl	8005316 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e4c:	480b      	ldr	r0, [pc, #44]	; (8006e7c <prvInitialiseTaskLists+0x74>)
 8006e4e:	f7fe fa62 	bl	8005316 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e52:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <prvInitialiseTaskLists+0x78>)
 8006e54:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <prvInitialiseTaskLists+0x64>)
 8006e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <prvInitialiseTaskLists+0x7c>)
 8006e5a:	4a05      	ldr	r2, [pc, #20]	; (8006e70 <prvInitialiseTaskLists+0x68>)
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000664 	.word	0x20000664
 8006e6c:	200006f0 	.word	0x200006f0
 8006e70:	20000704 	.word	0x20000704
 8006e74:	20000720 	.word	0x20000720
 8006e78:	20000734 	.word	0x20000734
 8006e7c:	2000074c 	.word	0x2000074c
 8006e80:	20000718 	.word	0x20000718
 8006e84:	2000071c 	.word	0x2000071c

08006e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e8e:	e019      	b.n	8006ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e90:	f000 fbe4 	bl	800765c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e94:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <prvCheckTasksWaitingTermination+0x4c>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fe fac2 	bl	800542a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvCheckTasksWaitingTermination+0x50>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	4a0a      	ldr	r2, [pc, #40]	; (8006ed8 <prvCheckTasksWaitingTermination+0x50>)
 8006eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <prvCheckTasksWaitingTermination+0x54>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <prvCheckTasksWaitingTermination+0x54>)
 8006eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eba:	f000 fbfd 	bl	80076b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f80e 	bl	8006ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <prvCheckTasksWaitingTermination+0x54>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e1      	bne.n	8006e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20000734 	.word	0x20000734
 8006ed8:	20000760 	.word	0x20000760
 8006edc:	20000748 	.word	0x20000748

08006ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fd8c 	bl	8007a14 <vPortFree>
				vPortFree( pxTCB );
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fd89 	bl	8007a14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f02:	e017      	b.n	8006f34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d103      	bne.n	8006f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fd80 	bl	8007a14 <vPortFree>
	}
 8006f14:	e00e      	b.n	8006f34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d009      	beq.n	8006f34 <prvDeleteTCB+0x54>
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e7fe      	b.n	8006f32 <prvDeleteTCB+0x52>
	}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f42:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <prvResetNextTaskUnblockTime+0x44>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <prvResetNextTaskUnblockTime+0x14>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <prvResetNextTaskUnblockTime+0x16>
 8006f50:	2300      	movs	r3, #0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <prvResetNextTaskUnblockTime+0x48>)
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f5e:	e008      	b.n	8006f72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <prvResetNextTaskUnblockTime+0x44>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4a05      	ldr	r2, [pc, #20]	; (8006f84 <prvResetNextTaskUnblockTime+0x48>)
 8006f70:	6013      	str	r3, [r2, #0]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000718 	.word	0x20000718
 8006f84:	20000780 	.word	0x20000780

08006f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <xTaskGetSchedulerState+0x34>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f96:	2301      	movs	r3, #1
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	e008      	b.n	8006fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f9c:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <xTaskGetSchedulerState+0x38>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	e001      	b.n	8006fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fae:	687b      	ldr	r3, [r7, #4]
	}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000076c 	.word	0x2000076c
 8006fc0:	20000788 	.word	0x20000788

08006fc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d06e      	beq.n	80070b8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fde:	4b39      	ldr	r3, [pc, #228]	; (80070c4 <xTaskPriorityInherit+0x100>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d25e      	bcs.n	80070a6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	db06      	blt.n	8006ffe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ff0:	4b34      	ldr	r3, [pc, #208]	; (80070c4 <xTaskPriorityInherit+0x100>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	f1c3 0207 	rsb	r2, r3, #7
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6959      	ldr	r1, [r3, #20]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4a2e      	ldr	r2, [pc, #184]	; (80070c8 <xTaskPriorityInherit+0x104>)
 8007010:	4413      	add	r3, r2
 8007012:	4299      	cmp	r1, r3
 8007014:	d101      	bne.n	800701a <xTaskPriorityInherit+0x56>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <xTaskPriorityInherit+0x58>
 800701a:	2300      	movs	r3, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d03a      	beq.n	8007096 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fa00 	bl	800542a <uxListRemove>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d115      	bne.n	800705c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4924      	ldr	r1, [pc, #144]	; (80070c8 <xTaskPriorityInherit+0x104>)
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <xTaskPriorityInherit+0x98>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	2201      	movs	r2, #1
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	43da      	mvns	r2, r3
 8007052:	4b1e      	ldr	r3, [pc, #120]	; (80070cc <xTaskPriorityInherit+0x108>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4013      	ands	r3, r2
 8007058:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <xTaskPriorityInherit+0x108>)
 800705a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800705c:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <xTaskPriorityInherit+0x100>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	2201      	movs	r2, #1
 800706c:	409a      	lsls	r2, r3
 800706e:	4b17      	ldr	r3, [pc, #92]	; (80070cc <xTaskPriorityInherit+0x108>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4313      	orrs	r3, r2
 8007074:	4a15      	ldr	r2, [pc, #84]	; (80070cc <xTaskPriorityInherit+0x108>)
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4a10      	ldr	r2, [pc, #64]	; (80070c8 <xTaskPriorityInherit+0x104>)
 8007086:	441a      	add	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fe f96e 	bl	8005370 <vListInsertEnd>
 8007094:	e004      	b.n	80070a0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007096:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <xTaskPriorityInherit+0x100>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070a0:	2301      	movs	r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e008      	b.n	80070b8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <xTaskPriorityInherit+0x100>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d201      	bcs.n	80070b8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070b8:	68fb      	ldr	r3, [r7, #12]
	}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000660 	.word	0x20000660
 80070c8:	20000664 	.word	0x20000664
 80070cc:	20000768 	.word	0x20000768

080070d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d06c      	beq.n	80071c0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <xTaskPriorityDisinherit+0xfc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d009      	beq.n	8007104 <xTaskPriorityDisinherit+0x34>
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	e7fe      	b.n	8007102 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <xTaskPriorityDisinherit+0x50>
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	e7fe      	b.n	800711e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007124:	1e5a      	subs	r2, r3, #1
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	429a      	cmp	r2, r3
 8007134:	d044      	beq.n	80071c0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713a:	2b00      	cmp	r3, #0
 800713c:	d140      	bne.n	80071c0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3304      	adds	r3, #4
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe f971 	bl	800542a <uxListRemove>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d115      	bne.n	800717a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007152:	491f      	ldr	r1, [pc, #124]	; (80071d0 <xTaskPriorityDisinherit+0x100>)
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <xTaskPriorityDisinherit+0xaa>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	2201      	movs	r2, #1
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43da      	mvns	r2, r3
 8007170:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <xTaskPriorityDisinherit+0x104>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4013      	ands	r3, r2
 8007176:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <xTaskPriorityDisinherit+0x104>)
 8007178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	f1c3 0207 	rsb	r2, r3, #7
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	2201      	movs	r2, #1
 8007194:	409a      	lsls	r2, r3
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <xTaskPriorityDisinherit+0x104>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4313      	orrs	r3, r2
 800719c:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <xTaskPriorityDisinherit+0x104>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <xTaskPriorityDisinherit+0x100>)
 80071ae:	441a      	add	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fe f8da 	bl	8005370 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c0:	697b      	ldr	r3, [r7, #20]
	}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000660 	.word	0x20000660
 80071d0:	20000664 	.word	0x20000664
 80071d4:	20000768 	.word	0x20000768

080071d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8086 	beq.w	80072fe <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d109      	bne.n	800720e <vTaskPriorityDisinheritAfterTimeout+0x36>
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	e7fe      	b.n	800720c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d902      	bls.n	800721e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e002      	b.n	8007224 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007222:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	429a      	cmp	r2, r3
 800722c:	d067      	beq.n	80072fe <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d162      	bne.n	80072fe <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007238:	4b33      	ldr	r3, [pc, #204]	; (8007308 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	429a      	cmp	r2, r3
 8007240:	d109      	bne.n	8007256 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	e7fe      	b.n	8007254 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	db04      	blt.n	8007274 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	f1c3 0207 	rsb	r2, r3, #7
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	6959      	ldr	r1, [r3, #20]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4a22      	ldr	r2, [pc, #136]	; (800730c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007284:	4413      	add	r3, r2
 8007286:	4299      	cmp	r1, r3
 8007288:	d101      	bne.n	800728e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d034      	beq.n	80072fe <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe f8c6 	bl	800542a <uxListRemove>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d115      	bne.n	80072d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	4918      	ldr	r1, [pc, #96]	; (800730c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	2201      	movs	r2, #1
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	43da      	mvns	r2, r3
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4013      	ands	r3, r2
 80072cc:	4a10      	ldr	r2, [pc, #64]	; (8007310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072ce:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	2201      	movs	r2, #1
 80072d6:	409a      	lsls	r2, r3
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4313      	orrs	r3, r2
 80072de:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4a07      	ldr	r2, [pc, #28]	; (800730c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80072f0:	441a      	add	r2, r3
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7fe f839 	bl	8005370 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072fe:	bf00      	nop
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000660 	.word	0x20000660
 800730c:	20000664 	.word	0x20000664
 8007310:	20000768 	.word	0x20000768

08007314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <pvTaskIncrementMutexHeldCount+0x24>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <pvTaskIncrementMutexHeldCount+0x24>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007326:	3201      	adds	r2, #1
 8007328:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800732a:	4b03      	ldr	r3, [pc, #12]	; (8007338 <pvTaskIncrementMutexHeldCount+0x24>)
 800732c:	681b      	ldr	r3, [r3, #0]
	}
 800732e:	4618      	mov	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20000660 	.word	0x20000660

0800733c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007346:	4b29      	ldr	r3, [pc, #164]	; (80073ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800734c:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe f869 	bl	800542a <uxListRemove>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	2201      	movs	r2, #1
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	43da      	mvns	r2, r3
 800736c:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4013      	ands	r3, r2
 8007372:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800737c:	d10a      	bne.n	8007394 <prvAddCurrentTaskToDelayedList+0x58>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	481a      	ldr	r0, [pc, #104]	; (80073f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800738e:	f7fd ffef 	bl	8005370 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007392:	e026      	b.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d209      	bcs.n	80073c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7fd fffd 	bl	80053b8 <vListInsert>
}
 80073be:	e010      	b.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <prvAddCurrentTaskToDelayedList+0xc4>)
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f7fd fff3 	bl	80053b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073d2:	4b0c      	ldr	r3, [pc, #48]	; (8007404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d202      	bcs.n	80073e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6013      	str	r3, [r2, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000764 	.word	0x20000764
 80073f0:	20000660 	.word	0x20000660
 80073f4:	20000768 	.word	0x20000768
 80073f8:	2000074c 	.word	0x2000074c
 80073fc:	2000071c 	.word	0x2000071c
 8007400:	20000718 	.word	0x20000718
 8007404:	20000780 	.word	0x20000780

08007408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3b04      	subs	r3, #4
 8007418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b04      	subs	r3, #4
 8007436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007438:	4a0c      	ldr	r2, [pc, #48]	; (800746c <pxPortInitialiseStack+0x64>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b14      	subs	r3, #20
 8007442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b04      	subs	r3, #4
 800744e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f06f 0202 	mvn.w	r2, #2
 8007456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3b20      	subs	r3, #32
 800745c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800745e:	68fb      	ldr	r3, [r7, #12]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	08007471 	.word	0x08007471

08007470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800747a:	4b11      	ldr	r3, [pc, #68]	; (80074c0 <prvTaskExitError+0x50>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007482:	d009      	beq.n	8007498 <prvTaskExitError+0x28>
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e7fe      	b.n	8007496 <prvTaskExitError+0x26>
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074aa:	bf00      	nop
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0fc      	beq.n	80074ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	2000000c 	.word	0x2000000c
	...

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800751a:	bf00      	nop
 800751c:	e000ed08 	.word	0xe000ed08

08007520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007526:	4b44      	ldr	r3, [pc, #272]	; (8007638 <xPortStartScheduler+0x118>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a44      	ldr	r2, [pc, #272]	; (800763c <xPortStartScheduler+0x11c>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d109      	bne.n	8007544 <xPortStartScheduler+0x24>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	e7fe      	b.n	8007542 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007544:	4b3c      	ldr	r3, [pc, #240]	; (8007638 <xPortStartScheduler+0x118>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a3d      	ldr	r2, [pc, #244]	; (8007640 <xPortStartScheduler+0x120>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d109      	bne.n	8007562 <xPortStartScheduler+0x42>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e7fe      	b.n	8007560 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007562:	4b38      	ldr	r3, [pc, #224]	; (8007644 <xPortStartScheduler+0x124>)
 8007564:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	22ff      	movs	r2, #255	; 0xff
 8007572:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007584:	b2da      	uxtb	r2, r3
 8007586:	4b30      	ldr	r3, [pc, #192]	; (8007648 <xPortStartScheduler+0x128>)
 8007588:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800758a:	4b30      	ldr	r3, [pc, #192]	; (800764c <xPortStartScheduler+0x12c>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007590:	e009      	b.n	80075a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007592:	4b2e      	ldr	r3, [pc, #184]	; (800764c <xPortStartScheduler+0x12c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <xPortStartScheduler+0x12c>)
 800759a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b80      	cmp	r3, #128	; 0x80
 80075b0:	d0ef      	beq.n	8007592 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075b2:	4b26      	ldr	r3, [pc, #152]	; (800764c <xPortStartScheduler+0x12c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f1c3 0307 	rsb	r3, r3, #7
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d009      	beq.n	80075d2 <xPortStartScheduler+0xb2>
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
 80075d0:	e7fe      	b.n	80075d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d2:	4b1e      	ldr	r3, [pc, #120]	; (800764c <xPortStartScheduler+0x12c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <xPortStartScheduler+0x12c>)
 80075da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <xPortStartScheduler+0x12c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075e4:	4a19      	ldr	r2, [pc, #100]	; (800764c <xPortStartScheduler+0x12c>)
 80075e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	b2da      	uxtb	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <xPortStartScheduler+0x130>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a16      	ldr	r2, [pc, #88]	; (8007650 <xPortStartScheduler+0x130>)
 80075f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075fc:	4b14      	ldr	r3, [pc, #80]	; (8007650 <xPortStartScheduler+0x130>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <xPortStartScheduler+0x130>)
 8007602:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007606:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007608:	f000 f8d6 	bl	80077b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <xPortStartScheduler+0x134>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007612:	f000 f8f5 	bl	8007800 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <xPortStartScheduler+0x138>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a0f      	ldr	r2, [pc, #60]	; (8007658 <xPortStartScheduler+0x138>)
 800761c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007620:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007622:	f7ff ff69 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007626:	f7ff fa75 	bl	8006b14 <vTaskSwitchContext>
	prvTaskExitError();
 800762a:	f7ff ff21 	bl	8007470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000ed00 	.word	0xe000ed00
 800763c:	410fc271 	.word	0x410fc271
 8007640:	410fc270 	.word	0x410fc270
 8007644:	e000e400 	.word	0xe000e400
 8007648:	2000078c 	.word	0x2000078c
 800764c:	20000790 	.word	0x20000790
 8007650:	e000ed20 	.word	0xe000ed20
 8007654:	2000000c 	.word	0x2000000c
 8007658:	e000ef34 	.word	0xe000ef34

0800765c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007674:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <vPortEnterCritical+0x54>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a0d      	ldr	r2, [pc, #52]	; (80076b0 <vPortEnterCritical+0x54>)
 800767c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <vPortEnterCritical+0x54>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10e      	bne.n	80076a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortEnterCritical+0x58>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <vPortEnterCritical+0x48>
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	e7fe      	b.n	80076a2 <vPortEnterCritical+0x46>
	}
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	2000000c 	.word	0x2000000c
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <vPortExitCritical+0x4c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <vPortExitCritical+0x22>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	e7fe      	b.n	80076d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <vPortExitCritical+0x4c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	4a08      	ldr	r2, [pc, #32]	; (8007704 <vPortExitCritical+0x4c>)
 80076e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <vPortExitCritical+0x4c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <vPortExitCritical+0x3e>
 80076ec:	2300      	movs	r3, #0
 80076ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000000c 	.word	0x2000000c
	...

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7ff f9e8 	bl	8006b14 <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007790:	f7ff f904 	bl	800699c <xTaskIncrementTick>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <SysTick_Handler+0x3c>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80077ac:	bf00      	nop
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <vPortSetupTimerInterrupt+0x34>)
 80077be:	2200      	movs	r2, #0
 80077c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortSetupTimerInterrupt+0x38>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vPortSetupTimerInterrupt+0x3c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a0a      	ldr	r2, [pc, #40]	; (80077f8 <vPortSetupTimerInterrupt+0x40>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	099b      	lsrs	r3, r3, #6
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <vPortSetupTimerInterrupt+0x44>)
 80077d6:	3b01      	subs	r3, #1
 80077d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077da:	4b04      	ldr	r3, [pc, #16]	; (80077ec <vPortSetupTimerInterrupt+0x34>)
 80077dc:	2207      	movs	r2, #7
 80077de:	601a      	str	r2, [r3, #0]
}
 80077e0:	bf00      	nop
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	e000e010 	.word	0xe000e010
 80077f0:	e000e018 	.word	0xe000e018
 80077f4:	20000000 	.word	0x20000000
 80077f8:	10624dd3 	.word	0x10624dd3
 80077fc:	e000e014 	.word	0xe000e014

08007800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007810 <vPortEnableVFP+0x10>
 8007804:	6801      	ldr	r1, [r0, #0]
 8007806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800780a:	6001      	str	r1, [r0, #0]
 800780c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800780e:	bf00      	nop
 8007810:	e000ed88 	.word	0xe000ed88

08007814 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800781a:	f3ef 8305 	mrs	r3, IPSR
 800781e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d913      	bls.n	800784e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007826:	4a16      	ldr	r2, [pc, #88]	; (8007880 <vPortValidateInterruptPriority+0x6c>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007830:	4b14      	ldr	r3, [pc, #80]	; (8007884 <vPortValidateInterruptPriority+0x70>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	7afa      	ldrb	r2, [r7, #11]
 8007836:	429a      	cmp	r2, r3
 8007838:	d209      	bcs.n	800784e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	e7fe      	b.n	800784c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <vPortValidateInterruptPriority+0x74>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007856:	4b0d      	ldr	r3, [pc, #52]	; (800788c <vPortValidateInterruptPriority+0x78>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d909      	bls.n	8007872 <vPortValidateInterruptPriority+0x5e>
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	e7fe      	b.n	8007870 <vPortValidateInterruptPriority+0x5c>
	}
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	e000e3f0 	.word	0xe000e3f0
 8007884:	2000078c 	.word	0x2000078c
 8007888:	e000ed0c 	.word	0xe000ed0c
 800788c:	20000790 	.word	0x20000790

08007890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800789c:	f7fe ffb2 	bl	8006804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a0:	4b57      	ldr	r3, [pc, #348]	; (8007a00 <pvPortMalloc+0x170>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078a8:	f000 f90c 	bl	8007ac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078ac:	4b55      	ldr	r3, [pc, #340]	; (8007a04 <pvPortMalloc+0x174>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 808c 	bne.w	80079d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01c      	beq.n	80078fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80078c0:	2208      	movs	r2, #8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d013      	beq.n	80078fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f023 0307 	bic.w	r3, r3, #7
 80078d8:	3308      	adds	r3, #8
 80078da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <pvPortMalloc+0x6a>
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e7fe      	b.n	80078f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d068      	beq.n	80079d2 <pvPortMalloc+0x142>
 8007900:	4b41      	ldr	r3, [pc, #260]	; (8007a08 <pvPortMalloc+0x178>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d863      	bhi.n	80079d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800790a:	4b40      	ldr	r3, [pc, #256]	; (8007a0c <pvPortMalloc+0x17c>)
 800790c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800790e:	4b3f      	ldr	r3, [pc, #252]	; (8007a0c <pvPortMalloc+0x17c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007914:	e004      	b.n	8007920 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	d903      	bls.n	8007932 <pvPortMalloc+0xa2>
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f1      	bne.n	8007916 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007932:	4b33      	ldr	r3, [pc, #204]	; (8007a00 <pvPortMalloc+0x170>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007938:	429a      	cmp	r2, r3
 800793a:	d04a      	beq.n	80079d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2208      	movs	r2, #8
 8007942:	4413      	add	r3, r2
 8007944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1ad2      	subs	r2, r2, r3
 8007956:	2308      	movs	r3, #8
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	429a      	cmp	r2, r3
 800795c:	d91e      	bls.n	800799c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800795e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	2b00      	cmp	r3, #0
 800796e:	d009      	beq.n	8007984 <pvPortMalloc+0xf4>
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	e7fe      	b.n	8007982 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007996:	69b8      	ldr	r0, [r7, #24]
 8007998:	f000 f8f6 	bl	8007b88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800799c:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <pvPortMalloc+0x178>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <pvPortMalloc+0x178>)
 80079a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <pvPortMalloc+0x178>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <pvPortMalloc+0x180>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d203      	bcs.n	80079be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <pvPortMalloc+0x178>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <pvPortMalloc+0x180>)
 80079bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <pvPortMalloc+0x174>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	431a      	orrs	r2, r3
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d2:	f7fe ff25 	bl	8006820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <pvPortMalloc+0x164>
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e7fe      	b.n	80079f2 <pvPortMalloc+0x162>
	return pvReturn;
 80079f4:	69fb      	ldr	r3, [r7, #28]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3728      	adds	r7, #40	; 0x28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	2000879c 	.word	0x2000879c
 8007a04:	200087a8 	.word	0x200087a8
 8007a08:	200087a0 	.word	0x200087a0
 8007a0c:	20008794 	.word	0x20008794
 8007a10:	200087a4 	.word	0x200087a4

08007a14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d046      	beq.n	8007ab4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a26:	2308      	movs	r3, #8
 8007a28:	425b      	negs	r3, r3
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	4b20      	ldr	r3, [pc, #128]	; (8007abc <vPortFree+0xa8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d109      	bne.n	8007a56 <vPortFree+0x42>
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e7fe      	b.n	8007a54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <vPortFree+0x5e>
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	e7fe      	b.n	8007a70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <vPortFree+0xa8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d019      	beq.n	8007ab4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d115      	bne.n	8007ab4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <vPortFree+0xa8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a98:	f7fe feb4 	bl	8006804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <vPortFree+0xac>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4a06      	ldr	r2, [pc, #24]	; (8007ac0 <vPortFree+0xac>)
 8007aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f000 f86c 	bl	8007b88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ab0:	f7fe feb6 	bl	8006820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ab4:	bf00      	nop
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	200087a8 	.word	0x200087a8
 8007ac0:	200087a0 	.word	0x200087a0

08007ac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <prvHeapInit+0xac>)
 8007ad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	3307      	adds	r3, #7
 8007ae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	4a1f      	ldr	r2, [pc, #124]	; (8007b70 <prvHeapInit+0xac>)
 8007af4:	4413      	add	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <prvHeapInit+0xb0>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b02:	4b1c      	ldr	r3, [pc, #112]	; (8007b74 <prvHeapInit+0xb0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b10:	2208      	movs	r2, #8
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <prvHeapInit+0xb4>)
 8007b24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b26:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <prvHeapInit+0xb4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <prvHeapInit+0xb4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvHeapInit+0xb4>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <prvHeapInit+0xb8>)
 8007b52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <prvHeapInit+0xbc>)
 8007b5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <prvHeapInit+0xc0>)
 8007b5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20000794 	.word	0x20000794
 8007b74:	20008794 	.word	0x20008794
 8007b78:	2000879c 	.word	0x2000879c
 8007b7c:	200087a4 	.word	0x200087a4
 8007b80:	200087a0 	.word	0x200087a0
 8007b84:	200087a8 	.word	0x200087a8

08007b88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b90:	4b28      	ldr	r3, [pc, #160]	; (8007c34 <prvInsertBlockIntoFreeList+0xac>)
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e002      	b.n	8007b9c <prvInsertBlockIntoFreeList+0x14>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d8f7      	bhi.n	8007b96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d108      	bne.n	8007bca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	441a      	add	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d118      	bne.n	8007c10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d00d      	beq.n	8007c06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	441a      	add	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e008      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <prvInsertBlockIntoFreeList+0xb0>)
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e003      	b.n	8007c18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d002      	beq.n	8007c26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c26:	bf00      	nop
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20008794 	.word	0x20008794
 8007c38:	2000879c 	.word	0x2000879c

08007c3c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f002 f96f 	bl	8009f34 <tcpip_send_msg_wait_sem>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007c68:	e001      	b.n	8007c6e <netconn_apimsg+0x32>
  }
  return err;
 8007c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	603a      	str	r2, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
 8007c84:	460b      	mov	r3, r1
 8007c86:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ff83 	bl	8008b98 <netconn_alloc>
 8007c92:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d054      	beq.n	8007d44 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007c9a:	79bb      	ldrb	r3, [r7, #6]
 8007c9c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4829      	ldr	r0, [pc, #164]	; (8007d50 <netconn_new_with_proto_and_callback+0xd8>)
 8007caa:	f7ff ffc7 	bl	8007c3c <netconn_apimsg>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8007cb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d043      	beq.n	8007d44 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <netconn_new_with_proto_and_callback+0x58>
 8007cc4:	4b23      	ldr	r3, [pc, #140]	; (8007d54 <netconn_new_with_proto_and_callback+0xdc>)
 8007cc6:	2289      	movs	r2, #137	; 0x89
 8007cc8:	4923      	ldr	r1, [pc, #140]	; (8007d58 <netconn_new_with_proto_and_callback+0xe0>)
 8007cca:	4824      	ldr	r0, [pc, #144]	; (8007d5c <netconn_new_with_proto_and_callback+0xe4>)
 8007ccc:	f00e ff5c 	bl	8016b88 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	3310      	adds	r3, #16
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f00e fdd7 	bl	8016888 <sys_mbox_valid>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <netconn_new_with_proto_and_callback+0x74>
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <netconn_new_with_proto_and_callback+0xdc>)
 8007ce2:	228a      	movs	r2, #138	; 0x8a
 8007ce4:	491e      	ldr	r1, [pc, #120]	; (8007d60 <netconn_new_with_proto_and_callback+0xe8>)
 8007ce6:	481d      	ldr	r0, [pc, #116]	; (8007d5c <netconn_new_with_proto_and_callback+0xe4>)
 8007ce8:	f00e ff4e 	bl	8016b88 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	3314      	adds	r3, #20
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f00e fdc9 	bl	8016888 <sys_mbox_valid>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <netconn_new_with_proto_and_callback+0x90>
 8007cfc:	4b15      	ldr	r3, [pc, #84]	; (8007d54 <netconn_new_with_proto_and_callback+0xdc>)
 8007cfe:	228c      	movs	r2, #140	; 0x8c
 8007d00:	4918      	ldr	r1, [pc, #96]	; (8007d64 <netconn_new_with_proto_and_callback+0xec>)
 8007d02:	4816      	ldr	r0, [pc, #88]	; (8007d5c <netconn_new_with_proto_and_callback+0xe4>)
 8007d04:	f00e ff40 	bl	8016b88 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f00e fe4c 	bl	80169aa <sys_sem_valid>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d105      	bne.n	8007d24 <netconn_new_with_proto_and_callback+0xac>
 8007d18:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <netconn_new_with_proto_and_callback+0xdc>)
 8007d1a:	228f      	movs	r2, #143	; 0x8f
 8007d1c:	4912      	ldr	r1, [pc, #72]	; (8007d68 <netconn_new_with_proto_and_callback+0xf0>)
 8007d1e:	480f      	ldr	r0, [pc, #60]	; (8007d5c <netconn_new_with_proto_and_callback+0xe4>)
 8007d20:	f00e ff32 	bl	8016b88 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	330c      	adds	r3, #12
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00e fe31 	bl	8016990 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	3310      	adds	r3, #16
 8007d32:	4618      	mov	r0, r3
 8007d34:	f00e fd0c 	bl	8016750 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d3a:	2007      	movs	r0, #7
 8007d3c:	f003 fcb2 	bl	800b6a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e000      	b.n	8007d46 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	; 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	08008b41 	.word	0x08008b41
 8007d54:	08017ff4 	.word	0x08017ff4
 8007d58:	08018028 	.word	0x08018028
 8007d5c:	0801804c 	.word	0x0801804c
 8007d60:	08018074 	.word	0x08018074
 8007d64:	0801808c 	.word	0x0801808c
 8007d68:	080180b0 	.word	0x080180b0

08007d6c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <netconn_delete+0x12>
    return ERR_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e016      	b.n	8007dac <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007d82:	2329      	movs	r3, #41	; 0x29
 8007d84:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007d86:	f107 0308 	add.w	r3, r7, #8
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4809      	ldr	r0, [pc, #36]	; (8007db4 <netconn_delete+0x48>)
 8007d8e:	f7ff ff55 	bl	8007c3c <netconn_apimsg>
 8007d92:	4603      	mov	r3, r0
 8007d94:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <netconn_delete+0x38>
    return err;
 8007d9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007da2:	e003      	b.n	8007dac <netconn_delete+0x40>
  }

  netconn_free(conn);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 ff67 	bl	8008c78 <netconn_free>

  return ERR_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	080090fd 	.word	0x080090fd

08007db8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d108      	bne.n	8007dde <netconn_bind+0x26>
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <netconn_bind+0x5c>)
 8007dce:	22ff      	movs	r2, #255	; 0xff
 8007dd0:	4911      	ldr	r1, [pc, #68]	; (8007e18 <netconn_bind+0x60>)
 8007dd2:	4812      	ldr	r0, [pc, #72]	; (8007e1c <netconn_bind+0x64>)
 8007dd4:	f00e fed8 	bl	8016b88 <iprintf>
 8007dd8:	f06f 030f 	mvn.w	r3, #15
 8007ddc:	e015      	b.n	8007e0a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8007de4:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <netconn_bind+0x68>)
 8007de6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007df0:	88fb      	ldrh	r3, [r7, #6]
 8007df2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	4619      	mov	r1, r3
 8007dfa:	480a      	ldr	r0, [pc, #40]	; (8007e24 <netconn_bind+0x6c>)
 8007dfc:	f7ff ff1e 	bl	8007c3c <netconn_apimsg>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8007e06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3728      	adds	r7, #40	; 0x28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	08017ff4 	.word	0x08017ff4
 8007e18:	0801812c 	.word	0x0801812c
 8007e1c:	0801804c 	.word	0x0801804c
 8007e20:	080262e4 	.word	0x080262e4
 8007e24:	08009301 	.word	0x08009301

08007e28 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <netconn_listen_with_backlog+0x26>
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <netconn_listen_with_backlog+0x48>)
 8007e3c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007e40:	490c      	ldr	r1, [pc, #48]	; (8007e74 <netconn_listen_with_backlog+0x4c>)
 8007e42:	480d      	ldr	r0, [pc, #52]	; (8007e78 <netconn_listen_with_backlog+0x50>)
 8007e44:	f00e fea0 	bl	8016b88 <iprintf>
 8007e48:	f06f 030f 	mvn.w	r3, #15
 8007e4c:	e00b      	b.n	8007e66 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007e52:	f107 0308 	add.w	r3, r7, #8
 8007e56:	4619      	mov	r1, r3
 8007e58:	4808      	ldr	r0, [pc, #32]	; (8007e7c <netconn_listen_with_backlog+0x54>)
 8007e5a:	f7ff feef 	bl	8007c3c <netconn_apimsg>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	08017ff4 	.word	0x08017ff4
 8007e74:	0801818c 	.word	0x0801818c
 8007e78:	0801804c 	.word	0x0801804c
 8007e7c:	080093c1 	.word	0x080093c1

08007e80 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d109      	bne.n	8007ea4 <netconn_accept+0x24>
 8007e90:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <netconn_accept+0xe4>)
 8007e92:	f240 128d 	movw	r2, #397	; 0x18d
 8007e96:	4934      	ldr	r1, [pc, #208]	; (8007f68 <netconn_accept+0xe8>)
 8007e98:	4834      	ldr	r0, [pc, #208]	; (8007f6c <netconn_accept+0xec>)
 8007e9a:	f00e fe75 	bl	8016b88 <iprintf>
 8007e9e:	f06f 030f 	mvn.w	r3, #15
 8007ea2:	e05b      	b.n	8007f5c <netconn_accept+0xdc>
  *new_conn = NULL;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d109      	bne.n	8007ec4 <netconn_accept+0x44>
 8007eb0:	4b2c      	ldr	r3, [pc, #176]	; (8007f64 <netconn_accept+0xe4>)
 8007eb2:	f240 128f 	movw	r2, #399	; 0x18f
 8007eb6:	492e      	ldr	r1, [pc, #184]	; (8007f70 <netconn_accept+0xf0>)
 8007eb8:	482c      	ldr	r0, [pc, #176]	; (8007f6c <netconn_accept+0xec>)
 8007eba:	f00e fe65 	bl	8016b88 <iprintf>
 8007ebe:	f06f 030f 	mvn.w	r3, #15
 8007ec2:	e04b      	b.n	8007f5c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007eca:	f113 0f0c 	cmn.w	r3, #12
 8007ece:	da03      	bge.n	8007ed8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ed6:	e041      	b.n	8007f5c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3314      	adds	r3, #20
 8007edc:	4618      	mov	r0, r3
 8007ede:	f00e fcd3 	bl	8016888 <sys_mbox_valid>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <netconn_accept+0x6e>
    return ERR_CLSD;
 8007ee8:	f06f 030e 	mvn.w	r3, #14
 8007eec:	e036      	b.n	8007f5c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f107 010c 	add.w	r1, r7, #12
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f00e fc6a 	bl	80167d2 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <netconn_accept+0x96>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2101      	movs	r1, #1
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <netconn_accept+0xf4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d102      	bne.n	8007f24 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8007f1e:	f06f 030c 	mvn.w	r3, #12
 8007f22:	e01b      	b.n	8007f5c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d114      	bne.n	8007f54 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00e      	beq.n	8007f4e <netconn_accept+0xce>
 8007f30:	f00e fdc6 	bl	8016ac0 <sys_arch_protect>
 8007f34:	6138      	str	r0, [r7, #16]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f3c:	f113 0f0c 	cmn.w	r3, #12
 8007f40:	db02      	blt.n	8007f48 <netconn_accept+0xc8>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	22f1      	movs	r2, #241	; 0xf1
 8007f46:	721a      	strb	r2, [r3, #8]
 8007f48:	6938      	ldr	r0, [r7, #16]
 8007f4a:	f00e fdc7 	bl	8016adc <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8007f4e:	f06f 030e 	mvn.w	r3, #14
 8007f52:	e003      	b.n	8007f5c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007f5a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	08017ff4 	.word	0x08017ff4
 8007f68:	080181ac 	.word	0x080181ac
 8007f6c:	0801804c 	.word	0x0801804c
 8007f70:	080181cc 	.word	0x080181cc
 8007f74:	2000c390 	.word	0x2000c390

08007f78 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d109      	bne.n	8007fa0 <netconn_recv_data+0x28>
 8007f8c:	4b5c      	ldr	r3, [pc, #368]	; (8008100 <netconn_recv_data+0x188>)
 8007f8e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007f92:	495c      	ldr	r1, [pc, #368]	; (8008104 <netconn_recv_data+0x18c>)
 8007f94:	485c      	ldr	r0, [pc, #368]	; (8008108 <netconn_recv_data+0x190>)
 8007f96:	f00e fdf7 	bl	8016b88 <iprintf>
 8007f9a:	f06f 030f 	mvn.w	r3, #15
 8007f9e:	e0aa      	b.n	80080f6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <netconn_recv_data+0x48>
 8007fac:	4b54      	ldr	r3, [pc, #336]	; (8008100 <netconn_recv_data+0x188>)
 8007fae:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007fb2:	4956      	ldr	r1, [pc, #344]	; (800810c <netconn_recv_data+0x194>)
 8007fb4:	4854      	ldr	r0, [pc, #336]	; (8008108 <netconn_recv_data+0x190>)
 8007fb6:	f00e fde7 	bl	8016b88 <iprintf>
 8007fba:	f06f 030f 	mvn.w	r3, #15
 8007fbe:	e09a      	b.n	80080f6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d115      	bne.n	8007ff8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3310      	adds	r3, #16
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f00e fc59 	bl	8016888 <sys_mbox_valid>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10d      	bne.n	8007ff8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f00e fc51 	bl	8016888 <sys_mbox_valid>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <netconn_recv_data+0x7a>
 8007fec:	f06f 030a 	mvn.w	r3, #10
 8007ff0:	e081      	b.n	80080f6 <netconn_recv_data+0x17e>
 8007ff2:	f06f 030e 	mvn.w	r3, #14
 8007ff6:	e07e      	b.n	80080f6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3310      	adds	r3, #16
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f00e fc43 	bl	8016888 <sys_mbox_valid>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <netconn_recv_data+0xa4>
 8008008:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <netconn_recv_data+0x188>)
 800800a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800800e:	4940      	ldr	r1, [pc, #256]	; (8008110 <netconn_recv_data+0x198>)
 8008010:	483d      	ldr	r0, [pc, #244]	; (8008108 <netconn_recv_data+0x190>)
 8008012:	f00e fdb9 	bl	8016b88 <iprintf>
 8008016:	f06f 030a 	mvn.w	r3, #10
 800801a:	e06c      	b.n	80080f6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008022:	f113 0f0c 	cmn.w	r3, #12
 8008026:	da03      	bge.n	8008030 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800802e:	e062      	b.n	80080f6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3310      	adds	r3, #16
 8008034:	f107 0120 	add.w	r1, r7, #32
 8008038:	2200      	movs	r2, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f00e fbc9 	bl	80167d2 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008048:	2b10      	cmp	r3, #16
 800804a:	d138      	bne.n	80080be <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	891b      	ldrh	r3, [r3, #8]
 800805a:	617b      	str	r3, [r7, #20]
 800805c:	e001      	b.n	8008062 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	4619      	mov	r1, r3
 8008068:	482a      	ldr	r0, [pc, #168]	; (8008114 <netconn_recv_data+0x19c>)
 800806a:	f7ff fde7 	bl	8007c3c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d120      	bne.n	80080b6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <netconn_recv_data+0x110>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	2200      	movs	r2, #0
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <netconn_recv_data+0x12a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80080a0:	e029      	b.n	80080f6 <netconn_recv_data+0x17e>
 80080a2:	f06f 030d 	mvn.w	r3, #13
 80080a6:	e026      	b.n	80080f6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80080a8:	2101      	movs	r1, #1
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f926 	bl	80082fc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80080b0:	f06f 030e 	mvn.w	r3, #14
 80080b4:	e01f      	b.n	80080f6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	891b      	ldrh	r3, [r3, #8]
 80080ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80080bc:	e00d      	b.n	80080da <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <netconn_recv_data+0x15a>
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <netconn_recv_data+0x188>)
 80080c6:	f240 223e 	movw	r2, #574	; 0x23e
 80080ca:	4913      	ldr	r1, [pc, #76]	; (8008118 <netconn_recv_data+0x1a0>)
 80080cc:	480e      	ldr	r0, [pc, #56]	; (8008108 <netconn_recv_data+0x190>)
 80080ce:	f00e fd5b 	bl	8016b88 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	891b      	ldrh	r3, [r3, #8]
 80080d8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <netconn_recv_data+0x176>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080e8:	2101      	movs	r1, #1
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80080ee:	6a3a      	ldr	r2, [r7, #32]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	08017ff4 	.word	0x08017ff4
 8008104:	080181ec 	.word	0x080181ec
 8008108:	0801804c 	.word	0x0801804c
 800810c:	0801820c 	.word	0x0801820c
 8008110:	08018228 	.word	0x08018228
 8008114:	08009545 	.word	0x08009545
 8008118:	08018248 	.word	0x08018248

0800811c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <netconn_recv+0x28>
 8008130:	4b31      	ldr	r3, [pc, #196]	; (80081f8 <netconn_recv+0xdc>)
 8008132:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008136:	4931      	ldr	r1, [pc, #196]	; (80081fc <netconn_recv+0xe0>)
 8008138:	4831      	ldr	r0, [pc, #196]	; (8008200 <netconn_recv+0xe4>)
 800813a:	f00e fd25 	bl	8016b88 <iprintf>
 800813e:	f06f 030f 	mvn.w	r3, #15
 8008142:	e054      	b.n	80081ee <netconn_recv+0xd2>
  *new_buf = NULL;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <netconn_recv+0x48>
 8008150:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <netconn_recv+0xdc>)
 8008152:	f240 2276 	movw	r2, #630	; 0x276
 8008156:	492b      	ldr	r1, [pc, #172]	; (8008204 <netconn_recv+0xe8>)
 8008158:	4829      	ldr	r0, [pc, #164]	; (8008200 <netconn_recv+0xe4>)
 800815a:	f00e fd15 	bl	8016b88 <iprintf>
 800815e:	f06f 030f 	mvn.w	r3, #15
 8008162:	e044      	b.n	80081ee <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800816c:	2b10      	cmp	r3, #16
 800816e:	d139      	bne.n	80081e4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008174:	2006      	movs	r0, #6
 8008176:	f003 fa43 	bl	800b600 <memp_malloc>
 800817a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d102      	bne.n	8008188 <netconn_recv+0x6c>
      return ERR_MEM;
 8008182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008186:	e032      	b.n	80081ee <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008188:	f107 030c 	add.w	r3, r7, #12
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff fef2 	bl	8007f78 <netconn_recv_data>
 8008194:	4603      	mov	r3, r0
 8008196:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 80081a0:	6979      	ldr	r1, [r7, #20]
 80081a2:	2006      	movs	r0, #6
 80081a4:	f003 fa7e 	bl	800b6a4 <memp_free>
      return err;
 80081a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081ac:	e01f      	b.n	80081ee <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d106      	bne.n	80081c2 <netconn_recv+0xa6>
 80081b4:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <netconn_recv+0xdc>)
 80081b6:	f240 228a 	movw	r2, #650	; 0x28a
 80081ba:	4913      	ldr	r1, [pc, #76]	; (8008208 <netconn_recv+0xec>)
 80081bc:	4810      	ldr	r0, [pc, #64]	; (8008200 <netconn_recv+0xe4>)
 80081be:	f00e fce3 	bl	8016b88 <iprintf>

    buf->p = p;
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2200      	movs	r2, #0
 80081d2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	e004      	b.n	80081ee <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff fec6 	bl	8007f78 <netconn_recv_data>
 80081ec:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	08017ff4 	.word	0x08017ff4
 80081fc:	080181ec 	.word	0x080181ec
 8008200:	0801804c 	.word	0x0801804c
 8008204:	0801820c 	.word	0x0801820c
 8008208:	08018254 	.word	0x08018254

0800820c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b08a      	sub	sp, #40	; 0x28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <netconn_write_partly+0x28>
 8008220:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <netconn_write_partly+0xdc>)
 8008222:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008226:	4931      	ldr	r1, [pc, #196]	; (80082ec <netconn_write_partly+0xe0>)
 8008228:	4831      	ldr	r0, [pc, #196]	; (80082f0 <netconn_write_partly+0xe4>)
 800822a:	f00e fcad 	bl	8016b88 <iprintf>
 800822e:	f06f 030f 	mvn.w	r3, #15
 8008232:	e054      	b.n	80082de <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800823c:	2b10      	cmp	r3, #16
 800823e:	d009      	beq.n	8008254 <netconn_write_partly+0x48>
 8008240:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <netconn_write_partly+0xdc>)
 8008242:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008246:	492b      	ldr	r1, [pc, #172]	; (80082f4 <netconn_write_partly+0xe8>)
 8008248:	4829      	ldr	r0, [pc, #164]	; (80082f0 <netconn_write_partly+0xe4>)
 800824a:	f00e fc9d 	bl	8016b88 <iprintf>
 800824e:	f06f 0305 	mvn.w	r3, #5
 8008252:	e044      	b.n	80082de <netconn_write_partly+0xd2>
  if (size == 0) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <netconn_write_partly+0x52>
    return ERR_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	e03f      	b.n	80082de <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	7f1b      	ldrb	r3, [r3, #28]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <netconn_write_partly+0x68>
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <netconn_write_partly+0x6c>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <netconn_write_partly+0x6e>
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <netconn_write_partly+0x86>
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800828c:	f06f 0305 	mvn.w	r3, #5
 8008290:	e025      	b.n	80082de <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80082a4:	f107 0310 	add.w	r3, r7, #16
 80082a8:	4619      	mov	r1, r3
 80082aa:	4813      	ldr	r0, [pc, #76]	; (80082f8 <netconn_write_partly+0xec>)
 80082ac:	f7ff fcc6 	bl	8007c3c <netconn_apimsg>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80082b6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10d      	bne.n	80082da <netconn_write_partly+0xce>
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <netconn_write_partly+0xce>
    if (dontblock) {
 80082c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e002      	b.n	80082da <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082da:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	08017ff4 	.word	0x08017ff4
 80082ec:	0801827c 	.word	0x0801827c
 80082f0:	0801804c 	.word	0x0801804c
 80082f4:	08018298 	.word	0x08018298
 80082f8:	08009925 	.word	0x08009925

080082fc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <netconn_close_shutdown+0x26>
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <netconn_close_shutdown+0x50>)
 8008310:	f44f 724a 	mov.w	r2, #808	; 0x328
 8008314:	490e      	ldr	r1, [pc, #56]	; (8008350 <netconn_close_shutdown+0x54>)
 8008316:	480f      	ldr	r0, [pc, #60]	; (8008354 <netconn_close_shutdown+0x58>)
 8008318:	f00e fc36 	bl	8016b88 <iprintf>
 800831c:	f06f 030f 	mvn.w	r3, #15
 8008320:	e00f      	b.n	8008342 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800832a:	2329      	movs	r3, #41	; 0x29
 800832c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	4619      	mov	r1, r3
 8008334:	4808      	ldr	r0, [pc, #32]	; (8008358 <netconn_close_shutdown+0x5c>)
 8008336:	f7ff fc81 	bl	8007c3c <netconn_apimsg>
 800833a:	4603      	mov	r3, r0
 800833c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800833e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	08017ff4 	.word	0x08017ff4
 8008350:	080182bc 	.word	0x080182bc
 8008354:	0801804c 	.word	0x0801804c
 8008358:	08009a85 	.word	0x08009a85

0800835c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008364:	2103      	movs	r1, #3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff ffc8 	bl	80082fc <netconn_close_shutdown>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d105      	bne.n	8008398 <recv_udp+0x20>
 800838c:	4b34      	ldr	r3, [pc, #208]	; (8008460 <recv_udp+0xe8>)
 800838e:	22b1      	movs	r2, #177	; 0xb1
 8008390:	4934      	ldr	r1, [pc, #208]	; (8008464 <recv_udp+0xec>)
 8008392:	4835      	ldr	r0, [pc, #212]	; (8008468 <recv_udp+0xf0>)
 8008394:	f00e fbf8 	bl	8016b88 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <recv_udp+0x32>
 800839e:	4b30      	ldr	r3, [pc, #192]	; (8008460 <recv_udp+0xe8>)
 80083a0:	22b2      	movs	r2, #178	; 0xb2
 80083a2:	4932      	ldr	r1, [pc, #200]	; (800846c <recv_udp+0xf4>)
 80083a4:	4830      	ldr	r0, [pc, #192]	; (8008468 <recv_udp+0xf0>)
 80083a6:	f00e fbef 	bl	8016b88 <iprintf>
  conn = (struct netconn *)arg;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <recv_udp+0x44>
    pbuf_free(p);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f003 fed7 	bl	800c168 <pbuf_free>
    return;
 80083ba:	e04d      	b.n	8008458 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d005      	beq.n	80083d2 <recv_udp+0x5a>
 80083c6:	4b26      	ldr	r3, [pc, #152]	; (8008460 <recv_udp+0xe8>)
 80083c8:	22ba      	movs	r2, #186	; 0xba
 80083ca:	4929      	ldr	r1, [pc, #164]	; (8008470 <recv_udp+0xf8>)
 80083cc:	4826      	ldr	r0, [pc, #152]	; (8008468 <recv_udp+0xf0>)
 80083ce:	f00e fbdb 	bl	8016b88 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3310      	adds	r3, #16
 80083d6:	4618      	mov	r0, r3
 80083d8:	f00e fa56 	bl	8016888 <sys_mbox_valid>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d103      	bne.n	80083ea <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f003 fec0 	bl	800c168 <pbuf_free>
    return;
 80083e8:	e036      	b.n	8008458 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083ea:	2006      	movs	r0, #6
 80083ec:	f003 f908 	bl	800b600 <memp_malloc>
 80083f0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d103      	bne.n	8008400 <recv_udp+0x88>
    pbuf_free(p);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f003 feb5 	bl	800c168 <pbuf_free>
    return;
 80083fe:	e02b      	b.n	8008458 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <recv_udp+0xa0>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	e000      	b.n	800841a <recv_udp+0xa2>
 8008418:	2300      	movs	r3, #0
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008422:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	891b      	ldrh	r3, [r3, #8]
 8008428:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	3310      	adds	r3, #16
 800842e:	69b9      	ldr	r1, [r7, #24]
 8008430:	4618      	mov	r0, r3
 8008432:	f00e f9b4 	bl	801679e <sys_mbox_trypost>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <recv_udp+0xcc>
    netbuf_delete(buf);
 800843c:	69b8      	ldr	r0, [r7, #24]
 800843e:	f001 fbc9 	bl	8009bd4 <netbuf_delete>
    return;
 8008442:	e009      	b.n	8008458 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <recv_udp+0xe0>
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	8afa      	ldrh	r2, [r7, #22]
 8008452:	2100      	movs	r1, #0
 8008454:	69f8      	ldr	r0, [r7, #28]
 8008456:	4798      	blx	r3
  }
}
 8008458:	3720      	adds	r7, #32
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	080182d8 	.word	0x080182d8
 8008464:	0801830c 	.word	0x0801830c
 8008468:	08018330 	.word	0x08018330
 800846c:	08018358 	.word	0x08018358
 8008470:	08018378 	.word	0x08018378

08008474 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d105      	bne.n	8008494 <recv_tcp+0x20>
 8008488:	4b39      	ldr	r3, [pc, #228]	; (8008570 <recv_tcp+0xfc>)
 800848a:	22f9      	movs	r2, #249	; 0xf9
 800848c:	4939      	ldr	r1, [pc, #228]	; (8008574 <recv_tcp+0x100>)
 800848e:	483a      	ldr	r0, [pc, #232]	; (8008578 <recv_tcp+0x104>)
 8008490:	f00e fb7a 	bl	8016b88 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <recv_tcp+0x32>
 800849a:	4b35      	ldr	r3, [pc, #212]	; (8008570 <recv_tcp+0xfc>)
 800849c:	22fa      	movs	r2, #250	; 0xfa
 800849e:	4937      	ldr	r1, [pc, #220]	; (800857c <recv_tcp+0x108>)
 80084a0:	4835      	ldr	r0, [pc, #212]	; (8008578 <recv_tcp+0x104>)
 80084a2:	f00e fb71 	bl	8016b88 <iprintf>
  conn = (struct netconn *)arg;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <recv_tcp+0x42>
    return ERR_VAL;
 80084b0:	f06f 0305 	mvn.w	r3, #5
 80084b4:	e057      	b.n	8008566 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d006      	beq.n	80084ce <recv_tcp+0x5a>
 80084c0:	4b2b      	ldr	r3, [pc, #172]	; (8008570 <recv_tcp+0xfc>)
 80084c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084c6:	492e      	ldr	r1, [pc, #184]	; (8008580 <recv_tcp+0x10c>)
 80084c8:	482b      	ldr	r0, [pc, #172]	; (8008578 <recv_tcp+0x104>)
 80084ca:	f00e fb5d 	bl	8016b88 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	3310      	adds	r3, #16
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00e f9d8 	bl	8016888 <sys_mbox_valid>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10d      	bne.n	80084fa <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d008      	beq.n	80084f6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	891b      	ldrh	r3, [r3, #8]
 80084e8:	4619      	mov	r1, r3
 80084ea:	68b8      	ldr	r0, [r7, #8]
 80084ec:	f004 fd38 	bl	800cf60 <tcp_recved>
      pbuf_free(p);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f003 fe39 	bl	800c168 <pbuf_free>
    }
    return ERR_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e035      	b.n	8008566 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80084fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d011      	beq.n	8008526 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00e      	beq.n	8008526 <recv_tcp+0xb2>
 8008508:	f00e fada 	bl	8016ac0 <sys_arch_protect>
 800850c:	6178      	str	r0, [r7, #20]
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008514:	f113 0f0c 	cmn.w	r3, #12
 8008518:	db02      	blt.n	8008520 <recv_tcp+0xac>
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	721a      	strb	r2, [r3, #8]
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f00e fadb 	bl	8016adc <sys_arch_unprotect>
  }

  if (p != NULL) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <recv_tcp+0xc0>
    len = p->tot_len;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	891b      	ldrh	r3, [r3, #8]
 8008530:	83fb      	strh	r3, [r7, #30]
 8008532:	e001      	b.n	8008538 <recv_tcp+0xc4>
  } else {
    len = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	3310      	adds	r3, #16
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	4618      	mov	r0, r3
 8008540:	f00e f92d 	bl	801679e <sys_mbox_trypost>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854e:	e00a      	b.n	8008566 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <recv_tcp+0xf0>
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	8bfa      	ldrh	r2, [r7, #30]
 800855e:	2100      	movs	r1, #0
 8008560:	69b8      	ldr	r0, [r7, #24]
 8008562:	4798      	blx	r3
  }

  return ERR_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3720      	adds	r7, #32
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	080182d8 	.word	0x080182d8
 8008574:	08018398 	.word	0x08018398
 8008578:	08018330 	.word	0x08018330
 800857c:	080183bc 	.word	0x080183bc
 8008580:	080183dc 	.word	0x080183dc

08008584 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <poll_tcp+0x22>
 8008598:	4b29      	ldr	r3, [pc, #164]	; (8008640 <poll_tcp+0xbc>)
 800859a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800859e:	4929      	ldr	r1, [pc, #164]	; (8008644 <poll_tcp+0xc0>)
 80085a0:	4829      	ldr	r0, [pc, #164]	; (8008648 <poll_tcp+0xc4>)
 80085a2:	f00e faf1 	bl	8016b88 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d104      	bne.n	80085b8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80085ae:	2101      	movs	r1, #1
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 f813 	bl	80095dc <lwip_netconn_do_writemore>
 80085b6:	e016      	b.n	80085e6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d112      	bne.n	80085e6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <poll_tcp+0x5a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	7a5b      	ldrb	r3, [r3, #9]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	7a5a      	ldrb	r2, [r3, #9]
 80085d8:	3a01      	subs	r2, #1
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80085de:	2101      	movs	r1, #1
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fc13 	bl	8008e0c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7f1b      	ldrb	r3, [r3, #28]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d021      	beq.n	8008636 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01d      	beq.n	8008636 <poll_tcp+0xb2>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008602:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008606:	d316      	bcc.n	8008636 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008610:	2b04      	cmp	r3, #4
 8008612:	d810      	bhi.n	8008636 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	7f1b      	ldrb	r3, [r3, #28]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	b2da      	uxtb	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <poll_tcp+0xb2>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862e:	2200      	movs	r2, #0
 8008630:	2102      	movs	r1, #2
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	080182d8 	.word	0x080182d8
 8008644:	080183fc 	.word	0x080183fc
 8008648:	08018330 	.word	0x08018330

0800864c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <sent_tcp+0x26>
 8008664:	4b20      	ldr	r3, [pc, #128]	; (80086e8 <sent_tcp+0x9c>)
 8008666:	f240 1261 	movw	r2, #353	; 0x161
 800866a:	4920      	ldr	r1, [pc, #128]	; (80086ec <sent_tcp+0xa0>)
 800866c:	4820      	ldr	r0, [pc, #128]	; (80086f0 <sent_tcp+0xa4>)
 800866e:	f00e fa8b 	bl	8016b88 <iprintf>

  if (conn) {
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d032      	beq.n	80086de <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d104      	bne.n	800868a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008680:	2101      	movs	r1, #1
 8008682:	6978      	ldr	r0, [r7, #20]
 8008684:	f000 ffaa 	bl	80095dc <lwip_netconn_do_writemore>
 8008688:	e007      	b.n	800869a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b04      	cmp	r3, #4
 8008690:	d103      	bne.n	800869a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008692:	2101      	movs	r1, #1
 8008694:	6978      	ldr	r0, [r7, #20]
 8008696:	f000 fbb9 	bl	8008e0c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01d      	beq.n	80086de <sent_tcp+0x92>
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086aa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80086ae:	d316      	bcc.n	80086de <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d810      	bhi.n	80086de <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	7f1b      	ldrb	r3, [r3, #28]
 80086c0:	f023 0310 	bic.w	r3, r3, #16
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <sent_tcp+0x92>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	2102      	movs	r1, #2
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	080182d8 	.word	0x080182d8
 80086ec:	080183fc 	.word	0x080183fc
 80086f0:	08018330 	.word	0x08018330

080086f4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08a      	sub	sp, #40	; 0x28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <err_tcp+0x24>
 800870a:	4b6c      	ldr	r3, [pc, #432]	; (80088bc <err_tcp+0x1c8>)
 800870c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008710:	496b      	ldr	r1, [pc, #428]	; (80088c0 <err_tcp+0x1cc>)
 8008712:	486c      	ldr	r0, [pc, #432]	; (80088c4 <err_tcp+0x1d0>)
 8008714:	f00e fa38 	bl	8016b88 <iprintf>

  conn->pcb.tcp = NULL;
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	2200      	movs	r2, #0
 800872a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800872c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008730:	2b04      	cmp	r3, #4
 8008732:	d114      	bne.n	800875e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <err_tcp+0x7c>
 800873e:	f00e f9bf 	bl	8016ac0 <sys_arch_protect>
 8008742:	61b8      	str	r0, [r7, #24]
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800874a:	f113 0f0c 	cmn.w	r3, #12
 800874e:	db02      	blt.n	8008756 <err_tcp+0x62>
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	2200      	movs	r2, #0
 8008754:	721a      	strb	r2, [r3, #8]
 8008756:	69b8      	ldr	r0, [r7, #24]
 8008758:	f00e f9c0 	bl	8016adc <sys_arch_unprotect>
 800875c:	e008      	b.n	8008770 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800875e:	f00e f9af 	bl	8016ac0 <sys_arch_protect>
 8008762:	61f8      	str	r0, [r7, #28]
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	721a      	strb	r2, [r3, #8]
 800876a:	69f8      	ldr	r0, [r7, #28]
 800876c:	f00e f9b6 	bl	8016adc <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d005      	beq.n	8008784 <err_tcp+0x90>
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	2200      	movs	r2, #0
 800877e:	2104      	movs	r1, #4
 8008780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008782:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <err_tcp+0xa4>
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	2200      	movs	r2, #0
 8008792:	2100      	movs	r1, #0
 8008794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008796:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <err_tcp+0xb8>
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	2200      	movs	r2, #0
 80087a6:	2102      	movs	r1, #2
 80087a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087aa:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	3310      	adds	r3, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f00e f869 	bl	8016888 <sys_mbox_valid>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	3310      	adds	r3, #16
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f00d ffeb 	bl	801679e <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	3314      	adds	r3, #20
 80087cc:	4618      	mov	r0, r3
 80087ce:	f00e f85b 	bl	8016888 <sys_mbox_valid>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	3314      	adds	r3, #20
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f00d ffdd 	bl	801679e <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80087e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d007      	beq.n	80087fc <err_tcp+0x108>
 80087ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d003      	beq.n	80087fc <err_tcp+0x108>
 80087f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d14d      	bne.n	8008898 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	7f1b      	ldrb	r3, [r3, #28]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	7f1b      	ldrb	r3, [r3, #28]
 8008814:	f023 0304 	bic.w	r3, r3, #4
 8008818:	b2da      	uxtb	r2, r3
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d145      	bne.n	80088b0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <err_tcp+0x146>
 800882c:	4b23      	ldr	r3, [pc, #140]	; (80088bc <err_tcp+0x1c8>)
 800882e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008832:	4925      	ldr	r1, [pc, #148]	; (80088c8 <err_tcp+0x1d4>)
 8008834:	4823      	ldr	r0, [pc, #140]	; (80088c4 <err_tcp+0x1d0>)
 8008836:	f00e f9a7 	bl	8016b88 <iprintf>
      conn->current_msg->err = err;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800884c:	6938      	ldr	r0, [r7, #16]
 800884e:	f00e f8ac 	bl	80169aa <sys_sem_valid>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <err_tcp+0x172>
 8008858:	4b18      	ldr	r3, [pc, #96]	; (80088bc <err_tcp+0x1c8>)
 800885a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800885e:	491b      	ldr	r1, [pc, #108]	; (80088cc <err_tcp+0x1d8>)
 8008860:	4818      	ldr	r0, [pc, #96]	; (80088c4 <err_tcp+0x1d0>)
 8008862:	f00e f991 	bl	8016b88 <iprintf>
      conn->current_msg = NULL;
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	2200      	movs	r2, #0
 800886a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00e      	beq.n	8008890 <err_tcp+0x19c>
 8008872:	f00e f925 	bl	8016ac0 <sys_arch_protect>
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800887e:	f113 0f0c 	cmn.w	r3, #12
 8008882:	db02      	blt.n	800888a <err_tcp+0x196>
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	721a      	strb	r2, [r3, #8]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f00e f926 	bl	8016adc <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008890:	6938      	ldr	r0, [r7, #16]
 8008892:	f00e f870 	bl	8016976 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008896:	e00b      	b.n	80088b0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <err_tcp+0x1be>
 80088a0:	4b06      	ldr	r3, [pc, #24]	; (80088bc <err_tcp+0x1c8>)
 80088a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80088a6:	490a      	ldr	r1, [pc, #40]	; (80088d0 <err_tcp+0x1dc>)
 80088a8:	4806      	ldr	r0, [pc, #24]	; (80088c4 <err_tcp+0x1d0>)
 80088aa:	f00e f96d 	bl	8016b88 <iprintf>
  }
}
 80088ae:	e000      	b.n	80088b2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 80088b0:	bf00      	nop
}
 80088b2:	bf00      	nop
 80088b4:	3728      	adds	r7, #40	; 0x28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	080182d8 	.word	0x080182d8
 80088c0:	080183fc 	.word	0x080183fc
 80088c4:	08018330 	.word	0x08018330
 80088c8:	0801840c 	.word	0x0801840c
 80088cc:	08018428 	.word	0x08018428
 80088d0:	08018444 	.word	0x08018444

080088d4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f005 f92b 	bl	800db40 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80088ea:	490a      	ldr	r1, [pc, #40]	; (8008914 <setup_tcp+0x40>)
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f005 f939 	bl	800db64 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80088f2:	4909      	ldr	r1, [pc, #36]	; (8008918 <setup_tcp+0x44>)
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f005 f957 	bl	800dba8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80088fa:	2202      	movs	r2, #2
 80088fc:	4907      	ldr	r1, [pc, #28]	; (800891c <setup_tcp+0x48>)
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f005 f9ac 	bl	800dc5c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008904:	4906      	ldr	r1, [pc, #24]	; (8008920 <setup_tcp+0x4c>)
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f005 f96e 	bl	800dbe8 <tcp_err>
}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	08008475 	.word	0x08008475
 8008918:	0800864d 	.word	0x0800864d
 800891c:	08008585 	.word	0x08008585
 8008920:	080086f5 	.word	0x080086f5

08008924 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <accept_function+0x1e>
    return ERR_VAL;
 800893c:	f06f 0305 	mvn.w	r3, #5
 8008940:	e08d      	b.n	8008a5e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3314      	adds	r3, #20
 8008946:	4618      	mov	r0, r3
 8008948:	f00d ff9e 	bl	8016888 <sys_mbox_valid>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008952:	f06f 0305 	mvn.w	r3, #5
 8008956:	e082      	b.n	8008a5e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d115      	bne.n	800898a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3314      	adds	r3, #20
 8008962:	4941      	ldr	r1, [pc, #260]	; (8008a68 <accept_function+0x144>)
 8008964:	4618      	mov	r0, r3
 8008966:	f00d ff1a 	bl	801679e <sys_mbox_trypost>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <accept_function+0x60>
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	69f8      	ldr	r0, [r7, #28]
 8008982:	4798      	blx	r3
    }
    return ERR_VAL;
 8008984:	f06f 0305 	mvn.w	r3, #5
 8008988:	e069      	b.n	8008a5e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f000 f8ff 	bl	8008b98 <netconn_alloc>
 800899a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d115      	bne.n	80089ce <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	3314      	adds	r3, #20
 80089a6:	4930      	ldr	r1, [pc, #192]	; (8008a68 <accept_function+0x144>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f00d fef8 	bl	801679e <sys_mbox_trypost>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d109      	bne.n	80089c8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <accept_function+0xa4>
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	69f8      	ldr	r0, [r7, #28]
 80089c6:	4798      	blx	r3
    }
    return ERR_MEM;
 80089c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089cc:	e047      	b.n	8008a5e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80089d4:	69b8      	ldr	r0, [r7, #24]
 80089d6:	f7ff ff7d 	bl	80088d4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	79fa      	ldrb	r2, [r7, #7]
 80089de:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	3314      	adds	r3, #20
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00d fed9 	bl	801679e <sys_mbox_trypost>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02a      	beq.n	8008a48 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80089f8:	2100      	movs	r1, #0
 80089fa:	6978      	ldr	r0, [r7, #20]
 80089fc:	f005 f8a0 	bl	800db40 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008a00:	2100      	movs	r1, #0
 8008a02:	6978      	ldr	r0, [r7, #20]
 8008a04:	f005 f8ae 	bl	800db64 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6978      	ldr	r0, [r7, #20]
 8008a0c:	f005 f8cc 	bl	800dba8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008a10:	2200      	movs	r2, #0
 8008a12:	2100      	movs	r1, #0
 8008a14:	6978      	ldr	r0, [r7, #20]
 8008a16:	f005 f921 	bl	800dc5c <tcp_poll>
    tcp_err(pcb, NULL);
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6978      	ldr	r0, [r7, #20]
 8008a1e:	f005 f8e3 	bl	800dbe8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2200      	movs	r2, #0
 8008a26:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	3310      	adds	r3, #16
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f00d fe8f 	bl	8016750 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	3310      	adds	r3, #16
 8008a36:	4618      	mov	r0, r3
 8008a38:	f00d ff37 	bl	80168aa <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008a3c:	69b8      	ldr	r0, [r7, #24]
 8008a3e:	f000 f91b 	bl	8008c78 <netconn_free>
    return ERR_MEM;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a46:	e00a      	b.n	8008a5e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d005      	beq.n	8008a5c <accept_function+0x138>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	69f8      	ldr	r0, [r7, #28]
 8008a5a:	4798      	blx	r3
  }

  return ERR_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000c390 	.word	0x2000c390

08008a6c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <pcb_new+0x24>
 8008a82:	4b2b      	ldr	r3, [pc, #172]	; (8008b30 <pcb_new+0xc4>)
 8008a84:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008a88:	492a      	ldr	r1, [pc, #168]	; (8008b34 <pcb_new+0xc8>)
 8008a8a:	482b      	ldr	r0, [pc, #172]	; (8008b38 <pcb_new+0xcc>)
 8008a8c:	f00e f87c 	bl	8016b88 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a9a:	2b10      	cmp	r3, #16
 8008a9c:	d022      	beq.n	8008ae4 <pcb_new+0x78>
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d133      	bne.n	8008b0a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681c      	ldr	r4, [r3, #0]
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f009 fd12 	bl	80124d2 <udp_new_ip_type>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d02a      	beq.n	8008b12 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b22      	cmp	r3, #34	; 0x22
 8008ac4:	d104      	bne.n	8008ad0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6858      	ldr	r0, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	4917      	ldr	r1, [pc, #92]	; (8008b3c <pcb_new+0xd0>)
 8008ade:	f009 fc9d 	bl	801241c <udp_recv>
    }
    break;
 8008ae2:	e016      	b.n	8008b12 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681c      	ldr	r4, [r3, #0]
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f005 f81a 	bl	800db24 <tcp_new_ip_type>
 8008af0:	4603      	mov	r3, r0
 8008af2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fee6 	bl	80088d4 <setup_tcp>
    }
    break;
 8008b08:	e005      	b.n	8008b16 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	22fa      	movs	r2, #250	; 0xfa
 8008b0e:	711a      	strb	r2, [r3, #4]
    return;
 8008b10:	e00a      	b.n	8008b28 <pcb_new+0xbc>
    break;
 8008b12:	bf00      	nop
 8008b14:	e000      	b.n	8008b18 <pcb_new+0xac>
    break;
 8008b16:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	22ff      	movs	r2, #255	; 0xff
 8008b26:	711a      	strb	r2, [r3, #4]
  }
}
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd90      	pop	{r4, r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	080182d8 	.word	0x080182d8
 8008b34:	08018460 	.word	0x08018460
 8008b38:	08018330 	.word	0x08018330
 8008b3c:	08008379 	.word	0x08008379

08008b40 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff ff85 	bl	8008a6c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d012      	beq.n	8008b90 <lwip_netconn_do_newconn+0x50>
 8008b6a:	f00d ffa9 	bl	8016ac0 <sys_arch_protect>
 8008b6e:	60b8      	str	r0, [r7, #8]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b78:	f113 0f0c 	cmn.w	r3, #12
 8008b7c:	db05      	blt.n	8008b8a <lwip_netconn_do_newconn+0x4a>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008b88:	721a      	strb	r2, [r3, #8]
 8008b8a:	68b8      	ldr	r0, [r7, #8]
 8008b8c:	f00d ffa6 	bl	8016adc <sys_arch_unprotect>
}
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008ba4:	2007      	movs	r0, #7
 8008ba6:	f002 fd2b 	bl	800b600 <memp_malloc>
 8008baa:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <netconn_alloc+0x1e>
    return NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e055      	b.n	8008c62 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	79fa      	ldrb	r2, [r7, #7]
 8008bc0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d004      	beq.n	8008bdc <netconn_alloc+0x44>
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d105      	bne.n	8008be2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008bd6:	2306      	movs	r3, #6
 8008bd8:	60fb      	str	r3, [r7, #12]
    break;
 8008bda:	e00a      	b.n	8008bf2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008bdc:	2306      	movs	r3, #6
 8008bde:	60fb      	str	r3, [r7, #12]
    break;
 8008be0:	e007      	b.n	8008bf2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008be2:	4b22      	ldr	r3, [pc, #136]	; (8008c6c <netconn_alloc+0xd4>)
 8008be4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008be8:	4921      	ldr	r1, [pc, #132]	; (8008c70 <netconn_alloc+0xd8>)
 8008bea:	4822      	ldr	r0, [pc, #136]	; (8008c74 <netconn_alloc+0xdc>)
 8008bec:	f00d ffcc 	bl	8016b88 <iprintf>
    goto free_and_return;
 8008bf0:	e032      	b.n	8008c58 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3310      	adds	r3, #16
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f00d fd87 	bl	801670c <sys_mbox_new>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d128      	bne.n	8008c56 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	330c      	adds	r3, #12
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f00d fe5a 	bl	80168c4 <sys_sem_new>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3310      	adds	r3, #16
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f00d fd98 	bl	8016750 <sys_mbox_free>
    goto free_and_return;
 8008c20:	e01a      	b.n	8008c58 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3314      	adds	r3, #20
 8008c26:	4618      	mov	r0, r3
 8008c28:	f00d fe3f 	bl	80168aa <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c38:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	771a      	strb	r2, [r3, #28]
  return conn;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	e005      	b.n	8008c62 <netconn_alloc+0xca>
    goto free_and_return;
 8008c56:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	2007      	movs	r0, #7
 8008c5c:	f002 fd22 	bl	800b6a4 <memp_free>
  return NULL;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	080182d8 	.word	0x080182d8
 8008c70:	08018480 	.word	0x08018480
 8008c74:	08018330 	.word	0x08018330

08008c78 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d006      	beq.n	8008c96 <netconn_free+0x1e>
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <netconn_free+0x80>)
 8008c8a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008c8e:	491b      	ldr	r1, [pc, #108]	; (8008cfc <netconn_free+0x84>)
 8008c90:	481b      	ldr	r0, [pc, #108]	; (8008d00 <netconn_free+0x88>)
 8008c92:	f00d ff79 	bl	8016b88 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3310      	adds	r3, #16
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f00d fdf4 	bl	8016888 <sys_mbox_valid>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d006      	beq.n	8008cb4 <netconn_free+0x3c>
 8008ca6:	4b14      	ldr	r3, [pc, #80]	; (8008cf8 <netconn_free+0x80>)
 8008ca8:	f240 22e2 	movw	r2, #738	; 0x2e2
 8008cac:	4915      	ldr	r1, [pc, #84]	; (8008d04 <netconn_free+0x8c>)
 8008cae:	4814      	ldr	r0, [pc, #80]	; (8008d00 <netconn_free+0x88>)
 8008cb0:	f00d ff6a 	bl	8016b88 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f00d fde5 	bl	8016888 <sys_mbox_valid>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d006      	beq.n	8008cd2 <netconn_free+0x5a>
 8008cc4:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <netconn_free+0x80>)
 8008cc6:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008cca:	490f      	ldr	r1, [pc, #60]	; (8008d08 <netconn_free+0x90>)
 8008ccc:	480c      	ldr	r0, [pc, #48]	; (8008d00 <netconn_free+0x88>)
 8008cce:	f00d ff5b 	bl	8016b88 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	330c      	adds	r3, #12
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f00d fe5a 	bl	8016990 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f00d fe73 	bl	80169cc <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	2007      	movs	r0, #7
 8008cea:	f002 fcdb 	bl	800b6a4 <memp_free>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	080182d8 	.word	0x080182d8
 8008cfc:	080184a8 	.word	0x080184a8
 8008d00:	08018330 	.word	0x08018330
 8008d04:	080184d8 	.word	0x080184d8
 8008d08:	08018514 	.word	0x08018514

08008d0c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3310      	adds	r3, #16
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f00d fdb5 	bl	8016888 <sys_mbox_valid>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d035      	beq.n	8008d90 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d24:	e01e      	b.n	8008d64 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d2e:	2b10      	cmp	r3, #16
 8008d30:	d114      	bne.n	8008d5c <netconn_drain+0x50>
        if (mem != NULL) {
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d015      	beq.n	8008d64 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	891b      	ldrh	r3, [r3, #8]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f004 f906 	bl	800cf60 <tcp_recved>
          }
          pbuf_free(p);
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f003 fa07 	bl	800c168 <pbuf_free>
 8008d5a:	e003      	b.n	8008d64 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 ff38 	bl	8009bd4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3310      	adds	r3, #16
 8008d68:	f107 020c 	add.w	r2, r7, #12
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f00d fd6e 	bl	8016850 <sys_arch_mbox_tryfetch>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7a:	d1d4      	bne.n	8008d26 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3310      	adds	r3, #16
 8008d80:	4618      	mov	r0, r3
 8008d82:	f00d fce5 	bl	8016750 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3310      	adds	r3, #16
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f00d fd8d 	bl	80168aa <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3314      	adds	r3, #20
 8008d94:	4618      	mov	r0, r3
 8008d96:	f00d fd77 	bl	8016888 <sys_mbox_valid>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02e      	beq.n	8008dfe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008da0:	e017      	b.n	8008dd2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <netconn_drain+0xfc>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d013      	beq.n	8008dd2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8008dae:	6938      	ldr	r0, [r7, #16]
 8008db0:	f7ff ffac 	bl	8008d0c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d007      	beq.n	8008dcc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f003 ff27 	bl	800cc14 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8008dcc:	6938      	ldr	r0, [r7, #16]
 8008dce:	f7ff ff53 	bl	8008c78 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3314      	adds	r3, #20
 8008dd6:	f107 020c 	add.w	r2, r7, #12
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f00d fd37 	bl	8016850 <sys_arch_mbox_tryfetch>
 8008de2:	4603      	mov	r3, r0
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de8:	d1db      	bne.n	8008da2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3314      	adds	r3, #20
 8008dee:	4618      	mov	r0, r3
 8008df0:	f00d fcae 	bl	8016750 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3314      	adds	r3, #20
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f00d fd56 	bl	80168aa <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008dfe:	bf00      	nop
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	2000c390 	.word	0x2000c390

08008e0c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <lwip_netconn_do_close_internal+0x24>
 8008e22:	4baa      	ldr	r3, [pc, #680]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8008e24:	f240 3243 	movw	r2, #835	; 0x343
 8008e28:	49a9      	ldr	r1, [pc, #676]	; (80090d0 <lwip_netconn_do_close_internal+0x2c4>)
 8008e2a:	48aa      	ldr	r0, [pc, #680]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e2c:	f00d feac 	bl	8016b88 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e38:	2b10      	cmp	r3, #16
 8008e3a:	d006      	beq.n	8008e4a <lwip_netconn_do_close_internal+0x3e>
 8008e3c:	4ba3      	ldr	r3, [pc, #652]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8008e3e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8008e42:	49a5      	ldr	r1, [pc, #660]	; (80090d8 <lwip_netconn_do_close_internal+0x2cc>)
 8008e44:	48a3      	ldr	r0, [pc, #652]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e46:	f00d fe9f 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d006      	beq.n	8008e60 <lwip_netconn_do_close_internal+0x54>
 8008e52:	4b9e      	ldr	r3, [pc, #632]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8008e54:	f240 3245 	movw	r2, #837	; 0x345
 8008e58:	49a0      	ldr	r1, [pc, #640]	; (80090dc <lwip_netconn_do_close_internal+0x2d0>)
 8008e5a:	489e      	ldr	r0, [pc, #632]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e5c:	f00d fe94 	bl	8016b88 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <lwip_netconn_do_close_internal+0x6a>
 8008e68:	4b98      	ldr	r3, [pc, #608]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8008e6a:	f240 3246 	movw	r2, #838	; 0x346
 8008e6e:	499c      	ldr	r1, [pc, #624]	; (80090e0 <lwip_netconn_do_close_internal+0x2d4>)
 8008e70:	4898      	ldr	r0, [pc, #608]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e72:	f00d fe89 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <lwip_netconn_do_close_internal+0x80>
 8008e7e:	4b93      	ldr	r3, [pc, #588]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8008e80:	f240 3247 	movw	r2, #839	; 0x347
 8008e84:	4997      	ldr	r1, [pc, #604]	; (80090e4 <lwip_netconn_do_close_internal+0x2d8>)
 8008e86:	4893      	ldr	r0, [pc, #588]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 8008e88:	f00d fe7e 	bl	8016b88 <iprintf>

  tpcb = conn->pcb.tcp;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	7a1b      	ldrb	r3, [r3, #8]
 8008e98:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d102      	bne.n	8008eb6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	77bb      	strb	r3, [r7, #30]
 8008eb4:	e01f      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008eb6:	7dbb      	ldrb	r3, [r7, #22]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00e      	beq.n	8008eda <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008ec0:	2b05      	cmp	r3, #5
 8008ec2:	d007      	beq.n	8008ed4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008ec8:	2b06      	cmp	r3, #6
 8008eca:	d003      	beq.n	8008ed4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d102      	bne.n	8008eda <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	77bb      	strb	r3, [r7, #30]
 8008ed8:	e00d      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008eda:	7d7b      	ldrb	r3, [r7, #21]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d008      	beq.n	8008ef2 <lwip_netconn_do_close_internal+0xe6>
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	7e9b      	ldrb	r3, [r3, #26]
 8008ee4:	f003 0310 	and.w	r3, r3, #16
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8008eec:	2301      	movs	r3, #1
 8008eee:	77bb      	strb	r3, [r7, #30]
 8008ef0:	e001      	b.n	8008ef6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8008ef6:	7fbb      	ldrb	r3, [r7, #30]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008efc:	2100      	movs	r1, #0
 8008efe:	69b8      	ldr	r0, [r7, #24]
 8008f00:	f004 fe1e 	bl	800db40 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	7d1b      	ldrb	r3, [r3, #20]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d104      	bne.n	8008f16 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	69b8      	ldr	r0, [r7, #24]
 8008f10:	f004 fe8c 	bl	800dc2c <tcp_accept>
 8008f14:	e01d      	b.n	8008f52 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008f16:	7dbb      	ldrb	r3, [r7, #22]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	69b8      	ldr	r0, [r7, #24]
 8008f20:	f004 fe20 	bl	800db64 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008f24:	2100      	movs	r1, #0
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f004 fe80 	bl	800dc2c <tcp_accept>
    }
    if (shut_tx) {
 8008f2c:	7d7b      	ldrb	r3, [r7, #21]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008f32:	2100      	movs	r1, #0
 8008f34:	69b8      	ldr	r0, [r7, #24]
 8008f36:	f004 fe37 	bl	800dba8 <tcp_sent>
    }
    if (close) {
 8008f3a:	7fbb      	ldrb	r3, [r7, #30]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008f40:	2200      	movs	r2, #0
 8008f42:	2100      	movs	r1, #0
 8008f44:	69b8      	ldr	r0, [r7, #24]
 8008f46:	f004 fe89 	bl	800dc5c <tcp_poll>
      tcp_err(tpcb, NULL);
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	69b8      	ldr	r0, [r7, #24]
 8008f4e:	f004 fe4b 	bl	800dbe8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8008f52:	7fbb      	ldrb	r3, [r7, #30]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008f58:	69b8      	ldr	r0, [r7, #24]
 8008f5a:	f003 fd49 	bl	800c9f0 <tcp_close>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	77fb      	strb	r3, [r7, #31]
 8008f62:	e007      	b.n	8008f74 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
 8008f66:	7d7a      	ldrb	r2, [r7, #21]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	69b8      	ldr	r0, [r7, #24]
 8008f6c:	f003 fd58 	bl	800ca20 <tcp_shutdown>
 8008f70:	4603      	mov	r3, r0
 8008f72:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8008f74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	777b      	strb	r3, [r7, #29]
 8008f80:	e016      	b.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008f82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f8a:	d10f      	bne.n	8008fac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	7a5b      	ldrb	r3, [r3, #9]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10c      	bne.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008f96:	2301      	movs	r3, #1
 8008f98:	777b      	strb	r3, [r7, #29]
        if (close) {
 8008f9a:	7fbb      	ldrb	r3, [r7, #30]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008fa0:	69b8      	ldr	r0, [r7, #24]
 8008fa2:	f003 fe37 	bl	800cc14 <tcp_abort>
          err = ERR_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	77fb      	strb	r3, [r7, #31]
 8008faa:	e001      	b.n	8008fb0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8008fb0:	7f7b      	ldrb	r3, [r7, #29]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d056      	beq.n	8009064 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	7ffa      	ldrb	r2, [r7, #31]
 8008fc6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008fd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d129      	bne.n	8009030 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008fdc:	7fbb      	ldrb	r3, [r7, #30]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <lwip_netconn_do_close_internal+0x1f0>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
      }
      if (shut_rx) {
 8008ffc:	7dbb      	ldrb	r3, [r7, #22]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <lwip_netconn_do_close_internal+0x20a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	4798      	blx	r3
      }
      if (shut_tx) {
 8009016:	7d7b      	ldrb	r3, [r7, #21]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <lwip_netconn_do_close_internal+0x224>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	2200      	movs	r2, #0
 800902a:	2102      	movs	r1, #2
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00e      	beq.n	8009054 <lwip_netconn_do_close_internal+0x248>
 8009036:	f00d fd43 	bl	8016ac0 <sys_arch_protect>
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009042:	f113 0f0c 	cmn.w	r3, #12
 8009046:	db02      	blt.n	800904e <lwip_netconn_do_close_internal+0x242>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	7ffa      	ldrb	r2, [r7, #31]
 800904c:	721a      	strb	r2, [r3, #8]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f00d fd44 	bl	8016adc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f00d fc8b 	bl	8016976 <sys_sem_signal>
    }
    return ERR_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	e02e      	b.n	80090c2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8009064:	7f7b      	ldrb	r3, [r7, #29]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d11e      	bne.n	80090a8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	7d1b      	ldrb	r3, [r3, #20]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d106      	bne.n	8009080 <lwip_netconn_do_close_internal+0x274>
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 8009074:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009078:	491b      	ldr	r1, [pc, #108]	; (80090e8 <lwip_netconn_do_close_internal+0x2dc>)
 800907a:	4816      	ldr	r0, [pc, #88]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 800907c:	f00d fd84 	bl	8016b88 <iprintf>
    if (shut_tx) {
 8009080:	7d7b      	ldrb	r3, [r7, #21]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8009086:	4919      	ldr	r1, [pc, #100]	; (80090ec <lwip_netconn_do_close_internal+0x2e0>)
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f004 fd8d 	bl	800dba8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800908e:	2201      	movs	r2, #1
 8009090:	4917      	ldr	r1, [pc, #92]	; (80090f0 <lwip_netconn_do_close_internal+0x2e4>)
 8009092:	69b8      	ldr	r0, [r7, #24]
 8009094:	f004 fde2 	bl	800dc5c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009098:	4916      	ldr	r1, [pc, #88]	; (80090f4 <lwip_netconn_do_close_internal+0x2e8>)
 800909a:	69b8      	ldr	r0, [r7, #24]
 800909c:	f004 fda4 	bl	800dbe8 <tcp_err>
    tcp_arg(tpcb, conn);
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	69b8      	ldr	r0, [r7, #24]
 80090a4:	f004 fd4c 	bl	800db40 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80090a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <lwip_netconn_do_close_internal+0x2b2>
 80090b0:	4b06      	ldr	r3, [pc, #24]	; (80090cc <lwip_netconn_do_close_internal+0x2c0>)
 80090b2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80090b6:	4910      	ldr	r1, [pc, #64]	; (80090f8 <lwip_netconn_do_close_internal+0x2ec>)
 80090b8:	4806      	ldr	r0, [pc, #24]	; (80090d4 <lwip_netconn_do_close_internal+0x2c8>)
 80090ba:	f00d fd65 	bl	8016b88 <iprintf>
  return err;
 80090be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	080182d8 	.word	0x080182d8
 80090d0:	08018550 	.word	0x08018550
 80090d4:	08018330 	.word	0x08018330
 80090d8:	08018560 	.word	0x08018560
 80090dc:	08018580 	.word	0x08018580
 80090e0:	080185a4 	.word	0x080185a4
 80090e4:	0801840c 	.word	0x0801840c
 80090e8:	080185b8 	.word	0x080185b8
 80090ec:	0800864d 	.word	0x0800864d
 80090f0:	08008585 	.word	0x08008585
 80090f4:	080086f5 	.word	0x080086f5
 80090f8:	080185dc 	.word	0x080185dc

080090fc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009110:	7cfb      	ldrb	r3, [r7, #19]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00d      	beq.n	8009132 <lwip_netconn_do_delconn+0x36>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009120:	2b10      	cmp	r3, #16
 8009122:	d006      	beq.n	8009132 <lwip_netconn_do_delconn+0x36>
 8009124:	4b6f      	ldr	r3, [pc, #444]	; (80092e4 <lwip_netconn_do_delconn+0x1e8>)
 8009126:	f240 4201 	movw	r2, #1025	; 0x401
 800912a:	496f      	ldr	r1, [pc, #444]	; (80092e8 <lwip_netconn_do_delconn+0x1ec>)
 800912c:	486f      	ldr	r0, [pc, #444]	; (80092ec <lwip_netconn_do_delconn+0x1f0>)
 800912e:	f00d fd2b 	bl	8016b88 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009132:	7cfb      	ldrb	r3, [r7, #19]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <lwip_netconn_do_delconn+0x48>
 8009138:	7cfb      	ldrb	r3, [r7, #19]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d002      	beq.n	8009144 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800913e:	7cfb      	ldrb	r3, [r7, #19]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d109      	bne.n	8009158 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009144:	7cfb      	ldrb	r3, [r7, #19]
 8009146:	2b03      	cmp	r3, #3
 8009148:	d10a      	bne.n	8009160 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	7f1b      	ldrb	r3, [r3, #28]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	22fb      	movs	r2, #251	; 0xfb
 800915c:	711a      	strb	r2, [r3, #4]
 800915e:	e09c      	b.n	800929a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009160:	7cfb      	ldrb	r3, [r7, #19]
 8009162:	2b03      	cmp	r3, #3
 8009164:	d10d      	bne.n	8009182 <lwip_netconn_do_delconn+0x86>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	7f1b      	ldrb	r3, [r3, #28]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <lwip_netconn_do_delconn+0x86>
 8009174:	4b5b      	ldr	r3, [pc, #364]	; (80092e4 <lwip_netconn_do_delconn+0x1e8>)
 8009176:	f240 421f 	movw	r2, #1055	; 0x41f
 800917a:	495d      	ldr	r1, [pc, #372]	; (80092f0 <lwip_netconn_do_delconn+0x1f4>)
 800917c:	485b      	ldr	r0, [pc, #364]	; (80092ec <lwip_netconn_do_delconn+0x1f0>)
 800917e:	f00d fd03 	bl	8016b88 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2200      	movs	r2, #0
 8009186:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fdbd 	bl	8008d0c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d064      	beq.n	8009266 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d00e      	beq.n	80091c8 <lwip_netconn_do_delconn+0xcc>
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d000      	beq.n	80091b0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80091ae:	e056      	b.n	800925e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f009 f93d 	bl	8012440 <udp_remove>
        break;
 80091c6:	e04a      	b.n	800925e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d104      	bne.n	80091dc <lwip_netconn_do_delconn+0xe0>
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d006      	beq.n	80091ea <lwip_netconn_do_delconn+0xee>
 80091dc:	4b41      	ldr	r3, [pc, #260]	; (80092e4 <lwip_netconn_do_delconn+0x1e8>)
 80091de:	f240 4235 	movw	r2, #1077	; 0x435
 80091e2:	4944      	ldr	r1, [pc, #272]	; (80092f4 <lwip_netconn_do_delconn+0x1f8>)
 80091e4:	4841      	ldr	r0, [pc, #260]	; (80092ec <lwip_netconn_do_delconn+0x1f0>)
 80091e6:	f00d fccf 	bl	8016b88 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2204      	movs	r2, #4
 80091f0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2203      	movs	r2, #3
 80091f6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fe00 	bl	8008e0c <lwip_netconn_do_close_internal>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d064      	beq.n	80092dc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	785b      	ldrb	r3, [r3, #1]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d006      	beq.n	800922a <lwip_netconn_do_delconn+0x12e>
 800921c:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <lwip_netconn_do_delconn+0x1e8>)
 800921e:	f240 423b 	movw	r2, #1083	; 0x43b
 8009222:	4935      	ldr	r1, [pc, #212]	; (80092f8 <lwip_netconn_do_delconn+0x1fc>)
 8009224:	4831      	ldr	r0, [pc, #196]	; (80092ec <lwip_netconn_do_delconn+0x1f0>)
 8009226:	f00d fcaf 	bl	8016b88 <iprintf>
          UNLOCK_TCPIP_CORE();
 800922a:	4834      	ldr	r0, [pc, #208]	; (80092fc <lwip_netconn_do_delconn+0x200>)
 800922c:	f00d fc15 	bl	8016a5a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f00d fb6b 	bl	8016914 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800923e:	482f      	ldr	r0, [pc, #188]	; (80092fc <lwip_netconn_do_delconn+0x200>)
 8009240:	f00d fbfc 	bl	8016a3c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d046      	beq.n	80092dc <lwip_netconn_do_delconn+0x1e0>
 800924e:	4b25      	ldr	r3, [pc, #148]	; (80092e4 <lwip_netconn_do_delconn+0x1e8>)
 8009250:	f240 423f 	movw	r2, #1087	; 0x43f
 8009254:	4928      	ldr	r1, [pc, #160]	; (80092f8 <lwip_netconn_do_delconn+0x1fc>)
 8009256:	4825      	ldr	r0, [pc, #148]	; (80092ec <lwip_netconn_do_delconn+0x1f0>)
 8009258:	f00d fc96 	bl	8016b88 <iprintf>
        return;
 800925c:	e03e      	b.n	80092dc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <lwip_netconn_do_delconn+0x184>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	6810      	ldr	r0, [r2, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	2100      	movs	r1, #0
 800927e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d007      	beq.n	800929a <lwip_netconn_do_delconn+0x19e>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	6810      	ldr	r0, [r2, #0]
 8009294:	2200      	movs	r2, #0
 8009296:	2102      	movs	r1, #2
 8009298:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	4618      	mov	r0, r3
 80092a2:	f00d fb82 	bl	80169aa <sys_sem_valid>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d018      	beq.n	80092de <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d014      	beq.n	80092de <lwip_netconn_do_delconn+0x1e2>
 80092b4:	f00d fc04 	bl	8016ac0 <sys_arch_protect>
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092c2:	f113 0f0c 	cmn.w	r3, #12
 80092c6:	db05      	blt.n	80092d4 <lwip_netconn_do_delconn+0x1d8>
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80092d2:	721a      	strb	r2, [r3, #8]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f00d fc01 	bl	8016adc <sys_arch_unprotect>
 80092da:	e000      	b.n	80092de <lwip_netconn_do_delconn+0x1e2>
        return;
 80092dc:	bf00      	nop
  }
}
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	080182d8 	.word	0x080182d8
 80092e8:	080185ec 	.word	0x080185ec
 80092ec:	08018330 	.word	0x08018330
 80092f0:	08018600 	.word	0x08018600
 80092f4:	08018620 	.word	0x08018620
 80092f8:	0801863c 	.word	0x0801863c
 80092fc:	2000c394 	.word	0x2000c394

08009300 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009314:	f113 0f0c 	cmn.w	r3, #12
 8009318:	da06      	bge.n	8009328 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	711a      	strb	r2, [r3, #4]
 8009326:	e030      	b.n	800938a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	22fa      	movs	r2, #250	; 0xfa
 800932c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d027      	beq.n	8009388 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009342:	2b10      	cmp	r3, #16
 8009344:	d011      	beq.n	800936a <lwip_netconn_do_bind+0x6a>
 8009346:	2b20      	cmp	r3, #32
 8009348:	d000      	beq.n	800934c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800934a:	e01e      	b.n	800938a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6858      	ldr	r0, [r3, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6899      	ldr	r1, [r3, #8]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	899b      	ldrh	r3, [r3, #12]
 800935a:	461a      	mov	r2, r3
 800935c:	f008 ff98 	bl	8012290 <udp_bind>
 8009360:	4603      	mov	r3, r0
 8009362:	461a      	mov	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	711a      	strb	r2, [r3, #4]
        break;
 8009368:	e00f      	b.n	800938a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6858      	ldr	r0, [r3, #4]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6899      	ldr	r1, [r3, #8]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	899b      	ldrh	r3, [r3, #12]
 8009378:	461a      	mov	r2, r3
 800937a:	f003 fc57 	bl	800cc2c <tcp_bind>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	711a      	strb	r2, [r3, #4]
        break;
 8009386:	e000      	b.n	800938a <lwip_netconn_do_bind+0x8a>
      }
    }
 8009388:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d012      	beq.n	80093b8 <lwip_netconn_do_bind+0xb8>
 8009392:	f00d fb95 	bl	8016ac0 <sys_arch_protect>
 8009396:	60b8      	str	r0, [r7, #8]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80093a0:	f113 0f0c 	cmn.w	r3, #12
 80093a4:	db05      	blt.n	80093b2 <lwip_netconn_do_bind+0xb2>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80093b0:	721a      	strb	r2, [r3, #8]
 80093b2:	68b8      	ldr	r0, [r7, #8]
 80093b4:	f00d fb92 	bl	8016adc <sys_arch_unprotect>
}
 80093b8:	bf00      	nop
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80093d4:	f113 0f0c 	cmn.w	r3, #12
 80093d8:	da06      	bge.n	80093e8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	711a      	strb	r2, [r3, #4]
 80093e6:	e090      	b.n	800950a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	22f5      	movs	r2, #245	; 0xf5
 80093ec:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8088 	beq.w	800950a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009404:	2b10      	cmp	r3, #16
 8009406:	d17d      	bne.n	8009504 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d16f      	bne.n	80094f2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	7d1b      	ldrb	r3, [r3, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	22fa      	movs	r2, #250	; 0xfa
 8009422:	711a      	strb	r2, [r3, #4]
 8009424:	e071      	b.n	800950a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009426:	23ff      	movs	r3, #255	; 0xff
 8009428:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f107 020f 	add.w	r2, r7, #15
 8009434:	7ef9      	ldrb	r1, [r7, #27]
 8009436:	4618      	mov	r0, r3
 8009438:	f003 fcac 	bl	800cd94 <tcp_listen_with_backlog_and_err>
 800943c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8009444:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	711a      	strb	r2, [r3, #4]
 800944c:	e05d      	b.n	800950a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3310      	adds	r3, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f00d fa17 	bl	8016888 <sys_mbox_valid>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3310      	adds	r3, #16
 8009466:	4618      	mov	r0, r3
 8009468:	f00d f972 	bl	8016750 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3310      	adds	r3, #16
 8009472:	4618      	mov	r0, r3
 8009474:	f00d fa19 	bl	80168aa <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2200      	movs	r2, #0
 800947c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	4618      	mov	r0, r3
 8009486:	f00d f9ff 	bl	8016888 <sys_mbox_valid>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3314      	adds	r3, #20
 8009496:	2106      	movs	r1, #6
 8009498:	4618      	mov	r0, r3
 800949a:	f00d f937 	bl	801670c <sys_mbox_new>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d118      	bne.n	80094e2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2202      	movs	r2, #2
 80094b6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f004 fb37 	bl	800db40 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4919      	ldr	r1, [pc, #100]	; (8009540 <lwip_netconn_do_listen+0x180>)
 80094da:	4618      	mov	r0, r3
 80094dc:	f004 fba6 	bl	800dc2c <tcp_accept>
 80094e0:	e013      	b.n	800950a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80094e2:	6978      	ldr	r0, [r7, #20]
 80094e4:	f003 fa84 	bl	800c9f0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2200      	movs	r2, #0
 80094ee:	605a      	str	r2, [r3, #4]
 80094f0:	e00b      	b.n	800950a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d106      	bne.n	800950a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	2200      	movs	r2, #0
 8009500:	711a      	strb	r2, [r3, #4]
 8009502:	e002      	b.n	800950a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	22f0      	movs	r2, #240	; 0xf0
 8009508:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d012      	beq.n	8009538 <lwip_netconn_do_listen+0x178>
 8009512:	f00d fad5 	bl	8016ac0 <sys_arch_protect>
 8009516:	6138      	str	r0, [r7, #16]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009520:	f113 0f0c 	cmn.w	r3, #12
 8009524:	db05      	blt.n	8009532 <lwip_netconn_do_listen+0x172>
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009530:	721a      	strb	r2, [r3, #8]
 8009532:	6938      	ldr	r0, [r7, #16]
 8009534:	f00d fad2 	bl	8016adc <sys_arch_unprotect>
}
 8009538:	bf00      	nop
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	08008925 	.word	0x08008925

08009544 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2200      	movs	r2, #0
 8009554:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d022      	beq.n	80095a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800956a:	2b10      	cmp	r3, #16
 800956c:	d11b      	bne.n	80095a6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957a:	d202      	bcs.n	8009582 <lwip_netconn_do_recv+0x3e>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	b29b      	uxth	r3, r3
 8009580:	e001      	b.n	8009586 <lwip_netconn_do_recv+0x42>
 8009582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009586:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	89fa      	ldrh	r2, [r7, #14]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f003 fce4 	bl	800cf60 <tcp_recved>
        remaining -= recved;
 8009598:	89fb      	ldrh	r3, [r7, #14]
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e6      	bne.n	8009574 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d012      	beq.n	80095d4 <lwip_netconn_do_recv+0x90>
 80095ae:	f00d fa87 	bl	8016ac0 <sys_arch_protect>
 80095b2:	60b8      	str	r0, [r7, #8]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095bc:	f113 0f0c 	cmn.w	r3, #12
 80095c0:	db05      	blt.n	80095ce <lwip_netconn_do_recv+0x8a>
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80095cc:	721a      	strb	r2, [r3, #8]
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f00d fa84 	bl	8016adc <sys_arch_unprotect>
}
 80095d4:	bf00      	nop
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <lwip_netconn_do_writemore+0x26>
 80095f4:	4ba3      	ldr	r3, [pc, #652]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 80095f6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80095fa:	49a3      	ldr	r1, [pc, #652]	; (8009888 <lwip_netconn_do_writemore+0x2ac>)
 80095fc:	48a3      	ldr	r0, [pc, #652]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 80095fe:	f00d fac3 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	785b      	ldrb	r3, [r3, #1]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d006      	beq.n	8009618 <lwip_netconn_do_writemore+0x3c>
 800960a:	4b9e      	ldr	r3, [pc, #632]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 800960c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8009610:	499f      	ldr	r1, [pc, #636]	; (8009890 <lwip_netconn_do_writemore+0x2b4>)
 8009612:	489e      	ldr	r0, [pc, #632]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 8009614:	f00d fab8 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <lwip_netconn_do_writemore+0x52>
 8009620:	4b98      	ldr	r3, [pc, #608]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 8009622:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8009626:	499b      	ldr	r1, [pc, #620]	; (8009894 <lwip_netconn_do_writemore+0x2b8>)
 8009628:	4898      	ldr	r0, [pc, #608]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 800962a:	f00d faad 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <lwip_netconn_do_writemore+0x68>
 8009636:	4b93      	ldr	r3, [pc, #588]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 8009638:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800963c:	4996      	ldr	r1, [pc, #600]	; (8009898 <lwip_netconn_do_writemore+0x2bc>)
 800963e:	4893      	ldr	r0, [pc, #588]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 8009640:	f00d faa2 	bl	8016b88 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a1a      	ldr	r2, [r3, #32]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	429a      	cmp	r2, r3
 8009650:	d306      	bcc.n	8009660 <lwip_netconn_do_writemore+0x84>
 8009652:	4b8c      	ldr	r3, [pc, #560]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 8009654:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8009658:	4990      	ldr	r1, [pc, #576]	; (800989c <lwip_netconn_do_writemore+0x2c0>)
 800965a:	488c      	ldr	r0, [pc, #560]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 800965c:	f00d fa94 	bl	8016b88 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	7c1b      	ldrb	r3, [r3, #16]
 8009666:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7f1b      	ldrb	r3, [r3, #28]
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <lwip_netconn_do_writemore+0xa6>
 8009676:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <lwip_netconn_do_writemore+0xaa>
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <lwip_netconn_do_writemore+0xac>
 8009686:	2300      	movs	r3, #0
 8009688:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	4413      	add	r3, r2
 8009698:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ae:	d309      	bcc.n	80096c4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 80096b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096b4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80096b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80096ba:	f043 0302 	orr.w	r3, r3, #2
 80096be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096c2:	e001      	b.n	80096c8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096d0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80096d2:	8afa      	ldrh	r2, [r7, #22]
 80096d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d212      	bcs.n	8009700 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80096da:	8afb      	ldrh	r3, [r7, #22]
 80096dc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80096de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d006      	beq.n	80096f4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 80096e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 80096ec:	23f9      	movs	r3, #249	; 0xf9
 80096ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 80096f2:	e02a      	b.n	800974a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80096f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80096f8:	f043 0302 	orr.w	r3, r3, #2
 80096fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1a      	ldr	r2, [r3, #32]
 8009704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009706:	441a      	add	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d906      	bls.n	8009720 <lwip_netconn_do_writemore+0x144>
 8009712:	4b5c      	ldr	r3, [pc, #368]	; (8009884 <lwip_netconn_do_writemore+0x2a8>)
 8009714:	f240 6213 	movw	r2, #1555	; 0x613
 8009718:	4961      	ldr	r1, [pc, #388]	; (80098a0 <lwip_netconn_do_writemore+0x2c4>)
 800971a:	485c      	ldr	r0, [pc, #368]	; (800988c <lwip_netconn_do_writemore+0x2b0>)
 800971c:	f00d fa34 	bl	8016b88 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6858      	ldr	r0, [r3, #4]
 8009724:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800972a:	69f9      	ldr	r1, [r7, #28]
 800972c:	f007 f84a 	bl	80107c4 <tcp_write>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <lwip_netconn_do_writemore+0x16c>
 800973e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009746:	d133      	bne.n	80097b0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8009748:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800974a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800974e:	2b00      	cmp	r3, #0
 8009750:	d017      	beq.n	8009782 <lwip_netconn_do_writemore+0x1a6>
 8009752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	429a      	cmp	r2, r3
 800975c:	d211      	bcs.n	8009782 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d005      	beq.n	8009772 <lwip_netconn_do_writemore+0x196>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800976c:	2103      	movs	r1, #3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	7f1b      	ldrb	r3, [r3, #28]
 8009776:	f043 0310 	orr.w	r3, r3, #16
 800977a:	b2da      	uxtb	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	771a      	strb	r2, [r3, #28]
 8009780:	e016      	b.n	80097b0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800978a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800978e:	d305      	bcc.n	800979c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009798:	2b04      	cmp	r3, #4
 800979a:	d909      	bls.n	80097b0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <lwip_netconn_do_writemore+0x1d4>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097aa:	2103      	movs	r1, #3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80097b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d134      	bne.n	8009822 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1a      	ldr	r2, [r3, #32]
 80097bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097be:	441a      	add	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a1a      	ldr	r2, [r3, #32]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d003      	beq.n	80097da <lwip_netconn_do_writemore+0x1fe>
 80097d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	6a12      	ldr	r2, [r2, #32]
 80097e2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f007 fc9a 	bl	8011128 <tcp_output>
 80097f4:	4603      	mov	r3, r0
 80097f6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80097f8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80097fc:	f113 0f0c 	cmn.w	r3, #12
 8009800:	db04      	blt.n	800980c <lwip_netconn_do_writemore+0x230>
 8009802:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009806:	f113 0f04 	cmn.w	r3, #4
 800980a:	d152      	bne.n	80098b2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800980c:	7d3b      	ldrb	r3, [r7, #20]
 800980e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2200      	movs	r2, #0
 800981e:	60da      	str	r2, [r3, #12]
 8009820:	e047      	b.n	80098b2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8009822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800982a:	d13b      	bne.n	80098a4 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	f007 fc79 	bl	8011128 <tcp_output>
 8009836:	4603      	mov	r3, r0
 8009838:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800983a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800983e:	f113 0f0c 	cmn.w	r3, #12
 8009842:	db04      	blt.n	800984e <lwip_netconn_do_writemore+0x272>
 8009844:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009848:	f113 0f04 	cmn.w	r3, #4
 800984c:	d10a      	bne.n	8009864 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800984e:	7d7b      	ldrb	r3, [r7, #21]
 8009850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	60da      	str	r2, [r3, #12]
 8009862:	e026      	b.n	80098b2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8009864:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009868:	2b00      	cmp	r3, #0
 800986a:	d022      	beq.n	80098b2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800986c:	23f9      	movs	r3, #249	; 0xf9
 800986e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009872:	2301      	movs	r3, #1
 8009874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2200      	movs	r2, #0
 800987e:	60da      	str	r2, [r3, #12]
 8009880:	e017      	b.n	80098b2 <lwip_netconn_do_writemore+0x2d6>
 8009882:	bf00      	nop
 8009884:	080182d8 	.word	0x080182d8
 8009888:	080183fc 	.word	0x080183fc
 800988c:	08018330 	.word	0x08018330
 8009890:	080186dc 	.word	0x080186dc
 8009894:	0801840c 	.word	0x0801840c
 8009898:	080186fc 	.word	0x080186fc
 800989c:	08018714 	.word	0x08018714
 80098a0:	08018748 	.word	0x08018748
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	2200      	movs	r2, #0
 80098b0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80098b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d02c      	beq.n	8009914 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098cc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00f      	beq.n	8009906 <lwip_netconn_do_writemore+0x32a>
 80098e6:	f00d f8eb 	bl	8016ac0 <sys_arch_protect>
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80098f2:	f113 0f0c 	cmn.w	r3, #12
 80098f6:	db03      	blt.n	8009900 <lwip_netconn_do_writemore+0x324>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098fe:	721a      	strb	r2, [r3, #8]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f00d f8eb 	bl	8016adc <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800990c:	6938      	ldr	r0, [r7, #16]
 800990e:	f00d f832 	bl	8016976 <sys_sem_signal>
 8009912:	e002      	b.n	800991a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009918:	e000      	b.n	800991c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3728      	adds	r7, #40	; 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009938:	f113 0f0c 	cmn.w	r3, #12
 800993c:	da06      	bge.n	800994c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	711a      	strb	r2, [r3, #4]
 800994a:	e072      	b.n	8009a32 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009956:	2b10      	cmp	r3, #16
 8009958:	d168      	bne.n	8009a2c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	22fb      	movs	r2, #251	; 0xfb
 8009968:	711a      	strb	r2, [r3, #4]
 800996a:	e062      	b.n	8009a32 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d056      	beq.n	8009a24 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2201      	movs	r2, #1
 800997c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <lwip_netconn_do_write+0x6e>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d006      	beq.n	80099a0 <lwip_netconn_do_write+0x7c>
 8009992:	4b36      	ldr	r3, [pc, #216]	; (8009a6c <lwip_netconn_do_write+0x148>)
 8009994:	f240 6283 	movw	r2, #1667	; 0x683
 8009998:	4935      	ldr	r1, [pc, #212]	; (8009a70 <lwip_netconn_do_write+0x14c>)
 800999a:	4836      	ldr	r0, [pc, #216]	; (8009a74 <lwip_netconn_do_write+0x150>)
 800999c:	f00d f8f4 	bl	8016b88 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <lwip_netconn_do_write+0x92>
 80099a8:	4b30      	ldr	r3, [pc, #192]	; (8009a6c <lwip_netconn_do_write+0x148>)
 80099aa:	f240 6284 	movw	r2, #1668	; 0x684
 80099ae:	4932      	ldr	r1, [pc, #200]	; (8009a78 <lwip_netconn_do_write+0x154>)
 80099b0:	4830      	ldr	r0, [pc, #192]	; (8009a74 <lwip_netconn_do_write+0x150>)
 80099b2:	f00d f8e9 	bl	8016b88 <iprintf>
        msg->conn->current_msg = msg;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fe05 	bl	80095dc <lwip_netconn_do_writemore>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d044      	beq.n	8009a62 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d006      	beq.n	80099f0 <lwip_netconn_do_write+0xcc>
 80099e2:	4b22      	ldr	r3, [pc, #136]	; (8009a6c <lwip_netconn_do_write+0x148>)
 80099e4:	f240 6289 	movw	r2, #1673	; 0x689
 80099e8:	4924      	ldr	r1, [pc, #144]	; (8009a7c <lwip_netconn_do_write+0x158>)
 80099ea:	4822      	ldr	r0, [pc, #136]	; (8009a74 <lwip_netconn_do_write+0x150>)
 80099ec:	f00d f8cc 	bl	8016b88 <iprintf>
          UNLOCK_TCPIP_CORE();
 80099f0:	4823      	ldr	r0, [pc, #140]	; (8009a80 <lwip_netconn_do_write+0x15c>)
 80099f2:	f00d f832 	bl	8016a5a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	330c      	adds	r3, #12
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f00c ff88 	bl	8016914 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009a04:	481e      	ldr	r0, [pc, #120]	; (8009a80 <lwip_netconn_do_write+0x15c>)
 8009a06:	f00d f819 	bl	8016a3c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d126      	bne.n	8009a62 <lwip_netconn_do_write+0x13e>
 8009a14:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <lwip_netconn_do_write+0x148>)
 8009a16:	f240 628d 	movw	r2, #1677	; 0x68d
 8009a1a:	4918      	ldr	r1, [pc, #96]	; (8009a7c <lwip_netconn_do_write+0x158>)
 8009a1c:	4815      	ldr	r0, [pc, #84]	; (8009a74 <lwip_netconn_do_write+0x150>)
 8009a1e:	f00d f8b3 	bl	8016b88 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009a22:	e01e      	b.n	8009a62 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	22f5      	movs	r2, #245	; 0xf5
 8009a28:	711a      	strb	r2, [r3, #4]
 8009a2a:	e002      	b.n	8009a32 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	22fa      	movs	r2, #250	; 0xfa
 8009a30:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d014      	beq.n	8009a64 <lwip_netconn_do_write+0x140>
 8009a3a:	f00d f841 	bl	8016ac0 <sys_arch_protect>
 8009a3e:	60b8      	str	r0, [r7, #8]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009a48:	f113 0f0c 	cmn.w	r3, #12
 8009a4c:	db05      	blt.n	8009a5a <lwip_netconn_do_write+0x136>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009a58:	721a      	strb	r2, [r3, #8]
 8009a5a:	68b8      	ldr	r0, [r7, #8]
 8009a5c:	f00d f83e 	bl	8016adc <sys_arch_unprotect>
 8009a60:	e000      	b.n	8009a64 <lwip_netconn_do_write+0x140>
        return;
 8009a62:	bf00      	nop
}
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	080182d8 	.word	0x080182d8
 8009a70:	08018620 	.word	0x08018620
 8009a74:	08018330 	.word	0x08018330
 8009a78:	08018774 	.word	0x08018774
 8009a7c:	0801863c 	.word	0x0801863c
 8009a80:	2000c394 	.word	0x2000c394

08009a84 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d06e      	beq.n	8009b80 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d167      	bne.n	8009b80 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ab4:	2b03      	cmp	r3, #3
 8009ab6:	d002      	beq.n	8009abe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009ab8:	7cfb      	ldrb	r3, [r7, #19]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d060      	beq.n	8009b80 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009abe:	7cfb      	ldrb	r3, [r7, #19]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d103      	bne.n	8009acc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	22f5      	movs	r2, #245	; 0xf5
 8009ac8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009aca:	e05c      	b.n	8009b86 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8009acc:	7cfb      	ldrb	r3, [r7, #19]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d103      	bne.n	8009ada <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	22fb      	movs	r2, #251	; 0xfb
 8009ad6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009ad8:	e055      	b.n	8009b86 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	7a1b      	ldrb	r3, [r3, #8]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7ff f90e 	bl	8008d0c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d104      	bne.n	8009b04 <lwip_netconn_do_close+0x80>
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <lwip_netconn_do_close+0x8e>
 8009b04:	4b2e      	ldr	r3, [pc, #184]	; (8009bc0 <lwip_netconn_do_close+0x13c>)
 8009b06:	f240 721c 	movw	r2, #1820	; 0x71c
 8009b0a:	492e      	ldr	r1, [pc, #184]	; (8009bc4 <lwip_netconn_do_close+0x140>)
 8009b0c:	482e      	ldr	r0, [pc, #184]	; (8009bc8 <lwip_netconn_do_close+0x144>)
 8009b0e:	f00d f83b 	bl	8016b88 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2204      	movs	r2, #4
 8009b18:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff f96f 	bl	8008e0c <lwip_netconn_do_close_internal>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d040      	beq.n	8009bb6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	785b      	ldrb	r3, [r3, #1]
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d006      	beq.n	8009b4c <lwip_netconn_do_close+0xc8>
 8009b3e:	4b20      	ldr	r3, [pc, #128]	; (8009bc0 <lwip_netconn_do_close+0x13c>)
 8009b40:	f240 7221 	movw	r2, #1825	; 0x721
 8009b44:	4921      	ldr	r1, [pc, #132]	; (8009bcc <lwip_netconn_do_close+0x148>)
 8009b46:	4820      	ldr	r0, [pc, #128]	; (8009bc8 <lwip_netconn_do_close+0x144>)
 8009b48:	f00d f81e 	bl	8016b88 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009b4c:	4820      	ldr	r0, [pc, #128]	; (8009bd0 <lwip_netconn_do_close+0x14c>)
 8009b4e:	f00c ff84 	bl	8016a5a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	330c      	adds	r3, #12
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f00c feda 	bl	8016914 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009b60:	481b      	ldr	r0, [pc, #108]	; (8009bd0 <lwip_netconn_do_close+0x14c>)
 8009b62:	f00c ff6b 	bl	8016a3c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	785b      	ldrb	r3, [r3, #1]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d022      	beq.n	8009bb6 <lwip_netconn_do_close+0x132>
 8009b70:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <lwip_netconn_do_close+0x13c>)
 8009b72:	f240 7225 	movw	r2, #1829	; 0x725
 8009b76:	4915      	ldr	r1, [pc, #84]	; (8009bcc <lwip_netconn_do_close+0x148>)
 8009b78:	4813      	ldr	r0, [pc, #76]	; (8009bc8 <lwip_netconn_do_close+0x144>)
 8009b7a:	f00d f805 	bl	8016b88 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009b7e:	e01a      	b.n	8009bb6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	22f5      	movs	r2, #245	; 0xf5
 8009b84:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d014      	beq.n	8009bb8 <lwip_netconn_do_close+0x134>
 8009b8e:	f00c ff97 	bl	8016ac0 <sys_arch_protect>
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b9c:	f113 0f0c 	cmn.w	r3, #12
 8009ba0:	db05      	blt.n	8009bae <lwip_netconn_do_close+0x12a>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009bac:	721a      	strb	r2, [r3, #8]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f00c ff94 	bl	8016adc <sys_arch_unprotect>
 8009bb4:	e000      	b.n	8009bb8 <lwip_netconn_do_close+0x134>
      return;
 8009bb6:	bf00      	nop
}
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	080182d8 	.word	0x080182d8
 8009bc4:	08018620 	.word	0x08018620
 8009bc8:	08018330 	.word	0x08018330
 8009bcc:	0801863c 	.word	0x0801863c
 8009bd0:	2000c394 	.word	0x2000c394

08009bd4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d013      	beq.n	8009c0a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f002 faba 	bl	800c168 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	2006      	movs	r0, #6
 8009c06:	f001 fd4d 	bl	800b6a4 <memp_free>
  }
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d108      	bne.n	8009c38 <netbuf_data+0x24>
 8009c26:	4b1b      	ldr	r3, [pc, #108]	; (8009c94 <netbuf_data+0x80>)
 8009c28:	22c2      	movs	r2, #194	; 0xc2
 8009c2a:	491b      	ldr	r1, [pc, #108]	; (8009c98 <netbuf_data+0x84>)
 8009c2c:	481b      	ldr	r0, [pc, #108]	; (8009c9c <netbuf_data+0x88>)
 8009c2e:	f00c ffab 	bl	8016b88 <iprintf>
 8009c32:	f06f 030f 	mvn.w	r3, #15
 8009c36:	e029      	b.n	8009c8c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d108      	bne.n	8009c50 <netbuf_data+0x3c>
 8009c3e:	4b15      	ldr	r3, [pc, #84]	; (8009c94 <netbuf_data+0x80>)
 8009c40:	22c3      	movs	r2, #195	; 0xc3
 8009c42:	4917      	ldr	r1, [pc, #92]	; (8009ca0 <netbuf_data+0x8c>)
 8009c44:	4815      	ldr	r0, [pc, #84]	; (8009c9c <netbuf_data+0x88>)
 8009c46:	f00c ff9f 	bl	8016b88 <iprintf>
 8009c4a:	f06f 030f 	mvn.w	r3, #15
 8009c4e:	e01d      	b.n	8009c8c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d108      	bne.n	8009c68 <netbuf_data+0x54>
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <netbuf_data+0x80>)
 8009c58:	22c4      	movs	r2, #196	; 0xc4
 8009c5a:	4912      	ldr	r1, [pc, #72]	; (8009ca4 <netbuf_data+0x90>)
 8009c5c:	480f      	ldr	r0, [pc, #60]	; (8009c9c <netbuf_data+0x88>)
 8009c5e:	f00c ff93 	bl	8016b88 <iprintf>
 8009c62:	f06f 030f 	mvn.w	r3, #15
 8009c66:	e011      	b.n	8009c8c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d102      	bne.n	8009c76 <netbuf_data+0x62>
    return ERR_BUF;
 8009c70:	f06f 0301 	mvn.w	r3, #1
 8009c74:	e00a      	b.n	8009c8c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	895a      	ldrh	r2, [r3, #10]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	080187a0 	.word	0x080187a0
 8009c98:	080188a8 	.word	0x080188a8
 8009c9c:	080187f0 	.word	0x080187f0
 8009ca0:	080188c4 	.word	0x080188c4
 8009ca4:	080188e4 	.word	0x080188e4

08009ca8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d108      	bne.n	8009cc8 <netbuf_next+0x20>
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <netbuf_next+0x54>)
 8009cb8:	22dc      	movs	r2, #220	; 0xdc
 8009cba:	4911      	ldr	r1, [pc, #68]	; (8009d00 <netbuf_next+0x58>)
 8009cbc:	4811      	ldr	r0, [pc, #68]	; (8009d04 <netbuf_next+0x5c>)
 8009cbe:	f00c ff63 	bl	8016b88 <iprintf>
 8009cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cc6:	e014      	b.n	8009cf2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <netbuf_next+0x30>
    return -1;
 8009cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cd6:	e00c      	b.n	8009cf2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <netbuf_next+0x48>
    return 1;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <netbuf_next+0x4a>
  }
  return 0;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	080187a0 	.word	0x080187a0
 8009d00:	08018900 	.word	0x08018900
 8009d04:	080187f0 	.word	0x080187f0

08009d08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009d10:	4b29      	ldr	r3, [pc, #164]	; (8009db8 <tcpip_thread+0xb0>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009d18:	4b27      	ldr	r3, [pc, #156]	; (8009db8 <tcpip_thread+0xb0>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a27      	ldr	r2, [pc, #156]	; (8009dbc <tcpip_thread+0xb4>)
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009d24:	4826      	ldr	r0, [pc, #152]	; (8009dc0 <tcpip_thread+0xb8>)
 8009d26:	f00c fe89 	bl	8016a3c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009d2a:	4825      	ldr	r0, [pc, #148]	; (8009dc0 <tcpip_thread+0xb8>)
 8009d2c:	f00c fe95 	bl	8016a5a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	4619      	mov	r1, r3
 8009d36:	4823      	ldr	r0, [pc, #140]	; (8009dc4 <tcpip_thread+0xbc>)
 8009d38:	f008 f84a 	bl	8011dd0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009d3c:	4820      	ldr	r0, [pc, #128]	; (8009dc0 <tcpip_thread+0xb8>)
 8009d3e:	f00c fe7d 	bl	8016a3c <sys_mutex_lock>
    if (msg == NULL) {
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d106      	bne.n	8009d56 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009d48:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <tcpip_thread+0xc0>)
 8009d4a:	2269      	movs	r2, #105	; 0x69
 8009d4c:	491f      	ldr	r1, [pc, #124]	; (8009dcc <tcpip_thread+0xc4>)
 8009d4e:	4820      	ldr	r0, [pc, #128]	; (8009dd0 <tcpip_thread+0xc8>)
 8009d50:	f00c ff1a 	bl	8016b88 <iprintf>
      continue;
 8009d54:	e02f      	b.n	8009db6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d011      	beq.n	8009d82 <tcpip_thread+0x7a>
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d01b      	beq.n	8009d9a <tcpip_thread+0x92>
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d120      	bne.n	8009da8 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	6850      	ldr	r0, [r2, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	6892      	ldr	r2, [r2, #8]
 8009d72:	4611      	mov	r1, r2
 8009d74:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	2009      	movs	r0, #9
 8009d7c:	f001 fc92 	bl	800b6a4 <memp_free>
      break;
 8009d80:	e019      	b.n	8009db6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	6892      	ldr	r2, [r2, #8]
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	4619      	mov	r1, r3
 8009d92:	2008      	movs	r0, #8
 8009d94:	f001 fc86 	bl	800b6a4 <memp_free>
      break;
 8009d98:	e00d      	b.n	8009db6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	6892      	ldr	r2, [r2, #8]
 8009da2:	4610      	mov	r0, r2
 8009da4:	4798      	blx	r3
      break;
 8009da6:	e006      	b.n	8009db6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009da8:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <tcpip_thread+0xc0>)
 8009daa:	229b      	movs	r2, #155	; 0x9b
 8009dac:	4907      	ldr	r1, [pc, #28]	; (8009dcc <tcpip_thread+0xc4>)
 8009dae:	4808      	ldr	r0, [pc, #32]	; (8009dd0 <tcpip_thread+0xc8>)
 8009db0:	f00c feea 	bl	8016b88 <iprintf>
      break;
 8009db4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009db6:	e7b8      	b.n	8009d2a <tcpip_thread+0x22>
 8009db8:	200087ac 	.word	0x200087ac
 8009dbc:	200087b0 	.word	0x200087b0
 8009dc0:	2000c394 	.word	0x2000c394
 8009dc4:	200087b4 	.word	0x200087b4
 8009dc8:	08018938 	.word	0x08018938
 8009dcc:	08018968 	.word	0x08018968
 8009dd0:	08018988 	.word	0x08018988

08009dd4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009de0:	481a      	ldr	r0, [pc, #104]	; (8009e4c <tcpip_inpkt+0x78>)
 8009de2:	f00c fd51 	bl	8016888 <sys_mbox_valid>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d105      	bne.n	8009df8 <tcpip_inpkt+0x24>
 8009dec:	4b18      	ldr	r3, [pc, #96]	; (8009e50 <tcpip_inpkt+0x7c>)
 8009dee:	22b5      	movs	r2, #181	; 0xb5
 8009df0:	4918      	ldr	r1, [pc, #96]	; (8009e54 <tcpip_inpkt+0x80>)
 8009df2:	4819      	ldr	r0, [pc, #100]	; (8009e58 <tcpip_inpkt+0x84>)
 8009df4:	f00c fec8 	bl	8016b88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009df8:	2009      	movs	r0, #9
 8009dfa:	f001 fc01 	bl	800b600 <memp_malloc>
 8009dfe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d102      	bne.n	8009e0c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e0a:	e01a      	b.n	8009e42 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009e24:	6979      	ldr	r1, [r7, #20]
 8009e26:	4809      	ldr	r0, [pc, #36]	; (8009e4c <tcpip_inpkt+0x78>)
 8009e28:	f00c fcb9 	bl	801679e <sys_mbox_trypost>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d006      	beq.n	8009e40 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e32:	6979      	ldr	r1, [r7, #20]
 8009e34:	2009      	movs	r0, #9
 8009e36:	f001 fc35 	bl	800b6a4 <memp_free>
    return ERR_MEM;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e3e:	e000      	b.n	8009e42 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009e40:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200087b4 	.word	0x200087b4
 8009e50:	08018938 	.word	0x08018938
 8009e54:	080189b0 	.word	0x080189b0
 8009e58:	08018988 	.word	0x08018988

08009e5c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e6c:	f003 0318 	and.w	r3, r3, #24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009e74:	4a08      	ldr	r2, [pc, #32]	; (8009e98 <tcpip_input+0x3c>)
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ffab 	bl	8009dd4 <tcpip_inpkt>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	e005      	b.n	8009e8e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009e82:	4a06      	ldr	r2, [pc, #24]	; (8009e9c <tcpip_input+0x40>)
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff ffa4 	bl	8009dd4 <tcpip_inpkt>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	08016555 	.word	0x08016555
 8009e9c:	080154dd 	.word	0x080154dd

08009ea0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009eae:	481d      	ldr	r0, [pc, #116]	; (8009f24 <tcpip_callback_with_block+0x84>)
 8009eb0:	f00c fcea 	bl	8016888 <sys_mbox_valid>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <tcpip_callback_with_block+0x26>
 8009eba:	4b1b      	ldr	r3, [pc, #108]	; (8009f28 <tcpip_callback_with_block+0x88>)
 8009ebc:	22ee      	movs	r2, #238	; 0xee
 8009ebe:	491b      	ldr	r1, [pc, #108]	; (8009f2c <tcpip_callback_with_block+0x8c>)
 8009ec0:	481b      	ldr	r0, [pc, #108]	; (8009f30 <tcpip_callback_with_block+0x90>)
 8009ec2:	f00c fe61 	bl	8016b88 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009ec6:	2008      	movs	r0, #8
 8009ec8:	f001 fb9a 	bl	800b600 <memp_malloc>
 8009ecc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ed8:	e01f      	b.n	8009f1a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2203      	movs	r2, #3
 8009ede:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	609a      	str	r2, [r3, #8]
  if (block) {
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8009ef2:	6979      	ldr	r1, [r7, #20]
 8009ef4:	480b      	ldr	r0, [pc, #44]	; (8009f24 <tcpip_callback_with_block+0x84>)
 8009ef6:	f00c fc3d 	bl	8016774 <sys_mbox_post>
 8009efa:	e00d      	b.n	8009f18 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009efc:	6979      	ldr	r1, [r7, #20]
 8009efe:	4809      	ldr	r0, [pc, #36]	; (8009f24 <tcpip_callback_with_block+0x84>)
 8009f00:	f00c fc4d 	bl	801679e <sys_mbox_trypost>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f0a:	6979      	ldr	r1, [r7, #20]
 8009f0c:	2008      	movs	r0, #8
 8009f0e:	f001 fbc9 	bl	800b6a4 <memp_free>
      return ERR_MEM;
 8009f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f16:	e000      	b.n	8009f1a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	200087b4 	.word	0x200087b4
 8009f28:	08018938 	.word	0x08018938
 8009f2c:	080189b0 	.word	0x080189b0
 8009f30:	08018988 	.word	0x08018988

08009f34 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009f40:	4806      	ldr	r0, [pc, #24]	; (8009f5c <tcpip_send_msg_wait_sem+0x28>)
 8009f42:	f00c fd7b 	bl	8016a3c <sys_mutex_lock>
  fn(apimsg);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009f4c:	4803      	ldr	r0, [pc, #12]	; (8009f5c <tcpip_send_msg_wait_sem+0x28>)
 8009f4e:	f00c fd84 	bl	8016a5a <sys_mutex_unlock>
  return ERR_OK;
 8009f52:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	2000c394 	.word	0x2000c394

08009f60 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009f6a:	f000 ff82 	bl	800ae72 <lwip_init>

  tcpip_init_done = initfunc;
 8009f6e:	4a17      	ldr	r2, [pc, #92]	; (8009fcc <tcpip_init+0x6c>)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009f74:	4a16      	ldr	r2, [pc, #88]	; (8009fd0 <tcpip_init+0x70>)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009f7a:	2106      	movs	r1, #6
 8009f7c:	4815      	ldr	r0, [pc, #84]	; (8009fd4 <tcpip_init+0x74>)
 8009f7e:	f00c fbc5 	bl	801670c <sys_mbox_new>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d006      	beq.n	8009f96 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009f88:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <tcpip_init+0x78>)
 8009f8a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009f8e:	4913      	ldr	r1, [pc, #76]	; (8009fdc <tcpip_init+0x7c>)
 8009f90:	4813      	ldr	r0, [pc, #76]	; (8009fe0 <tcpip_init+0x80>)
 8009f92:	f00c fdf9 	bl	8016b88 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009f96:	4813      	ldr	r0, [pc, #76]	; (8009fe4 <tcpip_init+0x84>)
 8009f98:	f00c fd34 	bl	8016a04 <sys_mutex_new>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009fa2:	4b0d      	ldr	r3, [pc, #52]	; (8009fd8 <tcpip_init+0x78>)
 8009fa4:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009fa8:	490f      	ldr	r1, [pc, #60]	; (8009fe8 <tcpip_init+0x88>)
 8009faa:	480d      	ldr	r0, [pc, #52]	; (8009fe0 <tcpip_init+0x80>)
 8009fac:	f00c fdec 	bl	8016b88 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb8:	2200      	movs	r2, #0
 8009fba:	490c      	ldr	r1, [pc, #48]	; (8009fec <tcpip_init+0x8c>)
 8009fbc:	480c      	ldr	r0, [pc, #48]	; (8009ff0 <tcpip_init+0x90>)
 8009fbe:	f00c fd59 	bl	8016a74 <sys_thread_new>
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200087ac 	.word	0x200087ac
 8009fd0:	200087b0 	.word	0x200087b0
 8009fd4:	200087b4 	.word	0x200087b4
 8009fd8:	08018938 	.word	0x08018938
 8009fdc:	080189c0 	.word	0x080189c0
 8009fe0:	08018988 	.word	0x08018988
 8009fe4:	2000c394 	.word	0x2000c394
 8009fe8:	080189e4 	.word	0x080189e4
 8009fec:	08009d09 	.word	0x08009d09
 8009ff0:	08018a08 	.word	0x08018a08

08009ff4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <fs_open+0x16>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <fs_open+0x1c>
     return ERR_ARG;
 800a00a:	f06f 030f 	mvn.w	r3, #15
 800a00e:	e028      	b.n	800a062 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a010:	4b16      	ldr	r3, [pc, #88]	; (800a06c <fs_open+0x78>)
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	e020      	b.n	800a058 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f7f6 f8e7 	bl	80001f0 <strcmp>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d114      	bne.n	800a052 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	7c1a      	ldrb	r2, [r3, #16]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	e007      	b.n	800a062 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1db      	bne.n	800a016 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a05e:	f06f 0305 	mvn.w	r3, #5
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	08026188 	.word	0x08026188

0800a070 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	1ad3      	subs	r3, r2, r3
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a0aa:	22ac      	movs	r2, #172	; 0xac
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f00c fd62 	bl	8016b78 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a0c2:	20ac      	movs	r0, #172	; 0xac
 800a0c4:	f001 f92c 	bl	800b320 <mem_malloc>
 800a0c8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ffe6 	bl	800a0a2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a0d6:	687b      	ldr	r3, [r7, #4]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d007      	beq.n	800a100 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff ffbb 	bl	800a070 <fs_close>
    hs->handle = NULL;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 f82b 	bl	800c168 <pbuf_free>
    hs->req = NULL;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <http_state_free+0x1a>
    http_state_eof(hs);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff ffd6 	bl	800a0e0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 ff9b 	bl	800b070 <mem_free>
  }
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <http_write+0x22>
 800a158:	4b2c      	ldr	r3, [pc, #176]	; (800a20c <http_write+0xc8>)
 800a15a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800a15e:	492c      	ldr	r1, [pc, #176]	; (800a210 <http_write+0xcc>)
 800a160:	482c      	ldr	r0, [pc, #176]	; (800a214 <http_write+0xd0>)
 800a162:	f00c fd11 	bl	8016b88 <iprintf>
  len = *length;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a16c:	8afb      	ldrh	r3, [r7, #22]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d101      	bne.n	800a176 <http_write+0x32>
    return ERR_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	e045      	b.n	800a202 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a17c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a17e:	8aba      	ldrh	r2, [r7, #20]
 800a180:	8afb      	ldrh	r3, [r7, #22]
 800a182:	429a      	cmp	r2, r3
 800a184:	d201      	bcs.n	800a18a <http_write+0x46>
    len = max_len;
 800a186:	8abb      	ldrh	r3, [r7, #20]
 800a188:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800a192:	8afa      	ldrh	r2, [r7, #22]
 800a194:	8abb      	ldrh	r3, [r7, #20]
 800a196:	429a      	cmp	r2, r3
 800a198:	d901      	bls.n	800a19e <http_write+0x5a>
    len = max_len;
 800a19a:	8abb      	ldrh	r3, [r7, #20]
 800a19c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	8afa      	ldrh	r2, [r7, #22]
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f006 fb0d 	bl	80107c4 <tcp_write>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a1ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b6:	d10f      	bne.n	800a1d8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d902      	bls.n	800a1d2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	82fb      	strh	r3, [r7, #22]
 800a1d0:	e002      	b.n	800a1d8 <http_write+0x94>
      } else {
        len /= 2;
 800a1d2:	8afb      	ldrh	r3, [r7, #22]
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e0:	d102      	bne.n	800a1e8 <http_write+0xa4>
 800a1e2:	8afb      	ldrh	r3, [r7, #22]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d8da      	bhi.n	800a19e <http_write+0x5a>

  if (err == ERR_OK) {
 800a1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	8afa      	ldrh	r2, [r7, #22]
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	e002      	b.n	800a1fe <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800a1fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	08018a58 	.word	0x08018a58
 800a210:	08018a90 	.word	0x08018a90
 800a214:	08018aa0 	.word	0x08018aa0

0800a218 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f003 fc89 	bl	800db40 <tcp_arg>
  tcp_recv(pcb, NULL);
 800a22e:	2100      	movs	r1, #0
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f003 fc97 	bl	800db64 <tcp_recv>
  tcp_err(pcb, NULL);
 800a236:	2100      	movs	r1, #0
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f003 fcd5 	bl	800dbe8 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f003 fd0a 	bl	800dc5c <tcp_poll>
  tcp_sent(pcb, NULL);
 800a248:	2100      	movs	r1, #0
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f003 fcac 	bl	800dba8 <tcp_sent>
  if (hs != NULL) {
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a256:	68b8      	ldr	r0, [r7, #8]
 800a258:	f7ff ff62 	bl	800a120 <http_state_free>
  }

  if (abort_conn) {
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d004      	beq.n	800a26c <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f002 fcd6 	bl	800cc14 <tcp_abort>
    return ERR_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	e00f      	b.n	800a28c <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f002 fbbf 	bl	800c9f0 <tcp_close>
 800a272:	4603      	mov	r3, r0
 800a274:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a276:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d004      	beq.n	800a288 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a27e:	2204      	movs	r2, #4
 800a280:	4904      	ldr	r1, [pc, #16]	; (800a294 <http_close_or_abort_conn+0x7c>)
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f003 fcea 	bl	800dc5c <tcp_poll>
  }
  return err;
 800a288:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	0800aab7 	.word	0x0800aab7

0800a298 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ffb6 	bl	800a218 <http_close_or_abort_conn>
 800a2ac:	4603      	mov	r3, r0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7ff ffe8 	bl	800a298 <http_close_conn>
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <extract_uri_parameters+0x18>
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <extract_uri_parameters+0x1c>
      return(0);
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e04e      	b.n	800a38a <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	613b      	str	r3, [r7, #16]
 800a2f4:	e042      	b.n	800a37c <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	330a      	adds	r3, #10
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800a308:	2126      	movs	r1, #38	; 0x26
 800a30a:	6978      	ldr	r0, [r7, #20]
 800a30c:	f00c fcc6 	bl	8016c9c <strchr>
 800a310:	6178      	str	r0, [r7, #20]
    if(pair) {
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d006      	beq.n	800a326 <extract_uri_parameters+0x56>
      *pair = '\0';
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]
      pair++;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3301      	adds	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e00c      	b.n	800a340 <extract_uri_parameters+0x70>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800a326:	2120      	movs	r1, #32
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f00c fcb7 	bl	8016c9c <strchr>
 800a32e:	6178      	str	r0, [r7, #20]
        if(pair) {
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <extract_uri_parameters+0x6c>
            *pair = '\0';
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2200      	movs	r2, #0
 800a33a:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800a340:	213d      	movs	r1, #61	; 0x3d
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f00c fcaa 	bl	8016c9c <strchr>
 800a348:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <extract_uri_parameters+0x98>
      *equals = '\0';
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	331a      	adds	r3, #26
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	440b      	add	r3, r1
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	e006      	b.n	800a376 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	331a      	adds	r3, #26
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	2200      	movs	r2, #0
 800a374:	605a      	str	r2, [r3, #4]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	3301      	adds	r3, #1
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b0f      	cmp	r3, #15
 800a380:	dc02      	bgt.n	800a388 <extract_uri_parameters+0xb8>
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1b6      	bne.n	800a2f6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800a388:	693b      	ldr	r3, [r7, #16]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d105      	bne.n	800a3b2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff ff84 	bl	800a2b6 <http_eof>
    return 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e016      	b.n	800a3e0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fe64 	bl	800a084 <fs_bytes_left>
 800a3bc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc05      	bgt.n	800a3d0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff ff75 	bl	800a2b6 <http_eof>
    return 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e007      	b.n	800a3e0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a3d0:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <http_check_eof+0x54>)
 800a3d2:	f240 4283 	movw	r2, #1155	; 0x483
 800a3d6:	4905      	ldr	r1, [pc, #20]	; (800a3ec <http_check_eof+0x58>)
 800a3d8:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <http_check_eof+0x5c>)
 800a3da:	f00c fbd5 	bl	8016b88 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a3de:	2301      	movs	r3, #1
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	08018a58 	.word	0x08018a58
 800a3ec:	08018ac8 	.word	0x08018ac8
 800a3f0:	08018aa0 	.word	0x08018aa0

0800a3f4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d803      	bhi.n	800a416 <http_send_data_nonssi+0x22>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	b29b      	uxth	r3, r3
 800a414:	e001      	b.n	800a41a <http_send_data_nonssi+0x26>
 800a416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a41a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6998      	ldr	r0, [r3, #24]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d012      	beq.n	800a44e <http_send_data_nonssi+0x5a>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00e      	beq.n	800a44e <http_send_data_nonssi+0x5a>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	699a      	ldr	r2, [r3, #24]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	461c      	mov	r4, r3
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a446:	1ae3      	subs	r3, r4, r3
 800a448:	440b      	add	r3, r1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d001      	beq.n	800a452 <http_send_data_nonssi+0x5e>
 800a44e:	2301      	movs	r3, #1
 800a450:	e000      	b.n	800a454 <http_send_data_nonssi+0x60>
 800a452:	2300      	movs	r3, #0
 800a454:	b2db      	uxtb	r3, r3
 800a456:	f107 020c 	add.w	r2, r7, #12
 800a45a:	4601      	mov	r1, r0
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fe71 	bl	800a144 <http_write>
 800a462:	4603      	mov	r3, r0
 800a464:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10d      	bne.n	800a48a <http_send_data_nonssi+0x96>
    data_to_send = 1;
 800a46e:	2301      	movs	r3, #1
 800a470:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	89ba      	ldrh	r2, [r7, #12]
 800a478:	441a      	add	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	89ba      	ldrh	r2, [r7, #12]
 800a484:	1a9a      	subs	r2, r3, r2
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <http_send+0x18>
    return 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e025      	b.n	800a4f8 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d108      	bne.n	800a4c6 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff ff6c 	bl	800a394 <http_check_eof>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <http_send+0x32>
      return 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e018      	b.n	800a4f8 <http_send+0x64>
  if(hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7ff ff93 	bl	800a3f4 <http_send_data_nonssi>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10d      	bne.n	800a4f6 <http_send+0x62>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fdd0 	bl	800a084 <fs_bytes_left>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dc05      	bgt.n	800a4f6 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fee2 	bl	800a2b6 <http_eof>
    return 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	e000      	b.n	800a4f8 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	4a1c      	ldr	r2, [pc, #112]	; (800a580 <http_get_404_file+0x80>)
 800a50e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7ff fd6b 	bl	8009ff4 <fs_open>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d024      	beq.n	800a574 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	4a15      	ldr	r2, [pc, #84]	; (800a584 <http_get_404_file+0x84>)
 800a52e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7ff fd5b 	bl	8009ff4 <fs_open>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d014      	beq.n	800a574 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	4a0e      	ldr	r2, [pc, #56]	; (800a588 <http_get_404_file+0x88>)
 800a54e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4619      	mov	r1, r3
 800a558:	4610      	mov	r0, r2
 800a55a:	f7ff fd4b 	bl	8009ff4 <fs_open>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d004      	beq.n	800a574 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
        return NULL;
 800a570:	2300      	movs	r3, #0
 800a572:	e000      	b.n	800a576 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a574:	687b      	ldr	r3, [r7, #4]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	08018b00 	.word	0x08018b00
 800a584:	08018b0c 	.word	0x08018b0c
 800a588:	08018b18 	.word	0x08018b18

0800a58c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08e      	sub	sp, #56	; 0x38
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <http_parse_request+0x24>
 800a5a2:	4b65      	ldr	r3, [pc, #404]	; (800a738 <http_parse_request+0x1ac>)
 800a5a4:	f240 727e 	movw	r2, #1918	; 0x77e
 800a5a8:	4964      	ldr	r1, [pc, #400]	; (800a73c <http_parse_request+0x1b0>)
 800a5aa:	4865      	ldr	r0, [pc, #404]	; (800a740 <http_parse_request+0x1b4>)
 800a5ac:	f00c faec 	bl	8016b88 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <http_parse_request+0x38>
 800a5b6:	4b60      	ldr	r3, [pc, #384]	; (800a738 <http_parse_request+0x1ac>)
 800a5b8:	f240 727f 	movw	r2, #1919	; 0x77f
 800a5bc:	4961      	ldr	r1, [pc, #388]	; (800a744 <http_parse_request+0x1b8>)
 800a5be:	4860      	ldr	r0, [pc, #384]	; (800a740 <http_parse_request+0x1b4>)
 800a5c0:	f00c fae2 	bl	8016b88 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d103      	bne.n	800a5d4 <http_parse_request+0x48>
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a5d4:	f06f 0307 	mvn.w	r3, #7
 800a5d8:	e0aa      	b.n	800a730 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d103      	bne.n	800a5ea <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e6:	621a      	str	r2, [r3, #32]
 800a5e8:	e005      	b.n	800a5f6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fe93 	bl	800c31c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5f8:	f001 fe68 	bl	800c2cc <pbuf_ref>

  if (hs->req->next != NULL) {
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d012      	beq.n	800a62c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	891b      	ldrh	r3, [r3, #8]
 800a60c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a610:	4293      	cmp	r3, r2
 800a612:	bf28      	it	cs
 800a614:	4613      	movcs	r3, r2
 800a616:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	6a18      	ldr	r0, [r3, #32]
 800a61c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a61e:	2300      	movs	r3, #0
 800a620:	4949      	ldr	r1, [pc, #292]	; (800a748 <http_parse_request+0x1bc>)
 800a622:	f001 ffad 	bl	800c580 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a626:	4b48      	ldr	r3, [pc, #288]	; (800a748 <http_parse_request+0x1bc>)
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
 800a62a:	e005      	b.n	800a638 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	895b      	ldrh	r3, [r3, #10]
 800a636:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a638:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	d963      	bls.n	800a706 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a63e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a640:	461a      	mov	r2, r3
 800a642:	4942      	ldr	r1, [pc, #264]	; (800a74c <http_parse_request+0x1c0>)
 800a644:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a646:	f000 fbde 	bl	800ae06 <lwip_strnstr>
 800a64a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d059      	beq.n	800a706 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a656:	2204      	movs	r2, #4
 800a658:	493d      	ldr	r1, [pc, #244]	; (800a750 <http_parse_request+0x1c4>)
 800a65a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a65c:	f00c fb2b 	bl	8016cb6 <strncmp>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d117      	bne.n	800a696 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a668:	3303      	adds	r3, #3
 800a66a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	3301      	adds	r3, #1
 800a670:	461a      	mov	r2, r3
 800a672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	b29b      	uxth	r3, r3
 800a678:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	3301      	adds	r3, #1
 800a682:	8b7a      	ldrh	r2, [r7, #26]
 800a684:	4933      	ldr	r1, [pc, #204]	; (800a754 <http_parse_request+0x1c8>)
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fbbd 	bl	800ae06 <lwip_strnstr>
 800a68c:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	2b00      	cmp	r3, #0
 800a692:	d111      	bne.n	800a6b8 <http_parse_request+0x12c>
 800a694:	e006      	b.n	800a6a4 <http_parse_request+0x118>
        data[4] = 0;
 800a696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a698:	3304      	adds	r3, #4
 800a69a:	2200      	movs	r2, #0
 800a69c:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a69e:	f06f 030f 	mvn.w	r3, #15
 800a6a2:	e045      	b.n	800a730 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	8b7a      	ldrh	r2, [r7, #26]
 800a6aa:	4928      	ldr	r1, [pc, #160]	; (800a74c <http_parse_request+0x1c0>)
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fbaa 	bl	800ae06 <lwip_strnstr>
 800a6b2:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	3201      	adds	r2, #1
 800a6be:	1a9b      	subs	r3, r3, r2
 800a6c0:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d01e      	beq.n	800a706 <http_parse_request+0x17a>
 800a6c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d91a      	bls.n	800a706 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a6d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4920      	ldr	r1, [pc, #128]	; (800a758 <http_parse_request+0x1cc>)
 800a6d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a6d8:	f000 fb95 	bl	800ae06 <lwip_strnstr>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d011      	beq.n	800a706 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a6ee:	8b3b      	ldrh	r3, [r7, #24]
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	68b8      	ldr	r0, [r7, #8]
 800a6fe:	f000 f82d 	bl	800a75c <http_find_file>
 800a702:	4603      	mov	r3, r0
 800a704:	e014      	b.n	800a730 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 fdc6 	bl	800c29c <pbuf_clen>
 800a710:	4603      	mov	r3, r0
 800a712:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	891b      	ldrh	r3, [r3, #8]
 800a71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a71e:	d205      	bcs.n	800a72c <http_parse_request+0x1a0>
 800a720:	8a7b      	ldrh	r3, [r7, #18]
 800a722:	2b05      	cmp	r3, #5
 800a724:	d802      	bhi.n	800a72c <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a726:	f06f 0304 	mvn.w	r3, #4
 800a72a:	e001      	b.n	800a730 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a72c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a730:	4618      	mov	r0, r3
 800a732:	3738      	adds	r7, #56	; 0x38
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	08018a58 	.word	0x08018a58
 800a73c:	08018b24 	.word	0x08018b24
 800a740:	08018aa0 	.word	0x08018aa0
 800a744:	08018b30 	.word	0x08018b30
 800a748:	200087b8 	.word	0x200087b8
 800a74c:	08018b3c 	.word	0x08018b3c
 800a750:	08018b40 	.word	0x08018b40
 800a754:	08018b48 	.word	0x08018b48
 800a758:	08018b4c 	.word	0x08018b4c

0800a75c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a75c:	b590      	push	{r4, r7, lr}
 800a75e:	b093      	sub	sp, #76	; 0x4c
 800a760:	af02      	add	r7, sp, #8
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a768:	2300      	movs	r3, #0
 800a76a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7f5 fd43 	bl	8000204 <strlen>
 800a77e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d065      	beq.n	800a852 <http_find_file+0xf6>
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	3b01      	subs	r3, #1
 800a78c:	4413      	add	r3, r2
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b2f      	cmp	r3, #47	; 0x2f
 800a792:	d15e      	bne.n	800a852 <http_find_file+0xf6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a794:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a796:	4a6f      	ldr	r2, [pc, #444]	; (800a954 <http_find_file+0x1f8>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d102      	bne.n	800a7a2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d157      	bne.n	800a852 <http_find_file+0xf6>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	2b3f      	cmp	r3, #63	; 0x3f
 800a7a8:	bf28      	it	cs
 800a7aa:	233f      	movcs	r3, #63	; 0x3f
 800a7ac:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6a3a      	ldr	r2, [r7, #32]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4866      	ldr	r0, [pc, #408]	; (800a954 <http_find_file+0x1f8>)
 800a7bc:	f00c f9d1 	bl	8016b62 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a7c0:	4a64      	ldr	r2, [pc, #400]	; (800a954 <http_find_file+0x1f8>)
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ce:	e03d      	b.n	800a84c <http_find_file+0xf0>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d022      	beq.n	800a81c <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a7dc:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d018      	beq.n	800a816 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800a7e4:	4a5c      	ldr	r2, [pc, #368]	; (800a958 <http_find_file+0x1fc>)
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7f5 fd09 	bl	8000204 <strlen>
 800a7f2:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	bf28      	it	cs
 800a7fc:	4613      	movcs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800a800:	6a3b      	ldr	r3, [r7, #32]
 800a802:	4a54      	ldr	r2, [pc, #336]	; (800a954 <http_find_file+0x1f8>)
 800a804:	1898      	adds	r0, r3, r2
 800a806:	4a54      	ldr	r2, [pc, #336]	; (800a958 <http_find_file+0x1fc>)
 800a808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4619      	mov	r1, r3
 800a812:	f00c f9a6 	bl	8016b62 <memcpy>
        }
        file_name = http_uri_buf;
 800a816:	4b4f      	ldr	r3, [pc, #316]	; (800a954 <http_find_file+0x1f8>)
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a81a:	e004      	b.n	800a826 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800a81c:	4a4e      	ldr	r2, [pc, #312]	; (800a958 <http_find_file+0x1fc>)
 800a81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fbe2 	bl	8009ff4 <fs_open>
 800a830:	4603      	mov	r3, r0
 800a832:	74fb      	strb	r3, [r7, #19]
      if(err == ERR_OK) {
 800a834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <http_find_file+0xea>
        uri = file_name;
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a844:	e005      	b.n	800a852 <http_find_file+0xf6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a848:	3301      	adds	r3, #1
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d9be      	bls.n	800a7d0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d161      	bne.n	800a91c <http_find_file+0x1c0>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	213f      	movs	r1, #63	; 0x3f
 800a85c:	4618      	mov	r0, r3
 800a85e:	f00c fa1d 	bl	8016c9c <strchr>
 800a862:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a866:	2b00      	cmp	r3, #0
 800a868:	d005      	beq.n	800a876 <http_find_file+0x11a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
      params++;
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	3301      	adds	r3, #1
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800a876:	4b39      	ldr	r3, [pc, #228]	; (800a95c <http_find_file+0x200>)
 800a878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a87c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800a87e:	4b38      	ldr	r3, [pc, #224]	; (800a960 <http_find_file+0x204>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d034      	beq.n	800a8f0 <http_find_file+0x194>
 800a886:	4b37      	ldr	r3, [pc, #220]	; (800a964 <http_find_file+0x208>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d030      	beq.n	800a8f0 <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 800a88e:	2300      	movs	r3, #0
 800a890:	633b      	str	r3, [r7, #48]	; 0x30
 800a892:	e028      	b.n	800a8e6 <http_find_file+0x18a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800a894:	68b8      	ldr	r0, [r7, #8]
 800a896:	4b33      	ldr	r3, [pc, #204]	; (800a964 <http_find_file+0x208>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4413      	add	r3, r2
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	f7f5 fca4 	bl	80001f0 <strcmp>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d118      	bne.n	800a8e0 <http_find_file+0x184>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800a8ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f7ff fd0d 	bl	800a2d0 <extract_uri_parameters>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b28      	ldr	r3, [pc, #160]	; (800a95c <http_find_file+0x200>)
 800a8ba:	601a      	str	r2, [r3, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a8bc:	4b29      	ldr	r3, [pc, #164]	; (800a964 <http_find_file+0x208>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	685c      	ldr	r4, [r3, #4]
 800a8c8:	4b24      	ldr	r3, [pc, #144]	; (800a95c <http_find_file+0x200>)
 800a8ca:	6819      	ldr	r1, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                          hs->param_vals);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	336c      	adds	r3, #108	; 0x6c
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d8:	47a0      	blx	r4
 800a8da:	4603      	mov	r3, r0
 800a8dc:	60bb      	str	r3, [r7, #8]
           break;
 800a8de:	e007      	b.n	800a8f0 <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8e6:	4b1e      	ldr	r3, [pc, #120]	; (800a960 <http_find_file+0x204>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	dbd1      	blt.n	800a894 <http_find_file+0x138>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fb7c 	bl	8009ff4 <fs_open>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800a900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d102      	bne.n	800a90e <http_find_file+0x1b2>
       file = &hs->file_handle;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a90c:	e006      	b.n	800a91c <http_find_file+0x1c0>
    } else {
      file = http_get_404_file(hs, &uri);
 800a90e:	f107 0308 	add.w	r3, r7, #8
 800a912:	4619      	mov	r1, r3
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff fdf3 	bl	800a500 <http_get_404_file>
 800a91a:	63b8      	str	r0, [r7, #56]	; 0x38
         *param = '?';
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <http_find_file+0x1d4>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a922:	f107 0308 	add.w	r3, r7, #8
 800a926:	4619      	mov	r1, r3
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff fde9 	bl	800a500 <http_get_404_file>
 800a92e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4613      	mov	r3, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 f810 	bl	800a968 <http_init_file>
 800a948:	4603      	mov	r3, r0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3744      	adds	r7, #68	; 0x44
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd90      	pop	{r4, r7, pc}
 800a952:	bf00      	nop
 800a954:	20008bb8 	.word	0x20008bb8
 800a958:	0802619c 	.word	0x0802619c
 800a95c:	2000c39c 	.word	0x2000c39c
 800a960:	2000c398 	.word	0x2000c398
 800a964:	2000c3a0 	.word	0x2000c3a0

0800a968 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d052      	beq.n	800aa22 <http_init_file+0xba>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	da06      	bge.n	800a9a0 <http_init_file+0x38>
 800a992:	4b2d      	ldr	r3, [pc, #180]	; (800aa48 <http_init_file+0xe0>)
 800a994:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800a998:	492c      	ldr	r1, [pc, #176]	; (800aa4c <http_init_file+0xe4>)
 800a99a:	482d      	ldr	r0, [pc, #180]	; (800aa50 <http_init_file+0xe8>)
 800a99c:	f00c f8f4 	bl	8016b88 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	7c1b      	ldrb	r3, [r3, #16]
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <http_init_file+0x66>
 800a9c0:	4b21      	ldr	r3, [pc, #132]	; (800aa48 <http_init_file+0xe0>)
 800a9c2:	f640 02df 	movw	r2, #2271	; 0x8df
 800a9c6:	4923      	ldr	r1, [pc, #140]	; (800aa54 <http_init_file+0xec>)
 800a9c8:	4821      	ldr	r0, [pc, #132]	; (800aa50 <http_init_file+0xe8>)
 800a9ca:	f00c f8dd 	bl	8016b88 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d033      	beq.n	800aa3c <http_init_file+0xd4>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	7c1b      	ldrb	r3, [r3, #16]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d02c      	beq.n	800aa3c <http_init_file+0xd4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6998      	ldr	r0, [r3, #24]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	491a      	ldr	r1, [pc, #104]	; (800aa58 <http_init_file+0xf0>)
 800a9ee:	f000 fa0a 	bl	800ae06 <lwip_strnstr>
 800a9f2:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d020      	beq.n	800aa3c <http_init_file+0xd4>
        size_t diff = file_start + 4 - hs->file;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	461a      	mov	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	699a      	ldr	r2, [r3, #24]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	441a      	add	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	625a      	str	r2, [r3, #36]	; 0x24
 800aa20:	e00c      	b.n	800aa3c <http_init_file+0xd4>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	08018a58 	.word	0x08018a58
 800aa4c:	08018b54 	.word	0x08018b54
 800aa50:	08018aa0 	.word	0x08018aa0
 800aa54:	08018b74 	.word	0x08018b74
 800aa58:	08018b4c 	.word	0x08018b4c

0800aa5c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <http_err+0x1c>
    http_state_free(hs);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7ff fb54 	bl	800a120 <http_state_free>
  }
}
 800aa78:	bf00      	nop
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b086      	sub	sp, #24
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <http_sent+0x1c>
    return ERR_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e008      	b.n	800aaae <http_sent+0x2e>
  }

  hs->retries = 0;
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aaa4:	6979      	ldr	r1, [r7, #20]
 800aaa6:	68b8      	ldr	r0, [r7, #8]
 800aaa8:	f7ff fcf4 	bl	800a494 <http_send>

  return ERR_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d107      	bne.n	800aada <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aaca:	2100      	movs	r1, #0
 800aacc:	6838      	ldr	r0, [r7, #0]
 800aace:	f7ff fbe3 	bl	800a298 <http_close_conn>
 800aad2:	4603      	mov	r3, r0
 800aad4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	e024      	b.n	800ab24 <http_poll+0x6e>
  } else {
    hs->retries++;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aae0:	3301      	adds	r3, #1
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d105      	bne.n	800ab00 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800aaf4:	68f9      	ldr	r1, [r7, #12]
 800aaf6:	6838      	ldr	r0, [r7, #0]
 800aaf8:	f7ff fbce 	bl	800a298 <http_close_conn>
      return ERR_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	e011      	b.n	800ab24 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00d      	beq.n	800ab22 <http_poll+0x6c>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d009      	beq.n	800ab22 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6838      	ldr	r0, [r7, #0]
 800ab12:	f7ff fcbf 	bl	800a494 <http_send>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800ab1c:	6838      	ldr	r0, [r7, #0]
 800ab1e:	f006 fb03 	bl	8011128 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800ab3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d105      	bne.n	800ab52 <http_recv+0x26>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <http_recv+0x26>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d111      	bne.n	800ab76 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	891b      	ldrh	r3, [r3, #8]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	68b8      	ldr	r0, [r7, #8]
 800ab60:	f002 f9fe 	bl	800cf60 <tcp_recved>
      pbuf_free(p);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 faff 	bl	800c168 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ab6a:	6979      	ldr	r1, [r7, #20]
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f7ff fb93 	bl	800a298 <http_close_conn>
    return ERR_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	e055      	b.n	800ac22 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	891b      	ldrh	r3, [r3, #8]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	68b8      	ldr	r0, [r7, #8]
 800ab7e:	f002 f9ef 	bl	800cf60 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d147      	bne.n	800ac1a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	6979      	ldr	r1, [r7, #20]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff fcfc 	bl	800a58c <http_parse_request>
 800ab94:	4603      	mov	r3, r0
 800ab96:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ab98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d015      	beq.n	800abcc <http_recv+0xa0>
 800aba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aba4:	f113 0f05 	cmn.w	r3, #5
 800aba8:	d010      	beq.n	800abcc <http_recv+0xa0>
 800abaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abae:	f113 0f10 	cmn.w	r3, #16
 800abb2:	d00b      	beq.n	800abcc <http_recv+0xa0>
 800abb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abb8:	f113 0f08 	cmn.w	r3, #8
 800abbc:	d006      	beq.n	800abcc <http_recv+0xa0>
 800abbe:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <http_recv+0x100>)
 800abc0:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800abc4:	491a      	ldr	r1, [pc, #104]	; (800ac30 <http_recv+0x104>)
 800abc6:	481b      	ldr	r0, [pc, #108]	; (800ac34 <http_recv+0x108>)
 800abc8:	f00b ffde 	bl	8016b88 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800abcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abd0:	f113 0f05 	cmn.w	r3, #5
 800abd4:	d00b      	beq.n	800abee <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d007      	beq.n	800abee <http_recv+0xc2>
          pbuf_free(hs->req);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 fac0 	bl	800c168 <pbuf_free>
          hs->req = NULL;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2200      	movs	r2, #0
 800abec:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f001 faba 	bl	800c168 <pbuf_free>
      if (parsed == ERR_OK) {
 800abf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800abfc:	6979      	ldr	r1, [r7, #20]
 800abfe:	68b8      	ldr	r0, [r7, #8]
 800ac00:	f7ff fc48 	bl	800a494 <http_send>
 800ac04:	e00c      	b.n	800ac20 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ac06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac0a:	f113 0f10 	cmn.w	r3, #16
 800ac0e:	d107      	bne.n	800ac20 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ac10:	6979      	ldr	r1, [r7, #20]
 800ac12:	68b8      	ldr	r0, [r7, #8]
 800ac14:	f7ff fb40 	bl	800a298 <http_close_conn>
 800ac18:	e002      	b.n	800ac20 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 faa4 	bl	800c168 <pbuf_free>
    }
  }
  return ERR_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	08018a58 	.word	0x08018a58
 800ac30:	08018ba0 	.word	0x08018ba0
 800ac34:	08018aa0 	.word	0x08018aa0

0800ac38 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ac46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <http_accept+0x1c>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <http_accept+0x22>
    return ERR_VAL;
 800ac54:	f06f 0305 	mvn.w	r3, #5
 800ac58:	e025      	b.n	800aca6 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	68b8      	ldr	r0, [r7, #8]
 800ac5e:	f002 fdd6 	bl	800d80e <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ac62:	f7ff fa2b 	bl	800a0bc <http_state_alloc>
 800ac66:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d102      	bne.n	800ac74 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac72:	e018      	b.n	800aca6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	68b8      	ldr	r0, [r7, #8]
 800ac7e:	f002 ff5f 	bl	800db40 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800ac82:	490b      	ldr	r1, [pc, #44]	; (800acb0 <http_accept+0x78>)
 800ac84:	68b8      	ldr	r0, [r7, #8]
 800ac86:	f002 ff6d 	bl	800db64 <tcp_recv>
  tcp_err(pcb, http_err);
 800ac8a:	490a      	ldr	r1, [pc, #40]	; (800acb4 <http_accept+0x7c>)
 800ac8c:	68b8      	ldr	r0, [r7, #8]
 800ac8e:	f002 ffab 	bl	800dbe8 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ac92:	2204      	movs	r2, #4
 800ac94:	4908      	ldr	r1, [pc, #32]	; (800acb8 <http_accept+0x80>)
 800ac96:	68b8      	ldr	r0, [r7, #8]
 800ac98:	f002 ffe0 	bl	800dc5c <tcp_poll>
  tcp_sent(pcb, http_sent);
 800ac9c:	4907      	ldr	r1, [pc, #28]	; (800acbc <http_accept+0x84>)
 800ac9e:	68b8      	ldr	r0, [r7, #8]
 800aca0:	f002 ff82 	bl	800dba8 <tcp_sent>

  return ERR_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	0800ab2d 	.word	0x0800ab2d
 800acb4:	0800aa5d 	.word	0x0800aa5d
 800acb8:	0800aab7 	.word	0x0800aab7
 800acbc:	0800aa81 	.word	0x0800aa81

0800acc0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800acc6:	202e      	movs	r0, #46	; 0x2e
 800acc8:	f002 ff2c 	bl	800db24 <tcp_new_ip_type>
 800accc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <httpd_init+0x22>
 800acd4:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <httpd_init+0x7c>)
 800acd6:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800acda:	4919      	ldr	r1, [pc, #100]	; (800ad40 <httpd_init+0x80>)
 800acdc:	4819      	ldr	r0, [pc, #100]	; (800ad44 <httpd_init+0x84>)
 800acde:	f00b ff53 	bl	8016b88 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ace2:	2101      	movs	r1, #1
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f002 fd92 	bl	800d80e <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800acea:	2250      	movs	r2, #80	; 0x50
 800acec:	4916      	ldr	r1, [pc, #88]	; (800ad48 <httpd_init+0x88>)
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 ff9c 	bl	800cc2c <tcp_bind>
 800acf4:	4603      	mov	r3, r0
 800acf6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800acf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <httpd_init+0x4e>
 800ad00:	4b0e      	ldr	r3, [pc, #56]	; (800ad3c <httpd_init+0x7c>)
 800ad02:	f640 2215 	movw	r2, #2581	; 0xa15
 800ad06:	4911      	ldr	r1, [pc, #68]	; (800ad4c <httpd_init+0x8c>)
 800ad08:	480e      	ldr	r0, [pc, #56]	; (800ad44 <httpd_init+0x84>)
 800ad0a:	f00b ff3d 	bl	8016b88 <iprintf>
  pcb = tcp_listen(pcb);
 800ad0e:	21ff      	movs	r1, #255	; 0xff
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f002 f82d 	bl	800cd70 <tcp_listen_with_backlog>
 800ad16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d106      	bne.n	800ad2c <httpd_init+0x6c>
 800ad1e:	4b07      	ldr	r3, [pc, #28]	; (800ad3c <httpd_init+0x7c>)
 800ad20:	f640 2217 	movw	r2, #2583	; 0xa17
 800ad24:	490a      	ldr	r1, [pc, #40]	; (800ad50 <httpd_init+0x90>)
 800ad26:	4807      	ldr	r0, [pc, #28]	; (800ad44 <httpd_init+0x84>)
 800ad28:	f00b ff2e 	bl	8016b88 <iprintf>
  tcp_accept(pcb, http_accept);
 800ad2c:	4909      	ldr	r1, [pc, #36]	; (800ad54 <httpd_init+0x94>)
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f002 ff7c 	bl	800dc2c <tcp_accept>
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	08018a58 	.word	0x08018a58
 800ad40:	08018bcc 	.word	0x08018bcc
 800ad44:	08018aa0 	.word	0x08018aa0
 800ad48:	080262e4 	.word	0x080262e4
 800ad4c:	08018be8 	.word	0x08018be8
 800ad50:	08018c04 	.word	0x08018c04
 800ad54:	0800ac39 	.word	0x0800ac39

0800ad58 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <http_set_cgi_handlers+0x1e>
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <http_set_cgi_handlers+0x48>)
 800ad6a:	f640 2242 	movw	r2, #2626	; 0xa42
 800ad6e:	490d      	ldr	r1, [pc, #52]	; (800ada4 <http_set_cgi_handlers+0x4c>)
 800ad70:	480d      	ldr	r0, [pc, #52]	; (800ada8 <http_set_cgi_handlers+0x50>)
 800ad72:	f00b ff09 	bl	8016b88 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dc06      	bgt.n	800ad8a <http_set_cgi_handlers+0x32>
 800ad7c:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <http_set_cgi_handlers+0x48>)
 800ad7e:	f640 2243 	movw	r2, #2627	; 0xa43
 800ad82:	490a      	ldr	r1, [pc, #40]	; (800adac <http_set_cgi_handlers+0x54>)
 800ad84:	4808      	ldr	r0, [pc, #32]	; (800ada8 <http_set_cgi_handlers+0x50>)
 800ad86:	f00b feff 	bl	8016b88 <iprintf>

  g_pCGIs = cgis;
 800ad8a:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <http_set_cgi_handlers+0x58>)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800ad90:	4a08      	ldr	r2, [pc, #32]	; (800adb4 <http_set_cgi_handlers+0x5c>)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	6013      	str	r3, [r2, #0]
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	08018a58 	.word	0x08018a58
 800ada4:	08018c24 	.word	0x08018c24
 800ada8:	08018aa0 	.word	0x08018aa0
 800adac:	08018c34 	.word	0x08018c34
 800adb0:	2000c3a0 	.word	0x2000c3a0
 800adb4:	2000c398 	.word	0x2000c398

0800adb8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	ba5b      	rev16	r3, r3
 800adc6:	b29b      	uxth	r3, r3
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	061a      	lsls	r2, r3, #24
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ade8:	431a      	orrs	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	0a1b      	lsrs	r3, r3, #8
 800adee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	0e1b      	lsrs	r3, r3, #24
 800adf8:	4313      	orrs	r3, r2
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b086      	sub	sp, #24
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800ae12:	68b8      	ldr	r0, [r7, #8]
 800ae14:	f7f5 f9f6 	bl	8000204 <strlen>
 800ae18:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	e022      	b.n	800ae6a <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	e012      	b.n	800ae50 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	781a      	ldrb	r2, [r3, #0]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d109      	bne.n	800ae4a <lwip_strnstr+0x44>
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	6978      	ldr	r0, [r7, #20]
 800ae3c:	f00b ff3b 	bl	8016cb6 <strncmp>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	e00f      	b.n	800ae6a <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d007      	beq.n	800ae68 <lwip_strnstr+0x62>
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	441a      	add	r2, r3
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	440b      	add	r3, r1
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d9e0      	bls.n	800ae2a <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ae7c:	f00b fdb4 	bl	80169e8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ae80:	f000 f8a6 	bl	800afd0 <mem_init>
  memp_init();
 800ae84:	f000 fb70 	bl	800b568 <memp_init>
  pbuf_init();
  netif_init();
 800ae88:	f000 fc36 	bl	800b6f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ae8c:	f006 ffc6 	bl	8011e1c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ae90:	f001 fbf0 	bl	800c674 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ae94:	f006 fe58 	bl	8011b48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ae98:	bf00      	nop
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aea8:	4b40      	ldr	r3, [pc, #256]	; (800afac <plug_holes+0x10c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d206      	bcs.n	800aec0 <plug_holes+0x20>
 800aeb2:	4b3f      	ldr	r3, [pc, #252]	; (800afb0 <plug_holes+0x110>)
 800aeb4:	f240 125d 	movw	r2, #349	; 0x15d
 800aeb8:	493e      	ldr	r1, [pc, #248]	; (800afb4 <plug_holes+0x114>)
 800aeba:	483f      	ldr	r0, [pc, #252]	; (800afb8 <plug_holes+0x118>)
 800aebc:	f00b fe64 	bl	8016b88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aec0:	4b3e      	ldr	r3, [pc, #248]	; (800afbc <plug_holes+0x11c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d306      	bcc.n	800aed8 <plug_holes+0x38>
 800aeca:	4b39      	ldr	r3, [pc, #228]	; (800afb0 <plug_holes+0x110>)
 800aecc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800aed0:	493b      	ldr	r1, [pc, #236]	; (800afc0 <plug_holes+0x120>)
 800aed2:	4839      	ldr	r0, [pc, #228]	; (800afb8 <plug_holes+0x118>)
 800aed4:	f00b fe58 	bl	8016b88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	791b      	ldrb	r3, [r3, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d006      	beq.n	800aeee <plug_holes+0x4e>
 800aee0:	4b33      	ldr	r3, [pc, #204]	; (800afb0 <plug_holes+0x110>)
 800aee2:	f240 125f 	movw	r2, #351	; 0x15f
 800aee6:	4937      	ldr	r1, [pc, #220]	; (800afc4 <plug_holes+0x124>)
 800aee8:	4833      	ldr	r0, [pc, #204]	; (800afb8 <plug_holes+0x118>)
 800aeea:	f00b fe4d 	bl	8016b88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aef6:	d906      	bls.n	800af06 <plug_holes+0x66>
 800aef8:	4b2d      	ldr	r3, [pc, #180]	; (800afb0 <plug_holes+0x110>)
 800aefa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800aefe:	4932      	ldr	r1, [pc, #200]	; (800afc8 <plug_holes+0x128>)
 800af00:	482d      	ldr	r0, [pc, #180]	; (800afb8 <plug_holes+0x118>)
 800af02:	f00b fe41 	bl	8016b88 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <plug_holes+0x10c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	8812      	ldrh	r2, [r2, #0]
 800af0e:	4413      	add	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	429a      	cmp	r2, r3
 800af18:	d01f      	beq.n	800af5a <plug_holes+0xba>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	791b      	ldrb	r3, [r3, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d11b      	bne.n	800af5a <plug_holes+0xba>
 800af22:	4b26      	ldr	r3, [pc, #152]	; (800afbc <plug_holes+0x11c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d016      	beq.n	800af5a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800af2c:	4b27      	ldr	r3, [pc, #156]	; (800afcc <plug_holes+0x12c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	429a      	cmp	r2, r3
 800af34:	d102      	bne.n	800af3c <plug_holes+0x9c>
      lfree = mem;
 800af36:	4a25      	ldr	r2, [pc, #148]	; (800afcc <plug_holes+0x12c>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	881a      	ldrh	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a19      	ldr	r2, [pc, #100]	; (800afac <plug_holes+0x10c>)
 800af48:	6812      	ldr	r2, [r2, #0]
 800af4a:	1a99      	subs	r1, r3, r2
 800af4c:	4b17      	ldr	r3, [pc, #92]	; (800afac <plug_holes+0x10c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	8812      	ldrh	r2, [r2, #0]
 800af54:	4413      	add	r3, r2
 800af56:	b28a      	uxth	r2, r1
 800af58:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <plug_holes+0x10c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	8852      	ldrh	r2, [r2, #2]
 800af62:	4413      	add	r3, r2
 800af64:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d01a      	beq.n	800afa4 <plug_holes+0x104>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	791b      	ldrb	r3, [r3, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d116      	bne.n	800afa4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <plug_holes+0x12c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d102      	bne.n	800af86 <plug_holes+0xe6>
      lfree = pmem;
 800af80:	4a12      	ldr	r2, [pc, #72]	; (800afcc <plug_holes+0x12c>)
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	881a      	ldrh	r2, [r3, #0]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	4a06      	ldr	r2, [pc, #24]	; (800afac <plug_holes+0x10c>)
 800af92:	6812      	ldr	r2, [r2, #0]
 800af94:	1a99      	subs	r1, r3, r2
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <plug_holes+0x10c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	8812      	ldrh	r2, [r2, #0]
 800af9e:	4413      	add	r3, r2
 800afa0:	b28a      	uxth	r2, r1
 800afa2:	805a      	strh	r2, [r3, #2]
  }
}
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20008bf8 	.word	0x20008bf8
 800afb0:	08018c50 	.word	0x08018c50
 800afb4:	08018c80 	.word	0x08018c80
 800afb8:	08018c98 	.word	0x08018c98
 800afbc:	20008bfc 	.word	0x20008bfc
 800afc0:	08018cc0 	.word	0x08018cc0
 800afc4:	08018cdc 	.word	0x08018cdc
 800afc8:	08018cf8 	.word	0x08018cf8
 800afcc:	20008c00 	.word	0x20008c00

0800afd0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800afd6:	4b1e      	ldr	r3, [pc, #120]	; (800b050 <mem_init+0x80>)
 800afd8:	3303      	adds	r3, #3
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	461a      	mov	r2, r3
 800afe0:	4b1c      	ldr	r3, [pc, #112]	; (800b054 <mem_init+0x84>)
 800afe2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800afe4:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <mem_init+0x84>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aff0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800affe:	4b15      	ldr	r3, [pc, #84]	; (800b054 <mem_init+0x84>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b006:	4a14      	ldr	r2, [pc, #80]	; (800b058 <mem_init+0x88>)
 800b008:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <mem_init+0x88>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2201      	movs	r2, #1
 800b010:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b012:	4b11      	ldr	r3, [pc, #68]	; (800b058 <mem_init+0x88>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b01a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <mem_init+0x88>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b024:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <mem_init+0x84>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a0c      	ldr	r2, [pc, #48]	; (800b05c <mem_init+0x8c>)
 800b02c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b02e:	480c      	ldr	r0, [pc, #48]	; (800b060 <mem_init+0x90>)
 800b030:	f00b fce8 	bl	8016a04 <sys_mutex_new>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d006      	beq.n	800b048 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b03a:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <mem_init+0x94>)
 800b03c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b040:	4909      	ldr	r1, [pc, #36]	; (800b068 <mem_init+0x98>)
 800b042:	480a      	ldr	r0, [pc, #40]	; (800b06c <mem_init+0x9c>)
 800b044:	f00b fda0 	bl	8016b88 <iprintf>
  }
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	2000c3bc 	.word	0x2000c3bc
 800b054:	20008bf8 	.word	0x20008bf8
 800b058:	20008bfc 	.word	0x20008bfc
 800b05c:	20008c00 	.word	0x20008c00
 800b060:	20008c04 	.word	0x20008c04
 800b064:	08018c50 	.word	0x08018c50
 800b068:	08018d24 	.word	0x08018d24
 800b06c:	08018c98 	.word	0x08018c98

0800b070 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d050      	beq.n	800b120 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f003 0303 	and.w	r3, r3, #3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d006      	beq.n	800b096 <mem_free+0x26>
 800b088:	4b27      	ldr	r3, [pc, #156]	; (800b128 <mem_free+0xb8>)
 800b08a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b08e:	4927      	ldr	r1, [pc, #156]	; (800b12c <mem_free+0xbc>)
 800b090:	4827      	ldr	r0, [pc, #156]	; (800b130 <mem_free+0xc0>)
 800b092:	f00b fd79 	bl	8016b88 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b096:	4b27      	ldr	r3, [pc, #156]	; (800b134 <mem_free+0xc4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d304      	bcc.n	800b0aa <mem_free+0x3a>
 800b0a0:	4b25      	ldr	r3, [pc, #148]	; (800b138 <mem_free+0xc8>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d306      	bcc.n	800b0b8 <mem_free+0x48>
 800b0aa:	4b1f      	ldr	r3, [pc, #124]	; (800b128 <mem_free+0xb8>)
 800b0ac:	f240 12af 	movw	r2, #431	; 0x1af
 800b0b0:	4922      	ldr	r1, [pc, #136]	; (800b13c <mem_free+0xcc>)
 800b0b2:	481f      	ldr	r0, [pc, #124]	; (800b130 <mem_free+0xc0>)
 800b0b4:	f00b fd68 	bl	8016b88 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <mem_free+0xc4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d304      	bcc.n	800b0cc <mem_free+0x5c>
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <mem_free+0xc8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d306      	bcc.n	800b0da <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b0cc:	f00b fcf8 	bl	8016ac0 <sys_arch_protect>
 800b0d0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f00b fd02 	bl	8016adc <sys_arch_unprotect>
    return;
 800b0d8:	e023      	b.n	800b122 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b0da:	4819      	ldr	r0, [pc, #100]	; (800b140 <mem_free+0xd0>)
 800b0dc:	f00b fcae 	bl	8016a3c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3b08      	subs	r3, #8
 800b0e4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	791b      	ldrb	r3, [r3, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <mem_free+0x8c>
 800b0ee:	4b0e      	ldr	r3, [pc, #56]	; (800b128 <mem_free+0xb8>)
 800b0f0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b0f4:	4913      	ldr	r1, [pc, #76]	; (800b144 <mem_free+0xd4>)
 800b0f6:	480e      	ldr	r0, [pc, #56]	; (800b130 <mem_free+0xc0>)
 800b0f8:	f00b fd46 	bl	8016b88 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b102:	4b11      	ldr	r3, [pc, #68]	; (800b148 <mem_free+0xd8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d202      	bcs.n	800b112 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b10c:	4a0e      	ldr	r2, [pc, #56]	; (800b148 <mem_free+0xd8>)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fec4 	bl	800aea0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b118:	4809      	ldr	r0, [pc, #36]	; (800b140 <mem_free+0xd0>)
 800b11a:	f00b fc9e 	bl	8016a5a <sys_mutex_unlock>
 800b11e:	e000      	b.n	800b122 <mem_free+0xb2>
    return;
 800b120:	bf00      	nop
}
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	08018c50 	.word	0x08018c50
 800b12c:	08018d40 	.word	0x08018d40
 800b130:	08018c98 	.word	0x08018c98
 800b134:	20008bf8 	.word	0x20008bf8
 800b138:	20008bfc 	.word	0x20008bfc
 800b13c:	08018d64 	.word	0x08018d64
 800b140:	20008c04 	.word	0x20008c04
 800b144:	08018d7c 	.word	0x08018d7c
 800b148:	20008c00 	.word	0x20008c00

0800b14c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b158:	887b      	ldrh	r3, [r7, #2]
 800b15a:	3303      	adds	r3, #3
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b164:	887b      	ldrh	r3, [r7, #2]
 800b166:	2b0b      	cmp	r3, #11
 800b168:	d801      	bhi.n	800b16e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b16a:	230c      	movs	r3, #12
 800b16c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b16e:	887b      	ldrh	r3, [r7, #2]
 800b170:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b174:	d901      	bls.n	800b17a <mem_trim+0x2e>
    return NULL;
 800b176:	2300      	movs	r3, #0
 800b178:	e0bd      	b.n	800b2f6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b17a:	4b61      	ldr	r3, [pc, #388]	; (800b300 <mem_trim+0x1b4>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d304      	bcc.n	800b18e <mem_trim+0x42>
 800b184:	4b5f      	ldr	r3, [pc, #380]	; (800b304 <mem_trim+0x1b8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d306      	bcc.n	800b19c <mem_trim+0x50>
 800b18e:	4b5e      	ldr	r3, [pc, #376]	; (800b308 <mem_trim+0x1bc>)
 800b190:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b194:	495d      	ldr	r1, [pc, #372]	; (800b30c <mem_trim+0x1c0>)
 800b196:	485e      	ldr	r0, [pc, #376]	; (800b310 <mem_trim+0x1c4>)
 800b198:	f00b fcf6 	bl	8016b88 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b19c:	4b58      	ldr	r3, [pc, #352]	; (800b300 <mem_trim+0x1b4>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d304      	bcc.n	800b1b0 <mem_trim+0x64>
 800b1a6:	4b57      	ldr	r3, [pc, #348]	; (800b304 <mem_trim+0x1b8>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d307      	bcc.n	800b1c0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b1b0:	f00b fc86 	bl	8016ac0 <sys_arch_protect>
 800b1b4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f00b fc90 	bl	8016adc <sys_arch_unprotect>
    return rmem;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	e09a      	b.n	800b2f6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3b08      	subs	r3, #8
 800b1c4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	4a4d      	ldr	r2, [pc, #308]	; (800b300 <mem_trim+0x1b4>)
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	1a9b      	subs	r3, r3, r2
 800b1ce:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	881a      	ldrh	r2, [r3, #0]
 800b1d4:	8b7b      	ldrh	r3, [r7, #26]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	3b08      	subs	r3, #8
 800b1dc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b1de:	887a      	ldrh	r2, [r7, #2]
 800b1e0:	8b3b      	ldrh	r3, [r7, #24]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d906      	bls.n	800b1f4 <mem_trim+0xa8>
 800b1e6:	4b48      	ldr	r3, [pc, #288]	; (800b308 <mem_trim+0x1bc>)
 800b1e8:	f240 2206 	movw	r2, #518	; 0x206
 800b1ec:	4949      	ldr	r1, [pc, #292]	; (800b314 <mem_trim+0x1c8>)
 800b1ee:	4848      	ldr	r0, [pc, #288]	; (800b310 <mem_trim+0x1c4>)
 800b1f0:	f00b fcca 	bl	8016b88 <iprintf>
  if (newsize > size) {
 800b1f4:	887a      	ldrh	r2, [r7, #2]
 800b1f6:	8b3b      	ldrh	r3, [r7, #24]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d901      	bls.n	800b200 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e07a      	b.n	800b2f6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b200:	887a      	ldrh	r2, [r7, #2]
 800b202:	8b3b      	ldrh	r3, [r7, #24]
 800b204:	429a      	cmp	r2, r3
 800b206:	d101      	bne.n	800b20c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	e074      	b.n	800b2f6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b20c:	4842      	ldr	r0, [pc, #264]	; (800b318 <mem_trim+0x1cc>)
 800b20e:	f00b fc15 	bl	8016a3c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b212:	4b3b      	ldr	r3, [pc, #236]	; (800b300 <mem_trim+0x1b4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	8812      	ldrh	r2, [r2, #0]
 800b21a:	4413      	add	r3, r2
 800b21c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	791b      	ldrb	r3, [r3, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d131      	bne.n	800b28a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b22c:	8b7a      	ldrh	r2, [r7, #26]
 800b22e:	887b      	ldrh	r3, [r7, #2]
 800b230:	4413      	add	r3, r2
 800b232:	b29b      	uxth	r3, r3
 800b234:	3308      	adds	r3, #8
 800b236:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800b238:	4b38      	ldr	r3, [pc, #224]	; (800b31c <mem_trim+0x1d0>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d105      	bne.n	800b24e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b242:	4b2f      	ldr	r3, [pc, #188]	; (800b300 <mem_trim+0x1b4>)
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	8a7b      	ldrh	r3, [r7, #18]
 800b248:	4413      	add	r3, r2
 800b24a:	4a34      	ldr	r2, [pc, #208]	; (800b31c <mem_trim+0x1d0>)
 800b24c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b24e:	4b2c      	ldr	r3, [pc, #176]	; (800b300 <mem_trim+0x1b4>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	8a7b      	ldrh	r3, [r7, #18]
 800b254:	4413      	add	r3, r2
 800b256:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2200      	movs	r2, #0
 800b25c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	8a3a      	ldrh	r2, [r7, #16]
 800b262:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	8b7a      	ldrh	r2, [r7, #26]
 800b268:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	8a7a      	ldrh	r2, [r7, #18]
 800b26e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b278:	d039      	beq.n	800b2ee <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b27a:	4b21      	ldr	r3, [pc, #132]	; (800b300 <mem_trim+0x1b4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	8812      	ldrh	r2, [r2, #0]
 800b282:	4413      	add	r3, r2
 800b284:	8a7a      	ldrh	r2, [r7, #18]
 800b286:	805a      	strh	r2, [r3, #2]
 800b288:	e031      	b.n	800b2ee <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b28a:	887b      	ldrh	r3, [r7, #2]
 800b28c:	f103 0214 	add.w	r2, r3, #20
 800b290:	8b3b      	ldrh	r3, [r7, #24]
 800b292:	429a      	cmp	r2, r3
 800b294:	d82b      	bhi.n	800b2ee <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b296:	8b7a      	ldrh	r2, [r7, #26]
 800b298:	887b      	ldrh	r3, [r7, #2]
 800b29a:	4413      	add	r3, r2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3308      	adds	r3, #8
 800b2a0:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b2a2:	4b17      	ldr	r3, [pc, #92]	; (800b300 <mem_trim+0x1b4>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	8a7b      	ldrh	r3, [r7, #18]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b2ac:	4b1b      	ldr	r3, [pc, #108]	; (800b31c <mem_trim+0x1d0>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d202      	bcs.n	800b2bc <mem_trim+0x170>
      lfree = mem2;
 800b2b6:	4a19      	ldr	r2, [pc, #100]	; (800b31c <mem_trim+0x1d0>)
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	881a      	ldrh	r2, [r3, #0]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	8b7a      	ldrh	r2, [r7, #26]
 800b2ce:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	8a7a      	ldrh	r2, [r7, #18]
 800b2d4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2de:	d006      	beq.n	800b2ee <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <mem_trim+0x1b4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	8812      	ldrh	r2, [r2, #0]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	8a7a      	ldrh	r2, [r7, #18]
 800b2ec:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b2ee:	480a      	ldr	r0, [pc, #40]	; (800b318 <mem_trim+0x1cc>)
 800b2f0:	f00b fbb3 	bl	8016a5a <sys_mutex_unlock>
  return rmem;
 800b2f4:	687b      	ldr	r3, [r7, #4]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20008bf8 	.word	0x20008bf8
 800b304:	20008bfc 	.word	0x20008bfc
 800b308:	08018c50 	.word	0x08018c50
 800b30c:	08018d90 	.word	0x08018d90
 800b310:	08018c98 	.word	0x08018c98
 800b314:	08018da8 	.word	0x08018da8
 800b318:	20008c04 	.word	0x20008c04
 800b31c:	20008c00 	.word	0x20008c00

0800b320 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <mem_malloc+0x14>
    return NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	e0d1      	b.n	800b4d8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b334:	88fb      	ldrh	r3, [r7, #6]
 800b336:	3303      	adds	r3, #3
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f023 0303 	bic.w	r3, r3, #3
 800b33e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b340:	88fb      	ldrh	r3, [r7, #6]
 800b342:	2b0b      	cmp	r3, #11
 800b344:	d801      	bhi.n	800b34a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b346:	230c      	movs	r3, #12
 800b348:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b350:	d901      	bls.n	800b356 <mem_malloc+0x36>
    return NULL;
 800b352:	2300      	movs	r3, #0
 800b354:	e0c0      	b.n	800b4d8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b356:	4862      	ldr	r0, [pc, #392]	; (800b4e0 <mem_malloc+0x1c0>)
 800b358:	f00b fb70 	bl	8016a3c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b35c:	4b61      	ldr	r3, [pc, #388]	; (800b4e4 <mem_malloc+0x1c4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	4b61      	ldr	r3, [pc, #388]	; (800b4e8 <mem_malloc+0x1c8>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	83fb      	strh	r3, [r7, #30]
 800b36a:	e0aa      	b.n	800b4c2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b36c:	4b5e      	ldr	r3, [pc, #376]	; (800b4e8 <mem_malloc+0x1c8>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	8bfb      	ldrh	r3, [r7, #30]
 800b372:	4413      	add	r3, r2
 800b374:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	791b      	ldrb	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f040 809b 	bne.w	800b4b6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	461a      	mov	r2, r3
 800b386:	8bfb      	ldrh	r3, [r7, #30]
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	f1a3 0208 	sub.w	r2, r3, #8
 800b38e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b390:	429a      	cmp	r2, r3
 800b392:	f0c0 8090 	bcc.w	800b4b6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	8bfb      	ldrh	r3, [r7, #30]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	f1a3 0208 	sub.w	r2, r3, #8
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	3314      	adds	r3, #20
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d327      	bcc.n	800b3fc <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b3ac:	8bfa      	ldrh	r2, [r7, #30]
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b3b8:	4b4b      	ldr	r3, [pc, #300]	; (800b4e8 <mem_malloc+0x1c8>)
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	8a7b      	ldrh	r3, [r7, #18]
 800b3be:	4413      	add	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	881a      	ldrh	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8bfa      	ldrh	r2, [r7, #30]
 800b3d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	8a7a      	ldrh	r2, [r7, #18]
 800b3da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	881b      	ldrh	r3, [r3, #0]
 800b3e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3ea:	d00a      	beq.n	800b402 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b3ec:	4b3e      	ldr	r3, [pc, #248]	; (800b4e8 <mem_malloc+0x1c8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	8812      	ldrh	r2, [r2, #0]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	8a7a      	ldrh	r2, [r7, #18]
 800b3f8:	805a      	strh	r2, [r3, #2]
 800b3fa:	e002      	b.n	800b402 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2201      	movs	r2, #1
 800b400:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b402:	4b38      	ldr	r3, [pc, #224]	; (800b4e4 <mem_malloc+0x1c4>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d127      	bne.n	800b45c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800b40c:	4b35      	ldr	r3, [pc, #212]	; (800b4e4 <mem_malloc+0x1c4>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b412:	e005      	b.n	800b420 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b414:	4b34      	ldr	r3, [pc, #208]	; (800b4e8 <mem_malloc+0x1c8>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	8812      	ldrh	r2, [r2, #0]
 800b41c:	4413      	add	r3, r2
 800b41e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	791b      	ldrb	r3, [r3, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <mem_malloc+0x112>
 800b428:	4b30      	ldr	r3, [pc, #192]	; (800b4ec <mem_malloc+0x1cc>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d1f0      	bne.n	800b414 <mem_malloc+0xf4>
          }
          lfree = cur;
 800b432:	4a2c      	ldr	r2, [pc, #176]	; (800b4e4 <mem_malloc+0x1c4>)
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b438:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <mem_malloc+0x1c4>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b2b      	ldr	r3, [pc, #172]	; (800b4ec <mem_malloc+0x1cc>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d00b      	beq.n	800b45c <mem_malloc+0x13c>
 800b444:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <mem_malloc+0x1c4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d006      	beq.n	800b45c <mem_malloc+0x13c>
 800b44e:	4b28      	ldr	r3, [pc, #160]	; (800b4f0 <mem_malloc+0x1d0>)
 800b450:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b454:	4927      	ldr	r1, [pc, #156]	; (800b4f4 <mem_malloc+0x1d4>)
 800b456:	4828      	ldr	r0, [pc, #160]	; (800b4f8 <mem_malloc+0x1d8>)
 800b458:	f00b fb96 	bl	8016b88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b45c:	4820      	ldr	r0, [pc, #128]	; (800b4e0 <mem_malloc+0x1c0>)
 800b45e:	f00b fafc 	bl	8016a5a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b462:	88fa      	ldrh	r2, [r7, #6]
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	4413      	add	r3, r2
 800b468:	3308      	adds	r3, #8
 800b46a:	4a20      	ldr	r2, [pc, #128]	; (800b4ec <mem_malloc+0x1cc>)
 800b46c:	6812      	ldr	r2, [r2, #0]
 800b46e:	4293      	cmp	r3, r2
 800b470:	d906      	bls.n	800b480 <mem_malloc+0x160>
 800b472:	4b1f      	ldr	r3, [pc, #124]	; (800b4f0 <mem_malloc+0x1d0>)
 800b474:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b478:	4920      	ldr	r1, [pc, #128]	; (800b4fc <mem_malloc+0x1dc>)
 800b47a:	481f      	ldr	r0, [pc, #124]	; (800b4f8 <mem_malloc+0x1d8>)
 800b47c:	f00b fb84 	bl	8016b88 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d006      	beq.n	800b498 <mem_malloc+0x178>
 800b48a:	4b19      	ldr	r3, [pc, #100]	; (800b4f0 <mem_malloc+0x1d0>)
 800b48c:	f240 22d6 	movw	r2, #726	; 0x2d6
 800b490:	491b      	ldr	r1, [pc, #108]	; (800b500 <mem_malloc+0x1e0>)
 800b492:	4819      	ldr	r0, [pc, #100]	; (800b4f8 <mem_malloc+0x1d8>)
 800b494:	f00b fb78 	bl	8016b88 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <mem_malloc+0x190>
 800b4a2:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <mem_malloc+0x1d0>)
 800b4a4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800b4a8:	4916      	ldr	r1, [pc, #88]	; (800b504 <mem_malloc+0x1e4>)
 800b4aa:	4813      	ldr	r0, [pc, #76]	; (800b4f8 <mem_malloc+0x1d8>)
 800b4ac:	f00b fb6c 	bl	8016b88 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	3308      	adds	r3, #8
 800b4b4:	e010      	b.n	800b4d8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b4b6:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <mem_malloc+0x1c8>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	8bfb      	ldrh	r3, [r7, #30]
 800b4bc:	4413      	add	r3, r2
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b4c2:	8bfa      	ldrh	r2, [r7, #30]
 800b4c4:	88fb      	ldrh	r3, [r7, #6]
 800b4c6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	f4ff af4e 	bcc.w	800b36c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b4d0:	4803      	ldr	r0, [pc, #12]	; (800b4e0 <mem_malloc+0x1c0>)
 800b4d2:	f00b fac2 	bl	8016a5a <sys_mutex_unlock>
  return NULL;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3720      	adds	r7, #32
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20008c04 	.word	0x20008c04
 800b4e4:	20008c00 	.word	0x20008c00
 800b4e8:	20008bf8 	.word	0x20008bf8
 800b4ec:	20008bfc 	.word	0x20008bfc
 800b4f0:	08018c50 	.word	0x08018c50
 800b4f4:	08018dc8 	.word	0x08018dc8
 800b4f8:	08018c98 	.word	0x08018c98
 800b4fc:	08018de4 	.word	0x08018de4
 800b500:	08018e14 	.word	0x08018e14
 800b504:	08018e44 	.word	0x08018e44

0800b508 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	3303      	adds	r3, #3
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	e011      	b.n	800b54e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	4413      	add	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	885b      	ldrh	r3, [r3, #2]
 800b552:	461a      	mov	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	4293      	cmp	r3, r2
 800b558:	dbe7      	blt.n	800b52a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b56e:	2300      	movs	r3, #0
 800b570:	80fb      	strh	r3, [r7, #6]
 800b572:	e009      	b.n	800b588 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <memp_init+0x30>)
 800b578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff ffc3 	bl	800b508 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	3301      	adds	r3, #1
 800b586:	80fb      	strh	r3, [r7, #6]
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	2b0c      	cmp	r3, #12
 800b58c:	d9f2      	bls.n	800b574 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	08026260 	.word	0x08026260

0800b59c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b5a4:	f00b fa8c 	bl	8016ac0 <sys_arch_protect>
 800b5a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d015      	beq.n	800b5e4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	6812      	ldr	r2, [r2, #0]
 800b5c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f003 0303 	and.w	r3, r3, #3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <do_memp_malloc_pool+0x3e>
 800b5cc:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <do_memp_malloc_pool+0x58>)
 800b5ce:	f240 1249 	movw	r2, #329	; 0x149
 800b5d2:	4909      	ldr	r1, [pc, #36]	; (800b5f8 <do_memp_malloc_pool+0x5c>)
 800b5d4:	4809      	ldr	r0, [pc, #36]	; (800b5fc <do_memp_malloc_pool+0x60>)
 800b5d6:	f00b fad7 	bl	8016b88 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f00b fa7e 	bl	8016adc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	e003      	b.n	800b5ec <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f00b fa79 	bl	8016adc <sys_arch_unprotect>
  return NULL;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08018e68 	.word	0x08018e68
 800b5f8:	08018e98 	.word	0x08018e98
 800b5fc:	08018ebc 	.word	0x08018ebc

0800b600 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	2b0c      	cmp	r3, #12
 800b60e:	d908      	bls.n	800b622 <memp_malloc+0x22>
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <memp_malloc+0x3c>)
 800b612:	f240 1287 	movw	r2, #391	; 0x187
 800b616:	490a      	ldr	r1, [pc, #40]	; (800b640 <memp_malloc+0x40>)
 800b618:	480a      	ldr	r0, [pc, #40]	; (800b644 <memp_malloc+0x44>)
 800b61a:	f00b fab5 	bl	8016b88 <iprintf>
 800b61e:	2300      	movs	r3, #0
 800b620:	e008      	b.n	800b634 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	4a08      	ldr	r2, [pc, #32]	; (800b648 <memp_malloc+0x48>)
 800b626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff ffb6 	bl	800b59c <do_memp_malloc_pool>
 800b630:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b632:	68fb      	ldr	r3, [r7, #12]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	08018e68 	.word	0x08018e68
 800b640:	08018ef8 	.word	0x08018ef8
 800b644:	08018ebc 	.word	0x08018ebc
 800b648:	08026260 	.word	0x08026260

0800b64c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	f003 0303 	and.w	r3, r3, #3
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d006      	beq.n	800b66e <do_memp_free_pool+0x22>
 800b660:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <do_memp_free_pool+0x4c>)
 800b662:	f240 129d 	movw	r2, #413	; 0x19d
 800b666:	490d      	ldr	r1, [pc, #52]	; (800b69c <do_memp_free_pool+0x50>)
 800b668:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <do_memp_free_pool+0x54>)
 800b66a:	f00b fa8d 	bl	8016b88 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b672:	f00b fa25 	bl	8016ac0 <sys_arch_protect>
 800b676:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b68a:	68b8      	ldr	r0, [r7, #8]
 800b68c:	f00b fa26 	bl	8016adc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	08018e68 	.word	0x08018e68
 800b69c:	08018f18 	.word	0x08018f18
 800b6a0:	08018ebc 	.word	0x08018ebc

0800b6a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	6039      	str	r1, [r7, #0]
 800b6ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	2b0c      	cmp	r3, #12
 800b6b4:	d907      	bls.n	800b6c6 <memp_free+0x22>
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <memp_free+0x44>)
 800b6b8:	f240 12db 	movw	r2, #475	; 0x1db
 800b6bc:	490b      	ldr	r1, [pc, #44]	; (800b6ec <memp_free+0x48>)
 800b6be:	480c      	ldr	r0, [pc, #48]	; (800b6f0 <memp_free+0x4c>)
 800b6c0:	f00b fa62 	bl	8016b88 <iprintf>
 800b6c4:	e00c      	b.n	800b6e0 <memp_free+0x3c>

  if (mem == NULL) {
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d008      	beq.n	800b6de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <memp_free+0x50>)
 800b6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff ffb8 	bl	800b64c <do_memp_free_pool>
 800b6dc:	e000      	b.n	800b6e0 <memp_free+0x3c>
    return;
 800b6de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	08018e68 	.word	0x08018e68
 800b6ec:	08018f38 	.word	0x08018f38
 800b6f0:	08018ebc 	.word	0x08018ebc
 800b6f4:	08026260 	.word	0x08026260

0800b6f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b6fc:	bf00      	nop
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d105      	bne.n	800b728 <netif_add+0x20>
 800b71c:	4b23      	ldr	r3, [pc, #140]	; (800b7ac <netif_add+0xa4>)
 800b71e:	22fb      	movs	r2, #251	; 0xfb
 800b720:	4923      	ldr	r1, [pc, #140]	; (800b7b0 <netif_add+0xa8>)
 800b722:	4824      	ldr	r0, [pc, #144]	; (800b7b4 <netif_add+0xac>)
 800b724:	f00b fa30 	bl	8016b88 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3320      	adds	r3, #32
 800b746:	2204      	movs	r2, #4
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f00b fa14 	bl	8016b78 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2203      	movs	r2, #3
 800b754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	69ba      	ldr	r2, [r7, #24]
 800b75c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800b75e:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <netif_add+0xb0>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	b2d1      	uxtb	r1, r2
 800b766:	4a14      	ldr	r2, [pc, #80]	; (800b7b8 <netif_add+0xb0>)
 800b768:	7011      	strb	r1, [r2, #0]
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6a3a      	ldr	r2, [r7, #32]
 800b774:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	68b9      	ldr	r1, [r7, #8]
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f000 f81f 	bl	800b7c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	4798      	blx	r3
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d001      	beq.n	800b792 <netif_add+0x8a>
    return NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	e007      	b.n	800b7a2 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b792:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <netif_add+0xb4>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b79a:	4a08      	ldr	r2, [pc, #32]	; (800b7bc <netif_add+0xb4>)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	08018f54 	.word	0x08018f54
 800b7b0:	08018f88 	.word	0x08018f88
 800b7b4:	08018fa0 	.word	0x08018fa0
 800b7b8:	20008c3c 	.word	0x20008c3c
 800b7bc:	2000fac4 	.word	0x2000fac4

0800b7c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
 800b7cc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <netif_set_addr+0x1c>
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10c      	bne.n	800b7f6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b7dc:	68b9      	ldr	r1, [r7, #8]
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f81a 	bl	800b818 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f862 	bl	800b8b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 f84a 	bl	800b888 <netif_set_gw>
 800b7f4:	e00b      	b.n	800b80e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 f859 	bl	800b8b0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f000 f841 	bl	800b888 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f805 	bl	800b818 <netif_set_ipaddr>
  }
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
	...

0800b818 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d003      	beq.n	800b830 <netif_set_ipaddr+0x18>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e002      	b.n	800b836 <netif_set_ipaddr+0x1e>
 800b830:	4b14      	ldr	r3, [pc, #80]	; (800b884 <netif_set_ipaddr+0x6c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3304      	adds	r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d01c      	beq.n	800b87c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3304      	adds	r3, #4
 800b846:	f107 020c 	add.w	r2, r7, #12
 800b84a:	4611      	mov	r1, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 fb45 	bl	800dedc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	3304      	adds	r3, #4
 800b856:	f107 020c 	add.w	r2, r7, #12
 800b85a:	4611      	mov	r1, r2
 800b85c:	4618      	mov	r0, r3
 800b85e:	f006 fe45 	bl	80124ec <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <netif_set_ipaddr+0x56>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	e000      	b.n	800b870 <netif_set_ipaddr+0x58>
 800b86e:	2300      	movs	r3, #0
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b874:	2101      	movs	r1, #1
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f861 	bl	800b93e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b87c:	bf00      	nop
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	080262e4 	.word	0x080262e4

0800b888 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <netif_set_gw+0x16>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	e000      	b.n	800b8a0 <netif_set_gw+0x18>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <netif_set_netmask+0x16>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	e000      	b.n	800b8c8 <netif_set_netmask+0x18>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b8e0:	4a04      	ldr	r2, [pc, #16]	; (800b8f4 <netif_set_default+0x1c>)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b8e6:	bf00      	nop
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	2000fac8 	.word	0x2000fac8

0800b8f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b906:	f003 0301 	and.w	r3, r3, #1
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d113      	bne.n	800b936 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b926:	f003 0304 	and.w	r3, r3, #4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b92e:	2103      	movs	r1, #3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f804 	bl	800b93e <netif_issue_reports>
    }
  }
}
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	460b      	mov	r3, r1
 800b948:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b94a:	78fb      	ldrb	r3, [r7, #3]
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	2b00      	cmp	r3, #0
 800b952:	d011      	beq.n	800b978 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3304      	adds	r3, #4
 800b958:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00c      	beq.n	800b978 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b964:	f003 0308 	and.w	r3, r3, #8
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	3304      	adds	r3, #4
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f009 fba8 	bl	80150c8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b978:	bf00      	nop
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	d012      	beq.n	800b9bc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f008 ff48 	bl	801484c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b9ca:	f00b f879 	bl	8016ac0 <sys_arch_protect>
 800b9ce:	6038      	str	r0, [r7, #0]
 800b9d0:	4b0f      	ldr	r3, [pc, #60]	; (800ba10 <pbuf_free_ooseq+0x4c>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	6838      	ldr	r0, [r7, #0]
 800b9d8:	f00b f880 	bl	8016adc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ba14 <pbuf_free_ooseq+0x50>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	e00f      	b.n	800ba04 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d008      	beq.n	800b9fe <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f001 fee0 	bl	800d7b6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b9fc:	e005      	b.n	800ba0a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	607b      	str	r3, [r7, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1ec      	bne.n	800b9e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	2000facc 	.word	0x2000facc
 800ba14:	2000fad4 	.word	0x2000fad4

0800ba18 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ba20:	f7ff ffd0 	bl	800b9c4 <pbuf_free_ooseq>
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ba32:	f00b f845 	bl	8016ac0 <sys_arch_protect>
 800ba36:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ba38:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <pbuf_pool_is_empty+0x50>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <pbuf_pool_is_empty+0x50>)
 800ba40:	2201      	movs	r2, #1
 800ba42:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f00b f849 	bl	8016adc <sys_arch_unprotect>

  if (!queued) {
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d110      	bne.n	800ba72 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	480a      	ldr	r0, [pc, #40]	; (800ba80 <pbuf_pool_is_empty+0x54>)
 800ba56:	f7fe fa23 	bl	8009ea0 <tcpip_callback_with_block>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d008      	beq.n	800ba72 <pbuf_pool_is_empty+0x46>
 800ba60:	f00b f82e 	bl	8016ac0 <sys_arch_protect>
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <pbuf_pool_is_empty+0x50>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f00b f835 	bl	8016adc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	2000facc 	.word	0x2000facc
 800ba80:	0800ba19 	.word	0x0800ba19

0800ba84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	71fb      	strb	r3, [r7, #7]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	80bb      	strh	r3, [r7, #4]
 800ba92:	4613      	mov	r3, r2
 800ba94:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d81c      	bhi.n	800bad6 <pbuf_alloc+0x52>
 800ba9c:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <pbuf_alloc+0x20>)
 800ba9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa2:	bf00      	nop
 800baa4:	0800bab9 	.word	0x0800bab9
 800baa8:	0800babf 	.word	0x0800babf
 800baac:	0800bac5 	.word	0x0800bac5
 800bab0:	0800bacb 	.word	0x0800bacb
 800bab4:	0800bad1 	.word	0x0800bad1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bab8:	2336      	movs	r3, #54	; 0x36
 800baba:	82fb      	strh	r3, [r7, #22]
    break;
 800babc:	e014      	b.n	800bae8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800babe:	2322      	movs	r3, #34	; 0x22
 800bac0:	82fb      	strh	r3, [r7, #22]
    break;
 800bac2:	e011      	b.n	800bae8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bac4:	230e      	movs	r3, #14
 800bac6:	82fb      	strh	r3, [r7, #22]
    break;
 800bac8:	e00e      	b.n	800bae8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800baca:	2300      	movs	r3, #0
 800bacc:	82fb      	strh	r3, [r7, #22]
    break;
 800bace:	e00b      	b.n	800bae8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	82fb      	strh	r3, [r7, #22]
    break;
 800bad4:	e008      	b.n	800bae8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800bad6:	4ba5      	ldr	r3, [pc, #660]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bad8:	f44f 728b 	mov.w	r2, #278	; 0x116
 800badc:	49a4      	ldr	r1, [pc, #656]	; (800bd70 <pbuf_alloc+0x2ec>)
 800bade:	48a5      	ldr	r0, [pc, #660]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bae0:	f00b f852 	bl	8016b88 <iprintf>
    return NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	e15d      	b.n	800bda4 <pbuf_alloc+0x320>
  }

  switch (type) {
 800bae8:	79bb      	ldrb	r3, [r7, #6]
 800baea:	2b03      	cmp	r3, #3
 800baec:	f200 8134 	bhi.w	800bd58 <pbuf_alloc+0x2d4>
 800baf0:	a201      	add	r2, pc, #4	; (adr r2, 800baf8 <pbuf_alloc+0x74>)
 800baf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf6:	bf00      	nop
 800baf8:	0800bc99 	.word	0x0800bc99
 800bafc:	0800bd25 	.word	0x0800bd25
 800bb00:	0800bd25 	.word	0x0800bd25
 800bb04:	0800bb09 	.word	0x0800bb09
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bb08:	200c      	movs	r0, #12
 800bb0a:	f7ff fd79 	bl	800b600 <memp_malloc>
 800bb0e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d103      	bne.n	800bb1e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800bb16:	f7ff ff89 	bl	800ba2c <pbuf_pool_is_empty>
      return NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e142      	b.n	800bda4 <pbuf_alloc+0x320>
    }
    p->type = type;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	79ba      	ldrb	r2, [r7, #6]
 800bb22:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	2200      	movs	r2, #0
 800bb28:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800bb2a:	8afb      	ldrh	r3, [r7, #22]
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	69fa      	ldr	r2, [r7, #28]
 800bb30:	4413      	add	r3, r2
 800bb32:	3303      	adds	r3, #3
 800bb34:	f023 0303 	bic.w	r3, r3, #3
 800bb38:	461a      	mov	r2, r3
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	f003 0303 	and.w	r3, r3, #3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d006      	beq.n	800bb58 <pbuf_alloc+0xd4>
 800bb4a:	4b88      	ldr	r3, [pc, #544]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bb4c:	f240 1229 	movw	r2, #297	; 0x129
 800bb50:	4989      	ldr	r1, [pc, #548]	; (800bd78 <pbuf_alloc+0x2f4>)
 800bb52:	4888      	ldr	r0, [pc, #544]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bb54:	f00b f818 	bl	8016b88 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	88ba      	ldrh	r2, [r7, #4]
 800bb5c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800bb5e:	8afb      	ldrh	r3, [r7, #22]
 800bb60:	3303      	adds	r3, #3
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800bb6a:	88bb      	ldrh	r3, [r7, #4]
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	bf28      	it	cs
 800bb70:	4613      	movcs	r3, r2
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	69fa      	ldr	r2, [r7, #28]
 800bb7e:	8952      	ldrh	r2, [r2, #10]
 800bb80:	441a      	add	r2, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d906      	bls.n	800bb9a <pbuf_alloc+0x116>
 800bb8c:	4b77      	ldr	r3, [pc, #476]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bb8e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800bb92:	497a      	ldr	r1, [pc, #488]	; (800bd7c <pbuf_alloc+0x2f8>)
 800bb94:	4877      	ldr	r0, [pc, #476]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bb96:	f00a fff7 	bl	8016b88 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bb9a:	8afb      	ldrh	r3, [r7, #22]
 800bb9c:	3303      	adds	r3, #3
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bba6:	d106      	bne.n	800bbb6 <pbuf_alloc+0x132>
 800bba8:	4b70      	ldr	r3, [pc, #448]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bbaa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800bbae:	4974      	ldr	r1, [pc, #464]	; (800bd80 <pbuf_alloc+0x2fc>)
 800bbb0:	4870      	ldr	r0, [pc, #448]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bbb2:	f00a ffe9 	bl	8016b88 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800bbc0:	88bb      	ldrh	r3, [r7, #4]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	8952      	ldrh	r2, [r2, #10]
 800bbc6:	1a9b      	subs	r3, r3, r2
 800bbc8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800bbca:	e061      	b.n	800bc90 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bbcc:	200c      	movs	r0, #12
 800bbce:	f7ff fd17 	bl	800b600 <memp_malloc>
 800bbd2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d106      	bne.n	800bbe8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800bbda:	f7ff ff27 	bl	800ba2c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800bbde:	69f8      	ldr	r0, [r7, #28]
 800bbe0:	f000 fac2 	bl	800c168 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e0dd      	b.n	800bda4 <pbuf_alloc+0x320>
      }
      q->type = type;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	79ba      	ldrb	r2, [r7, #6]
 800bbec:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc06:	4293      	cmp	r3, r2
 800bc08:	dd06      	ble.n	800bc18 <pbuf_alloc+0x194>
 800bc0a:	4b58      	ldr	r3, [pc, #352]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bc0c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800bc10:	495c      	ldr	r1, [pc, #368]	; (800bd84 <pbuf_alloc+0x300>)
 800bc12:	4858      	ldr	r0, [pc, #352]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bc14:	f00a ffb8 	bl	8016b88 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bc28:	bf28      	it	cs
 800bc2a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800bc2e:	b29a      	uxth	r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f103 0210 	add.w	r2, r3, #16
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f003 0303 	and.w	r3, r3, #3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d006      	beq.n	800bc58 <pbuf_alloc+0x1d4>
 800bc4a:	4b48      	ldr	r3, [pc, #288]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bc4c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800bc50:	494d      	ldr	r1, [pc, #308]	; (800bd88 <pbuf_alloc+0x304>)
 800bc52:	4848      	ldr	r0, [pc, #288]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bc54:	f00a ff98 	bl	8016b88 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	8952      	ldrh	r2, [r2, #10]
 800bc60:	441a      	add	r2, r3
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d906      	bls.n	800bc7a <pbuf_alloc+0x1f6>
 800bc6c:	4b3f      	ldr	r3, [pc, #252]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bc6e:	f240 1255 	movw	r2, #341	; 0x155
 800bc72:	4942      	ldr	r1, [pc, #264]	; (800bd7c <pbuf_alloc+0x2f8>)
 800bc74:	483f      	ldr	r0, [pc, #252]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bc76:	f00a ff87 	bl	8016b88 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	895b      	ldrh	r3, [r3, #10]
 800bc84:	461a      	mov	r2, r3
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	1a9b      	subs	r3, r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc9a      	bgt.n	800bbcc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800bc96:	e07e      	b.n	800bd96 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800bc98:	8afb      	ldrh	r3, [r7, #22]
 800bc9a:	3313      	adds	r3, #19
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	f023 0303 	bic.w	r3, r3, #3
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	88bb      	ldrh	r3, [r7, #4]
 800bca6:	3303      	adds	r3, #3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f023 0303 	bic.w	r3, r3, #3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	4413      	add	r3, r2
 800bcb2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800bcb4:	897a      	ldrh	r2, [r7, #10]
 800bcb6:	88bb      	ldrh	r3, [r7, #4]
 800bcb8:	3303      	adds	r3, #3
 800bcba:	f023 0303 	bic.w	r3, r3, #3
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d201      	bcs.n	800bcc6 <pbuf_alloc+0x242>
        return NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e06e      	b.n	800bda4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800bcc6:	897b      	ldrh	r3, [r7, #10]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff fb29 	bl	800b320 <mem_malloc>
 800bcce:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <pbuf_alloc+0x256>
      return NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e064      	b.n	800bda4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800bcda:	8afb      	ldrh	r3, [r7, #22]
 800bcdc:	3310      	adds	r3, #16
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	4413      	add	r3, r2
 800bce2:	3303      	adds	r3, #3
 800bce4:	f023 0303 	bic.w	r3, r3, #3
 800bce8:	461a      	mov	r2, r3
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	88ba      	ldrh	r2, [r7, #4]
 800bcf2:	811a      	strh	r2, [r3, #8]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	891a      	ldrh	r2, [r3, #8]
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	79ba      	ldrb	r2, [r7, #6]
 800bd06:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d03f      	beq.n	800bd94 <pbuf_alloc+0x310>
 800bd14:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bd16:	f240 1277 	movw	r2, #375	; 0x177
 800bd1a:	491c      	ldr	r1, [pc, #112]	; (800bd8c <pbuf_alloc+0x308>)
 800bd1c:	4815      	ldr	r0, [pc, #84]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bd1e:	f00a ff33 	bl	8016b88 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800bd22:	e037      	b.n	800bd94 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bd24:	200b      	movs	r0, #11
 800bd26:	f7ff fc6b 	bl	800b600 <memp_malloc>
 800bd2a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	e036      	b.n	800bda4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	88ba      	ldrh	r2, [r7, #4]
 800bd40:	811a      	strh	r2, [r3, #8]
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	891a      	ldrh	r2, [r3, #8]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	79ba      	ldrb	r2, [r7, #6]
 800bd54:	731a      	strb	r2, [r3, #12]
    break;
 800bd56:	e01e      	b.n	800bd96 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bd58:	4b04      	ldr	r3, [pc, #16]	; (800bd6c <pbuf_alloc+0x2e8>)
 800bd5a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800bd5e:	490c      	ldr	r1, [pc, #48]	; (800bd90 <pbuf_alloc+0x30c>)
 800bd60:	4804      	ldr	r0, [pc, #16]	; (800bd74 <pbuf_alloc+0x2f0>)
 800bd62:	f00a ff11 	bl	8016b88 <iprintf>
    return NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e01c      	b.n	800bda4 <pbuf_alloc+0x320>
 800bd6a:	bf00      	nop
 800bd6c:	08018fc8 	.word	0x08018fc8
 800bd70:	08018ff8 	.word	0x08018ff8
 800bd74:	08019014 	.word	0x08019014
 800bd78:	0801903c 	.word	0x0801903c
 800bd7c:	0801906c 	.word	0x0801906c
 800bd80:	080190a0 	.word	0x080190a0
 800bd84:	080190d4 	.word	0x080190d4
 800bd88:	080190e8 	.word	0x080190e8
 800bd8c:	08019118 	.word	0x08019118
 800bd90:	08019144 	.word	0x08019144
    break;
 800bd94:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bda2:	69fb      	ldr	r3, [r7, #28]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	71fb      	strb	r3, [r7, #7]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	80bb      	strh	r3, [r7, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800bdc0:	79fb      	ldrb	r3, [r7, #7]
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	d81b      	bhi.n	800bdfe <pbuf_alloced_custom+0x52>
 800bdc6:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <pbuf_alloced_custom+0x20>)
 800bdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdcc:	0800bde1 	.word	0x0800bde1
 800bdd0:	0800bde7 	.word	0x0800bde7
 800bdd4:	0800bded 	.word	0x0800bded
 800bdd8:	0800bdf3 	.word	0x0800bdf3
 800bddc:	0800bdf9 	.word	0x0800bdf9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bde0:	2336      	movs	r3, #54	; 0x36
 800bde2:	81fb      	strh	r3, [r7, #14]
    break;
 800bde4:	e014      	b.n	800be10 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bde6:	2322      	movs	r3, #34	; 0x22
 800bde8:	81fb      	strh	r3, [r7, #14]
    break;
 800bdea:	e011      	b.n	800be10 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bdec:	230e      	movs	r3, #14
 800bdee:	81fb      	strh	r3, [r7, #14]
    break;
 800bdf0:	e00e      	b.n	800be10 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	81fb      	strh	r3, [r7, #14]
    break;
 800bdf6:	e00b      	b.n	800be10 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	81fb      	strh	r3, [r7, #14]
    break;
 800bdfc:	e008      	b.n	800be10 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <pbuf_alloced_custom+0xc8>)
 800be00:	f240 12c5 	movw	r2, #453	; 0x1c5
 800be04:	491c      	ldr	r1, [pc, #112]	; (800be78 <pbuf_alloced_custom+0xcc>)
 800be06:	481d      	ldr	r0, [pc, #116]	; (800be7c <pbuf_alloced_custom+0xd0>)
 800be08:	f00a febe 	bl	8016b88 <iprintf>
    return NULL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	e02d      	b.n	800be6c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800be10:	89fb      	ldrh	r3, [r7, #14]
 800be12:	3303      	adds	r3, #3
 800be14:	f023 0203 	bic.w	r2, r3, #3
 800be18:	88bb      	ldrh	r3, [r7, #4]
 800be1a:	441a      	add	r2, r3
 800be1c:	8bbb      	ldrh	r3, [r7, #28]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d901      	bls.n	800be26 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	e022      	b.n	800be6c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be32:	89fb      	ldrh	r3, [r7, #14]
 800be34:	3303      	adds	r3, #3
 800be36:	f023 0303 	bic.w	r3, r3, #3
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	441a      	add	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	605a      	str	r2, [r3, #4]
 800be42:	e002      	b.n	800be4a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2200      	movs	r2, #0
 800be48:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2202      	movs	r2, #2
 800be4e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	88ba      	ldrh	r2, [r7, #4]
 800be54:	811a      	strh	r2, [r3, #8]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	891a      	ldrh	r2, [r3, #8]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	79ba      	ldrb	r2, [r7, #6]
 800be62:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2201      	movs	r2, #1
 800be68:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800be6a:	683b      	ldr	r3, [r7, #0]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	08018fc8 	.word	0x08018fc8
 800be78:	08019160 	.word	0x08019160
 800be7c:	08019014 	.word	0x08019014

0800be80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <pbuf_realloc+0x20>
 800be92:	4b4b      	ldr	r3, [pc, #300]	; (800bfc0 <pbuf_realloc+0x140>)
 800be94:	f240 12f3 	movw	r2, #499	; 0x1f3
 800be98:	494a      	ldr	r1, [pc, #296]	; (800bfc4 <pbuf_realloc+0x144>)
 800be9a:	484b      	ldr	r0, [pc, #300]	; (800bfc8 <pbuf_realloc+0x148>)
 800be9c:	f00a fe74 	bl	8016b88 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7b1b      	ldrb	r3, [r3, #12]
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d012      	beq.n	800bece <pbuf_realloc+0x4e>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7b1b      	ldrb	r3, [r3, #12]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d00e      	beq.n	800bece <pbuf_realloc+0x4e>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	7b1b      	ldrb	r3, [r3, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00a      	beq.n	800bece <pbuf_realloc+0x4e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	7b1b      	ldrb	r3, [r3, #12]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d006      	beq.n	800bece <pbuf_realloc+0x4e>
 800bec0:	4b3f      	ldr	r3, [pc, #252]	; (800bfc0 <pbuf_realloc+0x140>)
 800bec2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bec6:	4941      	ldr	r1, [pc, #260]	; (800bfcc <pbuf_realloc+0x14c>)
 800bec8:	483f      	ldr	r0, [pc, #252]	; (800bfc8 <pbuf_realloc+0x148>)
 800beca:	f00a fe5d 	bl	8016b88 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	891b      	ldrh	r3, [r3, #8]
 800bed2:	887a      	ldrh	r2, [r7, #2]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d26f      	bcs.n	800bfb8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800bed8:	887b      	ldrh	r3, [r7, #2]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	8912      	ldrh	r2, [r2, #8]
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bee2:	887b      	ldrh	r3, [r7, #2]
 800bee4:	827b      	strh	r3, [r7, #18]
  q = p;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800beea:	e025      	b.n	800bf38 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	895b      	ldrh	r3, [r3, #10]
 800bef0:	8a7a      	ldrh	r2, [r7, #18]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800befc:	4293      	cmp	r3, r2
 800befe:	dd06      	ble.n	800bf0e <pbuf_realloc+0x8e>
 800bf00:	4b2f      	ldr	r3, [pc, #188]	; (800bfc0 <pbuf_realloc+0x140>)
 800bf02:	f240 220b 	movw	r2, #523	; 0x20b
 800bf06:	4932      	ldr	r1, [pc, #200]	; (800bfd0 <pbuf_realloc+0x150>)
 800bf08:	482f      	ldr	r0, [pc, #188]	; (800bfc8 <pbuf_realloc+0x148>)
 800bf0a:	f00a fe3d 	bl	8016b88 <iprintf>
    q->tot_len += (u16_t)grow;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	891a      	ldrh	r2, [r3, #8]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	4413      	add	r3, r2
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d106      	bne.n	800bf38 <pbuf_realloc+0xb8>
 800bf2a:	4b25      	ldr	r3, [pc, #148]	; (800bfc0 <pbuf_realloc+0x140>)
 800bf2c:	f240 220f 	movw	r2, #527	; 0x20f
 800bf30:	4928      	ldr	r1, [pc, #160]	; (800bfd4 <pbuf_realloc+0x154>)
 800bf32:	4825      	ldr	r0, [pc, #148]	; (800bfc8 <pbuf_realloc+0x148>)
 800bf34:	f00a fe28 	bl	8016b88 <iprintf>
  while (rem_len > q->len) {
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	895b      	ldrh	r3, [r3, #10]
 800bf3c:	8a7a      	ldrh	r2, [r7, #18]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d8d4      	bhi.n	800beec <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	7b1b      	ldrb	r3, [r3, #12]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d122      	bne.n	800bf90 <pbuf_realloc+0x110>
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	895b      	ldrh	r3, [r3, #10]
 800bf4e:	8a7a      	ldrh	r2, [r7, #18]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d01d      	beq.n	800bf90 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	7b5b      	ldrb	r3, [r3, #13]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d117      	bne.n	800bf90 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	461a      	mov	r2, r3
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	8a7b      	ldrh	r3, [r7, #18]
 800bf6e:	4413      	add	r3, r2
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	4619      	mov	r1, r3
 800bf74:	6978      	ldr	r0, [r7, #20]
 800bf76:	f7ff f8e9 	bl	800b14c <mem_trim>
 800bf7a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d106      	bne.n	800bf90 <pbuf_realloc+0x110>
 800bf82:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <pbuf_realloc+0x140>)
 800bf84:	f240 221d 	movw	r2, #541	; 0x21d
 800bf88:	4913      	ldr	r1, [pc, #76]	; (800bfd8 <pbuf_realloc+0x158>)
 800bf8a:	480f      	ldr	r0, [pc, #60]	; (800bfc8 <pbuf_realloc+0x148>)
 800bf8c:	f00a fdfc 	bl	8016b88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	8a7a      	ldrh	r2, [r7, #18]
 800bf94:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	895a      	ldrh	r2, [r3, #10]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d004      	beq.n	800bfb0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f000 f8dc 	bl	800c168 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	e000      	b.n	800bfba <pbuf_realloc+0x13a>
    return;
 800bfb8:	bf00      	nop

}
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	08018fc8 	.word	0x08018fc8
 800bfc4:	08019184 	.word	0x08019184
 800bfc8:	08019014 	.word	0x08019014
 800bfcc:	0801919c 	.word	0x0801919c
 800bfd0:	080191b8 	.word	0x080191b8
 800bfd4:	080191cc 	.word	0x080191cc
 800bfd8:	080191e4 	.word	0x080191e4

0800bfdc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	807b      	strh	r3, [r7, #2]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <pbuf_header_impl+0x24>
 800bff2:	4b46      	ldr	r3, [pc, #280]	; (800c10c <pbuf_header_impl+0x130>)
 800bff4:	f240 223f 	movw	r2, #575	; 0x23f
 800bff8:	4945      	ldr	r1, [pc, #276]	; (800c110 <pbuf_header_impl+0x134>)
 800bffa:	4846      	ldr	r0, [pc, #280]	; (800c114 <pbuf_header_impl+0x138>)
 800bffc:	f00a fdc4 	bl	8016b88 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <pbuf_header_impl+0x32>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <pbuf_header_impl+0x36>
    return 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	e078      	b.n	800c104 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c016:	2b00      	cmp	r3, #0
 800c018:	da10      	bge.n	800c03c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c01a:	887b      	ldrh	r3, [r7, #2]
 800c01c:	425b      	negs	r3, r3
 800c01e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	895b      	ldrh	r3, [r3, #10]
 800c024:	89fa      	ldrh	r2, [r7, #14]
 800c026:	429a      	cmp	r2, r3
 800c028:	d90a      	bls.n	800c040 <pbuf_header_impl+0x64>
 800c02a:	4b38      	ldr	r3, [pc, #224]	; (800c10c <pbuf_header_impl+0x130>)
 800c02c:	f240 2247 	movw	r2, #583	; 0x247
 800c030:	4939      	ldr	r1, [pc, #228]	; (800c118 <pbuf_header_impl+0x13c>)
 800c032:	4838      	ldr	r0, [pc, #224]	; (800c114 <pbuf_header_impl+0x138>)
 800c034:	f00a fda8 	bl	8016b88 <iprintf>
 800c038:	2301      	movs	r3, #1
 800c03a:	e063      	b.n	800c104 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c03c:	887b      	ldrh	r3, [r7, #2]
 800c03e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7b1b      	ldrb	r3, [r3, #12]
 800c044:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c04c:	89bb      	ldrh	r3, [r7, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <pbuf_header_impl+0x7c>
 800c052:	89bb      	ldrh	r3, [r7, #12]
 800c054:	2b03      	cmp	r3, #3
 800c056:	d112      	bne.n	800c07e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c060:	425b      	negs	r3, r3
 800c062:	441a      	add	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3310      	adds	r3, #16
 800c070:	429a      	cmp	r2, r3
 800c072:	d238      	bcs.n	800c0e6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e042      	b.n	800c104 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c07e:	89bb      	ldrh	r3, [r7, #12]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d002      	beq.n	800c08a <pbuf_header_impl+0xae>
 800c084:	89bb      	ldrh	r3, [r7, #12]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d124      	bne.n	800c0d4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c08a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	da0d      	bge.n	800c0ae <pbuf_header_impl+0xd2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	895b      	ldrh	r3, [r3, #10]
 800c096:	89fa      	ldrh	r2, [r7, #14]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d808      	bhi.n	800c0ae <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0a4:	425b      	negs	r3, r3
 800c0a6:	441a      	add	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	605a      	str	r2, [r3, #4]
 800c0ac:	e011      	b.n	800c0d2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c0ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dd0b      	ble.n	800c0ce <pbuf_header_impl+0xf2>
 800c0b6:	787b      	ldrb	r3, [r7, #1]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d008      	beq.n	800c0ce <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0c4:	425b      	negs	r3, r3
 800c0c6:	441a      	add	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	605a      	str	r2, [r3, #4]
 800c0cc:	e001      	b.n	800c0d2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e018      	b.n	800c104 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c0d2:	e008      	b.n	800c0e6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c0d4:	4b0d      	ldr	r3, [pc, #52]	; (800c10c <pbuf_header_impl+0x130>)
 800c0d6:	f240 2277 	movw	r2, #631	; 0x277
 800c0da:	4910      	ldr	r1, [pc, #64]	; (800c11c <pbuf_header_impl+0x140>)
 800c0dc:	480d      	ldr	r0, [pc, #52]	; (800c114 <pbuf_header_impl+0x138>)
 800c0de:	f00a fd53 	bl	8016b88 <iprintf>
    return 1;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e00e      	b.n	800c104 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	895a      	ldrh	r2, [r3, #10]
 800c0ea:	887b      	ldrh	r3, [r7, #2]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	891a      	ldrh	r2, [r3, #8]
 800c0f8:	887b      	ldrh	r3, [r7, #2]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	08018fc8 	.word	0x08018fc8
 800c110:	08019200 	.word	0x08019200
 800c114:	08019014 	.word	0x08019014
 800c118:	0801920c 	.word	0x0801920c
 800c11c:	0801922c 	.word	0x0801922c

0800c120 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c12c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c130:	2200      	movs	r2, #0
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff ff51 	bl	800bfdc <pbuf_header_impl>
 800c13a:	4603      	mov	r3, r0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c154:	2201      	movs	r2, #1
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff ff3f 	bl	800bfdc <pbuf_header_impl>
 800c15e:	4603      	mov	r3, r0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10b      	bne.n	800c18e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d106      	bne.n	800c18a <pbuf_free+0x22>
 800c17c:	4b41      	ldr	r3, [pc, #260]	; (800c284 <pbuf_free+0x11c>)
 800c17e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c182:	4941      	ldr	r1, [pc, #260]	; (800c288 <pbuf_free+0x120>)
 800c184:	4841      	ldr	r0, [pc, #260]	; (800c28c <pbuf_free+0x124>)
 800c186:	f00a fcff 	bl	8016b88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e076      	b.n	800c27c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7b1b      	ldrb	r3, [r3, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d012      	beq.n	800c1bc <pbuf_free+0x54>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7b1b      	ldrb	r3, [r3, #12]
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d00e      	beq.n	800c1bc <pbuf_free+0x54>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	7b1b      	ldrb	r3, [r3, #12]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d00a      	beq.n	800c1bc <pbuf_free+0x54>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7b1b      	ldrb	r3, [r3, #12]
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d006      	beq.n	800c1bc <pbuf_free+0x54>
 800c1ae:	4b35      	ldr	r3, [pc, #212]	; (800c284 <pbuf_free+0x11c>)
 800c1b0:	f240 22de 	movw	r2, #734	; 0x2de
 800c1b4:	4936      	ldr	r1, [pc, #216]	; (800c290 <pbuf_free+0x128>)
 800c1b6:	4835      	ldr	r0, [pc, #212]	; (800c28c <pbuf_free+0x124>)
 800c1b8:	f00a fce6 	bl	8016b88 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c1c0:	e058      	b.n	800c274 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c1c2:	f00a fc7d 	bl	8016ac0 <sys_arch_protect>
 800c1c6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	89db      	ldrh	r3, [r3, #14]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <pbuf_free+0x76>
 800c1d0:	4b2c      	ldr	r3, [pc, #176]	; (800c284 <pbuf_free+0x11c>)
 800c1d2:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c1d6:	492f      	ldr	r1, [pc, #188]	; (800c294 <pbuf_free+0x12c>)
 800c1d8:	482c      	ldr	r0, [pc, #176]	; (800c28c <pbuf_free+0x124>)
 800c1da:	f00a fcd5 	bl	8016b88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	89db      	ldrh	r3, [r3, #14]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	81da      	strh	r2, [r3, #14]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	89db      	ldrh	r3, [r3, #14]
 800c1ee:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c1f0:	69b8      	ldr	r0, [r7, #24]
 800c1f2:	f00a fc73 	bl	8016adc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c1f6:	8afb      	ldrh	r3, [r7, #22]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d139      	bne.n	800c270 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7b1b      	ldrb	r3, [r3, #12]
 800c206:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	7b5b      	ldrb	r3, [r3, #13]
 800c20c:	f003 0302 	and.w	r3, r3, #2
 800c210:	2b00      	cmp	r3, #0
 800c212:	d011      	beq.n	800c238 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <pbuf_free+0xc6>
 800c220:	4b18      	ldr	r3, [pc, #96]	; (800c284 <pbuf_free+0x11c>)
 800c222:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c226:	491c      	ldr	r1, [pc, #112]	; (800c298 <pbuf_free+0x130>)
 800c228:	4818      	ldr	r0, [pc, #96]	; (800c28c <pbuf_free+0x124>)
 800c22a:	f00a fcad 	bl	8016b88 <iprintf>
        pc->custom_free_function(p);
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	4798      	blx	r3
 800c236:	e015      	b.n	800c264 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c238:	89fb      	ldrh	r3, [r7, #14]
 800c23a:	2b03      	cmp	r3, #3
 800c23c:	d104      	bne.n	800c248 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c23e:	6879      	ldr	r1, [r7, #4]
 800c240:	200c      	movs	r0, #12
 800c242:	f7ff fa2f 	bl	800b6a4 <memp_free>
 800c246:	e00d      	b.n	800c264 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d002      	beq.n	800c254 <pbuf_free+0xec>
 800c24e:	89fb      	ldrh	r3, [r7, #14]
 800c250:	2b02      	cmp	r3, #2
 800c252:	d104      	bne.n	800c25e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c254:	6879      	ldr	r1, [r7, #4]
 800c256:	200b      	movs	r0, #11
 800c258:	f7ff fa24 	bl	800b6a4 <memp_free>
 800c25c:	e002      	b.n	800c264 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7fe ff06 	bl	800b070 <mem_free>
        }
      }
      count++;
 800c264:	7ffb      	ldrb	r3, [r7, #31]
 800c266:	3301      	adds	r3, #1
 800c268:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	607b      	str	r3, [r7, #4]
 800c26e:	e001      	b.n	800c274 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c270:	2300      	movs	r3, #0
 800c272:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1a3      	bne.n	800c1c2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c27a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	08018fc8 	.word	0x08018fc8
 800c288:	08019200 	.word	0x08019200
 800c28c:	08019014 	.word	0x08019014
 800c290:	0801923c 	.word	0x0801923c
 800c294:	08019254 	.word	0x08019254
 800c298:	0801926c 	.word	0x0801926c

0800c29c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c2a8:	e005      	b.n	800c2b6 <pbuf_clen+0x1a>
    ++len;
 800c2aa:	89fb      	ldrh	r3, [r7, #14]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f6      	bne.n	800c2aa <pbuf_clen+0xe>
  }
  return len;
 800c2bc:	89fb      	ldrh	r3, [r7, #14]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d016      	beq.n	800c308 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c2da:	f00a fbf1 	bl	8016ac0 <sys_arch_protect>
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	89db      	ldrh	r3, [r3, #14]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	81da      	strh	r2, [r3, #14]
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f00a fbf5 	bl	8016adc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	89db      	ldrh	r3, [r3, #14]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <pbuf_ref+0x3c>
 800c2fa:	4b05      	ldr	r3, [pc, #20]	; (800c310 <pbuf_ref+0x44>)
 800c2fc:	f240 3239 	movw	r2, #825	; 0x339
 800c300:	4904      	ldr	r1, [pc, #16]	; (800c314 <pbuf_ref+0x48>)
 800c302:	4805      	ldr	r0, [pc, #20]	; (800c318 <pbuf_ref+0x4c>)
 800c304:	f00a fc40 	bl	8016b88 <iprintf>
  }
}
 800c308:	bf00      	nop
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	08018fc8 	.word	0x08018fc8
 800c314:	08019290 	.word	0x08019290
 800c318:	08019014 	.word	0x08019014

0800c31c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <pbuf_cat+0x16>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d107      	bne.n	800c342 <pbuf_cat+0x26>
 800c332:	4b20      	ldr	r3, [pc, #128]	; (800c3b4 <pbuf_cat+0x98>)
 800c334:	f240 324d 	movw	r2, #845	; 0x34d
 800c338:	491f      	ldr	r1, [pc, #124]	; (800c3b8 <pbuf_cat+0x9c>)
 800c33a:	4820      	ldr	r0, [pc, #128]	; (800c3bc <pbuf_cat+0xa0>)
 800c33c:	f00a fc24 	bl	8016b88 <iprintf>
 800c340:	e034      	b.n	800c3ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	e00a      	b.n	800c35e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	891a      	ldrh	r2, [r3, #8]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	891b      	ldrh	r3, [r3, #8]
 800c350:	4413      	add	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60fb      	str	r3, [r7, #12]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1f0      	bne.n	800c348 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	891a      	ldrh	r2, [r3, #8]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	895b      	ldrh	r3, [r3, #10]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d006      	beq.n	800c380 <pbuf_cat+0x64>
 800c372:	4b10      	ldr	r3, [pc, #64]	; (800c3b4 <pbuf_cat+0x98>)
 800c374:	f240 3255 	movw	r2, #853	; 0x355
 800c378:	4911      	ldr	r1, [pc, #68]	; (800c3c0 <pbuf_cat+0xa4>)
 800c37a:	4810      	ldr	r0, [pc, #64]	; (800c3bc <pbuf_cat+0xa0>)
 800c37c:	f00a fc04 	bl	8016b88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <pbuf_cat+0x7a>
 800c388:	4b0a      	ldr	r3, [pc, #40]	; (800c3b4 <pbuf_cat+0x98>)
 800c38a:	f240 3256 	movw	r2, #854	; 0x356
 800c38e:	490d      	ldr	r1, [pc, #52]	; (800c3c4 <pbuf_cat+0xa8>)
 800c390:	480a      	ldr	r0, [pc, #40]	; (800c3bc <pbuf_cat+0xa0>)
 800c392:	f00a fbf9 	bl	8016b88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	891a      	ldrh	r2, [r3, #8]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	4413      	add	r3, r2
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	08018fc8 	.word	0x08018fc8
 800c3b8:	080192a4 	.word	0x080192a4
 800c3bc:	08019014 	.word	0x08019014
 800c3c0:	080192dc 	.word	0x080192dc
 800c3c4:	0801930c 	.word	0x0801930c

0800c3c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ffa1 	bl	800c31c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c3da:	6838      	ldr	r0, [r7, #0]
 800c3dc:	f7ff ff76 	bl	800c2cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	81fb      	strh	r3, [r7, #14]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <pbuf_copy+0x2a>
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <pbuf_copy+0x2a>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	891a      	ldrh	r2, [r3, #8]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	891b      	ldrh	r3, [r3, #8]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d209      	bcs.n	800c426 <pbuf_copy+0x3e>
 800c412:	4b54      	ldr	r3, [pc, #336]	; (800c564 <pbuf_copy+0x17c>)
 800c414:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c418:	4953      	ldr	r1, [pc, #332]	; (800c568 <pbuf_copy+0x180>)
 800c41a:	4854      	ldr	r0, [pc, #336]	; (800c56c <pbuf_copy+0x184>)
 800c41c:	f00a fbb4 	bl	8016b88 <iprintf>
 800c420:	f06f 030f 	mvn.w	r3, #15
 800c424:	e099      	b.n	800c55a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	895b      	ldrh	r3, [r3, #10]
 800c42a:	461a      	mov	r2, r3
 800c42c:	89fb      	ldrh	r3, [r7, #14]
 800c42e:	1ad2      	subs	r2, r2, r3
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	895b      	ldrh	r3, [r3, #10]
 800c434:	4619      	mov	r1, r3
 800c436:	89bb      	ldrh	r3, [r7, #12]
 800c438:	1acb      	subs	r3, r1, r3
 800c43a:	429a      	cmp	r2, r3
 800c43c:	db05      	blt.n	800c44a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	895a      	ldrh	r2, [r3, #10]
 800c442:	89bb      	ldrh	r3, [r7, #12]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	817b      	strh	r3, [r7, #10]
 800c448:	e004      	b.n	800c454 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	895a      	ldrh	r2, [r3, #10]
 800c44e:	89fb      	ldrh	r3, [r7, #14]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	89fb      	ldrh	r3, [r7, #14]
 800c45a:	18d0      	adds	r0, r2, r3
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	89bb      	ldrh	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	897a      	ldrh	r2, [r7, #10]
 800c466:	4619      	mov	r1, r3
 800c468:	f00a fb7b 	bl	8016b62 <memcpy>
    offset_to += len;
 800c46c:	89fa      	ldrh	r2, [r7, #14]
 800c46e:	897b      	ldrh	r3, [r7, #10]
 800c470:	4413      	add	r3, r2
 800c472:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c474:	89ba      	ldrh	r2, [r7, #12]
 800c476:	897b      	ldrh	r3, [r7, #10]
 800c478:	4413      	add	r3, r2
 800c47a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	89fa      	ldrh	r2, [r7, #14]
 800c482:	429a      	cmp	r2, r3
 800c484:	d906      	bls.n	800c494 <pbuf_copy+0xac>
 800c486:	4b37      	ldr	r3, [pc, #220]	; (800c564 <pbuf_copy+0x17c>)
 800c488:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c48c:	4938      	ldr	r1, [pc, #224]	; (800c570 <pbuf_copy+0x188>)
 800c48e:	4837      	ldr	r0, [pc, #220]	; (800c56c <pbuf_copy+0x184>)
 800c490:	f00a fb7a 	bl	8016b88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	895b      	ldrh	r3, [r3, #10]
 800c498:	89ba      	ldrh	r2, [r7, #12]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d906      	bls.n	800c4ac <pbuf_copy+0xc4>
 800c49e:	4b31      	ldr	r3, [pc, #196]	; (800c564 <pbuf_copy+0x17c>)
 800c4a0:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c4a4:	4933      	ldr	r1, [pc, #204]	; (800c574 <pbuf_copy+0x18c>)
 800c4a6:	4831      	ldr	r0, [pc, #196]	; (800c56c <pbuf_copy+0x184>)
 800c4a8:	f00a fb6e 	bl	8016b88 <iprintf>
    if (offset_from >= p_from->len) {
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	895b      	ldrh	r3, [r3, #10]
 800c4b0:	89ba      	ldrh	r2, [r7, #12]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d304      	bcc.n	800c4c0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	895b      	ldrh	r3, [r3, #10]
 800c4c4:	89fa      	ldrh	r2, [r7, #14]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d114      	bne.n	800c4f4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10c      	bne.n	800c4f4 <pbuf_copy+0x10c>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d009      	beq.n	800c4f4 <pbuf_copy+0x10c>
 800c4e0:	4b20      	ldr	r3, [pc, #128]	; (800c564 <pbuf_copy+0x17c>)
 800c4e2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c4e6:	4924      	ldr	r1, [pc, #144]	; (800c578 <pbuf_copy+0x190>)
 800c4e8:	4820      	ldr	r0, [pc, #128]	; (800c56c <pbuf_copy+0x184>)
 800c4ea:	f00a fb4d 	bl	8016b88 <iprintf>
 800c4ee:	f06f 030f 	mvn.w	r3, #15
 800c4f2:	e032      	b.n	800c55a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d013      	beq.n	800c522 <pbuf_copy+0x13a>
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	895a      	ldrh	r2, [r3, #10]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	891b      	ldrh	r3, [r3, #8]
 800c502:	429a      	cmp	r2, r3
 800c504:	d10d      	bne.n	800c522 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d009      	beq.n	800c522 <pbuf_copy+0x13a>
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <pbuf_copy+0x17c>)
 800c510:	f240 32de 	movw	r2, #990	; 0x3de
 800c514:	4919      	ldr	r1, [pc, #100]	; (800c57c <pbuf_copy+0x194>)
 800c516:	4815      	ldr	r0, [pc, #84]	; (800c56c <pbuf_copy+0x184>)
 800c518:	f00a fb36 	bl	8016b88 <iprintf>
 800c51c:	f06f 0305 	mvn.w	r3, #5
 800c520:	e01b      	b.n	800c55a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d013      	beq.n	800c550 <pbuf_copy+0x168>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	895a      	ldrh	r2, [r3, #10]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	891b      	ldrh	r3, [r3, #8]
 800c530:	429a      	cmp	r2, r3
 800c532:	d10d      	bne.n	800c550 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d009      	beq.n	800c550 <pbuf_copy+0x168>
 800c53c:	4b09      	ldr	r3, [pc, #36]	; (800c564 <pbuf_copy+0x17c>)
 800c53e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c542:	490e      	ldr	r1, [pc, #56]	; (800c57c <pbuf_copy+0x194>)
 800c544:	4809      	ldr	r0, [pc, #36]	; (800c56c <pbuf_copy+0x184>)
 800c546:	f00a fb1f 	bl	8016b88 <iprintf>
 800c54a:	f06f 0305 	mvn.w	r3, #5
 800c54e:	e004      	b.n	800c55a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	f47f af67 	bne.w	800c426 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	08018fc8 	.word	0x08018fc8
 800c568:	08019358 	.word	0x08019358
 800c56c:	08019014 	.word	0x08019014
 800c570:	08019388 	.word	0x08019388
 800c574:	080193a0 	.word	0x080193a0
 800c578:	080193bc 	.word	0x080193bc
 800c57c:	080193cc 	.word	0x080193cc

0800c580 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4611      	mov	r1, r2
 800c58c:	461a      	mov	r2, r3
 800c58e:	460b      	mov	r3, r1
 800c590:	80fb      	strh	r3, [r7, #6]
 800c592:	4613      	mov	r3, r2
 800c594:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d108      	bne.n	800c5b2 <pbuf_copy_partial+0x32>
 800c5a0:	4b30      	ldr	r3, [pc, #192]	; (800c664 <pbuf_copy_partial+0xe4>)
 800c5a2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c5a6:	4930      	ldr	r1, [pc, #192]	; (800c668 <pbuf_copy_partial+0xe8>)
 800c5a8:	4830      	ldr	r0, [pc, #192]	; (800c66c <pbuf_copy_partial+0xec>)
 800c5aa:	f00a faed 	bl	8016b88 <iprintf>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	e054      	b.n	800c65c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d108      	bne.n	800c5ca <pbuf_copy_partial+0x4a>
 800c5b8:	4b2a      	ldr	r3, [pc, #168]	; (800c664 <pbuf_copy_partial+0xe4>)
 800c5ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c5be:	492c      	ldr	r1, [pc, #176]	; (800c670 <pbuf_copy_partial+0xf0>)
 800c5c0:	482a      	ldr	r0, [pc, #168]	; (800c66c <pbuf_copy_partial+0xec>)
 800c5c2:	f00a fae1 	bl	8016b88 <iprintf>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e048      	b.n	800c65c <pbuf_copy_partial+0xdc>

  left = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <pbuf_copy_partial+0x5a>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <pbuf_copy_partial+0x5e>
    return 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e03e      	b.n	800c65c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	61fb      	str	r3, [r7, #28]
 800c5e2:	e034      	b.n	800c64e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c5e4:	88bb      	ldrh	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00a      	beq.n	800c600 <pbuf_copy_partial+0x80>
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	895b      	ldrh	r3, [r3, #10]
 800c5ee:	88ba      	ldrh	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d305      	bcc.n	800c600 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	895b      	ldrh	r3, [r3, #10]
 800c5f8:	88ba      	ldrh	r2, [r7, #4]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	80bb      	strh	r3, [r7, #4]
 800c5fe:	e023      	b.n	800c648 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	895a      	ldrh	r2, [r3, #10]
 800c604:	88bb      	ldrh	r3, [r7, #4]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c60a:	8b3a      	ldrh	r2, [r7, #24]
 800c60c:	88fb      	ldrh	r3, [r7, #6]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d901      	bls.n	800c616 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c612:	88fb      	ldrh	r3, [r7, #6]
 800c614:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c616:	8b7b      	ldrh	r3, [r7, #26]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	18d0      	adds	r0, r2, r3
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	685a      	ldr	r2, [r3, #4]
 800c620:	88bb      	ldrh	r3, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	8b3a      	ldrh	r2, [r7, #24]
 800c626:	4619      	mov	r1, r3
 800c628:	f00a fa9b 	bl	8016b62 <memcpy>
      copied_total += buf_copy_len;
 800c62c:	8afa      	ldrh	r2, [r7, #22]
 800c62e:	8b3b      	ldrh	r3, [r7, #24]
 800c630:	4413      	add	r3, r2
 800c632:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c634:	8b7a      	ldrh	r2, [r7, #26]
 800c636:	8b3b      	ldrh	r3, [r7, #24]
 800c638:	4413      	add	r3, r2
 800c63a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c63c:	88fa      	ldrh	r2, [r7, #6]
 800c63e:	8b3b      	ldrh	r3, [r7, #24]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	88fb      	ldrh	r3, [r7, #6]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <pbuf_copy_partial+0xda>
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1c4      	bne.n	800c5e4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c65a:	8afb      	ldrh	r3, [r7, #22]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	08018fc8 	.word	0x08018fc8
 800c668:	080193f8 	.word	0x080193f8
 800c66c:	08019014 	.word	0x08019014
 800c670:	08019418 	.word	0x08019418

0800c674 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c678:	bf00      	nop
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
	...

0800c684 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c688:	f000 ffc8 	bl	800d61c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c68c:	4b07      	ldr	r3, [pc, #28]	; (800c6ac <tcp_tmr+0x28>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	3301      	adds	r3, #1
 800c692:	b2da      	uxtb	r2, r3
 800c694:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <tcp_tmr+0x28>)
 800c696:	701a      	strb	r2, [r3, #0]
 800c698:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <tcp_tmr+0x28>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c6a4:	f000 fcfa 	bl	800d09c <tcp_slowtmr>
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	20008c3d 	.word	0x20008c3d

0800c6b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	e00a      	b.n	800c6d6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d102      	bne.n	800c6d0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1f1      	bne.n	800c6c0 <tcp_remove_listener+0x10>
      }
   }
}
 800c6dc:	bf00      	nop
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <tcp_listen_closed+0x1a>
 800c6f6:	4b13      	ldr	r3, [pc, #76]	; (800c744 <tcp_listen_closed+0x5c>)
 800c6f8:	22c0      	movs	r2, #192	; 0xc0
 800c6fa:	4913      	ldr	r1, [pc, #76]	; (800c748 <tcp_listen_closed+0x60>)
 800c6fc:	4813      	ldr	r0, [pc, #76]	; (800c74c <tcp_listen_closed+0x64>)
 800c6fe:	f00a fa43 	bl	8016b88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7d1b      	ldrb	r3, [r3, #20]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d005      	beq.n	800c716 <tcp_listen_closed+0x2e>
 800c70a:	4b0e      	ldr	r3, [pc, #56]	; (800c744 <tcp_listen_closed+0x5c>)
 800c70c:	22c1      	movs	r2, #193	; 0xc1
 800c70e:	4910      	ldr	r1, [pc, #64]	; (800c750 <tcp_listen_closed+0x68>)
 800c710:	480e      	ldr	r0, [pc, #56]	; (800c74c <tcp_listen_closed+0x64>)
 800c712:	f00a fa39 	bl	8016b88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c716:	2301      	movs	r3, #1
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	e00b      	b.n	800c734 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c71c:	4a0d      	ldr	r2, [pc, #52]	; (800c754 <tcp_listen_closed+0x6c>)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff ffc1 	bl	800c6b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3301      	adds	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d9f0      	bls.n	800c71c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0801954c 	.word	0x0801954c
 800c748:	0801957c 	.word	0x0801957c
 800c74c:	08019588 	.word	0x08019588
 800c750:	080195b0 	.word	0x080195b0
 800c754:	080262ac 	.word	0x080262ac

0800c758 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c758:	b5b0      	push	{r4, r5, r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af02      	add	r7, sp, #8
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d075      	beq.n	800c856 <tcp_close_shutdown+0xfe>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d003      	beq.n	800c77a <tcp_close_shutdown+0x22>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7d1b      	ldrb	r3, [r3, #20]
 800c776:	2b07      	cmp	r3, #7
 800c778:	d16d      	bne.n	800c856 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d104      	bne.n	800c78c <tcp_close_shutdown+0x34>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c786:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c78a:	d064      	beq.n	800c856 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	7e9b      	ldrb	r3, [r3, #26]
 800c790:	f003 0310 	and.w	r3, r3, #16
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <tcp_close_shutdown+0x4e>
 800c798:	4b59      	ldr	r3, [pc, #356]	; (800c900 <tcp_close_shutdown+0x1a8>)
 800c79a:	f240 120f 	movw	r2, #271	; 0x10f
 800c79e:	4959      	ldr	r1, [pc, #356]	; (800c904 <tcp_close_shutdown+0x1ac>)
 800c7a0:	4859      	ldr	r0, [pc, #356]	; (800c908 <tcp_close_shutdown+0x1b0>)
 800c7a2:	f00a f9f1 	bl	8016b88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c7ae:	687c      	ldr	r4, [r7, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1d1d      	adds	r5, r3, #4
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8adb      	ldrh	r3, [r3, #22]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	8b12      	ldrh	r2, [r2, #24]
 800c7bc:	9201      	str	r2, [sp, #4]
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	462b      	mov	r3, r5
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	f004 ff3a 	bl	801163c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 fa6b 	bl	800dca4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c7ce:	4b4f      	ldr	r3, [pc, #316]	; (800c90c <tcp_close_shutdown+0x1b4>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d105      	bne.n	800c7e4 <tcp_close_shutdown+0x8c>
 800c7d8:	4b4c      	ldr	r3, [pc, #304]	; (800c90c <tcp_close_shutdown+0x1b4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	4a4b      	ldr	r2, [pc, #300]	; (800c90c <tcp_close_shutdown+0x1b4>)
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	e013      	b.n	800c80c <tcp_close_shutdown+0xb4>
 800c7e4:	4b49      	ldr	r3, [pc, #292]	; (800c90c <tcp_close_shutdown+0x1b4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e00c      	b.n	800c806 <tcp_close_shutdown+0xae>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d104      	bne.n	800c800 <tcp_close_shutdown+0xa8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68da      	ldr	r2, [r3, #12]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	60da      	str	r2, [r3, #12]
 800c7fe:	e005      	b.n	800c80c <tcp_close_shutdown+0xb4>
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1ef      	bne.n	800c7ec <tcp_close_shutdown+0x94>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	60da      	str	r2, [r3, #12]
 800c812:	4b3f      	ldr	r3, [pc, #252]	; (800c910 <tcp_close_shutdown+0x1b8>)
 800c814:	2201      	movs	r2, #1
 800c816:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7d1b      	ldrb	r3, [r3, #20]
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	d10c      	bne.n	800c83a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	220a      	movs	r2, #10
 800c824:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c826:	4b3b      	ldr	r3, [pc, #236]	; (800c914 <tcp_close_shutdown+0x1bc>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	60da      	str	r2, [r3, #12]
 800c82e:	4a39      	ldr	r2, [pc, #228]	; (800c914 <tcp_close_shutdown+0x1bc>)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	f005 f952 	bl	8011adc <tcp_timer_needed>
 800c838:	e00b      	b.n	800c852 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800c83a:	4b37      	ldr	r3, [pc, #220]	; (800c918 <tcp_close_shutdown+0x1c0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d102      	bne.n	800c84a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800c844:	f003 fd92 	bl	801036c <tcp_trigger_input_pcb_close>
 800c848:	e003      	b.n	800c852 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	2001      	movs	r0, #1
 800c84e:	f7fe ff29 	bl	800b6a4 <memp_free>
        }
      }
      return ERR_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	e050      	b.n	800c8f8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	7d1b      	ldrb	r3, [r3, #20]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d02e      	beq.n	800c8bc <tcp_close_shutdown+0x164>
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d038      	beq.n	800c8d4 <tcp_close_shutdown+0x17c>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d142      	bne.n	800c8ec <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	8adb      	ldrh	r3, [r3, #22]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d021      	beq.n	800c8b2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c86e:	4b2b      	ldr	r3, [pc, #172]	; (800c91c <tcp_close_shutdown+0x1c4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	429a      	cmp	r2, r3
 800c876:	d105      	bne.n	800c884 <tcp_close_shutdown+0x12c>
 800c878:	4b28      	ldr	r3, [pc, #160]	; (800c91c <tcp_close_shutdown+0x1c4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	4a27      	ldr	r2, [pc, #156]	; (800c91c <tcp_close_shutdown+0x1c4>)
 800c880:	6013      	str	r3, [r2, #0]
 800c882:	e013      	b.n	800c8ac <tcp_close_shutdown+0x154>
 800c884:	4b25      	ldr	r3, [pc, #148]	; (800c91c <tcp_close_shutdown+0x1c4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60bb      	str	r3, [r7, #8]
 800c88a:	e00c      	b.n	800c8a6 <tcp_close_shutdown+0x14e>
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	429a      	cmp	r2, r3
 800c894:	d104      	bne.n	800c8a0 <tcp_close_shutdown+0x148>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	60da      	str	r2, [r3, #12]
 800c89e:	e005      	b.n	800c8ac <tcp_close_shutdown+0x154>
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	60bb      	str	r3, [r7, #8]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ef      	bne.n	800c88c <tcp_close_shutdown+0x134>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	2001      	movs	r0, #1
 800c8b6:	f7fe fef5 	bl	800b6a4 <memp_free>
    break;
 800c8ba:	e01c      	b.n	800c8f6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ff13 	bl	800c6e8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c8c2:	6879      	ldr	r1, [r7, #4]
 800c8c4:	4816      	ldr	r0, [pc, #88]	; (800c920 <tcp_close_shutdown+0x1c8>)
 800c8c6:	f001 fa2f 	bl	800dd28 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	2002      	movs	r0, #2
 800c8ce:	f7fe fee9 	bl	800b6a4 <memp_free>
    break;
 800c8d2:	e010      	b.n	800c8f6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c8d4:	6879      	ldr	r1, [r7, #4]
 800c8d6:	480d      	ldr	r0, [pc, #52]	; (800c90c <tcp_close_shutdown+0x1b4>)
 800c8d8:	f001 fa26 	bl	800dd28 <tcp_pcb_remove>
 800c8dc:	4b0c      	ldr	r3, [pc, #48]	; (800c910 <tcp_close_shutdown+0x1b8>)
 800c8de:	2201      	movs	r2, #1
 800c8e0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	f7fe fedd 	bl	800b6a4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c8ea:	e004      	b.n	800c8f6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f819 	bl	800c924 <tcp_close_shutdown_fin>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	e000      	b.n	800c8f8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c900:	0801954c 	.word	0x0801954c
 800c904:	080195c8 	.word	0x080195c8
 800c908:	08019588 	.word	0x08019588
 800c90c:	2000fad4 	.word	0x2000fad4
 800c910:	2000fad0 	.word	0x2000fad0
 800c914:	2000fae4 	.word	0x2000fae4
 800c918:	2000fae8 	.word	0x2000fae8
 800c91c:	2000fae0 	.word	0x2000fae0
 800c920:	2000fadc 	.word	0x2000fadc

0800c924 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d106      	bne.n	800c940 <tcp_close_shutdown_fin+0x1c>
 800c932:	4b2c      	ldr	r3, [pc, #176]	; (800c9e4 <tcp_close_shutdown_fin+0xc0>)
 800c934:	f240 124d 	movw	r2, #333	; 0x14d
 800c938:	492b      	ldr	r1, [pc, #172]	; (800c9e8 <tcp_close_shutdown_fin+0xc4>)
 800c93a:	482c      	ldr	r0, [pc, #176]	; (800c9ec <tcp_close_shutdown_fin+0xc8>)
 800c93c:	f00a f924 	bl	8016b88 <iprintf>

  switch (pcb->state) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7d1b      	ldrb	r3, [r3, #20]
 800c944:	2b04      	cmp	r3, #4
 800c946:	d010      	beq.n	800c96a <tcp_close_shutdown_fin+0x46>
 800c948:	2b07      	cmp	r3, #7
 800c94a:	d01b      	beq.n	800c984 <tcp_close_shutdown_fin+0x60>
 800c94c:	2b03      	cmp	r3, #3
 800c94e:	d126      	bne.n	800c99e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f003 fd97 	bl	8010484 <tcp_send_fin>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d11f      	bne.n	800c9a2 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2205      	movs	r2, #5
 800c966:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c968:	e01b      	b.n	800c9a2 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f003 fd8a 	bl	8010484 <tcp_send_fin>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d114      	bne.n	800c9a6 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2205      	movs	r2, #5
 800c980:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c982:	e010      	b.n	800c9a6 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f003 fd7d 	bl	8010484 <tcp_send_fin>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d109      	bne.n	800c9aa <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2209      	movs	r2, #9
 800c99a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c99c:	e005      	b.n	800c9aa <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e01c      	b.n	800c9dc <tcp_close_shutdown_fin+0xb8>
    break;
 800c9a2:	bf00      	nop
 800c9a4:	e002      	b.n	800c9ac <tcp_close_shutdown_fin+0x88>
    break;
 800c9a6:	bf00      	nop
 800c9a8:	e000      	b.n	800c9ac <tcp_close_shutdown_fin+0x88>
    break;
 800c9aa:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c9ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d103      	bne.n	800c9bc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f004 fbb7 	bl	8011128 <tcp_output>
 800c9ba:	e00d      	b.n	800c9d8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c4:	d108      	bne.n	800c9d8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7e9b      	ldrb	r3, [r3, #26]
 800c9ca:	f043 0308 	orr.w	r3, r3, #8
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e001      	b.n	800c9dc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	0801954c 	.word	0x0801954c
 800c9e8:	0801957c 	.word	0x0801957c
 800c9ec:	08019588 	.word	0x08019588

0800c9f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d006      	beq.n	800ca0e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	7e9b      	ldrb	r3, [r3, #26]
 800ca04:	f043 0310 	orr.w	r3, r3, #16
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ca0e:	2101      	movs	r1, #1
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff fea1 	bl	800c758 <tcp_close_shutdown>
 800ca16:	4603      	mov	r3, r0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	7d1b      	ldrb	r3, [r3, #20]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d102      	bne.n	800ca3a <tcp_shutdown+0x1a>
    return ERR_CONN;
 800ca34:	f06f 030a 	mvn.w	r3, #10
 800ca38:	e035      	b.n	800caa6 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d01b      	beq.n	800ca78 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	7e9b      	ldrb	r3, [r3, #26]
 800ca44:	f043 0310 	orr.w	r3, r3, #16
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d005      	beq.n	800ca60 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ca54:	2101      	movs	r1, #1
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f7ff fe7e 	bl	800c758 <tcp_close_shutdown>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	e022      	b.n	800caa6 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d007      	beq.n	800ca78 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff fb7b 	bl	800c168 <pbuf_free>
      pcb->refused_data = NULL;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d012      	beq.n	800caa4 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	7d1b      	ldrb	r3, [r3, #20]
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	db0b      	blt.n	800ca9e <tcp_shutdown+0x7e>
 800ca86:	2b04      	cmp	r3, #4
 800ca88:	dd01      	ble.n	800ca8e <tcp_shutdown+0x6e>
 800ca8a:	2b07      	cmp	r3, #7
 800ca8c:	d107      	bne.n	800ca9e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	4619      	mov	r1, r3
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f7ff fe5f 	bl	800c758 <tcp_close_shutdown>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	e003      	b.n	800caa6 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800ca9e:	f06f 030a 	mvn.w	r3, #10
 800caa2:	e000      	b.n	800caa6 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08c      	sub	sp, #48	; 0x30
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d106      	bne.n	800cad0 <tcp_abandon+0x20>
 800cac2:	4b4d      	ldr	r3, [pc, #308]	; (800cbf8 <tcp_abandon+0x148>)
 800cac4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cac8:	494c      	ldr	r1, [pc, #304]	; (800cbfc <tcp_abandon+0x14c>)
 800caca:	484d      	ldr	r0, [pc, #308]	; (800cc00 <tcp_abandon+0x150>)
 800cacc:	f00a f85c 	bl	8016b88 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7d1b      	ldrb	r3, [r3, #20]
 800cad4:	2b0a      	cmp	r3, #10
 800cad6:	d108      	bne.n	800caea <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	484a      	ldr	r0, [pc, #296]	; (800cc04 <tcp_abandon+0x154>)
 800cadc:	f001 f924 	bl	800dd28 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cae0:	6879      	ldr	r1, [r7, #4]
 800cae2:	2001      	movs	r0, #1
 800cae4:	f7fe fdde 	bl	800b6a4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800cae8:	e081      	b.n	800cbee <tcp_abandon+0x13e>
    int send_rst = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caf6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb04:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d126      	bne.n	800cb62 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8adb      	ldrh	r3, [r3, #22]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d02e      	beq.n	800cb7a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb1c:	4b3a      	ldr	r3, [pc, #232]	; (800cc08 <tcp_abandon+0x158>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d105      	bne.n	800cb32 <tcp_abandon+0x82>
 800cb26:	4b38      	ldr	r3, [pc, #224]	; (800cc08 <tcp_abandon+0x158>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	4a36      	ldr	r2, [pc, #216]	; (800cc08 <tcp_abandon+0x158>)
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	e013      	b.n	800cb5a <tcp_abandon+0xaa>
 800cb32:	4b35      	ldr	r3, [pc, #212]	; (800cc08 <tcp_abandon+0x158>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	61fb      	str	r3, [r7, #28]
 800cb38:	e00c      	b.n	800cb54 <tcp_abandon+0xa4>
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d104      	bne.n	800cb4e <tcp_abandon+0x9e>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68da      	ldr	r2, [r3, #12]
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	60da      	str	r2, [r3, #12]
 800cb4c:	e005      	b.n	800cb5a <tcp_abandon+0xaa>
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	61fb      	str	r3, [r7, #28]
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1ef      	bne.n	800cb3a <tcp_abandon+0x8a>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	60da      	str	r2, [r3, #12]
 800cb60:	e00b      	b.n	800cb7a <tcp_abandon+0xca>
      send_rst = reset;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	8adb      	ldrh	r3, [r3, #22]
 800cb6a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	4827      	ldr	r0, [pc, #156]	; (800cc0c <tcp_abandon+0x15c>)
 800cb70:	f001 f8da 	bl	800dd28 <tcp_pcb_remove>
 800cb74:	4b26      	ldr	r3, [pc, #152]	; (800cc10 <tcp_abandon+0x160>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d004      	beq.n	800cb8c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 fe15 	bl	800d7b6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 fe0c 	bl	800d7b6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 fe03 	bl	800d7b6 <tcp_segs_free>
    if (send_rst) {
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00c      	beq.n	800cbd0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	1d19      	adds	r1, r3, #4
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	8b1b      	ldrh	r3, [r3, #24]
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	6979      	ldr	r1, [r7, #20]
 800cbca:	69b8      	ldr	r0, [r7, #24]
 800cbcc:	f004 fd36 	bl	801163c <tcp_rst>
    last_state = pcb->state;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7d1b      	ldrb	r3, [r3, #20]
 800cbd4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	2001      	movs	r0, #1
 800cbda:	f7fe fd63 	bl	800b6a4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <tcp_abandon+0x13e>
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	f06f 010c 	mvn.w	r1, #12
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	4798      	blx	r3
}
 800cbee:	bf00      	nop
 800cbf0:	3728      	adds	r7, #40	; 0x28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	0801954c 	.word	0x0801954c
 800cbfc:	080195e4 	.word	0x080195e4
 800cc00:	08019588 	.word	0x08019588
 800cc04:	2000fae4 	.word	0x2000fae4
 800cc08:	2000fae0 	.word	0x2000fae0
 800cc0c:	2000fad4 	.word	0x2000fad4
 800cc10:	2000fad0 	.word	0x2000fad0

0800cc14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff ff46 	bl	800cab0 <tcp_abandon>
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cc3a:	2304      	movs	r3, #4
 800cc3c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cc44:	4b3c      	ldr	r3, [pc, #240]	; (800cd38 <tcp_bind+0x10c>)
 800cc46:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <tcp_bind+0x28>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d102      	bne.n	800cc5a <tcp_bind+0x2e>
    return ERR_VAL;
 800cc54:	f06f 0305 	mvn.w	r3, #5
 800cc58:	e06a      	b.n	800cd30 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d009      	beq.n	800cc76 <tcp_bind+0x4a>
 800cc62:	4b36      	ldr	r3, [pc, #216]	; (800cd3c <tcp_bind+0x110>)
 800cc64:	f44f 7211 	mov.w	r2, #580	; 0x244
 800cc68:	4935      	ldr	r1, [pc, #212]	; (800cd40 <tcp_bind+0x114>)
 800cc6a:	4836      	ldr	r0, [pc, #216]	; (800cd44 <tcp_bind+0x118>)
 800cc6c:	f009 ff8c 	bl	8016b88 <iprintf>
 800cc70:	f06f 0305 	mvn.w	r3, #5
 800cc74:	e05c      	b.n	800cd30 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800cc76:	88fb      	ldrh	r3, [r7, #6]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d109      	bne.n	800cc90 <tcp_bind+0x64>
    port = tcp_new_port();
 800cc7c:	f000 f9ca 	bl	800d014 <tcp_new_port>
 800cc80:	4603      	mov	r3, r0
 800cc82:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cc84:	88fb      	ldrh	r3, [r7, #6]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d135      	bne.n	800ccf6 <tcp_bind+0xca>
      return ERR_BUF;
 800cc8a:	f06f 0301 	mvn.w	r3, #1
 800cc8e:	e04f      	b.n	800cd30 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cc90:	2300      	movs	r3, #0
 800cc92:	61fb      	str	r3, [r7, #28]
 800cc94:	e02b      	b.n	800ccee <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc96:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <tcp_bind+0x11c>)
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	e01e      	b.n	800cce2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	8adb      	ldrh	r3, [r3, #22]
 800cca8:	88fa      	ldrh	r2, [r7, #6]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d116      	bne.n	800ccdc <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ccae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d010      	beq.n	800ccd6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00c      	beq.n	800ccd6 <tcp_bind+0xaa>
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d009      	beq.n	800ccd6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d102      	bne.n	800ccdc <tcp_bind+0xb0>
              return ERR_USE;
 800ccd6:	f06f 0307 	mvn.w	r3, #7
 800ccda:	e029      	b.n	800cd30 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	61bb      	str	r3, [r7, #24]
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1dd      	bne.n	800cca4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	dbcf      	blt.n	800cc96 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00c      	beq.n	800cd16 <tcp_bind+0xea>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d008      	beq.n	800cd16 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <tcp_bind+0xe4>
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	e000      	b.n	800cd12 <tcp_bind+0xe6>
 800cd10:	2300      	movs	r3, #0
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	88fa      	ldrh	r2, [r7, #6]
 800cd1a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cd1c:	4b0b      	ldr	r3, [pc, #44]	; (800cd4c <tcp_bind+0x120>)
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	60da      	str	r2, [r3, #12]
 800cd24:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <tcp_bind+0x120>)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	f004 fed7 	bl	8011adc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3720      	adds	r7, #32
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	080262e4 	.word	0x080262e4
 800cd3c:	0801954c 	.word	0x0801954c
 800cd40:	08019618 	.word	0x08019618
 800cd44:	08019588 	.word	0x08019588
 800cd48:	080262ac 	.word	0x080262ac
 800cd4c:	2000fae0 	.word	0x2000fae0

0800cd50 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800cd5e:	68b8      	ldr	r0, [r7, #8]
 800cd60:	f7ff ff58 	bl	800cc14 <tcp_abort>

  return ERR_ABRT;
 800cd64:	f06f 030c 	mvn.w	r3, #12
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cd7c:	78fb      	ldrb	r3, [r7, #3]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f806 	bl	800cd94 <tcp_listen_with_backlog_and_err>
 800cd88:	4603      	mov	r3, r0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b088      	sub	sp, #32
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	7d1b      	ldrb	r3, [r3, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <tcp_listen_with_backlog_and_err+0x2e>
 800cdae:	4b3f      	ldr	r3, [pc, #252]	; (800ceac <tcp_listen_with_backlog_and_err+0x118>)
 800cdb0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800cdb4:	493e      	ldr	r1, [pc, #248]	; (800ceb0 <tcp_listen_with_backlog_and_err+0x11c>)
 800cdb6:	483f      	ldr	r0, [pc, #252]	; (800ceb4 <tcp_listen_with_backlog_and_err+0x120>)
 800cdb8:	f009 fee6 	bl	8016b88 <iprintf>
 800cdbc:	23f1      	movs	r3, #241	; 0xf1
 800cdbe:	76fb      	strb	r3, [r7, #27]
 800cdc0:	e069      	b.n	800ce96 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	7d1b      	ldrb	r3, [r3, #20]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d104      	bne.n	800cdd4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cdce:	23f7      	movs	r3, #247	; 0xf7
 800cdd0:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cdd2:	e060      	b.n	800ce96 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cdd4:	2002      	movs	r0, #2
 800cdd6:	f7fe fc13 	bl	800b600 <memp_malloc>
 800cdda:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d102      	bne.n	800cde8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800cde2:	23ff      	movs	r3, #255	; 0xff
 800cde4:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cde6:	e056      	b.n	800ce96 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	691a      	ldr	r2, [r3, #16]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	8ada      	ldrh	r2, [r3, #22]
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	7d5a      	ldrb	r2, [r3, #21]
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	7a1a      	ldrb	r2, [r3, #8]
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	7a9a      	ldrb	r2, [r3, #10]
 800ce12:	69fb      	ldr	r3, [r7, #28]
 800ce14:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	7a5a      	ldrb	r2, [r3, #9]
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8adb      	ldrh	r3, [r3, #22]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d021      	beq.n	800ce72 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce2e:	4b22      	ldr	r3, [pc, #136]	; (800ceb8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d105      	bne.n	800ce44 <tcp_listen_with_backlog_and_err+0xb0>
 800ce38:	4b1f      	ldr	r3, [pc, #124]	; (800ceb8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	4a1e      	ldr	r2, [pc, #120]	; (800ceb8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	e013      	b.n	800ce6c <tcp_listen_with_backlog_and_err+0xd8>
 800ce44:	4b1c      	ldr	r3, [pc, #112]	; (800ceb8 <tcp_listen_with_backlog_and_err+0x124>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e00c      	b.n	800ce66 <tcp_listen_with_backlog_and_err+0xd2>
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d104      	bne.n	800ce60 <tcp_listen_with_backlog_and_err+0xcc>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	68da      	ldr	r2, [r3, #12]
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	60da      	str	r2, [r3, #12]
 800ce5e:	e005      	b.n	800ce6c <tcp_listen_with_backlog_and_err+0xd8>
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1ef      	bne.n	800ce4c <tcp_listen_with_backlog_and_err+0xb8>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800ce72:	68f9      	ldr	r1, [r7, #12]
 800ce74:	2001      	movs	r0, #1
 800ce76:	f7fe fc15 	bl	800b6a4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	4a0f      	ldr	r2, [pc, #60]	; (800cebc <tcp_listen_with_backlog_and_err+0x128>)
 800ce7e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ce80:	4b0f      	ldr	r3, [pc, #60]	; (800cec0 <tcp_listen_with_backlog_and_err+0x12c>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	60da      	str	r2, [r3, #12]
 800ce88:	4a0d      	ldr	r2, [pc, #52]	; (800cec0 <tcp_listen_with_backlog_and_err+0x12c>)
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	f004 fe25 	bl	8011adc <tcp_timer_needed>
  res = ERR_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	7efa      	ldrb	r2, [r7, #27]
 800cea0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cea2:	69fb      	ldr	r3, [r7, #28]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3720      	adds	r7, #32
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	0801954c 	.word	0x0801954c
 800ceb0:	08019640 	.word	0x08019640
 800ceb4:	08019588 	.word	0x08019588
 800ceb8:	2000fae0 	.word	0x2000fae0
 800cebc:	0800cd51 	.word	0x0800cd51
 800cec0:	2000fadc 	.word	0x2000fadc

0800cec4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ced4:	4413      	add	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cee0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cee4:	bf28      	it	cs
 800cee6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ceea:	b292      	uxth	r2, r2
 800ceec:	4413      	add	r3, r2
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	db08      	blt.n	800cf08 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	e020      	b.n	800cf4a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd03      	ble.n	800cf1e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf1c:	e014      	b.n	800cf48 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf30:	d306      	bcc.n	800cf40 <tcp_update_rcv_ann_wnd+0x7c>
 800cf32:	4b08      	ldr	r3, [pc, #32]	; (800cf54 <tcp_update_rcv_ann_wnd+0x90>)
 800cf34:	f44f 7242 	mov.w	r2, #776	; 0x308
 800cf38:	4907      	ldr	r1, [pc, #28]	; (800cf58 <tcp_update_rcv_ann_wnd+0x94>)
 800cf3a:	4808      	ldr	r0, [pc, #32]	; (800cf5c <tcp_update_rcv_ann_wnd+0x98>)
 800cf3c:	f009 fe24 	bl	8016b88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cf48:	2300      	movs	r3, #0
  }
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	0801954c 	.word	0x0801954c
 800cf58:	08019664 	.word	0x08019664
 800cf5c:	08019588 	.word	0x08019588

0800cf60 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d106      	bne.n	800cf82 <tcp_recved+0x22>
 800cf74:	4b23      	ldr	r3, [pc, #140]	; (800d004 <tcp_recved+0xa4>)
 800cf76:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cf7a:	4923      	ldr	r1, [pc, #140]	; (800d008 <tcp_recved+0xa8>)
 800cf7c:	4823      	ldr	r0, [pc, #140]	; (800d00c <tcp_recved+0xac>)
 800cf7e:	f009 fe03 	bl	8016b88 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf86:	887b      	ldrh	r3, [r7, #2]
 800cf88:	4413      	add	r3, r2
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf98:	d904      	bls.n	800cfa4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cfa0:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfa2:	e017      	b.n	800cfd4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d113      	bne.n	800cfd4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b07      	cmp	r3, #7
 800cfb2:	d003      	beq.n	800cfbc <tcp_recved+0x5c>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7d1b      	ldrb	r3, [r3, #20]
 800cfb8:	2b09      	cmp	r3, #9
 800cfba:	d104      	bne.n	800cfc6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cfc2:	851a      	strh	r2, [r3, #40]	; 0x28
 800cfc4:	e006      	b.n	800cfd4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800cfc6:	4b0f      	ldr	r3, [pc, #60]	; (800d004 <tcp_recved+0xa4>)
 800cfc8:	f240 322d 	movw	r2, #813	; 0x32d
 800cfcc:	4910      	ldr	r1, [pc, #64]	; (800d010 <tcp_recved+0xb0>)
 800cfce:	480f      	ldr	r0, [pc, #60]	; (800d00c <tcp_recved+0xac>)
 800cfd0:	f009 fdda 	bl	8016b88 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff ff75 	bl	800cec4 <tcp_update_rcv_ann_wnd>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cfe4:	db09      	blt.n	800cffa <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7e9b      	ldrb	r3, [r3, #26]
 800cfea:	f043 0302 	orr.w	r3, r3, #2
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f004 f897 	bl	8011128 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	0801954c 	.word	0x0801954c
 800d008:	08019680 	.word	0x08019680
 800d00c:	08019588 	.word	0x08019588
 800d010:	080196a8 	.word	0x080196a8

0800d014 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d01e:	4b1d      	ldr	r3, [pc, #116]	; (800d094 <tcp_new_port+0x80>)
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	b291      	uxth	r1, r2
 800d026:	4a1b      	ldr	r2, [pc, #108]	; (800d094 <tcp_new_port+0x80>)
 800d028:	8011      	strh	r1, [r2, #0]
 800d02a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d02e:	4293      	cmp	r3, r2
 800d030:	d103      	bne.n	800d03a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d032:	4b18      	ldr	r3, [pc, #96]	; (800d094 <tcp_new_port+0x80>)
 800d034:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d038:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d03a:	2300      	movs	r3, #0
 800d03c:	71fb      	strb	r3, [r7, #7]
 800d03e:	e01e      	b.n	800d07e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	4a15      	ldr	r2, [pc, #84]	; (800d098 <tcp_new_port+0x84>)
 800d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	e011      	b.n	800d072 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	8ada      	ldrh	r2, [r3, #22]
 800d052:	4b10      	ldr	r3, [pc, #64]	; (800d094 <tcp_new_port+0x80>)
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d108      	bne.n	800d06c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d05a:	88bb      	ldrh	r3, [r7, #4]
 800d05c:	3301      	adds	r3, #1
 800d05e:	80bb      	strh	r3, [r7, #4]
 800d060:	88bb      	ldrh	r3, [r7, #4]
 800d062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d066:	d3da      	bcc.n	800d01e <tcp_new_port+0xa>
          return 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	e00d      	b.n	800d088 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	603b      	str	r3, [r7, #0]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1ea      	bne.n	800d04e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	3301      	adds	r3, #1
 800d07c:	71fb      	strb	r3, [r7, #7]
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b03      	cmp	r3, #3
 800d082:	d9dd      	bls.n	800d040 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d084:	4b03      	ldr	r3, [pc, #12]	; (800d094 <tcp_new_port+0x80>)
 800d086:	881b      	ldrh	r3, [r3, #0]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	20000010 	.word	0x20000010
 800d098:	080262ac 	.word	0x080262ac

0800d09c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d09c:	b5b0      	push	{r4, r5, r7, lr}
 800d09e:	b08c      	sub	sp, #48	; 0x30
 800d0a0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d0a6:	4b97      	ldr	r3, [pc, #604]	; (800d304 <tcp_slowtmr+0x268>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	4a95      	ldr	r2, [pc, #596]	; (800d304 <tcp_slowtmr+0x268>)
 800d0ae:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d0b0:	4b95      	ldr	r3, [pc, #596]	; (800d308 <tcp_slowtmr+0x26c>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b93      	ldr	r3, [pc, #588]	; (800d308 <tcp_slowtmr+0x26c>)
 800d0ba:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d0c0:	4b92      	ldr	r3, [pc, #584]	; (800d30c <tcp_slowtmr+0x270>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d0c6:	e227      	b.n	800d518 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	7d1b      	ldrb	r3, [r3, #20]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <tcp_slowtmr+0x42>
 800d0d0:	4b8f      	ldr	r3, [pc, #572]	; (800d310 <tcp_slowtmr+0x274>)
 800d0d2:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d0d6:	498f      	ldr	r1, [pc, #572]	; (800d314 <tcp_slowtmr+0x278>)
 800d0d8:	488f      	ldr	r0, [pc, #572]	; (800d318 <tcp_slowtmr+0x27c>)
 800d0da:	f009 fd55 	bl	8016b88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	7d1b      	ldrb	r3, [r3, #20]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d106      	bne.n	800d0f4 <tcp_slowtmr+0x58>
 800d0e6:	4b8a      	ldr	r3, [pc, #552]	; (800d310 <tcp_slowtmr+0x274>)
 800d0e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d0ec:	498b      	ldr	r1, [pc, #556]	; (800d31c <tcp_slowtmr+0x280>)
 800d0ee:	488a      	ldr	r0, [pc, #552]	; (800d318 <tcp_slowtmr+0x27c>)
 800d0f0:	f009 fd4a 	bl	8016b88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
 800d0f8:	2b0a      	cmp	r3, #10
 800d0fa:	d106      	bne.n	800d10a <tcp_slowtmr+0x6e>
 800d0fc:	4b84      	ldr	r3, [pc, #528]	; (800d310 <tcp_slowtmr+0x274>)
 800d0fe:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d102:	4987      	ldr	r1, [pc, #540]	; (800d320 <tcp_slowtmr+0x284>)
 800d104:	4884      	ldr	r0, [pc, #528]	; (800d318 <tcp_slowtmr+0x27c>)
 800d106:	f009 fd3f 	bl	8016b88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	7f5a      	ldrb	r2, [r3, #29]
 800d10e:	4b7e      	ldr	r3, [pc, #504]	; (800d308 <tcp_slowtmr+0x26c>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d103      	bne.n	800d11e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d11c:	e1fc      	b.n	800d518 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d11e:	4b7a      	ldr	r3, [pc, #488]	; (800d308 <tcp_slowtmr+0x26c>)
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d108      	bne.n	800d148 <tcp_slowtmr+0xac>
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d13c:	2b05      	cmp	r3, #5
 800d13e:	d903      	bls.n	800d148 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d140:	7ffb      	ldrb	r3, [r7, #31]
 800d142:	3301      	adds	r3, #1
 800d144:	77fb      	strb	r3, [r7, #31]
 800d146:	e0a2      	b.n	800d28e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d14e:	2b0b      	cmp	r3, #11
 800d150:	d903      	bls.n	800d15a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d152:	7ffb      	ldrb	r3, [r7, #31]
 800d154:	3301      	adds	r3, #1
 800d156:	77fb      	strb	r3, [r7, #31]
 800d158:	e099      	b.n	800d28e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d160:	2b00      	cmp	r3, #0
 800d162:	d032      	beq.n	800d1ca <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d16a:	3b01      	subs	r3, #1
 800d16c:	4a6d      	ldr	r2, [pc, #436]	; (800d324 <tcp_slowtmr+0x288>)
 800d16e:	5cd3      	ldrb	r3, [r2, r3]
 800d170:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d178:	7cfa      	ldrb	r2, [r7, #19]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d907      	bls.n	800d18e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d184:	3301      	adds	r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d194:	7cfa      	ldrb	r2, [r7, #19]
 800d196:	429a      	cmp	r2, r3
 800d198:	d879      	bhi.n	800d28e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d19c:	f004 fbde 	bl	801195c <tcp_zero_window_probe>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d173      	bne.n	800d28e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d1b4:	2b06      	cmp	r3, #6
 800d1b6:	d86a      	bhi.n	800d28e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d1be:	3301      	adds	r3, #1
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d1c8:	e061      	b.n	800d28e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	db08      	blt.n	800d1e6 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	3301      	adds	r3, #1
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	b21a      	sxth	r2, r3
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d04f      	beq.n	800d28e <tcp_slowtmr+0x1f2>
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	db47      	blt.n	800d28e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	7d1b      	ldrb	r3, [r3, #20]
 800d202:	2b02      	cmp	r3, #2
 800d204:	d018      	beq.n	800d238 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d20c:	2b0c      	cmp	r3, #12
 800d20e:	bf28      	it	cs
 800d210:	230c      	movcs	r3, #12
 800d212:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d21a:	10db      	asrs	r3, r3, #3
 800d21c:	b21b      	sxth	r3, r3
 800d21e:	461a      	mov	r2, r3
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d226:	4413      	add	r3, r2
 800d228:	7dfa      	ldrb	r2, [r7, #23]
 800d22a:	493f      	ldr	r1, [pc, #252]	; (800d328 <tcp_slowtmr+0x28c>)
 800d22c:	5c8a      	ldrb	r2, [r1, r2]
 800d22e:	4093      	lsls	r3, r2
 800d230:	b21a      	sxth	r2, r3
 800d232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	2200      	movs	r2, #0
 800d23c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d24a:	4293      	cmp	r3, r2
 800d24c:	bf28      	it	cs
 800d24e:	4613      	movcs	r3, r2
 800d250:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d252:	8abb      	ldrh	r3, [r7, #20]
 800d254:	085b      	lsrs	r3, r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d206      	bcs.n	800d27e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	b29a      	uxth	r2, r3
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d28a:	f004 fa4d 	bl	8011728 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	7d1b      	ldrb	r3, [r3, #20]
 800d292:	2b06      	cmp	r3, #6
 800d294:	d10f      	bne.n	800d2b6 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	7e9b      	ldrb	r3, [r3, #26]
 800d29a:	f003 0310 	and.w	r3, r3, #16
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d009      	beq.n	800d2b6 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2a2:	4b18      	ldr	r3, [pc, #96]	; (800d304 <tcp_slowtmr+0x268>)
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	2b28      	cmp	r3, #40	; 0x28
 800d2ae:	d902      	bls.n	800d2b6 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d2b0:	7ffb      	ldrb	r3, [r7, #31]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	7a1b      	ldrb	r3, [r3, #8]
 800d2ba:	f003 0308 	and.w	r3, r3, #8
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d05d      	beq.n	800d37e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c4:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d003      	beq.n	800d2d2 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d2ce:	2b07      	cmp	r3, #7
 800d2d0:	d155      	bne.n	800d37e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2d2:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <tcp_slowtmr+0x268>)
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e2:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d2e6:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d2ea:	4910      	ldr	r1, [pc, #64]	; (800d32c <tcp_slowtmr+0x290>)
 800d2ec:	fba1 1303 	umull	r1, r3, r1, r3
 800d2f0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d91c      	bls.n	800d330 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d2f6:	7ffb      	ldrb	r3, [r7, #31]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d2fc:	7fbb      	ldrb	r3, [r7, #30]
 800d2fe:	3301      	adds	r3, #1
 800d300:	77bb      	strb	r3, [r7, #30]
 800d302:	e03c      	b.n	800d37e <tcp_slowtmr+0x2e2>
 800d304:	2000fad8 	.word	0x2000fad8
 800d308:	20008c3e 	.word	0x20008c3e
 800d30c:	2000fad4 	.word	0x2000fad4
 800d310:	0801954c 	.word	0x0801954c
 800d314:	080196fc 	.word	0x080196fc
 800d318:	08019588 	.word	0x08019588
 800d31c:	08019728 	.word	0x08019728
 800d320:	08019754 	.word	0x08019754
 800d324:	080262a4 	.word	0x080262a4
 800d328:	08026294 	.word	0x08026294
 800d32c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d330:	4b97      	ldr	r3, [pc, #604]	; (800d590 <tcp_slowtmr+0x4f4>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d346:	4618      	mov	r0, r3
 800d348:	4b92      	ldr	r3, [pc, #584]	; (800d594 <tcp_slowtmr+0x4f8>)
 800d34a:	fb03 f300 	mul.w	r3, r3, r0
 800d34e:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d350:	4991      	ldr	r1, [pc, #580]	; (800d598 <tcp_slowtmr+0x4fc>)
 800d352:	fba1 1303 	umull	r1, r3, r1, r3
 800d356:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d358:	429a      	cmp	r2, r3
 800d35a:	d910      	bls.n	800d37e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d35c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d35e:	f004 fac0 	bl	80118e2 <tcp_keepalive>
 800d362:	4603      	mov	r3, r0
 800d364:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d366:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d107      	bne.n	800d37e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d374:	3301      	adds	r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d382:	2b00      	cmp	r3, #0
 800d384:	d016      	beq.n	800d3b4 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d386:	4b82      	ldr	r3, [pc, #520]	; (800d590 <tcp_slowtmr+0x4f4>)
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	6a1b      	ldr	r3, [r3, #32]
 800d38e:	1ad2      	subs	r2, r2, r3
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d396:	4619      	mov	r1, r3
 800d398:	460b      	mov	r3, r1
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	440b      	add	r3, r1
 800d39e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d307      	bcc.n	800d3b4 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fa04 	bl	800d7b6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	7d1b      	ldrb	r3, [r3, #20]
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d109      	bne.n	800d3d0 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3bc:	4b74      	ldr	r3, [pc, #464]	; (800d590 <tcp_slowtmr+0x4f4>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	6a1b      	ldr	r3, [r3, #32]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	2b28      	cmp	r3, #40	; 0x28
 800d3c8:	d902      	bls.n	800d3d0 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d3ca:	7ffb      	ldrb	r3, [r7, #31]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	7d1b      	ldrb	r3, [r3, #20]
 800d3d4:	2b09      	cmp	r3, #9
 800d3d6:	d109      	bne.n	800d3ec <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d3d8:	4b6d      	ldr	r3, [pc, #436]	; (800d590 <tcp_slowtmr+0x4f4>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3de:	6a1b      	ldr	r3, [r3, #32]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	2bf0      	cmp	r3, #240	; 0xf0
 800d3e4:	d902      	bls.n	800d3ec <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d3e6:	7ffb      	ldrb	r3, [r7, #31]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d3ec:	7ffb      	ldrb	r3, [r7, #31]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d05d      	beq.n	800d4ae <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d3fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3fc:	f000 fc52 	bl	800dca4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d010      	beq.n	800d428 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d406:	4b65      	ldr	r3, [pc, #404]	; (800d59c <tcp_slowtmr+0x500>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d106      	bne.n	800d41e <tcp_slowtmr+0x382>
 800d410:	4b63      	ldr	r3, [pc, #396]	; (800d5a0 <tcp_slowtmr+0x504>)
 800d412:	f240 4289 	movw	r2, #1161	; 0x489
 800d416:	4963      	ldr	r1, [pc, #396]	; (800d5a4 <tcp_slowtmr+0x508>)
 800d418:	4863      	ldr	r0, [pc, #396]	; (800d5a8 <tcp_slowtmr+0x50c>)
 800d41a:	f009 fbb5 	bl	8016b88 <iprintf>
        prev->next = pcb->next;
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	68da      	ldr	r2, [r3, #12]
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	60da      	str	r2, [r3, #12]
 800d426:	e00f      	b.n	800d448 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d428:	4b5c      	ldr	r3, [pc, #368]	; (800d59c <tcp_slowtmr+0x500>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42e:	429a      	cmp	r2, r3
 800d430:	d006      	beq.n	800d440 <tcp_slowtmr+0x3a4>
 800d432:	4b5b      	ldr	r3, [pc, #364]	; (800d5a0 <tcp_slowtmr+0x504>)
 800d434:	f240 428d 	movw	r2, #1165	; 0x48d
 800d438:	495c      	ldr	r1, [pc, #368]	; (800d5ac <tcp_slowtmr+0x510>)
 800d43a:	485b      	ldr	r0, [pc, #364]	; (800d5a8 <tcp_slowtmr+0x50c>)
 800d43c:	f009 fba4 	bl	8016b88 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	4a55      	ldr	r2, [pc, #340]	; (800d59c <tcp_slowtmr+0x500>)
 800d446:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d448:	7fbb      	ldrb	r3, [r7, #30]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d010      	beq.n	800d470 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d456:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45a:	1d1d      	adds	r5, r3, #4
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	8adb      	ldrh	r3, [r3, #22]
 800d460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d462:	8b12      	ldrh	r2, [r2, #24]
 800d464:	9201      	str	r2, [sp, #4]
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	462b      	mov	r3, r5
 800d46a:	4622      	mov	r2, r4
 800d46c:	f004 f8e6 	bl	801163c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	7d1b      	ldrb	r3, [r3, #20]
 800d47a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	2001      	movs	r0, #1
 800d48a:	f7fe f90b 	bl	800b6a4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800d48e:	4b48      	ldr	r3, [pc, #288]	; (800d5b0 <tcp_slowtmr+0x514>)
 800d490:	2200      	movs	r2, #0
 800d492:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <tcp_slowtmr+0x408>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f06f 010c 	mvn.w	r1, #12
 800d4a0:	68b8      	ldr	r0, [r7, #8]
 800d4a2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d4a4:	4b42      	ldr	r3, [pc, #264]	; (800d5b0 <tcp_slowtmr+0x514>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d035      	beq.n	800d518 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800d4ac:	e606      	b.n	800d0bc <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d4b8:	6a3b      	ldr	r3, [r7, #32]
 800d4ba:	7edb      	ldrb	r3, [r3, #27]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	7eda      	ldrb	r2, [r3, #27]
 800d4c8:	6a3b      	ldr	r3, [r7, #32]
 800d4ca:	7f1b      	ldrb	r3, [r3, #28]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d323      	bcc.n	800d518 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d4d6:	4b36      	ldr	r3, [pc, #216]	; (800d5b0 <tcp_slowtmr+0x514>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00a      	beq.n	800d4fc <tcp_slowtmr+0x460>
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ec:	6a3a      	ldr	r2, [r7, #32]
 800d4ee:	6912      	ldr	r2, [r2, #16]
 800d4f0:	6a39      	ldr	r1, [r7, #32]
 800d4f2:	4610      	mov	r0, r2
 800d4f4:	4798      	blx	r3
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	777b      	strb	r3, [r7, #29]
 800d4fa:	e001      	b.n	800d500 <tcp_slowtmr+0x464>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d500:	4b2b      	ldr	r3, [pc, #172]	; (800d5b0 <tcp_slowtmr+0x514>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d000      	beq.n	800d50a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800d508:	e5d8      	b.n	800d0bc <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d50a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d102      	bne.n	800d518 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800d512:	6a38      	ldr	r0, [r7, #32]
 800d514:	f003 fe08 	bl	8011128 <tcp_output>
  while (pcb != NULL) {
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f47f add4 	bne.w	800d0c8 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d520:	2300      	movs	r3, #0
 800d522:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d524:	4b23      	ldr	r3, [pc, #140]	; (800d5b4 <tcp_slowtmr+0x518>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d52a:	e068      	b.n	800d5fe <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52e:	7d1b      	ldrb	r3, [r3, #20]
 800d530:	2b0a      	cmp	r3, #10
 800d532:	d006      	beq.n	800d542 <tcp_slowtmr+0x4a6>
 800d534:	4b1a      	ldr	r3, [pc, #104]	; (800d5a0 <tcp_slowtmr+0x504>)
 800d536:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d53a:	491f      	ldr	r1, [pc, #124]	; (800d5b8 <tcp_slowtmr+0x51c>)
 800d53c:	481a      	ldr	r0, [pc, #104]	; (800d5a8 <tcp_slowtmr+0x50c>)
 800d53e:	f009 fb23 	bl	8016b88 <iprintf>
    pcb_remove = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d546:	4b12      	ldr	r3, [pc, #72]	; (800d590 <tcp_slowtmr+0x4f4>)
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	2bf0      	cmp	r3, #240	; 0xf0
 800d552:	d902      	bls.n	800d55a <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800d554:	7ffb      	ldrb	r3, [r7, #31]
 800d556:	3301      	adds	r3, #1
 800d558:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d55a:	7ffb      	ldrb	r3, [r7, #31]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d049      	beq.n	800d5f4 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d562:	f000 fb9f 	bl	800dca4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d029      	beq.n	800d5c0 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d56c:	4b11      	ldr	r3, [pc, #68]	; (800d5b4 <tcp_slowtmr+0x518>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d572:	429a      	cmp	r2, r3
 800d574:	d106      	bne.n	800d584 <tcp_slowtmr+0x4e8>
 800d576:	4b0a      	ldr	r3, [pc, #40]	; (800d5a0 <tcp_slowtmr+0x504>)
 800d578:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d57c:	490f      	ldr	r1, [pc, #60]	; (800d5bc <tcp_slowtmr+0x520>)
 800d57e:	480a      	ldr	r0, [pc, #40]	; (800d5a8 <tcp_slowtmr+0x50c>)
 800d580:	f009 fb02 	bl	8016b88 <iprintf>
        prev->next = pcb->next;
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	60da      	str	r2, [r3, #12]
 800d58c:	e028      	b.n	800d5e0 <tcp_slowtmr+0x544>
 800d58e:	bf00      	nop
 800d590:	2000fad8 	.word	0x2000fad8
 800d594:	000124f8 	.word	0x000124f8
 800d598:	10624dd3 	.word	0x10624dd3
 800d59c:	2000fad4 	.word	0x2000fad4
 800d5a0:	0801954c 	.word	0x0801954c
 800d5a4:	08019784 	.word	0x08019784
 800d5a8:	08019588 	.word	0x08019588
 800d5ac:	080197b0 	.word	0x080197b0
 800d5b0:	2000fad0 	.word	0x2000fad0
 800d5b4:	2000fae4 	.word	0x2000fae4
 800d5b8:	080197dc 	.word	0x080197dc
 800d5bc:	0801980c 	.word	0x0801980c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d5c0:	4b12      	ldr	r3, [pc, #72]	; (800d60c <tcp_slowtmr+0x570>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d006      	beq.n	800d5d8 <tcp_slowtmr+0x53c>
 800d5ca:	4b11      	ldr	r3, [pc, #68]	; (800d610 <tcp_slowtmr+0x574>)
 800d5cc:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800d5d0:	4910      	ldr	r1, [pc, #64]	; (800d614 <tcp_slowtmr+0x578>)
 800d5d2:	4811      	ldr	r0, [pc, #68]	; (800d618 <tcp_slowtmr+0x57c>)
 800d5d4:	f009 fad8 	bl	8016b88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	4a0b      	ldr	r2, [pc, #44]	; (800d60c <tcp_slowtmr+0x570>)
 800d5de:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d5ea:	69b9      	ldr	r1, [r7, #24]
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f7fe f859 	bl	800b6a4 <memp_free>
 800d5f2:	e004      	b.n	800d5fe <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	d193      	bne.n	800d52c <tcp_slowtmr+0x490>
    }
  }
}
 800d604:	bf00      	nop
 800d606:	3728      	adds	r7, #40	; 0x28
 800d608:	46bd      	mov	sp, r7
 800d60a:	bdb0      	pop	{r4, r5, r7, pc}
 800d60c:	2000fae4 	.word	0x2000fae4
 800d610:	0801954c 	.word	0x0801954c
 800d614:	08019834 	.word	0x08019834
 800d618:	08019588 	.word	0x08019588

0800d61c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d622:	4b2d      	ldr	r3, [pc, #180]	; (800d6d8 <tcp_fasttmr+0xbc>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <tcp_fasttmr+0xbc>)
 800d62c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d62e:	4b2b      	ldr	r3, [pc, #172]	; (800d6dc <tcp_fasttmr+0xc0>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d634:	e048      	b.n	800d6c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	7f5a      	ldrb	r2, [r3, #29]
 800d63a:	4b27      	ldr	r3, [pc, #156]	; (800d6d8 <tcp_fasttmr+0xbc>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d03f      	beq.n	800d6c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d642:	4b25      	ldr	r3, [pc, #148]	; (800d6d8 <tcp_fasttmr+0xbc>)
 800d644:	781a      	ldrb	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7e9b      	ldrb	r3, [r3, #26]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d010      	beq.n	800d678 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	7e9b      	ldrb	r3, [r3, #26]
 800d65a:	f043 0302 	orr.w	r3, r3, #2
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f003 fd5f 	bl	8011128 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7e9b      	ldrb	r3, [r3, #26]
 800d66e:	f023 0303 	bic.w	r3, r3, #3
 800d672:	b2da      	uxtb	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7e9b      	ldrb	r3, [r3, #26]
 800d67c:	f003 0308 	and.w	r3, r3, #8
 800d680:	2b00      	cmp	r3, #0
 800d682:	d009      	beq.n	800d698 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7e9b      	ldrb	r3, [r3, #26]
 800d688:	f023 0308 	bic.w	r3, r3, #8
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff f946 	bl	800c924 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00a      	beq.n	800d6bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d6a6:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <tcp_fasttmr+0xc4>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f819 	bl	800d6e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <tcp_fasttmr+0xc4>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d000      	beq.n	800d6bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d6ba:	e7b8      	b.n	800d62e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	607b      	str	r3, [r7, #4]
 800d6c0:	e002      	b.n	800d6c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1b3      	bne.n	800d636 <tcp_fasttmr+0x1a>
    }
  }
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20008c3e 	.word	0x20008c3e
 800d6dc:	2000fad4 	.word	0x2000fad4
 800d6e0:	2000fad0 	.word	0x2000fad0

0800d6e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d6e4:	b590      	push	{r4, r7, lr}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f0:	7b5b      	ldrb	r3, [r3, #13]
 800d6f2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <tcp_process_refused_data+0x3e>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6918      	ldr	r0, [r3, #16]
 800d714:	2300      	movs	r3, #0
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	47a0      	blx	r4
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
 800d720:	e007      	b.n	800d732 <tcp_process_refused_data+0x4e>
 800d722:	2300      	movs	r3, #0
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	2000      	movs	r0, #0
 800d72a:	f000 f89b 	bl	800d864 <tcp_recv_null>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d12a      	bne.n	800d790 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d73a:	7bbb      	ldrb	r3, [r7, #14]
 800d73c:	f003 0320 	and.w	r3, r3, #32
 800d740:	2b00      	cmp	r3, #0
 800d742:	d033      	beq.n	800d7ac <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d748:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d74c:	d005      	beq.n	800d75a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d752:	3301      	adds	r3, #1
 800d754:	b29a      	uxth	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00b      	beq.n	800d77c <tcp_process_refused_data+0x98>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6918      	ldr	r0, [r3, #16]
 800d76e:	2300      	movs	r3, #0
 800d770:	2200      	movs	r2, #0
 800d772:	6879      	ldr	r1, [r7, #4]
 800d774:	47a0      	blx	r4
 800d776:	4603      	mov	r3, r0
 800d778:	73fb      	strb	r3, [r7, #15]
 800d77a:	e001      	b.n	800d780 <tcp_process_refused_data+0x9c>
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d784:	f113 0f0d 	cmn.w	r3, #13
 800d788:	d110      	bne.n	800d7ac <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d78a:	f06f 030c 	mvn.w	r3, #12
 800d78e:	e00e      	b.n	800d7ae <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d794:	f113 0f0d 	cmn.w	r3, #13
 800d798:	d102      	bne.n	800d7a0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d79a:	f06f 030c 	mvn.w	r3, #12
 800d79e:	e006      	b.n	800d7ae <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800d7a6:	f06f 0304 	mvn.w	r3, #4
 800d7aa:	e000      	b.n	800d7ae <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd90      	pop	{r4, r7, pc}

0800d7b6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d7be:	e007      	b.n	800d7d0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f809 	bl	800d7de <tcp_seg_free>
    seg = next;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d1f4      	bne.n	800d7c0 <tcp_segs_free+0xa>
  }
}
 800d7d6:	bf00      	nop
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00c      	beq.n	800d806 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d004      	beq.n	800d7fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe fcb5 	bl	800c168 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d7fe:	6879      	ldr	r1, [r7, #4]
 800d800:	2003      	movs	r0, #3
 800d802:	f7fd ff4f 	bl	800b6a4 <memp_free>
  }
}
 800d806:	bf00      	nop
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	78fa      	ldrb	r2, [r7, #3]
 800d81e:	755a      	strb	r2, [r3, #21]
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d834:	2003      	movs	r0, #3
 800d836:	f7fd fee3 	bl	800b600 <memp_malloc>
 800d83a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d101      	bne.n	800d846 <tcp_seg_copy+0x1a>
    return NULL;
 800d842:	2300      	movs	r3, #0
 800d844:	e00a      	b.n	800d85c <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d846:	2210      	movs	r2, #16
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f009 f989 	bl	8016b62 <memcpy>
  pbuf_ref(cseg->p);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fd39 	bl	800c2cc <pbuf_ref>
  return cseg;
 800d85a:	68fb      	ldr	r3, [r7, #12]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d009      	beq.n	800d88c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	891b      	ldrh	r3, [r3, #8]
 800d87c:	4619      	mov	r1, r3
 800d87e:	68b8      	ldr	r0, [r7, #8]
 800d880:	f7ff fb6e 	bl	800cf60 <tcp_recved>
    pbuf_free(p);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7fe fc6f 	bl	800c168 <pbuf_free>
 800d88a:	e008      	b.n	800d89e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800d88c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d104      	bne.n	800d89e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800d894:	68b8      	ldr	r0, [r7, #8]
 800d896:	f7ff f8ab 	bl	800c9f0 <tcp_close>
 800d89a:	4603      	mov	r3, r0
 800d89c:	e000      	b.n	800d8a0 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	db01      	blt.n	800d8be <tcp_kill_prio+0x16>
 800d8ba:	79fb      	ldrb	r3, [r7, #7]
 800d8bc:	e000      	b.n	800d8c0 <tcp_kill_prio+0x18>
 800d8be:	237f      	movs	r3, #127	; 0x7f
 800d8c0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ca:	4b16      	ldr	r3, [pc, #88]	; (800d924 <tcp_kill_prio+0x7c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e01a      	b.n	800d908 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	7d5b      	ldrb	r3, [r3, #21]
 800d8d6:	7afa      	ldrb	r2, [r7, #11]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d312      	bcc.n	800d902 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d8dc:	4b12      	ldr	r3, [pc, #72]	; (800d928 <tcp_kill_prio+0x80>)
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d80a      	bhi.n	800d902 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800d8ec:	4b0e      	ldr	r3, [pc, #56]	; (800d928 <tcp_kill_prio+0x80>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	7d5b      	ldrb	r3, [r3, #21]
 800d900:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e1      	bne.n	800d8d2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d914:	6938      	ldr	r0, [r7, #16]
 800d916:	f7ff f97d 	bl	800cc14 <tcp_abort>
  }
}
 800d91a:	bf00      	nop
 800d91c:	3718      	adds	r7, #24
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	2000fad4 	.word	0x2000fad4
 800d928:	2000fad8 	.word	0x2000fad8

0800d92c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d009      	beq.n	800d950 <tcp_kill_state+0x24>
 800d93c:	79fb      	ldrb	r3, [r7, #7]
 800d93e:	2b09      	cmp	r3, #9
 800d940:	d006      	beq.n	800d950 <tcp_kill_state+0x24>
 800d942:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <tcp_kill_state+0x80>)
 800d944:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d948:	4919      	ldr	r1, [pc, #100]	; (800d9b0 <tcp_kill_state+0x84>)
 800d94a:	481a      	ldr	r0, [pc, #104]	; (800d9b4 <tcp_kill_state+0x88>)
 800d94c:	f009 f91c 	bl	8016b88 <iprintf>

  inactivity = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d954:	2300      	movs	r3, #0
 800d956:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d958:	4b17      	ldr	r3, [pc, #92]	; (800d9b8 <tcp_kill_state+0x8c>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	617b      	str	r3, [r7, #20]
 800d95e:	e017      	b.n	800d990 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	7d1b      	ldrb	r3, [r3, #20]
 800d964:	79fa      	ldrb	r2, [r7, #7]
 800d966:	429a      	cmp	r2, r3
 800d968:	d10f      	bne.n	800d98a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d96a:	4b14      	ldr	r3, [pc, #80]	; (800d9bc <tcp_kill_state+0x90>)
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	429a      	cmp	r2, r3
 800d978:	d807      	bhi.n	800d98a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d97a:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <tcp_kill_state+0x90>)
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	6a1b      	ldr	r3, [r3, #32]
 800d982:	1ad3      	subs	r3, r2, r3
 800d984:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	617b      	str	r3, [r7, #20]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e4      	bne.n	800d960 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d99c:	2100      	movs	r1, #0
 800d99e:	6938      	ldr	r0, [r7, #16]
 800d9a0:	f7ff f886 	bl	800cab0 <tcp_abandon>
  }
}
 800d9a4:	bf00      	nop
 800d9a6:	3718      	adds	r7, #24
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	0801954c 	.word	0x0801954c
 800d9b0:	0801985c 	.word	0x0801985c
 800d9b4:	08019588 	.word	0x08019588
 800d9b8:	2000fad4 	.word	0x2000fad4
 800d9bc:	2000fad8 	.word	0x2000fad8

0800d9c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9ce:	4b12      	ldr	r3, [pc, #72]	; (800da18 <tcp_kill_timewait+0x58>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	e012      	b.n	800d9fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9d6:	4b11      	ldr	r3, [pc, #68]	; (800da1c <tcp_kill_timewait+0x5c>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a1b      	ldr	r3, [r3, #32]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d807      	bhi.n	800d9f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <tcp_kill_timewait+0x5c>)
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e9      	bne.n	800d9d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800da08:	68b8      	ldr	r0, [r7, #8]
 800da0a:	f7ff f903 	bl	800cc14 <tcp_abort>
  }
}
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	2000fae4 	.word	0x2000fae4
 800da1c:	2000fad8 	.word	0x2000fad8

0800da20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	4603      	mov	r3, r0
 800da28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da2a:	2001      	movs	r0, #1
 800da2c:	f7fd fde8 	bl	800b600 <memp_malloc>
 800da30:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d124      	bne.n	800da82 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da38:	f7ff ffc2 	bl	800d9c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da3c:	2001      	movs	r0, #1
 800da3e:	f7fd fddf 	bl	800b600 <memp_malloc>
 800da42:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d11b      	bne.n	800da82 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da4a:	2009      	movs	r0, #9
 800da4c:	f7ff ff6e 	bl	800d92c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da50:	2001      	movs	r0, #1
 800da52:	f7fd fdd5 	bl	800b600 <memp_malloc>
 800da56:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d111      	bne.n	800da82 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da5e:	2008      	movs	r0, #8
 800da60:	f7ff ff64 	bl	800d92c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da64:	2001      	movs	r0, #1
 800da66:	f7fd fdcb 	bl	800b600 <memp_malloc>
 800da6a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d107      	bne.n	800da82 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff ff17 	bl	800d8a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da7a:	2001      	movs	r0, #1
 800da7c:	f7fd fdc0 	bl	800b600 <memp_malloc>
 800da80:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d03f      	beq.n	800db08 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800da88:	2298      	movs	r2, #152	; 0x98
 800da8a:	2100      	movs	r1, #0
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f009 f873 	bl	8016b78 <memset>
    pcb->prio = prio;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	79fa      	ldrb	r2, [r7, #7]
 800da96:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800da9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800daa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	22ff      	movs	r2, #255	; 0xff
 800dab6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dabe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2206      	movs	r2, #6
 800dac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2206      	movs	r2, #6
 800dacc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dad4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2201      	movs	r2, #1
 800dada:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dade:	4b0d      	ldr	r3, [pc, #52]	; (800db14 <tcp_alloc+0xf4>)
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dae6:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <tcp_alloc+0xf8>)
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800daf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4a08      	ldr	r2, [pc, #32]	; (800db1c <tcp_alloc+0xfc>)
 800dafc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4a07      	ldr	r2, [pc, #28]	; (800db20 <tcp_alloc+0x100>)
 800db04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db08:	68fb      	ldr	r3, [r7, #12]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	2000fad8 	.word	0x2000fad8
 800db18:	20008c3e 	.word	0x20008c3e
 800db1c:	0800d865 	.word	0x0800d865
 800db20:	006ddd00 	.word	0x006ddd00

0800db24 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800db2e:	2040      	movs	r0, #64	; 0x40
 800db30:	f7ff ff76 	bl	800da20 <tcp_alloc>
 800db34:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800db36:	68fb      	ldr	r3, [r7, #12]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	611a      	str	r2, [r3, #16]
  }
}
 800db56:	bf00      	nop
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
	...

0800db64 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d00e      	beq.n	800db92 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	7d1b      	ldrb	r3, [r3, #20]
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d106      	bne.n	800db8a <tcp_recv+0x26>
 800db7c:	4b07      	ldr	r3, [pc, #28]	; (800db9c <tcp_recv+0x38>)
 800db7e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800db82:	4907      	ldr	r1, [pc, #28]	; (800dba0 <tcp_recv+0x3c>)
 800db84:	4807      	ldr	r0, [pc, #28]	; (800dba4 <tcp_recv+0x40>)
 800db86:	f008 ffff 	bl	8016b88 <iprintf>
    pcb->recv = recv;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800db92:	bf00      	nop
 800db94:	3708      	adds	r7, #8
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	0801954c 	.word	0x0801954c
 800dba0:	0801986c 	.word	0x0801986c
 800dba4:	08019588 	.word	0x08019588

0800dba8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00d      	beq.n	800dbd4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	7d1b      	ldrb	r3, [r3, #20]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d106      	bne.n	800dbce <tcp_sent+0x26>
 800dbc0:	4b06      	ldr	r3, [pc, #24]	; (800dbdc <tcp_sent+0x34>)
 800dbc2:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800dbc6:	4906      	ldr	r1, [pc, #24]	; (800dbe0 <tcp_sent+0x38>)
 800dbc8:	4806      	ldr	r0, [pc, #24]	; (800dbe4 <tcp_sent+0x3c>)
 800dbca:	f008 ffdd 	bl	8016b88 <iprintf>
    pcb->sent = sent;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	0801954c 	.word	0x0801954c
 800dbe0:	08019894 	.word	0x08019894
 800dbe4:	08019588 	.word	0x08019588

0800dbe8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d00e      	beq.n	800dc16 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d106      	bne.n	800dc0e <tcp_err+0x26>
 800dc00:	4b07      	ldr	r3, [pc, #28]	; (800dc20 <tcp_err+0x38>)
 800dc02:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800dc06:	4907      	ldr	r1, [pc, #28]	; (800dc24 <tcp_err+0x3c>)
 800dc08:	4807      	ldr	r0, [pc, #28]	; (800dc28 <tcp_err+0x40>)
 800dc0a:	f008 ffbd 	bl	8016b88 <iprintf>
    pcb->errf = err;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800dc16:	bf00      	nop
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	0801954c 	.word	0x0801954c
 800dc24:	080198bc 	.word	0x080198bc
 800dc28:	08019588 	.word	0x08019588

0800dc2c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d008      	beq.n	800dc4e <tcp_accept+0x22>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	7d1b      	ldrb	r3, [r3, #20]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d104      	bne.n	800dc4e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	619a      	str	r2, [r3, #24]
  }
}
 800dc4e:	bf00      	nop
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
	...

0800dc5c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	4613      	mov	r3, r2
 800dc68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	7d1b      	ldrb	r3, [r3, #20]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d106      	bne.n	800dc80 <tcp_poll+0x24>
 800dc72:	4b09      	ldr	r3, [pc, #36]	; (800dc98 <tcp_poll+0x3c>)
 800dc74:	f240 7203 	movw	r2, #1795	; 0x703
 800dc78:	4908      	ldr	r1, [pc, #32]	; (800dc9c <tcp_poll+0x40>)
 800dc7a:	4809      	ldr	r0, [pc, #36]	; (800dca0 <tcp_poll+0x44>)
 800dc7c:	f008 ff84 	bl	8016b88 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	79fa      	ldrb	r2, [r7, #7]
 800dc8c:	771a      	strb	r2, [r3, #28]
}
 800dc8e:	bf00      	nop
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0801954c 	.word	0x0801954c
 800dc9c:	080198e4 	.word	0x080198e4
 800dca0:	08019588 	.word	0x08019588

0800dca4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	7d1b      	ldrb	r3, [r3, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d034      	beq.n	800dd1e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dcb8:	2b0a      	cmp	r3, #10
 800dcba:	d030      	beq.n	800dd1e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d02c      	beq.n	800dd1e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe fa49 	bl	800c168 <pbuf_free>
      pcb->refused_data = NULL;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fd68 	bl	800d7b6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcf2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff fd5c 	bl	800d7b6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fd57 	bl	800d7b6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	669a      	str	r2, [r3, #104]	; 0x68
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
	...

0800dd28 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d105      	bne.n	800dd48 <tcp_pcb_remove+0x20>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	68da      	ldr	r2, [r3, #12]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	e013      	b.n	800dd70 <tcp_pcb_remove+0x48>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60fb      	str	r3, [r7, #12]
 800dd4e:	e00c      	b.n	800dd6a <tcp_pcb_remove+0x42>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d104      	bne.n	800dd64 <tcp_pcb_remove+0x3c>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	68da      	ldr	r2, [r3, #12]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	60da      	str	r2, [r3, #12]
 800dd62:	e005      	b.n	800dd70 <tcp_pcb_remove+0x48>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	60fb      	str	r3, [r7, #12]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1ef      	bne.n	800dd50 <tcp_pcb_remove+0x28>
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2200      	movs	r2, #0
 800dd74:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dd76:	6838      	ldr	r0, [r7, #0]
 800dd78:	f7ff ff94 	bl	800dca4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	7d1b      	ldrb	r3, [r3, #20]
 800dd80:	2b0a      	cmp	r3, #10
 800dd82:	d013      	beq.n	800ddac <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d00f      	beq.n	800ddac <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	7e9b      	ldrb	r3, [r3, #26]
 800dd90:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d009      	beq.n	800ddac <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	7e9b      	ldrb	r3, [r3, #26]
 800dd9c:	f043 0302 	orr.w	r3, r3, #2
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dda6:	6838      	ldr	r0, [r7, #0]
 800dda8:	f003 f9be 	bl	8011128 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	7d1b      	ldrb	r3, [r3, #20]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d020      	beq.n	800ddf6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d006      	beq.n	800ddca <tcp_pcb_remove+0xa2>
 800ddbc:	4b13      	ldr	r3, [pc, #76]	; (800de0c <tcp_pcb_remove+0xe4>)
 800ddbe:	f240 7253 	movw	r2, #1875	; 0x753
 800ddc2:	4913      	ldr	r1, [pc, #76]	; (800de10 <tcp_pcb_remove+0xe8>)
 800ddc4:	4813      	ldr	r0, [pc, #76]	; (800de14 <tcp_pcb_remove+0xec>)
 800ddc6:	f008 fedf 	bl	8016b88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d006      	beq.n	800dde0 <tcp_pcb_remove+0xb8>
 800ddd2:	4b0e      	ldr	r3, [pc, #56]	; (800de0c <tcp_pcb_remove+0xe4>)
 800ddd4:	f240 7254 	movw	r2, #1876	; 0x754
 800ddd8:	490f      	ldr	r1, [pc, #60]	; (800de18 <tcp_pcb_remove+0xf0>)
 800ddda:	480e      	ldr	r0, [pc, #56]	; (800de14 <tcp_pcb_remove+0xec>)
 800dddc:	f008 fed4 	bl	8016b88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d006      	beq.n	800ddf6 <tcp_pcb_remove+0xce>
 800dde8:	4b08      	ldr	r3, [pc, #32]	; (800de0c <tcp_pcb_remove+0xe4>)
 800ddea:	f240 7256 	movw	r2, #1878	; 0x756
 800ddee:	490b      	ldr	r1, [pc, #44]	; (800de1c <tcp_pcb_remove+0xf4>)
 800ddf0:	4808      	ldr	r0, [pc, #32]	; (800de14 <tcp_pcb_remove+0xec>)
 800ddf2:	f008 fec9 	bl	8016b88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2200      	movs	r2, #0
 800de00:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800de02:	bf00      	nop
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	0801954c 	.word	0x0801954c
 800de10:	08019904 	.word	0x08019904
 800de14:	08019588 	.word	0x08019588
 800de18:	0801991c 	.word	0x0801991c
 800de1c:	08019938 	.word	0x08019938

0800de20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800de28:	4b07      	ldr	r3, [pc, #28]	; (800de48 <tcp_next_iss+0x28>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	4b07      	ldr	r3, [pc, #28]	; (800de4c <tcp_next_iss+0x2c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4413      	add	r3, r2
 800de32:	4a05      	ldr	r2, [pc, #20]	; (800de48 <tcp_next_iss+0x28>)
 800de34:	6013      	str	r3, [r2, #0]
  return iss;
 800de36:	4b04      	ldr	r3, [pc, #16]	; (800de48 <tcp_next_iss+0x28>)
 800de38:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	20000014 	.word	0x20000014
 800de4c:	2000fad8 	.word	0x2000fad8

0800de50 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800de5c:	6838      	ldr	r0, [r7, #0]
 800de5e:	f007 fad3 	bl	8015408 <ip4_route>
 800de62:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800de6a:	88fb      	ldrh	r3, [r7, #6]
 800de6c:	e010      	b.n	800de90 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de72:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800de74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d008      	beq.n	800de8e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800de7c:	897b      	ldrh	r3, [r7, #10]
 800de7e:	3b28      	subs	r3, #40	; 0x28
 800de80:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800de82:	893a      	ldrh	r2, [r7, #8]
 800de84:	88fb      	ldrh	r3, [r7, #6]
 800de86:	4293      	cmp	r3, r2
 800de88:	bf28      	it	cs
 800de8a:	4613      	movcs	r3, r2
 800de8c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800de8e:	88fb      	ldrh	r3, [r7, #6]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3710      	adds	r7, #16
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dea6:	e011      	b.n	800decc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d108      	bne.n	800dec6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7fe feaa 	bl	800cc14 <tcp_abort>
      pcb = next;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	60fb      	str	r3, [r7, #12]
 800dec4:	e002      	b.n	800decc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1ea      	bne.n	800dea8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800ded2:	bf00      	nop
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d02c      	beq.n	800df46 <tcp_netif_ip_addr_changed+0x6a>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d028      	beq.n	800df46 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800def4:	4b16      	ldr	r3, [pc, #88]	; (800df50 <tcp_netif_ip_addr_changed+0x74>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff ffcc 	bl	800de98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800df00:	4b14      	ldr	r3, [pc, #80]	; (800df54 <tcp_netif_ip_addr_changed+0x78>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f7ff ffc6 	bl	800de98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d019      	beq.n	800df46 <tcp_netif_ip_addr_changed+0x6a>
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d015      	beq.n	800df46 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800df1a:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <tcp_netif_ip_addr_changed+0x7c>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	e00e      	b.n	800df40 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d103      	bne.n	800df3c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1ed      	bne.n	800df22 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800df46:	bf00      	nop
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	2000fad4 	.word	0x2000fad4
 800df54:	2000fae0 	.word	0x2000fae0
 800df58:	2000fadc 	.word	0x2000fadc

0800df5c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b08b      	sub	sp, #44	; 0x2c
 800df60:	af02      	add	r7, sp, #8
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	4a82      	ldr	r2, [pc, #520]	; (800e174 <tcp_input+0x218>)
 800df6c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	895b      	ldrh	r3, [r3, #10]
 800df72:	2b13      	cmp	r3, #19
 800df74:	f240 838a 	bls.w	800e68c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df78:	4b7f      	ldr	r3, [pc, #508]	; (800e178 <tcp_input+0x21c>)
 800df7a:	695a      	ldr	r2, [r3, #20]
 800df7c:	4b7e      	ldr	r3, [pc, #504]	; (800e178 <tcp_input+0x21c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f007 fcd8 	bl	8015938 <ip4_addr_isbroadcast_u32>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f040 8380 	bne.w	800e690 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df90:	4b79      	ldr	r3, [pc, #484]	; (800e178 <tcp_input+0x21c>)
 800df92:	695b      	ldr	r3, [r3, #20]
 800df94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df98:	2be0      	cmp	r3, #224	; 0xe0
 800df9a:	f000 8379 	beq.w	800e690 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800df9e:	4b75      	ldr	r3, [pc, #468]	; (800e174 <tcp_input+0x218>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	899b      	ldrh	r3, [r3, #12]
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fc ff06 	bl	800adb8 <lwip_htons>
 800dfac:	4603      	mov	r3, r0
 800dfae:	0b1b      	lsrs	r3, r3, #12
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dfb8:	7cbb      	ldrb	r3, [r7, #18]
 800dfba:	2b13      	cmp	r3, #19
 800dfbc:	f240 8368 	bls.w	800e690 <tcp_input+0x734>
 800dfc0:	7cbb      	ldrb	r3, [r7, #18]
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	891b      	ldrh	r3, [r3, #8]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	f200 8361 	bhi.w	800e690 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800dfce:	7cbb      	ldrb	r3, [r7, #18]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	3b14      	subs	r3, #20
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	4b69      	ldr	r3, [pc, #420]	; (800e17c <tcp_input+0x220>)
 800dfd8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dfda:	4b69      	ldr	r3, [pc, #420]	; (800e180 <tcp_input+0x224>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	895a      	ldrh	r2, [r3, #10]
 800dfe4:	7cbb      	ldrb	r3, [r7, #18]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d30d      	bcc.n	800e008 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dfec:	4b63      	ldr	r3, [pc, #396]	; (800e17c <tcp_input+0x220>)
 800dfee:	881a      	ldrh	r2, [r3, #0]
 800dff0:	4b64      	ldr	r3, [pc, #400]	; (800e184 <tcp_input+0x228>)
 800dff2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800dff4:	7cbb      	ldrb	r3, [r7, #18]
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	425b      	negs	r3, r3
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	b21b      	sxth	r3, r3
 800dffe:	4619      	mov	r1, r3
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7fe f88d 	bl	800c120 <pbuf_header>
 800e006:	e055      	b.n	800e0b4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d105      	bne.n	800e01c <tcp_input+0xc0>
 800e010:	4b5d      	ldr	r3, [pc, #372]	; (800e188 <tcp_input+0x22c>)
 800e012:	22b2      	movs	r2, #178	; 0xb2
 800e014:	495d      	ldr	r1, [pc, #372]	; (800e18c <tcp_input+0x230>)
 800e016:	485e      	ldr	r0, [pc, #376]	; (800e190 <tcp_input+0x234>)
 800e018:	f008 fdb6 	bl	8016b88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e01c:	f06f 0113 	mvn.w	r1, #19
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7fe f87d 	bl	800c120 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	895a      	ldrh	r2, [r3, #10]
 800e02a:	4b56      	ldr	r3, [pc, #344]	; (800e184 <tcp_input+0x228>)
 800e02c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e02e:	4b53      	ldr	r3, [pc, #332]	; (800e17c <tcp_input+0x220>)
 800e030:	881a      	ldrh	r2, [r3, #0]
 800e032:	4b54      	ldr	r3, [pc, #336]	; (800e184 <tcp_input+0x228>)
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e03a:	4b52      	ldr	r3, [pc, #328]	; (800e184 <tcp_input+0x228>)
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	425b      	negs	r3, r3
 800e040:	b29b      	uxth	r3, r3
 800e042:	b21b      	sxth	r3, r3
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7fe f86a 	bl	800c120 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	895b      	ldrh	r3, [r3, #10]
 800e052:	8a3a      	ldrh	r2, [r7, #16]
 800e054:	429a      	cmp	r2, r3
 800e056:	f200 831d 	bhi.w	800e694 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	4a47      	ldr	r2, [pc, #284]	; (800e180 <tcp_input+0x224>)
 800e062:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	8a3b      	ldrh	r3, [r7, #16]
 800e06a:	425b      	negs	r3, r3
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	b21b      	sxth	r3, r3
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	f7fe f854 	bl	800c120 <pbuf_header>
    p->tot_len -= opt2len;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	891a      	ldrh	r2, [r3, #8]
 800e07c:	8a3b      	ldrh	r3, [r7, #16]
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	b29a      	uxth	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	895b      	ldrh	r3, [r3, #10]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d005      	beq.n	800e09a <tcp_input+0x13e>
 800e08e:	4b3e      	ldr	r3, [pc, #248]	; (800e188 <tcp_input+0x22c>)
 800e090:	22cf      	movs	r2, #207	; 0xcf
 800e092:	4940      	ldr	r1, [pc, #256]	; (800e194 <tcp_input+0x238>)
 800e094:	483e      	ldr	r0, [pc, #248]	; (800e190 <tcp_input+0x234>)
 800e096:	f008 fd77 	bl	8016b88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	891a      	ldrh	r2, [r3, #8]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	891b      	ldrh	r3, [r3, #8]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d005      	beq.n	800e0b4 <tcp_input+0x158>
 800e0a8:	4b37      	ldr	r3, [pc, #220]	; (800e188 <tcp_input+0x22c>)
 800e0aa:	22d0      	movs	r2, #208	; 0xd0
 800e0ac:	493a      	ldr	r1, [pc, #232]	; (800e198 <tcp_input+0x23c>)
 800e0ae:	4838      	ldr	r0, [pc, #224]	; (800e190 <tcp_input+0x234>)
 800e0b0:	f008 fd6a 	bl	8016b88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e0b4:	4b2f      	ldr	r3, [pc, #188]	; (800e174 <tcp_input+0x218>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	881b      	ldrh	r3, [r3, #0]
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	4b2d      	ldr	r3, [pc, #180]	; (800e174 <tcp_input+0x218>)
 800e0be:	681c      	ldr	r4, [r3, #0]
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	f7fc fe79 	bl	800adb8 <lwip_htons>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e0ca:	4b2a      	ldr	r3, [pc, #168]	; (800e174 <tcp_input+0x218>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	885b      	ldrh	r3, [r3, #2]
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	4b28      	ldr	r3, [pc, #160]	; (800e174 <tcp_input+0x218>)
 800e0d4:	681c      	ldr	r4, [r3, #0]
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	f7fc fe6e 	bl	800adb8 <lwip_htons>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e0e0:	4b24      	ldr	r3, [pc, #144]	; (800e174 <tcp_input+0x218>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	4b23      	ldr	r3, [pc, #140]	; (800e174 <tcp_input+0x218>)
 800e0e8:	681c      	ldr	r4, [r3, #0]
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	f7fc fe72 	bl	800add4 <lwip_htonl>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	6063      	str	r3, [r4, #4]
 800e0f4:	6863      	ldr	r3, [r4, #4]
 800e0f6:	4a29      	ldr	r2, [pc, #164]	; (800e19c <tcp_input+0x240>)
 800e0f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e0fa:	4b1e      	ldr	r3, [pc, #120]	; (800e174 <tcp_input+0x218>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	689a      	ldr	r2, [r3, #8]
 800e100:	4b1c      	ldr	r3, [pc, #112]	; (800e174 <tcp_input+0x218>)
 800e102:	681c      	ldr	r4, [r3, #0]
 800e104:	4610      	mov	r0, r2
 800e106:	f7fc fe65 	bl	800add4 <lwip_htonl>
 800e10a:	4603      	mov	r3, r0
 800e10c:	60a3      	str	r3, [r4, #8]
 800e10e:	68a3      	ldr	r3, [r4, #8]
 800e110:	4a23      	ldr	r2, [pc, #140]	; (800e1a0 <tcp_input+0x244>)
 800e112:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e114:	4b17      	ldr	r3, [pc, #92]	; (800e174 <tcp_input+0x218>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	89db      	ldrh	r3, [r3, #14]
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	4b15      	ldr	r3, [pc, #84]	; (800e174 <tcp_input+0x218>)
 800e11e:	681c      	ldr	r4, [r3, #0]
 800e120:	4610      	mov	r0, r2
 800e122:	f7fc fe49 	bl	800adb8 <lwip_htons>
 800e126:	4603      	mov	r3, r0
 800e128:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e12a:	4b12      	ldr	r3, [pc, #72]	; (800e174 <tcp_input+0x218>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	899b      	ldrh	r3, [r3, #12]
 800e130:	b29b      	uxth	r3, r3
 800e132:	4618      	mov	r0, r3
 800e134:	f7fc fe40 	bl	800adb8 <lwip_htons>
 800e138:	4603      	mov	r3, r0
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e140:	b2da      	uxtb	r2, r3
 800e142:	4b18      	ldr	r3, [pc, #96]	; (800e1a4 <tcp_input+0x248>)
 800e144:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	891a      	ldrh	r2, [r3, #8]
 800e14a:	4b16      	ldr	r3, [pc, #88]	; (800e1a4 <tcp_input+0x248>)
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	f003 0303 	and.w	r3, r3, #3
 800e152:	2b00      	cmp	r3, #0
 800e154:	bf14      	ite	ne
 800e156:	2301      	movne	r3, #1
 800e158:	2300      	moveq	r3, #0
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	4413      	add	r3, r2
 800e160:	b29a      	uxth	r2, r3
 800e162:	4b11      	ldr	r3, [pc, #68]	; (800e1a8 <tcp_input+0x24c>)
 800e164:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e16a:	4b10      	ldr	r3, [pc, #64]	; (800e1ac <tcp_input+0x250>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e082      	b.n	800e278 <tcp_input+0x31c>
 800e172:	bf00      	nop
 800e174:	20008c50 	.word	0x20008c50
 800e178:	2000c3a4 	.word	0x2000c3a4
 800e17c:	20008c54 	.word	0x20008c54
 800e180:	20008c58 	.word	0x20008c58
 800e184:	20008c56 	.word	0x20008c56
 800e188:	08019950 	.word	0x08019950
 800e18c:	08019984 	.word	0x08019984
 800e190:	08019994 	.word	0x08019994
 800e194:	080199bc 	.word	0x080199bc
 800e198:	080199c8 	.word	0x080199c8
 800e19c:	20008c60 	.word	0x20008c60
 800e1a0:	20008c64 	.word	0x20008c64
 800e1a4:	20008c6c 	.word	0x20008c6c
 800e1a8:	20008c6a 	.word	0x20008c6a
 800e1ac:	2000fad4 	.word	0x2000fad4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	7d1b      	ldrb	r3, [r3, #20]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d105      	bne.n	800e1c4 <tcp_input+0x268>
 800e1b8:	4b8f      	ldr	r3, [pc, #572]	; (800e3f8 <tcp_input+0x49c>)
 800e1ba:	22e2      	movs	r2, #226	; 0xe2
 800e1bc:	498f      	ldr	r1, [pc, #572]	; (800e3fc <tcp_input+0x4a0>)
 800e1be:	4890      	ldr	r0, [pc, #576]	; (800e400 <tcp_input+0x4a4>)
 800e1c0:	f008 fce2 	bl	8016b88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
 800e1c8:	2b0a      	cmp	r3, #10
 800e1ca:	d105      	bne.n	800e1d8 <tcp_input+0x27c>
 800e1cc:	4b8a      	ldr	r3, [pc, #552]	; (800e3f8 <tcp_input+0x49c>)
 800e1ce:	22e3      	movs	r2, #227	; 0xe3
 800e1d0:	498c      	ldr	r1, [pc, #560]	; (800e404 <tcp_input+0x4a8>)
 800e1d2:	488b      	ldr	r0, [pc, #556]	; (800e400 <tcp_input+0x4a4>)
 800e1d4:	f008 fcd8 	bl	8016b88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	7d1b      	ldrb	r3, [r3, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d105      	bne.n	800e1ec <tcp_input+0x290>
 800e1e0:	4b85      	ldr	r3, [pc, #532]	; (800e3f8 <tcp_input+0x49c>)
 800e1e2:	22e4      	movs	r2, #228	; 0xe4
 800e1e4:	4988      	ldr	r1, [pc, #544]	; (800e408 <tcp_input+0x4ac>)
 800e1e6:	4886      	ldr	r0, [pc, #536]	; (800e400 <tcp_input+0x4a4>)
 800e1e8:	f008 fcce 	bl	8016b88 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	8b1a      	ldrh	r2, [r3, #24]
 800e1f0:	4b86      	ldr	r3, [pc, #536]	; (800e40c <tcp_input+0x4b0>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d138      	bne.n	800e26e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	8ada      	ldrh	r2, [r3, #22]
 800e200:	4b82      	ldr	r3, [pc, #520]	; (800e40c <tcp_input+0x4b0>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	885b      	ldrh	r3, [r3, #2]
 800e206:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e208:	429a      	cmp	r2, r3
 800e20a:	d130      	bne.n	800e26e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	685a      	ldr	r2, [r3, #4]
 800e210:	4b7f      	ldr	r3, [pc, #508]	; (800e410 <tcp_input+0x4b4>)
 800e212:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e214:	429a      	cmp	r2, r3
 800e216:	d12a      	bne.n	800e26e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	4b7c      	ldr	r3, [pc, #496]	; (800e410 <tcp_input+0x4b4>)
 800e21e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e220:	429a      	cmp	r2, r3
 800e222:	d124      	bne.n	800e26e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	69fa      	ldr	r2, [r7, #28]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d105      	bne.n	800e23a <tcp_input+0x2de>
 800e22e:	4b72      	ldr	r3, [pc, #456]	; (800e3f8 <tcp_input+0x49c>)
 800e230:	22ec      	movs	r2, #236	; 0xec
 800e232:	4978      	ldr	r1, [pc, #480]	; (800e414 <tcp_input+0x4b8>)
 800e234:	4872      	ldr	r0, [pc, #456]	; (800e400 <tcp_input+0x4a4>)
 800e236:	f008 fca7 	bl	8016b88 <iprintf>
      if (prev != NULL) {
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00a      	beq.n	800e256 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	68da      	ldr	r2, [r3, #12]
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e248:	4b73      	ldr	r3, [pc, #460]	; (800e418 <tcp_input+0x4bc>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e250:	4a71      	ldr	r2, [pc, #452]	; (800e418 <tcp_input+0x4bc>)
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	69fa      	ldr	r2, [r7, #28]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d10f      	bne.n	800e280 <tcp_input+0x324>
 800e260:	4b65      	ldr	r3, [pc, #404]	; (800e3f8 <tcp_input+0x49c>)
 800e262:	22f4      	movs	r2, #244	; 0xf4
 800e264:	496d      	ldr	r1, [pc, #436]	; (800e41c <tcp_input+0x4c0>)
 800e266:	4866      	ldr	r0, [pc, #408]	; (800e400 <tcp_input+0x4a4>)
 800e268:	f008 fc8e 	bl	8016b88 <iprintf>
      break;
 800e26c:	e008      	b.n	800e280 <tcp_input+0x324>
    }
    prev = pcb;
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d198      	bne.n	800e1b0 <tcp_input+0x254>
 800e27e:	e000      	b.n	800e282 <tcp_input+0x326>
      break;
 800e280:	bf00      	nop
  }

  if (pcb == NULL) {
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d173      	bne.n	800e370 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e288:	4b65      	ldr	r3, [pc, #404]	; (800e420 <tcp_input+0x4c4>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	61fb      	str	r3, [r7, #28]
 800e28e:	e02f      	b.n	800e2f0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	7d1b      	ldrb	r3, [r3, #20]
 800e294:	2b0a      	cmp	r3, #10
 800e296:	d005      	beq.n	800e2a4 <tcp_input+0x348>
 800e298:	4b57      	ldr	r3, [pc, #348]	; (800e3f8 <tcp_input+0x49c>)
 800e29a:	22fe      	movs	r2, #254	; 0xfe
 800e29c:	4961      	ldr	r1, [pc, #388]	; (800e424 <tcp_input+0x4c8>)
 800e29e:	4858      	ldr	r0, [pc, #352]	; (800e400 <tcp_input+0x4a4>)
 800e2a0:	f008 fc72 	bl	8016b88 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	8b1a      	ldrh	r2, [r3, #24]
 800e2a8:	4b58      	ldr	r3, [pc, #352]	; (800e40c <tcp_input+0x4b0>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d11a      	bne.n	800e2ea <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	8ada      	ldrh	r2, [r3, #22]
 800e2b8:	4b54      	ldr	r3, [pc, #336]	; (800e40c <tcp_input+0x4b0>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	885b      	ldrh	r3, [r3, #2]
 800e2be:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d112      	bne.n	800e2ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	685a      	ldr	r2, [r3, #4]
 800e2c8:	4b51      	ldr	r3, [pc, #324]	; (800e410 <tcp_input+0x4b4>)
 800e2ca:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d10c      	bne.n	800e2ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	4b4e      	ldr	r3, [pc, #312]	; (800e410 <tcp_input+0x4b4>)
 800e2d6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d106      	bne.n	800e2ea <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e2dc:	69f8      	ldr	r0, [r7, #28]
 800e2de:	f000 fb15 	bl	800e90c <tcp_timewait_input>
        pbuf_free(p);
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7fd ff40 	bl	800c168 <pbuf_free>
        return;
 800e2e8:	e1da      	b.n	800e6a0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d1cc      	bne.n	800e290 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2fa:	4b4b      	ldr	r3, [pc, #300]	; (800e428 <tcp_input+0x4cc>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	617b      	str	r3, [r7, #20]
 800e300:	e019      	b.n	800e336 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	8ada      	ldrh	r2, [r3, #22]
 800e306:	4b41      	ldr	r3, [pc, #260]	; (800e40c <tcp_input+0x4b0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	885b      	ldrh	r3, [r3, #2]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	429a      	cmp	r2, r3
 800e310:	d10c      	bne.n	800e32c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	4b3e      	ldr	r3, [pc, #248]	; (800e410 <tcp_input+0x4b4>)
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d00f      	beq.n	800e33e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00d      	beq.n	800e340 <tcp_input+0x3e4>
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d009      	beq.n	800e340 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	617b      	str	r3, [r7, #20]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1e2      	bne.n	800e302 <tcp_input+0x3a6>
 800e33c:	e000      	b.n	800e340 <tcp_input+0x3e4>
            break;
 800e33e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d014      	beq.n	800e370 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d00a      	beq.n	800e362 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	68da      	ldr	r2, [r3, #12]
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e354:	4b34      	ldr	r3, [pc, #208]	; (800e428 <tcp_input+0x4cc>)
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e35c:	4a32      	ldr	r2, [pc, #200]	; (800e428 <tcp_input+0x4cc>)
 800e35e:	697b      	ldr	r3, [r7, #20]
 800e360:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e362:	6978      	ldr	r0, [r7, #20]
 800e364:	f000 f9f0 	bl	800e748 <tcp_listen_input>
      pbuf_free(p);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7fd fefd 	bl	800c168 <pbuf_free>
      return;
 800e36e:	e197      	b.n	800e6a0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	2b00      	cmp	r3, #0
 800e374:	f000 8164 	beq.w	800e640 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e378:	4b2c      	ldr	r3, [pc, #176]	; (800e42c <tcp_input+0x4d0>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	891a      	ldrh	r2, [r3, #8]
 800e382:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <tcp_input+0x4d0>)
 800e384:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e386:	4a29      	ldr	r2, [pc, #164]	; (800e42c <tcp_input+0x4d0>)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e38c:	4b1f      	ldr	r3, [pc, #124]	; (800e40c <tcp_input+0x4b0>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a26      	ldr	r2, [pc, #152]	; (800e42c <tcp_input+0x4d0>)
 800e392:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e394:	4b26      	ldr	r3, [pc, #152]	; (800e430 <tcp_input+0x4d4>)
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e39a:	4b26      	ldr	r3, [pc, #152]	; (800e434 <tcp_input+0x4d8>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e3a0:	4b25      	ldr	r3, [pc, #148]	; (800e438 <tcp_input+0x4dc>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e3a6:	4b25      	ldr	r3, [pc, #148]	; (800e43c <tcp_input+0x4e0>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 0308 	and.w	r3, r3, #8
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7b5b      	ldrb	r3, [r3, #13]
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d03d      	beq.n	800e444 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3c8:	69f8      	ldr	r0, [r7, #28]
 800e3ca:	f7ff f98b 	bl	800d6e4 <tcp_process_refused_data>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	f113 0f0d 	cmn.w	r3, #13
 800e3d4:	d007      	beq.n	800e3e6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d032      	beq.n	800e444 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e3de:	4b18      	ldr	r3, [pc, #96]	; (800e440 <tcp_input+0x4e4>)
 800e3e0:	881b      	ldrh	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d02e      	beq.n	800e444 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f040 8108 	bne.w	800e600 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e3f0:	69f8      	ldr	r0, [r7, #28]
 800e3f2:	f002 fe3d 	bl	8011070 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e3f6:	e103      	b.n	800e600 <tcp_input+0x6a4>
 800e3f8:	08019950 	.word	0x08019950
 800e3fc:	080199e8 	.word	0x080199e8
 800e400:	08019994 	.word	0x08019994
 800e404:	08019a10 	.word	0x08019a10
 800e408:	08019a3c 	.word	0x08019a3c
 800e40c:	20008c50 	.word	0x20008c50
 800e410:	2000c3a4 	.word	0x2000c3a4
 800e414:	08019a64 	.word	0x08019a64
 800e418:	2000fad4 	.word	0x2000fad4
 800e41c:	08019a90 	.word	0x08019a90
 800e420:	2000fae4 	.word	0x2000fae4
 800e424:	08019abc 	.word	0x08019abc
 800e428:	2000fadc 	.word	0x2000fadc
 800e42c:	20008c40 	.word	0x20008c40
 800e430:	20008c70 	.word	0x20008c70
 800e434:	20008c6d 	.word	0x20008c6d
 800e438:	20008c68 	.word	0x20008c68
 800e43c:	20008c6c 	.word	0x20008c6c
 800e440:	20008c6a 	.word	0x20008c6a
      }
    }
    tcp_input_pcb = pcb;
 800e444:	4a98      	ldr	r2, [pc, #608]	; (800e6a8 <tcp_input+0x74c>)
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e44a:	69f8      	ldr	r0, [r7, #28]
 800e44c:	f000 fac6 	bl	800e9dc <tcp_process>
 800e450:	4603      	mov	r3, r0
 800e452:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e458:	f113 0f0d 	cmn.w	r3, #13
 800e45c:	f000 80d2 	beq.w	800e604 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800e460:	4b92      	ldr	r3, [pc, #584]	; (800e6ac <tcp_input+0x750>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d016      	beq.n	800e49a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e472:	2b00      	cmp	r3, #0
 800e474:	d008      	beq.n	800e488 <tcp_input+0x52c>
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e47c:	69fa      	ldr	r2, [r7, #28]
 800e47e:	6912      	ldr	r2, [r2, #16]
 800e480:	f06f 010d 	mvn.w	r1, #13
 800e484:	4610      	mov	r0, r2
 800e486:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e488:	69f9      	ldr	r1, [r7, #28]
 800e48a:	4889      	ldr	r0, [pc, #548]	; (800e6b0 <tcp_input+0x754>)
 800e48c:	f7ff fc4c 	bl	800dd28 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e490:	69f9      	ldr	r1, [r7, #28]
 800e492:	2001      	movs	r0, #1
 800e494:	f7fd f906 	bl	800b6a4 <memp_free>
 800e498:	e0bf      	b.n	800e61a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800e49a:	2300      	movs	r3, #0
 800e49c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e49e:	4b85      	ldr	r3, [pc, #532]	; (800e6b4 <tcp_input+0x758>)
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d01b      	beq.n	800e4de <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e4a6:	4b83      	ldr	r3, [pc, #524]	; (800e6b4 <tcp_input+0x758>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <tcp_input+0x56c>
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4b8:	69fa      	ldr	r2, [r7, #28]
 800e4ba:	6910      	ldr	r0, [r2, #16]
 800e4bc:	89fa      	ldrh	r2, [r7, #14]
 800e4be:	69f9      	ldr	r1, [r7, #28]
 800e4c0:	4798      	blx	r3
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	74fb      	strb	r3, [r7, #19]
 800e4c6:	e001      	b.n	800e4cc <tcp_input+0x570>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4d0:	f113 0f0d 	cmn.w	r3, #13
 800e4d4:	f000 8098 	beq.w	800e608 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e4d8:	4b76      	ldr	r3, [pc, #472]	; (800e6b4 <tcp_input+0x758>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e4de:	69f8      	ldr	r0, [r7, #28]
 800e4e0:	f000 f900 	bl	800e6e4 <tcp_input_delayed_close>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f040 8090 	bne.w	800e60c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e4ec:	4b72      	ldr	r3, [pc, #456]	; (800e6b8 <tcp_input+0x75c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d041      	beq.n	800e578 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d006      	beq.n	800e50a <tcp_input+0x5ae>
 800e4fc:	4b6f      	ldr	r3, [pc, #444]	; (800e6bc <tcp_input+0x760>)
 800e4fe:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e502:	496f      	ldr	r1, [pc, #444]	; (800e6c0 <tcp_input+0x764>)
 800e504:	486f      	ldr	r0, [pc, #444]	; (800e6c4 <tcp_input+0x768>)
 800e506:	f008 fb3f 	bl	8016b88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	7e9b      	ldrb	r3, [r3, #26]
 800e50e:	f003 0310 	and.w	r3, r3, #16
 800e512:	2b00      	cmp	r3, #0
 800e514:	d008      	beq.n	800e528 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e516:	4b68      	ldr	r3, [pc, #416]	; (800e6b8 <tcp_input+0x75c>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fd fe24 	bl	800c168 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e520:	69f8      	ldr	r0, [r7, #28]
 800e522:	f7fe fb77 	bl	800cc14 <tcp_abort>
            goto aborted;
 800e526:	e078      	b.n	800e61a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00c      	beq.n	800e54c <tcp_input+0x5f0>
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	6918      	ldr	r0, [r3, #16]
 800e53c:	4b5e      	ldr	r3, [pc, #376]	; (800e6b8 <tcp_input+0x75c>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	69f9      	ldr	r1, [r7, #28]
 800e544:	47a0      	blx	r4
 800e546:	4603      	mov	r3, r0
 800e548:	74fb      	strb	r3, [r7, #19]
 800e54a:	e008      	b.n	800e55e <tcp_input+0x602>
 800e54c:	4b5a      	ldr	r3, [pc, #360]	; (800e6b8 <tcp_input+0x75c>)
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	2300      	movs	r3, #0
 800e552:	69f9      	ldr	r1, [r7, #28]
 800e554:	2000      	movs	r0, #0
 800e556:	f7ff f985 	bl	800d864 <tcp_recv_null>
 800e55a:	4603      	mov	r3, r0
 800e55c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e55e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e562:	f113 0f0d 	cmn.w	r3, #13
 800e566:	d053      	beq.n	800e610 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e568:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d003      	beq.n	800e578 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e570:	4b51      	ldr	r3, [pc, #324]	; (800e6b8 <tcp_input+0x75c>)
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e578:	4b4c      	ldr	r3, [pc, #304]	; (800e6ac <tcp_input+0x750>)
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	f003 0320 	and.w	r3, r3, #32
 800e580:	2b00      	cmp	r3, #0
 800e582:	d030      	beq.n	800e5e6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d009      	beq.n	800e5a0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e590:	7b5a      	ldrb	r2, [r3, #13]
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e596:	f042 0220 	orr.w	r2, r2, #32
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	735a      	strb	r2, [r3, #13]
 800e59e:	e022      	b.n	800e5e6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e5a8:	d005      	beq.n	800e5b6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800e5aa:	69fb      	ldr	r3, [r7, #28]
 800e5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00b      	beq.n	800e5d8 <tcp_input+0x67c>
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	6918      	ldr	r0, [r3, #16]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	69f9      	ldr	r1, [r7, #28]
 800e5d0:	47a0      	blx	r4
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	74fb      	strb	r3, [r7, #19]
 800e5d6:	e001      	b.n	800e5dc <tcp_input+0x680>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5e0:	f113 0f0d 	cmn.w	r3, #13
 800e5e4:	d016      	beq.n	800e614 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e5e6:	4b30      	ldr	r3, [pc, #192]	; (800e6a8 <tcp_input+0x74c>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e5ec:	69f8      	ldr	r0, [r7, #28]
 800e5ee:	f000 f879 	bl	800e6e4 <tcp_input_delayed_close>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10f      	bne.n	800e618 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e5f8:	69f8      	ldr	r0, [r7, #28]
 800e5fa:	f002 fd95 	bl	8011128 <tcp_output>
 800e5fe:	e00c      	b.n	800e61a <tcp_input+0x6be>
        goto aborted;
 800e600:	bf00      	nop
 800e602:	e00a      	b.n	800e61a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e604:	bf00      	nop
 800e606:	e008      	b.n	800e61a <tcp_input+0x6be>
              goto aborted;
 800e608:	bf00      	nop
 800e60a:	e006      	b.n	800e61a <tcp_input+0x6be>
          goto aborted;
 800e60c:	bf00      	nop
 800e60e:	e004      	b.n	800e61a <tcp_input+0x6be>
            goto aborted;
 800e610:	bf00      	nop
 800e612:	e002      	b.n	800e61a <tcp_input+0x6be>
              goto aborted;
 800e614:	bf00      	nop
 800e616:	e000      	b.n	800e61a <tcp_input+0x6be>
          goto aborted;
 800e618:	bf00      	nop
    tcp_input_pcb = NULL;
 800e61a:	4b23      	ldr	r3, [pc, #140]	; (800e6a8 <tcp_input+0x74c>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e620:	4b25      	ldr	r3, [pc, #148]	; (800e6b8 <tcp_input+0x75c>)
 800e622:	2200      	movs	r2, #0
 800e624:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e626:	4b28      	ldr	r3, [pc, #160]	; (800e6c8 <tcp_input+0x76c>)
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d037      	beq.n	800e69e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800e62e:	4b26      	ldr	r3, [pc, #152]	; (800e6c8 <tcp_input+0x76c>)
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	f7fd fd98 	bl	800c168 <pbuf_free>
      inseg.p = NULL;
 800e638:	4b23      	ldr	r3, [pc, #140]	; (800e6c8 <tcp_input+0x76c>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e63e:	e02e      	b.n	800e69e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e640:	4b22      	ldr	r3, [pc, #136]	; (800e6cc <tcp_input+0x770>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	899b      	ldrh	r3, [r3, #12]
 800e646:	b29b      	uxth	r3, r3
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fc fbb5 	bl	800adb8 <lwip_htons>
 800e64e:	4603      	mov	r3, r0
 800e650:	f003 0304 	and.w	r3, r3, #4
 800e654:	2b00      	cmp	r3, #0
 800e656:	d115      	bne.n	800e684 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e658:	4b1d      	ldr	r3, [pc, #116]	; (800e6d0 <tcp_input+0x774>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	4b1d      	ldr	r3, [pc, #116]	; (800e6d4 <tcp_input+0x778>)
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	461a      	mov	r2, r3
 800e662:	4b1d      	ldr	r3, [pc, #116]	; (800e6d8 <tcp_input+0x77c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e668:	4b18      	ldr	r3, [pc, #96]	; (800e6cc <tcp_input+0x770>)
 800e66a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e66c:	885b      	ldrh	r3, [r3, #2]
 800e66e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e670:	4a16      	ldr	r2, [pc, #88]	; (800e6cc <tcp_input+0x770>)
 800e672:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e674:	8812      	ldrh	r2, [r2, #0]
 800e676:	b292      	uxth	r2, r2
 800e678:	9201      	str	r2, [sp, #4]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	4b17      	ldr	r3, [pc, #92]	; (800e6dc <tcp_input+0x780>)
 800e67e:	4a18      	ldr	r2, [pc, #96]	; (800e6e0 <tcp_input+0x784>)
 800e680:	f002 ffdc 	bl	801163c <tcp_rst>
    pbuf_free(p);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7fd fd6f 	bl	800c168 <pbuf_free>
  return;
 800e68a:	e008      	b.n	800e69e <tcp_input+0x742>
    goto dropped;
 800e68c:	bf00      	nop
 800e68e:	e002      	b.n	800e696 <tcp_input+0x73a>
dropped:
 800e690:	bf00      	nop
 800e692:	e000      	b.n	800e696 <tcp_input+0x73a>
      goto dropped;
 800e694:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7fd fd66 	bl	800c168 <pbuf_free>
 800e69c:	e000      	b.n	800e6a0 <tcp_input+0x744>
  return;
 800e69e:	bf00      	nop
}
 800e6a0:	3724      	adds	r7, #36	; 0x24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd90      	pop	{r4, r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	2000fae8 	.word	0x2000fae8
 800e6ac:	20008c6d 	.word	0x20008c6d
 800e6b0:	2000fad4 	.word	0x2000fad4
 800e6b4:	20008c68 	.word	0x20008c68
 800e6b8:	20008c70 	.word	0x20008c70
 800e6bc:	08019950 	.word	0x08019950
 800e6c0:	08019aec 	.word	0x08019aec
 800e6c4:	08019994 	.word	0x08019994
 800e6c8:	20008c40 	.word	0x20008c40
 800e6cc:	20008c50 	.word	0x20008c50
 800e6d0:	20008c64 	.word	0x20008c64
 800e6d4:	20008c6a 	.word	0x20008c6a
 800e6d8:	20008c60 	.word	0x20008c60
 800e6dc:	2000c3b4 	.word	0x2000c3b4
 800e6e0:	2000c3b8 	.word	0x2000c3b8

0800e6e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e6ec:	4b14      	ldr	r3, [pc, #80]	; (800e740 <tcp_input_delayed_close+0x5c>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	f003 0310 	and.w	r3, r3, #16
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01d      	beq.n	800e734 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	7e9b      	ldrb	r3, [r3, #26]
 800e6fc:	f003 0310 	and.w	r3, r3, #16
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10d      	bne.n	800e720 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d008      	beq.n	800e720 <tcp_input_delayed_close+0x3c>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	6912      	ldr	r2, [r2, #16]
 800e718:	f06f 010e 	mvn.w	r1, #14
 800e71c:	4610      	mov	r0, r2
 800e71e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e720:	6879      	ldr	r1, [r7, #4]
 800e722:	4808      	ldr	r0, [pc, #32]	; (800e744 <tcp_input_delayed_close+0x60>)
 800e724:	f7ff fb00 	bl	800dd28 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e728:	6879      	ldr	r1, [r7, #4]
 800e72a:	2001      	movs	r0, #1
 800e72c:	f7fc ffba 	bl	800b6a4 <memp_free>
    return 1;
 800e730:	2301      	movs	r3, #1
 800e732:	e000      	b.n	800e736 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	20008c6d 	.word	0x20008c6d
 800e744:	2000fad4 	.word	0x2000fad4

0800e748 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b088      	sub	sp, #32
 800e74c:	af02      	add	r7, sp, #8
 800e74e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e750:	4b64      	ldr	r3, [pc, #400]	; (800e8e4 <tcp_listen_input+0x19c>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f040 80bc 	bne.w	800e8d6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e75e:	4b61      	ldr	r3, [pc, #388]	; (800e8e4 <tcp_listen_input+0x19c>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	f003 0310 	and.w	r3, r3, #16
 800e766:	2b00      	cmp	r3, #0
 800e768:	d016      	beq.n	800e798 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e76a:	4b5f      	ldr	r3, [pc, #380]	; (800e8e8 <tcp_listen_input+0x1a0>)
 800e76c:	6818      	ldr	r0, [r3, #0]
 800e76e:	4b5f      	ldr	r3, [pc, #380]	; (800e8ec <tcp_listen_input+0x1a4>)
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	4b5e      	ldr	r3, [pc, #376]	; (800e8f0 <tcp_listen_input+0x1a8>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e77a:	4b5e      	ldr	r3, [pc, #376]	; (800e8f4 <tcp_listen_input+0x1ac>)
 800e77c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e77e:	885b      	ldrh	r3, [r3, #2]
 800e780:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e782:	4a5c      	ldr	r2, [pc, #368]	; (800e8f4 <tcp_listen_input+0x1ac>)
 800e784:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e786:	8812      	ldrh	r2, [r2, #0]
 800e788:	b292      	uxth	r2, r2
 800e78a:	9201      	str	r2, [sp, #4]
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	4b5a      	ldr	r3, [pc, #360]	; (800e8f8 <tcp_listen_input+0x1b0>)
 800e790:	4a5a      	ldr	r2, [pc, #360]	; (800e8fc <tcp_listen_input+0x1b4>)
 800e792:	f002 ff53 	bl	801163c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e796:	e0a0      	b.n	800e8da <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800e798:	4b52      	ldr	r3, [pc, #328]	; (800e8e4 <tcp_listen_input+0x19c>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 0302 	and.w	r3, r3, #2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 809a 	beq.w	800e8da <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	7d5b      	ldrb	r3, [r3, #21]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff f938 	bl	800da20 <tcp_alloc>
 800e7b0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d111      	bne.n	800e7dc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	699b      	ldr	r3, [r3, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00a      	beq.n	800e7d6 <tcp_listen_input+0x8e>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	6910      	ldr	r0, [r2, #16]
 800e7c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	4798      	blx	r3
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73bb      	strb	r3, [r7, #14]
      return;
 800e7d4:	e082      	b.n	800e8dc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e7d6:	23f0      	movs	r3, #240	; 0xf0
 800e7d8:	73bb      	strb	r3, [r7, #14]
      return;
 800e7da:	e07f      	b.n	800e8dc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e7dc:	4b48      	ldr	r3, [pc, #288]	; (800e900 <tcp_listen_input+0x1b8>)
 800e7de:	695a      	ldr	r2, [r3, #20]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e7e4:	4b46      	ldr	r3, [pc, #280]	; (800e900 <tcp_listen_input+0x1b8>)
 800e7e6:	691a      	ldr	r2, [r3, #16]
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	8ada      	ldrh	r2, [r3, #22]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e7f4:	4b3f      	ldr	r3, [pc, #252]	; (800e8f4 <tcp_listen_input+0x1ac>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	881b      	ldrh	r3, [r3, #0]
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	2203      	movs	r2, #3
 800e804:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e806:	4b3a      	ldr	r3, [pc, #232]	; (800e8f0 <tcp_listen_input+0x1a8>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e818:	6978      	ldr	r0, [r7, #20]
 800e81a:	f7ff fb01 	bl	800de20 <tcp_next_iss>
 800e81e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	693a      	ldr	r2, [r7, #16]
 800e824:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e838:	4b2d      	ldr	r3, [pc, #180]	; (800e8f0 <tcp_listen_input+0x1a8>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	1e5a      	subs	r2, r3, #1
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	691a      	ldr	r2, [r3, #16]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7a1b      	ldrb	r3, [r3, #8]
 800e854:	f003 030c 	and.w	r3, r3, #12
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e85e:	4b29      	ldr	r3, [pc, #164]	; (800e904 <tcp_listen_input+0x1bc>)
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	60da      	str	r2, [r3, #12]
 800e866:	4a27      	ldr	r2, [pc, #156]	; (800e904 <tcp_listen_input+0x1bc>)
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	f003 f936 	bl	8011adc <tcp_timer_needed>
 800e870:	4b25      	ldr	r3, [pc, #148]	; (800e908 <tcp_listen_input+0x1c0>)
 800e872:	2201      	movs	r2, #1
 800e874:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e876:	6978      	ldr	r0, [r7, #20]
 800e878:	f001 fd14 	bl	80102a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e87c:	4b1d      	ldr	r3, [pc, #116]	; (800e8f4 <tcp_listen_input+0x1ac>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	89db      	ldrh	r3, [r3, #14]
 800e882:	b29a      	uxth	r2, r3
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	3304      	adds	r3, #4
 800e89e:	4619      	mov	r1, r3
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	f7ff fad5 	bl	800de50 <tcp_eff_send_mss_impl>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e8ae:	2112      	movs	r1, #18
 800e8b0:	6978      	ldr	r0, [r7, #20]
 800e8b2:	f002 fae1 	bl	8010e78 <tcp_enqueue_flags>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d004      	beq.n	800e8cc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	6978      	ldr	r0, [r7, #20]
 800e8c6:	f7fe f8f3 	bl	800cab0 <tcp_abandon>
      return;
 800e8ca:	e007      	b.n	800e8dc <tcp_listen_input+0x194>
    tcp_output(npcb);
 800e8cc:	6978      	ldr	r0, [r7, #20]
 800e8ce:	f002 fc2b 	bl	8011128 <tcp_output>
  return;
 800e8d2:	bf00      	nop
 800e8d4:	e001      	b.n	800e8da <tcp_listen_input+0x192>
    return;
 800e8d6:	bf00      	nop
 800e8d8:	e000      	b.n	800e8dc <tcp_listen_input+0x194>
  return;
 800e8da:	bf00      	nop
}
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	20008c6c 	.word	0x20008c6c
 800e8e8:	20008c64 	.word	0x20008c64
 800e8ec:	20008c6a 	.word	0x20008c6a
 800e8f0:	20008c60 	.word	0x20008c60
 800e8f4:	20008c50 	.word	0x20008c50
 800e8f8:	2000c3b4 	.word	0x2000c3b4
 800e8fc:	2000c3b8 	.word	0x2000c3b8
 800e900:	2000c3a4 	.word	0x2000c3a4
 800e904:	2000fad4 	.word	0x2000fad4
 800e908:	2000fad0 	.word	0x2000fad0

0800e90c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af02      	add	r7, sp, #8
 800e912:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e914:	4b29      	ldr	r3, [pc, #164]	; (800e9bc <tcp_timewait_input+0xb0>)
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d147      	bne.n	800e9b0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e920:	4b26      	ldr	r3, [pc, #152]	; (800e9bc <tcp_timewait_input+0xb0>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 0302 	and.w	r3, r3, #2
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d027      	beq.n	800e97c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e92c:	4b24      	ldr	r3, [pc, #144]	; (800e9c0 <tcp_timewait_input+0xb4>)
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e934:	1ad3      	subs	r3, r2, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	db2a      	blt.n	800e990 <tcp_timewait_input+0x84>
 800e93a:	4b21      	ldr	r3, [pc, #132]	; (800e9c0 <tcp_timewait_input+0xb4>)
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e946:	440b      	add	r3, r1
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	dc20      	bgt.n	800e990 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e94e:	4b1d      	ldr	r3, [pc, #116]	; (800e9c4 <tcp_timewait_input+0xb8>)
 800e950:	6818      	ldr	r0, [r3, #0]
 800e952:	4b1d      	ldr	r3, [pc, #116]	; (800e9c8 <tcp_timewait_input+0xbc>)
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	4b19      	ldr	r3, [pc, #100]	; (800e9c0 <tcp_timewait_input+0xb4>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e95e:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <tcp_timewait_input+0xc0>)
 800e960:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e962:	885b      	ldrh	r3, [r3, #2]
 800e964:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e966:	4a19      	ldr	r2, [pc, #100]	; (800e9cc <tcp_timewait_input+0xc0>)
 800e968:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e96a:	8812      	ldrh	r2, [r2, #0]
 800e96c:	b292      	uxth	r2, r2
 800e96e:	9201      	str	r2, [sp, #4]
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	4b17      	ldr	r3, [pc, #92]	; (800e9d0 <tcp_timewait_input+0xc4>)
 800e974:	4a17      	ldr	r2, [pc, #92]	; (800e9d4 <tcp_timewait_input+0xc8>)
 800e976:	f002 fe61 	bl	801163c <tcp_rst>
      return;
 800e97a:	e01c      	b.n	800e9b6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800e97c:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <tcp_timewait_input+0xb0>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	d003      	beq.n	800e990 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e988:	4b13      	ldr	r3, [pc, #76]	; (800e9d8 <tcp_timewait_input+0xcc>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e990:	4b0d      	ldr	r3, [pc, #52]	; (800e9c8 <tcp_timewait_input+0xbc>)
 800e992:	881b      	ldrh	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00d      	beq.n	800e9b4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7e9b      	ldrb	r3, [r3, #26]
 800e99c:	f043 0302 	orr.w	r3, r3, #2
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f002 fbbe 	bl	8011128 <tcp_output>
  }
  return;
 800e9ac:	bf00      	nop
 800e9ae:	e001      	b.n	800e9b4 <tcp_timewait_input+0xa8>
    return;
 800e9b0:	bf00      	nop
 800e9b2:	e000      	b.n	800e9b6 <tcp_timewait_input+0xaa>
  return;
 800e9b4:	bf00      	nop
}
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20008c6c 	.word	0x20008c6c
 800e9c0:	20008c60 	.word	0x20008c60
 800e9c4:	20008c64 	.word	0x20008c64
 800e9c8:	20008c6a 	.word	0x20008c6a
 800e9cc:	20008c50 	.word	0x20008c50
 800e9d0:	2000c3b4 	.word	0x2000c3b4
 800e9d4:	2000c3b8 	.word	0x2000c3b8
 800e9d8:	2000fad8 	.word	0x2000fad8

0800e9dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08a      	sub	sp, #40	; 0x28
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e9ec:	4ba4      	ldr	r3, [pc, #656]	; (800ec80 <tcp_process+0x2a4>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f003 0304 	and.w	r3, r3, #4
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d04e      	beq.n	800ea96 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	7d1b      	ldrb	r3, [r3, #20]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d108      	bne.n	800ea12 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea04:	4b9f      	ldr	r3, [pc, #636]	; (800ec84 <tcp_process+0x2a8>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d123      	bne.n	800ea54 <tcp_process+0x78>
        acceptable = 1;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	76fb      	strb	r3, [r7, #27]
 800ea10:	e020      	b.n	800ea54 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea16:	4b9c      	ldr	r3, [pc, #624]	; (800ec88 <tcp_process+0x2ac>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d102      	bne.n	800ea24 <tcp_process+0x48>
        acceptable = 1;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	76fb      	strb	r3, [r7, #27]
 800ea22:	e017      	b.n	800ea54 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea24:	4b98      	ldr	r3, [pc, #608]	; (800ec88 <tcp_process+0x2ac>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	db10      	blt.n	800ea54 <tcp_process+0x78>
 800ea32:	4b95      	ldr	r3, [pc, #596]	; (800ec88 <tcp_process+0x2ac>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea3e:	440b      	add	r3, r1
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	dc06      	bgt.n	800ea54 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	7e9b      	ldrb	r3, [r3, #26]
 800ea4a:	f043 0302 	orr.w	r3, r3, #2
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ea54:	7efb      	ldrb	r3, [r7, #27]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d01b      	beq.n	800ea92 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	7d1b      	ldrb	r3, [r3, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcp_process+0x94>
 800ea62:	4b8a      	ldr	r3, [pc, #552]	; (800ec8c <tcp_process+0x2b0>)
 800ea64:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ea68:	4989      	ldr	r1, [pc, #548]	; (800ec90 <tcp_process+0x2b4>)
 800ea6a:	488a      	ldr	r0, [pc, #552]	; (800ec94 <tcp_process+0x2b8>)
 800ea6c:	f008 f88c 	bl	8016b88 <iprintf>
      recv_flags |= TF_RESET;
 800ea70:	4b89      	ldr	r3, [pc, #548]	; (800ec98 <tcp_process+0x2bc>)
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	f043 0308 	orr.w	r3, r3, #8
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	4b87      	ldr	r3, [pc, #540]	; (800ec98 <tcp_process+0x2bc>)
 800ea7c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7e9b      	ldrb	r3, [r3, #26]
 800ea82:	f023 0301 	bic.w	r3, r3, #1
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800ea8c:	f06f 030d 	mvn.w	r3, #13
 800ea90:	e34d      	b.n	800f12e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	e34b      	b.n	800f12e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ea96:	4b7a      	ldr	r3, [pc, #488]	; (800ec80 <tcp_process+0x2a4>)
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d010      	beq.n	800eac4 <tcp_process+0xe8>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	7d1b      	ldrb	r3, [r3, #20]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d00c      	beq.n	800eac4 <tcp_process+0xe8>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7d1b      	ldrb	r3, [r3, #20]
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d008      	beq.n	800eac4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	7e9b      	ldrb	r3, [r3, #26]
 800eab6:	f043 0302 	orr.w	r3, r3, #2
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e334      	b.n	800f12e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	7e9b      	ldrb	r3, [r3, #26]
 800eac8:	f003 0310 	and.w	r3, r3, #16
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d103      	bne.n	800ead8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ead0:	4b72      	ldr	r3, [pc, #456]	; (800ec9c <tcp_process+0x2c0>)
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f001 fbdf 	bl	80102a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	7d1b      	ldrb	r3, [r3, #20]
 800eaea:	3b02      	subs	r3, #2
 800eaec:	2b07      	cmp	r3, #7
 800eaee:	f200 830e 	bhi.w	800f10e <tcp_process+0x732>
 800eaf2:	a201      	add	r2, pc, #4	; (adr r2, 800eaf8 <tcp_process+0x11c>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb19 	.word	0x0800eb19
 800eafc:	0800ed11 	.word	0x0800ed11
 800eb00:	0800ee69 	.word	0x0800ee69
 800eb04:	0800ee93 	.word	0x0800ee93
 800eb08:	0800efbd 	.word	0x0800efbd
 800eb0c:	0800ee69 	.word	0x0800ee69
 800eb10:	0800f049 	.word	0x0800f049
 800eb14:	0800f0d9 	.word	0x0800f0d9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800eb18:	4b59      	ldr	r3, [pc, #356]	; (800ec80 <tcp_process+0x2a4>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 0310 	and.w	r3, r3, #16
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 80cb 	beq.w	800ecbc <tcp_process+0x2e0>
 800eb26:	4b56      	ldr	r3, [pc, #344]	; (800ec80 <tcp_process+0x2a4>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	f003 0302 	and.w	r3, r3, #2
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 80c4 	beq.w	800ecbc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	4b52      	ldr	r3, [pc, #328]	; (800ec84 <tcp_process+0x2a8>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	f040 80bc 	bne.w	800ecbc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800eb44:	4b50      	ldr	r3, [pc, #320]	; (800ec88 <tcp_process+0x2ac>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800eb56:	4b4b      	ldr	r3, [pc, #300]	; (800ec84 <tcp_process+0x2a8>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800eb5e:	4b50      	ldr	r3, [pc, #320]	; (800eca0 <tcp_process+0x2c4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	89db      	ldrh	r3, [r3, #14]
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eb78:	4b43      	ldr	r3, [pc, #268]	; (800ec88 <tcp_process+0x2ac>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	1e5a      	subs	r2, r3, #1
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2204      	movs	r2, #4
 800eb86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7ff f95c 	bl	800de50 <tcp_eff_send_mss_impl>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	f241 121c 	movw	r2, #4380	; 0x111c
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	bf38      	it	cc
 800ebae:	461a      	movcc	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	bf28      	it	cs
 800ebba:	4613      	movcs	r3, r2
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d106      	bne.n	800ebdc <tcp_process+0x200>
 800ebce:	4b2f      	ldr	r3, [pc, #188]	; (800ec8c <tcp_process+0x2b0>)
 800ebd0:	f240 321a 	movw	r2, #794	; 0x31a
 800ebd4:	4933      	ldr	r1, [pc, #204]	; (800eca4 <tcp_process+0x2c8>)
 800ebd6:	482f      	ldr	r0, [pc, #188]	; (800ec94 <tcp_process+0x2b8>)
 800ebd8:	f007 ffd6 	bl	8016b88 <iprintf>
      --pcb->snd_queuelen;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	b29a      	uxth	r2, r3
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d111      	bne.n	800ec1c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebfc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <tcp_process+0x236>
 800ec04:	4b21      	ldr	r3, [pc, #132]	; (800ec8c <tcp_process+0x2b0>)
 800ec06:	f240 3222 	movw	r2, #802	; 0x322
 800ec0a:	4927      	ldr	r1, [pc, #156]	; (800eca8 <tcp_process+0x2cc>)
 800ec0c:	4821      	ldr	r0, [pc, #132]	; (800ec94 <tcp_process+0x2b8>)
 800ec0e:	f007 ffbb 	bl	8016b88 <iprintf>
        pcb->unsent = rseg->next;
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	669a      	str	r2, [r3, #104]	; 0x68
 800ec1a:	e003      	b.n	800ec24 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ec24:	69f8      	ldr	r0, [r7, #28]
 800ec26:	f7fe fdda 	bl	800d7de <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d104      	bne.n	800ec3c <tcp_process+0x260>
        pcb->rtime = -1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec38:	861a      	strh	r2, [r3, #48]	; 0x30
 800ec3a:	e006      	b.n	800ec4a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00a      	beq.n	800ec6a <tcp_process+0x28e>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	6910      	ldr	r0, [r2, #16]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	4798      	blx	r3
 800ec64:	4603      	mov	r3, r0
 800ec66:	76bb      	strb	r3, [r7, #26]
 800ec68:	e001      	b.n	800ec6e <tcp_process+0x292>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ec6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec72:	f113 0f0d 	cmn.w	r3, #13
 800ec76:	d119      	bne.n	800ecac <tcp_process+0x2d0>
        return ERR_ABRT;
 800ec78:	f06f 030c 	mvn.w	r3, #12
 800ec7c:	e257      	b.n	800f12e <tcp_process+0x752>
 800ec7e:	bf00      	nop
 800ec80:	20008c6c 	.word	0x20008c6c
 800ec84:	20008c64 	.word	0x20008c64
 800ec88:	20008c60 	.word	0x20008c60
 800ec8c:	08019950 	.word	0x08019950
 800ec90:	08019b08 	.word	0x08019b08
 800ec94:	08019994 	.word	0x08019994
 800ec98:	20008c6d 	.word	0x20008c6d
 800ec9c:	2000fad8 	.word	0x2000fad8
 800eca0:	20008c50 	.word	0x20008c50
 800eca4:	08019b28 	.word	0x08019b28
 800eca8:	08019b40 	.word	0x08019b40
      }
      tcp_ack_now(pcb);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	7e9b      	ldrb	r3, [r3, #26]
 800ecb0:	f043 0302 	orr.w	r3, r3, #2
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800ecba:	e22a      	b.n	800f112 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800ecbc:	4b9f      	ldr	r3, [pc, #636]	; (800ef3c <tcp_process+0x560>)
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	f003 0310 	and.w	r3, r3, #16
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 8224 	beq.w	800f112 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecca:	4b9d      	ldr	r3, [pc, #628]	; (800ef40 <tcp_process+0x564>)
 800eccc:	6818      	ldr	r0, [r3, #0]
 800ecce:	4b9d      	ldr	r3, [pc, #628]	; (800ef44 <tcp_process+0x568>)
 800ecd0:	881b      	ldrh	r3, [r3, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	4b9c      	ldr	r3, [pc, #624]	; (800ef48 <tcp_process+0x56c>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecda:	4b9c      	ldr	r3, [pc, #624]	; (800ef4c <tcp_process+0x570>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecde:	885b      	ldrh	r3, [r3, #2]
 800ece0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ece2:	4a9a      	ldr	r2, [pc, #616]	; (800ef4c <tcp_process+0x570>)
 800ece4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ece6:	8812      	ldrh	r2, [r2, #0]
 800ece8:	b292      	uxth	r2, r2
 800ecea:	9201      	str	r2, [sp, #4]
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	4b98      	ldr	r3, [pc, #608]	; (800ef50 <tcp_process+0x574>)
 800ecf0:	4a98      	ldr	r2, [pc, #608]	; (800ef54 <tcp_process+0x578>)
 800ecf2:	f002 fca3 	bl	801163c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ecfc:	2b05      	cmp	r3, #5
 800ecfe:	f200 8208 	bhi.w	800f112 <tcp_process+0x736>
        pcb->rtime = 0;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f002 fd0d 	bl	8011728 <tcp_rexmit_rto>
    break;
 800ed0e:	e200      	b.n	800f112 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ed10:	4b8a      	ldr	r3, [pc, #552]	; (800ef3c <tcp_process+0x560>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f003 0310 	and.w	r3, r3, #16
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f000 8091 	beq.w	800ee40 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ed1e:	4b88      	ldr	r3, [pc, #544]	; (800ef40 <tcp_process+0x564>)
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	db71      	blt.n	800ee12 <tcp_process+0x436>
 800ed2e:	4b84      	ldr	r3, [pc, #528]	; (800ef40 <tcp_process+0x564>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	dc6a      	bgt.n	800ee12 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2204      	movs	r2, #4
 800ed40:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00b      	beq.n	800ed62 <tcp_process+0x386>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d106      	bne.n	800ed62 <tcp_process+0x386>
 800ed54:	4b80      	ldr	r3, [pc, #512]	; (800ef58 <tcp_process+0x57c>)
 800ed56:	f240 3251 	movw	r2, #849	; 0x351
 800ed5a:	4980      	ldr	r1, [pc, #512]	; (800ef5c <tcp_process+0x580>)
 800ed5c:	4880      	ldr	r0, [pc, #512]	; (800ef60 <tcp_process+0x584>)
 800ed5e:	f007 ff13 	bl	8016b88 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d102      	bne.n	800ed70 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ed6a:	23fa      	movs	r3, #250	; 0xfa
 800ed6c:	76bb      	strb	r3, [r7, #26]
 800ed6e:	e011      	b.n	800ed94 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed74:	699b      	ldr	r3, [r3, #24]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <tcp_process+0x3b4>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed7e:	699b      	ldr	r3, [r3, #24]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	6910      	ldr	r0, [r2, #16]
 800ed84:	2200      	movs	r2, #0
 800ed86:	6879      	ldr	r1, [r7, #4]
 800ed88:	4798      	blx	r3
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	76bb      	strb	r3, [r7, #26]
 800ed8e:	e001      	b.n	800ed94 <tcp_process+0x3b8>
 800ed90:	23f0      	movs	r3, #240	; 0xf0
 800ed92:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800ed94:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00a      	beq.n	800edb2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ed9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eda0:	f113 0f0d 	cmn.w	r3, #13
 800eda4:	d002      	beq.n	800edac <tcp_process+0x3d0>
            tcp_abort(pcb);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fd ff34 	bl	800cc14 <tcp_abort>
          }
          return ERR_ABRT;
 800edac:	f06f 030c 	mvn.w	r3, #12
 800edb0:	e1bd      	b.n	800f12e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 fa42 	bl	800f23c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800edb8:	4b6a      	ldr	r3, [pc, #424]	; (800ef64 <tcp_process+0x588>)
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <tcp_process+0x3f0>
          recv_acked--;
 800edc0:	4b68      	ldr	r3, [pc, #416]	; (800ef64 <tcp_process+0x588>)
 800edc2:	881b      	ldrh	r3, [r3, #0]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	4b66      	ldr	r3, [pc, #408]	; (800ef64 <tcp_process+0x588>)
 800edca:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	f241 121c 	movw	r2, #4380	; 0x111c
 800edd6:	429a      	cmp	r2, r3
 800edd8:	bf38      	it	cc
 800edda:	461a      	movcc	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4293      	cmp	r3, r2
 800ede4:	bf28      	it	cs
 800ede6:	4613      	movcs	r3, r2
 800ede8:	b29a      	uxth	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800edf0:	4b5d      	ldr	r3, [pc, #372]	; (800ef68 <tcp_process+0x58c>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0320 	and.w	r3, r3, #32
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d034      	beq.n	800ee66 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	7e9b      	ldrb	r3, [r3, #26]
 800ee00:	f043 0302 	orr.w	r3, r3, #2
 800ee04:	b2da      	uxtb	r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2207      	movs	r2, #7
 800ee0e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ee10:	e029      	b.n	800ee66 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee12:	4b4b      	ldr	r3, [pc, #300]	; (800ef40 <tcp_process+0x564>)
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	4b4b      	ldr	r3, [pc, #300]	; (800ef44 <tcp_process+0x568>)
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4b4a      	ldr	r3, [pc, #296]	; (800ef48 <tcp_process+0x56c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee22:	4b4a      	ldr	r3, [pc, #296]	; (800ef4c <tcp_process+0x570>)
 800ee24:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee26:	885b      	ldrh	r3, [r3, #2]
 800ee28:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee2a:	4a48      	ldr	r2, [pc, #288]	; (800ef4c <tcp_process+0x570>)
 800ee2c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee2e:	8812      	ldrh	r2, [r2, #0]
 800ee30:	b292      	uxth	r2, r2
 800ee32:	9201      	str	r2, [sp, #4]
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	4b46      	ldr	r3, [pc, #280]	; (800ef50 <tcp_process+0x574>)
 800ee38:	4a46      	ldr	r2, [pc, #280]	; (800ef54 <tcp_process+0x578>)
 800ee3a:	f002 fbff 	bl	801163c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ee3e:	e16a      	b.n	800f116 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ee40:	4b3e      	ldr	r3, [pc, #248]	; (800ef3c <tcp_process+0x560>)
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	f003 0302 	and.w	r3, r3, #2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f000 8164 	beq.w	800f116 <tcp_process+0x73a>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee52:	1e5a      	subs	r2, r3, #1
 800ee54:	4b3c      	ldr	r3, [pc, #240]	; (800ef48 <tcp_process+0x56c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	f040 815c 	bne.w	800f116 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f002 fc98 	bl	8011794 <tcp_rexmit>
    break;
 800ee64:	e157      	b.n	800f116 <tcp_process+0x73a>
 800ee66:	e156      	b.n	800f116 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 f9e7 	bl	800f23c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee6e:	4b3e      	ldr	r3, [pc, #248]	; (800ef68 <tcp_process+0x58c>)
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	f003 0320 	and.w	r3, r3, #32
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f000 814f 	beq.w	800f11a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	7e9b      	ldrb	r3, [r3, #26]
 800ee80:	f043 0302 	orr.w	r3, r3, #2
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2207      	movs	r2, #7
 800ee8e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ee90:	e143      	b.n	800f11a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 f9d2 	bl	800f23c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ee98:	4b33      	ldr	r3, [pc, #204]	; (800ef68 <tcp_process+0x58c>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	f003 0320 	and.w	r3, r3, #32
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d074      	beq.n	800ef8e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eea4:	4b25      	ldr	r3, [pc, #148]	; (800ef3c <tcp_process+0x560>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 0310 	and.w	r3, r3, #16
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d063      	beq.n	800ef78 <tcp_process+0x59c>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeb4:	4b22      	ldr	r3, [pc, #136]	; (800ef40 <tcp_process+0x564>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d15d      	bne.n	800ef78 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d159      	bne.n	800ef78 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	7e9b      	ldrb	r3, [r3, #26]
 800eec8:	f043 0302 	orr.w	r3, r3, #2
 800eecc:	b2da      	uxtb	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fee6 	bl	800dca4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eed8:	4b24      	ldr	r3, [pc, #144]	; (800ef6c <tcp_process+0x590>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d105      	bne.n	800eeee <tcp_process+0x512>
 800eee2:	4b22      	ldr	r3, [pc, #136]	; (800ef6c <tcp_process+0x590>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	4a20      	ldr	r2, [pc, #128]	; (800ef6c <tcp_process+0x590>)
 800eeea:	6013      	str	r3, [r2, #0]
 800eeec:	e013      	b.n	800ef16 <tcp_process+0x53a>
 800eeee:	4b1f      	ldr	r3, [pc, #124]	; (800ef6c <tcp_process+0x590>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e00c      	b.n	800ef10 <tcp_process+0x534>
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d104      	bne.n	800ef0a <tcp_process+0x52e>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68da      	ldr	r2, [r3, #12]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	60da      	str	r2, [r3, #12]
 800ef08:	e005      	b.n	800ef16 <tcp_process+0x53a>
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1ef      	bne.n	800eef6 <tcp_process+0x51a>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	60da      	str	r2, [r3, #12]
 800ef1c:	4b14      	ldr	r3, [pc, #80]	; (800ef70 <tcp_process+0x594>)
 800ef1e:	2201      	movs	r2, #1
 800ef20:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	220a      	movs	r2, #10
 800ef26:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef28:	4b12      	ldr	r3, [pc, #72]	; (800ef74 <tcp_process+0x598>)
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	60da      	str	r2, [r3, #12]
 800ef30:	4a10      	ldr	r2, [pc, #64]	; (800ef74 <tcp_process+0x598>)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6013      	str	r3, [r2, #0]
 800ef36:	f002 fdd1 	bl	8011adc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800ef3a:	e0f0      	b.n	800f11e <tcp_process+0x742>
 800ef3c:	20008c6c 	.word	0x20008c6c
 800ef40:	20008c64 	.word	0x20008c64
 800ef44:	20008c6a 	.word	0x20008c6a
 800ef48:	20008c60 	.word	0x20008c60
 800ef4c:	20008c50 	.word	0x20008c50
 800ef50:	2000c3b4 	.word	0x2000c3b4
 800ef54:	2000c3b8 	.word	0x2000c3b8
 800ef58:	08019950 	.word	0x08019950
 800ef5c:	08019b54 	.word	0x08019b54
 800ef60:	08019994 	.word	0x08019994
 800ef64:	20008c68 	.word	0x20008c68
 800ef68:	20008c6d 	.word	0x20008c6d
 800ef6c:	2000fad4 	.word	0x2000fad4
 800ef70:	2000fad0 	.word	0x2000fad0
 800ef74:	2000fae4 	.word	0x2000fae4
        tcp_ack_now(pcb);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	7e9b      	ldrb	r3, [r3, #26]
 800ef7c:	f043 0302 	orr.w	r3, r3, #2
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2208      	movs	r2, #8
 800ef8a:	751a      	strb	r2, [r3, #20]
    break;
 800ef8c:	e0c7      	b.n	800f11e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef8e:	4b6a      	ldr	r3, [pc, #424]	; (800f138 <tcp_process+0x75c>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f003 0310 	and.w	r3, r3, #16
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 80c1 	beq.w	800f11e <tcp_process+0x742>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efa0:	4b66      	ldr	r3, [pc, #408]	; (800f13c <tcp_process+0x760>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	f040 80ba 	bne.w	800f11e <tcp_process+0x742>
               pcb->unsent == NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f040 80b5 	bne.w	800f11e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2206      	movs	r2, #6
 800efb8:	751a      	strb	r2, [r3, #20]
    break;
 800efba:	e0b0      	b.n	800f11e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 f93d 	bl	800f23c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800efc2:	4b5f      	ldr	r3, [pc, #380]	; (800f140 <tcp_process+0x764>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	f003 0320 	and.w	r3, r3, #32
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 80a9 	beq.w	800f122 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	7e9b      	ldrb	r3, [r3, #26]
 800efd4:	f043 0302 	orr.w	r3, r3, #2
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7fe fe60 	bl	800dca4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800efe4:	4b57      	ldr	r3, [pc, #348]	; (800f144 <tcp_process+0x768>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	429a      	cmp	r2, r3
 800efec:	d105      	bne.n	800effa <tcp_process+0x61e>
 800efee:	4b55      	ldr	r3, [pc, #340]	; (800f144 <tcp_process+0x768>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	4a53      	ldr	r2, [pc, #332]	; (800f144 <tcp_process+0x768>)
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	e013      	b.n	800f022 <tcp_process+0x646>
 800effa:	4b52      	ldr	r3, [pc, #328]	; (800f144 <tcp_process+0x768>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	613b      	str	r3, [r7, #16]
 800f000:	e00c      	b.n	800f01c <tcp_process+0x640>
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d104      	bne.n	800f016 <tcp_process+0x63a>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68da      	ldr	r2, [r3, #12]
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	60da      	str	r2, [r3, #12]
 800f014:	e005      	b.n	800f022 <tcp_process+0x646>
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	613b      	str	r3, [r7, #16]
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d1ef      	bne.n	800f002 <tcp_process+0x626>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	60da      	str	r2, [r3, #12]
 800f028:	4b47      	ldr	r3, [pc, #284]	; (800f148 <tcp_process+0x76c>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	220a      	movs	r2, #10
 800f032:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f034:	4b45      	ldr	r3, [pc, #276]	; (800f14c <tcp_process+0x770>)
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	60da      	str	r2, [r3, #12]
 800f03c:	4a43      	ldr	r2, [pc, #268]	; (800f14c <tcp_process+0x770>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6013      	str	r3, [r2, #0]
 800f042:	f002 fd4b 	bl	8011adc <tcp_timer_needed>
    }
    break;
 800f046:	e06c      	b.n	800f122 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f8f7 	bl	800f23c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f04e:	4b3a      	ldr	r3, [pc, #232]	; (800f138 <tcp_process+0x75c>)
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	f003 0310 	and.w	r3, r3, #16
 800f056:	2b00      	cmp	r3, #0
 800f058:	d065      	beq.n	800f126 <tcp_process+0x74a>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f05e:	4b37      	ldr	r3, [pc, #220]	; (800f13c <tcp_process+0x760>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d15f      	bne.n	800f126 <tcp_process+0x74a>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d15b      	bne.n	800f126 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7fe fe18 	bl	800dca4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f074:	4b33      	ldr	r3, [pc, #204]	; (800f144 <tcp_process+0x768>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d105      	bne.n	800f08a <tcp_process+0x6ae>
 800f07e:	4b31      	ldr	r3, [pc, #196]	; (800f144 <tcp_process+0x768>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	4a2f      	ldr	r2, [pc, #188]	; (800f144 <tcp_process+0x768>)
 800f086:	6013      	str	r3, [r2, #0]
 800f088:	e013      	b.n	800f0b2 <tcp_process+0x6d6>
 800f08a:	4b2e      	ldr	r3, [pc, #184]	; (800f144 <tcp_process+0x768>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	60fb      	str	r3, [r7, #12]
 800f090:	e00c      	b.n	800f0ac <tcp_process+0x6d0>
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d104      	bne.n	800f0a6 <tcp_process+0x6ca>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	68da      	ldr	r2, [r3, #12]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	60da      	str	r2, [r3, #12]
 800f0a4:	e005      	b.n	800f0b2 <tcp_process+0x6d6>
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1ef      	bne.n	800f092 <tcp_process+0x6b6>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	60da      	str	r2, [r3, #12]
 800f0b8:	4b23      	ldr	r3, [pc, #140]	; (800f148 <tcp_process+0x76c>)
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	220a      	movs	r2, #10
 800f0c2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f0c4:	4b21      	ldr	r3, [pc, #132]	; (800f14c <tcp_process+0x770>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60da      	str	r2, [r3, #12]
 800f0cc:	4a1f      	ldr	r2, [pc, #124]	; (800f14c <tcp_process+0x770>)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	f002 fd03 	bl	8011adc <tcp_timer_needed>
    }
    break;
 800f0d6:	e026      	b.n	800f126 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 f8af 	bl	800f23c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f0de:	4b16      	ldr	r3, [pc, #88]	; (800f138 <tcp_process+0x75c>)
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	f003 0310 	and.w	r3, r3, #16
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d01f      	beq.n	800f12a <tcp_process+0x74e>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <tcp_process+0x760>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d119      	bne.n	800f12a <tcp_process+0x74e>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d115      	bne.n	800f12a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f0fe:	4b10      	ldr	r3, [pc, #64]	; (800f140 <tcp_process+0x764>)
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	f043 0310 	orr.w	r3, r3, #16
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b0d      	ldr	r3, [pc, #52]	; (800f140 <tcp_process+0x764>)
 800f10a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f10c:	e00d      	b.n	800f12a <tcp_process+0x74e>
  default:
    break;
 800f10e:	bf00      	nop
 800f110:	e00c      	b.n	800f12c <tcp_process+0x750>
    break;
 800f112:	bf00      	nop
 800f114:	e00a      	b.n	800f12c <tcp_process+0x750>
    break;
 800f116:	bf00      	nop
 800f118:	e008      	b.n	800f12c <tcp_process+0x750>
    break;
 800f11a:	bf00      	nop
 800f11c:	e006      	b.n	800f12c <tcp_process+0x750>
    break;
 800f11e:	bf00      	nop
 800f120:	e004      	b.n	800f12c <tcp_process+0x750>
    break;
 800f122:	bf00      	nop
 800f124:	e002      	b.n	800f12c <tcp_process+0x750>
    break;
 800f126:	bf00      	nop
 800f128:	e000      	b.n	800f12c <tcp_process+0x750>
    break;
 800f12a:	bf00      	nop
  }
  return ERR_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20008c6c 	.word	0x20008c6c
 800f13c:	20008c64 	.word	0x20008c64
 800f140:	20008c6d 	.word	0x20008c6d
 800f144:	2000fad4 	.word	0x2000fad4
 800f148:	2000fad0 	.word	0x2000fad0
 800f14c:	2000fae4 	.word	0x2000fae4

0800f150 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f150:	b590      	push	{r4, r7, lr}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	899b      	ldrh	r3, [r3, #12]
 800f160:	b29b      	uxth	r3, r3
 800f162:	4618      	mov	r0, r3
 800f164:	f7fb fe28 	bl	800adb8 <lwip_htons>
 800f168:	4603      	mov	r3, r0
 800f16a:	f003 0301 	and.w	r3, r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d027      	beq.n	800f1c2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f172:	6838      	ldr	r0, [r7, #0]
 800f174:	f7fe fb1f 	bl	800d7b6 <tcp_segs_free>
    next = NULL;
 800f178:	2300      	movs	r3, #0
 800f17a:	603b      	str	r3, [r7, #0]
 800f17c:	e055      	b.n	800f22a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	899b      	ldrh	r3, [r3, #12]
 800f184:	b29b      	uxth	r3, r3
 800f186:	4618      	mov	r0, r3
 800f188:	f7fb fe16 	bl	800adb8 <lwip_htons>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00d      	beq.n	800f1b2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	899b      	ldrh	r3, [r3, #12]
 800f19c:	b29c      	uxth	r4, r3
 800f19e:	2001      	movs	r0, #1
 800f1a0:	f7fb fe0a 	bl	800adb8 <lwip_htons>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	4322      	orrs	r2, r4
 800f1ae:	b292      	uxth	r2, r2
 800f1b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f7fe fb0e 	bl	800d7de <tcp_seg_free>
    while (next &&
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00e      	beq.n	800f1e6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	891b      	ldrh	r3, [r3, #8]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	4b1a      	ldr	r3, [pc, #104]	; (800f238 <tcp_oos_insert_segment+0xe8>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	441a      	add	r2, r3
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	8909      	ldrh	r1, [r1, #8]
 800f1de:	440b      	add	r3, r1
 800f1e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dacb      	bge.n	800f17e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d01e      	beq.n	800f22a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	891b      	ldrh	r3, [r3, #8]
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4b11      	ldr	r3, [pc, #68]	; (800f238 <tcp_oos_insert_segment+0xe8>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	441a      	add	r2, r3
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	68db      	ldr	r3, [r3, #12]
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f200:	2b00      	cmp	r3, #0
 800f202:	dd12      	ble.n	800f22a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	4b0a      	ldr	r3, [pc, #40]	; (800f238 <tcp_oos_insert_segment+0xe8>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	b29b      	uxth	r3, r3
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	b29a      	uxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	891b      	ldrh	r3, [r3, #8]
 800f222:	4619      	mov	r1, r3
 800f224:	4610      	mov	r0, r2
 800f226:	f7fc fe2b 	bl	800be80 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	601a      	str	r2, [r3, #0]
}
 800f230:	bf00      	nop
 800f232:	3714      	adds	r7, #20
 800f234:	46bd      	mov	sp, r7
 800f236:	bd90      	pop	{r4, r7, pc}
 800f238:	20008c60 	.word	0x20008c60

0800f23c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23e:	b08d      	sub	sp, #52	; 0x34
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	7d1b      	ldrb	r3, [r3, #20]
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d806      	bhi.n	800f25e <tcp_receive+0x22>
 800f250:	4ba6      	ldr	r3, [pc, #664]	; (800f4ec <tcp_receive+0x2b0>)
 800f252:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f256:	49a6      	ldr	r1, [pc, #664]	; (800f4f0 <tcp_receive+0x2b4>)
 800f258:	48a6      	ldr	r0, [pc, #664]	; (800f4f4 <tcp_receive+0x2b8>)
 800f25a:	f007 fc95 	bl	8016b88 <iprintf>

  if (flags & TCP_ACK) {
 800f25e:	4ba6      	ldr	r3, [pc, #664]	; (800f4f8 <tcp_receive+0x2bc>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	f003 0310 	and.w	r3, r3, #16
 800f266:	2b00      	cmp	r3, #0
 800f268:	f000 82bf 	beq.w	800f7ea <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f272:	461a      	mov	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f278:	4413      	add	r3, r2
 800f27a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f280:	4b9e      	ldr	r3, [pc, #632]	; (800f4fc <tcp_receive+0x2c0>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	1ad3      	subs	r3, r2, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	db1b      	blt.n	800f2c2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f28e:	4b9b      	ldr	r3, [pc, #620]	; (800f4fc <tcp_receive+0x2c0>)
 800f290:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f292:	429a      	cmp	r2, r3
 800f294:	d106      	bne.n	800f2a4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f29a:	4b99      	ldr	r3, [pc, #612]	; (800f500 <tcp_receive+0x2c4>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	db0e      	blt.n	800f2c2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2a8:	4b95      	ldr	r3, [pc, #596]	; (800f500 <tcp_receive+0x2c4>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d141      	bne.n	800f334 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2b0:	4b94      	ldr	r3, [pc, #592]	; (800f504 <tcp_receive+0x2c8>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	89db      	ldrh	r3, [r3, #14]
 800f2b6:	b29a      	uxth	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d938      	bls.n	800f334 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2c2:	4b90      	ldr	r3, [pc, #576]	; (800f504 <tcp_receive+0x2c8>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	89db      	ldrh	r3, [r3, #14]
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d205      	bcs.n	800f2ec <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f2ec:	4b83      	ldr	r3, [pc, #524]	; (800f4fc <tcp_receive+0x2c0>)
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f2f4:	4b82      	ldr	r3, [pc, #520]	; (800f500 <tcp_receive+0x2c4>)
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f302:	2b00      	cmp	r3, #0
 800f304:	d10d      	bne.n	800f322 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d111      	bne.n	800f334 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f320:	e008      	b.n	800f334 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f334:	4b72      	ldr	r3, [pc, #456]	; (800f500 <tcp_receive+0x2c4>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	2b00      	cmp	r3, #0
 800f340:	dc53      	bgt.n	800f3ea <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f342:	4b71      	ldr	r3, [pc, #452]	; (800f508 <tcp_receive+0x2cc>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d146      	bne.n	800f3d8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f354:	4413      	add	r3, r2
 800f356:	697a      	ldr	r2, [r7, #20]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d13d      	bne.n	800f3d8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f362:	2b00      	cmp	r3, #0
 800f364:	db38      	blt.n	800f3d8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f36a:	4b65      	ldr	r3, [pc, #404]	; (800f500 <tcp_receive+0x2c4>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d132      	bne.n	800f3d8 <tcp_receive+0x19c>
              found_dupack = 1;
 800f372:	2301      	movs	r3, #1
 800f374:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f37c:	2bff      	cmp	r3, #255	; 0xff
 800f37e:	d007      	beq.n	800f390 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f386:	3301      	adds	r3, #1
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f396:	2b03      	cmp	r3, #3
 800f398:	d916      	bls.n	800f3c8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d912      	bls.n	800f3d8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3bc:	4413      	add	r3, r2
 800f3be:	b29a      	uxth	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3c6:	e007      	b.n	800f3d8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3ce:	2b03      	cmp	r3, #3
 800f3d0:	d102      	bne.n	800f3d8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f002 fa2e 	bl	8011834 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f040 8169 	bne.w	800f6b2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3e8:	e163      	b.n	800f6b2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f3ea:	4b45      	ldr	r3, [pc, #276]	; (800f500 <tcp_receive+0x2c4>)
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f2c0 8107 	blt.w	800f60a <tcp_receive+0x3ce>
 800f3fc:	4b40      	ldr	r3, [pc, #256]	; (800f500 <tcp_receive+0x2c4>)
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	f300 80ff 	bgt.w	800f60a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	7e9b      	ldrb	r3, [r3, #26]
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00c      	beq.n	800f432 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	7e9b      	ldrb	r3, [r3, #26]
 800f41c:	f023 0304 	bic.w	r3, r3, #4
 800f420:	b2da      	uxtb	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f440:	10db      	asrs	r3, r3, #3
 800f442:	b21b      	sxth	r3, r3
 800f444:	b29a      	uxth	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	4413      	add	r3, r2
 800f450:	b29b      	uxth	r3, r3
 800f452:	b21a      	sxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f462:	4b27      	ldr	r3, [pc, #156]	; (800f500 <tcp_receive+0x2c4>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	7d1b      	ldrb	r3, [r3, #20]
 800f46e:	2b03      	cmp	r3, #3
 800f470:	f240 8094 	bls.w	800f59c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f480:	429a      	cmp	r2, r3
 800f482:	d216      	bcs.n	800f4b2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f48e:	4413      	add	r3, r2
 800f490:	b29a      	uxth	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f498:	429a      	cmp	r2, r3
 800f49a:	d97f      	bls.n	800f59c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4a6:	4413      	add	r3, r2
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4b0:	e074      	b.n	800f59c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4bc:	4619      	mov	r1, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4c2:	fb03 f301 	mul.w	r3, r3, r1
 800f4c6:	6879      	ldr	r1, [r7, #4]
 800f4c8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f4cc:	fb93 f3f1 	sdiv	r3, r3, r1
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4413      	add	r3, r2
 800f4d4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4dc:	8a7a      	ldrh	r2, [r7, #18]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d95c      	bls.n	800f59c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8a7a      	ldrh	r2, [r7, #18]
 800f4e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f4ea:	e057      	b.n	800f59c <tcp_receive+0x360>
 800f4ec:	08019950 	.word	0x08019950
 800f4f0:	08019b74 	.word	0x08019b74
 800f4f4:	08019994 	.word	0x08019994
 800f4f8:	20008c6c 	.word	0x20008c6c
 800f4fc:	20008c60 	.word	0x20008c60
 800f500:	20008c64 	.word	0x20008c64
 800f504:	20008c50 	.word	0x20008c50
 800f508:	20008c6a 	.word	0x20008c6a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f510:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	f7fc feb8 	bl	800c29c <pbuf_clen>
 800f52c:	4603      	mov	r3, r0
 800f52e:	429c      	cmp	r4, r3
 800f530:	d206      	bcs.n	800f540 <tcp_receive+0x304>
 800f532:	4b70      	ldr	r3, [pc, #448]	; (800f6f4 <tcp_receive+0x4b8>)
 800f534:	f240 429e 	movw	r2, #1182	; 0x49e
 800f538:	496f      	ldr	r1, [pc, #444]	; (800f6f8 <tcp_receive+0x4bc>)
 800f53a:	4870      	ldr	r0, [pc, #448]	; (800f6fc <tcp_receive+0x4c0>)
 800f53c:	f007 fb24 	bl	8016b88 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4618      	mov	r0, r3
 800f546:	f7fc fea9 	bl	800c29c <pbuf_clen>
 800f54a:	4603      	mov	r3, r0
 800f54c:	461a      	mov	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f554:	1a9b      	subs	r3, r3, r2
 800f556:	b29a      	uxth	r2, r3
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f560:	891a      	ldrh	r2, [r3, #8]
 800f562:	4b67      	ldr	r3, [pc, #412]	; (800f700 <tcp_receive+0x4c4>)
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	4413      	add	r3, r2
 800f568:	b29a      	uxth	r2, r3
 800f56a:	4b65      	ldr	r3, [pc, #404]	; (800f700 <tcp_receive+0x4c4>)
 800f56c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f56e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f570:	f7fe f935 	bl	800d7de <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00e      	beq.n	800f59c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10a      	bne.n	800f59c <tcp_receive+0x360>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d106      	bne.n	800f59c <tcp_receive+0x360>
 800f58e:	4b59      	ldr	r3, [pc, #356]	; (800f6f4 <tcp_receive+0x4b8>)
 800f590:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800f594:	495b      	ldr	r1, [pc, #364]	; (800f704 <tcp_receive+0x4c8>)
 800f596:	4859      	ldr	r0, [pc, #356]	; (800f6fc <tcp_receive+0x4c0>)
 800f598:	f007 faf6 	bl	8016b88 <iprintf>
      while (pcb->unacked != NULL &&
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d022      	beq.n	800f5ea <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fb fc11 	bl	800add4 <lwip_htonl>
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5b8:	891b      	ldrh	r3, [r3, #8]
 800f5ba:	461d      	mov	r5, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5c0:	68db      	ldr	r3, [r3, #12]
 800f5c2:	899b      	ldrh	r3, [r3, #12]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fb fbf6 	bl	800adb8 <lwip_htons>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	f003 0303 	and.w	r3, r3, #3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <tcp_receive+0x39e>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e000      	b.n	800f5dc <tcp_receive+0x3a0>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	442b      	add	r3, r5
 800f5de:	18e2      	adds	r2, r4, r3
 800f5e0:	4b49      	ldr	r3, [pc, #292]	; (800f708 <tcp_receive+0x4cc>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	dd90      	ble.n	800f50c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d104      	bne.n	800f5fc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5f8:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5fa:	e002      	b.n	800f602 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2200      	movs	r2, #0
 800f600:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	76da      	strb	r2, [r3, #27]
 800f608:	e002      	b.n	800f610 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f001 fd30 	bl	8011070 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f610:	e04f      	b.n	800f6b2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f626:	2b00      	cmp	r3, #0
 800f628:	d103      	bne.n	800f632 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fc fe2d 	bl	800c29c <pbuf_clen>
 800f642:	4603      	mov	r3, r0
 800f644:	429c      	cmp	r4, r3
 800f646:	d206      	bcs.n	800f656 <tcp_receive+0x41a>
 800f648:	4b2a      	ldr	r3, [pc, #168]	; (800f6f4 <tcp_receive+0x4b8>)
 800f64a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f64e:	492a      	ldr	r1, [pc, #168]	; (800f6f8 <tcp_receive+0x4bc>)
 800f650:	482a      	ldr	r0, [pc, #168]	; (800f6fc <tcp_receive+0x4c0>)
 800f652:	f007 fa99 	bl	8016b88 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fc fe1e 	bl	800c29c <pbuf_clen>
 800f660:	4603      	mov	r3, r0
 800f662:	461a      	mov	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f66a:	1a9b      	subs	r3, r3, r2
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800f674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f676:	891a      	ldrh	r2, [r3, #8]
 800f678:	4b21      	ldr	r3, [pc, #132]	; (800f700 <tcp_receive+0x4c4>)
 800f67a:	881b      	ldrh	r3, [r3, #0]
 800f67c:	4413      	add	r3, r2
 800f67e:	b29a      	uxth	r2, r3
 800f680:	4b1f      	ldr	r3, [pc, #124]	; (800f700 <tcp_receive+0x4c4>)
 800f682:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f686:	f7fe f8aa 	bl	800d7de <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f690:	2b00      	cmp	r3, #0
 800f692:	d00e      	beq.n	800f6b2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10a      	bne.n	800f6b2 <tcp_receive+0x476>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d106      	bne.n	800f6b2 <tcp_receive+0x476>
 800f6a4:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <tcp_receive+0x4b8>)
 800f6a6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800f6aa:	4916      	ldr	r1, [pc, #88]	; (800f704 <tcp_receive+0x4c8>)
 800f6ac:	4813      	ldr	r0, [pc, #76]	; (800f6fc <tcp_receive+0x4c0>)
 800f6ae:	f007 fa6b 	bl	8016b88 <iprintf>
    while (pcb->unsent != NULL &&
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d036      	beq.n	800f728 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f6ba:	4b13      	ldr	r3, [pc, #76]	; (800f708 <tcp_receive+0x4cc>)
 800f6bc:	681c      	ldr	r4, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fb fb84 	bl	800add4 <lwip_htonl>
 800f6cc:	4605      	mov	r5, r0
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6d2:	891b      	ldrh	r3, [r3, #8]
 800f6d4:	461e      	mov	r6, r3
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	899b      	ldrh	r3, [r3, #12]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fb fb69 	bl	800adb8 <lwip_htons>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f003 0303 	and.w	r3, r3, #3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00d      	beq.n	800f70c <tcp_receive+0x4d0>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e00c      	b.n	800f70e <tcp_receive+0x4d2>
 800f6f4:	08019950 	.word	0x08019950
 800f6f8:	08019b90 	.word	0x08019b90
 800f6fc:	08019994 	.word	0x08019994
 800f700:	20008c68 	.word	0x20008c68
 800f704:	08019bb8 	.word	0x08019bb8
 800f708:	20008c64 	.word	0x20008c64
 800f70c:	2300      	movs	r3, #0
 800f70e:	4433      	add	r3, r6
 800f710:	442b      	add	r3, r5
 800f712:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f714:	2b00      	cmp	r3, #0
 800f716:	db07      	blt.n	800f728 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f718:	4b8d      	ldr	r3, [pc, #564]	; (800f950 <tcp_receive+0x714>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	f77f af75 	ble.w	800f612 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f72e:	4b89      	ldr	r3, [pc, #548]	; (800f954 <tcp_receive+0x718>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	4413      	add	r3, r2
 800f734:	b29a      	uxth	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f740:	2b00      	cmp	r3, #0
 800f742:	d052      	beq.n	800f7ea <tcp_receive+0x5ae>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f748:	4b81      	ldr	r3, [pc, #516]	; (800f950 <tcp_receive+0x714>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	2b00      	cmp	r3, #0
 800f750:	da4b      	bge.n	800f7ea <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f752:	4b81      	ldr	r3, [pc, #516]	; (800f958 <tcp_receive+0x71c>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	b29a      	uxth	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	1ad3      	subs	r3, r2, r3
 800f760:	b29b      	uxth	r3, r3
 800f762:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f764:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f76c:	10db      	asrs	r3, r3, #3
 800f76e:	b21b      	sxth	r3, r3
 800f770:	b29b      	uxth	r3, r3
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	b29b      	uxth	r3, r3
 800f776:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f77e:	b29a      	uxth	r2, r3
 800f780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f782:	4413      	add	r3, r2
 800f784:	b29b      	uxth	r3, r3
 800f786:	b21a      	sxth	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f78c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f790:	2b00      	cmp	r3, #0
 800f792:	da03      	bge.n	800f79c <tcp_receive+0x560>
        m = -m;
 800f794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f796:	425b      	negs	r3, r3
 800f798:	b29b      	uxth	r3, r3
 800f79a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800f79c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7a4:	109b      	asrs	r3, r3, #2
 800f7a6:	b21b      	sxth	r3, r3
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7ba:	4413      	add	r3, r2
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	b21a      	sxth	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ca:	10db      	asrs	r3, r3, #3
 800f7cc:	b21b      	sxth	r3, r3
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	4413      	add	r3, r2
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	b21a      	sxth	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f7ea:	4b5c      	ldr	r3, [pc, #368]	; (800f95c <tcp_receive+0x720>)
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 84f1 	beq.w	80101d6 <tcp_receive+0xf9a>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	7d1b      	ldrb	r3, [r3, #20]
 800f7f8:	2b06      	cmp	r3, #6
 800f7fa:	f200 84ec 	bhi.w	80101d6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f802:	4b57      	ldr	r3, [pc, #348]	; (800f960 <tcp_receive+0x724>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	3b01      	subs	r3, #1
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f2c0 80b8 	blt.w	800f980 <tcp_receive+0x744>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f814:	4b51      	ldr	r3, [pc, #324]	; (800f95c <tcp_receive+0x720>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	4619      	mov	r1, r3
 800f81a:	4b51      	ldr	r3, [pc, #324]	; (800f960 <tcp_receive+0x724>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	440b      	add	r3, r1
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	3301      	adds	r3, #1
 800f824:	2b00      	cmp	r3, #0
 800f826:	f300 80ab 	bgt.w	800f980 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f82a:	4b4e      	ldr	r3, [pc, #312]	; (800f964 <tcp_receive+0x728>)
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f834:	4b4a      	ldr	r3, [pc, #296]	; (800f960 <tcp_receive+0x724>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f83c:	4b49      	ldr	r3, [pc, #292]	; (800f964 <tcp_receive+0x728>)
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d106      	bne.n	800f852 <tcp_receive+0x616>
 800f844:	4b48      	ldr	r3, [pc, #288]	; (800f968 <tcp_receive+0x72c>)
 800f846:	f240 523c 	movw	r2, #1340	; 0x53c
 800f84a:	4948      	ldr	r1, [pc, #288]	; (800f96c <tcp_receive+0x730>)
 800f84c:	4848      	ldr	r0, [pc, #288]	; (800f970 <tcp_receive+0x734>)
 800f84e:	f007 f99b 	bl	8016b88 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f858:	4293      	cmp	r3, r2
 800f85a:	dd06      	ble.n	800f86a <tcp_receive+0x62e>
 800f85c:	4b42      	ldr	r3, [pc, #264]	; (800f968 <tcp_receive+0x72c>)
 800f85e:	f240 523d 	movw	r2, #1341	; 0x53d
 800f862:	4944      	ldr	r1, [pc, #272]	; (800f974 <tcp_receive+0x738>)
 800f864:	4842      	ldr	r0, [pc, #264]	; (800f970 <tcp_receive+0x734>)
 800f866:	f007 f98f 	bl	8016b88 <iprintf>
      if (inseg.p->len < off) {
 800f86a:	4b3e      	ldr	r3, [pc, #248]	; (800f964 <tcp_receive+0x728>)
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	895b      	ldrh	r3, [r3, #10]
 800f870:	461a      	mov	r2, r3
 800f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f874:	4293      	cmp	r3, r2
 800f876:	dd3e      	ble.n	800f8f6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f878:	4b3a      	ldr	r3, [pc, #232]	; (800f964 <tcp_receive+0x728>)
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	891b      	ldrh	r3, [r3, #8]
 800f87e:	461a      	mov	r2, r3
 800f880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f882:	4293      	cmp	r3, r2
 800f884:	dd06      	ble.n	800f894 <tcp_receive+0x658>
 800f886:	4b38      	ldr	r3, [pc, #224]	; (800f968 <tcp_receive+0x72c>)
 800f888:	f240 523f 	movw	r2, #1343	; 0x53f
 800f88c:	493a      	ldr	r1, [pc, #232]	; (800f978 <tcp_receive+0x73c>)
 800f88e:	4838      	ldr	r0, [pc, #224]	; (800f970 <tcp_receive+0x734>)
 800f890:	f007 f97a 	bl	8016b88 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f894:	4b33      	ldr	r3, [pc, #204]	; (800f964 <tcp_receive+0x728>)
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	891a      	ldrh	r2, [r3, #8]
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	1ad3      	subs	r3, r2, r3
 800f8a0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800f8a2:	e00e      	b.n	800f8c2 <tcp_receive+0x686>
          off -= p->len;
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	895b      	ldrh	r3, [r3, #10]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ac:	1a9b      	subs	r3, r3, r2
 800f8ae:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	8a3a      	ldrh	r2, [r7, #16]
 800f8b4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	895b      	ldrh	r3, [r3, #10]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	dcea      	bgt.n	800f8a4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	425b      	negs	r3, r3
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	b21b      	sxth	r3, r3
 800f8d8:	4619      	mov	r1, r3
 800f8da:	69b8      	ldr	r0, [r7, #24]
 800f8dc:	f7fc fc20 	bl	800c120 <pbuf_header>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d01c      	beq.n	800f920 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f8e6:	4b20      	ldr	r3, [pc, #128]	; (800f968 <tcp_receive+0x72c>)
 800f8e8:	f240 524c 	movw	r2, #1356	; 0x54c
 800f8ec:	4923      	ldr	r1, [pc, #140]	; (800f97c <tcp_receive+0x740>)
 800f8ee:	4820      	ldr	r0, [pc, #128]	; (800f970 <tcp_receive+0x734>)
 800f8f0:	f007 f94a 	bl	8016b88 <iprintf>
 800f8f4:	e014      	b.n	800f920 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800f8f6:	4b1b      	ldr	r3, [pc, #108]	; (800f964 <tcp_receive+0x728>)
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8fc:	b292      	uxth	r2, r2
 800f8fe:	4252      	negs	r2, r2
 800f900:	b292      	uxth	r2, r2
 800f902:	b212      	sxth	r2, r2
 800f904:	4611      	mov	r1, r2
 800f906:	4618      	mov	r0, r3
 800f908:	f7fc fc0a 	bl	800c120 <pbuf_header>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d006      	beq.n	800f920 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f912:	4b15      	ldr	r3, [pc, #84]	; (800f968 <tcp_receive+0x72c>)
 800f914:	f240 5251 	movw	r2, #1361	; 0x551
 800f918:	4918      	ldr	r1, [pc, #96]	; (800f97c <tcp_receive+0x740>)
 800f91a:	4815      	ldr	r0, [pc, #84]	; (800f970 <tcp_receive+0x734>)
 800f91c:	f007 f934 	bl	8016b88 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800f920:	4b10      	ldr	r3, [pc, #64]	; (800f964 <tcp_receive+0x728>)
 800f922:	891a      	ldrh	r2, [r3, #8]
 800f924:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <tcp_receive+0x724>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	b299      	uxth	r1, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92e:	b29b      	uxth	r3, r3
 800f930:	1acb      	subs	r3, r1, r3
 800f932:	b29b      	uxth	r3, r3
 800f934:	4413      	add	r3, r2
 800f936:	b29a      	uxth	r2, r3
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <tcp_receive+0x728>)
 800f93a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f940:	4a07      	ldr	r2, [pc, #28]	; (800f960 <tcp_receive+0x724>)
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	4b07      	ldr	r3, [pc, #28]	; (800f964 <tcp_receive+0x728>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	4a05      	ldr	r2, [pc, #20]	; (800f960 <tcp_receive+0x724>)
 800f94a:	6812      	ldr	r2, [r2, #0]
 800f94c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f94e:	e025      	b.n	800f99c <tcp_receive+0x760>
 800f950:	20008c64 	.word	0x20008c64
 800f954:	20008c68 	.word	0x20008c68
 800f958:	2000fad8 	.word	0x2000fad8
 800f95c:	20008c6a 	.word	0x20008c6a
 800f960:	20008c60 	.word	0x20008c60
 800f964:	20008c40 	.word	0x20008c40
 800f968:	08019950 	.word	0x08019950
 800f96c:	08019bd8 	.word	0x08019bd8
 800f970:	08019994 	.word	0x08019994
 800f974:	08019be8 	.word	0x08019be8
 800f978:	08019bf8 	.word	0x08019bf8
 800f97c:	08019c08 	.word	0x08019c08
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f980:	4b87      	ldr	r3, [pc, #540]	; (800fba0 <tcp_receive+0x964>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	da06      	bge.n	800f99c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	7e9b      	ldrb	r3, [r3, #26]
 800f992:	f043 0302 	orr.w	r3, r3, #2
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f99c:	4b80      	ldr	r3, [pc, #512]	; (800fba0 <tcp_receive+0x964>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f2c0 8410 	blt.w	80101cc <tcp_receive+0xf90>
 800f9ac:	4b7c      	ldr	r3, [pc, #496]	; (800fba0 <tcp_receive+0x964>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9b8:	440b      	add	r3, r1
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	3301      	adds	r3, #1
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f300 8404 	bgt.w	80101cc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9c8:	4b75      	ldr	r3, [pc, #468]	; (800fba0 <tcp_receive+0x964>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	f040 8287 	bne.w	800fee0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9d2:	4b74      	ldr	r3, [pc, #464]	; (800fba4 <tcp_receive+0x968>)
 800f9d4:	891c      	ldrh	r4, [r3, #8]
 800f9d6:	4b73      	ldr	r3, [pc, #460]	; (800fba4 <tcp_receive+0x968>)
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	899b      	ldrh	r3, [r3, #12]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fb f9ea 	bl	800adb8 <lwip_htons>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f003 0303 	and.w	r3, r3, #3
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <tcp_receive+0x7b6>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e000      	b.n	800f9f4 <tcp_receive+0x7b8>
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	4423      	add	r3, r4
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	4b6b      	ldr	r3, [pc, #428]	; (800fba8 <tcp_receive+0x96c>)
 800f9fa:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa00:	4b69      	ldr	r3, [pc, #420]	; (800fba8 <tcp_receive+0x96c>)
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d26e      	bcs.n	800fae6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa08:	4b66      	ldr	r3, [pc, #408]	; (800fba4 <tcp_receive+0x968>)
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	899b      	ldrh	r3, [r3, #12]
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fb f9d1 	bl	800adb8 <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	f003 0301 	and.w	r3, r3, #1
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d01b      	beq.n	800fa58 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fa20:	4b60      	ldr	r3, [pc, #384]	; (800fba4 <tcp_receive+0x968>)
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	899b      	ldrh	r3, [r3, #12]
 800fa26:	b29b      	uxth	r3, r3
 800fa28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa2c:	b29c      	uxth	r4, r3
 800fa2e:	4b5d      	ldr	r3, [pc, #372]	; (800fba4 <tcp_receive+0x968>)
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	899b      	ldrh	r3, [r3, #12]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fb f9be 	bl	800adb8 <lwip_htons>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fb f9b7 	bl	800adb8 <lwip_htons>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4b55      	ldr	r3, [pc, #340]	; (800fba4 <tcp_receive+0x968>)
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	4322      	orrs	r2, r4
 800fa54:	b292      	uxth	r2, r2
 800fa56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa5c:	4b51      	ldr	r3, [pc, #324]	; (800fba4 <tcp_receive+0x968>)
 800fa5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa60:	4b50      	ldr	r3, [pc, #320]	; (800fba4 <tcp_receive+0x968>)
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	899b      	ldrh	r3, [r3, #12]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fb f9a5 	bl	800adb8 <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	f003 0302 	and.w	r3, r3, #2
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d005      	beq.n	800fa84 <tcp_receive+0x848>
            inseg.len -= 1;
 800fa78:	4b4a      	ldr	r3, [pc, #296]	; (800fba4 <tcp_receive+0x968>)
 800fa7a:	891b      	ldrh	r3, [r3, #8]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	4b48      	ldr	r3, [pc, #288]	; (800fba4 <tcp_receive+0x968>)
 800fa82:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa84:	4b47      	ldr	r3, [pc, #284]	; (800fba4 <tcp_receive+0x968>)
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	4b46      	ldr	r3, [pc, #280]	; (800fba4 <tcp_receive+0x968>)
 800fa8a:	891b      	ldrh	r3, [r3, #8]
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	4610      	mov	r0, r2
 800fa90:	f7fc f9f6 	bl	800be80 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa94:	4b43      	ldr	r3, [pc, #268]	; (800fba4 <tcp_receive+0x968>)
 800fa96:	891c      	ldrh	r4, [r3, #8]
 800fa98:	4b42      	ldr	r3, [pc, #264]	; (800fba4 <tcp_receive+0x968>)
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	899b      	ldrh	r3, [r3, #12]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fb f989 	bl	800adb8 <lwip_htons>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f003 0303 	and.w	r3, r3, #3
 800faac:	2b00      	cmp	r3, #0
 800faae:	d001      	beq.n	800fab4 <tcp_receive+0x878>
 800fab0:	2301      	movs	r3, #1
 800fab2:	e000      	b.n	800fab6 <tcp_receive+0x87a>
 800fab4:	2300      	movs	r3, #0
 800fab6:	4423      	add	r3, r4
 800fab8:	b29a      	uxth	r2, r3
 800faba:	4b3b      	ldr	r3, [pc, #236]	; (800fba8 <tcp_receive+0x96c>)
 800fabc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fabe:	4b3a      	ldr	r3, [pc, #232]	; (800fba8 <tcp_receive+0x96c>)
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	461a      	mov	r2, r3
 800fac4:	4b36      	ldr	r3, [pc, #216]	; (800fba0 <tcp_receive+0x964>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	441a      	add	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fad2:	440b      	add	r3, r1
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d006      	beq.n	800fae6 <tcp_receive+0x8aa>
 800fad8:	4b34      	ldr	r3, [pc, #208]	; (800fbac <tcp_receive+0x970>)
 800fada:	f240 527f 	movw	r2, #1407	; 0x57f
 800fade:	4934      	ldr	r1, [pc, #208]	; (800fbb0 <tcp_receive+0x974>)
 800fae0:	4834      	ldr	r0, [pc, #208]	; (800fbb4 <tcp_receive+0x978>)
 800fae2:	f007 f851 	bl	8016b88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 80e1 	beq.w	800fcb2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800faf0:	4b2c      	ldr	r3, [pc, #176]	; (800fba4 <tcp_receive+0x968>)
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	899b      	ldrh	r3, [r3, #12]
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fb f95d 	bl	800adb8 <lwip_htons>
 800fafe:	4603      	mov	r3, r0
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d010      	beq.n	800fb2a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fb08:	e00a      	b.n	800fb20 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb0e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800fb1a:	68b8      	ldr	r0, [r7, #8]
 800fb1c:	f7fd fe5f 	bl	800d7de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1f0      	bne.n	800fb0a <tcp_receive+0x8ce>
 800fb28:	e0c3      	b.n	800fcb2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb30:	e04f      	b.n	800fbd2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fb f93c 	bl	800adb8 <lwip_htons>
 800fb40:	4603      	mov	r3, r0
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d03b      	beq.n	800fbc2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb4a:	4b16      	ldr	r3, [pc, #88]	; (800fba4 <tcp_receive+0x968>)
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	899b      	ldrh	r3, [r3, #12]
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7fb f930 	bl	800adb8 <lwip_htons>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d12f      	bne.n	800fbc2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb62:	4b10      	ldr	r3, [pc, #64]	; (800fba4 <tcp_receive+0x968>)
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	899b      	ldrh	r3, [r3, #12]
 800fb68:	b29c      	uxth	r4, r3
 800fb6a:	2001      	movs	r0, #1
 800fb6c:	f7fb f924 	bl	800adb8 <lwip_htons>
 800fb70:	4603      	mov	r3, r0
 800fb72:	461a      	mov	r2, r3
 800fb74:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <tcp_receive+0x968>)
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	4322      	orrs	r2, r4
 800fb7a:	b292      	uxth	r2, r2
 800fb7c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb7e:	4b09      	ldr	r3, [pc, #36]	; (800fba4 <tcp_receive+0x968>)
 800fb80:	891c      	ldrh	r4, [r3, #8]
 800fb82:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <tcp_receive+0x968>)
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	899b      	ldrh	r3, [r3, #12]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fb f914 	bl	800adb8 <lwip_htons>
 800fb90:	4603      	mov	r3, r0
 800fb92:	f003 0303 	and.w	r3, r3, #3
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d00e      	beq.n	800fbb8 <tcp_receive+0x97c>
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e00d      	b.n	800fbba <tcp_receive+0x97e>
 800fb9e:	bf00      	nop
 800fba0:	20008c60 	.word	0x20008c60
 800fba4:	20008c40 	.word	0x20008c40
 800fba8:	20008c6a 	.word	0x20008c6a
 800fbac:	08019950 	.word	0x08019950
 800fbb0:	08019c1c 	.word	0x08019c1c
 800fbb4:	08019994 	.word	0x08019994
 800fbb8:	2300      	movs	r3, #0
 800fbba:	4423      	add	r3, r4
 800fbbc:	b29a      	uxth	r2, r3
 800fbbe:	4b95      	ldr	r3, [pc, #596]	; (800fe14 <tcp_receive+0xbd8>)
 800fbc0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800fbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbce:	f7fd fe06 	bl	800d7de <tcp_seg_free>
            while (next &&
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00e      	beq.n	800fbf6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbd8:	4b8e      	ldr	r3, [pc, #568]	; (800fe14 <tcp_receive+0xbd8>)
 800fbda:	881b      	ldrh	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4b8e      	ldr	r3, [pc, #568]	; (800fe18 <tcp_receive+0xbdc>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbec:	8909      	ldrh	r1, [r1, #8]
 800fbee:	440b      	add	r3, r1
 800fbf0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	da9d      	bge.n	800fb32 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d057      	beq.n	800fcac <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800fbfc:	4b85      	ldr	r3, [pc, #532]	; (800fe14 <tcp_receive+0xbd8>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b85      	ldr	r3, [pc, #532]	; (800fe18 <tcp_receive+0xbdc>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	441a      	add	r2, r3
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	dd4b      	ble.n	800fcac <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	4b7e      	ldr	r3, [pc, #504]	; (800fe18 <tcp_receive+0xbdc>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	4b7d      	ldr	r3, [pc, #500]	; (800fe1c <tcp_receive+0xbe0>)
 800fc28:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc2a:	4b7c      	ldr	r3, [pc, #496]	; (800fe1c <tcp_receive+0xbe0>)
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fb f8c0 	bl	800adb8 <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f003 0302 	and.w	r3, r3, #2
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d005      	beq.n	800fc4e <tcp_receive+0xa12>
                inseg.len -= 1;
 800fc42:	4b76      	ldr	r3, [pc, #472]	; (800fe1c <tcp_receive+0xbe0>)
 800fc44:	891b      	ldrh	r3, [r3, #8]
 800fc46:	3b01      	subs	r3, #1
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	4b74      	ldr	r3, [pc, #464]	; (800fe1c <tcp_receive+0xbe0>)
 800fc4c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc4e:	4b73      	ldr	r3, [pc, #460]	; (800fe1c <tcp_receive+0xbe0>)
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	4b72      	ldr	r3, [pc, #456]	; (800fe1c <tcp_receive+0xbe0>)
 800fc54:	891b      	ldrh	r3, [r3, #8]
 800fc56:	4619      	mov	r1, r3
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7fc f911 	bl	800be80 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc5e:	4b6f      	ldr	r3, [pc, #444]	; (800fe1c <tcp_receive+0xbe0>)
 800fc60:	891c      	ldrh	r4, [r3, #8]
 800fc62:	4b6e      	ldr	r3, [pc, #440]	; (800fe1c <tcp_receive+0xbe0>)
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	899b      	ldrh	r3, [r3, #12]
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fb f8a4 	bl	800adb8 <lwip_htons>
 800fc70:	4603      	mov	r3, r0
 800fc72:	f003 0303 	and.w	r3, r3, #3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <tcp_receive+0xa42>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e000      	b.n	800fc80 <tcp_receive+0xa44>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	4423      	add	r3, r4
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	4b63      	ldr	r3, [pc, #396]	; (800fe14 <tcp_receive+0xbd8>)
 800fc86:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc88:	4b62      	ldr	r3, [pc, #392]	; (800fe14 <tcp_receive+0xbd8>)
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	461a      	mov	r2, r3
 800fc8e:	4b62      	ldr	r3, [pc, #392]	; (800fe18 <tcp_receive+0xbdc>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	441a      	add	r2, r3
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d006      	beq.n	800fcac <tcp_receive+0xa70>
 800fc9e:	4b60      	ldr	r3, [pc, #384]	; (800fe20 <tcp_receive+0xbe4>)
 800fca0:	f240 52af 	movw	r2, #1455	; 0x5af
 800fca4:	495f      	ldr	r1, [pc, #380]	; (800fe24 <tcp_receive+0xbe8>)
 800fca6:	4860      	ldr	r0, [pc, #384]	; (800fe28 <tcp_receive+0xbec>)
 800fca8:	f006 ff6e 	bl	8016b88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fcb2:	4b58      	ldr	r3, [pc, #352]	; (800fe14 <tcp_receive+0xbd8>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4b57      	ldr	r3, [pc, #348]	; (800fe18 <tcp_receive+0xbdc>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	441a      	add	r2, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcc6:	4b53      	ldr	r3, [pc, #332]	; (800fe14 <tcp_receive+0xbd8>)
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d206      	bcs.n	800fcdc <tcp_receive+0xaa0>
 800fcce:	4b54      	ldr	r3, [pc, #336]	; (800fe20 <tcp_receive+0xbe4>)
 800fcd0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fcd4:	4955      	ldr	r1, [pc, #340]	; (800fe2c <tcp_receive+0xbf0>)
 800fcd6:	4854      	ldr	r0, [pc, #336]	; (800fe28 <tcp_receive+0xbec>)
 800fcd8:	f006 ff56 	bl	8016b88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fce0:	4b4c      	ldr	r3, [pc, #304]	; (800fe14 <tcp_receive+0xbd8>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7fd f8e9 	bl	800cec4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcf2:	4b4a      	ldr	r3, [pc, #296]	; (800fe1c <tcp_receive+0xbe0>)
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	891b      	ldrh	r3, [r3, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d006      	beq.n	800fd0a <tcp_receive+0xace>
          recv_data = inseg.p;
 800fcfc:	4b47      	ldr	r3, [pc, #284]	; (800fe1c <tcp_receive+0xbe0>)
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	4a4b      	ldr	r2, [pc, #300]	; (800fe30 <tcp_receive+0xbf4>)
 800fd02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fd04:	4b45      	ldr	r3, [pc, #276]	; (800fe1c <tcp_receive+0xbe0>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd0a:	4b44      	ldr	r3, [pc, #272]	; (800fe1c <tcp_receive+0xbe0>)
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	899b      	ldrh	r3, [r3, #12]
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fb f850 	bl	800adb8 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	f003 0301 	and.w	r3, r3, #1
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 80b4 	beq.w	800fe8c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd24:	4b43      	ldr	r3, [pc, #268]	; (800fe34 <tcp_receive+0xbf8>)
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f043 0320 	orr.w	r3, r3, #32
 800fd2c:	b2da      	uxtb	r2, r3
 800fd2e:	4b41      	ldr	r3, [pc, #260]	; (800fe34 <tcp_receive+0xbf8>)
 800fd30:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd32:	e0ab      	b.n	800fe8c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd38:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	4a35      	ldr	r2, [pc, #212]	; (800fe18 <tcp_receive+0xbdc>)
 800fd44:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	891b      	ldrh	r3, [r3, #8]
 800fd4a:	461c      	mov	r4, r3
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	899b      	ldrh	r3, [r3, #12]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fb f82f 	bl	800adb8 <lwip_htons>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	f003 0303 	and.w	r3, r3, #3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d001      	beq.n	800fd68 <tcp_receive+0xb2c>
 800fd64:	2301      	movs	r3, #1
 800fd66:	e000      	b.n	800fd6a <tcp_receive+0xb2e>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	191a      	adds	r2, r3, r4
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd70:	441a      	add	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	891b      	ldrh	r3, [r3, #8]
 800fd80:	461d      	mov	r5, r3
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	68db      	ldr	r3, [r3, #12]
 800fd86:	899b      	ldrh	r3, [r3, #12]
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7fb f814 	bl	800adb8 <lwip_htons>
 800fd90:	4603      	mov	r3, r0
 800fd92:	f003 0303 	and.w	r3, r3, #3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <tcp_receive+0xb62>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e000      	b.n	800fda0 <tcp_receive+0xb64>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	442b      	add	r3, r5
 800fda2:	429c      	cmp	r4, r3
 800fda4:	d206      	bcs.n	800fdb4 <tcp_receive+0xb78>
 800fda6:	4b1e      	ldr	r3, [pc, #120]	; (800fe20 <tcp_receive+0xbe4>)
 800fda8:	f240 52de 	movw	r2, #1502	; 0x5de
 800fdac:	4922      	ldr	r1, [pc, #136]	; (800fe38 <tcp_receive+0xbfc>)
 800fdae:	481e      	ldr	r0, [pc, #120]	; (800fe28 <tcp_receive+0xbec>)
 800fdb0:	f006 feea 	bl	8016b88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	891b      	ldrh	r3, [r3, #8]
 800fdb8:	461c      	mov	r4, r3
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	899b      	ldrh	r3, [r3, #12]
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fa fff8 	bl	800adb8 <lwip_htons>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	f003 0303 	and.w	r3, r3, #3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d001      	beq.n	800fdd6 <tcp_receive+0xb9a>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e000      	b.n	800fdd8 <tcp_receive+0xb9c>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	1919      	adds	r1, r3, r4
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdde:	b28b      	uxth	r3, r1
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7fd f86b 	bl	800cec4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	891b      	ldrh	r3, [r3, #8]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d028      	beq.n	800fe4a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fdf8:	4b0d      	ldr	r3, [pc, #52]	; (800fe30 <tcp_receive+0xbf4>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d01d      	beq.n	800fe3c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800fe00:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <tcp_receive+0xbf4>)
 800fe02:	681a      	ldr	r2, [r3, #0]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	f7fc fa86 	bl	800c31c <pbuf_cat>
 800fe10:	e018      	b.n	800fe44 <tcp_receive+0xc08>
 800fe12:	bf00      	nop
 800fe14:	20008c6a 	.word	0x20008c6a
 800fe18:	20008c60 	.word	0x20008c60
 800fe1c:	20008c40 	.word	0x20008c40
 800fe20:	08019950 	.word	0x08019950
 800fe24:	08019c54 	.word	0x08019c54
 800fe28:	08019994 	.word	0x08019994
 800fe2c:	08019c90 	.word	0x08019c90
 800fe30:	20008c70 	.word	0x20008c70
 800fe34:	20008c6d 	.word	0x20008c6d
 800fe38:	08019cb0 	.word	0x08019cb0
            } else {
              recv_data = cseg->p;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	4a71      	ldr	r2, [pc, #452]	; (8010008 <tcp_receive+0xdcc>)
 800fe42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2200      	movs	r2, #0
 800fe48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	899b      	ldrh	r3, [r3, #12]
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fa ffb0 	bl	800adb8 <lwip_htons>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00d      	beq.n	800fe7e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe62:	4b6a      	ldr	r3, [pc, #424]	; (801000c <tcp_receive+0xdd0>)
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	f043 0320 	orr.w	r3, r3, #32
 800fe6a:	b2da      	uxtb	r2, r3
 800fe6c:	4b67      	ldr	r3, [pc, #412]	; (801000c <tcp_receive+0xdd0>)
 800fe6e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	7d1b      	ldrb	r3, [r3, #20]
 800fe74:	2b04      	cmp	r3, #4
 800fe76:	d102      	bne.n	800fe7e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2207      	movs	r2, #7
 800fe7c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	f7fd fca9 	bl	800d7de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d008      	beq.n	800fea6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe98:	68db      	ldr	r3, [r3, #12]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fea0:	429a      	cmp	r2, r3
 800fea2:	f43f af47 	beq.w	800fd34 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	7e9b      	ldrb	r3, [r3, #26]
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00e      	beq.n	800fed0 <tcp_receive+0xc94>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	7e9b      	ldrb	r3, [r3, #26]
 800feb6:	f023 0301 	bic.w	r3, r3, #1
 800feba:	b2da      	uxtb	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	769a      	strb	r2, [r3, #26]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	7e9b      	ldrb	r3, [r3, #26]
 800fec4:	f043 0302 	orr.w	r3, r3, #2
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fece:	e181      	b.n	80101d4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	7e9b      	ldrb	r3, [r3, #26]
 800fed4:	f043 0301 	orr.w	r3, r3, #1
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fede:	e179      	b.n	80101d4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f001 f8c5 	bl	8011070 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feea:	2b00      	cmp	r3, #0
 800feec:	d106      	bne.n	800fefc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800feee:	4848      	ldr	r0, [pc, #288]	; (8010010 <tcp_receive+0xdd4>)
 800fef0:	f7fd fc9c 	bl	800d82c <tcp_seg_copy>
 800fef4:	4602      	mov	r2, r0
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800fefa:	e16b      	b.n	80101d4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800fefc:	2300      	movs	r3, #0
 800fefe:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff06:	e150      	b.n	80101aa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	685a      	ldr	r2, [r3, #4]
 800ff0e:	4b41      	ldr	r3, [pc, #260]	; (8010014 <tcp_receive+0xdd8>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d11d      	bne.n	800ff52 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff16:	4b3e      	ldr	r3, [pc, #248]	; (8010010 <tcp_receive+0xdd4>)
 800ff18:	891a      	ldrh	r2, [r3, #8]
 800ff1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1c:	891b      	ldrh	r3, [r3, #8]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	f240 8148 	bls.w	80101b4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800ff24:	483a      	ldr	r0, [pc, #232]	; (8010010 <tcp_receive+0xdd4>)
 800ff26:	f7fd fc81 	bl	800d82c <tcp_seg_copy>
 800ff2a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	f000 8142 	beq.w	80101b8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800ff34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d003      	beq.n	800ff42 <tcp_receive+0xd06>
                    prev->next = cseg;
 800ff3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3c:	68fa      	ldr	r2, [r7, #12]
 800ff3e:	601a      	str	r2, [r3, #0]
 800ff40:	e002      	b.n	800ff48 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f7ff f900 	bl	800f150 <tcp_oos_insert_segment>
                }
                break;
 800ff50:	e132      	b.n	80101b8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d117      	bne.n	800ff88 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff58:	4b2e      	ldr	r3, [pc, #184]	; (8010014 <tcp_receive+0xdd8>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	1ad3      	subs	r3, r2, r3
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	da57      	bge.n	8010018 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800ff68:	4829      	ldr	r0, [pc, #164]	; (8010010 <tcp_receive+0xdd4>)
 800ff6a:	f7fd fc5f 	bl	800d82c <tcp_seg_copy>
 800ff6e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 8122 	beq.w	80101bc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	68fa      	ldr	r2, [r7, #12]
 800ff7c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800ff7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7ff f8e5 	bl	800f150 <tcp_oos_insert_segment>
                  }
                  break;
 800ff86:	e119      	b.n	80101bc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800ff88:	4b22      	ldr	r3, [pc, #136]	; (8010014 <tcp_receive+0xdd8>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	3b01      	subs	r3, #1
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	db3e      	blt.n	8010018 <tcp_receive+0xddc>
 800ff9a:	4b1e      	ldr	r3, [pc, #120]	; (8010014 <tcp_receive+0xdd8>)
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dc35      	bgt.n	8010018 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800ffac:	4818      	ldr	r0, [pc, #96]	; (8010010 <tcp_receive+0xdd4>)
 800ffae:	f7fd fc3d 	bl	800d82c <tcp_seg_copy>
 800ffb2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f000 8102 	beq.w	80101c0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffc4:	8912      	ldrh	r2, [r2, #8]
 800ffc6:	441a      	add	r2, r3
 800ffc8:	4b12      	ldr	r3, [pc, #72]	; (8010014 <tcp_receive+0xdd8>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	dd12      	ble.n	800fff8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffd2:	4b10      	ldr	r3, [pc, #64]	; (8010014 <tcp_receive+0xdd8>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	b29a      	uxth	r2, r3
 800ffe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffee:	891b      	ldrh	r3, [r3, #8]
 800fff0:	4619      	mov	r1, r3
 800fff2:	4610      	mov	r0, r2
 800fff4:	f7fb ff44 	bl	800be80 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff f8a5 	bl	800f150 <tcp_oos_insert_segment>
                  }
                  break;
 8010006:	e0db      	b.n	80101c0 <tcp_receive+0xf84>
 8010008:	20008c70 	.word	0x20008c70
 801000c:	20008c6d 	.word	0x20008c6d
 8010010:	20008c40 	.word	0x20008c40
 8010014:	20008c60 	.word	0x20008c60
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	f040 80bf 	bne.w	80101a0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010022:	4b7c      	ldr	r3, [pc, #496]	; (8010214 <tcp_receive+0xfd8>)
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801002e:	2b00      	cmp	r3, #0
 8010030:	f340 80b6 	ble.w	80101a0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	899b      	ldrh	r3, [r3, #12]
 801003a:	b29b      	uxth	r3, r3
 801003c:	4618      	mov	r0, r3
 801003e:	f7fa febb 	bl	800adb8 <lwip_htons>
 8010042:	4603      	mov	r3, r0
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	f040 80bb 	bne.w	80101c4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801004e:	4872      	ldr	r0, [pc, #456]	; (8010218 <tcp_receive+0xfdc>)
 8010050:	f7fd fbec 	bl	800d82c <tcp_seg_copy>
 8010054:	4602      	mov	r2, r0
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801005a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f000 80b2 	beq.w	80101c8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801006c:	8912      	ldrh	r2, [r2, #8]
 801006e:	441a      	add	r2, r3
 8010070:	4b68      	ldr	r3, [pc, #416]	; (8010214 <tcp_receive+0xfd8>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	2b00      	cmp	r3, #0
 8010078:	dd12      	ble.n	80100a0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801007a:	4b66      	ldr	r3, [pc, #408]	; (8010214 <tcp_receive+0xfd8>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	b29a      	uxth	r2, r3
 8010080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010082:	68db      	ldr	r3, [r3, #12]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	b29b      	uxth	r3, r3
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	b29a      	uxth	r2, r3
 801008c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010092:	685a      	ldr	r2, [r3, #4]
 8010094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010096:	891b      	ldrh	r3, [r3, #8]
 8010098:	4619      	mov	r1, r3
 801009a:	4610      	mov	r0, r2
 801009c:	f7fb fef0 	bl	800be80 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80100a0:	4b5e      	ldr	r3, [pc, #376]	; (801021c <tcp_receive+0xfe0>)
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	461a      	mov	r2, r3
 80100a6:	4b5b      	ldr	r3, [pc, #364]	; (8010214 <tcp_receive+0xfd8>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	441a      	add	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b0:	6879      	ldr	r1, [r7, #4]
 80100b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100b4:	440b      	add	r3, r1
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f340 8085 	ble.w	80101c8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	899b      	ldrh	r3, [r3, #12]
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fa fe75 	bl	800adb8 <lwip_htons>
 80100ce:	4603      	mov	r3, r0
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d01e      	beq.n	8010116 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	899b      	ldrh	r3, [r3, #12]
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100e6:	b29c      	uxth	r4, r3
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	899b      	ldrh	r3, [r3, #12]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fa fe60 	bl	800adb8 <lwip_htons>
 80100f8:	4603      	mov	r3, r0
 80100fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100fe:	b29b      	uxth	r3, r3
 8010100:	4618      	mov	r0, r3
 8010102:	f7fa fe59 	bl	800adb8 <lwip_htons>
 8010106:	4603      	mov	r3, r0
 8010108:	461a      	mov	r2, r3
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	4322      	orrs	r2, r4
 8010112:	b292      	uxth	r2, r2
 8010114:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011a:	b29a      	uxth	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010120:	4413      	add	r3, r2
 8010122:	b299      	uxth	r1, r3
 8010124:	4b3b      	ldr	r3, [pc, #236]	; (8010214 <tcp_receive+0xfd8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	b29a      	uxth	r2, r3
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	1a8a      	subs	r2, r1, r2
 8010130:	b292      	uxth	r2, r2
 8010132:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	4619      	mov	r1, r3
 8010142:	4610      	mov	r0, r2
 8010144:	f7fb fe9c 	bl	800be80 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	891c      	ldrh	r4, [r3, #8]
 801014e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	899b      	ldrh	r3, [r3, #12]
 8010156:	b29b      	uxth	r3, r3
 8010158:	4618      	mov	r0, r3
 801015a:	f7fa fe2d 	bl	800adb8 <lwip_htons>
 801015e:	4603      	mov	r3, r0
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	2b00      	cmp	r3, #0
 8010166:	d001      	beq.n	801016c <tcp_receive+0xf30>
 8010168:	2301      	movs	r3, #1
 801016a:	e000      	b.n	801016e <tcp_receive+0xf32>
 801016c:	2300      	movs	r3, #0
 801016e:	4423      	add	r3, r4
 8010170:	b29a      	uxth	r2, r3
 8010172:	4b2a      	ldr	r3, [pc, #168]	; (801021c <tcp_receive+0xfe0>)
 8010174:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010176:	4b29      	ldr	r3, [pc, #164]	; (801021c <tcp_receive+0xfe0>)
 8010178:	881b      	ldrh	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	4b25      	ldr	r3, [pc, #148]	; (8010214 <tcp_receive+0xfd8>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	441a      	add	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010186:	6879      	ldr	r1, [r7, #4]
 8010188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801018a:	440b      	add	r3, r1
 801018c:	429a      	cmp	r2, r3
 801018e:	d01b      	beq.n	80101c8 <tcp_receive+0xf8c>
 8010190:	4b23      	ldr	r3, [pc, #140]	; (8010220 <tcp_receive+0xfe4>)
 8010192:	f240 627b 	movw	r2, #1659	; 0x67b
 8010196:	4923      	ldr	r1, [pc, #140]	; (8010224 <tcp_receive+0xfe8>)
 8010198:	4823      	ldr	r0, [pc, #140]	; (8010228 <tcp_receive+0xfec>)
 801019a:	f006 fcf5 	bl	8016b88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801019e:	e013      	b.n	80101c8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80101a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f47f aeab 	bne.w	800ff08 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80101b2:	e00f      	b.n	80101d4 <tcp_receive+0xf98>
                break;
 80101b4:	bf00      	nop
 80101b6:	e00d      	b.n	80101d4 <tcp_receive+0xf98>
                break;
 80101b8:	bf00      	nop
 80101ba:	e00b      	b.n	80101d4 <tcp_receive+0xf98>
                  break;
 80101bc:	bf00      	nop
 80101be:	e009      	b.n	80101d4 <tcp_receive+0xf98>
                  break;
 80101c0:	bf00      	nop
 80101c2:	e007      	b.n	80101d4 <tcp_receive+0xf98>
                  break;
 80101c4:	bf00      	nop
 80101c6:	e005      	b.n	80101d4 <tcp_receive+0xf98>
                break;
 80101c8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80101ca:	e003      	b.n	80101d4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101cc:	6878      	ldr	r0, [r7, #4]
 80101ce:	f000 ff4f 	bl	8011070 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101d2:	e01a      	b.n	801020a <tcp_receive+0xfce>
 80101d4:	e019      	b.n	801020a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101d6:	4b0f      	ldr	r3, [pc, #60]	; (8010214 <tcp_receive+0xfd8>)
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	db0a      	blt.n	80101fa <tcp_receive+0xfbe>
 80101e4:	4b0b      	ldr	r3, [pc, #44]	; (8010214 <tcp_receive+0xfd8>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ec:	6879      	ldr	r1, [r7, #4]
 80101ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101f0:	440b      	add	r3, r1
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	3301      	adds	r3, #1
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	dd07      	ble.n	801020a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	7e9b      	ldrb	r3, [r3, #26]
 80101fe:	f043 0302 	orr.w	r3, r3, #2
 8010202:	b2da      	uxtb	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8010208:	e7ff      	b.n	801020a <tcp_receive+0xfce>
 801020a:	bf00      	nop
 801020c:	3734      	adds	r7, #52	; 0x34
 801020e:	46bd      	mov	sp, r7
 8010210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010212:	bf00      	nop
 8010214:	20008c60 	.word	0x20008c60
 8010218:	20008c40 	.word	0x20008c40
 801021c:	20008c6a 	.word	0x20008c6a
 8010220:	08019950 	.word	0x08019950
 8010224:	08019c1c 	.word	0x08019c1c
 8010228:	08019994 	.word	0x08019994

0801022c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010232:	4b18      	ldr	r3, [pc, #96]	; (8010294 <tcp_getoptbyte+0x68>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d005      	beq.n	8010246 <tcp_getoptbyte+0x1a>
 801023a:	4b17      	ldr	r3, [pc, #92]	; (8010298 <tcp_getoptbyte+0x6c>)
 801023c:	881a      	ldrh	r2, [r3, #0]
 801023e:	4b17      	ldr	r3, [pc, #92]	; (801029c <tcp_getoptbyte+0x70>)
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	429a      	cmp	r2, r3
 8010244:	d20e      	bcs.n	8010264 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010246:	4b16      	ldr	r3, [pc, #88]	; (80102a0 <tcp_getoptbyte+0x74>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	3314      	adds	r3, #20
 801024c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801024e:	4b12      	ldr	r3, [pc, #72]	; (8010298 <tcp_getoptbyte+0x6c>)
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	b291      	uxth	r1, r2
 8010256:	4a10      	ldr	r2, [pc, #64]	; (8010298 <tcp_getoptbyte+0x6c>)
 8010258:	8011      	strh	r1, [r2, #0]
 801025a:	461a      	mov	r2, r3
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	4413      	add	r3, r2
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	e010      	b.n	8010286 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8010264:	4b0c      	ldr	r3, [pc, #48]	; (8010298 <tcp_getoptbyte+0x6c>)
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	1c5a      	adds	r2, r3, #1
 801026a:	b291      	uxth	r1, r2
 801026c:	4a0a      	ldr	r2, [pc, #40]	; (8010298 <tcp_getoptbyte+0x6c>)
 801026e:	8011      	strh	r1, [r2, #0]
 8010270:	b2da      	uxtb	r2, r3
 8010272:	4b0a      	ldr	r3, [pc, #40]	; (801029c <tcp_getoptbyte+0x70>)
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	b2db      	uxtb	r3, r3
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801027c:	4b05      	ldr	r3, [pc, #20]	; (8010294 <tcp_getoptbyte+0x68>)
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	79fb      	ldrb	r3, [r7, #7]
 8010282:	4413      	add	r3, r2
 8010284:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010286:	4618      	mov	r0, r3
 8010288:	370c      	adds	r7, #12
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	20008c58 	.word	0x20008c58
 8010298:	20008c5c 	.word	0x20008c5c
 801029c:	20008c56 	.word	0x20008c56
 80102a0:	20008c50 	.word	0x20008c50

080102a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80102ac:	4b2d      	ldr	r3, [pc, #180]	; (8010364 <tcp_parseopt+0xc0>)
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d053      	beq.n	801035c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102b4:	4b2c      	ldr	r3, [pc, #176]	; (8010368 <tcp_parseopt+0xc4>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	801a      	strh	r2, [r3, #0]
 80102ba:	e043      	b.n	8010344 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80102bc:	f7ff ffb6 	bl	801022c <tcp_getoptbyte>
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102c4:	7bfb      	ldrb	r3, [r7, #15]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d03c      	beq.n	8010344 <tcp_parseopt+0xa0>
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d002      	beq.n	80102d4 <tcp_parseopt+0x30>
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d03f      	beq.n	8010352 <tcp_parseopt+0xae>
 80102d2:	e026      	b.n	8010322 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102d4:	f7ff ffaa 	bl	801022c <tcp_getoptbyte>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b04      	cmp	r3, #4
 80102dc:	d13b      	bne.n	8010356 <tcp_parseopt+0xb2>
 80102de:	4b22      	ldr	r3, [pc, #136]	; (8010368 <tcp_parseopt+0xc4>)
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	3302      	adds	r3, #2
 80102e4:	4a1f      	ldr	r2, [pc, #124]	; (8010364 <tcp_parseopt+0xc0>)
 80102e6:	8812      	ldrh	r2, [r2, #0]
 80102e8:	4293      	cmp	r3, r2
 80102ea:	dc34      	bgt.n	8010356 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80102ec:	f7ff ff9e 	bl	801022c <tcp_getoptbyte>
 80102f0:	4603      	mov	r3, r0
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	021b      	lsls	r3, r3, #8
 80102f6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80102f8:	f7ff ff98 	bl	801022c <tcp_getoptbyte>
 80102fc:	4603      	mov	r3, r0
 80102fe:	b29a      	uxth	r2, r3
 8010300:	89bb      	ldrh	r3, [r7, #12]
 8010302:	4313      	orrs	r3, r2
 8010304:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010306:	89bb      	ldrh	r3, [r7, #12]
 8010308:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801030c:	d804      	bhi.n	8010318 <tcp_parseopt+0x74>
 801030e:	89bb      	ldrh	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d001      	beq.n	8010318 <tcp_parseopt+0x74>
 8010314:	89ba      	ldrh	r2, [r7, #12]
 8010316:	e001      	b.n	801031c <tcp_parseopt+0x78>
 8010318:	f44f 7206 	mov.w	r2, #536	; 0x218
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010320:	e010      	b.n	8010344 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010322:	f7ff ff83 	bl	801022c <tcp_getoptbyte>
 8010326:	4603      	mov	r3, r0
 8010328:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801032a:	7afb      	ldrb	r3, [r7, #11]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d914      	bls.n	801035a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010330:	7afb      	ldrb	r3, [r7, #11]
 8010332:	b29a      	uxth	r2, r3
 8010334:	4b0c      	ldr	r3, [pc, #48]	; (8010368 <tcp_parseopt+0xc4>)
 8010336:	881b      	ldrh	r3, [r3, #0]
 8010338:	4413      	add	r3, r2
 801033a:	b29b      	uxth	r3, r3
 801033c:	3b02      	subs	r3, #2
 801033e:	b29a      	uxth	r2, r3
 8010340:	4b09      	ldr	r3, [pc, #36]	; (8010368 <tcp_parseopt+0xc4>)
 8010342:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010344:	4b08      	ldr	r3, [pc, #32]	; (8010368 <tcp_parseopt+0xc4>)
 8010346:	881a      	ldrh	r2, [r3, #0]
 8010348:	4b06      	ldr	r3, [pc, #24]	; (8010364 <tcp_parseopt+0xc0>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	429a      	cmp	r2, r3
 801034e:	d3b5      	bcc.n	80102bc <tcp_parseopt+0x18>
 8010350:	e004      	b.n	801035c <tcp_parseopt+0xb8>
        return;
 8010352:	bf00      	nop
 8010354:	e002      	b.n	801035c <tcp_parseopt+0xb8>
          return;
 8010356:	bf00      	nop
 8010358:	e000      	b.n	801035c <tcp_parseopt+0xb8>
          return;
 801035a:	bf00      	nop
      }
    }
  }
}
 801035c:	3710      	adds	r7, #16
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20008c54 	.word	0x20008c54
 8010368:	20008c5c 	.word	0x20008c5c

0801036c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010370:	4b05      	ldr	r3, [pc, #20]	; (8010388 <tcp_trigger_input_pcb_close+0x1c>)
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	f043 0310 	orr.w	r3, r3, #16
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b03      	ldr	r3, [pc, #12]	; (8010388 <tcp_trigger_input_pcb_close+0x1c>)
 801037c:	701a      	strb	r2, [r3, #0]
}
 801037e:	bf00      	nop
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr
 8010388:	20008c6d 	.word	0x20008c6d

0801038c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b086      	sub	sp, #24
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	607b      	str	r3, [r7, #4]
 8010396:	460b      	mov	r3, r1
 8010398:	817b      	strh	r3, [r7, #10]
 801039a:	4613      	mov	r3, r2
 801039c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801039e:	897a      	ldrh	r2, [r7, #10]
 80103a0:	893b      	ldrh	r3, [r7, #8]
 80103a2:	4413      	add	r3, r2
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	3314      	adds	r3, #20
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	2200      	movs	r2, #0
 80103ac:	4619      	mov	r1, r3
 80103ae:	2001      	movs	r0, #1
 80103b0:	f7fb fb68 	bl	800ba84 <pbuf_alloc>
 80103b4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d057      	beq.n	801046c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	895b      	ldrh	r3, [r3, #10]
 80103c0:	461a      	mov	r2, r3
 80103c2:	897b      	ldrh	r3, [r7, #10]
 80103c4:	3314      	adds	r3, #20
 80103c6:	429a      	cmp	r2, r3
 80103c8:	da05      	bge.n	80103d6 <tcp_output_alloc_header+0x4a>
 80103ca:	4b2b      	ldr	r3, [pc, #172]	; (8010478 <tcp_output_alloc_header+0xec>)
 80103cc:	2273      	movs	r2, #115	; 0x73
 80103ce:	492b      	ldr	r1, [pc, #172]	; (801047c <tcp_output_alloc_header+0xf0>)
 80103d0:	482b      	ldr	r0, [pc, #172]	; (8010480 <tcp_output_alloc_header+0xf4>)
 80103d2:	f006 fbd9 	bl	8016b88 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	8adb      	ldrh	r3, [r3, #22]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fa fce9 	bl	800adb8 <lwip_htons>
 80103e6:	4603      	mov	r3, r0
 80103e8:	461a      	mov	r2, r3
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8b1b      	ldrh	r3, [r3, #24]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fa fce0 	bl	800adb8 <lwip_htons>
 80103f8:	4603      	mov	r3, r0
 80103fa:	461a      	mov	r2, r3
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040a:	4618      	mov	r0, r3
 801040c:	f7fa fce2 	bl	800add4 <lwip_htonl>
 8010410:	4602      	mov	r2, r0
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010416:	897b      	ldrh	r3, [r7, #10]
 8010418:	089b      	lsrs	r3, r3, #2
 801041a:	b29b      	uxth	r3, r3
 801041c:	3305      	adds	r3, #5
 801041e:	b29b      	uxth	r3, r3
 8010420:	031b      	lsls	r3, r3, #12
 8010422:	b29b      	uxth	r3, r3
 8010424:	f043 0310 	orr.w	r3, r3, #16
 8010428:	b29b      	uxth	r3, r3
 801042a:	4618      	mov	r0, r3
 801042c:	f7fa fcc4 	bl	800adb8 <lwip_htons>
 8010430:	4603      	mov	r3, r0
 8010432:	461a      	mov	r2, r3
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801043c:	4618      	mov	r0, r3
 801043e:	f7fa fcbb 	bl	800adb8 <lwip_htons>
 8010442:	4603      	mov	r3, r0
 8010444:	461a      	mov	r2, r3
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2200      	movs	r2, #0
 801044e:	741a      	strb	r2, [r3, #16]
 8010450:	2200      	movs	r2, #0
 8010452:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	2200      	movs	r2, #0
 8010458:	749a      	strb	r2, [r3, #18]
 801045a:	2200      	movs	r2, #0
 801045c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010466:	441a      	add	r2, r3
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801046c:	697b      	ldr	r3, [r7, #20]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3718      	adds	r7, #24
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	08019cd8 	.word	0x08019cd8
 801047c:	08019d0c 	.word	0x08019d0c
 8010480:	08019d3c 	.word	0x08019d3c

08010484 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010490:	2b00      	cmp	r3, #0
 8010492:	d02d      	beq.n	80104f0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010498:	60fb      	str	r3, [r7, #12]
 801049a:	e002      	b.n	80104a2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1f8      	bne.n	801049c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	899b      	ldrh	r3, [r3, #12]
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fa fc80 	bl	800adb8 <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	f003 0307 	and.w	r3, r3, #7
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d116      	bne.n	80104f0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	899b      	ldrh	r3, [r3, #12]
 80104c8:	b29c      	uxth	r4, r3
 80104ca:	2001      	movs	r0, #1
 80104cc:	f7fa fc74 	bl	800adb8 <lwip_htons>
 80104d0:	4603      	mov	r3, r0
 80104d2:	461a      	mov	r2, r3
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	4322      	orrs	r2, r4
 80104da:	b292      	uxth	r2, r2
 80104dc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7e9b      	ldrb	r3, [r3, #26]
 80104e2:	f043 0320 	orr.w	r3, r3, #32
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	e004      	b.n	80104fa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80104f0:	2101      	movs	r1, #1
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fcc0 	bl	8010e78 <tcp_enqueue_flags>
 80104f8:	4603      	mov	r3, r0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3714      	adds	r7, #20
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd90      	pop	{r4, r7, pc}
	...

08010504 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b087      	sub	sp, #28
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	603b      	str	r3, [r7, #0]
 8010510:	4613      	mov	r3, r2
 8010512:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010514:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	b2db      	uxtb	r3, r3
 801051c:	f003 0304 	and.w	r3, r3, #4
 8010520:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010522:	2003      	movs	r0, #3
 8010524:	f7fb f86c 	bl	800b600 <memp_malloc>
 8010528:	6138      	str	r0, [r7, #16]
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d104      	bne.n	801053a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010530:	68b8      	ldr	r0, [r7, #8]
 8010532:	f7fb fe19 	bl	800c168 <pbuf_free>
    return NULL;
 8010536:	2300      	movs	r3, #0
 8010538:	e061      	b.n	80105fe <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010540:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	891a      	ldrh	r2, [r3, #8]
 8010552:	7dfb      	ldrb	r3, [r7, #23]
 8010554:	b29b      	uxth	r3, r3
 8010556:	429a      	cmp	r2, r3
 8010558:	d205      	bcs.n	8010566 <tcp_create_segment+0x62>
 801055a:	4b2b      	ldr	r3, [pc, #172]	; (8010608 <tcp_create_segment+0x104>)
 801055c:	22ba      	movs	r2, #186	; 0xba
 801055e:	492b      	ldr	r1, [pc, #172]	; (801060c <tcp_create_segment+0x108>)
 8010560:	482b      	ldr	r0, [pc, #172]	; (8010610 <tcp_create_segment+0x10c>)
 8010562:	f006 fb11 	bl	8016b88 <iprintf>
  seg->len = p->tot_len - optlen;
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	891a      	ldrh	r2, [r3, #8]
 801056a:	7dfb      	ldrb	r3, [r7, #23]
 801056c:	b29b      	uxth	r3, r3
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	b29a      	uxth	r2, r3
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8010576:	2114      	movs	r1, #20
 8010578:	68b8      	ldr	r0, [r7, #8]
 801057a:	f7fb fdd1 	bl	800c120 <pbuf_header>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d004      	beq.n	801058e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010584:	6938      	ldr	r0, [r7, #16]
 8010586:	f7fd f92a 	bl	800d7de <tcp_seg_free>
    return NULL;
 801058a:	2300      	movs	r3, #0
 801058c:	e037      	b.n	80105fe <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	685a      	ldr	r2, [r3, #4]
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	8ada      	ldrh	r2, [r3, #22]
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	68dc      	ldr	r4, [r3, #12]
 80105a0:	4610      	mov	r0, r2
 80105a2:	f7fa fc09 	bl	800adb8 <lwip_htons>
 80105a6:	4603      	mov	r3, r0
 80105a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	8b1a      	ldrh	r2, [r3, #24]
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	68dc      	ldr	r4, [r3, #12]
 80105b2:	4610      	mov	r0, r2
 80105b4:	f7fa fc00 	bl	800adb8 <lwip_htons>
 80105b8:	4603      	mov	r3, r0
 80105ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	68dc      	ldr	r4, [r3, #12]
 80105c0:	6838      	ldr	r0, [r7, #0]
 80105c2:	f7fa fc07 	bl	800add4 <lwip_htonl>
 80105c6:	4603      	mov	r3, r0
 80105c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	089b      	lsrs	r3, r3, #2
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	3305      	adds	r3, #5
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	031b      	lsls	r3, r3, #12
 80105d8:	b29a      	uxth	r2, r3
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	4313      	orrs	r3, r2
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	68dc      	ldr	r4, [r3, #12]
 80105e6:	4610      	mov	r0, r2
 80105e8:	f7fa fbe6 	bl	800adb8 <lwip_htons>
 80105ec:	4603      	mov	r3, r0
 80105ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	2200      	movs	r2, #0
 80105f6:	749a      	strb	r2, [r3, #18]
 80105f8:	2200      	movs	r2, #0
 80105fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80105fc:	693b      	ldr	r3, [r7, #16]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	371c      	adds	r7, #28
 8010602:	46bd      	mov	sp, r7
 8010604:	bd90      	pop	{r4, r7, pc}
 8010606:	bf00      	nop
 8010608:	08019cd8 	.word	0x08019cd8
 801060c:	08019d64 	.word	0x08019d64
 8010610:	08019d3c 	.word	0x08019d3c

08010614 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	607b      	str	r3, [r7, #4]
 801061c:	4603      	mov	r3, r0
 801061e:	73fb      	strb	r3, [r7, #15]
 8010620:	460b      	mov	r3, r1
 8010622:	81bb      	strh	r3, [r7, #12]
 8010624:	4613      	mov	r3, r2
 8010626:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010628:	89bb      	ldrh	r3, [r7, #12]
 801062a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801062c:	89ba      	ldrh	r2, [r7, #12]
 801062e:	897b      	ldrh	r3, [r7, #10]
 8010630:	429a      	cmp	r2, r3
 8010632:	d221      	bcs.n	8010678 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010638:	f003 0302 	and.w	r3, r3, #2
 801063c:	2b00      	cmp	r3, #0
 801063e:	d111      	bne.n	8010664 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010640:	6a3b      	ldr	r3, [r7, #32]
 8010642:	7e9b      	ldrb	r3, [r3, #26]
 8010644:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010648:	2b00      	cmp	r3, #0
 801064a:	d115      	bne.n	8010678 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801064c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010650:	2b00      	cmp	r3, #0
 8010652:	d007      	beq.n	8010664 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010658:	2b00      	cmp	r3, #0
 801065a:	d103      	bne.n	8010664 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010660:	2b00      	cmp	r3, #0
 8010662:	d009      	beq.n	8010678 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010664:	89bb      	ldrh	r3, [r7, #12]
 8010666:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801066a:	f023 0203 	bic.w	r2, r3, #3
 801066e:	897b      	ldrh	r3, [r7, #10]
 8010670:	4293      	cmp	r3, r2
 8010672:	bf28      	it	cs
 8010674:	4613      	movcs	r3, r2
 8010676:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010678:	8af9      	ldrh	r1, [r7, #22]
 801067a:	7bfb      	ldrb	r3, [r7, #15]
 801067c:	2200      	movs	r2, #0
 801067e:	4618      	mov	r0, r3
 8010680:	f7fb fa00 	bl	800ba84 <pbuf_alloc>
 8010684:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d101      	bne.n	8010690 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801068c:	2300      	movs	r3, #0
 801068e:	e019      	b.n	80106c4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d006      	beq.n	80106a6 <tcp_pbuf_prealloc+0x92>
 8010698:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <tcp_pbuf_prealloc+0xb8>)
 801069a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801069e:	490c      	ldr	r1, [pc, #48]	; (80106d0 <tcp_pbuf_prealloc+0xbc>)
 80106a0:	480c      	ldr	r0, [pc, #48]	; (80106d4 <tcp_pbuf_prealloc+0xc0>)
 80106a2:	f006 fa71 	bl	8016b88 <iprintf>
  *oversize = p->len - length;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	895a      	ldrh	r2, [r3, #10]
 80106aa:	89bb      	ldrh	r3, [r7, #12]
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	89ba      	ldrh	r2, [r7, #12]
 80106b8:	811a      	strh	r2, [r3, #8]
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	891a      	ldrh	r2, [r3, #8]
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	815a      	strh	r2, [r3, #10]
  return p;
 80106c2:	693b      	ldr	r3, [r7, #16]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	08019cd8 	.word	0x08019cd8
 80106d0:	08019d7c 	.word	0x08019d7c
 80106d4:	08019d3c 	.word	0x08019d3c

080106d8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	460b      	mov	r3, r1
 80106e2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b04      	cmp	r3, #4
 80106ea:	d00e      	beq.n	801070a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80106f0:	2b07      	cmp	r3, #7
 80106f2:	d00a      	beq.n	801070a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80106f8:	2b02      	cmp	r3, #2
 80106fa:	d006      	beq.n	801070a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010700:	2b03      	cmp	r3, #3
 8010702:	d002      	beq.n	801070a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010704:	f06f 030a 	mvn.w	r3, #10
 8010708:	e04f      	b.n	80107aa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801070a:	887b      	ldrh	r3, [r7, #2]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	e04a      	b.n	80107aa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801071a:	887a      	ldrh	r2, [r7, #2]
 801071c:	429a      	cmp	r2, r3
 801071e:	d909      	bls.n	8010734 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7e9b      	ldrb	r3, [r3, #26]
 8010724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010728:	b2da      	uxtb	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801072e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010732:	e03a      	b.n	80107aa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801073a:	2b08      	cmp	r3, #8
 801073c:	d806      	bhi.n	801074c <tcp_write_checks+0x74>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010744:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010748:	4293      	cmp	r3, r2
 801074a:	d909      	bls.n	8010760 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	7e9b      	ldrb	r3, [r3, #26]
 8010750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010754:	b2da      	uxtb	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801075a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801075e:	e024      	b.n	80107aa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00f      	beq.n	801078a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801076e:	2b00      	cmp	r3, #0
 8010770:	d11a      	bne.n	80107a8 <tcp_write_checks+0xd0>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010776:	2b00      	cmp	r3, #0
 8010778:	d116      	bne.n	80107a8 <tcp_write_checks+0xd0>
 801077a:	4b0e      	ldr	r3, [pc, #56]	; (80107b4 <tcp_write_checks+0xdc>)
 801077c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010780:	490d      	ldr	r1, [pc, #52]	; (80107b8 <tcp_write_checks+0xe0>)
 8010782:	480e      	ldr	r0, [pc, #56]	; (80107bc <tcp_write_checks+0xe4>)
 8010784:	f006 fa00 	bl	8016b88 <iprintf>
 8010788:	e00e      	b.n	80107a8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801078e:	2b00      	cmp	r3, #0
 8010790:	d103      	bne.n	801079a <tcp_write_checks+0xc2>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010796:	2b00      	cmp	r3, #0
 8010798:	d006      	beq.n	80107a8 <tcp_write_checks+0xd0>
 801079a:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <tcp_write_checks+0xdc>)
 801079c:	f240 1259 	movw	r2, #345	; 0x159
 80107a0:	4907      	ldr	r1, [pc, #28]	; (80107c0 <tcp_write_checks+0xe8>)
 80107a2:	4806      	ldr	r0, [pc, #24]	; (80107bc <tcp_write_checks+0xe4>)
 80107a4:	f006 f9f0 	bl	8016b88 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	08019cd8 	.word	0x08019cd8
 80107b8:	08019d90 	.word	0x08019d90
 80107bc:	08019d3c 	.word	0x08019d3c
 80107c0:	08019dcc 	.word	0x08019dcc

080107c4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80107c4:	b590      	push	{r4, r7, lr}
 80107c6:	b09b      	sub	sp, #108	; 0x6c
 80107c8:	af04      	add	r7, sp, #16
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	4611      	mov	r1, r2
 80107d0:	461a      	mov	r2, r3
 80107d2:	460b      	mov	r3, r1
 80107d4:	80fb      	strh	r3, [r7, #6]
 80107d6:	4613      	mov	r3, r2
 80107d8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80107de:	2300      	movs	r3, #0
 80107e0:	653b      	str	r3, [r7, #80]	; 0x50
 80107e2:	2300      	movs	r3, #0
 80107e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107e6:	2300      	movs	r3, #0
 80107e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80107ea:	2300      	movs	r3, #0
 80107ec:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80107ee:	2300      	movs	r3, #0
 80107f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010800:	2300      	movs	r3, #0
 8010802:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010804:	2300      	movs	r3, #0
 8010806:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010808:	2300      	movs	r3, #0
 801080a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010812:	085b      	lsrs	r3, r3, #1
 8010814:	b29a      	uxth	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801081a:	4293      	cmp	r3, r2
 801081c:	bf28      	it	cs
 801081e:	4613      	movcs	r3, r2
 8010820:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010824:	2b00      	cmp	r3, #0
 8010826:	d102      	bne.n	801082e <tcp_write+0x6a>
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801082c:	e000      	b.n	8010830 <tcp_write+0x6c>
 801082e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010830:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d109      	bne.n	801084c <tcp_write+0x88>
 8010838:	4b92      	ldr	r3, [pc, #584]	; (8010a84 <tcp_write+0x2c0>)
 801083a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801083e:	4992      	ldr	r1, [pc, #584]	; (8010a88 <tcp_write+0x2c4>)
 8010840:	4892      	ldr	r0, [pc, #584]	; (8010a8c <tcp_write+0x2c8>)
 8010842:	f006 f9a1 	bl	8016b88 <iprintf>
 8010846:	f06f 030f 	mvn.w	r3, #15
 801084a:	e30a      	b.n	8010e62 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801084c:	88fb      	ldrh	r3, [r7, #6]
 801084e:	4619      	mov	r1, r3
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f7ff ff41 	bl	80106d8 <tcp_write_checks>
 8010856:	4603      	mov	r3, r0
 8010858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801085c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010860:	2b00      	cmp	r3, #0
 8010862:	d002      	beq.n	801086a <tcp_write+0xa6>
    return err;
 8010864:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010868:	e2fb      	b.n	8010e62 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010870:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010878:	2b00      	cmp	r3, #0
 801087a:	f000 80f5 	beq.w	8010a68 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010882:	653b      	str	r3, [r7, #80]	; 0x50
 8010884:	e002      	b.n	801088c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801088c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d1f8      	bne.n	8010886 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010896:	7a9b      	ldrb	r3, [r3, #10]
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	b29b      	uxth	r3, r3
 801089c:	f003 0304 	and.w	r3, r3, #4
 80108a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80108a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80108a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a6:	891b      	ldrh	r3, [r3, #8]
 80108a8:	4619      	mov	r1, r3
 80108aa:	8c3b      	ldrh	r3, [r7, #32]
 80108ac:	440b      	add	r3, r1
 80108ae:	429a      	cmp	r2, r3
 80108b0:	da06      	bge.n	80108c0 <tcp_write+0xfc>
 80108b2:	4b74      	ldr	r3, [pc, #464]	; (8010a84 <tcp_write+0x2c0>)
 80108b4:	f240 12c7 	movw	r2, #455	; 0x1c7
 80108b8:	4975      	ldr	r1, [pc, #468]	; (8010a90 <tcp_write+0x2cc>)
 80108ba:	4874      	ldr	r0, [pc, #464]	; (8010a8c <tcp_write+0x2c8>)
 80108bc:	f006 f964 	bl	8016b88 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80108c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108c2:	891a      	ldrh	r2, [r3, #8]
 80108c4:	8c3b      	ldrh	r3, [r7, #32]
 80108c6:	4413      	add	r3, r2
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80108d6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80108d8:	8a7b      	ldrh	r3, [r7, #18]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d027      	beq.n	801092e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80108de:	8a7b      	ldrh	r3, [r7, #18]
 80108e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d206      	bcs.n	80108f4 <tcp_write+0x130>
 80108e6:	4b67      	ldr	r3, [pc, #412]	; (8010a84 <tcp_write+0x2c0>)
 80108e8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80108ec:	4969      	ldr	r1, [pc, #420]	; (8010a94 <tcp_write+0x2d0>)
 80108ee:	4867      	ldr	r0, [pc, #412]	; (8010a8c <tcp_write+0x2c8>)
 80108f0:	f006 f94a 	bl	8016b88 <iprintf>
      seg = last_unsent;
 80108f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80108f8:	8a7b      	ldrh	r3, [r7, #18]
 80108fa:	88fa      	ldrh	r2, [r7, #6]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d901      	bls.n	8010904 <tcp_write+0x140>
 8010900:	8a7b      	ldrh	r3, [r7, #18]
 8010902:	e000      	b.n	8010906 <tcp_write+0x142>
 8010904:	88fb      	ldrh	r3, [r7, #6]
 8010906:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010908:	4293      	cmp	r3, r2
 801090a:	bfa8      	it	ge
 801090c:	4613      	movge	r3, r2
 801090e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010910:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010916:	4413      	add	r3, r2
 8010918:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801091c:	8a7a      	ldrh	r2, [r7, #18]
 801091e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010920:	1ad3      	subs	r3, r2, r3
 8010922:	b29b      	uxth	r3, r3
 8010924:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010926:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010928:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801092e:	8a7b      	ldrh	r3, [r7, #18]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00b      	beq.n	801094c <tcp_write+0x188>
 8010934:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010938:	88fb      	ldrh	r3, [r7, #6]
 801093a:	429a      	cmp	r2, r3
 801093c:	d006      	beq.n	801094c <tcp_write+0x188>
 801093e:	4b51      	ldr	r3, [pc, #324]	; (8010a84 <tcp_write+0x2c0>)
 8010940:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010944:	4954      	ldr	r1, [pc, #336]	; (8010a98 <tcp_write+0x2d4>)
 8010946:	4851      	ldr	r0, [pc, #324]	; (8010a8c <tcp_write+0x2c8>)
 8010948:	f006 f91e 	bl	8016b88 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801094c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010950:	88fb      	ldrh	r3, [r7, #6]
 8010952:	429a      	cmp	r2, r3
 8010954:	f080 8168 	bcs.w	8010c28 <tcp_write+0x464>
 8010958:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 8164 	beq.w	8010c28 <tcp_write+0x464>
 8010960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010962:	891b      	ldrh	r3, [r3, #8]
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 815f 	beq.w	8010c28 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801096a:	88fa      	ldrh	r2, [r7, #6]
 801096c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010970:	1ad2      	subs	r2, r2, r3
 8010972:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010974:	4293      	cmp	r3, r2
 8010976:	bfa8      	it	ge
 8010978:	4613      	movge	r3, r2
 801097a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801097c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801097e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010980:	797b      	ldrb	r3, [r7, #5]
 8010982:	f003 0301 	and.w	r3, r3, #1
 8010986:	2b00      	cmp	r3, #0
 8010988:	d027      	beq.n	80109da <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801098a:	f107 0012 	add.w	r0, r7, #18
 801098e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010990:	8bf9      	ldrh	r1, [r7, #30]
 8010992:	2301      	movs	r3, #1
 8010994:	9302      	str	r3, [sp, #8]
 8010996:	797b      	ldrb	r3, [r7, #5]
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	4603      	mov	r3, r0
 80109a0:	2004      	movs	r0, #4
 80109a2:	f7ff fe37 	bl	8010614 <tcp_pbuf_prealloc>
 80109a6:	6578      	str	r0, [r7, #84]	; 0x54
 80109a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f000 8227 	beq.w	8010dfe <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80109b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109b2:	6858      	ldr	r0, [r3, #4]
 80109b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	4413      	add	r3, r2
 80109bc:	8bfa      	ldrh	r2, [r7, #30]
 80109be:	4619      	mov	r1, r3
 80109c0:	f006 f8cf 	bl	8016b62 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80109c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80109c6:	f7fb fc69 	bl	800c29c <pbuf_clen>
 80109ca:	4603      	mov	r3, r0
 80109cc:	461a      	mov	r2, r3
 80109ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80109d2:	4413      	add	r3, r2
 80109d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80109d8:	e03f      	b.n	8010a5a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80109da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	637b      	str	r3, [r7, #52]	; 0x34
 80109e0:	e002      	b.n	80109e8 <tcp_write+0x224>
 80109e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	637b      	str	r3, [r7, #52]	; 0x34
 80109e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1f8      	bne.n	80109e2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80109f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f2:	7b1b      	ldrb	r3, [r3, #12]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d115      	bne.n	8010a24 <tcp_write+0x260>
 80109f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109fe:	8952      	ldrh	r2, [r2, #10]
 8010a00:	4413      	add	r3, r2
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d10d      	bne.n	8010a24 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010a08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d006      	beq.n	8010a1e <tcp_write+0x25a>
 8010a10:	4b1c      	ldr	r3, [pc, #112]	; (8010a84 <tcp_write+0x2c0>)
 8010a12:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010a16:	4921      	ldr	r1, [pc, #132]	; (8010a9c <tcp_write+0x2d8>)
 8010a18:	481c      	ldr	r0, [pc, #112]	; (8010a8c <tcp_write+0x2c8>)
 8010a1a:	f006 f8b5 	bl	8016b88 <iprintf>
          extendlen = seglen;
 8010a1e:	8bfb      	ldrh	r3, [r7, #30]
 8010a20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010a22:	e01a      	b.n	8010a5a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010a24:	8bfb      	ldrh	r3, [r7, #30]
 8010a26:	2201      	movs	r2, #1
 8010a28:	4619      	mov	r1, r3
 8010a2a:	2004      	movs	r0, #4
 8010a2c:	f7fb f82a 	bl	800ba84 <pbuf_alloc>
 8010a30:	6578      	str	r0, [r7, #84]	; 0x54
 8010a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f000 81e4 	beq.w	8010e02 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	441a      	add	r2, r3
 8010a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010a46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010a48:	f7fb fc28 	bl	800c29c <pbuf_clen>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	461a      	mov	r2, r3
 8010a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a54:	4413      	add	r3, r2
 8010a56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010a5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a5e:	8bfb      	ldrh	r3, [r7, #30]
 8010a60:	4413      	add	r3, r2
 8010a62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010a66:	e0df      	b.n	8010c28 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 80da 	beq.w	8010c28 <tcp_write+0x464>
 8010a74:	4b03      	ldr	r3, [pc, #12]	; (8010a84 <tcp_write+0x2c0>)
 8010a76:	f240 2225 	movw	r2, #549	; 0x225
 8010a7a:	4909      	ldr	r1, [pc, #36]	; (8010aa0 <tcp_write+0x2dc>)
 8010a7c:	4803      	ldr	r0, [pc, #12]	; (8010a8c <tcp_write+0x2c8>)
 8010a7e:	f006 f883 	bl	8016b88 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010a82:	e0d1      	b.n	8010c28 <tcp_write+0x464>
 8010a84:	08019cd8 	.word	0x08019cd8
 8010a88:	08019e00 	.word	0x08019e00
 8010a8c:	08019d3c 	.word	0x08019d3c
 8010a90:	08019e34 	.word	0x08019e34
 8010a94:	08019e4c 	.word	0x08019e4c
 8010a98:	08019e6c 	.word	0x08019e6c
 8010a9c:	08019e8c 	.word	0x08019e8c
 8010aa0:	08019eb8 	.word	0x08019eb8
    struct pbuf *p;
    u16_t left = len - pos;
 8010aa4:	88fa      	ldrh	r2, [r7, #6]
 8010aa6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010aba:	8b7a      	ldrh	r2, [r7, #26]
 8010abc:	8bbb      	ldrh	r3, [r7, #28]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	bf28      	it	cs
 8010ac2:	4613      	movcs	r3, r2
 8010ac4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ac6:	797b      	ldrb	r3, [r7, #5]
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d036      	beq.n	8010b3e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	8b3b      	ldrh	r3, [r7, #24]
 8010ad8:	4413      	add	r3, r2
 8010ada:	b299      	uxth	r1, r3
 8010adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	bf0c      	ite	eq
 8010ae2:	2301      	moveq	r3, #1
 8010ae4:	2300      	movne	r3, #0
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f107 0012 	add.w	r0, r7, #18
 8010aec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010aee:	9302      	str	r3, [sp, #8]
 8010af0:	797b      	ldrb	r3, [r7, #5]
 8010af2:	9301      	str	r3, [sp, #4]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	9300      	str	r3, [sp, #0]
 8010af8:	4603      	mov	r3, r0
 8010afa:	2000      	movs	r0, #0
 8010afc:	f7ff fd8a 	bl	8010614 <tcp_pbuf_prealloc>
 8010b00:	6338      	str	r0, [r7, #48]	; 0x30
 8010b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 817e 	beq.w	8010e06 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0c:	895b      	ldrh	r3, [r3, #10]
 8010b0e:	8b3a      	ldrh	r2, [r7, #24]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d906      	bls.n	8010b22 <tcp_write+0x35e>
 8010b14:	4b8f      	ldr	r3, [pc, #572]	; (8010d54 <tcp_write+0x590>)
 8010b16:	f240 2241 	movw	r2, #577	; 0x241
 8010b1a:	498f      	ldr	r1, [pc, #572]	; (8010d58 <tcp_write+0x594>)
 8010b1c:	488f      	ldr	r0, [pc, #572]	; (8010d5c <tcp_write+0x598>)
 8010b1e:	f006 f833 	bl	8016b88 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b24:	685a      	ldr	r2, [r3, #4]
 8010b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b2a:	18d0      	adds	r0, r2, r3
 8010b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	4413      	add	r3, r2
 8010b34:	8b3a      	ldrh	r2, [r7, #24]
 8010b36:	4619      	mov	r1, r3
 8010b38:	f006 f813 	bl	8016b62 <memcpy>
 8010b3c:	e02e      	b.n	8010b9c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010b3e:	8a7b      	ldrh	r3, [r7, #18]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d006      	beq.n	8010b52 <tcp_write+0x38e>
 8010b44:	4b83      	ldr	r3, [pc, #524]	; (8010d54 <tcp_write+0x590>)
 8010b46:	f240 224b 	movw	r2, #587	; 0x24b
 8010b4a:	4985      	ldr	r1, [pc, #532]	; (8010d60 <tcp_write+0x59c>)
 8010b4c:	4883      	ldr	r0, [pc, #524]	; (8010d5c <tcp_write+0x598>)
 8010b4e:	f006 f81b 	bl	8016b88 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010b52:	8b3b      	ldrh	r3, [r7, #24]
 8010b54:	2201      	movs	r2, #1
 8010b56:	4619      	mov	r1, r3
 8010b58:	2000      	movs	r0, #0
 8010b5a:	f7fa ff93 	bl	800ba84 <pbuf_alloc>
 8010b5e:	6178      	str	r0, [r7, #20]
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f000 8151 	beq.w	8010e0a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b6c:	68ba      	ldr	r2, [r7, #8]
 8010b6e:	441a      	add	r2, r3
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	2000      	movs	r0, #0
 8010b80:	f7fa ff80 	bl	800ba84 <pbuf_alloc>
 8010b84:	6338      	str	r0, [r7, #48]	; 0x30
 8010b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d103      	bne.n	8010b94 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010b8c:	6978      	ldr	r0, [r7, #20]
 8010b8e:	f7fb faeb 	bl	800c168 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010b92:	e13d      	b.n	8010e10 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010b94:	6979      	ldr	r1, [r7, #20]
 8010b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b98:	f7fb fbc0 	bl	800c31c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b9e:	f7fb fb7d 	bl	800c29c <pbuf_clen>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010baa:	4413      	add	r3, r2
 8010bac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010bb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010bb4:	2b09      	cmp	r3, #9
 8010bb6:	d805      	bhi.n	8010bc4 <tcp_write+0x400>
 8010bb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010bbc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d903      	bls.n	8010bcc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bc6:	f7fb facf 	bl	800c168 <pbuf_free>
      goto memerr;
 8010bca:	e121      	b.n	8010e10 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010bd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bd4:	441a      	add	r2, r3
 8010bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	2200      	movs	r2, #0
 8010be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010be2:	68f8      	ldr	r0, [r7, #12]
 8010be4:	f7ff fc8e 	bl	8010504 <tcp_create_segment>
 8010be8:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f000 810e 	beq.w	8010e0e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d102      	bne.n	8010bfe <tcp_write+0x43a>
      queue = seg;
 8010bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8010bfc:	e00c      	b.n	8010c18 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d106      	bne.n	8010c12 <tcp_write+0x44e>
 8010c04:	4b53      	ldr	r3, [pc, #332]	; (8010d54 <tcp_write+0x590>)
 8010c06:	f240 2285 	movw	r2, #645	; 0x285
 8010c0a:	4956      	ldr	r1, [pc, #344]	; (8010d64 <tcp_write+0x5a0>)
 8010c0c:	4853      	ldr	r0, [pc, #332]	; (8010d5c <tcp_write+0x598>)
 8010c0e:	f005 ffbb 	bl	8016b88 <iprintf>
      prev_seg->next = seg;
 8010c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c16:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c1a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010c1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c20:	8b3b      	ldrh	r3, [r7, #24]
 8010c22:	4413      	add	r3, r2
 8010c24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010c28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c2c:	88fb      	ldrh	r3, [r7, #6]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	f4ff af38 	bcc.w	8010aa4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010c34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d02c      	beq.n	8010c94 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c40:	e01e      	b.n	8010c80 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c44:	891a      	ldrh	r2, [r3, #8]
 8010c46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c48:	4413      	add	r3, r2
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d110      	bne.n	8010c7a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	685b      	ldr	r3, [r3, #4]
 8010c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c5e:	8952      	ldrh	r2, [r2, #10]
 8010c60:	4413      	add	r3, r2
 8010c62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c64:	68b9      	ldr	r1, [r7, #8]
 8010c66:	4618      	mov	r0, r3
 8010c68:	f005 ff7b 	bl	8016b62 <memcpy>
        p->len += oversize_used;
 8010c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6e:	895a      	ldrh	r2, [r3, #10]
 8010c70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c72:	4413      	add	r3, r2
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c78:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1dd      	bne.n	8010c42 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8010c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c88:	891a      	ldrh	r2, [r3, #8]
 8010c8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c92:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010c94:	8a7a      	ldrh	r2, [r7, #18]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d018      	beq.n	8010cd4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d106      	bne.n	8010cb6 <tcp_write+0x4f2>
 8010ca8:	4b2a      	ldr	r3, [pc, #168]	; (8010d54 <tcp_write+0x590>)
 8010caa:	f240 22bb 	movw	r2, #699	; 0x2bb
 8010cae:	492e      	ldr	r1, [pc, #184]	; (8010d68 <tcp_write+0x5a4>)
 8010cb0:	482a      	ldr	r0, [pc, #168]	; (8010d5c <tcp_write+0x598>)
 8010cb2:	f005 ff69 	bl	8016b88 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fb fb2d 	bl	800c31c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc4:	891a      	ldrh	r2, [r3, #8]
 8010cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cc8:	891b      	ldrh	r3, [r3, #8]
 8010cca:	4413      	add	r3, r2
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd0:	811a      	strh	r2, [r3, #8]
 8010cd2:	e037      	b.n	8010d44 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010cd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d034      	beq.n	8010d44 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d003      	beq.n	8010ce8 <tcp_write+0x524>
 8010ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d106      	bne.n	8010cf6 <tcp_write+0x532>
 8010ce8:	4b1a      	ldr	r3, [pc, #104]	; (8010d54 <tcp_write+0x590>)
 8010cea:	f240 22c1 	movw	r2, #705	; 0x2c1
 8010cee:	491f      	ldr	r1, [pc, #124]	; (8010d6c <tcp_write+0x5a8>)
 8010cf0:	481a      	ldr	r0, [pc, #104]	; (8010d5c <tcp_write+0x598>)
 8010cf2:	f005 ff49 	bl	8016b88 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cfc:	e009      	b.n	8010d12 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	891a      	ldrh	r2, [r3, #8]
 8010d02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d04:	4413      	add	r3, r2
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1f1      	bne.n	8010cfe <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1c:	891a      	ldrh	r2, [r3, #8]
 8010d1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d20:	4413      	add	r3, r2
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d26:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	895a      	ldrh	r2, [r3, #10]
 8010d2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d2e:	4413      	add	r3, r2
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d38:	891a      	ldrh	r2, [r3, #8]
 8010d3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010d3c:	4413      	add	r3, r2
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d42:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d112      	bne.n	8010d70 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d4e:	669a      	str	r2, [r3, #104]	; 0x68
 8010d50:	e011      	b.n	8010d76 <tcp_write+0x5b2>
 8010d52:	bf00      	nop
 8010d54:	08019cd8 	.word	0x08019cd8
 8010d58:	08019ee8 	.word	0x08019ee8
 8010d5c:	08019d3c 	.word	0x08019d3c
 8010d60:	08019f28 	.word	0x08019f28
 8010d64:	08019f38 	.word	0x08019f38
 8010d68:	08019f4c 	.word	0x08019f4c
 8010d6c:	08019f84 	.word	0x08019f84
  } else {
    last_unsent->next = queue;
 8010d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d74:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010d7a:	88fb      	ldrh	r3, [r7, #6]
 8010d7c:	441a      	add	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d88:	88fb      	ldrh	r3, [r7, #6]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d00e      	beq.n	8010dc6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d10a      	bne.n	8010dc6 <tcp_write+0x602>
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d106      	bne.n	8010dc6 <tcp_write+0x602>
 8010db8:	4b2c      	ldr	r3, [pc, #176]	; (8010e6c <tcp_write+0x6a8>)
 8010dba:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010dbe:	492c      	ldr	r1, [pc, #176]	; (8010e70 <tcp_write+0x6ac>)
 8010dc0:	482c      	ldr	r0, [pc, #176]	; (8010e74 <tcp_write+0x6b0>)
 8010dc2:	f005 fee1 	bl	8016b88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8010dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d016      	beq.n	8010dfa <tcp_write+0x636>
 8010dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d012      	beq.n	8010dfa <tcp_write+0x636>
 8010dd4:	797b      	ldrb	r3, [r7, #5]
 8010dd6:	f003 0302 	and.w	r3, r3, #2
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d10d      	bne.n	8010dfa <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	899b      	ldrh	r3, [r3, #12]
 8010de4:	b29c      	uxth	r4, r3
 8010de6:	2008      	movs	r0, #8
 8010de8:	f7f9 ffe6 	bl	800adb8 <lwip_htons>
 8010dec:	4603      	mov	r3, r0
 8010dee:	461a      	mov	r2, r3
 8010df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	4322      	orrs	r2, r4
 8010df6:	b292      	uxth	r2, r2
 8010df8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	e031      	b.n	8010e62 <tcp_write+0x69e>
          goto memerr;
 8010dfe:	bf00      	nop
 8010e00:	e006      	b.n	8010e10 <tcp_write+0x64c>
            goto memerr;
 8010e02:	bf00      	nop
 8010e04:	e004      	b.n	8010e10 <tcp_write+0x64c>
        goto memerr;
 8010e06:	bf00      	nop
 8010e08:	e002      	b.n	8010e10 <tcp_write+0x64c>
        goto memerr;
 8010e0a:	bf00      	nop
 8010e0c:	e000      	b.n	8010e10 <tcp_write+0x64c>
      goto memerr;
 8010e0e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	7e9b      	ldrb	r3, [r3, #26]
 8010e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010e18:	b2da      	uxtb	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d002      	beq.n	8010e2a <tcp_write+0x666>
    pbuf_free(concat_p);
 8010e24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e26:	f7fb f99f 	bl	800c168 <pbuf_free>
  }
  if (queue != NULL) {
 8010e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <tcp_write+0x672>
    tcp_segs_free(queue);
 8010e30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e32:	f7fc fcc0 	bl	800d7b6 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d00e      	beq.n	8010e5e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10a      	bne.n	8010e5e <tcp_write+0x69a>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d106      	bne.n	8010e5e <tcp_write+0x69a>
 8010e50:	4b06      	ldr	r3, [pc, #24]	; (8010e6c <tcp_write+0x6a8>)
 8010e52:	f240 3202 	movw	r2, #770	; 0x302
 8010e56:	4906      	ldr	r1, [pc, #24]	; (8010e70 <tcp_write+0x6ac>)
 8010e58:	4806      	ldr	r0, [pc, #24]	; (8010e74 <tcp_write+0x6b0>)
 8010e5a:	f005 fe95 	bl	8016b88 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	375c      	adds	r7, #92	; 0x5c
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd90      	pop	{r4, r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	08019cd8 	.word	0x08019cd8
 8010e70:	08019fbc 	.word	0x08019fbc
 8010e74:	08019d3c 	.word	0x08019d3c

08010e78 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e8c:	78fb      	ldrb	r3, [r7, #3]
 8010e8e:	f003 0303 	and.w	r3, r3, #3
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <tcp_enqueue_flags+0x2c>
 8010e96:	4b6f      	ldr	r3, [pc, #444]	; (8011054 <tcp_enqueue_flags+0x1dc>)
 8010e98:	f240 321b 	movw	r2, #795	; 0x31b
 8010e9c:	496e      	ldr	r1, [pc, #440]	; (8011058 <tcp_enqueue_flags+0x1e0>)
 8010e9e:	486f      	ldr	r0, [pc, #444]	; (801105c <tcp_enqueue_flags+0x1e4>)
 8010ea0:	f005 fe72 	bl	8016b88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010eaa:	2b08      	cmp	r3, #8
 8010eac:	d806      	bhi.n	8010ebc <tcp_enqueue_flags+0x44>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010eb4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d90e      	bls.n	8010eda <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010ebc:	78fb      	ldrb	r3, [r7, #3]
 8010ebe:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d109      	bne.n	8010eda <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	7e9b      	ldrb	r3, [r3, #26]
 8010eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ed8:	e0b7      	b.n	801104a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010eda:	78fb      	ldrb	r3, [r7, #3]
 8010edc:	f003 0302 	and.w	r3, r3, #2
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010ee8:	7ffb      	ldrb	r3, [r7, #31]
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	f003 0304 	and.w	r3, r3, #4
 8010ef2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	2200      	movs	r2, #0
 8010efa:	4619      	mov	r1, r3
 8010efc:	2000      	movs	r0, #0
 8010efe:	f7fa fdc1 	bl	800ba84 <pbuf_alloc>
 8010f02:	6138      	str	r0, [r7, #16]
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	7e9b      	ldrb	r3, [r3, #26]
 8010f0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f1c:	e095      	b.n	801104a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	895a      	ldrh	r2, [r3, #10]
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d206      	bcs.n	8010f38 <tcp_enqueue_flags+0xc0>
 8010f2a:	4b4a      	ldr	r3, [pc, #296]	; (8011054 <tcp_enqueue_flags+0x1dc>)
 8010f2c:	f240 3241 	movw	r2, #833	; 0x341
 8010f30:	494b      	ldr	r1, [pc, #300]	; (8011060 <tcp_enqueue_flags+0x1e8>)
 8010f32:	484a      	ldr	r0, [pc, #296]	; (801105c <tcp_enqueue_flags+0x1e4>)
 8010f34:	f005 fe28 	bl	8016b88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010f3c:	78fa      	ldrb	r2, [r7, #3]
 8010f3e:	7ffb      	ldrb	r3, [r7, #31]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	460b      	mov	r3, r1
 8010f44:	6939      	ldr	r1, [r7, #16]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff fadc 	bl	8010504 <tcp_create_segment>
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d109      	bne.n	8010f68 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	7e9b      	ldrb	r3, [r3, #26]
 8010f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f66:	e070      	b.n	801104a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	f003 0303 	and.w	r3, r3, #3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d006      	beq.n	8010f82 <tcp_enqueue_flags+0x10a>
 8010f74:	4b37      	ldr	r3, [pc, #220]	; (8011054 <tcp_enqueue_flags+0x1dc>)
 8010f76:	f240 3249 	movw	r2, #841	; 0x349
 8010f7a:	493a      	ldr	r1, [pc, #232]	; (8011064 <tcp_enqueue_flags+0x1ec>)
 8010f7c:	4837      	ldr	r0, [pc, #220]	; (801105c <tcp_enqueue_flags+0x1e4>)
 8010f7e:	f005 fe03 	bl	8016b88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d006      	beq.n	8010f98 <tcp_enqueue_flags+0x120>
 8010f8a:	4b32      	ldr	r3, [pc, #200]	; (8011054 <tcp_enqueue_flags+0x1dc>)
 8010f8c:	f240 324a 	movw	r2, #842	; 0x34a
 8010f90:	4935      	ldr	r1, [pc, #212]	; (8011068 <tcp_enqueue_flags+0x1f0>)
 8010f92:	4832      	ldr	r0, [pc, #200]	; (801105c <tcp_enqueue_flags+0x1e4>)
 8010f94:	f005 fdf8 	bl	8016b88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d103      	bne.n	8010fa8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	68fa      	ldr	r2, [r7, #12]
 8010fa4:	669a      	str	r2, [r3, #104]	; 0x68
 8010fa6:	e00d      	b.n	8010fc4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010fac:	61bb      	str	r3, [r7, #24]
 8010fae:	e002      	b.n	8010fb6 <tcp_enqueue_flags+0x13e>
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	61bb      	str	r3, [r7, #24]
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1f8      	bne.n	8010fb0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010fbe:	69bb      	ldr	r3, [r7, #24]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010fcc:	78fb      	ldrb	r3, [r7, #3]
 8010fce:	f003 0302 	and.w	r3, r3, #2
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d104      	bne.n	8010fe0 <tcp_enqueue_flags+0x168>
 8010fd6:	78fb      	ldrb	r3, [r7, #3]
 8010fd8:	f003 0301 	and.w	r3, r3, #1
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d004      	beq.n	8010fea <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe4:	1c5a      	adds	r2, r3, #1
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010fea:	78fb      	ldrb	r3, [r7, #3]
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d006      	beq.n	8011002 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	7e9b      	ldrb	r3, [r3, #26]
 8010ff8:	f043 0320 	orr.w	r3, r3, #32
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f7fb f948 	bl	800c29c <pbuf_clen>
 801100c:	4603      	mov	r3, r0
 801100e:	461a      	mov	r2, r3
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011016:	4413      	add	r3, r2
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00e      	beq.n	8011048 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102e:	2b00      	cmp	r3, #0
 8011030:	d10a      	bne.n	8011048 <tcp_enqueue_flags+0x1d0>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_enqueue_flags+0x1d0>
 801103a:	4b06      	ldr	r3, [pc, #24]	; (8011054 <tcp_enqueue_flags+0x1dc>)
 801103c:	f240 326d 	movw	r2, #877	; 0x36d
 8011040:	490a      	ldr	r1, [pc, #40]	; (801106c <tcp_enqueue_flags+0x1f4>)
 8011042:	4806      	ldr	r0, [pc, #24]	; (801105c <tcp_enqueue_flags+0x1e4>)
 8011044:	f005 fda0 	bl	8016b88 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3720      	adds	r7, #32
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	08019cd8 	.word	0x08019cd8
 8011058:	08019fdc 	.word	0x08019fdc
 801105c:	08019d3c 	.word	0x08019d3c
 8011060:	0801a034 	.word	0x0801a034
 8011064:	0801a070 	.word	0x0801a070
 8011068:	0801a088 	.word	0x0801a088
 801106c:	0801a0b4 	.word	0x0801a0b4

08011070 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011070:	b590      	push	{r4, r7, lr}
 8011072:	b08b      	sub	sp, #44	; 0x2c
 8011074:	af04      	add	r7, sp, #16
 8011076:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801107c:	7dbb      	ldrb	r3, [r7, #22]
 801107e:	b29c      	uxth	r4, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011084:	4618      	mov	r0, r3
 8011086:	f7f9 fea5 	bl	800add4 <lwip_htonl>
 801108a:	4603      	mov	r3, r0
 801108c:	2200      	movs	r2, #0
 801108e:	4621      	mov	r1, r4
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff f97b 	bl	801038c <tcp_output_alloc_header>
 8011096:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d109      	bne.n	80110b2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7e9b      	ldrb	r3, [r3, #26]
 80110a2:	f043 0303 	orr.w	r3, r3, #3
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80110ac:	f06f 0301 	mvn.w	r3, #1
 80110b0:	e036      	b.n	8011120 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	3304      	adds	r3, #4
 80110b6:	4618      	mov	r0, r3
 80110b8:	f004 f9a6 	bl	8015408 <ip4_route>
 80110bc:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d102      	bne.n	80110ca <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80110c4:	23fc      	movs	r3, #252	; 0xfc
 80110c6:	75fb      	strb	r3, [r7, #23]
 80110c8:	e012      	b.n	80110f0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80110ca:	6879      	ldr	r1, [r7, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	1d18      	adds	r0, r3, #4
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	7a9c      	ldrb	r4, [r3, #10]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	7a5b      	ldrb	r3, [r3, #9]
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	9202      	str	r2, [sp, #8]
 80110dc:	2206      	movs	r2, #6
 80110de:	9201      	str	r2, [sp, #4]
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4623      	mov	r3, r4
 80110e4:	4602      	mov	r2, r0
 80110e6:	6938      	ldr	r0, [r7, #16]
 80110e8:	f004 fb54 	bl	8015794 <ip4_output_if>
 80110ec:	4603      	mov	r3, r0
 80110ee:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80110f0:	6938      	ldr	r0, [r7, #16]
 80110f2:	f7fb f839 	bl	800c168 <pbuf_free>

  if (err != ERR_OK) {
 80110f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d007      	beq.n	801110e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	7e9b      	ldrb	r3, [r3, #26]
 8011102:	f043 0303 	orr.w	r3, r3, #3
 8011106:	b2da      	uxtb	r2, r3
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	769a      	strb	r2, [r3, #26]
 801110c:	e006      	b.n	801111c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7e9b      	ldrb	r3, [r3, #26]
 8011112:	f023 0303 	bic.w	r3, r3, #3
 8011116:	b2da      	uxtb	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801111c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011120:	4618      	mov	r0, r3
 8011122:	371c      	adds	r7, #28
 8011124:	46bd      	mov	sp, r7
 8011126:	bd90      	pop	{r4, r7, pc}

08011128 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011128:	b5b0      	push	{r4, r5, r7, lr}
 801112a:	b08a      	sub	sp, #40	; 0x28
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	7d1b      	ldrb	r3, [r3, #20]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d106      	bne.n	8011146 <tcp_output+0x1e>
 8011138:	4b9b      	ldr	r3, [pc, #620]	; (80113a8 <tcp_output+0x280>)
 801113a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801113e:	499b      	ldr	r1, [pc, #620]	; (80113ac <tcp_output+0x284>)
 8011140:	489b      	ldr	r0, [pc, #620]	; (80113b0 <tcp_output+0x288>)
 8011142:	f005 fd21 	bl	8016b88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011146:	4b9b      	ldr	r3, [pc, #620]	; (80113b4 <tcp_output+0x28c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	429a      	cmp	r2, r3
 801114e:	d101      	bne.n	8011154 <tcp_output+0x2c>
    return ERR_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	e1cf      	b.n	80114f4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011160:	429a      	cmp	r2, r3
 8011162:	d203      	bcs.n	801116c <tcp_output+0x44>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801116a:	e002      	b.n	8011172 <tcp_output+0x4a>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011172:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011178:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7e9b      	ldrb	r3, [r3, #26]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d017      	beq.n	80111b6 <tcp_output+0x8e>
 8011186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00f      	beq.n	80111ac <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	4618      	mov	r0, r3
 8011194:	f7f9 fe1e 	bl	800add4 <lwip_htonl>
 8011198:	4602      	mov	r2, r0
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111a2:	8912      	ldrh	r2, [r2, #8]
 80111a4:	4413      	add	r3, r2
     (seg == NULL ||
 80111a6:	69ba      	ldr	r2, [r7, #24]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d204      	bcs.n	80111b6 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f7ff ff5f 	bl	8011070 <tcp_send_empty_ack>
 80111b2:	4603      	mov	r3, r0
 80111b4:	e19e      	b.n	80114f4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ba:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80111bc:	6a3b      	ldr	r3, [r7, #32]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d007      	beq.n	80111d2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80111c2:	e002      	b.n	80111ca <tcp_output+0xa2>
 80111c4:	6a3b      	ldr	r3, [r7, #32]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	623b      	str	r3, [r7, #32]
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1f8      	bne.n	80111c4 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	3304      	adds	r3, #4
 80111d6:	4618      	mov	r0, r3
 80111d8:	f004 f916 	bl	8015408 <ip4_route>
 80111dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d102      	bne.n	80111ea <tcp_output+0xc2>
    return ERR_RTE;
 80111e4:	f06f 0303 	mvn.w	r3, #3
 80111e8:	e184      	b.n	80114f4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d003      	beq.n	80111f8 <tcp_output+0xd0>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d111      	bne.n	801121c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d002      	beq.n	8011204 <tcp_output+0xdc>
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	3304      	adds	r3, #4
 8011202:	e000      	b.n	8011206 <tcp_output+0xde>
 8011204:	2300      	movs	r3, #0
 8011206:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d102      	bne.n	8011214 <tcp_output+0xec>
      return ERR_RTE;
 801120e:	f06f 0303 	mvn.w	r3, #3
 8011212:	e16f      	b.n	80114f4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	2b00      	cmp	r3, #0
 8011220:	f000 813e 	beq.w	80114a0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	4618      	mov	r0, r3
 801122c:	f7f9 fdd2 	bl	800add4 <lwip_htonl>
 8011230:	4602      	mov	r2, r0
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801123a:	8912      	ldrh	r2, [r2, #8]
 801123c:	4413      	add	r3, r2
  if (seg != NULL &&
 801123e:	69ba      	ldr	r2, [r7, #24]
 8011240:	429a      	cmp	r2, r3
 8011242:	f080 812d 	bcs.w	80114a0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	f000 8129 	beq.w	80114a0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011254:	461a      	mov	r2, r3
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	4293      	cmp	r3, r2
 801125a:	f040 8121 	bne.w	80114a0 <tcp_output+0x378>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011262:	2b00      	cmp	r3, #0
 8011264:	f040 811c 	bne.w	80114a0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801126e:	2b00      	cmp	r3, #0
 8011270:	f040 812b 	bne.w	80114ca <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2201      	movs	r2, #1
 8011280:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011284:	e121      	b.n	80114ca <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	899b      	ldrh	r3, [r3, #12]
 801128c:	b29b      	uxth	r3, r3
 801128e:	4618      	mov	r0, r3
 8011290:	f7f9 fd92 	bl	800adb8 <lwip_htons>
 8011294:	4603      	mov	r3, r0
 8011296:	f003 0304 	and.w	r3, r3, #4
 801129a:	2b00      	cmp	r3, #0
 801129c:	d006      	beq.n	80112ac <tcp_output+0x184>
 801129e:	4b42      	ldr	r3, [pc, #264]	; (80113a8 <tcp_output+0x280>)
 80112a0:	f240 4246 	movw	r2, #1094	; 0x446
 80112a4:	4944      	ldr	r1, [pc, #272]	; (80113b8 <tcp_output+0x290>)
 80112a6:	4842      	ldr	r0, [pc, #264]	; (80113b0 <tcp_output+0x288>)
 80112a8:	f005 fc6e 	bl	8016b88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d01f      	beq.n	80112f4 <tcp_output+0x1cc>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	7e9b      	ldrb	r3, [r3, #26]
 80112b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d119      	bne.n	80112f4 <tcp_output+0x1cc>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d00b      	beq.n	80112e0 <tcp_output+0x1b8>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d110      	bne.n	80112f4 <tcp_output+0x1cc>
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112d6:	891a      	ldrh	r2, [r3, #8]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112dc:	429a      	cmp	r2, r3
 80112de:	d209      	bcs.n	80112f4 <tcp_output+0x1cc>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <tcp_output+0x1cc>
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80112f0:	2b08      	cmp	r3, #8
 80112f2:	d901      	bls.n	80112f8 <tcp_output+0x1d0>
 80112f4:	2301      	movs	r3, #1
 80112f6:	e000      	b.n	80112fa <tcp_output+0x1d2>
 80112f8:	2300      	movs	r3, #0
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d106      	bne.n	801130c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	7e9b      	ldrb	r3, [r3, #26]
 8011302:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011306:	2b00      	cmp	r3, #0
 8011308:	f000 80e1 	beq.w	80114ce <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	7d1b      	ldrb	r3, [r3, #20]
 8011310:	2b02      	cmp	r3, #2
 8011312:	d00d      	beq.n	8011330 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	899b      	ldrh	r3, [r3, #12]
 801131a:	b29c      	uxth	r4, r3
 801131c:	2010      	movs	r0, #16
 801131e:	f7f9 fd4b 	bl	800adb8 <lwip_htons>
 8011322:	4603      	mov	r3, r0
 8011324:	461a      	mov	r2, r3
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	4322      	orrs	r2, r4
 801132c:	b292      	uxth	r2, r2
 801132e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	6879      	ldr	r1, [r7, #4]
 8011334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011336:	f000 f8e1 	bl	80114fc <tcp_output_segment>
 801133a:	4603      	mov	r3, r0
 801133c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d009      	beq.n	801135a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7e9b      	ldrb	r3, [r3, #26]
 801134a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801134e:	b2da      	uxtb	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	769a      	strb	r2, [r3, #26]
      return err;
 8011354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011358:	e0cc      	b.n	80114f4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	7d1b      	ldrb	r3, [r3, #20]
 8011366:	2b02      	cmp	r3, #2
 8011368:	d006      	beq.n	8011378 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	7e9b      	ldrb	r3, [r3, #26]
 801136e:	f023 0303 	bic.w	r3, r3, #3
 8011372:	b2da      	uxtb	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	4618      	mov	r0, r3
 8011380:	f7f9 fd28 	bl	800add4 <lwip_htonl>
 8011384:	4604      	mov	r4, r0
 8011386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011388:	891b      	ldrh	r3, [r3, #8]
 801138a:	461d      	mov	r5, r3
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	899b      	ldrh	r3, [r3, #12]
 8011392:	b29b      	uxth	r3, r3
 8011394:	4618      	mov	r0, r3
 8011396:	f7f9 fd0f 	bl	800adb8 <lwip_htons>
 801139a:	4603      	mov	r3, r0
 801139c:	f003 0303 	and.w	r3, r3, #3
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d00b      	beq.n	80113bc <tcp_output+0x294>
 80113a4:	2301      	movs	r3, #1
 80113a6:	e00a      	b.n	80113be <tcp_output+0x296>
 80113a8:	08019cd8 	.word	0x08019cd8
 80113ac:	0801a0dc 	.word	0x0801a0dc
 80113b0:	08019d3c 	.word	0x08019d3c
 80113b4:	2000fae8 	.word	0x2000fae8
 80113b8:	0801a104 	.word	0x0801a104
 80113bc:	2300      	movs	r3, #0
 80113be:	442b      	add	r3, r5
 80113c0:	4423      	add	r3, r4
 80113c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	da02      	bge.n	80113d6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	891b      	ldrh	r3, [r3, #8]
 80113da:	461c      	mov	r4, r3
 80113dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	899b      	ldrh	r3, [r3, #12]
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7f9 fce7 	bl	800adb8 <lwip_htons>
 80113ea:	4603      	mov	r3, r0
 80113ec:	f003 0303 	and.w	r3, r3, #3
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d001      	beq.n	80113f8 <tcp_output+0x2d0>
 80113f4:	2301      	movs	r3, #1
 80113f6:	e000      	b.n	80113fa <tcp_output+0x2d2>
 80113f8:	2300      	movs	r3, #0
 80113fa:	4423      	add	r3, r4
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d049      	beq.n	8011494 <tcp_output+0x36c>
      seg->next = NULL;
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801140a:	2b00      	cmp	r3, #0
 801140c:	d105      	bne.n	801141a <tcp_output+0x2f2>
        pcb->unacked = seg;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011412:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011416:	623b      	str	r3, [r7, #32]
 8011418:	e03f      	b.n	801149a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	4618      	mov	r0, r3
 8011422:	f7f9 fcd7 	bl	800add4 <lwip_htonl>
 8011426:	4604      	mov	r4, r0
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	f7f9 fcd0 	bl	800add4 <lwip_htonl>
 8011434:	4603      	mov	r3, r0
 8011436:	1ae3      	subs	r3, r4, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	da24      	bge.n	8011486 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	336c      	adds	r3, #108	; 0x6c
 8011440:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011442:	e002      	b.n	801144a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d011      	beq.n	8011476 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	4618      	mov	r0, r3
 801145c:	f7f9 fcba 	bl	800add4 <lwip_htonl>
 8011460:	4604      	mov	r4, r0
 8011462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	4618      	mov	r0, r3
 801146a:	f7f9 fcb3 	bl	800add4 <lwip_htonl>
 801146e:	4603      	mov	r3, r0
 8011470:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011472:	2b00      	cmp	r3, #0
 8011474:	dbe6      	blt.n	8011444 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	e009      	b.n	801149a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011486:	6a3b      	ldr	r3, [r7, #32]
 8011488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801148a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801148c:	6a3b      	ldr	r3, [r7, #32]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	623b      	str	r3, [r7, #32]
 8011492:	e002      	b.n	801149a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011496:	f7fc f9a2 	bl	800d7de <tcp_seg_free>
    }
    seg = pcb->unsent;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801149e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d015      	beq.n	80114d2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80114a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7f9 fc91 	bl	800add4 <lwip_htonl>
 80114b2:	4602      	mov	r2, r0
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114bc:	8912      	ldrh	r2, [r2, #8]
 80114be:	4413      	add	r3, r2
  while (seg != NULL &&
 80114c0:	69ba      	ldr	r2, [r7, #24]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	f4bf aedf 	bcs.w	8011286 <tcp_output+0x15e>
  }
output_done:
 80114c8:	e003      	b.n	80114d2 <tcp_output+0x3aa>
    goto output_done;
 80114ca:	bf00      	nop
 80114cc:	e002      	b.n	80114d4 <tcp_output+0x3ac>
      break;
 80114ce:	bf00      	nop
 80114d0:	e000      	b.n	80114d4 <tcp_output+0x3ac>
output_done:
 80114d2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d103      	bne.n	80114e4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2200      	movs	r2, #0
 80114e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	7e9b      	ldrb	r3, [r3, #26]
 80114e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114ec:	b2da      	uxtb	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80114f2:	2300      	movs	r3, #0
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3728      	adds	r7, #40	; 0x28
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bdb0      	pop	{r4, r5, r7, pc}

080114fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80114fc:	b5b0      	push	{r4, r5, r7, lr}
 80114fe:	b08c      	sub	sp, #48	; 0x30
 8011500:	af04      	add	r7, sp, #16
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	89db      	ldrh	r3, [r3, #14]
 801150e:	2b01      	cmp	r3, #1
 8011510:	d001      	beq.n	8011516 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011512:	2300      	movs	r3, #0
 8011514:	e08b      	b.n	801162e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	68dc      	ldr	r4, [r3, #12]
 801151e:	4610      	mov	r0, r2
 8011520:	f7f9 fc58 	bl	800add4 <lwip_htonl>
 8011524:	4603      	mov	r3, r0
 8011526:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	68dc      	ldr	r4, [r3, #12]
 8011530:	4610      	mov	r0, r2
 8011532:	f7f9 fc41 	bl	800adb8 <lwip_htons>
 8011536:	4603      	mov	r3, r0
 8011538:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011542:	441a      	add	r2, r3
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	3314      	adds	r3, #20
 801154e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	7a9b      	ldrb	r3, [r3, #10]
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d014      	beq.n	8011586 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	3304      	adds	r3, #4
 8011560:	4619      	mov	r1, r3
 8011562:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011566:	f7fc fc73 	bl	800de50 <tcp_eff_send_mss_impl>
 801156a:	4603      	mov	r3, r0
 801156c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801156e:	8b7b      	ldrh	r3, [r7, #26]
 8011570:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011574:	4618      	mov	r0, r3
 8011576:	f7f9 fc2d 	bl	800add4 <lwip_htonl>
 801157a:	4602      	mov	r2, r0
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	3304      	adds	r3, #4
 8011584:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801158c:	2b00      	cmp	r3, #0
 801158e:	da02      	bge.n	8011596 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2200      	movs	r2, #0
 8011594:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10c      	bne.n	80115b8 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801159e:	4b26      	ldr	r3, [pc, #152]	; (8011638 <tcp_output_segment+0x13c>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7f9 fc11 	bl	800add4 <lwip_htonl>
 80115b2:	4602      	mov	r2, r0
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	461a      	mov	r2, r3
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	8959      	ldrh	r1, [r3, #10]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	8b3a      	ldrh	r2, [r7, #24]
 80115d4:	1a8a      	subs	r2, r1, r2
 80115d6:	b292      	uxth	r2, r2
 80115d8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	8919      	ldrh	r1, [r3, #8]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	8b3a      	ldrh	r2, [r7, #24]
 80115e6:	1a8a      	subs	r2, r1, r2
 80115e8:	b292      	uxth	r2, r2
 80115ea:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	68fa      	ldr	r2, [r7, #12]
 80115f2:	68d2      	ldr	r2, [r2, #12]
 80115f4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	2200      	movs	r2, #0
 80115fc:	741a      	strb	r2, [r3, #16]
 80115fe:	2200      	movs	r2, #0
 8011600:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6858      	ldr	r0, [r3, #4]
 8011606:	68b9      	ldr	r1, [r7, #8]
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	1d1c      	adds	r4, r3, #4
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	7a9d      	ldrb	r5, [r3, #10]
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	7a5b      	ldrb	r3, [r3, #9]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	9202      	str	r2, [sp, #8]
 8011618:	2206      	movs	r2, #6
 801161a:	9201      	str	r2, [sp, #4]
 801161c:	9300      	str	r3, [sp, #0]
 801161e:	462b      	mov	r3, r5
 8011620:	4622      	mov	r2, r4
 8011622:	f004 f8b7 	bl	8015794 <ip4_output_if>
 8011626:	4603      	mov	r3, r0
 8011628:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801162a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3720      	adds	r7, #32
 8011632:	46bd      	mov	sp, r7
 8011634:	bdb0      	pop	{r4, r5, r7, pc}
 8011636:	bf00      	nop
 8011638:	2000fad8 	.word	0x2000fad8

0801163c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b08c      	sub	sp, #48	; 0x30
 8011640:	af04      	add	r7, sp, #16
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
 8011648:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801164a:	2200      	movs	r2, #0
 801164c:	2114      	movs	r1, #20
 801164e:	2001      	movs	r0, #1
 8011650:	f7fa fa18 	bl	800ba84 <pbuf_alloc>
 8011654:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d05b      	beq.n	8011714 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	895b      	ldrh	r3, [r3, #10]
 8011660:	2b13      	cmp	r3, #19
 8011662:	d806      	bhi.n	8011672 <tcp_rst+0x36>
 8011664:	4b2d      	ldr	r3, [pc, #180]	; (801171c <tcp_rst+0xe0>)
 8011666:	f240 524d 	movw	r2, #1357	; 0x54d
 801166a:	492d      	ldr	r1, [pc, #180]	; (8011720 <tcp_rst+0xe4>)
 801166c:	482d      	ldr	r0, [pc, #180]	; (8011724 <tcp_rst+0xe8>)
 801166e:	f005 fa8b 	bl	8016b88 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801167a:	4618      	mov	r0, r3
 801167c:	f7f9 fb9c 	bl	800adb8 <lwip_htons>
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011688:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801168a:	4618      	mov	r0, r3
 801168c:	f7f9 fb94 	bl	800adb8 <lwip_htons>
 8011690:	4603      	mov	r3, r0
 8011692:	461a      	mov	r2, r3
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7f9 fb9b 	bl	800add4 <lwip_htonl>
 801169e:	4602      	mov	r2, r0
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80116a4:	68b8      	ldr	r0, [r7, #8]
 80116a6:	f7f9 fb95 	bl	800add4 <lwip_htonl>
 80116aa:	4602      	mov	r2, r0
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80116b0:	f245 0014 	movw	r0, #20500	; 0x5014
 80116b4:	f7f9 fb80 	bl	800adb8 <lwip_htons>
 80116b8:	4603      	mov	r3, r0
 80116ba:	461a      	mov	r2, r3
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	2200      	movs	r2, #0
 80116c4:	f042 0208 	orr.w	r2, r2, #8
 80116c8:	739a      	strb	r2, [r3, #14]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80116d0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	2200      	movs	r2, #0
 80116d6:	741a      	strb	r2, [r3, #16]
 80116d8:	2200      	movs	r2, #0
 80116da:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	2200      	movs	r2, #0
 80116e0:	749a      	strb	r2, [r3, #18]
 80116e2:	2200      	movs	r2, #0
 80116e4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80116e6:	6838      	ldr	r0, [r7, #0]
 80116e8:	f003 fe8e 	bl	8015408 <ip4_route>
 80116ec:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00b      	beq.n	801170c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	9302      	str	r3, [sp, #8]
 80116f8:	2306      	movs	r3, #6
 80116fa:	9301      	str	r3, [sp, #4]
 80116fc:	2300      	movs	r3, #0
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	23ff      	movs	r3, #255	; 0xff
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	69f8      	ldr	r0, [r7, #28]
 8011708:	f004 f844 	bl	8015794 <ip4_output_if>
  }
  pbuf_free(p);
 801170c:	69f8      	ldr	r0, [r7, #28]
 801170e:	f7fa fd2b 	bl	800c168 <pbuf_free>
 8011712:	e000      	b.n	8011716 <tcp_rst+0xda>
    return;
 8011714:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011716:	3720      	adds	r7, #32
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}
 801171c:	08019cd8 	.word	0x08019cd8
 8011720:	08019d0c 	.word	0x08019d0c
 8011724:	08019d3c 	.word	0x08019d3c

08011728 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011734:	2b00      	cmp	r3, #0
 8011736:	d029      	beq.n	801178c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801173c:	60fb      	str	r3, [r7, #12]
 801173e:	e002      	b.n	8011746 <tcp_rexmit_rto+0x1e>
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	60fb      	str	r3, [r7, #12]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d1f8      	bne.n	8011740 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801176a:	2bff      	cmp	r3, #255	; 0xff
 801176c:	d007      	beq.n	801177e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011774:	3301      	adds	r3, #1
 8011776:	b2da      	uxtb	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7ff fccf 	bl	8011128 <tcp_output>
 801178a:	e000      	b.n	801178e <tcp_rexmit_rto+0x66>
    return;
 801178c:	bf00      	nop
}
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011794:	b590      	push	{r4, r7, lr}
 8011796:	b085      	sub	sp, #20
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d043      	beq.n	801182c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3368      	adds	r3, #104	; 0x68
 80117b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117b8:	e002      	b.n	80117c0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d011      	beq.n	80117ec <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7f9 faff 	bl	800add4 <lwip_htonl>
 80117d6:	4604      	mov	r4, r0
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f9 faf8 	bl	800add4 <lwip_htonl>
 80117e4:	4603      	mov	r3, r0
 80117e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	dbe6      	blt.n	80117ba <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681a      	ldr	r2, [r3, #0]
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	68ba      	ldr	r2, [r7, #8]
 80117f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d103      	bne.n	801180a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011810:	2bff      	cmp	r3, #255	; 0xff
 8011812:	d007      	beq.n	8011824 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801181a:	3301      	adds	r3, #1
 801181c:	b2da      	uxtb	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2200      	movs	r2, #0
 8011828:	635a      	str	r2, [r3, #52]	; 0x34
 801182a:	e000      	b.n	801182e <tcp_rexmit+0x9a>
    return;
 801182c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801182e:	3714      	adds	r7, #20
 8011830:	46bd      	mov	sp, r7
 8011832:	bd90      	pop	{r4, r7, pc}

08011834 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011840:	2b00      	cmp	r3, #0
 8011842:	d04a      	beq.n	80118da <tcp_rexmit_fast+0xa6>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	7e9b      	ldrb	r3, [r3, #26]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d144      	bne.n	80118da <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff ff9f 	bl	8011794 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011862:	429a      	cmp	r2, r3
 8011864:	d207      	bcs.n	8011876 <tcp_rexmit_fast+0x42>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801186c:	0fda      	lsrs	r2, r3, #31
 801186e:	4413      	add	r3, r2
 8011870:	105b      	asrs	r3, r3, #1
 8011872:	b29b      	uxth	r3, r3
 8011874:	e006      	b.n	8011884 <tcp_rexmit_fast+0x50>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801187c:	0fda      	lsrs	r2, r3, #31
 801187e:	4413      	add	r3, r2
 8011880:	105b      	asrs	r3, r3, #1
 8011882:	b29b      	uxth	r3, r3
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011890:	461a      	mov	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	429a      	cmp	r2, r3
 801189a:	d206      	bcs.n	80118aa <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a0:	005b      	lsls	r3, r3, #1
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118b4:	4619      	mov	r1, r3
 80118b6:	0049      	lsls	r1, r1, #1
 80118b8:	440b      	add	r3, r1
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4413      	add	r3, r2
 80118be:	b29a      	uxth	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	7e9b      	ldrb	r3, [r3, #26]
 80118ca:	f043 0304 	orr.w	r3, r3, #4
 80118ce:	b2da      	uxtb	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80118da:	bf00      	nop
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b08a      	sub	sp, #40	; 0x28
 80118e6:	af04      	add	r7, sp, #16
 80118e8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118ee:	3b01      	subs	r3, #1
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7f9 fa6f 	bl	800add4 <lwip_htonl>
 80118f6:	4603      	mov	r3, r0
 80118f8:	2200      	movs	r2, #0
 80118fa:	2100      	movs	r1, #0
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7fe fd45 	bl	801038c <tcp_output_alloc_header>
 8011902:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801190e:	e021      	b.n	8011954 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3304      	adds	r3, #4
 8011914:	4618      	mov	r0, r3
 8011916:	f003 fd77 	bl	8015408 <ip4_route>
 801191a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d102      	bne.n	8011928 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011922:	23fc      	movs	r3, #252	; 0xfc
 8011924:	75fb      	strb	r3, [r7, #23]
 8011926:	e010      	b.n	801194a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011928:	6879      	ldr	r1, [r7, #4]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	1d1a      	adds	r2, r3, #4
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	7a98      	ldrb	r0, [r3, #10]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	9302      	str	r3, [sp, #8]
 8011936:	2306      	movs	r3, #6
 8011938:	9301      	str	r3, [sp, #4]
 801193a:	2300      	movs	r3, #0
 801193c:	9300      	str	r3, [sp, #0]
 801193e:	4603      	mov	r3, r0
 8011940:	6938      	ldr	r0, [r7, #16]
 8011942:	f003 ff27 	bl	8015794 <ip4_output_if>
 8011946:	4603      	mov	r3, r0
 8011948:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801194a:	6938      	ldr	r0, [r7, #16]
 801194c:	f7fa fc0c 	bl	800c168 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011954:	4618      	mov	r0, r3
 8011956:	3718      	adds	r7, #24
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801195c:	b590      	push	{r4, r7, lr}
 801195e:	b08f      	sub	sp, #60	; 0x3c
 8011960:	af04      	add	r7, sp, #16
 8011962:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011968:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d102      	bne.n	8011976 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011974:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	e085      	b.n	8011a8c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011980:	6a3b      	ldr	r3, [r7, #32]
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	b29b      	uxth	r3, r3
 8011988:	4618      	mov	r0, r3
 801198a:	f7f9 fa15 	bl	800adb8 <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	f003 0301 	and.w	r3, r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	d005      	beq.n	80119a4 <tcp_zero_window_probe+0x48>
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	891b      	ldrh	r3, [r3, #8]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d101      	bne.n	80119a4 <tcp_zero_window_probe+0x48>
 80119a0:	2301      	movs	r3, #1
 80119a2:	e000      	b.n	80119a6 <tcp_zero_window_probe+0x4a>
 80119a4:	2300      	movs	r3, #0
 80119a6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80119a8:	7ffb      	ldrb	r3, [r7, #31]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	bf0c      	ite	eq
 80119ae:	2301      	moveq	r3, #1
 80119b0:	2300      	movne	r3, #0
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80119b6:	6a3b      	ldr	r3, [r7, #32]
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	8bba      	ldrh	r2, [r7, #28]
 80119be:	2100      	movs	r1, #0
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7fe fce3 	bl	801038c <tcp_output_alloc_header>
 80119c6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80119c8:	69bb      	ldr	r3, [r7, #24]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d102      	bne.n	80119d4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119d2:	e05b      	b.n	8011a8c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80119d4:	69bb      	ldr	r3, [r7, #24]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80119da:	7ffb      	ldrb	r3, [r7, #31]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d00e      	beq.n	80119fe <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	899b      	ldrh	r3, [r3, #12]
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119ea:	b29c      	uxth	r4, r3
 80119ec:	2011      	movs	r0, #17
 80119ee:	f7f9 f9e3 	bl	800adb8 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	4323      	orrs	r3, r4
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	819a      	strh	r2, [r3, #12]
 80119fc:	e010      	b.n	8011a20 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	3314      	adds	r3, #20
 8011a04:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011a06:	6a3b      	ldr	r3, [r7, #32]
 8011a08:	6858      	ldr	r0, [r3, #4]
 8011a0a:	6a3b      	ldr	r3, [r7, #32]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	891a      	ldrh	r2, [r3, #8]
 8011a10:	6a3b      	ldr	r3, [r7, #32]
 8011a12:	891b      	ldrh	r3, [r3, #8]
 8011a14:	1ad3      	subs	r3, r2, r3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	2201      	movs	r2, #1
 8011a1a:	6939      	ldr	r1, [r7, #16]
 8011a1c:	f7fa fdb0 	bl	800c580 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011a20:	6a3b      	ldr	r3, [r7, #32]
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7f9 f9d4 	bl	800add4 <lwip_htonl>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	3301      	adds	r3, #1
 8011a30:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	da02      	bge.n	8011a44 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	68fa      	ldr	r2, [r7, #12]
 8011a42:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	3304      	adds	r3, #4
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f003 fcdd 	bl	8015408 <ip4_route>
 8011a4e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d103      	bne.n	8011a5e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011a56:	23fc      	movs	r3, #252	; 0xfc
 8011a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a5c:	e011      	b.n	8011a82 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011a5e:	6879      	ldr	r1, [r7, #4]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	1d1a      	adds	r2, r3, #4
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7a98      	ldrb	r0, [r3, #10]
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	9302      	str	r3, [sp, #8]
 8011a6c:	2306      	movs	r3, #6
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	2300      	movs	r3, #0
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	4603      	mov	r3, r0
 8011a76:	69b8      	ldr	r0, [r7, #24]
 8011a78:	f003 fe8c 	bl	8015794 <ip4_output_if>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011a82:	69b8      	ldr	r0, [r7, #24]
 8011a84:	f7fa fb70 	bl	800c168 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	372c      	adds	r7, #44	; 0x2c
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd90      	pop	{r4, r7, pc}

08011a94 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a9c:	f7fa fdf2 	bl	800c684 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011aa0:	4b0a      	ldr	r3, [pc, #40]	; (8011acc <tcpip_tcp_timer+0x38>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <tcpip_tcp_timer+0x1c>
 8011aa8:	4b09      	ldr	r3, [pc, #36]	; (8011ad0 <tcpip_tcp_timer+0x3c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d005      	beq.n	8011abc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	4908      	ldr	r1, [pc, #32]	; (8011ad4 <tcpip_tcp_timer+0x40>)
 8011ab4:	20fa      	movs	r0, #250	; 0xfa
 8011ab6:	f000 f86f 	bl	8011b98 <sys_timeout>
 8011aba:	e002      	b.n	8011ac2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011abc:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <tcpip_tcp_timer+0x44>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	601a      	str	r2, [r3, #0]
  }
}
 8011ac2:	bf00      	nop
 8011ac4:	3708      	adds	r7, #8
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	2000fad4 	.word	0x2000fad4
 8011ad0:	2000fae4 	.word	0x2000fae4
 8011ad4:	08011a95 	.word	0x08011a95
 8011ad8:	20008c7c 	.word	0x20008c7c

08011adc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <tcp_timer_needed+0x30>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10f      	bne.n	8011b08 <tcp_timer_needed+0x2c>
 8011ae8:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <tcp_timer_needed+0x34>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d103      	bne.n	8011af8 <tcp_timer_needed+0x1c>
 8011af0:	4b08      	ldr	r3, [pc, #32]	; (8011b14 <tcp_timer_needed+0x38>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d007      	beq.n	8011b08 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011af8:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <tcp_timer_needed+0x30>)
 8011afa:	2201      	movs	r2, #1
 8011afc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011afe:	2200      	movs	r2, #0
 8011b00:	4905      	ldr	r1, [pc, #20]	; (8011b18 <tcp_timer_needed+0x3c>)
 8011b02:	20fa      	movs	r0, #250	; 0xfa
 8011b04:	f000 f848 	bl	8011b98 <sys_timeout>
  }
}
 8011b08:	bf00      	nop
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	20008c7c 	.word	0x20008c7c
 8011b10:	2000fad4 	.word	0x2000fad4
 8011b14:	2000fae4 	.word	0x2000fae4
 8011b18:	08011a95 	.word	0x08011a95

08011b1c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	4903      	ldr	r1, [pc, #12]	; (8011b44 <cyclic_timer+0x28>)
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 f82e 	bl	8011b98 <sys_timeout>
}
 8011b3c:	bf00      	nop
 8011b3e:	3710      	adds	r7, #16
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}
 8011b44:	08011b1d 	.word	0x08011b1d

08011b48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b4e:	2301      	movs	r3, #1
 8011b50:	607b      	str	r3, [r7, #4]
 8011b52:	e00e      	b.n	8011b72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011b54:	4a0d      	ldr	r2, [pc, #52]	; (8011b8c <sys_timeouts_init+0x44>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	00db      	lsls	r3, r3, #3
 8011b60:	4a0a      	ldr	r2, [pc, #40]	; (8011b8c <sys_timeouts_init+0x44>)
 8011b62:	4413      	add	r3, r2
 8011b64:	461a      	mov	r2, r3
 8011b66:	490a      	ldr	r1, [pc, #40]	; (8011b90 <sys_timeouts_init+0x48>)
 8011b68:	f000 f816 	bl	8011b98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	607b      	str	r3, [r7, #4]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2b04      	cmp	r3, #4
 8011b76:	d9ed      	bls.n	8011b54 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011b78:	f7f3 f8b8 	bl	8004cec <sys_now>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	4b05      	ldr	r3, [pc, #20]	; (8011b94 <sys_timeouts_init+0x4c>)
 8011b80:	601a      	str	r2, [r3, #0]
}
 8011b82:	bf00      	nop
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	080262bc 	.word	0x080262bc
 8011b90:	08011b1d 	.word	0x08011b1d
 8011b94:	20008c78 	.word	0x20008c78

08011b98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b088      	sub	sp, #32
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	60b9      	str	r1, [r7, #8]
 8011ba2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ba4:	200a      	movs	r0, #10
 8011ba6:	f7f9 fd2b 	bl	800b600 <memp_malloc>
 8011baa:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d10a      	bne.n	8011bc8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f040 8084 	bne.w	8011cc2 <sys_timeout+0x12a>
 8011bba:	4b44      	ldr	r3, [pc, #272]	; (8011ccc <sys_timeout+0x134>)
 8011bbc:	22d4      	movs	r2, #212	; 0xd4
 8011bbe:	4944      	ldr	r1, [pc, #272]	; (8011cd0 <sys_timeout+0x138>)
 8011bc0:	4844      	ldr	r0, [pc, #272]	; (8011cd4 <sys_timeout+0x13c>)
 8011bc2:	f004 ffe1 	bl	8016b88 <iprintf>
    return;
 8011bc6:	e07c      	b.n	8011cc2 <sys_timeout+0x12a>
  }

  now = sys_now();
 8011bc8:	f7f3 f890 	bl	8004cec <sys_now>
 8011bcc:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011bce:	4b42      	ldr	r3, [pc, #264]	; (8011cd8 <sys_timeout+0x140>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d105      	bne.n	8011be2 <sys_timeout+0x4a>
    diff = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8011bda:	4a40      	ldr	r2, [pc, #256]	; (8011cdc <sys_timeout+0x144>)
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	6013      	str	r3, [r2, #0]
 8011be0:	e004      	b.n	8011bec <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011be2:	4b3e      	ldr	r3, [pc, #248]	; (8011cdc <sys_timeout+0x144>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	693a      	ldr	r2, [r7, #16]
 8011be8:	1ad3      	subs	r3, r2, r3
 8011bea:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	441a      	add	r2, r3
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c08:	4b33      	ldr	r3, [pc, #204]	; (8011cd8 <sys_timeout+0x140>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <sys_timeout+0x80>
    next_timeout = timeout;
 8011c10:	4a31      	ldr	r2, [pc, #196]	; (8011cd8 <sys_timeout+0x140>)
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	6013      	str	r3, [r2, #0]
    return;
 8011c16:	e055      	b.n	8011cc4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011c18:	4b2f      	ldr	r3, [pc, #188]	; (8011cd8 <sys_timeout+0x140>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d20f      	bcs.n	8011c44 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011c24:	4b2c      	ldr	r3, [pc, #176]	; (8011cd8 <sys_timeout+0x140>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	6859      	ldr	r1, [r3, #4]
 8011c2a:	4b2b      	ldr	r3, [pc, #172]	; (8011cd8 <sys_timeout+0x140>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	1a8a      	subs	r2, r1, r2
 8011c32:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011c34:	4b28      	ldr	r3, [pc, #160]	; (8011cd8 <sys_timeout+0x140>)
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c3c:	4a26      	ldr	r2, [pc, #152]	; (8011cd8 <sys_timeout+0x140>)
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	e03f      	b.n	8011cc4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c44:	4b24      	ldr	r3, [pc, #144]	; (8011cd8 <sys_timeout+0x140>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	61fb      	str	r3, [r7, #28]
 8011c4a:	e036      	b.n	8011cba <sys_timeout+0x122>
      timeout->time -= t->time;
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	1ad2      	subs	r2, r2, r3
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d006      	beq.n	8011c70 <sys_timeout+0xd8>
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	429a      	cmp	r2, r3
 8011c6e:	d921      	bls.n	8011cb4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d009      	beq.n	8011c8c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	6859      	ldr	r1, [r3, #4]
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	685a      	ldr	r2, [r3, #4]
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	1a8a      	subs	r2, r1, r2
 8011c88:	605a      	str	r2, [r3, #4]
 8011c8a:	e00b      	b.n	8011ca4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	68fa      	ldr	r2, [r7, #12]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d206      	bcs.n	8011ca4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011c96:	4b10      	ldr	r3, [pc, #64]	; (8011cd8 <sys_timeout+0x140>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	441a      	add	r2, r3
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	681a      	ldr	r2, [r3, #0]
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	601a      	str	r2, [r3, #0]
        break;
 8011cb2:	e007      	b.n	8011cc4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	61fb      	str	r3, [r7, #28]
 8011cba:	69fb      	ldr	r3, [r7, #28]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1c5      	bne.n	8011c4c <sys_timeout+0xb4>
 8011cc0:	e000      	b.n	8011cc4 <sys_timeout+0x12c>
    return;
 8011cc2:	bf00      	nop
      }
    }
  }
}
 8011cc4:	3720      	adds	r7, #32
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	0801a11c 	.word	0x0801a11c
 8011cd0:	0801a150 	.word	0x0801a150
 8011cd4:	0801a190 	.word	0x0801a190
 8011cd8:	20008c74 	.word	0x20008c74
 8011cdc:	20008c78 	.word	0x20008c78

08011ce0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011ce6:	4b24      	ldr	r3, [pc, #144]	; (8011d78 <sys_check_timeouts+0x98>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d03f      	beq.n	8011d6e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011cee:	f7f2 fffd 	bl	8004cec <sys_now>
 8011cf2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011cf4:	4b21      	ldr	r3, [pc, #132]	; (8011d7c <sys_check_timeouts+0x9c>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	1ad3      	subs	r3, r2, r3
 8011cfc:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011d02:	4b1d      	ldr	r3, [pc, #116]	; (8011d78 <sys_check_timeouts+0x98>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d02c      	beq.n	8011d68 <sys_check_timeouts+0x88>
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d327      	bcc.n	8011d68 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	685a      	ldr	r2, [r3, #4]
 8011d20:	4b16      	ldr	r3, [pc, #88]	; (8011d7c <sys_check_timeouts+0x9c>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4413      	add	r3, r2
 8011d26:	4a15      	ldr	r2, [pc, #84]	; (8011d7c <sys_check_timeouts+0x9c>)
 8011d28:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4a0f      	ldr	r2, [pc, #60]	; (8011d78 <sys_check_timeouts+0x98>)
 8011d3a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011d48:	68b9      	ldr	r1, [r7, #8]
 8011d4a:	200a      	movs	r0, #10
 8011d4c:	f7f9 fcaa 	bl	800b6a4 <memp_free>
        if (handler != NULL) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d008      	beq.n	8011d68 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011d56:	480a      	ldr	r0, [pc, #40]	; (8011d80 <sys_check_timeouts+0xa0>)
 8011d58:	f004 fe70 	bl	8016a3c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6838      	ldr	r0, [r7, #0]
 8011d60:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011d62:	4807      	ldr	r0, [pc, #28]	; (8011d80 <sys_check_timeouts+0xa0>)
 8011d64:	f004 fe79 	bl	8016a5a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011d68:	7cfb      	ldrb	r3, [r7, #19]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d1c7      	bne.n	8011cfe <sys_check_timeouts+0x1e>
  }
}
 8011d6e:	bf00      	nop
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	20008c74 	.word	0x20008c74
 8011d7c:	20008c78 	.word	0x20008c78
 8011d80:	2000c394 	.word	0x2000c394

08011d84 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011d8a:	4b0f      	ldr	r3, [pc, #60]	; (8011dc8 <sys_timeouts_sleeptime+0x44>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d102      	bne.n	8011d98 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d96:	e013      	b.n	8011dc0 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011d98:	f7f2 ffa8 	bl	8004cec <sys_now>
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	4b0b      	ldr	r3, [pc, #44]	; (8011dcc <sys_timeouts_sleeptime+0x48>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011da6:	4b08      	ldr	r3, [pc, #32]	; (8011dc8 <sys_timeouts_sleeptime+0x44>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d901      	bls.n	8011db6 <sys_timeouts_sleeptime+0x32>
    return 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	e004      	b.n	8011dc0 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011db6:	4b04      	ldr	r3, [pc, #16]	; (8011dc8 <sys_timeouts_sleeptime+0x44>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	685a      	ldr	r2, [r3, #4]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	1ad3      	subs	r3, r2, r3
  }
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	20008c74 	.word	0x20008c74
 8011dcc:	20008c78 	.word	0x20008c78

08011dd0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b084      	sub	sp, #16
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011dda:	4b0f      	ldr	r3, [pc, #60]	; (8011e18 <sys_timeouts_mbox_fetch+0x48>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d105      	bne.n	8011dee <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011de2:	2200      	movs	r2, #0
 8011de4:	6839      	ldr	r1, [r7, #0]
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f004 fcf3 	bl	80167d2 <sys_arch_mbox_fetch>
    return;
 8011dec:	e011      	b.n	8011e12 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011dee:	f7ff ffc9 	bl	8011d84 <sys_timeouts_sleeptime>
 8011df2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d008      	beq.n	8011e0c <sys_timeouts_mbox_fetch+0x3c>
 8011dfa:	68fa      	ldr	r2, [r7, #12]
 8011dfc:	6839      	ldr	r1, [r7, #0]
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f004 fce7 	bl	80167d2 <sys_arch_mbox_fetch>
 8011e04:	4603      	mov	r3, r0
 8011e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e0a:	d102      	bne.n	8011e12 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011e0c:	f7ff ff68 	bl	8011ce0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011e10:	e7e3      	b.n	8011dda <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20008c74 	.word	0x20008c74

08011e1c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011e20:	bf00      	nop
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
	...

08011e2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011e36:	4b17      	ldr	r3, [pc, #92]	; (8011e94 <udp_new_port+0x68>)
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	1c5a      	adds	r2, r3, #1
 8011e3c:	b291      	uxth	r1, r2
 8011e3e:	4a15      	ldr	r2, [pc, #84]	; (8011e94 <udp_new_port+0x68>)
 8011e40:	8011      	strh	r1, [r2, #0]
 8011e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d103      	bne.n	8011e52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011e4a:	4b12      	ldr	r3, [pc, #72]	; (8011e94 <udp_new_port+0x68>)
 8011e4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011e50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e52:	4b11      	ldr	r3, [pc, #68]	; (8011e98 <udp_new_port+0x6c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	603b      	str	r3, [r7, #0]
 8011e58:	e011      	b.n	8011e7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	8a5a      	ldrh	r2, [r3, #18]
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <udp_new_port+0x68>)
 8011e60:	881b      	ldrh	r3, [r3, #0]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d108      	bne.n	8011e78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011e66:	88fb      	ldrh	r3, [r7, #6]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	80fb      	strh	r3, [r7, #6]
 8011e6c:	88fb      	ldrh	r3, [r7, #6]
 8011e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011e72:	d3e0      	bcc.n	8011e36 <udp_new_port+0xa>
        return 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e007      	b.n	8011e88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	603b      	str	r3, [r7, #0]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d1ea      	bne.n	8011e5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011e84:	4b03      	ldr	r3, [pc, #12]	; (8011e94 <udp_new_port+0x68>)
 8011e86:	881b      	ldrh	r3, [r3, #0]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	370c      	adds	r7, #12
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr
 8011e94:	20000018 	.word	0x20000018
 8011e98:	2000faec 	.word	0x2000faec

08011e9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	4613      	mov	r3, r2
 8011ea8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011eaa:	79fb      	ldrb	r3, [r7, #7]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d018      	beq.n	8011ee2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d013      	beq.n	8011ede <udp_input_local_match+0x42>
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00f      	beq.n	8011ede <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ebe:	4b14      	ldr	r3, [pc, #80]	; (8011f10 <udp_input_local_match+0x74>)
 8011ec0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ec6:	d00a      	beq.n	8011ede <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	4b10      	ldr	r3, [pc, #64]	; (8011f10 <udp_input_local_match+0x74>)
 8011ece:	695b      	ldr	r3, [r3, #20]
 8011ed0:	405a      	eors	r2, r3
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d110      	bne.n	8011f00 <udp_input_local_match+0x64>
          return 1;
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e00f      	b.n	8011f02 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d009      	beq.n	8011efc <udp_input_local_match+0x60>
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d005      	beq.n	8011efc <udp_input_local_match+0x60>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	4b06      	ldr	r3, [pc, #24]	; (8011f10 <udp_input_local_match+0x74>)
 8011ef6:	695b      	ldr	r3, [r3, #20]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d101      	bne.n	8011f00 <udp_input_local_match+0x64>
      return 1;
 8011efc:	2301      	movs	r3, #1
 8011efe:	e000      	b.n	8011f02 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3714      	adds	r7, #20
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	2000c3a4 	.word	0x2000c3a4

08011f14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011f14:	b590      	push	{r4, r7, lr}
 8011f16:	b08d      	sub	sp, #52	; 0x34
 8011f18:	af02      	add	r7, sp, #8
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	895b      	ldrh	r3, [r3, #10]
 8011f26:	2b07      	cmp	r3, #7
 8011f28:	d803      	bhi.n	8011f32 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7fa f91c 	bl	800c168 <pbuf_free>
    goto end;
 8011f30:	e0c6      	b.n	80120c0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011f38:	4b63      	ldr	r3, [pc, #396]	; (80120c8 <udp_input+0x1b4>)
 8011f3a:	695a      	ldr	r2, [r3, #20]
 8011f3c:	4b62      	ldr	r3, [pc, #392]	; (80120c8 <udp_input+0x1b4>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4619      	mov	r1, r3
 8011f42:	4610      	mov	r0, r2
 8011f44:	f003 fcf8 	bl	8015938 <ip4_addr_isbroadcast_u32>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	881b      	ldrh	r3, [r3, #0]
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	4618      	mov	r0, r3
 8011f54:	f7f8 ff30 	bl	800adb8 <lwip_htons>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	885b      	ldrh	r3, [r3, #2]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7f8 ff28 	bl	800adb8 <lwip_htons>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011f70:	2300      	movs	r3, #0
 8011f72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011f74:	2300      	movs	r3, #0
 8011f76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f78:	4b54      	ldr	r3, [pc, #336]	; (80120cc <udp_input+0x1b8>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8011f7e:	e03b      	b.n	8011ff8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	8a5b      	ldrh	r3, [r3, #18]
 8011f84:	89fa      	ldrh	r2, [r7, #14]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d131      	bne.n	8011fee <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011f8a:	7cfb      	ldrb	r3, [r7, #19]
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	6839      	ldr	r1, [r7, #0]
 8011f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f92:	f7ff ff83 	bl	8011e9c <udp_input_local_match>
 8011f96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d028      	beq.n	8011fee <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9e:	7c1b      	ldrb	r3, [r3, #16]
 8011fa0:	f003 0304 	and.w	r3, r3, #4
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <udp_input+0x9e>
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d101      	bne.n	8011fb2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	8a9b      	ldrh	r3, [r3, #20]
 8011fb6:	8a3a      	ldrh	r2, [r7, #16]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d118      	bne.n	8011fee <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d005      	beq.n	8011fd0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	685a      	ldr	r2, [r3, #4]
 8011fc8:	4b3f      	ldr	r3, [pc, #252]	; (80120c8 <udp_input+0x1b4>)
 8011fca:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d10e      	bne.n	8011fee <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011fd0:	6a3b      	ldr	r3, [r7, #32]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d014      	beq.n	8012000 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd8:	68da      	ldr	r2, [r3, #12]
 8011fda:	6a3b      	ldr	r3, [r7, #32]
 8011fdc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011fde:	4b3b      	ldr	r3, [pc, #236]	; (80120cc <udp_input+0x1b8>)
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011fe6:	4a39      	ldr	r2, [pc, #228]	; (80120cc <udp_input+0x1b8>)
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011fec:	e008      	b.n	8012000 <udp_input+0xec>
      }
    }

    prev = pcb;
 8011fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d1c0      	bne.n	8011f80 <udp_input+0x6c>
 8011ffe:	e000      	b.n	8012002 <udp_input+0xee>
        break;
 8012000:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <udp_input+0xf8>
    pcb = uncon_pcb;
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200e:	2b00      	cmp	r3, #0
 8012010:	d002      	beq.n	8012018 <udp_input+0x104>
    for_us = 1;
 8012012:	2301      	movs	r3, #1
 8012014:	76fb      	strb	r3, [r7, #27]
 8012016:	e00a      	b.n	801202e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	3304      	adds	r3, #4
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	4b2a      	ldr	r3, [pc, #168]	; (80120c8 <udp_input+0x1b4>)
 8012020:	695b      	ldr	r3, [r3, #20]
 8012022:	429a      	cmp	r2, r3
 8012024:	bf0c      	ite	eq
 8012026:	2301      	moveq	r3, #1
 8012028:	2300      	movne	r3, #0
 801202a:	b2db      	uxtb	r3, r3
 801202c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801202e:	7efb      	ldrb	r3, [r7, #27]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d042      	beq.n	80120ba <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012034:	f06f 0107 	mvn.w	r1, #7
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f7fa f871 	bl	800c120 <pbuf_header>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d00a      	beq.n	801205a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012044:	4b22      	ldr	r3, [pc, #136]	; (80120d0 <udp_input+0x1bc>)
 8012046:	f240 1255 	movw	r2, #341	; 0x155
 801204a:	4922      	ldr	r1, [pc, #136]	; (80120d4 <udp_input+0x1c0>)
 801204c:	4822      	ldr	r0, [pc, #136]	; (80120d8 <udp_input+0x1c4>)
 801204e:	f004 fd9b 	bl	8016b88 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f7fa f888 	bl	800c168 <pbuf_free>
      goto end;
 8012058:	e032      	b.n	80120c0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	2b00      	cmp	r3, #0
 801205e:	d012      	beq.n	8012086 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00a      	beq.n	801207e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206a:	699c      	ldr	r4, [r3, #24]
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	69d8      	ldr	r0, [r3, #28]
 8012070:	8a3b      	ldrh	r3, [r7, #16]
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	4b19      	ldr	r3, [pc, #100]	; (80120dc <udp_input+0x1c8>)
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801207a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801207c:	e021      	b.n	80120c2 <udp_input+0x1ae>
        pbuf_free(p);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7fa f872 	bl	800c168 <pbuf_free>
        goto end;
 8012084:	e01c      	b.n	80120c0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012086:	7cfb      	ldrb	r3, [r7, #19]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d112      	bne.n	80120b2 <udp_input+0x19e>
 801208c:	4b0e      	ldr	r3, [pc, #56]	; (80120c8 <udp_input+0x1b4>)
 801208e:	695b      	ldr	r3, [r3, #20]
 8012090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012094:	2be0      	cmp	r3, #224	; 0xe0
 8012096:	d00c      	beq.n	80120b2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012098:	4b0b      	ldr	r3, [pc, #44]	; (80120c8 <udp_input+0x1b4>)
 801209a:	899b      	ldrh	r3, [r3, #12]
 801209c:	3308      	adds	r3, #8
 801209e:	b29b      	uxth	r3, r3
 80120a0:	b21b      	sxth	r3, r3
 80120a2:	4619      	mov	r1, r3
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7fa f84d 	bl	800c144 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80120aa:	2103      	movs	r1, #3
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f003 f923 	bl	80152f8 <icmp_dest_unreach>
      pbuf_free(p);
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7fa f858 	bl	800c168 <pbuf_free>
  return;
 80120b8:	e003      	b.n	80120c2 <udp_input+0x1ae>
    pbuf_free(p);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7fa f854 	bl	800c168 <pbuf_free>
  return;
 80120c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80120c2:	372c      	adds	r7, #44	; 0x2c
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd90      	pop	{r4, r7, pc}
 80120c8:	2000c3a4 	.word	0x2000c3a4
 80120cc:	2000faec 	.word	0x2000faec
 80120d0:	0801a1b8 	.word	0x0801a1b8
 80120d4:	0801a1e8 	.word	0x0801a1e8
 80120d8:	0801a1fc 	.word	0x0801a1fc
 80120dc:	2000c3b4 	.word	0x2000c3b4

080120e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af02      	add	r7, sp, #8
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d002      	beq.n	80120fa <udp_sendto_if+0x1a>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d102      	bne.n	8012100 <udp_sendto_if+0x20>
    return ERR_VAL;
 80120fa:	f06f 0305 	mvn.w	r3, #5
 80120fe:	e028      	b.n	8012152 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d009      	beq.n	801211a <udp_sendto_if+0x3a>
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d005      	beq.n	801211a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012116:	2be0      	cmp	r3, #224	; 0xe0
 8012118:	d103      	bne.n	8012122 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801211a:	6a3b      	ldr	r3, [r7, #32]
 801211c:	3304      	adds	r3, #4
 801211e:	617b      	str	r3, [r7, #20]
 8012120:	e00b      	b.n	801213a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	6a3b      	ldr	r3, [r7, #32]
 8012128:	3304      	adds	r3, #4
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	429a      	cmp	r2, r3
 801212e:	d002      	beq.n	8012136 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012130:	f06f 0303 	mvn.w	r3, #3
 8012134:	e00d      	b.n	8012152 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801213a:	887a      	ldrh	r2, [r7, #2]
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	9301      	str	r3, [sp, #4]
 8012140:	6a3b      	ldr	r3, [r7, #32]
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	4613      	mov	r3, r2
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	68b9      	ldr	r1, [r7, #8]
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f000 f806 	bl	801215c <udp_sendto_if_src>
 8012150:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012152:	4618      	mov	r0, r3
 8012154:	3718      	adds	r7, #24
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
	...

0801215c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b08c      	sub	sp, #48	; 0x30
 8012160:	af04      	add	r7, sp, #16
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
 8012168:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <udp_sendto_if_src+0x1a>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012176:	f06f 0305 	mvn.w	r3, #5
 801217a:	e07e      	b.n	801227a <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	8a5b      	ldrh	r3, [r3, #18]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d10f      	bne.n	80121a4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012184:	68f9      	ldr	r1, [r7, #12]
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	8a5b      	ldrh	r3, [r3, #18]
 801218a:	461a      	mov	r2, r3
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 f87f 	bl	8012290 <udp_bind>
 8012192:	4603      	mov	r3, r0
 8012194:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012196:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d002      	beq.n	80121a4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801219e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80121a2:	e06a      	b.n	801227a <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80121a4:	2108      	movs	r1, #8
 80121a6:	68b8      	ldr	r0, [r7, #8]
 80121a8:	f7f9 ffba 	bl	800c120 <pbuf_header>
 80121ac:	4603      	mov	r3, r0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d014      	beq.n	80121dc <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80121b2:	2200      	movs	r2, #0
 80121b4:	2108      	movs	r1, #8
 80121b6:	2001      	movs	r0, #1
 80121b8:	f7f9 fc64 	bl	800ba84 <pbuf_alloc>
 80121bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d102      	bne.n	80121ca <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80121c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121c8:	e057      	b.n	801227a <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	891b      	ldrh	r3, [r3, #8]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d006      	beq.n	80121e0 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80121d2:	68b9      	ldr	r1, [r7, #8]
 80121d4:	69f8      	ldr	r0, [r7, #28]
 80121d6:	f7fa f8f7 	bl	800c3c8 <pbuf_chain>
 80121da:	e001      	b.n	80121e0 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	895b      	ldrh	r3, [r3, #10]
 80121e4:	2b07      	cmp	r3, #7
 80121e6:	d806      	bhi.n	80121f6 <udp_sendto_if_src+0x9a>
 80121e8:	4b26      	ldr	r3, [pc, #152]	; (8012284 <udp_sendto_if_src+0x128>)
 80121ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80121ee:	4926      	ldr	r1, [pc, #152]	; (8012288 <udp_sendto_if_src+0x12c>)
 80121f0:	4826      	ldr	r0, [pc, #152]	; (801228c <udp_sendto_if_src+0x130>)
 80121f2:	f004 fcc9 	bl	8016b88 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	8a5b      	ldrh	r3, [r3, #18]
 8012200:	4618      	mov	r0, r3
 8012202:	f7f8 fdd9 	bl	800adb8 <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	461a      	mov	r2, r3
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801220e:	887b      	ldrh	r3, [r7, #2]
 8012210:	4618      	mov	r0, r3
 8012212:	f7f8 fdd1 	bl	800adb8 <lwip_htons>
 8012216:	4603      	mov	r3, r0
 8012218:	461a      	mov	r2, r3
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	2200      	movs	r2, #0
 8012222:	719a      	strb	r2, [r3, #6]
 8012224:	2200      	movs	r2, #0
 8012226:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	891b      	ldrh	r3, [r3, #8]
 801222c:	4618      	mov	r0, r3
 801222e:	f7f8 fdc3 	bl	800adb8 <lwip_htons>
 8012232:	4603      	mov	r3, r0
 8012234:	461a      	mov	r2, r3
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801223a:	2311      	movs	r3, #17
 801223c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	7a9b      	ldrb	r3, [r3, #10]
 8012242:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	7a5b      	ldrb	r3, [r3, #9]
 8012248:	7cb9      	ldrb	r1, [r7, #18]
 801224a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801224c:	9202      	str	r2, [sp, #8]
 801224e:	7cfa      	ldrb	r2, [r7, #19]
 8012250:	9201      	str	r2, [sp, #4]
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	460b      	mov	r3, r1
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801225a:	69f8      	ldr	r0, [r7, #28]
 801225c:	f003 fac4 	bl	80157e8 <ip4_output_if_src>
 8012260:	4603      	mov	r3, r0
 8012262:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012264:	69fa      	ldr	r2, [r7, #28]
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	429a      	cmp	r2, r3
 801226a:	d004      	beq.n	8012276 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 801226c:	69f8      	ldr	r0, [r7, #28]
 801226e:	f7f9 ff7b 	bl	800c168 <pbuf_free>
    q = NULL;
 8012272:	2300      	movs	r3, #0
 8012274:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012276:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801227a:	4618      	mov	r0, r3
 801227c:	3720      	adds	r7, #32
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	0801a1b8 	.word	0x0801a1b8
 8012288:	0801a224 	.word	0x0801a224
 801228c:	0801a1fc 	.word	0x0801a1fc

08012290 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	4613      	mov	r3, r2
 801229c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d101      	bne.n	80122a8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80122a4:	4b30      	ldr	r3, [pc, #192]	; (8012368 <udp_bind+0xd8>)
 80122a6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d002      	beq.n	80122b4 <udp_bind+0x24>
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d102      	bne.n	80122ba <udp_bind+0x2a>
    return ERR_VAL;
 80122b4:	f06f 0305 	mvn.w	r3, #5
 80122b8:	e052      	b.n	8012360 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122be:	4b2b      	ldr	r3, [pc, #172]	; (801236c <udp_bind+0xdc>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	e009      	b.n	80122da <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d102      	bne.n	80122d4 <udp_bind+0x44>
      rebind = 1;
 80122ce:	2301      	movs	r3, #1
 80122d0:	74fb      	strb	r3, [r7, #19]
      break;
 80122d2:	e005      	b.n	80122e0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	617b      	str	r3, [r7, #20]
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d1f2      	bne.n	80122c6 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80122e0:	88fb      	ldrh	r3, [r7, #6]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d109      	bne.n	80122fa <udp_bind+0x6a>
    port = udp_new_port();
 80122e6:	f7ff fda1 	bl	8011e2c <udp_new_port>
 80122ea:	4603      	mov	r3, r0
 80122ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80122ee:	88fb      	ldrh	r3, [r7, #6]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d11e      	bne.n	8012332 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80122f4:	f06f 0307 	mvn.w	r3, #7
 80122f8:	e032      	b.n	8012360 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122fa:	4b1c      	ldr	r3, [pc, #112]	; (801236c <udp_bind+0xdc>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	617b      	str	r3, [r7, #20]
 8012300:	e014      	b.n	801232c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	429a      	cmp	r2, r3
 8012308:	d00d      	beq.n	8012326 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	8a5b      	ldrh	r3, [r3, #18]
 801230e:	88fa      	ldrh	r2, [r7, #6]
 8012310:	429a      	cmp	r2, r3
 8012312:	d108      	bne.n	8012326 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801231c:	429a      	cmp	r2, r3
 801231e:	d102      	bne.n	8012326 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012320:	f06f 0307 	mvn.w	r3, #7
 8012324:	e01c      	b.n	8012360 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	617b      	str	r3, [r7, #20]
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1e7      	bne.n	8012302 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <udp_bind+0xae>
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	e000      	b.n	8012340 <udp_bind+0xb0>
 801233e:	2300      	movs	r3, #0
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	88fa      	ldrh	r2, [r7, #6]
 8012348:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801234a:	7cfb      	ldrb	r3, [r7, #19]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d106      	bne.n	801235e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012350:	4b06      	ldr	r3, [pc, #24]	; (801236c <udp_bind+0xdc>)
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012358:	4a04      	ldr	r2, [pc, #16]	; (801236c <udp_bind+0xdc>)
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801235e:	2300      	movs	r3, #0
}
 8012360:	4618      	mov	r0, r3
 8012362:	3718      	adds	r7, #24
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}
 8012368:	080262e4 	.word	0x080262e4
 801236c:	2000faec 	.word	0x2000faec

08012370 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	4613      	mov	r3, r2
 801237c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d002      	beq.n	801238a <udp_connect+0x1a>
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d102      	bne.n	8012390 <udp_connect+0x20>
    return ERR_VAL;
 801238a:	f06f 0305 	mvn.w	r3, #5
 801238e:	e03e      	b.n	801240e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	8a5b      	ldrh	r3, [r3, #18]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d10f      	bne.n	80123b8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012398:	68f9      	ldr	r1, [r7, #12]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	8a5b      	ldrh	r3, [r3, #18]
 801239e:	461a      	mov	r2, r3
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f7ff ff75 	bl	8012290 <udp_bind>
 80123a6:	4603      	mov	r3, r0
 80123a8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80123aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d002      	beq.n	80123b8 <udp_connect+0x48>
      return err;
 80123b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b6:	e02a      	b.n	801240e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <udp_connect+0x54>
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	e000      	b.n	80123c6 <udp_connect+0x56>
 80123c4:	2300      	movs	r3, #0
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	88fa      	ldrh	r2, [r7, #6]
 80123ce:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	7c1b      	ldrb	r3, [r3, #16]
 80123d4:	f043 0304 	orr.w	r3, r3, #4
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123de:	4b0e      	ldr	r3, [pc, #56]	; (8012418 <udp_connect+0xa8>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e008      	b.n	80123f8 <udp_connect+0x88>
    if (pcb == ipcb) {
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d101      	bne.n	80123f2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	e00d      	b.n	801240e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	617b      	str	r3, [r7, #20]
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1f3      	bne.n	80123e6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80123fe:	4b06      	ldr	r3, [pc, #24]	; (8012418 <udp_connect+0xa8>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012406:	4a04      	ldr	r2, [pc, #16]	; (8012418 <udp_connect+0xa8>)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	2000faec 	.word	0x2000faec

0801241c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801241c:	b480      	push	{r7}
 801241e:	b085      	sub	sp, #20
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	68ba      	ldr	r2, [r7, #8]
 801242c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	61da      	str	r2, [r3, #28]
}
 8012434:	bf00      	nop
 8012436:	3714      	adds	r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243e:	4770      	bx	lr

08012440 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012448:	4b15      	ldr	r3, [pc, #84]	; (80124a0 <udp_remove+0x60>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	429a      	cmp	r2, r3
 8012450:	d105      	bne.n	801245e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012452:	4b13      	ldr	r3, [pc, #76]	; (80124a0 <udp_remove+0x60>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	4a11      	ldr	r2, [pc, #68]	; (80124a0 <udp_remove+0x60>)
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	e017      	b.n	801248e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801245e:	4b10      	ldr	r3, [pc, #64]	; (80124a0 <udp_remove+0x60>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	e010      	b.n	8012488 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d009      	beq.n	8012482 <udp_remove+0x42>
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	68db      	ldr	r3, [r3, #12]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	429a      	cmp	r2, r3
 8012476:	d104      	bne.n	8012482 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	68da      	ldr	r2, [r3, #12]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	60da      	str	r2, [r3, #12]
        break;
 8012480:	e005      	b.n	801248e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	60fb      	str	r3, [r7, #12]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d1eb      	bne.n	8012466 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801248e:	6879      	ldr	r1, [r7, #4]
 8012490:	2000      	movs	r0, #0
 8012492:	f7f9 f907 	bl	800b6a4 <memp_free>
}
 8012496:	bf00      	nop
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	2000faec 	.word	0x2000faec

080124a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80124aa:	2000      	movs	r0, #0
 80124ac:	f7f9 f8a8 	bl	800b600 <memp_malloc>
 80124b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d007      	beq.n	80124c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80124b8:	2220      	movs	r2, #32
 80124ba:	2100      	movs	r1, #0
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f004 fb5b 	bl	8016b78 <memset>
    pcb->ttl = UDP_TTL;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	22ff      	movs	r2, #255	; 0xff
 80124c6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80124c8:	687b      	ldr	r3, [r7, #4]
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3708      	adds	r7, #8
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	4603      	mov	r3, r0
 80124da:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80124dc:	f7ff ffe2 	bl	80124a4 <udp_new>
 80124e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80124e2:	68fb      	ldr	r3, [r7, #12]
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b085      	sub	sp, #20
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d01e      	beq.n	801253a <udp_netif_ip_addr_changed+0x4e>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d01a      	beq.n	801253a <udp_netif_ip_addr_changed+0x4e>
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d017      	beq.n	801253a <udp_netif_ip_addr_changed+0x4e>
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d013      	beq.n	801253a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012512:	4b0d      	ldr	r3, [pc, #52]	; (8012548 <udp_netif_ip_addr_changed+0x5c>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	60fb      	str	r3, [r7, #12]
 8012518:	e00c      	b.n	8012534 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	429a      	cmp	r2, r3
 8012524:	d103      	bne.n	801252e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	681a      	ldr	r2, [r3, #0]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	60fb      	str	r3, [r7, #12]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1ef      	bne.n	801251a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801253a:	bf00      	nop
 801253c:	3714      	adds	r7, #20
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	2000faec 	.word	0x2000faec

0801254c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012550:	4b20      	ldr	r3, [pc, #128]	; (80125d4 <dhcp_inc_pcb_refcount+0x88>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d133      	bne.n	80125c0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012558:	4b1f      	ldr	r3, [pc, #124]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d005      	beq.n	801256c <dhcp_inc_pcb_refcount+0x20>
 8012560:	4b1e      	ldr	r3, [pc, #120]	; (80125dc <dhcp_inc_pcb_refcount+0x90>)
 8012562:	22d9      	movs	r2, #217	; 0xd9
 8012564:	491e      	ldr	r1, [pc, #120]	; (80125e0 <dhcp_inc_pcb_refcount+0x94>)
 8012566:	481f      	ldr	r0, [pc, #124]	; (80125e4 <dhcp_inc_pcb_refcount+0x98>)
 8012568:	f004 fb0e 	bl	8016b88 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801256c:	f7ff ff9a 	bl	80124a4 <udp_new>
 8012570:	4602      	mov	r2, r0
 8012572:	4b19      	ldr	r3, [pc, #100]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 8012574:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8012576:	4b18      	ldr	r3, [pc, #96]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d102      	bne.n	8012584 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012582:	e024      	b.n	80125ce <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012584:	4b14      	ldr	r3, [pc, #80]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	7a1a      	ldrb	r2, [r3, #8]
 801258a:	4b13      	ldr	r3, [pc, #76]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f042 0220 	orr.w	r2, r2, #32
 8012592:	b2d2      	uxtb	r2, r2
 8012594:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8012596:	4b10      	ldr	r3, [pc, #64]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2244      	movs	r2, #68	; 0x44
 801259c:	4912      	ldr	r1, [pc, #72]	; (80125e8 <dhcp_inc_pcb_refcount+0x9c>)
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fe76 	bl	8012290 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80125a4:	4b0c      	ldr	r3, [pc, #48]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2243      	movs	r2, #67	; 0x43
 80125aa:	490f      	ldr	r1, [pc, #60]	; (80125e8 <dhcp_inc_pcb_refcount+0x9c>)
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7ff fedf 	bl	8012370 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80125b2:	4b09      	ldr	r3, [pc, #36]	; (80125d8 <dhcp_inc_pcb_refcount+0x8c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2200      	movs	r2, #0
 80125b8:	490c      	ldr	r1, [pc, #48]	; (80125ec <dhcp_inc_pcb_refcount+0xa0>)
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ff ff2e 	bl	801241c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80125c0:	4b04      	ldr	r3, [pc, #16]	; (80125d4 <dhcp_inc_pcb_refcount+0x88>)
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	b2da      	uxtb	r2, r3
 80125c8:	4b02      	ldr	r3, [pc, #8]	; (80125d4 <dhcp_inc_pcb_refcount+0x88>)
 80125ca:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80125cc:	2300      	movs	r3, #0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	20008c84 	.word	0x20008c84
 80125d8:	20008c80 	.word	0x20008c80
 80125dc:	0801a254 	.word	0x0801a254
 80125e0:	0801a28c 	.word	0x0801a28c
 80125e4:	0801a2b4 	.word	0x0801a2b4
 80125e8:	080262e4 	.word	0x080262e4
 80125ec:	08013ca9 	.word	0x08013ca9

080125f0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80125f4:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <dhcp_dec_pcb_refcount+0x40>)
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d105      	bne.n	8012608 <dhcp_dec_pcb_refcount+0x18>
 80125fc:	4b0d      	ldr	r3, [pc, #52]	; (8012634 <dhcp_dec_pcb_refcount+0x44>)
 80125fe:	22f3      	movs	r2, #243	; 0xf3
 8012600:	490d      	ldr	r1, [pc, #52]	; (8012638 <dhcp_dec_pcb_refcount+0x48>)
 8012602:	480e      	ldr	r0, [pc, #56]	; (801263c <dhcp_dec_pcb_refcount+0x4c>)
 8012604:	f004 fac0 	bl	8016b88 <iprintf>
  dhcp_pcb_refcount--;
 8012608:	4b09      	ldr	r3, [pc, #36]	; (8012630 <dhcp_dec_pcb_refcount+0x40>)
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	3b01      	subs	r3, #1
 801260e:	b2da      	uxtb	r2, r3
 8012610:	4b07      	ldr	r3, [pc, #28]	; (8012630 <dhcp_dec_pcb_refcount+0x40>)
 8012612:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012614:	4b06      	ldr	r3, [pc, #24]	; (8012630 <dhcp_dec_pcb_refcount+0x40>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d107      	bne.n	801262c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801261c:	4b08      	ldr	r3, [pc, #32]	; (8012640 <dhcp_dec_pcb_refcount+0x50>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff ff0d 	bl	8012440 <udp_remove>
    dhcp_pcb = NULL;
 8012626:	4b06      	ldr	r3, [pc, #24]	; (8012640 <dhcp_dec_pcb_refcount+0x50>)
 8012628:	2200      	movs	r2, #0
 801262a:	601a      	str	r2, [r3, #0]
  }
}
 801262c:	bf00      	nop
 801262e:	bd80      	pop	{r7, pc}
 8012630:	20008c84 	.word	0x20008c84
 8012634:	0801a254 	.word	0x0801a254
 8012638:	0801a2dc 	.word	0x0801a2dc
 801263c:	0801a2b4 	.word	0x0801a2b4
 8012640:	20008c80 	.word	0x20008c80

08012644 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a1b      	ldr	r3, [r3, #32]
 8012650:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012652:	210c      	movs	r1, #12
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f000 ff85 	bl	8013564 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801265a:	4b06      	ldr	r3, [pc, #24]	; (8012674 <dhcp_handle_nak+0x30>)
 801265c:	4a05      	ldr	r2, [pc, #20]	; (8012674 <dhcp_handle_nak+0x30>)
 801265e:	4905      	ldr	r1, [pc, #20]	; (8012674 <dhcp_handle_nak+0x30>)
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7f9 f8ad 	bl	800b7c0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f000 fbb6 	bl	8012dd8 <dhcp_discover>
}
 801266c:	bf00      	nop
 801266e:	3710      	adds	r7, #16
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	080262e4 	.word	0x080262e4

08012678 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a1b      	ldr	r3, [r3, #32]
 8012684:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012686:	2108      	movs	r1, #8
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f000 ff6b 	bl	8013564 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3328      	adds	r3, #40	; 0x28
 8012692:	2200      	movs	r2, #0
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f002 fb1e 	bl	8014cd8 <etharp_query>
 801269c:	4603      	mov	r3, r0
 801269e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	7a9b      	ldrb	r3, [r3, #10]
 80126a4:	2bff      	cmp	r3, #255	; 0xff
 80126a6:	d005      	beq.n	80126b4 <dhcp_check+0x3c>
    dhcp->tries++;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	7a9b      	ldrb	r3, [r3, #10]
 80126ac:	3301      	adds	r3, #1
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80126b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80126b8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80126ba:	893b      	ldrh	r3, [r7, #8]
 80126bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126c0:	4a06      	ldr	r2, [pc, #24]	; (80126dc <dhcp_check+0x64>)
 80126c2:	fb82 1203 	smull	r1, r2, r2, r3
 80126c6:	1152      	asrs	r2, r2, #5
 80126c8:	17db      	asrs	r3, r3, #31
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	b29a      	uxth	r2, r3
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80126d2:	bf00      	nop
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	10624dd3 	.word	0x10624dd3

080126e0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80126ee:	4b0c      	ldr	r3, [pc, #48]	; (8012720 <dhcp_handle_offer+0x40>)
 80126f0:	789b      	ldrb	r3, [r3, #2]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00f      	beq.n	8012716 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80126f6:	4b0b      	ldr	r3, [pc, #44]	; (8012724 <dhcp_handle_offer+0x44>)
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7f8 fb6a 	bl	800add4 <lwip_htonl>
 8012700:	4602      	mov	r2, r0
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	691a      	ldr	r2, [r3, #16]
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f809 	bl	8012728 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8012716:	bf00      	nop
 8012718:	3710      	adds	r7, #16
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	2000faf0 	.word	0x2000faf0
 8012724:	2000faf8 	.word	0x2000faf8

08012728 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b088      	sub	sp, #32
 801272c:	af02      	add	r7, sp, #8
 801272e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6a1b      	ldr	r3, [r3, #32]
 8012734:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012736:	2101      	movs	r1, #1
 8012738:	6938      	ldr	r0, [r7, #16]
 801273a:	f000 ff13 	bl	8013564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801273e:	2203      	movs	r2, #3
 8012740:	6939      	ldr	r1, [r7, #16]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f001 fb94 	bl	8013e70 <dhcp_create_msg>
 8012748:	4603      	mov	r3, r0
 801274a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801274c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d159      	bne.n	8012808 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012754:	2202      	movs	r2, #2
 8012756:	2139      	movs	r1, #57	; 0x39
 8012758:	6938      	ldr	r0, [r7, #16]
 801275a:	f000 ff1d 	bl	8013598 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012762:	4619      	mov	r1, r3
 8012764:	6938      	ldr	r0, [r7, #16]
 8012766:	f000 ff79 	bl	801365c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801276a:	2204      	movs	r2, #4
 801276c:	2132      	movs	r1, #50	; 0x32
 801276e:	6938      	ldr	r0, [r7, #16]
 8012770:	f000 ff12 	bl	8013598 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012778:	4618      	mov	r0, r3
 801277a:	f7f8 fb2b 	bl	800add4 <lwip_htonl>
 801277e:	4603      	mov	r3, r0
 8012780:	4619      	mov	r1, r3
 8012782:	6938      	ldr	r0, [r7, #16]
 8012784:	f000 ffa4 	bl	80136d0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8012788:	2204      	movs	r2, #4
 801278a:	2136      	movs	r1, #54	; 0x36
 801278c:	6938      	ldr	r0, [r7, #16]
 801278e:	f000 ff03 	bl	8013598 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012796:	4618      	mov	r0, r3
 8012798:	f7f8 fb1c 	bl	800add4 <lwip_htonl>
 801279c:	4603      	mov	r3, r0
 801279e:	4619      	mov	r1, r3
 80127a0:	6938      	ldr	r0, [r7, #16]
 80127a2:	f000 ff95 	bl	80136d0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80127a6:	2203      	movs	r2, #3
 80127a8:	2137      	movs	r1, #55	; 0x37
 80127aa:	6938      	ldr	r0, [r7, #16]
 80127ac:	f000 fef4 	bl	8013598 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80127b0:	2300      	movs	r3, #0
 80127b2:	75fb      	strb	r3, [r7, #23]
 80127b4:	e009      	b.n	80127ca <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	4a29      	ldr	r2, [pc, #164]	; (8012860 <dhcp_select+0x138>)
 80127ba:	5cd3      	ldrb	r3, [r2, r3]
 80127bc:	4619      	mov	r1, r3
 80127be:	6938      	ldr	r0, [r7, #16]
 80127c0:	f000 ff24 	bl	801360c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80127c4:	7dfb      	ldrb	r3, [r7, #23]
 80127c6:	3301      	adds	r3, #1
 80127c8:	75fb      	strb	r3, [r7, #23]
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	2b02      	cmp	r3, #2
 80127ce:	d9f2      	bls.n	80127b6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80127d0:	6938      	ldr	r0, [r7, #16]
 80127d2:	f001 fcf1 	bl	80141b8 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	68da      	ldr	r2, [r3, #12]
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	8a9b      	ldrh	r3, [r3, #20]
 80127de:	33f0      	adds	r3, #240	; 0xf0
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	4619      	mov	r1, r3
 80127e4:	4610      	mov	r0, r2
 80127e6:	f7f9 fb4b 	bl	800be80 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80127ea:	4b1e      	ldr	r3, [pc, #120]	; (8012864 <dhcp_select+0x13c>)
 80127ec:	6818      	ldr	r0, [r3, #0]
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	68d9      	ldr	r1, [r3, #12]
 80127f2:	4b1d      	ldr	r3, [pc, #116]	; (8012868 <dhcp_select+0x140>)
 80127f4:	9301      	str	r3, [sp, #4]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	9300      	str	r3, [sp, #0]
 80127fa:	2343      	movs	r3, #67	; 0x43
 80127fc:	4a1b      	ldr	r2, [pc, #108]	; (801286c <dhcp_select+0x144>)
 80127fe:	f7ff fcad 	bl	801215c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012802:	6938      	ldr	r0, [r7, #16]
 8012804:	f001 fc96 	bl	8014134 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	7a9b      	ldrb	r3, [r3, #10]
 801280c:	2bff      	cmp	r3, #255	; 0xff
 801280e:	d005      	beq.n	801281c <dhcp_select+0xf4>
    dhcp->tries++;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	7a9b      	ldrb	r3, [r3, #10]
 8012814:	3301      	adds	r3, #1
 8012816:	b2da      	uxtb	r2, r3
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	7a9b      	ldrb	r3, [r3, #10]
 8012820:	2b05      	cmp	r3, #5
 8012822:	d807      	bhi.n	8012834 <dhcp_select+0x10c>
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	7a9b      	ldrb	r3, [r3, #10]
 8012828:	461a      	mov	r2, r3
 801282a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801282e:	4093      	lsls	r3, r2
 8012830:	b29b      	uxth	r3, r3
 8012832:	e001      	b.n	8012838 <dhcp_select+0x110>
 8012834:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012838:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801283a:	89bb      	ldrh	r3, [r7, #12]
 801283c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012840:	4a0b      	ldr	r2, [pc, #44]	; (8012870 <dhcp_select+0x148>)
 8012842:	fb82 1203 	smull	r1, r2, r2, r3
 8012846:	1152      	asrs	r2, r2, #5
 8012848:	17db      	asrs	r3, r3, #31
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	b29a      	uxth	r2, r3
 801284e:	693b      	ldr	r3, [r7, #16]
 8012850:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012856:	4618      	mov	r0, r3
 8012858:	3718      	adds	r7, #24
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	2000001c 	.word	0x2000001c
 8012864:	20008c80 	.word	0x20008c80
 8012868:	080262e4 	.word	0x080262e4
 801286c:	080262e8 	.word	0x080262e8
 8012870:	10624dd3 	.word	0x10624dd3

08012874 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801287a:	4b27      	ldr	r3, [pc, #156]	; (8012918 <dhcp_coarse_tmr+0xa4>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8012880:	e042      	b.n	8012908 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6a1b      	ldr	r3, [r3, #32]
 8012886:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d039      	beq.n	8012902 <dhcp_coarse_tmr+0x8e>
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	7a5b      	ldrb	r3, [r3, #9]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d035      	beq.n	8012902 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801289a:	2b00      	cmp	r3, #0
 801289c:	d012      	beq.n	80128c4 <dhcp_coarse_tmr+0x50>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	8c1b      	ldrh	r3, [r3, #32]
 80128a2:	3301      	adds	r3, #1
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	841a      	strh	r2, [r3, #32]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	8c1a      	ldrh	r2, [r3, #32]
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d106      	bne.n	80128c4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 fd94 	bl	80133e4 <dhcp_release>
        dhcp_discover(netif);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 fa8b 	bl	8012dd8 <dhcp_discover>
 80128c2:	e01e      	b.n	8012902 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	8bdb      	ldrh	r3, [r3, #30]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00b      	beq.n	80128e4 <dhcp_coarse_tmr+0x70>
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	8bdb      	ldrh	r3, [r3, #30]
 80128d0:	1e5a      	subs	r2, r3, #1
 80128d2:	b291      	uxth	r1, r2
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	83d1      	strh	r1, [r2, #30]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d103      	bne.n	80128e4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f000 f8c6 	bl	8012a6e <dhcp_t2_timeout>
 80128e2:	e00e      	b.n	8012902 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	8b9b      	ldrh	r3, [r3, #28]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00a      	beq.n	8012902 <dhcp_coarse_tmr+0x8e>
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	8b9b      	ldrh	r3, [r3, #28]
 80128f0:	1e5a      	subs	r2, r3, #1
 80128f2:	b291      	uxth	r1, r2
 80128f4:	683a      	ldr	r2, [r7, #0]
 80128f6:	8391      	strh	r1, [r2, #28]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d102      	bne.n	8012902 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 f888 	bl	8012a12 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1b9      	bne.n	8012882 <dhcp_coarse_tmr+0xe>
  }
}
 801290e:	bf00      	nop
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	2000fac4 	.word	0x2000fac4

0801291c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8012922:	4b16      	ldr	r3, [pc, #88]	; (801297c <dhcp_fine_tmr+0x60>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8012928:	e020      	b.n	801296c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6a1b      	ldr	r3, [r3, #32]
 801292e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d017      	beq.n	8012966 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	8adb      	ldrh	r3, [r3, #22]
 801293a:	2b01      	cmp	r3, #1
 801293c:	d906      	bls.n	801294c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	8adb      	ldrh	r3, [r3, #22]
 8012942:	3b01      	subs	r3, #1
 8012944:	b29a      	uxth	r2, r3
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	82da      	strh	r2, [r3, #22]
 801294a:	e00c      	b.n	8012966 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	8adb      	ldrh	r3, [r3, #22]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d108      	bne.n	8012966 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	8adb      	ldrh	r3, [r3, #22]
 8012958:	3b01      	subs	r3, #1
 801295a:	b29a      	uxth	r2, r3
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f80d 	bl	8012980 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1db      	bne.n	801292a <dhcp_fine_tmr+0xe>
  }
}
 8012972:	bf00      	nop
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	2000fac4 	.word	0x2000fac4

08012980 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6a1b      	ldr	r3, [r3, #32]
 801298c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	7a5b      	ldrb	r3, [r3, #9]
 8012992:	2b0c      	cmp	r3, #12
 8012994:	d003      	beq.n	801299e <dhcp_timeout+0x1e>
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	7a5b      	ldrb	r3, [r3, #9]
 801299a:	2b06      	cmp	r3, #6
 801299c:	d103      	bne.n	80129a6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 fa1a 	bl	8012dd8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80129a4:	e031      	b.n	8012a0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	7a5b      	ldrb	r3, [r3, #9]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d10e      	bne.n	80129cc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	7a9b      	ldrb	r3, [r3, #10]
 80129b2:	2b05      	cmp	r3, #5
 80129b4:	d803      	bhi.n	80129be <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7ff feb6 	bl	8012728 <dhcp_select>
}
 80129bc:	e025      	b.n	8012a0a <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f000 fd10 	bl	80133e4 <dhcp_release>
      dhcp_discover(netif);
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f000 fa07 	bl	8012dd8 <dhcp_discover>
}
 80129ca:	e01e      	b.n	8012a0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	7a5b      	ldrb	r3, [r3, #9]
 80129d0:	2b08      	cmp	r3, #8
 80129d2:	d10b      	bne.n	80129ec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	7a9b      	ldrb	r3, [r3, #10]
 80129d8:	2b01      	cmp	r3, #1
 80129da:	d803      	bhi.n	80129e4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff fe4b 	bl	8012678 <dhcp_check>
}
 80129e2:	e012      	b.n	8012a0a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f000 fa83 	bl	8012ef0 <dhcp_bind>
}
 80129ea:	e00e      	b.n	8012a0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	7a5b      	ldrb	r3, [r3, #9]
 80129f0:	2b03      	cmp	r3, #3
 80129f2:	d10a      	bne.n	8012a0a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	7a9b      	ldrb	r3, [r3, #10]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d803      	bhi.n	8012a04 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 fc5d 	bl	80132bc <dhcp_reboot>
}
 8012a02:	e002      	b.n	8012a0a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f9e7 	bl	8012dd8 <dhcp_discover>
}
 8012a0a:	bf00      	nop
 8012a0c:	3710      	adds	r7, #16
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b084      	sub	sp, #16
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6a1b      	ldr	r3, [r3, #32]
 8012a1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	7a5b      	ldrb	r3, [r3, #9]
 8012a24:	2b01      	cmp	r3, #1
 8012a26:	d007      	beq.n	8012a38 <dhcp_t1_timeout+0x26>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	7a5b      	ldrb	r3, [r3, #9]
 8012a2c:	2b0a      	cmp	r3, #10
 8012a2e:	d003      	beq.n	8012a38 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a34:	2b05      	cmp	r3, #5
 8012a36:	d116      	bne.n	8012a66 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f000 fb33 	bl	80130a4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	8b5b      	ldrh	r3, [r3, #26]
 8012a42:	461a      	mov	r2, r3
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	8c1b      	ldrh	r3, [r3, #32]
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	dd0b      	ble.n	8012a66 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	8b5b      	ldrh	r3, [r3, #26]
 8012a52:	461a      	mov	r2, r3
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	8c1b      	ldrh	r3, [r3, #32]
 8012a58:	1ad3      	subs	r3, r2, r3
 8012a5a:	0fda      	lsrs	r2, r3, #31
 8012a5c:	4413      	add	r3, r2
 8012a5e:	105b      	asrs	r3, r3, #1
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8012a66:	bf00      	nop
 8012a68:	3710      	adds	r7, #16
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}

08012a6e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012a6e:	b580      	push	{r7, lr}
 8012a70:	b084      	sub	sp, #16
 8012a72:	af00      	add	r7, sp, #0
 8012a74:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6a1b      	ldr	r3, [r3, #32]
 8012a7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	7a5b      	ldrb	r3, [r3, #9]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d00b      	beq.n	8012a9c <dhcp_t2_timeout+0x2e>
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	7a5b      	ldrb	r3, [r3, #9]
 8012a88:	2b0a      	cmp	r3, #10
 8012a8a:	d007      	beq.n	8012a9c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012a90:	2b05      	cmp	r3, #5
 8012a92:	d003      	beq.n	8012a9c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	7a5b      	ldrb	r3, [r3, #9]
 8012a98:	2b04      	cmp	r3, #4
 8012a9a:	d116      	bne.n	8012aca <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 fb87 	bl	80131b0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	8c1b      	ldrh	r3, [r3, #32]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	2b01      	cmp	r3, #1
 8012ab0:	dd0b      	ble.n	8012aca <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	8c1b      	ldrh	r3, [r3, #32]
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	0fda      	lsrs	r2, r3, #31
 8012ac0:	4413      	add	r3, r2
 8012ac2:	105b      	asrs	r3, r3, #1
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8012aca:	bf00      	nop
 8012acc:	3710      	adds	r7, #16
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
	...

08012ad4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a1b      	ldr	r3, [r3, #32]
 8012ae0:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2200      	movs	r2, #0
 8012aec:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012aee:	4b27      	ldr	r3, [pc, #156]	; (8012b8c <dhcp_handle_ack+0xb8>)
 8012af0:	78db      	ldrb	r3, [r3, #3]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d003      	beq.n	8012afe <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012af6:	4b26      	ldr	r3, [pc, #152]	; (8012b90 <dhcp_handle_ack+0xbc>)
 8012af8:	68da      	ldr	r2, [r3, #12]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012afe:	4b23      	ldr	r3, [pc, #140]	; (8012b8c <dhcp_handle_ack+0xb8>)
 8012b00:	791b      	ldrb	r3, [r3, #4]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d004      	beq.n	8012b10 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012b06:	4b22      	ldr	r3, [pc, #136]	; (8012b90 <dhcp_handle_ack+0xbc>)
 8012b08:	691a      	ldr	r2, [r3, #16]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	639a      	str	r2, [r3, #56]	; 0x38
 8012b0e:	e004      	b.n	8012b1a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b14:	085a      	lsrs	r2, r3, #1
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012b1a:	4b1c      	ldr	r3, [pc, #112]	; (8012b8c <dhcp_handle_ack+0xb8>)
 8012b1c:	795b      	ldrb	r3, [r3, #5]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d004      	beq.n	8012b2c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012b22:	4b1b      	ldr	r3, [pc, #108]	; (8012b90 <dhcp_handle_ack+0xbc>)
 8012b24:	695a      	ldr	r2, [r3, #20]
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	63da      	str	r2, [r3, #60]	; 0x3c
 8012b2a:	e007      	b.n	8012b3c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b30:	4613      	mov	r3, r2
 8012b32:	00db      	lsls	r3, r3, #3
 8012b34:	1a9b      	subs	r3, r3, r2
 8012b36:	08da      	lsrs	r2, r3, #3
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	691a      	ldr	r2, [r3, #16]
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012b46:	4b11      	ldr	r3, [pc, #68]	; (8012b8c <dhcp_handle_ack+0xb8>)
 8012b48:	799b      	ldrb	r3, [r3, #6]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00b      	beq.n	8012b66 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012b4e:	4b10      	ldr	r3, [pc, #64]	; (8012b90 <dhcp_handle_ack+0xbc>)
 8012b50:	699b      	ldr	r3, [r3, #24]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7f8 f93e 	bl	800add4 <lwip_htonl>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	2201      	movs	r2, #1
 8012b62:	72da      	strb	r2, [r3, #11]
 8012b64:	e002      	b.n	8012b6c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012b6c:	4b07      	ldr	r3, [pc, #28]	; (8012b8c <dhcp_handle_ack+0xb8>)
 8012b6e:	79db      	ldrb	r3, [r3, #7]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d007      	beq.n	8012b84 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012b74:	4b06      	ldr	r3, [pc, #24]	; (8012b90 <dhcp_handle_ack+0xbc>)
 8012b76:	69db      	ldr	r3, [r3, #28]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7f8 f92b 	bl	800add4 <lwip_htonl>
 8012b7e:	4602      	mov	r2, r0
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012b84:	bf00      	nop
 8012b86:	3710      	adds	r7, #16
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	2000faf0 	.word	0x2000faf0
 8012b90:	2000faf8 	.word	0x2000faf8

08012b94 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d109      	bne.n	8012bb6 <dhcp_start+0x22>
 8012ba2:	4b3c      	ldr	r3, [pc, #240]	; (8012c94 <dhcp_start+0x100>)
 8012ba4:	f240 22d6 	movw	r2, #726	; 0x2d6
 8012ba8:	493b      	ldr	r1, [pc, #236]	; (8012c98 <dhcp_start+0x104>)
 8012baa:	483c      	ldr	r0, [pc, #240]	; (8012c9c <dhcp_start+0x108>)
 8012bac:	f003 ffec 	bl	8016b88 <iprintf>
 8012bb0:	f06f 030f 	mvn.w	r3, #15
 8012bb4:	e069      	b.n	8012c8a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d109      	bne.n	8012bd8 <dhcp_start+0x44>
 8012bc4:	4b33      	ldr	r3, [pc, #204]	; (8012c94 <dhcp_start+0x100>)
 8012bc6:	f240 22d7 	movw	r2, #727	; 0x2d7
 8012bca:	4935      	ldr	r1, [pc, #212]	; (8012ca0 <dhcp_start+0x10c>)
 8012bcc:	4833      	ldr	r0, [pc, #204]	; (8012c9c <dhcp_start+0x108>)
 8012bce:	f003 ffdb 	bl	8016b88 <iprintf>
 8012bd2:	f06f 030f 	mvn.w	r3, #15
 8012bd6:	e058      	b.n	8012c8a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6a1b      	ldr	r3, [r3, #32]
 8012bdc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012be2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012be6:	d202      	bcs.n	8012bee <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bec:	e04d      	b.n	8012c8a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10d      	bne.n	8012c10 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012bf4:	2040      	movs	r0, #64	; 0x40
 8012bf6:	f7f8 fb93 	bl	800b320 <mem_malloc>
 8012bfa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c06:	e040      	b.n	8012c8a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	68fa      	ldr	r2, [r7, #12]
 8012c0c:	621a      	str	r2, [r3, #32]
 8012c0e:	e01b      	b.n	8012c48 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d006      	beq.n	8012c26 <dhcp_start+0x92>
 8012c18:	4b1e      	ldr	r3, [pc, #120]	; (8012c94 <dhcp_start+0x100>)
 8012c1a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8012c1e:	4921      	ldr	r1, [pc, #132]	; (8012ca4 <dhcp_start+0x110>)
 8012c20:	481e      	ldr	r0, [pc, #120]	; (8012c9c <dhcp_start+0x108>)
 8012c22:	f003 ffb1 	bl	8016b88 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d006      	beq.n	8012c3c <dhcp_start+0xa8>
 8012c2e:	4b19      	ldr	r3, [pc, #100]	; (8012c94 <dhcp_start+0x100>)
 8012c30:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012c34:	491c      	ldr	r1, [pc, #112]	; (8012ca8 <dhcp_start+0x114>)
 8012c36:	4819      	ldr	r0, [pc, #100]	; (8012c9c <dhcp_start+0x108>)
 8012c38:	f003 ffa6 	bl	8016b88 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	7a1b      	ldrb	r3, [r3, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d001      	beq.n	8012c48 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012c44:	f7ff fcd4 	bl	80125f0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012c48:	2240      	movs	r2, #64	; 0x40
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f003 ff93 	bl	8016b78 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012c52:	f7ff fc7b 	bl	801254c <dhcp_inc_pcb_refcount>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d002      	beq.n	8012c62 <dhcp_start+0xce>
    return ERR_MEM;
 8012c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c60:	e013      	b.n	8012c8a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2201      	movs	r2, #1
 8012c66:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 f8b5 	bl	8012dd8 <dhcp_discover>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012c72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d005      	beq.n	8012c86 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 fc3a 	bl	80134f4 <dhcp_stop>
    return ERR_MEM;
 8012c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c84:	e001      	b.n	8012c8a <dhcp_start+0xf6>
  }
  return result;
 8012c86:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	0801a254 	.word	0x0801a254
 8012c98:	0801a300 	.word	0x0801a300
 8012c9c:	0801a2b4 	.word	0x0801a2b4
 8012ca0:	0801a344 	.word	0x0801a344
 8012ca4:	0801a368 	.word	0x0801a368
 8012ca8:	0801a380 	.word	0x0801a380

08012cac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b084      	sub	sp, #16
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d107      	bne.n	8012ccc <dhcp_arp_reply+0x20>
 8012cbc:	4b0e      	ldr	r3, [pc, #56]	; (8012cf8 <dhcp_arp_reply+0x4c>)
 8012cbe:	f240 327b 	movw	r2, #891	; 0x37b
 8012cc2:	490e      	ldr	r1, [pc, #56]	; (8012cfc <dhcp_arp_reply+0x50>)
 8012cc4:	480e      	ldr	r0, [pc, #56]	; (8012d00 <dhcp_arp_reply+0x54>)
 8012cc6:	f003 ff5f 	bl	8016b88 <iprintf>
 8012cca:	e012      	b.n	8012cf2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6a1b      	ldr	r3, [r3, #32]
 8012cd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00c      	beq.n	8012cf2 <dhcp_arp_reply+0x46>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	7a5b      	ldrb	r3, [r3, #9]
 8012cdc:	2b08      	cmp	r3, #8
 8012cde:	d108      	bne.n	8012cf2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d102      	bne.n	8012cf2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f809 	bl	8012d04 <dhcp_decline>
    }
  }
}
 8012cf2:	3710      	adds	r7, #16
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	0801a254 	.word	0x0801a254
 8012cfc:	0801a300 	.word	0x0801a300
 8012d00:	0801a2b4 	.word	0x0801a2b4

08012d04 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af02      	add	r7, sp, #8
 8012d0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a1b      	ldr	r3, [r3, #32]
 8012d10:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012d16:	210c      	movs	r1, #12
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f000 fc23 	bl	8013564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8012d1e:	2204      	movs	r2, #4
 8012d20:	68f9      	ldr	r1, [r7, #12]
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f001 f8a4 	bl	8013e70 <dhcp_create_msg>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8012d2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d12a      	bne.n	8012d8a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012d34:	2204      	movs	r2, #4
 8012d36:	2132      	movs	r1, #50	; 0x32
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f000 fc2d 	bl	8013598 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7f8 f846 	bl	800add4 <lwip_htonl>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f000 fcbf 	bl	80136d0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8012d52:	68f8      	ldr	r0, [r7, #12]
 8012d54:	f001 fa30 	bl	80141b8 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	68da      	ldr	r2, [r3, #12]
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	8a9b      	ldrh	r3, [r3, #20]
 8012d60:	33f0      	adds	r3, #240	; 0xf0
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	4619      	mov	r1, r3
 8012d66:	4610      	mov	r0, r2
 8012d68:	f7f9 f88a 	bl	800be80 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012d6c:	4b16      	ldr	r3, [pc, #88]	; (8012dc8 <dhcp_decline+0xc4>)
 8012d6e:	6818      	ldr	r0, [r3, #0]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	68d9      	ldr	r1, [r3, #12]
 8012d74:	4b15      	ldr	r3, [pc, #84]	; (8012dcc <dhcp_decline+0xc8>)
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	2343      	movs	r3, #67	; 0x43
 8012d7e:	4a14      	ldr	r2, [pc, #80]	; (8012dd0 <dhcp_decline+0xcc>)
 8012d80:	f7ff f9ec 	bl	801215c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	f001 f9d5 	bl	8014134 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	7a9b      	ldrb	r3, [r3, #10]
 8012d8e:	2bff      	cmp	r3, #255	; 0xff
 8012d90:	d005      	beq.n	8012d9e <dhcp_decline+0x9a>
    dhcp->tries++;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	7a9b      	ldrb	r3, [r3, #10]
 8012d96:	3301      	adds	r3, #1
 8012d98:	b2da      	uxtb	r2, r3
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8012d9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8012da2:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012da4:	893b      	ldrh	r3, [r7, #8]
 8012da6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012daa:	4a0a      	ldr	r2, [pc, #40]	; (8012dd4 <dhcp_decline+0xd0>)
 8012dac:	fb82 1203 	smull	r1, r2, r2, r3
 8012db0:	1152      	asrs	r2, r2, #5
 8012db2:	17db      	asrs	r3, r3, #31
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012dbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	20008c80 	.word	0x20008c80
 8012dcc:	080262e4 	.word	0x080262e4
 8012dd0:	080262e8 	.word	0x080262e8
 8012dd4:	10624dd3 	.word	0x10624dd3

08012dd8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	af02      	add	r7, sp, #8
 8012dde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6a1b      	ldr	r3, [r3, #32]
 8012de4:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8012de6:	2300      	movs	r3, #0
 8012de8:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	2200      	movs	r2, #0
 8012dee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012df0:	2106      	movs	r1, #6
 8012df2:	6938      	ldr	r0, [r7, #16]
 8012df4:	f000 fbb6 	bl	8013564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8012df8:	2201      	movs	r2, #1
 8012dfa:	6939      	ldr	r1, [r7, #16]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f001 f837 	bl	8013e70 <dhcp_create_msg>
 8012e02:	4603      	mov	r3, r0
 8012e04:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d13b      	bne.n	8012e86 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012e0e:	2202      	movs	r2, #2
 8012e10:	2139      	movs	r1, #57	; 0x39
 8012e12:	6938      	ldr	r0, [r7, #16]
 8012e14:	f000 fbc0 	bl	8013598 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	6938      	ldr	r0, [r7, #16]
 8012e20:	f000 fc1c 	bl	801365c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e24:	2203      	movs	r2, #3
 8012e26:	2137      	movs	r1, #55	; 0x37
 8012e28:	6938      	ldr	r0, [r7, #16]
 8012e2a:	f000 fbb5 	bl	8013598 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e2e:	2300      	movs	r3, #0
 8012e30:	75fb      	strb	r3, [r7, #23]
 8012e32:	e009      	b.n	8012e48 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012e34:	7dfb      	ldrb	r3, [r7, #23]
 8012e36:	4a29      	ldr	r2, [pc, #164]	; (8012edc <dhcp_discover+0x104>)
 8012e38:	5cd3      	ldrb	r3, [r2, r3]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	6938      	ldr	r0, [r7, #16]
 8012e3e:	f000 fbe5 	bl	801360c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	3301      	adds	r3, #1
 8012e46:	75fb      	strb	r3, [r7, #23]
 8012e48:	7dfb      	ldrb	r3, [r7, #23]
 8012e4a:	2b02      	cmp	r3, #2
 8012e4c:	d9f2      	bls.n	8012e34 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8012e4e:	6938      	ldr	r0, [r7, #16]
 8012e50:	f001 f9b2 	bl	80141b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	68da      	ldr	r2, [r3, #12]
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	8a9b      	ldrh	r3, [r3, #20]
 8012e5c:	33f0      	adds	r3, #240	; 0xf0
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	4619      	mov	r1, r3
 8012e62:	4610      	mov	r0, r2
 8012e64:	f7f9 f80c 	bl	800be80 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012e68:	4b1d      	ldr	r3, [pc, #116]	; (8012ee0 <dhcp_discover+0x108>)
 8012e6a:	6818      	ldr	r0, [r3, #0]
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	68d9      	ldr	r1, [r3, #12]
 8012e70:	4b1c      	ldr	r3, [pc, #112]	; (8012ee4 <dhcp_discover+0x10c>)
 8012e72:	9301      	str	r3, [sp, #4]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	2343      	movs	r3, #67	; 0x43
 8012e7a:	4a1b      	ldr	r2, [pc, #108]	; (8012ee8 <dhcp_discover+0x110>)
 8012e7c:	f7ff f96e 	bl	801215c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8012e80:	6938      	ldr	r0, [r7, #16]
 8012e82:	f001 f957 	bl	8014134 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	7a9b      	ldrb	r3, [r3, #10]
 8012e8a:	2bff      	cmp	r3, #255	; 0xff
 8012e8c:	d005      	beq.n	8012e9a <dhcp_discover+0xc2>
    dhcp->tries++;
 8012e8e:	693b      	ldr	r3, [r7, #16]
 8012e90:	7a9b      	ldrb	r3, [r3, #10]
 8012e92:	3301      	adds	r3, #1
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	7a9b      	ldrb	r3, [r3, #10]
 8012e9e:	2b05      	cmp	r3, #5
 8012ea0:	d807      	bhi.n	8012eb2 <dhcp_discover+0xda>
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	7a9b      	ldrb	r3, [r3, #10]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012eac:	4093      	lsls	r3, r2
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	e001      	b.n	8012eb6 <dhcp_discover+0xde>
 8012eb2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012eb6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012eb8:	89bb      	ldrh	r3, [r7, #12]
 8012eba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ebe:	4a0b      	ldr	r2, [pc, #44]	; (8012eec <dhcp_discover+0x114>)
 8012ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8012ec4:	1152      	asrs	r2, r2, #5
 8012ec6:	17db      	asrs	r3, r3, #31
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3718      	adds	r7, #24
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	2000001c 	.word	0x2000001c
 8012ee0:	20008c80 	.word	0x20008c80
 8012ee4:	080262e4 	.word	0x080262e4
 8012ee8:	080262e8 	.word	0x080262e8
 8012eec:	10624dd3 	.word	0x10624dd3

08012ef0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b088      	sub	sp, #32
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d107      	bne.n	8012f0e <dhcp_bind+0x1e>
 8012efe:	4b64      	ldr	r3, [pc, #400]	; (8013090 <dhcp_bind+0x1a0>)
 8012f00:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8012f04:	4963      	ldr	r1, [pc, #396]	; (8013094 <dhcp_bind+0x1a4>)
 8012f06:	4864      	ldr	r0, [pc, #400]	; (8013098 <dhcp_bind+0x1a8>)
 8012f08:	f003 fe3e 	bl	8016b88 <iprintf>
 8012f0c:	e0bc      	b.n	8013088 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6a1b      	ldr	r3, [r3, #32]
 8012f12:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d107      	bne.n	8012f2a <dhcp_bind+0x3a>
 8012f1a:	4b5d      	ldr	r3, [pc, #372]	; (8013090 <dhcp_bind+0x1a0>)
 8012f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012f20:	495e      	ldr	r1, [pc, #376]	; (801309c <dhcp_bind+0x1ac>)
 8012f22:	485d      	ldr	r0, [pc, #372]	; (8013098 <dhcp_bind+0x1a8>)
 8012f24:	f003 fe30 	bl	8016b88 <iprintf>
 8012f28:	e0ae      	b.n	8013088 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f38:	d019      	beq.n	8012f6e <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f3e:	331e      	adds	r3, #30
 8012f40:	4a57      	ldr	r2, [pc, #348]	; (80130a0 <dhcp_bind+0x1b0>)
 8012f42:	fba2 2303 	umull	r2, r3, r2, r3
 8012f46:	095b      	lsrs	r3, r3, #5
 8012f48:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8012f4a:	69fb      	ldr	r3, [r7, #28]
 8012f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f50:	d302      	bcc.n	8012f58 <dhcp_bind+0x68>
       timeout = 0xffff;
 8012f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f56:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8012f60:	69bb      	ldr	r3, [r7, #24]
 8012f62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d102      	bne.n	8012f6e <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8012f68:	69bb      	ldr	r3, [r7, #24]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f76:	d01d      	beq.n	8012fb4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f7c:	331e      	adds	r3, #30
 8012f7e:	4a48      	ldr	r2, [pc, #288]	; (80130a0 <dhcp_bind+0x1b0>)
 8012f80:	fba2 2303 	umull	r2, r3, r2, r3
 8012f84:	095b      	lsrs	r3, r3, #5
 8012f86:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f8e:	d302      	bcc.n	8012f96 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f94:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012f96:	69fb      	ldr	r3, [r7, #28]
 8012f98:	b29a      	uxth	r2, r3
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	8b1b      	ldrh	r3, [r3, #24]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d102      	bne.n	8012fac <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012fac:	69bb      	ldr	r3, [r7, #24]
 8012fae:	8b1a      	ldrh	r2, [r3, #24]
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fbc:	d01d      	beq.n	8012ffa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fc2:	331e      	adds	r3, #30
 8012fc4:	4a36      	ldr	r2, [pc, #216]	; (80130a0 <dhcp_bind+0x1b0>)
 8012fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fca:	095b      	lsrs	r3, r3, #5
 8012fcc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012fce:	69fb      	ldr	r3, [r7, #28]
 8012fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fd4:	d302      	bcc.n	8012fdc <dhcp_bind+0xec>
      timeout = 0xffff;
 8012fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fda:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	8b5b      	ldrh	r3, [r3, #26]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d102      	bne.n	8012ff2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012fec:	69bb      	ldr	r3, [r7, #24]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012ff2:	69bb      	ldr	r3, [r7, #24]
 8012ff4:	8b5a      	ldrh	r2, [r3, #26]
 8012ff6:	69bb      	ldr	r3, [r7, #24]
 8012ff8:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	8b1a      	ldrh	r2, [r3, #24]
 8012ffe:	69bb      	ldr	r3, [r7, #24]
 8013000:	8b5b      	ldrh	r3, [r3, #26]
 8013002:	429a      	cmp	r2, r3
 8013004:	d306      	bcc.n	8013014 <dhcp_bind+0x124>
 8013006:	69bb      	ldr	r3, [r7, #24]
 8013008:	8b5b      	ldrh	r3, [r3, #26]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d002      	beq.n	8013014 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	2200      	movs	r2, #0
 8013012:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	7adb      	ldrb	r3, [r3, #11]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d003      	beq.n	8013024 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013020:	613b      	str	r3, [r7, #16]
 8013022:	e014      	b.n	801304e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	3328      	adds	r3, #40	; 0x28
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801302c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013030:	2b00      	cmp	r3, #0
 8013032:	db02      	blt.n	801303a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013034:	23ff      	movs	r3, #255	; 0xff
 8013036:	613b      	str	r3, [r7, #16]
 8013038:	e009      	b.n	801304e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801303a:	7dfb      	ldrb	r3, [r7, #23]
 801303c:	2bbf      	cmp	r3, #191	; 0xbf
 801303e:	d903      	bls.n	8013048 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013040:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013044:	613b      	str	r3, [r7, #16]
 8013046:	e002      	b.n	801304e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801304c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013052:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d108      	bne.n	801306c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	4013      	ands	r3, r2
 8013062:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801306a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801306c:	210a      	movs	r1, #10
 801306e:	69b8      	ldr	r0, [r7, #24]
 8013070:	f000 fa78 	bl	8013564 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801307a:	f107 030c 	add.w	r3, r7, #12
 801307e:	f107 0210 	add.w	r2, r7, #16
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7f8 fb9c 	bl	800b7c0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013088:	3720      	adds	r7, #32
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	0801a254 	.word	0x0801a254
 8013094:	0801a394 	.word	0x0801a394
 8013098:	0801a2b4 	.word	0x0801a2b4
 801309c:	0801a3b0 	.word	0x0801a3b0
 80130a0:	88888889 	.word	0x88888889

080130a4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b088      	sub	sp, #32
 80130a8:	af02      	add	r7, sp, #8
 80130aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6a1b      	ldr	r3, [r3, #32]
 80130b0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80130b2:	2105      	movs	r1, #5
 80130b4:	6938      	ldr	r0, [r7, #16]
 80130b6:	f000 fa55 	bl	8013564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80130ba:	2203      	movs	r2, #3
 80130bc:	6939      	ldr	r1, [r7, #16]
 80130be:	6878      	ldr	r0, [r7, #4]
 80130c0:	f000 fed6 	bl	8013e70 <dhcp_create_msg>
 80130c4:	4603      	mov	r3, r0
 80130c6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80130c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d13b      	bne.n	8013148 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80130d0:	2202      	movs	r2, #2
 80130d2:	2139      	movs	r1, #57	; 0x39
 80130d4:	6938      	ldr	r0, [r7, #16]
 80130d6:	f000 fa5f 	bl	8013598 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80130de:	4619      	mov	r1, r3
 80130e0:	6938      	ldr	r0, [r7, #16]
 80130e2:	f000 fabb 	bl	801365c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80130e6:	2203      	movs	r2, #3
 80130e8:	2137      	movs	r1, #55	; 0x37
 80130ea:	6938      	ldr	r0, [r7, #16]
 80130ec:	f000 fa54 	bl	8013598 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130f0:	2300      	movs	r3, #0
 80130f2:	75fb      	strb	r3, [r7, #23]
 80130f4:	e009      	b.n	801310a <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80130f6:	7dfb      	ldrb	r3, [r7, #23]
 80130f8:	4a2a      	ldr	r2, [pc, #168]	; (80131a4 <dhcp_renew+0x100>)
 80130fa:	5cd3      	ldrb	r3, [r2, r3]
 80130fc:	4619      	mov	r1, r3
 80130fe:	6938      	ldr	r0, [r7, #16]
 8013100:	f000 fa84 	bl	801360c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	3301      	adds	r3, #1
 8013108:	75fb      	strb	r3, [r7, #23]
 801310a:	7dfb      	ldrb	r3, [r7, #23]
 801310c:	2b02      	cmp	r3, #2
 801310e:	d9f2      	bls.n	80130f6 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8013110:	6938      	ldr	r0, [r7, #16]
 8013112:	f001 f851 	bl	80141b8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	68da      	ldr	r2, [r3, #12]
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	8a9b      	ldrh	r3, [r3, #20]
 801311e:	33f0      	adds	r3, #240	; 0xf0
 8013120:	b29b      	uxth	r3, r3
 8013122:	4619      	mov	r1, r3
 8013124:	4610      	mov	r0, r2
 8013126:	f7f8 feab 	bl	800be80 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801312a:	4b1f      	ldr	r3, [pc, #124]	; (80131a8 <dhcp_renew+0x104>)
 801312c:	6818      	ldr	r0, [r3, #0]
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	68d9      	ldr	r1, [r3, #12]
 8013132:	693b      	ldr	r3, [r7, #16]
 8013134:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	9300      	str	r3, [sp, #0]
 801313c:	2343      	movs	r3, #67	; 0x43
 801313e:	f7fe ffcf 	bl	80120e0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013142:	6938      	ldr	r0, [r7, #16]
 8013144:	f000 fff6 	bl	8014134 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	7a9b      	ldrb	r3, [r3, #10]
 801314c:	2bff      	cmp	r3, #255	; 0xff
 801314e:	d005      	beq.n	801315c <dhcp_renew+0xb8>
    dhcp->tries++;
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	7a9b      	ldrb	r3, [r3, #10]
 8013154:	3301      	adds	r3, #1
 8013156:	b2da      	uxtb	r2, r3
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	7a9b      	ldrb	r3, [r3, #10]
 8013160:	2b09      	cmp	r3, #9
 8013162:	d80a      	bhi.n	801317a <dhcp_renew+0xd6>
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	7a9b      	ldrb	r3, [r3, #10]
 8013168:	b29b      	uxth	r3, r3
 801316a:	461a      	mov	r2, r3
 801316c:	0152      	lsls	r2, r2, #5
 801316e:	1ad2      	subs	r2, r2, r3
 8013170:	0092      	lsls	r2, r2, #2
 8013172:	4413      	add	r3, r2
 8013174:	011b      	lsls	r3, r3, #4
 8013176:	b29b      	uxth	r3, r3
 8013178:	e001      	b.n	801317e <dhcp_renew+0xda>
 801317a:	f644 6320 	movw	r3, #20000	; 0x4e20
 801317e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013180:	89bb      	ldrh	r3, [r7, #12]
 8013182:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013186:	4a09      	ldr	r2, [pc, #36]	; (80131ac <dhcp_renew+0x108>)
 8013188:	fb82 1203 	smull	r1, r2, r2, r3
 801318c:	1152      	asrs	r2, r2, #5
 801318e:	17db      	asrs	r3, r3, #31
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	b29a      	uxth	r2, r3
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013198:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801319c:	4618      	mov	r0, r3
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	2000001c 	.word	0x2000001c
 80131a8:	20008c80 	.word	0x20008c80
 80131ac:	10624dd3 	.word	0x10624dd3

080131b0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b088      	sub	sp, #32
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6a1b      	ldr	r3, [r3, #32]
 80131bc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80131be:	2104      	movs	r1, #4
 80131c0:	6938      	ldr	r0, [r7, #16]
 80131c2:	f000 f9cf 	bl	8013564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80131c6:	2203      	movs	r2, #3
 80131c8:	6939      	ldr	r1, [r7, #16]
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 fe50 	bl	8013e70 <dhcp_create_msg>
 80131d0:	4603      	mov	r3, r0
 80131d2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80131d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d139      	bne.n	8013250 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80131dc:	2202      	movs	r2, #2
 80131de:	2139      	movs	r1, #57	; 0x39
 80131e0:	6938      	ldr	r0, [r7, #16]
 80131e2:	f000 f9d9 	bl	8013598 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80131ea:	4619      	mov	r1, r3
 80131ec:	6938      	ldr	r0, [r7, #16]
 80131ee:	f000 fa35 	bl	801365c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131f2:	2203      	movs	r2, #3
 80131f4:	2137      	movs	r1, #55	; 0x37
 80131f6:	6938      	ldr	r0, [r7, #16]
 80131f8:	f000 f9ce 	bl	8013598 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131fc:	2300      	movs	r3, #0
 80131fe:	75fb      	strb	r3, [r7, #23]
 8013200:	e009      	b.n	8013216 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013202:	7dfb      	ldrb	r3, [r7, #23]
 8013204:	4a29      	ldr	r2, [pc, #164]	; (80132ac <dhcp_rebind+0xfc>)
 8013206:	5cd3      	ldrb	r3, [r2, r3]
 8013208:	4619      	mov	r1, r3
 801320a:	6938      	ldr	r0, [r7, #16]
 801320c:	f000 f9fe 	bl	801360c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	3301      	adds	r3, #1
 8013214:	75fb      	strb	r3, [r7, #23]
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	2b02      	cmp	r3, #2
 801321a:	d9f2      	bls.n	8013202 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801321c:	6938      	ldr	r0, [r7, #16]
 801321e:	f000 ffcb 	bl	80141b8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	68da      	ldr	r2, [r3, #12]
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	8a9b      	ldrh	r3, [r3, #20]
 801322a:	33f0      	adds	r3, #240	; 0xf0
 801322c:	b29b      	uxth	r3, r3
 801322e:	4619      	mov	r1, r3
 8013230:	4610      	mov	r0, r2
 8013232:	f7f8 fe25 	bl	800be80 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013236:	4b1e      	ldr	r3, [pc, #120]	; (80132b0 <dhcp_rebind+0x100>)
 8013238:	6818      	ldr	r0, [r3, #0]
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	68d9      	ldr	r1, [r3, #12]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	2343      	movs	r3, #67	; 0x43
 8013244:	4a1b      	ldr	r2, [pc, #108]	; (80132b4 <dhcp_rebind+0x104>)
 8013246:	f7fe ff4b 	bl	80120e0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801324a:	6938      	ldr	r0, [r7, #16]
 801324c:	f000 ff72 	bl	8014134 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	7a9b      	ldrb	r3, [r3, #10]
 8013254:	2bff      	cmp	r3, #255	; 0xff
 8013256:	d005      	beq.n	8013264 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	7a9b      	ldrb	r3, [r3, #10]
 801325c:	3301      	adds	r3, #1
 801325e:	b2da      	uxtb	r2, r3
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	7a9b      	ldrb	r3, [r3, #10]
 8013268:	2b09      	cmp	r3, #9
 801326a:	d80a      	bhi.n	8013282 <dhcp_rebind+0xd2>
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	7a9b      	ldrb	r3, [r3, #10]
 8013270:	b29b      	uxth	r3, r3
 8013272:	461a      	mov	r2, r3
 8013274:	0152      	lsls	r2, r2, #5
 8013276:	1ad2      	subs	r2, r2, r3
 8013278:	0092      	lsls	r2, r2, #2
 801327a:	4413      	add	r3, r2
 801327c:	00db      	lsls	r3, r3, #3
 801327e:	b29b      	uxth	r3, r3
 8013280:	e001      	b.n	8013286 <dhcp_rebind+0xd6>
 8013282:	f242 7310 	movw	r3, #10000	; 0x2710
 8013286:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013288:	89bb      	ldrh	r3, [r7, #12]
 801328a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801328e:	4a0a      	ldr	r2, [pc, #40]	; (80132b8 <dhcp_rebind+0x108>)
 8013290:	fb82 1203 	smull	r1, r2, r2, r3
 8013294:	1152      	asrs	r2, r2, #5
 8013296:	17db      	asrs	r3, r3, #31
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	b29a      	uxth	r2, r3
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80132a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	2000001c 	.word	0x2000001c
 80132b0:	20008c80 	.word	0x20008c80
 80132b4:	080262e8 	.word	0x080262e8
 80132b8:	10624dd3 	.word	0x10624dd3

080132bc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af02      	add	r7, sp, #8
 80132c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a1b      	ldr	r3, [r3, #32]
 80132c8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80132ca:	2103      	movs	r1, #3
 80132cc:	6938      	ldr	r0, [r7, #16]
 80132ce:	f000 f949 	bl	8013564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80132d2:	2203      	movs	r2, #3
 80132d4:	6939      	ldr	r1, [r7, #16]
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f000 fdca 	bl	8013e70 <dhcp_create_msg>
 80132dc:	4603      	mov	r3, r0
 80132de:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80132e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d147      	bne.n	8013378 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80132e8:	2202      	movs	r2, #2
 80132ea:	2139      	movs	r1, #57	; 0x39
 80132ec:	6938      	ldr	r0, [r7, #16]
 80132ee:	f000 f953 	bl	8013598 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80132f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132f6:	6938      	ldr	r0, [r7, #16]
 80132f8:	f000 f9b0 	bl	801365c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80132fc:	2204      	movs	r2, #4
 80132fe:	2132      	movs	r1, #50	; 0x32
 8013300:	6938      	ldr	r0, [r7, #16]
 8013302:	f000 f949 	bl	8013598 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330a:	4618      	mov	r0, r3
 801330c:	f7f7 fd62 	bl	800add4 <lwip_htonl>
 8013310:	4603      	mov	r3, r0
 8013312:	4619      	mov	r1, r3
 8013314:	6938      	ldr	r0, [r7, #16]
 8013316:	f000 f9db 	bl	80136d0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801331a:	2203      	movs	r2, #3
 801331c:	2137      	movs	r1, #55	; 0x37
 801331e:	6938      	ldr	r0, [r7, #16]
 8013320:	f000 f93a 	bl	8013598 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013324:	2300      	movs	r3, #0
 8013326:	75fb      	strb	r3, [r7, #23]
 8013328:	e009      	b.n	801333e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801332a:	7dfb      	ldrb	r3, [r7, #23]
 801332c:	4a29      	ldr	r2, [pc, #164]	; (80133d4 <dhcp_reboot+0x118>)
 801332e:	5cd3      	ldrb	r3, [r2, r3]
 8013330:	4619      	mov	r1, r3
 8013332:	6938      	ldr	r0, [r7, #16]
 8013334:	f000 f96a 	bl	801360c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013338:	7dfb      	ldrb	r3, [r7, #23]
 801333a:	3301      	adds	r3, #1
 801333c:	75fb      	strb	r3, [r7, #23]
 801333e:	7dfb      	ldrb	r3, [r7, #23]
 8013340:	2b02      	cmp	r3, #2
 8013342:	d9f2      	bls.n	801332a <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8013344:	6938      	ldr	r0, [r7, #16]
 8013346:	f000 ff37 	bl	80141b8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801334a:	693b      	ldr	r3, [r7, #16]
 801334c:	68da      	ldr	r2, [r3, #12]
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	8a9b      	ldrh	r3, [r3, #20]
 8013352:	33f0      	adds	r3, #240	; 0xf0
 8013354:	b29b      	uxth	r3, r3
 8013356:	4619      	mov	r1, r3
 8013358:	4610      	mov	r0, r2
 801335a:	f7f8 fd91 	bl	800be80 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801335e:	4b1e      	ldr	r3, [pc, #120]	; (80133d8 <dhcp_reboot+0x11c>)
 8013360:	6818      	ldr	r0, [r3, #0]
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	68d9      	ldr	r1, [r3, #12]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	2343      	movs	r3, #67	; 0x43
 801336c:	4a1b      	ldr	r2, [pc, #108]	; (80133dc <dhcp_reboot+0x120>)
 801336e:	f7fe feb7 	bl	80120e0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013372:	6938      	ldr	r0, [r7, #16]
 8013374:	f000 fede 	bl	8014134 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	7a9b      	ldrb	r3, [r3, #10]
 801337c:	2bff      	cmp	r3, #255	; 0xff
 801337e:	d005      	beq.n	801338c <dhcp_reboot+0xd0>
    dhcp->tries++;
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	7a9b      	ldrb	r3, [r3, #10]
 8013384:	3301      	adds	r3, #1
 8013386:	b2da      	uxtb	r2, r3
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	7a9b      	ldrb	r3, [r3, #10]
 8013390:	2b09      	cmp	r3, #9
 8013392:	d80a      	bhi.n	80133aa <dhcp_reboot+0xee>
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	7a9b      	ldrb	r3, [r3, #10]
 8013398:	b29b      	uxth	r3, r3
 801339a:	461a      	mov	r2, r3
 801339c:	0152      	lsls	r2, r2, #5
 801339e:	1ad2      	subs	r2, r2, r3
 80133a0:	0092      	lsls	r2, r2, #2
 80133a2:	4413      	add	r3, r2
 80133a4:	00db      	lsls	r3, r3, #3
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	e001      	b.n	80133ae <dhcp_reboot+0xf2>
 80133aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80133ae:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80133b0:	89bb      	ldrh	r3, [r7, #12]
 80133b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133b6:	4a0a      	ldr	r2, [pc, #40]	; (80133e0 <dhcp_reboot+0x124>)
 80133b8:	fb82 1203 	smull	r1, r2, r2, r3
 80133bc:	1152      	asrs	r2, r2, #5
 80133be:	17db      	asrs	r3, r3, #31
 80133c0:	1ad3      	subs	r3, r2, r3
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3718      	adds	r7, #24
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}
 80133d4:	2000001c 	.word	0x2000001c
 80133d8:	20008c80 	.word	0x20008c80
 80133dc:	080262e8 	.word	0x080262e8
 80133e0:	10624dd3 	.word	0x10624dd3

080133e4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b088      	sub	sp, #32
 80133e8:	af02      	add	r7, sp, #8
 80133ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6a1b      	ldr	r3, [r3, #32]
 80133f0:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d102      	bne.n	80133fe <dhcp_release+0x1a>
    return ERR_ARG;
 80133f8:	f06f 030f 	mvn.w	r3, #15
 80133fc:	e072      	b.n	80134e4 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013402:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 ff31 	bl	801426c <dhcp_supplied_address>
 801340a:	4603      	mov	r3, r0
 801340c:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801340e:	2100      	movs	r1, #0
 8013410:	6978      	ldr	r0, [r7, #20]
 8013412:	f000 f8a7 	bl	8013564 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	2200      	movs	r2, #0
 801341a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	2200      	movs	r2, #0
 8013420:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	2200      	movs	r2, #0
 8013426:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	2200      	movs	r2, #0
 801342c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	2200      	movs	r2, #0
 8013432:	63da      	str	r2, [r3, #60]	; 0x3c
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	639a      	str	r2, [r3, #56]	; 0x38
 801343c:	697b      	ldr	r3, [r7, #20]
 801343e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	2200      	movs	r2, #0
 8013448:	845a      	strh	r2, [r3, #34]	; 0x22
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	841a      	strh	r2, [r3, #32]
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	8c1a      	ldrh	r2, [r3, #32]
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	83da      	strh	r2, [r3, #30]
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	8bda      	ldrh	r2, [r3, #30]
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8013462:	7cfb      	ldrb	r3, [r7, #19]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d101      	bne.n	801346c <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8013468:	2300      	movs	r3, #0
 801346a:	e03b      	b.n	80134e4 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801346c:	2207      	movs	r2, #7
 801346e:	6979      	ldr	r1, [r7, #20]
 8013470:	6878      	ldr	r0, [r7, #4]
 8013472:	f000 fcfd 	bl	8013e70 <dhcp_create_msg>
 8013476:	4603      	mov	r3, r0
 8013478:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801347a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d128      	bne.n	80134d4 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8013482:	2204      	movs	r2, #4
 8013484:	2136      	movs	r1, #54	; 0x36
 8013486:	6978      	ldr	r0, [r7, #20]
 8013488:	f000 f886 	bl	8013598 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	4618      	mov	r0, r3
 8013490:	f7f7 fca0 	bl	800add4 <lwip_htonl>
 8013494:	4603      	mov	r3, r0
 8013496:	4619      	mov	r1, r3
 8013498:	6978      	ldr	r0, [r7, #20]
 801349a:	f000 f919 	bl	80136d0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801349e:	6978      	ldr	r0, [r7, #20]
 80134a0:	f000 fe8a 	bl	80141b8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	68da      	ldr	r2, [r3, #12]
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	8a9b      	ldrh	r3, [r3, #20]
 80134ac:	33f0      	adds	r3, #240	; 0xf0
 80134ae:	b29b      	uxth	r3, r3
 80134b0:	4619      	mov	r1, r3
 80134b2:	4610      	mov	r0, r2
 80134b4:	f7f8 fce4 	bl	800be80 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80134b8:	4b0c      	ldr	r3, [pc, #48]	; (80134ec <dhcp_release+0x108>)
 80134ba:	6818      	ldr	r0, [r3, #0]
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	68d9      	ldr	r1, [r3, #12]
 80134c0:	f107 020c 	add.w	r2, r7, #12
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	2343      	movs	r3, #67	; 0x43
 80134ca:	f7fe fe09 	bl	80120e0 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80134ce:	6978      	ldr	r0, [r7, #20]
 80134d0:	f000 fe30 	bl	8014134 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80134d4:	4b06      	ldr	r3, [pc, #24]	; (80134f0 <dhcp_release+0x10c>)
 80134d6:	4a06      	ldr	r2, [pc, #24]	; (80134f0 <dhcp_release+0x10c>)
 80134d8:	4905      	ldr	r1, [pc, #20]	; (80134f0 <dhcp_release+0x10c>)
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7f8 f970 	bl	800b7c0 <netif_set_addr>

  return result;
 80134e0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	3718      	adds	r7, #24
 80134e8:	46bd      	mov	sp, r7
 80134ea:	bd80      	pop	{r7, pc}
 80134ec:	20008c80 	.word	0x20008c80
 80134f0:	080262e4 	.word	0x080262e4

080134f4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d107      	bne.n	8013512 <dhcp_stop+0x1e>
 8013502:	4b14      	ldr	r3, [pc, #80]	; (8013554 <dhcp_stop+0x60>)
 8013504:	f240 5242 	movw	r2, #1346	; 0x542
 8013508:	4913      	ldr	r1, [pc, #76]	; (8013558 <dhcp_stop+0x64>)
 801350a:	4814      	ldr	r0, [pc, #80]	; (801355c <dhcp_stop+0x68>)
 801350c:	f003 fb3c 	bl	8016b88 <iprintf>
 8013510:	e01d      	b.n	801354e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6a1b      	ldr	r3, [r3, #32]
 8013516:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d017      	beq.n	801354e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d006      	beq.n	8013534 <dhcp_stop+0x40>
 8013526:	4b0b      	ldr	r3, [pc, #44]	; (8013554 <dhcp_stop+0x60>)
 8013528:	f240 524f 	movw	r2, #1359	; 0x54f
 801352c:	490c      	ldr	r1, [pc, #48]	; (8013560 <dhcp_stop+0x6c>)
 801352e:	480b      	ldr	r0, [pc, #44]	; (801355c <dhcp_stop+0x68>)
 8013530:	f003 fb2a 	bl	8016b88 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013534:	2100      	movs	r1, #0
 8013536:	68f8      	ldr	r0, [r7, #12]
 8013538:	f000 f814 	bl	8013564 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	7a1b      	ldrb	r3, [r3, #8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d004      	beq.n	801354e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013544:	f7ff f854 	bl	80125f0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2200      	movs	r2, #0
 801354c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801354e:	3710      	adds	r7, #16
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	0801a254 	.word	0x0801a254
 8013558:	0801a3c8 	.word	0x0801a3c8
 801355c:	0801a2b4 	.word	0x0801a2b4
 8013560:	0801a380 	.word	0x0801a380

08013564 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	7a5b      	ldrb	r3, [r3, #9]
 8013574:	78fa      	ldrb	r2, [r7, #3]
 8013576:	429a      	cmp	r2, r3
 8013578:	d008      	beq.n	801358c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	78fa      	ldrb	r2, [r7, #3]
 801357e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2200      	movs	r2, #0
 8013584:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2200      	movs	r2, #0
 801358a:	82da      	strh	r2, [r3, #22]
  }
}
 801358c:	bf00      	nop
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	460b      	mov	r3, r1
 80135a2:	70fb      	strb	r3, [r7, #3]
 80135a4:	4613      	mov	r3, r2
 80135a6:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	8a9b      	ldrh	r3, [r3, #20]
 80135ac:	461a      	mov	r2, r3
 80135ae:	78bb      	ldrb	r3, [r7, #2]
 80135b0:	4413      	add	r3, r2
 80135b2:	3302      	adds	r3, #2
 80135b4:	2b44      	cmp	r3, #68	; 0x44
 80135b6:	d906      	bls.n	80135c6 <dhcp_option+0x2e>
 80135b8:	4b11      	ldr	r3, [pc, #68]	; (8013600 <dhcp_option+0x68>)
 80135ba:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80135be:	4911      	ldr	r1, [pc, #68]	; (8013604 <dhcp_option+0x6c>)
 80135c0:	4811      	ldr	r0, [pc, #68]	; (8013608 <dhcp_option+0x70>)
 80135c2:	f003 fae1 	bl	8016b88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	691a      	ldr	r2, [r3, #16]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	8a9b      	ldrh	r3, [r3, #20]
 80135ce:	1c59      	adds	r1, r3, #1
 80135d0:	b288      	uxth	r0, r1
 80135d2:	6879      	ldr	r1, [r7, #4]
 80135d4:	8288      	strh	r0, [r1, #20]
 80135d6:	4413      	add	r3, r2
 80135d8:	78fa      	ldrb	r2, [r7, #3]
 80135da:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	691a      	ldr	r2, [r3, #16]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8a9b      	ldrh	r3, [r3, #20]
 80135e6:	1c59      	adds	r1, r3, #1
 80135e8:	b288      	uxth	r0, r1
 80135ea:	6879      	ldr	r1, [r7, #4]
 80135ec:	8288      	strh	r0, [r1, #20]
 80135ee:	4413      	add	r3, r2
 80135f0:	78ba      	ldrb	r2, [r7, #2]
 80135f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80135f6:	bf00      	nop
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801a254 	.word	0x0801a254
 8013604:	0801a3e4 	.word	0x0801a3e4
 8013608:	0801a2b4 	.word	0x0801a2b4

0801360c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	460b      	mov	r3, r1
 8013616:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	8a9b      	ldrh	r3, [r3, #20]
 801361c:	2b43      	cmp	r3, #67	; 0x43
 801361e:	d906      	bls.n	801362e <dhcp_option_byte+0x22>
 8013620:	4b0b      	ldr	r3, [pc, #44]	; (8013650 <dhcp_option_byte+0x44>)
 8013622:	f240 527b 	movw	r2, #1403	; 0x57b
 8013626:	490b      	ldr	r1, [pc, #44]	; (8013654 <dhcp_option_byte+0x48>)
 8013628:	480b      	ldr	r0, [pc, #44]	; (8013658 <dhcp_option_byte+0x4c>)
 801362a:	f003 faad 	bl	8016b88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	691a      	ldr	r2, [r3, #16]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8a9b      	ldrh	r3, [r3, #20]
 8013636:	1c59      	adds	r1, r3, #1
 8013638:	b288      	uxth	r0, r1
 801363a:	6879      	ldr	r1, [r7, #4]
 801363c:	8288      	strh	r0, [r1, #20]
 801363e:	4413      	add	r3, r2
 8013640:	78fa      	ldrb	r2, [r7, #3]
 8013642:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013646:	bf00      	nop
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	0801a254 	.word	0x0801a254
 8013654:	0801a42c 	.word	0x0801a42c
 8013658:	0801a2b4 	.word	0x0801a2b4

0801365c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801365c:	b590      	push	{r4, r7, lr}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	460b      	mov	r3, r1
 8013666:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	8a9b      	ldrh	r3, [r3, #20]
 801366c:	3302      	adds	r3, #2
 801366e:	2b44      	cmp	r3, #68	; 0x44
 8013670:	d906      	bls.n	8013680 <dhcp_option_short+0x24>
 8013672:	4b14      	ldr	r3, [pc, #80]	; (80136c4 <dhcp_option_short+0x68>)
 8013674:	f240 5282 	movw	r2, #1410	; 0x582
 8013678:	4913      	ldr	r1, [pc, #76]	; (80136c8 <dhcp_option_short+0x6c>)
 801367a:	4814      	ldr	r0, [pc, #80]	; (80136cc <dhcp_option_short+0x70>)
 801367c:	f003 fa84 	bl	8016b88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013680:	887b      	ldrh	r3, [r7, #2]
 8013682:	0a1b      	lsrs	r3, r3, #8
 8013684:	b298      	uxth	r0, r3
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	691a      	ldr	r2, [r3, #16]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	8a9b      	ldrh	r3, [r3, #20]
 801368e:	1c59      	adds	r1, r3, #1
 8013690:	b28c      	uxth	r4, r1
 8013692:	6879      	ldr	r1, [r7, #4]
 8013694:	828c      	strh	r4, [r1, #20]
 8013696:	b2c1      	uxtb	r1, r0
 8013698:	4413      	add	r3, r2
 801369a:	460a      	mov	r2, r1
 801369c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	691a      	ldr	r2, [r3, #16]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	8a9b      	ldrh	r3, [r3, #20]
 80136a8:	1c59      	adds	r1, r3, #1
 80136aa:	b288      	uxth	r0, r1
 80136ac:	6879      	ldr	r1, [r7, #4]
 80136ae:	8288      	strh	r0, [r1, #20]
 80136b0:	8879      	ldrh	r1, [r7, #2]
 80136b2:	b2c9      	uxtb	r1, r1
 80136b4:	4413      	add	r3, r2
 80136b6:	460a      	mov	r2, r1
 80136b8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80136bc:	bf00      	nop
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd90      	pop	{r4, r7, pc}
 80136c4:	0801a254 	.word	0x0801a254
 80136c8:	0801a468 	.word	0x0801a468
 80136cc:	0801a2b4 	.word	0x0801a2b4

080136d0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80136d0:	b590      	push	{r4, r7, lr}
 80136d2:	b083      	sub	sp, #12
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	8a9b      	ldrh	r3, [r3, #20]
 80136de:	3304      	adds	r3, #4
 80136e0:	2b44      	cmp	r3, #68	; 0x44
 80136e2:	d906      	bls.n	80136f2 <dhcp_option_long+0x22>
 80136e4:	4b22      	ldr	r3, [pc, #136]	; (8013770 <dhcp_option_long+0xa0>)
 80136e6:	f240 528a 	movw	r2, #1418	; 0x58a
 80136ea:	4922      	ldr	r1, [pc, #136]	; (8013774 <dhcp_option_long+0xa4>)
 80136ec:	4822      	ldr	r0, [pc, #136]	; (8013778 <dhcp_option_long+0xa8>)
 80136ee:	f003 fa4b 	bl	8016b88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	0e18      	lsrs	r0, r3, #24
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	691a      	ldr	r2, [r3, #16]
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	8a9b      	ldrh	r3, [r3, #20]
 80136fe:	1c59      	adds	r1, r3, #1
 8013700:	b28c      	uxth	r4, r1
 8013702:	6879      	ldr	r1, [r7, #4]
 8013704:	828c      	strh	r4, [r1, #20]
 8013706:	b2c1      	uxtb	r1, r0
 8013708:	4413      	add	r3, r2
 801370a:	460a      	mov	r2, r1
 801370c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	0c18      	lsrs	r0, r3, #16
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	691a      	ldr	r2, [r3, #16]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8a9b      	ldrh	r3, [r3, #20]
 801371c:	1c59      	adds	r1, r3, #1
 801371e:	b28c      	uxth	r4, r1
 8013720:	6879      	ldr	r1, [r7, #4]
 8013722:	828c      	strh	r4, [r1, #20]
 8013724:	b2c1      	uxtb	r1, r0
 8013726:	4413      	add	r3, r2
 8013728:	460a      	mov	r2, r1
 801372a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	0a18      	lsrs	r0, r3, #8
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	691a      	ldr	r2, [r3, #16]
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8a9b      	ldrh	r3, [r3, #20]
 801373a:	1c59      	adds	r1, r3, #1
 801373c:	b28c      	uxth	r4, r1
 801373e:	6879      	ldr	r1, [r7, #4]
 8013740:	828c      	strh	r4, [r1, #20]
 8013742:	b2c1      	uxtb	r1, r0
 8013744:	4413      	add	r3, r2
 8013746:	460a      	mov	r2, r1
 8013748:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	691a      	ldr	r2, [r3, #16]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8a9b      	ldrh	r3, [r3, #20]
 8013754:	1c59      	adds	r1, r3, #1
 8013756:	b288      	uxth	r0, r1
 8013758:	6879      	ldr	r1, [r7, #4]
 801375a:	8288      	strh	r0, [r1, #20]
 801375c:	6839      	ldr	r1, [r7, #0]
 801375e:	b2c9      	uxtb	r1, r1
 8013760:	4413      	add	r3, r2
 8013762:	460a      	mov	r2, r1
 8013764:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013768:	bf00      	nop
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	bd90      	pop	{r4, r7, pc}
 8013770:	0801a254 	.word	0x0801a254
 8013774:	0801a4ac 	.word	0x0801a4ac
 8013778:	0801a2b4 	.word	0x0801a2b4

0801377c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b08e      	sub	sp, #56	; 0x38
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013786:	2300      	movs	r3, #0
 8013788:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 801378a:	2300      	movs	r3, #0
 801378c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801378e:	2208      	movs	r2, #8
 8013790:	2100      	movs	r1, #0
 8013792:	48b3      	ldr	r0, [pc, #716]	; (8013a60 <dhcp_parse_reply+0x2e4>)
 8013794:	f003 f9f0 	bl	8016b78 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	895b      	ldrh	r3, [r3, #10]
 801379c:	2b2b      	cmp	r3, #43	; 0x2b
 801379e:	d802      	bhi.n	80137a6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80137a0:	f06f 0301 	mvn.w	r3, #1
 80137a4:	e26a      	b.n	8013c7c <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	685a      	ldr	r2, [r3, #4]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80137ae:	23f0      	movs	r3, #240	; 0xf0
 80137b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	891b      	ldrh	r3, [r3, #8]
 80137b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80137bc:	e00c      	b.n	80137d8 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80137be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c0:	895b      	ldrh	r3, [r3, #10]
 80137c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	895b      	ldrh	r3, [r3, #10]
 80137cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 80137d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d004      	beq.n	80137e8 <dhcp_parse_reply+0x6c>
 80137de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e0:	895b      	ldrh	r3, [r3, #10]
 80137e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d2ea      	bcs.n	80137be <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 80137e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 80137ee:	f06f 0301 	mvn.w	r3, #1
 80137f2:	e243      	b.n	8013c7c <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 80137f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80137f6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 80137f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80137fa:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 80137fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013802:	e1fb      	b.n	8013bfc <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8013804:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013808:	4413      	add	r3, r2
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801380e:	2300      	movs	r3, #0
 8013810:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8013812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013816:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8013818:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801381a:	3302      	adds	r3, #2
 801381c:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801381e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013820:	3301      	adds	r3, #1
 8013822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013824:	8952      	ldrh	r2, [r2, #10]
 8013826:	4293      	cmp	r3, r2
 8013828:	da06      	bge.n	8013838 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801382a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801382c:	3301      	adds	r3, #1
 801382e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013830:	4413      	add	r3, r2
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	77fb      	strb	r3, [r7, #31]
 8013836:	e00a      	b.n	801384e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8013838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <dhcp_parse_reply+0xce>
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	e000      	b.n	801384c <dhcp_parse_reply+0xd0>
 801384a:	2300      	movs	r3, #0
 801384c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801384e:	7ffb      	ldrb	r3, [r7, #31]
 8013850:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8013852:	7d7b      	ldrb	r3, [r7, #21]
 8013854:	2b3b      	cmp	r3, #59	; 0x3b
 8013856:	f200 8121 	bhi.w	8013a9c <dhcp_parse_reply+0x320>
 801385a:	a201      	add	r2, pc, #4	; (adr r2, 8013860 <dhcp_parse_reply+0xe4>)
 801385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013860:	08013951 	.word	0x08013951
 8013864:	08013961 	.word	0x08013961
 8013868:	08013a9d 	.word	0x08013a9d
 801386c:	08013981 	.word	0x08013981
 8013870:	08013a9d 	.word	0x08013a9d
 8013874:	08013a9d 	.word	0x08013a9d
 8013878:	08013a9d 	.word	0x08013a9d
 801387c:	08013a9d 	.word	0x08013a9d
 8013880:	08013a9d 	.word	0x08013a9d
 8013884:	08013a9d 	.word	0x08013a9d
 8013888:	08013a9d 	.word	0x08013a9d
 801388c:	08013a9d 	.word	0x08013a9d
 8013890:	08013a9d 	.word	0x08013a9d
 8013894:	08013a9d 	.word	0x08013a9d
 8013898:	08013a9d 	.word	0x08013a9d
 801389c:	08013a9d 	.word	0x08013a9d
 80138a0:	08013a9d 	.word	0x08013a9d
 80138a4:	08013a9d 	.word	0x08013a9d
 80138a8:	08013a9d 	.word	0x08013a9d
 80138ac:	08013a9d 	.word	0x08013a9d
 80138b0:	08013a9d 	.word	0x08013a9d
 80138b4:	08013a9d 	.word	0x08013a9d
 80138b8:	08013a9d 	.word	0x08013a9d
 80138bc:	08013a9d 	.word	0x08013a9d
 80138c0:	08013a9d 	.word	0x08013a9d
 80138c4:	08013a9d 	.word	0x08013a9d
 80138c8:	08013a9d 	.word	0x08013a9d
 80138cc:	08013a9d 	.word	0x08013a9d
 80138d0:	08013a9d 	.word	0x08013a9d
 80138d4:	08013a9d 	.word	0x08013a9d
 80138d8:	08013a9d 	.word	0x08013a9d
 80138dc:	08013a9d 	.word	0x08013a9d
 80138e0:	08013a9d 	.word	0x08013a9d
 80138e4:	08013a9d 	.word	0x08013a9d
 80138e8:	08013a9d 	.word	0x08013a9d
 80138ec:	08013a9d 	.word	0x08013a9d
 80138f0:	08013a9d 	.word	0x08013a9d
 80138f4:	08013a9d 	.word	0x08013a9d
 80138f8:	08013a9d 	.word	0x08013a9d
 80138fc:	08013a9d 	.word	0x08013a9d
 8013900:	08013a9d 	.word	0x08013a9d
 8013904:	08013a9d 	.word	0x08013a9d
 8013908:	08013a9d 	.word	0x08013a9d
 801390c:	08013a9d 	.word	0x08013a9d
 8013910:	08013a9d 	.word	0x08013a9d
 8013914:	08013a9d 	.word	0x08013a9d
 8013918:	08013a9d 	.word	0x08013a9d
 801391c:	08013a9d 	.word	0x08013a9d
 8013920:	08013a9d 	.word	0x08013a9d
 8013924:	08013a9d 	.word	0x08013a9d
 8013928:	08013a9d 	.word	0x08013a9d
 801392c:	080139a7 	.word	0x080139a7
 8013930:	080139c7 	.word	0x080139c7
 8013934:	08013a01 	.word	0x08013a01
 8013938:	08013a21 	.word	0x08013a21
 801393c:	08013a9d 	.word	0x08013a9d
 8013940:	08013a9d 	.word	0x08013a9d
 8013944:	08013a9d 	.word	0x08013a9d
 8013948:	08013a41 	.word	0x08013a41
 801394c:	08013a7d 	.word	0x08013a7d
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013950:	2300      	movs	r3, #0
 8013952:	77fb      	strb	r3, [r7, #31]
 8013954:	7ffb      	ldrb	r3, [r7, #31]
 8013956:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8013958:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801395a:	3b01      	subs	r3, #1
 801395c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 801395e:	e0a0      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013960:	7ffb      	ldrb	r3, [r7, #31]
 8013962:	2b04      	cmp	r3, #4
 8013964:	d009      	beq.n	801397a <dhcp_parse_reply+0x1fe>
 8013966:	4b3f      	ldr	r3, [pc, #252]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 8013968:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801396c:	493e      	ldr	r1, [pc, #248]	; (8013a68 <dhcp_parse_reply+0x2ec>)
 801396e:	483f      	ldr	r0, [pc, #252]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 8013970:	f003 f90a 	bl	8016b88 <iprintf>
 8013974:	f06f 0305 	mvn.w	r3, #5
 8013978:	e180      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801397a:	2306      	movs	r3, #6
 801397c:	61bb      	str	r3, [r7, #24]
        break;
 801397e:	e090      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013980:	2304      	movs	r3, #4
 8013982:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013984:	7ffa      	ldrb	r2, [r7, #31]
 8013986:	7fbb      	ldrb	r3, [r7, #30]
 8013988:	429a      	cmp	r2, r3
 801398a:	d209      	bcs.n	80139a0 <dhcp_parse_reply+0x224>
 801398c:	4b35      	ldr	r3, [pc, #212]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 801398e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8013992:	4937      	ldr	r1, [pc, #220]	; (8013a70 <dhcp_parse_reply+0x2f4>)
 8013994:	4835      	ldr	r0, [pc, #212]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 8013996:	f003 f8f7 	bl	8016b88 <iprintf>
 801399a:	f06f 0305 	mvn.w	r3, #5
 801399e:	e16d      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80139a0:	2307      	movs	r3, #7
 80139a2:	61bb      	str	r3, [r7, #24]
        break;
 80139a4:	e07d      	b.n	8013aa2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80139a6:	7ffb      	ldrb	r3, [r7, #31]
 80139a8:	2b04      	cmp	r3, #4
 80139aa:	d009      	beq.n	80139c0 <dhcp_parse_reply+0x244>
 80139ac:	4b2d      	ldr	r3, [pc, #180]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 80139ae:	f240 6209 	movw	r2, #1545	; 0x609
 80139b2:	492d      	ldr	r1, [pc, #180]	; (8013a68 <dhcp_parse_reply+0x2ec>)
 80139b4:	482d      	ldr	r0, [pc, #180]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 80139b6:	f003 f8e7 	bl	8016b88 <iprintf>
 80139ba:	f06f 0305 	mvn.w	r3, #5
 80139be:	e15d      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80139c0:	2303      	movs	r3, #3
 80139c2:	61bb      	str	r3, [r7, #24]
        break;
 80139c4:	e06d      	b.n	8013aa2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80139c6:	7ffb      	ldrb	r3, [r7, #31]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d009      	beq.n	80139e0 <dhcp_parse_reply+0x264>
 80139cc:	4b25      	ldr	r3, [pc, #148]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 80139ce:	f240 6217 	movw	r2, #1559	; 0x617
 80139d2:	4928      	ldr	r1, [pc, #160]	; (8013a74 <dhcp_parse_reply+0x2f8>)
 80139d4:	4825      	ldr	r0, [pc, #148]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 80139d6:	f003 f8d7 	bl	8016b88 <iprintf>
 80139da:	f06f 0305 	mvn.w	r3, #5
 80139de:	e14d      	b.n	8013c7c <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80139e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139e2:	2bf0      	cmp	r3, #240	; 0xf0
 80139e4:	d009      	beq.n	80139fa <dhcp_parse_reply+0x27e>
 80139e6:	4b1f      	ldr	r3, [pc, #124]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 80139e8:	f240 6219 	movw	r2, #1561	; 0x619
 80139ec:	4922      	ldr	r1, [pc, #136]	; (8013a78 <dhcp_parse_reply+0x2fc>)
 80139ee:	481f      	ldr	r0, [pc, #124]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 80139f0:	f003 f8ca 	bl	8016b88 <iprintf>
 80139f4:	f06f 0305 	mvn.w	r3, #5
 80139f8:	e140      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80139fa:	2300      	movs	r3, #0
 80139fc:	61bb      	str	r3, [r7, #24]
        break;
 80139fe:	e050      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013a00:	7ffb      	ldrb	r3, [r7, #31]
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	d009      	beq.n	8013a1a <dhcp_parse_reply+0x29e>
 8013a06:	4b17      	ldr	r3, [pc, #92]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 8013a08:	f240 621d 	movw	r2, #1565	; 0x61d
 8013a0c:	4919      	ldr	r1, [pc, #100]	; (8013a74 <dhcp_parse_reply+0x2f8>)
 8013a0e:	4817      	ldr	r0, [pc, #92]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 8013a10:	f003 f8ba 	bl	8016b88 <iprintf>
 8013a14:	f06f 0305 	mvn.w	r3, #5
 8013a18:	e130      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	61bb      	str	r3, [r7, #24]
        break;
 8013a1e:	e040      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a20:	7ffb      	ldrb	r3, [r7, #31]
 8013a22:	2b04      	cmp	r3, #4
 8013a24:	d009      	beq.n	8013a3a <dhcp_parse_reply+0x2be>
 8013a26:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 8013a28:	f240 6221 	movw	r2, #1569	; 0x621
 8013a2c:	490e      	ldr	r1, [pc, #56]	; (8013a68 <dhcp_parse_reply+0x2ec>)
 8013a2e:	480f      	ldr	r0, [pc, #60]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 8013a30:	f003 f8aa 	bl	8016b88 <iprintf>
 8013a34:	f06f 0305 	mvn.w	r3, #5
 8013a38:	e120      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	61bb      	str	r3, [r7, #24]
        break;
 8013a3e:	e030      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a40:	7ffb      	ldrb	r3, [r7, #31]
 8013a42:	2b04      	cmp	r3, #4
 8013a44:	d009      	beq.n	8013a5a <dhcp_parse_reply+0x2de>
 8013a46:	4b07      	ldr	r3, [pc, #28]	; (8013a64 <dhcp_parse_reply+0x2e8>)
 8013a48:	f240 6225 	movw	r2, #1573	; 0x625
 8013a4c:	4906      	ldr	r1, [pc, #24]	; (8013a68 <dhcp_parse_reply+0x2ec>)
 8013a4e:	4807      	ldr	r0, [pc, #28]	; (8013a6c <dhcp_parse_reply+0x2f0>)
 8013a50:	f003 f89a 	bl	8016b88 <iprintf>
 8013a54:	f06f 0305 	mvn.w	r3, #5
 8013a58:	e110      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013a5a:	2304      	movs	r3, #4
 8013a5c:	61bb      	str	r3, [r7, #24]
        break;
 8013a5e:	e020      	b.n	8013aa2 <dhcp_parse_reply+0x326>
 8013a60:	2000faf0 	.word	0x2000faf0
 8013a64:	0801a254 	.word	0x0801a254
 8013a68:	0801a4ec 	.word	0x0801a4ec
 8013a6c:	0801a2b4 	.word	0x0801a2b4
 8013a70:	0801a4f8 	.word	0x0801a4f8
 8013a74:	0801a50c 	.word	0x0801a50c
 8013a78:	0801a518 	.word	0x0801a518
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a7c:	7ffb      	ldrb	r3, [r7, #31]
 8013a7e:	2b04      	cmp	r3, #4
 8013a80:	d009      	beq.n	8013a96 <dhcp_parse_reply+0x31a>
 8013a82:	4b80      	ldr	r3, [pc, #512]	; (8013c84 <dhcp_parse_reply+0x508>)
 8013a84:	f240 6229 	movw	r2, #1577	; 0x629
 8013a88:	497f      	ldr	r1, [pc, #508]	; (8013c88 <dhcp_parse_reply+0x50c>)
 8013a8a:	4880      	ldr	r0, [pc, #512]	; (8013c8c <dhcp_parse_reply+0x510>)
 8013a8c:	f003 f87c 	bl	8016b88 <iprintf>
 8013a90:	f06f 0305 	mvn.w	r3, #5
 8013a94:	e0f2      	b.n	8013c7c <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013a96:	2305      	movs	r3, #5
 8013a98:	61bb      	str	r3, [r7, #24]
        break;
 8013a9a:	e002      	b.n	8013aa2 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8013aa0:	bf00      	nop
    }
    offset += len + 2;
 8013aa2:	7ffb      	ldrb	r3, [r7, #31]
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013aa8:	4413      	add	r3, r2
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	3302      	adds	r3, #2
 8013aae:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8013ab0:	7fbb      	ldrb	r3, [r7, #30]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d079      	beq.n	8013baa <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	db02      	blt.n	8013ac6 <dhcp_parse_reply+0x34a>
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	2b07      	cmp	r3, #7
 8013ac4:	dd06      	ble.n	8013ad4 <dhcp_parse_reply+0x358>
 8013ac6:	4b6f      	ldr	r3, [pc, #444]	; (8013c84 <dhcp_parse_reply+0x508>)
 8013ac8:	f240 6236 	movw	r2, #1590	; 0x636
 8013acc:	4970      	ldr	r1, [pc, #448]	; (8013c90 <dhcp_parse_reply+0x514>)
 8013ace:	486f      	ldr	r0, [pc, #444]	; (8013c8c <dhcp_parse_reply+0x510>)
 8013ad0:	f003 f85a 	bl	8016b88 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8013ad4:	4a6f      	ldr	r2, [pc, #444]	; (8013c94 <dhcp_parse_reply+0x518>)
 8013ad6:	69bb      	ldr	r3, [r7, #24]
 8013ad8:	4413      	add	r3, r2
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d164      	bne.n	8013baa <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8013ae0:	7fbb      	ldrb	r3, [r7, #30]
 8013ae2:	2b04      	cmp	r3, #4
 8013ae4:	bf28      	it	cs
 8013ae6:	2304      	movcs	r3, #4
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013aec:	8afb      	ldrh	r3, [r7, #22]
 8013aee:	8a7a      	ldrh	r2, [r7, #18]
 8013af0:	f107 0108 	add.w	r1, r7, #8
 8013af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013af6:	f7f8 fd43 	bl	800c580 <pbuf_copy_partial>
 8013afa:	4603      	mov	r3, r0
 8013afc:	461a      	mov	r2, r3
 8013afe:	8a7b      	ldrh	r3, [r7, #18]
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d002      	beq.n	8013b0a <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8013b04:	f06f 0301 	mvn.w	r3, #1
 8013b08:	e0b8      	b.n	8013c7c <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 8013b0a:	7fbb      	ldrb	r3, [r7, #30]
 8013b0c:	2b04      	cmp	r3, #4
 8013b0e:	d927      	bls.n	8013b60 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013b10:	7fbb      	ldrb	r3, [r7, #30]
 8013b12:	f003 0303 	and.w	r3, r3, #3
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d009      	beq.n	8013b30 <dhcp_parse_reply+0x3b4>
 8013b1c:	4b59      	ldr	r3, [pc, #356]	; (8013c84 <dhcp_parse_reply+0x508>)
 8013b1e:	f240 623e 	movw	r2, #1598	; 0x63e
 8013b22:	495d      	ldr	r1, [pc, #372]	; (8013c98 <dhcp_parse_reply+0x51c>)
 8013b24:	4859      	ldr	r0, [pc, #356]	; (8013c8c <dhcp_parse_reply+0x510>)
 8013b26:	f003 f82f 	bl	8016b88 <iprintf>
 8013b2a:	f06f 0305 	mvn.w	r3, #5
 8013b2e:	e0a5      	b.n	8013c7c <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8013b30:	4a58      	ldr	r2, [pc, #352]	; (8013c94 <dhcp_parse_reply+0x518>)
 8013b32:	69bb      	ldr	r3, [r7, #24]
 8013b34:	4413      	add	r3, r2
 8013b36:	2201      	movs	r2, #1
 8013b38:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f7 f949 	bl	800add4 <lwip_htonl>
 8013b42:	4601      	mov	r1, r0
 8013b44:	4a55      	ldr	r2, [pc, #340]	; (8013c9c <dhcp_parse_reply+0x520>)
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8013b4c:	7fbb      	ldrb	r3, [r7, #30]
 8013b4e:	3b04      	subs	r3, #4
 8013b50:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8013b52:	8afb      	ldrh	r3, [r7, #22]
 8013b54:	3304      	adds	r3, #4
 8013b56:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8013b5e:	e7ac      	b.n	8013aba <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8013b60:	7fbb      	ldrb	r3, [r7, #30]
 8013b62:	2b04      	cmp	r3, #4
 8013b64:	d106      	bne.n	8013b74 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7f7 f933 	bl	800add4 <lwip_htonl>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	60bb      	str	r3, [r7, #8]
 8013b72:	e010      	b.n	8013b96 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013b74:	7fbb      	ldrb	r3, [r7, #30]
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d009      	beq.n	8013b8e <dhcp_parse_reply+0x412>
 8013b7a:	4b42      	ldr	r3, [pc, #264]	; (8013c84 <dhcp_parse_reply+0x508>)
 8013b7c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8013b80:	4947      	ldr	r1, [pc, #284]	; (8013ca0 <dhcp_parse_reply+0x524>)
 8013b82:	4842      	ldr	r0, [pc, #264]	; (8013c8c <dhcp_parse_reply+0x510>)
 8013b84:	f003 f800 	bl	8016b88 <iprintf>
 8013b88:	f06f 0305 	mvn.w	r3, #5
 8013b8c:	e076      	b.n	8013c7c <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8013b8e:	f107 0308 	add.w	r3, r7, #8
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 8013b96:	4a3f      	ldr	r2, [pc, #252]	; (8013c94 <dhcp_parse_reply+0x518>)
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8013ba0:	68ba      	ldr	r2, [r7, #8]
 8013ba2:	493e      	ldr	r1, [pc, #248]	; (8013c9c <dhcp_parse_reply+0x520>)
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 8013baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bac:	895b      	ldrh	r3, [r3, #10]
 8013bae:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d323      	bcc.n	8013bfc <dhcp_parse_reply+0x480>
      offset -= q->len;
 8013bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb6:	895b      	ldrh	r3, [r3, #10]
 8013bb8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	895b      	ldrh	r3, [r3, #10]
 8013bc2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013bc4:	1ad3      	subs	r3, r2, r3
 8013bc6:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8013bc8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013bca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d223      	bcs.n	8013c18 <dhcp_parse_reply+0x49c>
 8013bd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d020      	beq.n	8013c18 <dhcp_parse_reply+0x49c>
        q = q->next;
 8013bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d109      	bne.n	8013bf6 <dhcp_parse_reply+0x47a>
 8013be2:	4b28      	ldr	r3, [pc, #160]	; (8013c84 <dhcp_parse_reply+0x508>)
 8013be4:	f240 6254 	movw	r2, #1620	; 0x654
 8013be8:	492e      	ldr	r1, [pc, #184]	; (8013ca4 <dhcp_parse_reply+0x528>)
 8013bea:	4828      	ldr	r0, [pc, #160]	; (8013c8c <dhcp_parse_reply+0x510>)
 8013bec:	f002 ffcc 	bl	8016b88 <iprintf>
 8013bf0:	f06f 0305 	mvn.w	r3, #5
 8013bf4:	e042      	b.n	8013c7c <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8013bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00a      	beq.n	8013c18 <dhcp_parse_reply+0x49c>
 8013c02:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013c04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d206      	bcs.n	8013c18 <dhcp_parse_reply+0x49c>
 8013c0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c0e:	4413      	add	r3, r2
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	2bff      	cmp	r3, #255	; 0xff
 8013c14:	f47f adf6 	bne.w	8013804 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013c18:	4b1e      	ldr	r3, [pc, #120]	; (8013c94 <dhcp_parse_reply+0x518>)
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d018      	beq.n	8013c52 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c20:	4b1e      	ldr	r3, [pc, #120]	; (8013c9c <dhcp_parse_reply+0x520>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c26:	4b1b      	ldr	r3, [pc, #108]	; (8013c94 <dhcp_parse_reply+0x518>)
 8013c28:	2200      	movs	r2, #0
 8013c2a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d102      	bne.n	8013c38 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8013c32:	2301      	movs	r3, #1
 8013c34:	627b      	str	r3, [r7, #36]	; 0x24
 8013c36:	e00c      	b.n	8013c52 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2b02      	cmp	r3, #2
 8013c3c:	d102      	bne.n	8013c44 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	623b      	str	r3, [r7, #32]
 8013c42:	e006      	b.n	8013c52 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d103      	bne.n	8013c52 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8013c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d006      	beq.n	8013c66 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8013c5c:	236c      	movs	r3, #108	; 0x6c
 8013c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013c60:	23ec      	movs	r3, #236	; 0xec
 8013c62:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8013c64:	e5a8      	b.n	80137b8 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 8013c66:	6a3b      	ldr	r3, [r7, #32]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d006      	beq.n	8013c7a <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8013c70:	232c      	movs	r3, #44	; 0x2c
 8013c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013c74:	236c      	movs	r3, #108	; 0x6c
 8013c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8013c78:	e59e      	b.n	80137b8 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3738      	adds	r7, #56	; 0x38
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	0801a254 	.word	0x0801a254
 8013c88:	0801a4ec 	.word	0x0801a4ec
 8013c8c:	0801a2b4 	.word	0x0801a2b4
 8013c90:	0801a530 	.word	0x0801a530
 8013c94:	2000faf0 	.word	0x2000faf0
 8013c98:	0801a544 	.word	0x0801a544
 8013c9c:	2000faf8 	.word	0x2000faf8
 8013ca0:	0801a55c 	.word	0x0801a55c
 8013ca4:	0801a570 	.word	0x0801a570

08013ca8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b08a      	sub	sp, #40	; 0x28
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]
 8013cb4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013cb6:	4b68      	ldr	r3, [pc, #416]	; (8013e58 <dhcp_recv+0x1b0>)
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cbc:	6a3b      	ldr	r3, [r7, #32]
 8013cbe:	6a1b      	ldr	r3, [r3, #32]
 8013cc0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	f000 80a9 	beq.w	8013e22 <dhcp_recv+0x17a>
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	7a1b      	ldrb	r3, [r3, #8]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	f000 80a4 	beq.w	8013e22 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d006      	beq.n	8013cf0 <dhcp_recv+0x48>
 8013ce2:	4b5e      	ldr	r3, [pc, #376]	; (8013e5c <dhcp_recv+0x1b4>)
 8013ce4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8013ce8:	495d      	ldr	r1, [pc, #372]	; (8013e60 <dhcp_recv+0x1b8>)
 8013cea:	485e      	ldr	r0, [pc, #376]	; (8013e64 <dhcp_recv+0x1bc>)
 8013cec:	f002 ff4c 	bl	8016b88 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	895b      	ldrh	r3, [r3, #10]
 8013cf4:	2b2b      	cmp	r3, #43	; 0x2b
 8013cf6:	f240 8096 	bls.w	8013e26 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b02      	cmp	r3, #2
 8013d00:	f040 8093 	bne.w	8013e2a <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013d04:	2300      	movs	r3, #0
 8013d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d0a:	e012      	b.n	8013d32 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d10:	6a3a      	ldr	r2, [r7, #32]
 8013d12:	4413      	add	r3, r2
 8013d14:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d1c:	69b9      	ldr	r1, [r7, #24]
 8013d1e:	440b      	add	r3, r1
 8013d20:	7f1b      	ldrb	r3, [r3, #28]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	f040 8083 	bne.w	8013e2e <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d2c:	3301      	adds	r3, #1
 8013d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d32:	6a3b      	ldr	r3, [r7, #32]
 8013d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d207      	bcs.n	8013d50 <dhcp_recv+0xa8>
 8013d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d44:	2b05      	cmp	r3, #5
 8013d46:	d803      	bhi.n	8013d50 <dhcp_recv+0xa8>
 8013d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d4c:	2b0f      	cmp	r3, #15
 8013d4e:	d9dd      	bls.n	8013d0c <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7f7 f83d 	bl	800add4 <lwip_htonl>
 8013d5a:	4602      	mov	r2, r0
 8013d5c:	69fb      	ldr	r3, [r7, #28]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d166      	bne.n	8013e32 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8013d64:	6879      	ldr	r1, [r7, #4]
 8013d66:	69f8      	ldr	r0, [r7, #28]
 8013d68:	f7ff fd08 	bl	801377c <dhcp_parse_reply>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d161      	bne.n	8013e36 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013d72:	4b3d      	ldr	r3, [pc, #244]	; (8013e68 <dhcp_recv+0x1c0>)
 8013d74:	785b      	ldrb	r3, [r3, #1]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d05f      	beq.n	8013e3a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013d7a:	4b3c      	ldr	r3, [pc, #240]	; (8013e6c <dhcp_recv+0x1c4>)
 8013d7c:	685b      	ldr	r3, [r3, #4]
 8013d7e:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013d80:	7dfb      	ldrb	r3, [r7, #23]
 8013d82:	2b05      	cmp	r3, #5
 8013d84:	d128      	bne.n	8013dd8 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	7a5b      	ldrb	r3, [r3, #9]
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d111      	bne.n	8013db2 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8013d8e:	6a38      	ldr	r0, [r7, #32]
 8013d90:	f7fe fea0 	bl	8012ad4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013d9a:	f003 0308 	and.w	r3, r3, #8
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d003      	beq.n	8013daa <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013da2:	6a38      	ldr	r0, [r7, #32]
 8013da4:	f7fe fc68 	bl	8012678 <dhcp_check>
 8013da8:	e048      	b.n	8013e3c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013daa:	6a38      	ldr	r0, [r7, #32]
 8013dac:	f7ff f8a0 	bl	8012ef0 <dhcp_bind>
 8013db0:	e044      	b.n	8013e3c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	7a5b      	ldrb	r3, [r3, #9]
 8013db6:	2b03      	cmp	r3, #3
 8013db8:	d007      	beq.n	8013dca <dhcp_recv+0x122>
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	7a5b      	ldrb	r3, [r3, #9]
 8013dbe:	2b04      	cmp	r3, #4
 8013dc0:	d003      	beq.n	8013dca <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013dc2:	69fb      	ldr	r3, [r7, #28]
 8013dc4:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013dc6:	2b05      	cmp	r3, #5
 8013dc8:	d138      	bne.n	8013e3c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8013dca:	6a38      	ldr	r0, [r7, #32]
 8013dcc:	f7fe fe82 	bl	8012ad4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013dd0:	6a38      	ldr	r0, [r7, #32]
 8013dd2:	f7ff f88d 	bl	8012ef0 <dhcp_bind>
 8013dd6:	e031      	b.n	8013e3c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013dd8:	7dfb      	ldrb	r3, [r7, #23]
 8013dda:	2b06      	cmp	r3, #6
 8013ddc:	d113      	bne.n	8013e06 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8013de2:	2b03      	cmp	r3, #3
 8013de4:	d00b      	beq.n	8013dfe <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	7a5b      	ldrb	r3, [r3, #9]
 8013dea:	2b01      	cmp	r3, #1
 8013dec:	d007      	beq.n	8013dfe <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013df2:	2b04      	cmp	r3, #4
 8013df4:	d003      	beq.n	8013dfe <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013df6:	69fb      	ldr	r3, [r7, #28]
 8013df8:	7a5b      	ldrb	r3, [r3, #9]
 8013dfa:	2b05      	cmp	r3, #5
 8013dfc:	d103      	bne.n	8013e06 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013dfe:	6a38      	ldr	r0, [r7, #32]
 8013e00:	f7fe fc20 	bl	8012644 <dhcp_handle_nak>
 8013e04:	e01a      	b.n	8013e3c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013e06:	7dfb      	ldrb	r3, [r7, #23]
 8013e08:	2b02      	cmp	r3, #2
 8013e0a:	d10a      	bne.n	8013e22 <dhcp_recv+0x17a>
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	7a5b      	ldrb	r3, [r3, #9]
 8013e10:	2b06      	cmp	r3, #6
 8013e12:	d106      	bne.n	8013e22 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	2200      	movs	r2, #0
 8013e18:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8013e1a:	6a38      	ldr	r0, [r7, #32]
 8013e1c:	f7fe fc60 	bl	80126e0 <dhcp_handle_offer>
 8013e20:	e00c      	b.n	8013e3c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8013e22:	bf00      	nop
 8013e24:	e00a      	b.n	8013e3c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e26:	bf00      	nop
 8013e28:	e008      	b.n	8013e3c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e2a:	bf00      	nop
 8013e2c:	e006      	b.n	8013e3c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8013e2e:	bf00      	nop
 8013e30:	e004      	b.n	8013e3c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e32:	bf00      	nop
 8013e34:	e002      	b.n	8013e3c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e36:	bf00      	nop
 8013e38:	e000      	b.n	8013e3c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013e3a:	bf00      	nop
  if (dhcp != NULL) {
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d002      	beq.n	8013e48 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8013e42:	69fb      	ldr	r3, [r7, #28]
 8013e44:	2200      	movs	r2, #0
 8013e46:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7f8 f98d 	bl	800c168 <pbuf_free>
}
 8013e4e:	bf00      	nop
 8013e50:	3728      	adds	r7, #40	; 0x28
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	2000c3a4 	.word	0x2000c3a4
 8013e5c:	0801a254 	.word	0x0801a254
 8013e60:	0801a380 	.word	0x0801a380
 8013e64:	0801a2b4 	.word	0x0801a2b4
 8013e68:	2000faf0 	.word	0x2000faf0
 8013e6c:	2000faf8 	.word	0x2000faf8

08013e70 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8013e70:	b590      	push	{r4, r7, lr}
 8013e72:	b087      	sub	sp, #28
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d109      	bne.n	8013e98 <dhcp_create_msg+0x28>
 8013e84:	4ba3      	ldr	r3, [pc, #652]	; (8014114 <dhcp_create_msg+0x2a4>)
 8013e86:	f240 721d 	movw	r2, #1821	; 0x71d
 8013e8a:	49a3      	ldr	r1, [pc, #652]	; (8014118 <dhcp_create_msg+0x2a8>)
 8013e8c:	48a3      	ldr	r0, [pc, #652]	; (801411c <dhcp_create_msg+0x2ac>)
 8013e8e:	f002 fe7b 	bl	8016b88 <iprintf>
 8013e92:	f06f 030f 	mvn.w	r3, #15
 8013e96:	e138      	b.n	801410a <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d109      	bne.n	8013eb2 <dhcp_create_msg+0x42>
 8013e9e:	4b9d      	ldr	r3, [pc, #628]	; (8014114 <dhcp_create_msg+0x2a4>)
 8013ea0:	f240 721e 	movw	r2, #1822	; 0x71e
 8013ea4:	499e      	ldr	r1, [pc, #632]	; (8014120 <dhcp_create_msg+0x2b0>)
 8013ea6:	489d      	ldr	r0, [pc, #628]	; (801411c <dhcp_create_msg+0x2ac>)
 8013ea8:	f002 fe6e 	bl	8016b88 <iprintf>
 8013eac:	f06f 0305 	mvn.w	r3, #5
 8013eb0:	e12b      	b.n	801410a <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d006      	beq.n	8013ec8 <dhcp_create_msg+0x58>
 8013eba:	4b96      	ldr	r3, [pc, #600]	; (8014114 <dhcp_create_msg+0x2a4>)
 8013ebc:	f240 721f 	movw	r2, #1823	; 0x71f
 8013ec0:	4998      	ldr	r1, [pc, #608]	; (8014124 <dhcp_create_msg+0x2b4>)
 8013ec2:	4896      	ldr	r0, [pc, #600]	; (801411c <dhcp_create_msg+0x2ac>)
 8013ec4:	f002 fe60 	bl	8016b88 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	691b      	ldr	r3, [r3, #16]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d006      	beq.n	8013ede <dhcp_create_msg+0x6e>
 8013ed0:	4b90      	ldr	r3, [pc, #576]	; (8014114 <dhcp_create_msg+0x2a4>)
 8013ed2:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8013ed6:	4994      	ldr	r1, [pc, #592]	; (8014128 <dhcp_create_msg+0x2b8>)
 8013ed8:	4890      	ldr	r0, [pc, #576]	; (801411c <dhcp_create_msg+0x2ac>)
 8013eda:	f002 fe55 	bl	8016b88 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013ede:	2200      	movs	r2, #0
 8013ee0:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	f7f7 fdcd 	bl	800ba84 <pbuf_alloc>
 8013eea:	4602      	mov	r2, r0
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d102      	bne.n	8013efe <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8013ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013efc:	e105      	b.n	801410a <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	68db      	ldr	r3, [r3, #12]
 8013f02:	895b      	ldrh	r3, [r3, #10]
 8013f04:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013f08:	d206      	bcs.n	8013f18 <dhcp_create_msg+0xa8>
 8013f0a:	4b82      	ldr	r3, [pc, #520]	; (8014114 <dhcp_create_msg+0x2a4>)
 8013f0c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013f10:	4986      	ldr	r1, [pc, #536]	; (801412c <dhcp_create_msg+0x2bc>)
 8013f12:	4882      	ldr	r0, [pc, #520]	; (801411c <dhcp_create_msg+0x2ac>)
 8013f14:	f002 fe38 	bl	8016b88 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013f18:	79fb      	ldrb	r3, [r7, #7]
 8013f1a:	2b03      	cmp	r3, #3
 8013f1c:	d103      	bne.n	8013f26 <dhcp_create_msg+0xb6>
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	7a5b      	ldrb	r3, [r3, #9]
 8013f22:	2b03      	cmp	r3, #3
 8013f24:	d10d      	bne.n	8013f42 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	7a9b      	ldrb	r3, [r3, #10]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d105      	bne.n	8013f3a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013f2e:	f002 fe43 	bl	8016bb8 <rand>
 8013f32:	4603      	mov	r3, r0
 8013f34:	461a      	mov	r2, r3
 8013f36:	4b7e      	ldr	r3, [pc, #504]	; (8014130 <dhcp_create_msg+0x2c0>)
 8013f38:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013f3a:	4b7d      	ldr	r3, [pc, #500]	; (8014130 <dhcp_create_msg+0x2c0>)
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	685a      	ldr	r2, [r3, #4]
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	691b      	ldr	r3, [r3, #16]
 8013f50:	2201      	movs	r2, #1
 8013f52:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	691b      	ldr	r3, [r3, #16]
 8013f60:	68fa      	ldr	r2, [r7, #12]
 8013f62:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8013f66:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	691b      	ldr	r3, [r3, #16]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	691c      	ldr	r4, [r3, #16]
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7f6 ff2b 	bl	800add4 <lwip_htonl>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	691b      	ldr	r3, [r3, #16]
 8013f86:	2200      	movs	r2, #0
 8013f88:	721a      	strb	r2, [r3, #8]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	691b      	ldr	r3, [r3, #16]
 8013f92:	2200      	movs	r2, #0
 8013f94:	729a      	strb	r2, [r3, #10]
 8013f96:	2200      	movs	r2, #0
 8013f98:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	691b      	ldr	r3, [r3, #16]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	731a      	strb	r2, [r3, #12]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	735a      	strb	r2, [r3, #13]
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	739a      	strb	r2, [r3, #14]
 8013faa:	2200      	movs	r2, #0
 8013fac:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013fae:	79fb      	ldrb	r3, [r7, #7]
 8013fb0:	2b08      	cmp	r3, #8
 8013fb2:	d010      	beq.n	8013fd6 <dhcp_create_msg+0x166>
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	2b04      	cmp	r3, #4
 8013fb8:	d00d      	beq.n	8013fd6 <dhcp_create_msg+0x166>
 8013fba:	79fb      	ldrb	r3, [r7, #7]
 8013fbc:	2b07      	cmp	r3, #7
 8013fbe:	d00a      	beq.n	8013fd6 <dhcp_create_msg+0x166>
 8013fc0:	79fb      	ldrb	r3, [r7, #7]
 8013fc2:	2b03      	cmp	r3, #3
 8013fc4:	d10d      	bne.n	8013fe2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013fca:	2b05      	cmp	r3, #5
 8013fcc:	d003      	beq.n	8013fd6 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	7a5b      	ldrb	r3, [r3, #9]
 8013fd2:	2b04      	cmp	r3, #4
 8013fd4:	d105      	bne.n	8013fe2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	1d1a      	adds	r2, r3, #4
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	691b      	ldr	r3, [r3, #16]
 8013fde:	6812      	ldr	r2, [r2, #0]
 8013fe0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	691b      	ldr	r3, [r3, #16]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	741a      	strb	r2, [r3, #16]
 8013fea:	2200      	movs	r2, #0
 8013fec:	745a      	strb	r2, [r3, #17]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	749a      	strb	r2, [r3, #18]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	691b      	ldr	r3, [r3, #16]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	751a      	strb	r2, [r3, #20]
 8013ffe:	2200      	movs	r2, #0
 8014000:	755a      	strb	r2, [r3, #21]
 8014002:	2200      	movs	r2, #0
 8014004:	759a      	strb	r2, [r3, #22]
 8014006:	2200      	movs	r2, #0
 8014008:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	691b      	ldr	r3, [r3, #16]
 801400e:	2200      	movs	r2, #0
 8014010:	761a      	strb	r2, [r3, #24]
 8014012:	2200      	movs	r2, #0
 8014014:	765a      	strb	r2, [r3, #25]
 8014016:	2200      	movs	r2, #0
 8014018:	769a      	strb	r2, [r3, #26]
 801401a:	2200      	movs	r2, #0
 801401c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801401e:	2300      	movs	r3, #0
 8014020:	82fb      	strh	r3, [r7, #22]
 8014022:	e019      	b.n	8014058 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801402a:	b29b      	uxth	r3, r3
 801402c:	8afa      	ldrh	r2, [r7, #22]
 801402e:	429a      	cmp	r2, r3
 8014030:	d208      	bcs.n	8014044 <dhcp_create_msg+0x1d4>
 8014032:	8afb      	ldrh	r3, [r7, #22]
 8014034:	2b05      	cmp	r3, #5
 8014036:	d805      	bhi.n	8014044 <dhcp_create_msg+0x1d4>
 8014038:	8afb      	ldrh	r3, [r7, #22]
 801403a:	68fa      	ldr	r2, [r7, #12]
 801403c:	4413      	add	r3, r2
 801403e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8014042:	e000      	b.n	8014046 <dhcp_create_msg+0x1d6>
 8014044:	2100      	movs	r1, #0
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	691a      	ldr	r2, [r3, #16]
 801404a:	8afb      	ldrh	r3, [r7, #22]
 801404c:	4413      	add	r3, r2
 801404e:	460a      	mov	r2, r1
 8014050:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014052:	8afb      	ldrh	r3, [r7, #22]
 8014054:	3301      	adds	r3, #1
 8014056:	82fb      	strh	r3, [r7, #22]
 8014058:	8afb      	ldrh	r3, [r7, #22]
 801405a:	2b0f      	cmp	r3, #15
 801405c:	d9e2      	bls.n	8014024 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801405e:	2300      	movs	r3, #0
 8014060:	82fb      	strh	r3, [r7, #22]
 8014062:	e009      	b.n	8014078 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	691a      	ldr	r2, [r3, #16]
 8014068:	8afb      	ldrh	r3, [r7, #22]
 801406a:	4413      	add	r3, r2
 801406c:	2200      	movs	r2, #0
 801406e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8014072:	8afb      	ldrh	r3, [r7, #22]
 8014074:	3301      	adds	r3, #1
 8014076:	82fb      	strh	r3, [r7, #22]
 8014078:	8afb      	ldrh	r3, [r7, #22]
 801407a:	2b3f      	cmp	r3, #63	; 0x3f
 801407c:	d9f2      	bls.n	8014064 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801407e:	2300      	movs	r3, #0
 8014080:	82fb      	strh	r3, [r7, #22]
 8014082:	e009      	b.n	8014098 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	691a      	ldr	r2, [r3, #16]
 8014088:	8afb      	ldrh	r3, [r7, #22]
 801408a:	4413      	add	r3, r2
 801408c:	2200      	movs	r2, #0
 801408e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8014092:	8afb      	ldrh	r3, [r7, #22]
 8014094:	3301      	adds	r3, #1
 8014096:	82fb      	strh	r3, [r7, #22]
 8014098:	8afb      	ldrh	r3, [r7, #22]
 801409a:	2b7f      	cmp	r3, #127	; 0x7f
 801409c:	d9f2      	bls.n	8014084 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	691b      	ldr	r3, [r3, #16]
 80140a2:	2200      	movs	r2, #0
 80140a4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80140a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80140ac:	2200      	movs	r2, #0
 80140ae:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80140b2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80140b6:	2200      	movs	r2, #0
 80140b8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80140bc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80140c0:	2200      	movs	r2, #0
 80140c2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80140c6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	2200      	movs	r2, #0
 80140ce:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80140d0:	2300      	movs	r3, #0
 80140d2:	82fb      	strh	r3, [r7, #22]
 80140d4:	e00b      	b.n	80140ee <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	691a      	ldr	r2, [r3, #16]
 80140da:	8afb      	ldrh	r3, [r7, #22]
 80140dc:	8af9      	ldrh	r1, [r7, #22]
 80140de:	b2c9      	uxtb	r1, r1
 80140e0:	4413      	add	r3, r2
 80140e2:	460a      	mov	r2, r1
 80140e4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80140e8:	8afb      	ldrh	r3, [r7, #22]
 80140ea:	3301      	adds	r3, #1
 80140ec:	82fb      	strh	r3, [r7, #22]
 80140ee:	8afb      	ldrh	r3, [r7, #22]
 80140f0:	2b43      	cmp	r3, #67	; 0x43
 80140f2:	d9f0      	bls.n	80140d6 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80140f4:	2201      	movs	r2, #1
 80140f6:	2135      	movs	r1, #53	; 0x35
 80140f8:	68b8      	ldr	r0, [r7, #8]
 80140fa:	f7ff fa4d 	bl	8013598 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80140fe:	79fb      	ldrb	r3, [r7, #7]
 8014100:	4619      	mov	r1, r3
 8014102:	68b8      	ldr	r0, [r7, #8]
 8014104:	f7ff fa82 	bl	801360c <dhcp_option_byte>
  return ERR_OK;
 8014108:	2300      	movs	r3, #0
}
 801410a:	4618      	mov	r0, r3
 801410c:	371c      	adds	r7, #28
 801410e:	46bd      	mov	sp, r7
 8014110:	bd90      	pop	{r4, r7, pc}
 8014112:	bf00      	nop
 8014114:	0801a254 	.word	0x0801a254
 8014118:	0801a584 	.word	0x0801a584
 801411c:	0801a2b4 	.word	0x0801a2b4
 8014120:	0801a5a4 	.word	0x0801a5a4
 8014124:	0801a5c4 	.word	0x0801a5c4
 8014128:	0801a5ec 	.word	0x0801a5ec
 801412c:	0801a614 	.word	0x0801a614
 8014130:	20008c88 	.word	0x20008c88

08014134 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b082      	sub	sp, #8
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d107      	bne.n	8014152 <dhcp_delete_msg+0x1e>
 8014142:	4b18      	ldr	r3, [pc, #96]	; (80141a4 <dhcp_delete_msg+0x70>)
 8014144:	f240 726d 	movw	r2, #1901	; 0x76d
 8014148:	4917      	ldr	r1, [pc, #92]	; (80141a8 <dhcp_delete_msg+0x74>)
 801414a:	4818      	ldr	r0, [pc, #96]	; (80141ac <dhcp_delete_msg+0x78>)
 801414c:	f002 fd1c 	bl	8016b88 <iprintf>
 8014150:	e024      	b.n	801419c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	68db      	ldr	r3, [r3, #12]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d106      	bne.n	8014168 <dhcp_delete_msg+0x34>
 801415a:	4b12      	ldr	r3, [pc, #72]	; (80141a4 <dhcp_delete_msg+0x70>)
 801415c:	f240 726e 	movw	r2, #1902	; 0x76e
 8014160:	4913      	ldr	r1, [pc, #76]	; (80141b0 <dhcp_delete_msg+0x7c>)
 8014162:	4812      	ldr	r0, [pc, #72]	; (80141ac <dhcp_delete_msg+0x78>)
 8014164:	f002 fd10 	bl	8016b88 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	691b      	ldr	r3, [r3, #16]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d106      	bne.n	801417e <dhcp_delete_msg+0x4a>
 8014170:	4b0c      	ldr	r3, [pc, #48]	; (80141a4 <dhcp_delete_msg+0x70>)
 8014172:	f240 726f 	movw	r2, #1903	; 0x76f
 8014176:	490f      	ldr	r1, [pc, #60]	; (80141b4 <dhcp_delete_msg+0x80>)
 8014178:	480c      	ldr	r0, [pc, #48]	; (80141ac <dhcp_delete_msg+0x78>)
 801417a:	f002 fd05 	bl	8016b88 <iprintf>
  if (dhcp->p_out != NULL) {
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	68db      	ldr	r3, [r3, #12]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d004      	beq.n	8014190 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	4618      	mov	r0, r3
 801418c:	f7f7 ffec 	bl	800c168 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2200      	movs	r2, #0
 8014194:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	611a      	str	r2, [r3, #16]
}
 801419c:	3708      	adds	r7, #8
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	0801a254 	.word	0x0801a254
 80141a8:	0801a654 	.word	0x0801a654
 80141ac:	0801a2b4 	.word	0x0801a2b4
 80141b0:	0801a674 	.word	0x0801a674
 80141b4:	0801a69c 	.word	0x0801a69c

080141b8 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d107      	bne.n	80141d6 <dhcp_option_trailer+0x1e>
 80141c6:	4b24      	ldr	r3, [pc, #144]	; (8014258 <dhcp_option_trailer+0xa0>)
 80141c8:	f240 7282 	movw	r2, #1922	; 0x782
 80141cc:	4923      	ldr	r1, [pc, #140]	; (801425c <dhcp_option_trailer+0xa4>)
 80141ce:	4824      	ldr	r0, [pc, #144]	; (8014260 <dhcp_option_trailer+0xa8>)
 80141d0:	f002 fcda 	bl	8016b88 <iprintf>
 80141d4:	e03c      	b.n	8014250 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d106      	bne.n	80141ec <dhcp_option_trailer+0x34>
 80141de:	4b1e      	ldr	r3, [pc, #120]	; (8014258 <dhcp_option_trailer+0xa0>)
 80141e0:	f240 7283 	movw	r2, #1923	; 0x783
 80141e4:	491f      	ldr	r1, [pc, #124]	; (8014264 <dhcp_option_trailer+0xac>)
 80141e6:	481e      	ldr	r0, [pc, #120]	; (8014260 <dhcp_option_trailer+0xa8>)
 80141e8:	f002 fcce 	bl	8016b88 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	8a9b      	ldrh	r3, [r3, #20]
 80141f0:	2b43      	cmp	r3, #67	; 0x43
 80141f2:	d906      	bls.n	8014202 <dhcp_option_trailer+0x4a>
 80141f4:	4b18      	ldr	r3, [pc, #96]	; (8014258 <dhcp_option_trailer+0xa0>)
 80141f6:	f240 7284 	movw	r2, #1924	; 0x784
 80141fa:	491b      	ldr	r1, [pc, #108]	; (8014268 <dhcp_option_trailer+0xb0>)
 80141fc:	4818      	ldr	r0, [pc, #96]	; (8014260 <dhcp_option_trailer+0xa8>)
 80141fe:	f002 fcc3 	bl	8016b88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	691a      	ldr	r2, [r3, #16]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	8a9b      	ldrh	r3, [r3, #20]
 801420a:	1c59      	adds	r1, r3, #1
 801420c:	b288      	uxth	r0, r1
 801420e:	6879      	ldr	r1, [r7, #4]
 8014210:	8288      	strh	r0, [r1, #20]
 8014212:	4413      	add	r3, r2
 8014214:	22ff      	movs	r2, #255	; 0xff
 8014216:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801421a:	e00b      	b.n	8014234 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	691a      	ldr	r2, [r3, #16]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	8a9b      	ldrh	r3, [r3, #20]
 8014224:	1c59      	adds	r1, r3, #1
 8014226:	b288      	uxth	r0, r1
 8014228:	6879      	ldr	r1, [r7, #4]
 801422a:	8288      	strh	r0, [r1, #20]
 801422c:	4413      	add	r3, r2
 801422e:	2200      	movs	r2, #0
 8014230:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	8a9b      	ldrh	r3, [r3, #20]
 8014238:	2b43      	cmp	r3, #67	; 0x43
 801423a:	d905      	bls.n	8014248 <dhcp_option_trailer+0x90>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	8a9b      	ldrh	r3, [r3, #20]
 8014240:	f003 0303 	and.w	r3, r3, #3
 8014244:	2b00      	cmp	r3, #0
 8014246:	d003      	beq.n	8014250 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801424c:	2b43      	cmp	r3, #67	; 0x43
 801424e:	d9e5      	bls.n	801421c <dhcp_option_trailer+0x64>
  }
}
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}
 8014256:	bf00      	nop
 8014258:	0801a254 	.word	0x0801a254
 801425c:	0801a6c4 	.word	0x0801a6c4
 8014260:	0801a2b4 	.word	0x0801a2b4
 8014264:	0801a6e8 	.word	0x0801a6e8
 8014268:	0801a714 	.word	0x0801a714

0801426c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801426c:	b480      	push	{r7}
 801426e:	b085      	sub	sp, #20
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d017      	beq.n	80142aa <dhcp_supplied_address+0x3e>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6a1b      	ldr	r3, [r3, #32]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d013      	beq.n	80142aa <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6a1b      	ldr	r3, [r3, #32]
 8014286:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7a5b      	ldrb	r3, [r3, #9]
 801428c:	2b0a      	cmp	r3, #10
 801428e:	d007      	beq.n	80142a0 <dhcp_supplied_address+0x34>
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	7a5b      	ldrb	r3, [r3, #9]
 8014294:	2b05      	cmp	r3, #5
 8014296:	d003      	beq.n	80142a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801429c:	2b04      	cmp	r3, #4
 801429e:	d101      	bne.n	80142a4 <dhcp_supplied_address+0x38>
 80142a0:	2301      	movs	r3, #1
 80142a2:	e000      	b.n	80142a6 <dhcp_supplied_address+0x3a>
 80142a4:	2300      	movs	r3, #0
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	e000      	b.n	80142ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80142aa:	2300      	movs	r3, #0
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3714      	adds	r7, #20
 80142b0:	46bd      	mov	sp, r7
 80142b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b6:	4770      	bx	lr

080142b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80142c0:	4915      	ldr	r1, [pc, #84]	; (8014318 <etharp_free_entry+0x60>)
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	4613      	mov	r3, r2
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	440b      	add	r3, r1
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d013      	beq.n	80142fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80142d4:	4910      	ldr	r1, [pc, #64]	; (8014318 <etharp_free_entry+0x60>)
 80142d6:	687a      	ldr	r2, [r7, #4]
 80142d8:	4613      	mov	r3, r2
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	4413      	add	r3, r2
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	440b      	add	r3, r1
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7f7 ff3f 	bl	800c168 <pbuf_free>
    arp_table[i].q = NULL;
 80142ea:	490b      	ldr	r1, [pc, #44]	; (8014318 <etharp_free_entry+0x60>)
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	4613      	mov	r3, r2
 80142f0:	005b      	lsls	r3, r3, #1
 80142f2:	4413      	add	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	440b      	add	r3, r1
 80142f8:	2200      	movs	r2, #0
 80142fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80142fc:	4906      	ldr	r1, [pc, #24]	; (8014318 <etharp_free_entry+0x60>)
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	4613      	mov	r3, r2
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	4413      	add	r3, r2
 8014306:	00db      	lsls	r3, r3, #3
 8014308:	440b      	add	r3, r1
 801430a:	3314      	adds	r3, #20
 801430c:	2200      	movs	r2, #0
 801430e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014310:	bf00      	nop
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}
 8014318:	20008c8c 	.word	0x20008c8c

0801431c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014322:	2300      	movs	r3, #0
 8014324:	71fb      	strb	r3, [r7, #7]
 8014326:	e096      	b.n	8014456 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014328:	79fa      	ldrb	r2, [r7, #7]
 801432a:	494f      	ldr	r1, [pc, #316]	; (8014468 <etharp_tmr+0x14c>)
 801432c:	4613      	mov	r3, r2
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	4413      	add	r3, r2
 8014332:	00db      	lsls	r3, r3, #3
 8014334:	440b      	add	r3, r1
 8014336:	3314      	adds	r3, #20
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801433c:	79bb      	ldrb	r3, [r7, #6]
 801433e:	2b00      	cmp	r3, #0
 8014340:	f000 8086 	beq.w	8014450 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014344:	79fa      	ldrb	r2, [r7, #7]
 8014346:	4948      	ldr	r1, [pc, #288]	; (8014468 <etharp_tmr+0x14c>)
 8014348:	4613      	mov	r3, r2
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	4413      	add	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	440b      	add	r3, r1
 8014352:	3312      	adds	r3, #18
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	3301      	adds	r3, #1
 8014358:	b298      	uxth	r0, r3
 801435a:	4943      	ldr	r1, [pc, #268]	; (8014468 <etharp_tmr+0x14c>)
 801435c:	4613      	mov	r3, r2
 801435e:	005b      	lsls	r3, r3, #1
 8014360:	4413      	add	r3, r2
 8014362:	00db      	lsls	r3, r3, #3
 8014364:	440b      	add	r3, r1
 8014366:	3312      	adds	r3, #18
 8014368:	4602      	mov	r2, r0
 801436a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801436c:	79fa      	ldrb	r2, [r7, #7]
 801436e:	493e      	ldr	r1, [pc, #248]	; (8014468 <etharp_tmr+0x14c>)
 8014370:	4613      	mov	r3, r2
 8014372:	005b      	lsls	r3, r3, #1
 8014374:	4413      	add	r3, r2
 8014376:	00db      	lsls	r3, r3, #3
 8014378:	440b      	add	r3, r1
 801437a:	3312      	adds	r3, #18
 801437c:	881b      	ldrh	r3, [r3, #0]
 801437e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014382:	d215      	bcs.n	80143b0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014384:	79fa      	ldrb	r2, [r7, #7]
 8014386:	4938      	ldr	r1, [pc, #224]	; (8014468 <etharp_tmr+0x14c>)
 8014388:	4613      	mov	r3, r2
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	4413      	add	r3, r2
 801438e:	00db      	lsls	r3, r3, #3
 8014390:	440b      	add	r3, r1
 8014392:	3314      	adds	r3, #20
 8014394:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014396:	2b01      	cmp	r3, #1
 8014398:	d10f      	bne.n	80143ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801439a:	79fa      	ldrb	r2, [r7, #7]
 801439c:	4932      	ldr	r1, [pc, #200]	; (8014468 <etharp_tmr+0x14c>)
 801439e:	4613      	mov	r3, r2
 80143a0:	005b      	lsls	r3, r3, #1
 80143a2:	4413      	add	r3, r2
 80143a4:	00db      	lsls	r3, r3, #3
 80143a6:	440b      	add	r3, r1
 80143a8:	3312      	adds	r3, #18
 80143aa:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80143ac:	2b04      	cmp	r3, #4
 80143ae:	d904      	bls.n	80143ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80143b0:	79fb      	ldrb	r3, [r7, #7]
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7ff ff80 	bl	80142b8 <etharp_free_entry>
 80143b8:	e04a      	b.n	8014450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80143ba:	79fa      	ldrb	r2, [r7, #7]
 80143bc:	492a      	ldr	r1, [pc, #168]	; (8014468 <etharp_tmr+0x14c>)
 80143be:	4613      	mov	r3, r2
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4413      	add	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	440b      	add	r3, r1
 80143c8:	3314      	adds	r3, #20
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	2b03      	cmp	r3, #3
 80143ce:	d10a      	bne.n	80143e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80143d0:	79fa      	ldrb	r2, [r7, #7]
 80143d2:	4925      	ldr	r1, [pc, #148]	; (8014468 <etharp_tmr+0x14c>)
 80143d4:	4613      	mov	r3, r2
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	4413      	add	r3, r2
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	440b      	add	r3, r1
 80143de:	3314      	adds	r3, #20
 80143e0:	2204      	movs	r2, #4
 80143e2:	701a      	strb	r2, [r3, #0]
 80143e4:	e034      	b.n	8014450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80143e6:	79fa      	ldrb	r2, [r7, #7]
 80143e8:	491f      	ldr	r1, [pc, #124]	; (8014468 <etharp_tmr+0x14c>)
 80143ea:	4613      	mov	r3, r2
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	4413      	add	r3, r2
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	440b      	add	r3, r1
 80143f4:	3314      	adds	r3, #20
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	2b04      	cmp	r3, #4
 80143fa:	d10a      	bne.n	8014412 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80143fc:	79fa      	ldrb	r2, [r7, #7]
 80143fe:	491a      	ldr	r1, [pc, #104]	; (8014468 <etharp_tmr+0x14c>)
 8014400:	4613      	mov	r3, r2
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	4413      	add	r3, r2
 8014406:	00db      	lsls	r3, r3, #3
 8014408:	440b      	add	r3, r1
 801440a:	3314      	adds	r3, #20
 801440c:	2202      	movs	r2, #2
 801440e:	701a      	strb	r2, [r3, #0]
 8014410:	e01e      	b.n	8014450 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014412:	79fa      	ldrb	r2, [r7, #7]
 8014414:	4914      	ldr	r1, [pc, #80]	; (8014468 <etharp_tmr+0x14c>)
 8014416:	4613      	mov	r3, r2
 8014418:	005b      	lsls	r3, r3, #1
 801441a:	4413      	add	r3, r2
 801441c:	00db      	lsls	r3, r3, #3
 801441e:	440b      	add	r3, r1
 8014420:	3314      	adds	r3, #20
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	2b01      	cmp	r3, #1
 8014426:	d113      	bne.n	8014450 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014428:	79fa      	ldrb	r2, [r7, #7]
 801442a:	490f      	ldr	r1, [pc, #60]	; (8014468 <etharp_tmr+0x14c>)
 801442c:	4613      	mov	r3, r2
 801442e:	005b      	lsls	r3, r3, #1
 8014430:	4413      	add	r3, r2
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	440b      	add	r3, r1
 8014436:	3308      	adds	r3, #8
 8014438:	6818      	ldr	r0, [r3, #0]
 801443a:	79fa      	ldrb	r2, [r7, #7]
 801443c:	4613      	mov	r3, r2
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	4413      	add	r3, r2
 8014442:	00db      	lsls	r3, r3, #3
 8014444:	4a08      	ldr	r2, [pc, #32]	; (8014468 <etharp_tmr+0x14c>)
 8014446:	4413      	add	r3, r2
 8014448:	3304      	adds	r3, #4
 801444a:	4619      	mov	r1, r3
 801444c:	f000 fe3c 	bl	80150c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014450:	79fb      	ldrb	r3, [r7, #7]
 8014452:	3301      	adds	r3, #1
 8014454:	71fb      	strb	r3, [r7, #7]
 8014456:	79fb      	ldrb	r3, [r7, #7]
 8014458:	2b09      	cmp	r3, #9
 801445a:	f67f af65 	bls.w	8014328 <etharp_tmr+0xc>
      }
    }
  }
}
 801445e:	bf00      	nop
 8014460:	3708      	adds	r7, #8
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	20008c8c 	.word	0x20008c8c

0801446c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b088      	sub	sp, #32
 8014470:	af00      	add	r7, sp, #0
 8014472:	60f8      	str	r0, [r7, #12]
 8014474:	460b      	mov	r3, r1
 8014476:	607a      	str	r2, [r7, #4]
 8014478:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801447a:	230a      	movs	r3, #10
 801447c:	77fb      	strb	r3, [r7, #31]
 801447e:	230a      	movs	r3, #10
 8014480:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8014482:	230a      	movs	r3, #10
 8014484:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8014486:	2300      	movs	r3, #0
 8014488:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801448a:	230a      	movs	r3, #10
 801448c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801448e:	2300      	movs	r3, #0
 8014490:	833b      	strh	r3, [r7, #24]
 8014492:	2300      	movs	r3, #0
 8014494:	82fb      	strh	r3, [r7, #22]
 8014496:	2300      	movs	r3, #0
 8014498:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801449a:	2300      	movs	r3, #0
 801449c:	773b      	strb	r3, [r7, #28]
 801449e:	e093      	b.n	80145c8 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80144a0:	7f3a      	ldrb	r2, [r7, #28]
 80144a2:	4990      	ldr	r1, [pc, #576]	; (80146e4 <etharp_find_entry+0x278>)
 80144a4:	4613      	mov	r3, r2
 80144a6:	005b      	lsls	r3, r3, #1
 80144a8:	4413      	add	r3, r2
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	440b      	add	r3, r1
 80144ae:	3314      	adds	r3, #20
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80144b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80144b8:	2b0a      	cmp	r3, #10
 80144ba:	d105      	bne.n	80144c8 <etharp_find_entry+0x5c>
 80144bc:	7cfb      	ldrb	r3, [r7, #19]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d102      	bne.n	80144c8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80144c2:	7f3b      	ldrb	r3, [r7, #28]
 80144c4:	777b      	strb	r3, [r7, #29]
 80144c6:	e07c      	b.n	80145c2 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80144c8:	7cfb      	ldrb	r3, [r7, #19]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d079      	beq.n	80145c2 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80144ce:	7cfb      	ldrb	r3, [r7, #19]
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d009      	beq.n	80144e8 <etharp_find_entry+0x7c>
 80144d4:	7cfb      	ldrb	r3, [r7, #19]
 80144d6:	2b01      	cmp	r3, #1
 80144d8:	d806      	bhi.n	80144e8 <etharp_find_entry+0x7c>
 80144da:	4b83      	ldr	r3, [pc, #524]	; (80146e8 <etharp_find_entry+0x27c>)
 80144dc:	f44f 7293 	mov.w	r2, #294	; 0x126
 80144e0:	4982      	ldr	r1, [pc, #520]	; (80146ec <etharp_find_entry+0x280>)
 80144e2:	4883      	ldr	r0, [pc, #524]	; (80146f0 <etharp_find_entry+0x284>)
 80144e4:	f002 fb50 	bl	8016b88 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00f      	beq.n	801450e <etharp_find_entry+0xa2>
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	6819      	ldr	r1, [r3, #0]
 80144f2:	7f3a      	ldrb	r2, [r7, #28]
 80144f4:	487b      	ldr	r0, [pc, #492]	; (80146e4 <etharp_find_entry+0x278>)
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	4403      	add	r3, r0
 8014500:	3304      	adds	r3, #4
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	4299      	cmp	r1, r3
 8014506:	d102      	bne.n	801450e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014508:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801450c:	e0e5      	b.n	80146da <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801450e:	7cfb      	ldrb	r3, [r7, #19]
 8014510:	2b01      	cmp	r3, #1
 8014512:	d13b      	bne.n	801458c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014514:	7f3a      	ldrb	r2, [r7, #28]
 8014516:	4973      	ldr	r1, [pc, #460]	; (80146e4 <etharp_find_entry+0x278>)
 8014518:	4613      	mov	r3, r2
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	00db      	lsls	r3, r3, #3
 8014520:	440b      	add	r3, r1
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d018      	beq.n	801455a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8014528:	7f3a      	ldrb	r2, [r7, #28]
 801452a:	496e      	ldr	r1, [pc, #440]	; (80146e4 <etharp_find_entry+0x278>)
 801452c:	4613      	mov	r3, r2
 801452e:	005b      	lsls	r3, r3, #1
 8014530:	4413      	add	r3, r2
 8014532:	00db      	lsls	r3, r3, #3
 8014534:	440b      	add	r3, r1
 8014536:	3312      	adds	r3, #18
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	8b3a      	ldrh	r2, [r7, #24]
 801453c:	429a      	cmp	r2, r3
 801453e:	d840      	bhi.n	80145c2 <etharp_find_entry+0x156>
            old_queue = i;
 8014540:	7f3b      	ldrb	r3, [r7, #28]
 8014542:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8014544:	7f3a      	ldrb	r2, [r7, #28]
 8014546:	4967      	ldr	r1, [pc, #412]	; (80146e4 <etharp_find_entry+0x278>)
 8014548:	4613      	mov	r3, r2
 801454a:	005b      	lsls	r3, r3, #1
 801454c:	4413      	add	r3, r2
 801454e:	00db      	lsls	r3, r3, #3
 8014550:	440b      	add	r3, r1
 8014552:	3312      	adds	r3, #18
 8014554:	881b      	ldrh	r3, [r3, #0]
 8014556:	833b      	strh	r3, [r7, #24]
 8014558:	e033      	b.n	80145c2 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801455a:	7f3a      	ldrb	r2, [r7, #28]
 801455c:	4961      	ldr	r1, [pc, #388]	; (80146e4 <etharp_find_entry+0x278>)
 801455e:	4613      	mov	r3, r2
 8014560:	005b      	lsls	r3, r3, #1
 8014562:	4413      	add	r3, r2
 8014564:	00db      	lsls	r3, r3, #3
 8014566:	440b      	add	r3, r1
 8014568:	3312      	adds	r3, #18
 801456a:	881b      	ldrh	r3, [r3, #0]
 801456c:	8afa      	ldrh	r2, [r7, #22]
 801456e:	429a      	cmp	r2, r3
 8014570:	d827      	bhi.n	80145c2 <etharp_find_entry+0x156>
            old_pending = i;
 8014572:	7f3b      	ldrb	r3, [r7, #28]
 8014574:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8014576:	7f3a      	ldrb	r2, [r7, #28]
 8014578:	495a      	ldr	r1, [pc, #360]	; (80146e4 <etharp_find_entry+0x278>)
 801457a:	4613      	mov	r3, r2
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	4413      	add	r3, r2
 8014580:	00db      	lsls	r3, r3, #3
 8014582:	440b      	add	r3, r1
 8014584:	3312      	adds	r3, #18
 8014586:	881b      	ldrh	r3, [r3, #0]
 8014588:	82fb      	strh	r3, [r7, #22]
 801458a:	e01a      	b.n	80145c2 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801458c:	7cfb      	ldrb	r3, [r7, #19]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d917      	bls.n	80145c2 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014592:	7f3a      	ldrb	r2, [r7, #28]
 8014594:	4953      	ldr	r1, [pc, #332]	; (80146e4 <etharp_find_entry+0x278>)
 8014596:	4613      	mov	r3, r2
 8014598:	005b      	lsls	r3, r3, #1
 801459a:	4413      	add	r3, r2
 801459c:	00db      	lsls	r3, r3, #3
 801459e:	440b      	add	r3, r1
 80145a0:	3312      	adds	r3, #18
 80145a2:	881b      	ldrh	r3, [r3, #0]
 80145a4:	8aba      	ldrh	r2, [r7, #20]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d80b      	bhi.n	80145c2 <etharp_find_entry+0x156>
            old_stable = i;
 80145aa:	7f3b      	ldrb	r3, [r7, #28]
 80145ac:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80145ae:	7f3a      	ldrb	r2, [r7, #28]
 80145b0:	494c      	ldr	r1, [pc, #304]	; (80146e4 <etharp_find_entry+0x278>)
 80145b2:	4613      	mov	r3, r2
 80145b4:	005b      	lsls	r3, r3, #1
 80145b6:	4413      	add	r3, r2
 80145b8:	00db      	lsls	r3, r3, #3
 80145ba:	440b      	add	r3, r1
 80145bc:	3312      	adds	r3, #18
 80145be:	881b      	ldrh	r3, [r3, #0]
 80145c0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145c2:	7f3b      	ldrb	r3, [r7, #28]
 80145c4:	3301      	adds	r3, #1
 80145c6:	773b      	strb	r3, [r7, #28]
 80145c8:	7f3b      	ldrb	r3, [r7, #28]
 80145ca:	2b09      	cmp	r3, #9
 80145cc:	f67f af68 	bls.w	80144a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80145d0:	7afb      	ldrb	r3, [r7, #11]
 80145d2:	f003 0302 	and.w	r3, r3, #2
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d108      	bne.n	80145ec <etharp_find_entry+0x180>
 80145da:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80145de:	2b0a      	cmp	r3, #10
 80145e0:	d107      	bne.n	80145f2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80145e2:	7afb      	ldrb	r3, [r7, #11]
 80145e4:	f003 0301 	and.w	r3, r3, #1
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d102      	bne.n	80145f2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80145ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145f0:	e073      	b.n	80146da <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80145f2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80145f6:	2b09      	cmp	r3, #9
 80145f8:	dc02      	bgt.n	8014600 <etharp_find_entry+0x194>
    i = empty;
 80145fa:	7f7b      	ldrb	r3, [r7, #29]
 80145fc:	773b      	strb	r3, [r7, #28]
 80145fe:	e036      	b.n	801466e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014600:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014604:	2b09      	cmp	r3, #9
 8014606:	dc13      	bgt.n	8014630 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8014608:	7fbb      	ldrb	r3, [r7, #30]
 801460a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801460c:	7f3a      	ldrb	r2, [r7, #28]
 801460e:	4935      	ldr	r1, [pc, #212]	; (80146e4 <etharp_find_entry+0x278>)
 8014610:	4613      	mov	r3, r2
 8014612:	005b      	lsls	r3, r3, #1
 8014614:	4413      	add	r3, r2
 8014616:	00db      	lsls	r3, r3, #3
 8014618:	440b      	add	r3, r1
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d018      	beq.n	8014652 <etharp_find_entry+0x1e6>
 8014620:	4b31      	ldr	r3, [pc, #196]	; (80146e8 <etharp_find_entry+0x27c>)
 8014622:	f240 126f 	movw	r2, #367	; 0x16f
 8014626:	4933      	ldr	r1, [pc, #204]	; (80146f4 <etharp_find_entry+0x288>)
 8014628:	4831      	ldr	r0, [pc, #196]	; (80146f0 <etharp_find_entry+0x284>)
 801462a:	f002 faad 	bl	8016b88 <iprintf>
 801462e:	e010      	b.n	8014652 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014630:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014634:	2b09      	cmp	r3, #9
 8014636:	dc02      	bgt.n	801463e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8014638:	7ffb      	ldrb	r3, [r7, #31]
 801463a:	773b      	strb	r3, [r7, #28]
 801463c:	e009      	b.n	8014652 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801463e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014642:	2b09      	cmp	r3, #9
 8014644:	dc02      	bgt.n	801464c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014646:	7efb      	ldrb	r3, [r7, #27]
 8014648:	773b      	strb	r3, [r7, #28]
 801464a:	e002      	b.n	8014652 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801464c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014650:	e043      	b.n	80146da <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014652:	7f3b      	ldrb	r3, [r7, #28]
 8014654:	2b09      	cmp	r3, #9
 8014656:	d906      	bls.n	8014666 <etharp_find_entry+0x1fa>
 8014658:	4b23      	ldr	r3, [pc, #140]	; (80146e8 <etharp_find_entry+0x27c>)
 801465a:	f240 1281 	movw	r2, #385	; 0x181
 801465e:	4926      	ldr	r1, [pc, #152]	; (80146f8 <etharp_find_entry+0x28c>)
 8014660:	4823      	ldr	r0, [pc, #140]	; (80146f0 <etharp_find_entry+0x284>)
 8014662:	f002 fa91 	bl	8016b88 <iprintf>
    etharp_free_entry(i);
 8014666:	7f3b      	ldrb	r3, [r7, #28]
 8014668:	4618      	mov	r0, r3
 801466a:	f7ff fe25 	bl	80142b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801466e:	7f3b      	ldrb	r3, [r7, #28]
 8014670:	2b09      	cmp	r3, #9
 8014672:	d906      	bls.n	8014682 <etharp_find_entry+0x216>
 8014674:	4b1c      	ldr	r3, [pc, #112]	; (80146e8 <etharp_find_entry+0x27c>)
 8014676:	f240 1285 	movw	r2, #389	; 0x185
 801467a:	491f      	ldr	r1, [pc, #124]	; (80146f8 <etharp_find_entry+0x28c>)
 801467c:	481c      	ldr	r0, [pc, #112]	; (80146f0 <etharp_find_entry+0x284>)
 801467e:	f002 fa83 	bl	8016b88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014682:	7f3a      	ldrb	r2, [r7, #28]
 8014684:	4917      	ldr	r1, [pc, #92]	; (80146e4 <etharp_find_entry+0x278>)
 8014686:	4613      	mov	r3, r2
 8014688:	005b      	lsls	r3, r3, #1
 801468a:	4413      	add	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	440b      	add	r3, r1
 8014690:	3314      	adds	r3, #20
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d006      	beq.n	80146a6 <etharp_find_entry+0x23a>
 8014698:	4b13      	ldr	r3, [pc, #76]	; (80146e8 <etharp_find_entry+0x27c>)
 801469a:	f240 1287 	movw	r2, #391	; 0x187
 801469e:	4917      	ldr	r1, [pc, #92]	; (80146fc <etharp_find_entry+0x290>)
 80146a0:	4813      	ldr	r0, [pc, #76]	; (80146f0 <etharp_find_entry+0x284>)
 80146a2:	f002 fa71 	bl	8016b88 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d00a      	beq.n	80146c2 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80146ac:	7f3a      	ldrb	r2, [r7, #28]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	6819      	ldr	r1, [r3, #0]
 80146b2:	480c      	ldr	r0, [pc, #48]	; (80146e4 <etharp_find_entry+0x278>)
 80146b4:	4613      	mov	r3, r2
 80146b6:	005b      	lsls	r3, r3, #1
 80146b8:	4413      	add	r3, r2
 80146ba:	00db      	lsls	r3, r3, #3
 80146bc:	4403      	add	r3, r0
 80146be:	3304      	adds	r3, #4
 80146c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80146c2:	7f3a      	ldrb	r2, [r7, #28]
 80146c4:	4907      	ldr	r1, [pc, #28]	; (80146e4 <etharp_find_entry+0x278>)
 80146c6:	4613      	mov	r3, r2
 80146c8:	005b      	lsls	r3, r3, #1
 80146ca:	4413      	add	r3, r2
 80146cc:	00db      	lsls	r3, r3, #3
 80146ce:	440b      	add	r3, r1
 80146d0:	3312      	adds	r3, #18
 80146d2:	2200      	movs	r2, #0
 80146d4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80146d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80146da:	4618      	mov	r0, r3
 80146dc:	3720      	adds	r7, #32
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	20008c8c 	.word	0x20008c8c
 80146e8:	0801a754 	.word	0x0801a754
 80146ec:	0801a78c 	.word	0x0801a78c
 80146f0:	0801a7cc 	.word	0x0801a7cc
 80146f4:	0801a7f4 	.word	0x0801a7f4
 80146f8:	0801a80c 	.word	0x0801a80c
 80146fc:	0801a820 	.word	0x0801a820

08014700 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b088      	sub	sp, #32
 8014704:	af02      	add	r7, sp, #8
 8014706:	60f8      	str	r0, [r7, #12]
 8014708:	60b9      	str	r1, [r7, #8]
 801470a:	607a      	str	r2, [r7, #4]
 801470c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014714:	2b06      	cmp	r3, #6
 8014716:	d006      	beq.n	8014726 <etharp_update_arp_entry+0x26>
 8014718:	4b48      	ldr	r3, [pc, #288]	; (801483c <etharp_update_arp_entry+0x13c>)
 801471a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801471e:	4948      	ldr	r1, [pc, #288]	; (8014840 <etharp_update_arp_entry+0x140>)
 8014720:	4848      	ldr	r0, [pc, #288]	; (8014844 <etharp_update_arp_entry+0x144>)
 8014722:	f002 fa31 	bl	8016b88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d012      	beq.n	8014752 <etharp_update_arp_entry+0x52>
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00e      	beq.n	8014752 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68f9      	ldr	r1, [r7, #12]
 801473a:	4618      	mov	r0, r3
 801473c:	f001 f8fc 	bl	8015938 <ip4_addr_isbroadcast_u32>
 8014740:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014742:	2b00      	cmp	r3, #0
 8014744:	d105      	bne.n	8014752 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801474e:	2be0      	cmp	r3, #224	; 0xe0
 8014750:	d102      	bne.n	8014758 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014752:	f06f 030f 	mvn.w	r3, #15
 8014756:	e06c      	b.n	8014832 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014758:	78fb      	ldrb	r3, [r7, #3]
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	4619      	mov	r1, r3
 801475e:	68b8      	ldr	r0, [r7, #8]
 8014760:	f7ff fe84 	bl	801446c <etharp_find_entry>
 8014764:	4603      	mov	r3, r0
 8014766:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801476c:	2b00      	cmp	r3, #0
 801476e:	da02      	bge.n	8014776 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014774:	e05d      	b.n	8014832 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014776:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801477a:	4933      	ldr	r1, [pc, #204]	; (8014848 <etharp_update_arp_entry+0x148>)
 801477c:	4613      	mov	r3, r2
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	440b      	add	r3, r1
 8014786:	3314      	adds	r3, #20
 8014788:	2202      	movs	r2, #2
 801478a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801478c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014790:	492d      	ldr	r1, [pc, #180]	; (8014848 <etharp_update_arp_entry+0x148>)
 8014792:	4613      	mov	r3, r2
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4413      	add	r3, r2
 8014798:	00db      	lsls	r3, r3, #3
 801479a:	440b      	add	r3, r1
 801479c:	3308      	adds	r3, #8
 801479e:	68fa      	ldr	r2, [r7, #12]
 80147a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80147a2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147a6:	4613      	mov	r3, r2
 80147a8:	005b      	lsls	r3, r3, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	00db      	lsls	r3, r3, #3
 80147ae:	3308      	adds	r3, #8
 80147b0:	4a25      	ldr	r2, [pc, #148]	; (8014848 <etharp_update_arp_entry+0x148>)
 80147b2:	4413      	add	r3, r2
 80147b4:	3304      	adds	r3, #4
 80147b6:	2206      	movs	r2, #6
 80147b8:	6879      	ldr	r1, [r7, #4]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f002 f9d1 	bl	8016b62 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80147c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147c4:	4920      	ldr	r1, [pc, #128]	; (8014848 <etharp_update_arp_entry+0x148>)
 80147c6:	4613      	mov	r3, r2
 80147c8:	005b      	lsls	r3, r3, #1
 80147ca:	4413      	add	r3, r2
 80147cc:	00db      	lsls	r3, r3, #3
 80147ce:	440b      	add	r3, r1
 80147d0:	3312      	adds	r3, #18
 80147d2:	2200      	movs	r2, #0
 80147d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80147d6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147da:	491b      	ldr	r1, [pc, #108]	; (8014848 <etharp_update_arp_entry+0x148>)
 80147dc:	4613      	mov	r3, r2
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	4413      	add	r3, r2
 80147e2:	00db      	lsls	r3, r3, #3
 80147e4:	440b      	add	r3, r1
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d021      	beq.n	8014830 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80147ec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80147f0:	4915      	ldr	r1, [pc, #84]	; (8014848 <etharp_update_arp_entry+0x148>)
 80147f2:	4613      	mov	r3, r2
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4413      	add	r3, r2
 80147f8:	00db      	lsls	r3, r3, #3
 80147fa:	440b      	add	r3, r1
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014800:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014804:	4910      	ldr	r1, [pc, #64]	; (8014848 <etharp_update_arp_entry+0x148>)
 8014806:	4613      	mov	r3, r2
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4413      	add	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	440b      	add	r3, r1
 8014810:	2200      	movs	r2, #0
 8014812:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801481a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801481e:	9300      	str	r3, [sp, #0]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6939      	ldr	r1, [r7, #16]
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f001 ff29 	bl	801667c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801482a:	6938      	ldr	r0, [r7, #16]
 801482c:	f7f7 fc9c 	bl	800c168 <pbuf_free>
  }
  return ERR_OK;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3718      	adds	r7, #24
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	0801a754 	.word	0x0801a754
 8014840:	0801a84c 	.word	0x0801a84c
 8014844:	0801a7cc 	.word	0x0801a7cc
 8014848:	20008c8c 	.word	0x20008c8c

0801484c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014854:	2300      	movs	r3, #0
 8014856:	73fb      	strb	r3, [r7, #15]
 8014858:	e01f      	b.n	801489a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801485a:	7bfa      	ldrb	r2, [r7, #15]
 801485c:	4912      	ldr	r1, [pc, #72]	; (80148a8 <etharp_cleanup_netif+0x5c>)
 801485e:	4613      	mov	r3, r2
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	440b      	add	r3, r1
 8014868:	3314      	adds	r3, #20
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801486e:	7bbb      	ldrb	r3, [r7, #14]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d00f      	beq.n	8014894 <etharp_cleanup_netif+0x48>
 8014874:	7bfa      	ldrb	r2, [r7, #15]
 8014876:	490c      	ldr	r1, [pc, #48]	; (80148a8 <etharp_cleanup_netif+0x5c>)
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3308      	adds	r3, #8
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	429a      	cmp	r2, r3
 801488a:	d103      	bne.n	8014894 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801488c:	7bfb      	ldrb	r3, [r7, #15]
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fd12 	bl	80142b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014894:	7bfb      	ldrb	r3, [r7, #15]
 8014896:	3301      	adds	r3, #1
 8014898:	73fb      	strb	r3, [r7, #15]
 801489a:	7bfb      	ldrb	r3, [r7, #15]
 801489c:	2b09      	cmp	r3, #9
 801489e:	d9dc      	bls.n	801485a <etharp_cleanup_netif+0xe>
    }
  }
}
 80148a0:	bf00      	nop
 80148a2:	3710      	adds	r7, #16
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	20008c8c 	.word	0x20008c8c

080148ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80148ac:	b5b0      	push	{r4, r5, r7, lr}
 80148ae:	b08a      	sub	sp, #40	; 0x28
 80148b0:	af04      	add	r7, sp, #16
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d107      	bne.n	80148cc <etharp_input+0x20>
 80148bc:	4b3f      	ldr	r3, [pc, #252]	; (80149bc <etharp_input+0x110>)
 80148be:	f44f 7222 	mov.w	r2, #648	; 0x288
 80148c2:	493f      	ldr	r1, [pc, #252]	; (80149c0 <etharp_input+0x114>)
 80148c4:	483f      	ldr	r0, [pc, #252]	; (80149c4 <etharp_input+0x118>)
 80148c6:	f002 f95f 	bl	8016b88 <iprintf>
 80148ca:	e074      	b.n	80149b6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	685b      	ldr	r3, [r3, #4]
 80148d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148dc:	d10c      	bne.n	80148f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80148e2:	2b06      	cmp	r3, #6
 80148e4:	d108      	bne.n	80148f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148e6:	693b      	ldr	r3, [r7, #16]
 80148e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148ea:	2b04      	cmp	r3, #4
 80148ec:	d104      	bne.n	80148f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	885b      	ldrh	r3, [r3, #2]
 80148f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148f4:	2b08      	cmp	r3, #8
 80148f6:	d003      	beq.n	8014900 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f7f7 fc35 	bl	800c168 <pbuf_free>
    return;
 80148fe:	e05a      	b.n	80149b6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	330e      	adds	r3, #14
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	3318      	adds	r3, #24
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	3304      	adds	r3, #4
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d102      	bne.n	8014920 <etharp_input+0x74>
    for_us = 0;
 801491a:	2300      	movs	r3, #0
 801491c:	75fb      	strb	r3, [r7, #23]
 801491e:	e009      	b.n	8014934 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014920:	68ba      	ldr	r2, [r7, #8]
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	3304      	adds	r3, #4
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	bf0c      	ite	eq
 801492c:	2301      	moveq	r3, #1
 801492e:	2300      	movne	r3, #0
 8014930:	b2db      	uxtb	r3, r3
 8014932:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	f103 0208 	add.w	r2, r3, #8
 801493a:	7dfb      	ldrb	r3, [r7, #23]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d001      	beq.n	8014944 <etharp_input+0x98>
 8014940:	2301      	movs	r3, #1
 8014942:	e000      	b.n	8014946 <etharp_input+0x9a>
 8014944:	2302      	movs	r3, #2
 8014946:	f107 010c 	add.w	r1, r7, #12
 801494a:	6838      	ldr	r0, [r7, #0]
 801494c:	f7ff fed8 	bl	8014700 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	88db      	ldrh	r3, [r3, #6]
 8014954:	b29b      	uxth	r3, r3
 8014956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801495a:	d003      	beq.n	8014964 <etharp_input+0xb8>
 801495c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014960:	d01e      	beq.n	80149a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8014962:	e025      	b.n	80149b0 <etharp_input+0x104>
    if (for_us) {
 8014964:	7dfb      	ldrb	r3, [r7, #23]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d021      	beq.n	80149ae <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	f103 0529 	add.w	r5, r3, #41	; 0x29
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8014980:	693a      	ldr	r2, [r7, #16]
 8014982:	3208      	adds	r2, #8
      etharp_raw(netif,
 8014984:	2102      	movs	r1, #2
 8014986:	9103      	str	r1, [sp, #12]
 8014988:	f107 010c 	add.w	r1, r7, #12
 801498c:	9102      	str	r1, [sp, #8]
 801498e:	9201      	str	r2, [sp, #4]
 8014990:	9300      	str	r3, [sp, #0]
 8014992:	462b      	mov	r3, r5
 8014994:	4622      	mov	r2, r4
 8014996:	4601      	mov	r1, r0
 8014998:	6838      	ldr	r0, [r7, #0]
 801499a:	f000 fae7 	bl	8014f6c <etharp_raw>
    break;
 801499e:	e006      	b.n	80149ae <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80149a0:	f107 030c 	add.w	r3, r7, #12
 80149a4:	4619      	mov	r1, r3
 80149a6:	6838      	ldr	r0, [r7, #0]
 80149a8:	f7fe f980 	bl	8012cac <dhcp_arp_reply>
    break;
 80149ac:	e000      	b.n	80149b0 <etharp_input+0x104>
    break;
 80149ae:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f7f7 fbd9 	bl	800c168 <pbuf_free>
}
 80149b6:	3718      	adds	r7, #24
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bdb0      	pop	{r4, r5, r7, pc}
 80149bc:	0801a754 	.word	0x0801a754
 80149c0:	0801a8a4 	.word	0x0801a8a4
 80149c4:	0801a7cc 	.word	0x0801a7cc

080149c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b086      	sub	sp, #24
 80149cc:	af02      	add	r7, sp, #8
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	4613      	mov	r3, r2
 80149d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80149d6:	79fa      	ldrb	r2, [r7, #7]
 80149d8:	4944      	ldr	r1, [pc, #272]	; (8014aec <etharp_output_to_arp_index+0x124>)
 80149da:	4613      	mov	r3, r2
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	4413      	add	r3, r2
 80149e0:	00db      	lsls	r3, r3, #3
 80149e2:	440b      	add	r3, r1
 80149e4:	3314      	adds	r3, #20
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d806      	bhi.n	80149fa <etharp_output_to_arp_index+0x32>
 80149ec:	4b40      	ldr	r3, [pc, #256]	; (8014af0 <etharp_output_to_arp_index+0x128>)
 80149ee:	f240 22ed 	movw	r2, #749	; 0x2ed
 80149f2:	4940      	ldr	r1, [pc, #256]	; (8014af4 <etharp_output_to_arp_index+0x12c>)
 80149f4:	4840      	ldr	r0, [pc, #256]	; (8014af8 <etharp_output_to_arp_index+0x130>)
 80149f6:	f002 f8c7 	bl	8016b88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80149fa:	79fa      	ldrb	r2, [r7, #7]
 80149fc:	493b      	ldr	r1, [pc, #236]	; (8014aec <etharp_output_to_arp_index+0x124>)
 80149fe:	4613      	mov	r3, r2
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	4413      	add	r3, r2
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	440b      	add	r3, r1
 8014a08:	3314      	adds	r3, #20
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	2b02      	cmp	r3, #2
 8014a0e:	d153      	bne.n	8014ab8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014a10:	79fa      	ldrb	r2, [r7, #7]
 8014a12:	4936      	ldr	r1, [pc, #216]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a14:	4613      	mov	r3, r2
 8014a16:	005b      	lsls	r3, r3, #1
 8014a18:	4413      	add	r3, r2
 8014a1a:	00db      	lsls	r3, r3, #3
 8014a1c:	440b      	add	r3, r1
 8014a1e:	3312      	adds	r3, #18
 8014a20:	881b      	ldrh	r3, [r3, #0]
 8014a22:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014a26:	d919      	bls.n	8014a5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014a28:	79fa      	ldrb	r2, [r7, #7]
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	005b      	lsls	r3, r3, #1
 8014a2e:	4413      	add	r3, r2
 8014a30:	00db      	lsls	r3, r3, #3
 8014a32:	4a2e      	ldr	r2, [pc, #184]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a34:	4413      	add	r3, r2
 8014a36:	3304      	adds	r3, #4
 8014a38:	4619      	mov	r1, r3
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f000 fb44 	bl	80150c8 <etharp_request>
 8014a40:	4603      	mov	r3, r0
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d138      	bne.n	8014ab8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a46:	79fa      	ldrb	r2, [r7, #7]
 8014a48:	4928      	ldr	r1, [pc, #160]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	3314      	adds	r3, #20
 8014a56:	2203      	movs	r2, #3
 8014a58:	701a      	strb	r2, [r3, #0]
 8014a5a:	e02d      	b.n	8014ab8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014a5c:	79fa      	ldrb	r2, [r7, #7]
 8014a5e:	4923      	ldr	r1, [pc, #140]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a60:	4613      	mov	r3, r2
 8014a62:	005b      	lsls	r3, r3, #1
 8014a64:	4413      	add	r3, r2
 8014a66:	00db      	lsls	r3, r3, #3
 8014a68:	440b      	add	r3, r1
 8014a6a:	3312      	adds	r3, #18
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014a72:	d321      	bcc.n	8014ab8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014a74:	79fa      	ldrb	r2, [r7, #7]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	00db      	lsls	r3, r3, #3
 8014a7e:	4a1b      	ldr	r2, [pc, #108]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a80:	4413      	add	r3, r2
 8014a82:	1d19      	adds	r1, r3, #4
 8014a84:	79fa      	ldrb	r2, [r7, #7]
 8014a86:	4613      	mov	r3, r2
 8014a88:	005b      	lsls	r3, r3, #1
 8014a8a:	4413      	add	r3, r2
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	3308      	adds	r3, #8
 8014a90:	4a16      	ldr	r2, [pc, #88]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014a92:	4413      	add	r3, r2
 8014a94:	3304      	adds	r3, #4
 8014a96:	461a      	mov	r2, r3
 8014a98:	68f8      	ldr	r0, [r7, #12]
 8014a9a:	f000 faf3 	bl	8015084 <etharp_request_dst>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d109      	bne.n	8014ab8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014aa4:	79fa      	ldrb	r2, [r7, #7]
 8014aa6:	4911      	ldr	r1, [pc, #68]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	4413      	add	r3, r2
 8014aae:	00db      	lsls	r3, r3, #3
 8014ab0:	440b      	add	r3, r1
 8014ab2:	3314      	adds	r3, #20
 8014ab4:	2203      	movs	r2, #3
 8014ab6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8014abe:	79fa      	ldrb	r2, [r7, #7]
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	005b      	lsls	r3, r3, #1
 8014ac4:	4413      	add	r3, r2
 8014ac6:	00db      	lsls	r3, r3, #3
 8014ac8:	3308      	adds	r3, #8
 8014aca:	4a08      	ldr	r2, [pc, #32]	; (8014aec <etharp_output_to_arp_index+0x124>)
 8014acc:	4413      	add	r3, r2
 8014ace:	1d1a      	adds	r2, r3, #4
 8014ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ad4:	9300      	str	r3, [sp, #0]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	460a      	mov	r2, r1
 8014ada:	68b9      	ldr	r1, [r7, #8]
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f001 fdcd 	bl	801667c <ethernet_output>
 8014ae2:	4603      	mov	r3, r0
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3710      	adds	r7, #16
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	20008c8c 	.word	0x20008c8c
 8014af0:	0801a754 	.word	0x0801a754
 8014af4:	0801a8c4 	.word	0x0801a8c4
 8014af8:	0801a7cc 	.word	0x0801a7cc

08014afc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b08a      	sub	sp, #40	; 0x28
 8014b00:	af02      	add	r7, sp, #8
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	60b9      	str	r1, [r7, #8]
 8014b06:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d106      	bne.n	8014b20 <etharp_output+0x24>
 8014b12:	4b69      	ldr	r3, [pc, #420]	; (8014cb8 <etharp_output+0x1bc>)
 8014b14:	f240 321b 	movw	r2, #795	; 0x31b
 8014b18:	4968      	ldr	r1, [pc, #416]	; (8014cbc <etharp_output+0x1c0>)
 8014b1a:	4869      	ldr	r0, [pc, #420]	; (8014cc0 <etharp_output+0x1c4>)
 8014b1c:	f002 f834 	bl	8016b88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <etharp_output+0x38>
 8014b26:	4b64      	ldr	r3, [pc, #400]	; (8014cb8 <etharp_output+0x1bc>)
 8014b28:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014b2c:	4965      	ldr	r1, [pc, #404]	; (8014cc4 <etharp_output+0x1c8>)
 8014b2e:	4864      	ldr	r0, [pc, #400]	; (8014cc0 <etharp_output+0x1c4>)
 8014b30:	f002 f82a 	bl	8016b88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d106      	bne.n	8014b48 <etharp_output+0x4c>
 8014b3a:	4b5f      	ldr	r3, [pc, #380]	; (8014cb8 <etharp_output+0x1bc>)
 8014b3c:	f240 321d 	movw	r2, #797	; 0x31d
 8014b40:	4961      	ldr	r1, [pc, #388]	; (8014cc8 <etharp_output+0x1cc>)
 8014b42:	485f      	ldr	r0, [pc, #380]	; (8014cc0 <etharp_output+0x1c4>)
 8014b44:	f002 f820 	bl	8016b88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68f9      	ldr	r1, [r7, #12]
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f000 fef2 	bl	8015938 <ip4_addr_isbroadcast_u32>
 8014b54:	4603      	mov	r3, r0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d002      	beq.n	8014b60 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014b5a:	4b5c      	ldr	r3, [pc, #368]	; (8014ccc <etharp_output+0x1d0>)
 8014b5c:	61fb      	str	r3, [r7, #28]
 8014b5e:	e09b      	b.n	8014c98 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b68:	2be0      	cmp	r3, #224	; 0xe0
 8014b6a:	d118      	bne.n	8014b9e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014b70:	2300      	movs	r3, #0
 8014b72:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014b74:	235e      	movs	r3, #94	; 0x5e
 8014b76:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	3301      	adds	r3, #1
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	3302      	adds	r3, #2
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	3303      	adds	r3, #3
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014b96:	f107 0310 	add.w	r3, r7, #16
 8014b9a:	61fb      	str	r3, [r7, #28]
 8014b9c:	e07c      	b.n	8014c98 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	3304      	adds	r3, #4
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	405a      	eors	r2, r3
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3308      	adds	r3, #8
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	4013      	ands	r3, r2
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d012      	beq.n	8014bdc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014bbc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	d00b      	beq.n	8014bdc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	330c      	adds	r3, #12
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d003      	beq.n	8014bd6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	330c      	adds	r3, #12
 8014bd2:	61bb      	str	r3, [r7, #24]
 8014bd4:	e002      	b.n	8014bdc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014bd6:	f06f 0303 	mvn.w	r3, #3
 8014bda:	e069      	b.n	8014cb0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014bdc:	4b3c      	ldr	r3, [pc, #240]	; (8014cd0 <etharp_output+0x1d4>)
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	4619      	mov	r1, r3
 8014be2:	4a3c      	ldr	r2, [pc, #240]	; (8014cd4 <etharp_output+0x1d8>)
 8014be4:	460b      	mov	r3, r1
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	440b      	add	r3, r1
 8014bea:	00db      	lsls	r3, r3, #3
 8014bec:	4413      	add	r3, r2
 8014bee:	3314      	adds	r3, #20
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	2b01      	cmp	r3, #1
 8014bf4:	d917      	bls.n	8014c26 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014bf6:	69bb      	ldr	r3, [r7, #24]
 8014bf8:	681a      	ldr	r2, [r3, #0]
 8014bfa:	4b35      	ldr	r3, [pc, #212]	; (8014cd0 <etharp_output+0x1d4>)
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4934      	ldr	r1, [pc, #208]	; (8014cd4 <etharp_output+0x1d8>)
 8014c02:	4603      	mov	r3, r0
 8014c04:	005b      	lsls	r3, r3, #1
 8014c06:	4403      	add	r3, r0
 8014c08:	00db      	lsls	r3, r3, #3
 8014c0a:	440b      	add	r3, r1
 8014c0c:	3304      	adds	r3, #4
 8014c0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d108      	bne.n	8014c26 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014c14:	4b2e      	ldr	r3, [pc, #184]	; (8014cd0 <etharp_output+0x1d4>)
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	461a      	mov	r2, r3
 8014c1a:	68b9      	ldr	r1, [r7, #8]
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f7ff fed3 	bl	80149c8 <etharp_output_to_arp_index>
 8014c22:	4603      	mov	r3, r0
 8014c24:	e044      	b.n	8014cb0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c26:	2300      	movs	r3, #0
 8014c28:	75fb      	strb	r3, [r7, #23]
 8014c2a:	e02a      	b.n	8014c82 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c2c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c30:	4928      	ldr	r1, [pc, #160]	; (8014cd4 <etharp_output+0x1d8>)
 8014c32:	4613      	mov	r3, r2
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	440b      	add	r3, r1
 8014c3c:	3314      	adds	r3, #20
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d918      	bls.n	8014c76 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014c44:	69bb      	ldr	r3, [r7, #24]
 8014c46:	6819      	ldr	r1, [r3, #0]
 8014c48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014c4c:	4821      	ldr	r0, [pc, #132]	; (8014cd4 <etharp_output+0x1d8>)
 8014c4e:	4613      	mov	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	00db      	lsls	r3, r3, #3
 8014c56:	4403      	add	r3, r0
 8014c58:	3304      	adds	r3, #4
 8014c5a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c5c:	4299      	cmp	r1, r3
 8014c5e:	d10a      	bne.n	8014c76 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8014c60:	7dfa      	ldrb	r2, [r7, #23]
 8014c62:	4b1b      	ldr	r3, [pc, #108]	; (8014cd0 <etharp_output+0x1d4>)
 8014c64:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014c66:	7dfb      	ldrb	r3, [r7, #23]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	68b9      	ldr	r1, [r7, #8]
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f7ff feab 	bl	80149c8 <etharp_output_to_arp_index>
 8014c72:	4603      	mov	r3, r0
 8014c74:	e01c      	b.n	8014cb0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	75fb      	strb	r3, [r7, #23]
 8014c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c86:	2b09      	cmp	r3, #9
 8014c88:	ddd0      	ble.n	8014c2c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014c8a:	68ba      	ldr	r2, [r7, #8]
 8014c8c:	69b9      	ldr	r1, [r7, #24]
 8014c8e:	68f8      	ldr	r0, [r7, #12]
 8014c90:	f000 f822 	bl	8014cd8 <etharp_query>
 8014c94:	4603      	mov	r3, r0
 8014c96:	e00b      	b.n	8014cb0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8014c9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ca2:	9300      	str	r3, [sp, #0]
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	68b9      	ldr	r1, [r7, #8]
 8014ca8:	68f8      	ldr	r0, [r7, #12]
 8014caa:	f001 fce7 	bl	801667c <ethernet_output>
 8014cae:	4603      	mov	r3, r0
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3720      	adds	r7, #32
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	0801a754 	.word	0x0801a754
 8014cbc:	0801a8a4 	.word	0x0801a8a4
 8014cc0:	0801a7cc 	.word	0x0801a7cc
 8014cc4:	0801a8f4 	.word	0x0801a8f4
 8014cc8:	0801a894 	.word	0x0801a894
 8014ccc:	080262ec 	.word	0x080262ec
 8014cd0:	20008d7c 	.word	0x20008d7c
 8014cd4:	20008c8c 	.word	0x20008c8c

08014cd8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b08c      	sub	sp, #48	; 0x30
 8014cdc:	af02      	add	r7, sp, #8
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	3329      	adds	r3, #41	; 0x29
 8014ce8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014cea:	23ff      	movs	r3, #255	; 0xff
 8014cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	68f9      	ldr	r1, [r7, #12]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f000 fe1c 	bl	8015938 <ip4_addr_isbroadcast_u32>
 8014d00:	4603      	mov	r3, r0
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d10c      	bne.n	8014d20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d0e:	2be0      	cmp	r3, #224	; 0xe0
 8014d10:	d006      	beq.n	8014d20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d003      	beq.n	8014d20 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014d18:	68bb      	ldr	r3, [r7, #8]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d102      	bne.n	8014d26 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d20:	f06f 030f 	mvn.w	r3, #15
 8014d24:	e10f      	b.n	8014f46 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014d26:	68fa      	ldr	r2, [r7, #12]
 8014d28:	2101      	movs	r1, #1
 8014d2a:	68b8      	ldr	r0, [r7, #8]
 8014d2c:	f7ff fb9e 	bl	801446c <etharp_find_entry>
 8014d30:	4603      	mov	r3, r0
 8014d32:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8014d34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	da02      	bge.n	8014d42 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8014d3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d40:	e101      	b.n	8014f46 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014d42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d46:	4982      	ldr	r1, [pc, #520]	; (8014f50 <etharp_query+0x278>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	3314      	adds	r3, #20
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d117      	bne.n	8014d8a <etharp_query+0xb2>
    is_new_entry = 1;
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014d5e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d62:	497b      	ldr	r1, [pc, #492]	; (8014f50 <etharp_query+0x278>)
 8014d64:	4613      	mov	r3, r2
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	4413      	add	r3, r2
 8014d6a:	00db      	lsls	r3, r3, #3
 8014d6c:	440b      	add	r3, r1
 8014d6e:	3314      	adds	r3, #20
 8014d70:	2201      	movs	r2, #1
 8014d72:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014d74:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d78:	4975      	ldr	r1, [pc, #468]	; (8014f50 <etharp_query+0x278>)
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	005b      	lsls	r3, r3, #1
 8014d7e:	4413      	add	r3, r2
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	440b      	add	r3, r1
 8014d84:	3308      	adds	r3, #8
 8014d86:	68fa      	ldr	r2, [r7, #12]
 8014d88:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014d8a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014d8e:	4970      	ldr	r1, [pc, #448]	; (8014f50 <etharp_query+0x278>)
 8014d90:	4613      	mov	r3, r2
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	440b      	add	r3, r1
 8014d9a:	3314      	adds	r3, #20
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d012      	beq.n	8014dc8 <etharp_query+0xf0>
 8014da2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014da6:	496a      	ldr	r1, [pc, #424]	; (8014f50 <etharp_query+0x278>)
 8014da8:	4613      	mov	r3, r2
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	4413      	add	r3, r2
 8014dae:	00db      	lsls	r3, r3, #3
 8014db0:	440b      	add	r3, r1
 8014db2:	3314      	adds	r3, #20
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	d806      	bhi.n	8014dc8 <etharp_query+0xf0>
 8014dba:	4b66      	ldr	r3, [pc, #408]	; (8014f54 <etharp_query+0x27c>)
 8014dbc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014dc0:	4965      	ldr	r1, [pc, #404]	; (8014f58 <etharp_query+0x280>)
 8014dc2:	4866      	ldr	r0, [pc, #408]	; (8014f5c <etharp_query+0x284>)
 8014dc4:	f001 fee0 	bl	8016b88 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014dc8:	6a3b      	ldr	r3, [r7, #32]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d102      	bne.n	8014dd4 <etharp_query+0xfc>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10c      	bne.n	8014dee <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014dd4:	68b9      	ldr	r1, [r7, #8]
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f000 f976 	bl	80150c8 <etharp_request>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <etharp_query+0x116>
      return result;
 8014de8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014dec:	e0ab      	b.n	8014f46 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d106      	bne.n	8014e02 <etharp_query+0x12a>
 8014df4:	4b57      	ldr	r3, [pc, #348]	; (8014f54 <etharp_query+0x27c>)
 8014df6:	f240 32db 	movw	r2, #987	; 0x3db
 8014dfa:	4959      	ldr	r1, [pc, #356]	; (8014f60 <etharp_query+0x288>)
 8014dfc:	4857      	ldr	r0, [pc, #348]	; (8014f5c <etharp_query+0x284>)
 8014dfe:	f001 fec3 	bl	8016b88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014e02:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014e06:	4952      	ldr	r1, [pc, #328]	; (8014f50 <etharp_query+0x278>)
 8014e08:	4613      	mov	r3, r2
 8014e0a:	005b      	lsls	r3, r3, #1
 8014e0c:	4413      	add	r3, r2
 8014e0e:	00db      	lsls	r3, r3, #3
 8014e10:	440b      	add	r3, r1
 8014e12:	3314      	adds	r3, #20
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d919      	bls.n	8014e4e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8014e1a:	7cfa      	ldrb	r2, [r7, #19]
 8014e1c:	4b51      	ldr	r3, [pc, #324]	; (8014f64 <etharp_query+0x28c>)
 8014e1e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014e24:	4613      	mov	r3, r2
 8014e26:	005b      	lsls	r3, r3, #1
 8014e28:	4413      	add	r3, r2
 8014e2a:	00db      	lsls	r3, r3, #3
 8014e2c:	3308      	adds	r3, #8
 8014e2e:	4a48      	ldr	r2, [pc, #288]	; (8014f50 <etharp_query+0x278>)
 8014e30:	4413      	add	r3, r2
 8014e32:	1d1a      	adds	r2, r3, #4
 8014e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	4613      	mov	r3, r2
 8014e3c:	697a      	ldr	r2, [r7, #20]
 8014e3e:	6879      	ldr	r1, [r7, #4]
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f001 fc1b 	bl	801667c <ethernet_output>
 8014e46:	4603      	mov	r3, r0
 8014e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e4c:	e079      	b.n	8014f42 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014e52:	493f      	ldr	r1, [pc, #252]	; (8014f50 <etharp_query+0x278>)
 8014e54:	4613      	mov	r3, r2
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	4413      	add	r3, r2
 8014e5a:	00db      	lsls	r3, r3, #3
 8014e5c:	440b      	add	r3, r1
 8014e5e:	3314      	adds	r3, #20
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d16d      	bne.n	8014f42 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014e66:	2300      	movs	r3, #0
 8014e68:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e6e:	e01a      	b.n	8014ea6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014e70:	69fb      	ldr	r3, [r7, #28]
 8014e72:	895a      	ldrh	r2, [r3, #10]
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	891b      	ldrh	r3, [r3, #8]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d10a      	bne.n	8014e92 <etharp_query+0x1ba>
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d006      	beq.n	8014e92 <etharp_query+0x1ba>
 8014e84:	4b33      	ldr	r3, [pc, #204]	; (8014f54 <etharp_query+0x27c>)
 8014e86:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8014e8a:	4937      	ldr	r1, [pc, #220]	; (8014f68 <etharp_query+0x290>)
 8014e8c:	4833      	ldr	r0, [pc, #204]	; (8014f5c <etharp_query+0x284>)
 8014e8e:	f001 fe7b 	bl	8016b88 <iprintf>
      if (p->type != PBUF_ROM) {
 8014e92:	69fb      	ldr	r3, [r7, #28]
 8014e94:	7b1b      	ldrb	r3, [r3, #12]
 8014e96:	2b01      	cmp	r3, #1
 8014e98:	d002      	beq.n	8014ea0 <etharp_query+0x1c8>
        copy_needed = 1;
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	61bb      	str	r3, [r7, #24]
        break;
 8014e9e:	e005      	b.n	8014eac <etharp_query+0x1d4>
      }
      p = p->next;
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ea6:	69fb      	ldr	r3, [r7, #28]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d1e1      	bne.n	8014e70 <etharp_query+0x198>
    }
    if (copy_needed) {
 8014eac:	69bb      	ldr	r3, [r7, #24]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d017      	beq.n	8014ee2 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	891b      	ldrh	r3, [r3, #8]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	4619      	mov	r1, r3
 8014eba:	2002      	movs	r0, #2
 8014ebc:	f7f6 fde2 	bl	800ba84 <pbuf_alloc>
 8014ec0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8014ec2:	69fb      	ldr	r3, [r7, #28]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d011      	beq.n	8014eec <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8014ec8:	6879      	ldr	r1, [r7, #4]
 8014eca:	69f8      	ldr	r0, [r7, #28]
 8014ecc:	f7f7 fa8c 	bl	800c3e8 <pbuf_copy>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d00a      	beq.n	8014eec <etharp_query+0x214>
          pbuf_free(p);
 8014ed6:	69f8      	ldr	r0, [r7, #28]
 8014ed8:	f7f7 f946 	bl	800c168 <pbuf_free>
          p = NULL;
 8014edc:	2300      	movs	r3, #0
 8014ede:	61fb      	str	r3, [r7, #28]
 8014ee0:	e004      	b.n	8014eec <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ee6:	69f8      	ldr	r0, [r7, #28]
 8014ee8:	f7f7 f9f0 	bl	800c2cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d024      	beq.n	8014f3c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014ef2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014ef6:	4916      	ldr	r1, [pc, #88]	; (8014f50 <etharp_query+0x278>)
 8014ef8:	4613      	mov	r3, r2
 8014efa:	005b      	lsls	r3, r3, #1
 8014efc:	4413      	add	r3, r2
 8014efe:	00db      	lsls	r3, r3, #3
 8014f00:	440b      	add	r3, r1
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d00b      	beq.n	8014f20 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8014f08:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014f0c:	4910      	ldr	r1, [pc, #64]	; (8014f50 <etharp_query+0x278>)
 8014f0e:	4613      	mov	r3, r2
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4413      	add	r3, r2
 8014f14:	00db      	lsls	r3, r3, #3
 8014f16:	440b      	add	r3, r1
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f7 f924 	bl	800c168 <pbuf_free>
      }
      arp_table[i].q = p;
 8014f20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014f24:	490a      	ldr	r1, [pc, #40]	; (8014f50 <etharp_query+0x278>)
 8014f26:	4613      	mov	r3, r2
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4413      	add	r3, r2
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	440b      	add	r3, r1
 8014f30:	69fa      	ldr	r2, [r7, #28]
 8014f32:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014f34:	2300      	movs	r3, #0
 8014f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f3a:	e002      	b.n	8014f42 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014f3c:	23ff      	movs	r3, #255	; 0xff
 8014f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014f42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014f46:	4618      	mov	r0, r3
 8014f48:	3728      	adds	r7, #40	; 0x28
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	20008c8c 	.word	0x20008c8c
 8014f54:	0801a754 	.word	0x0801a754
 8014f58:	0801a900 	.word	0x0801a900
 8014f5c:	0801a7cc 	.word	0x0801a7cc
 8014f60:	0801a8f4 	.word	0x0801a8f4
 8014f64:	20008d7c 	.word	0x20008d7c
 8014f68:	0801a928 	.word	0x0801a928

08014f6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b08a      	sub	sp, #40	; 0x28
 8014f70:	af02      	add	r7, sp, #8
 8014f72:	60f8      	str	r0, [r7, #12]
 8014f74:	60b9      	str	r1, [r7, #8]
 8014f76:	607a      	str	r2, [r7, #4]
 8014f78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d106      	bne.n	8014f92 <etharp_raw+0x26>
 8014f84:	4b3a      	ldr	r3, [pc, #232]	; (8015070 <etharp_raw+0x104>)
 8014f86:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8014f8a:	493a      	ldr	r1, [pc, #232]	; (8015074 <etharp_raw+0x108>)
 8014f8c:	483a      	ldr	r0, [pc, #232]	; (8015078 <etharp_raw+0x10c>)
 8014f8e:	f001 fdfb 	bl	8016b88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014f92:	2200      	movs	r2, #0
 8014f94:	211c      	movs	r1, #28
 8014f96:	2002      	movs	r0, #2
 8014f98:	f7f6 fd74 	bl	800ba84 <pbuf_alloc>
 8014f9c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d102      	bne.n	8014faa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fa8:	e05d      	b.n	8015066 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	895b      	ldrh	r3, [r3, #10]
 8014fae:	2b1b      	cmp	r3, #27
 8014fb0:	d806      	bhi.n	8014fc0 <etharp_raw+0x54>
 8014fb2:	4b2f      	ldr	r3, [pc, #188]	; (8015070 <etharp_raw+0x104>)
 8014fb4:	f240 4264 	movw	r2, #1124	; 0x464
 8014fb8:	4930      	ldr	r1, [pc, #192]	; (801507c <etharp_raw+0x110>)
 8014fba:	482f      	ldr	r0, [pc, #188]	; (8015078 <etharp_raw+0x10c>)
 8014fbc:	f001 fde4 	bl	8016b88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014fc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f7f5 fef5 	bl	800adb8 <lwip_htons>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fdc:	2b06      	cmp	r3, #6
 8014fde:	d006      	beq.n	8014fee <etharp_raw+0x82>
 8014fe0:	4b23      	ldr	r3, [pc, #140]	; (8015070 <etharp_raw+0x104>)
 8014fe2:	f240 426b 	movw	r2, #1131	; 0x46b
 8014fe6:	4926      	ldr	r1, [pc, #152]	; (8015080 <etharp_raw+0x114>)
 8014fe8:	4823      	ldr	r0, [pc, #140]	; (8015078 <etharp_raw+0x10c>)
 8014fea:	f001 fdcd 	bl	8016b88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	2206      	movs	r2, #6
 8014ff4:	6839      	ldr	r1, [r7, #0]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f001 fdb3 	bl	8016b62 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	3312      	adds	r3, #18
 8015000:	2206      	movs	r2, #6
 8015002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015004:	4618      	mov	r0, r3
 8015006:	f001 fdac 	bl	8016b62 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	330e      	adds	r3, #14
 801500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015010:	6812      	ldr	r2, [r2, #0]
 8015012:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	3318      	adds	r3, #24
 8015018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801501a:	6812      	ldr	r2, [r2, #0]
 801501c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	2200      	movs	r2, #0
 8015022:	701a      	strb	r2, [r3, #0]
 8015024:	2200      	movs	r2, #0
 8015026:	f042 0201 	orr.w	r2, r2, #1
 801502a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	2200      	movs	r2, #0
 8015030:	f042 0208 	orr.w	r2, r2, #8
 8015034:	709a      	strb	r2, [r3, #2]
 8015036:	2200      	movs	r2, #0
 8015038:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	2206      	movs	r2, #6
 801503e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	2204      	movs	r2, #4
 8015044:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015046:	f640 0306 	movw	r3, #2054	; 0x806
 801504a:	9300      	str	r3, [sp, #0]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	68ba      	ldr	r2, [r7, #8]
 8015050:	69b9      	ldr	r1, [r7, #24]
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f001 fb12 	bl	801667c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015058:	69b8      	ldr	r0, [r7, #24]
 801505a:	f7f7 f885 	bl	800c168 <pbuf_free>
  p = NULL;
 801505e:	2300      	movs	r3, #0
 8015060:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015062:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015066:	4618      	mov	r0, r3
 8015068:	3720      	adds	r7, #32
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	0801a754 	.word	0x0801a754
 8015074:	0801a8a4 	.word	0x0801a8a4
 8015078:	0801a7cc 	.word	0x0801a7cc
 801507c:	0801a944 	.word	0x0801a944
 8015080:	0801a978 	.word	0x0801a978

08015084 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b088      	sub	sp, #32
 8015088:	af04      	add	r7, sp, #16
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	f103 0029 	add.w	r0, r3, #41	; 0x29
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80150a0:	2201      	movs	r2, #1
 80150a2:	9203      	str	r2, [sp, #12]
 80150a4:	68ba      	ldr	r2, [r7, #8]
 80150a6:	9202      	str	r2, [sp, #8]
 80150a8:	4a06      	ldr	r2, [pc, #24]	; (80150c4 <etharp_request_dst+0x40>)
 80150aa:	9201      	str	r2, [sp, #4]
 80150ac:	9300      	str	r3, [sp, #0]
 80150ae:	4603      	mov	r3, r0
 80150b0:	687a      	ldr	r2, [r7, #4]
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f7ff ff5a 	bl	8014f6c <etharp_raw>
 80150b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	080262f4 	.word	0x080262f4

080150c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80150d2:	4a05      	ldr	r2, [pc, #20]	; (80150e8 <etharp_request+0x20>)
 80150d4:	6839      	ldr	r1, [r7, #0]
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7ff ffd4 	bl	8015084 <etharp_request_dst>
 80150dc:	4603      	mov	r3, r0
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	080262ec 	.word	0x080262ec

080150ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08e      	sub	sp, #56	; 0x38
 80150f0:	af04      	add	r7, sp, #16
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80150f6:	4b7a      	ldr	r3, [pc, #488]	; (80152e0 <icmp_input+0x1f4>)
 80150f8:	689b      	ldr	r3, [r3, #8]
 80150fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	b29b      	uxth	r3, r3
 8015102:	f003 030f 	and.w	r3, r3, #15
 8015106:	b29b      	uxth	r3, r3
 8015108:	009b      	lsls	r3, r3, #2
 801510a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801510c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801510e:	2b13      	cmp	r3, #19
 8015110:	f240 80d1 	bls.w	80152b6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	895b      	ldrh	r3, [r3, #10]
 8015118:	2b03      	cmp	r3, #3
 801511a:	f240 80ce 	bls.w	80152ba <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015128:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801512c:	2b00      	cmp	r3, #0
 801512e:	f000 80bb 	beq.w	80152a8 <icmp_input+0x1bc>
 8015132:	2b08      	cmp	r3, #8
 8015134:	f040 80bb 	bne.w	80152ae <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015138:	4b6a      	ldr	r3, [pc, #424]	; (80152e4 <icmp_input+0x1f8>)
 801513a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801513c:	4b68      	ldr	r3, [pc, #416]	; (80152e0 <icmp_input+0x1f4>)
 801513e:	695b      	ldr	r3, [r3, #20]
 8015140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015144:	2be0      	cmp	r3, #224	; 0xe0
 8015146:	f000 80bf 	beq.w	80152c8 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801514a:	4b65      	ldr	r3, [pc, #404]	; (80152e0 <icmp_input+0x1f4>)
 801514c:	695a      	ldr	r2, [r3, #20]
 801514e:	4b64      	ldr	r3, [pc, #400]	; (80152e0 <icmp_input+0x1f4>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	4619      	mov	r1, r3
 8015154:	4610      	mov	r0, r2
 8015156:	f000 fbef 	bl	8015938 <ip4_addr_isbroadcast_u32>
 801515a:	4603      	mov	r3, r0
 801515c:	2b00      	cmp	r3, #0
 801515e:	f040 80b5 	bne.w	80152cc <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	891b      	ldrh	r3, [r3, #8]
 8015166:	2b07      	cmp	r3, #7
 8015168:	f240 80a9 	bls.w	80152be <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801516c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801516e:	330e      	adds	r3, #14
 8015170:	b29b      	uxth	r3, r3
 8015172:	b21b      	sxth	r3, r3
 8015174:	4619      	mov	r1, r3
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7f6 ffd2 	bl	800c120 <pbuf_header>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d046      	beq.n	8015210 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	891a      	ldrh	r2, [r3, #8]
 8015186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015188:	4413      	add	r3, r2
 801518a:	b29b      	uxth	r3, r3
 801518c:	2200      	movs	r2, #0
 801518e:	4619      	mov	r1, r3
 8015190:	2002      	movs	r0, #2
 8015192:	f7f6 fc77 	bl	800ba84 <pbuf_alloc>
 8015196:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	2b00      	cmp	r3, #0
 801519c:	f000 8098 	beq.w	80152d0 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80151a0:	69bb      	ldr	r3, [r7, #24]
 80151a2:	895b      	ldrh	r3, [r3, #10]
 80151a4:	461a      	mov	r2, r3
 80151a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151a8:	3308      	adds	r3, #8
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d203      	bcs.n	80151b6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80151ae:	69b8      	ldr	r0, [r7, #24]
 80151b0:	f7f6 ffda 	bl	800c168 <pbuf_free>
        goto icmperr;
 80151b4:	e08d      	b.n	80152d2 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80151bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151be:	4618      	mov	r0, r3
 80151c0:	f001 fccf 	bl	8016b62 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80151c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151c6:	425b      	negs	r3, r3
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	b21b      	sxth	r3, r3
 80151cc:	4619      	mov	r1, r3
 80151ce:	69b8      	ldr	r0, [r7, #24]
 80151d0:	f7f6 ffa6 	bl	800c120 <pbuf_header>
 80151d4:	4603      	mov	r3, r0
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d009      	beq.n	80151ee <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80151da:	4b43      	ldr	r3, [pc, #268]	; (80152e8 <icmp_input+0x1fc>)
 80151dc:	22af      	movs	r2, #175	; 0xaf
 80151de:	4943      	ldr	r1, [pc, #268]	; (80152ec <icmp_input+0x200>)
 80151e0:	4843      	ldr	r0, [pc, #268]	; (80152f0 <icmp_input+0x204>)
 80151e2:	f001 fcd1 	bl	8016b88 <iprintf>
        pbuf_free(r);
 80151e6:	69b8      	ldr	r0, [r7, #24]
 80151e8:	f7f6 ffbe 	bl	800c168 <pbuf_free>
        goto icmperr;
 80151ec:	e071      	b.n	80152d2 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80151ee:	6879      	ldr	r1, [r7, #4]
 80151f0:	69b8      	ldr	r0, [r7, #24]
 80151f2:	f7f7 f8f9 	bl	800c3e8 <pbuf_copy>
 80151f6:	4603      	mov	r3, r0
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d003      	beq.n	8015204 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80151fc:	69b8      	ldr	r0, [r7, #24]
 80151fe:	f7f6 ffb3 	bl	800c168 <pbuf_free>
        goto icmperr;
 8015202:	e066      	b.n	80152d2 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f7f6 ffaf 	bl	800c168 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801520a:	69bb      	ldr	r3, [r7, #24]
 801520c:	607b      	str	r3, [r7, #4]
 801520e:	e015      	b.n	801523c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015212:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8015216:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801521a:	33f2      	adds	r3, #242	; 0xf2
 801521c:	b29b      	uxth	r3, r3
 801521e:	b21b      	sxth	r3, r3
 8015220:	4619      	mov	r1, r3
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7f6 ff7c 	bl	800c120 <pbuf_header>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d006      	beq.n	801523c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801522e:	4b2e      	ldr	r3, [pc, #184]	; (80152e8 <icmp_input+0x1fc>)
 8015230:	22c0      	movs	r2, #192	; 0xc0
 8015232:	4930      	ldr	r1, [pc, #192]	; (80152f4 <icmp_input+0x208>)
 8015234:	482e      	ldr	r0, [pc, #184]	; (80152f0 <icmp_input+0x204>)
 8015236:	f001 fca7 	bl	8016b88 <iprintf>
        goto icmperr;
 801523a:	e04a      	b.n	80152d2 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015242:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015246:	4619      	mov	r1, r3
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f7f6 ff69 	bl	800c120 <pbuf_header>
 801524e:	4603      	mov	r3, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	d12b      	bne.n	80152ac <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801525a:	69fb      	ldr	r3, [r7, #28]
 801525c:	681a      	ldr	r2, [r3, #0]
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015262:	4b1f      	ldr	r3, [pc, #124]	; (80152e0 <icmp_input+0x1f4>)
 8015264:	691a      	ldr	r2, [r3, #16]
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	2200      	movs	r2, #0
 801526e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	2200      	movs	r2, #0
 8015274:	709a      	strb	r2, [r3, #2]
 8015276:	2200      	movs	r2, #0
 8015278:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	22ff      	movs	r2, #255	; 0xff
 801527e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	2200      	movs	r2, #0
 8015284:	729a      	strb	r2, [r3, #10]
 8015286:	2200      	movs	r2, #0
 8015288:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	9302      	str	r3, [sp, #8]
 801528e:	2301      	movs	r3, #1
 8015290:	9301      	str	r3, [sp, #4]
 8015292:	2300      	movs	r3, #0
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	23ff      	movs	r3, #255	; 0xff
 8015298:	2200      	movs	r2, #0
 801529a:	69f9      	ldr	r1, [r7, #28]
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f000 fa79 	bl	8015794 <ip4_output_if>
 80152a2:	4603      	mov	r3, r0
 80152a4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80152a6:	e001      	b.n	80152ac <icmp_input+0x1c0>
    break;
 80152a8:	bf00      	nop
 80152aa:	e000      	b.n	80152ae <icmp_input+0x1c2>
    break;
 80152ac:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7f6 ff5a 	bl	800c168 <pbuf_free>
  return;
 80152b4:	e011      	b.n	80152da <icmp_input+0x1ee>
    goto lenerr;
 80152b6:	bf00      	nop
 80152b8:	e002      	b.n	80152c0 <icmp_input+0x1d4>
    goto lenerr;
 80152ba:	bf00      	nop
 80152bc:	e000      	b.n	80152c0 <icmp_input+0x1d4>
      goto lenerr;
 80152be:	bf00      	nop
lenerr:
  pbuf_free(p);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7f6 ff51 	bl	800c168 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80152c6:	e008      	b.n	80152da <icmp_input+0x1ee>
      goto icmperr;
 80152c8:	bf00      	nop
 80152ca:	e002      	b.n	80152d2 <icmp_input+0x1e6>
      goto icmperr;
 80152cc:	bf00      	nop
 80152ce:	e000      	b.n	80152d2 <icmp_input+0x1e6>
        goto icmperr;
 80152d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7f6 ff48 	bl	800c168 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80152d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80152da:	3728      	adds	r7, #40	; 0x28
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	2000c3a4 	.word	0x2000c3a4
 80152e4:	2000c3b8 	.word	0x2000c3b8
 80152e8:	0801a9bc 	.word	0x0801a9bc
 80152ec:	0801a9f4 	.word	0x0801a9f4
 80152f0:	0801aa2c 	.word	0x0801aa2c
 80152f4:	0801aa54 	.word	0x0801aa54

080152f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	460b      	mov	r3, r1
 8015302:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015304:	78fb      	ldrb	r3, [r7, #3]
 8015306:	461a      	mov	r2, r3
 8015308:	2103      	movs	r1, #3
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f000 f814 	bl	8015338 <icmp_send_response>
}
 8015310:	bf00      	nop
 8015312:	3708      	adds	r7, #8
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	460b      	mov	r3, r1
 8015322:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015324:	78fb      	ldrb	r3, [r7, #3]
 8015326:	461a      	mov	r2, r3
 8015328:	210b      	movs	r1, #11
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f000 f804 	bl	8015338 <icmp_send_response>
}
 8015330:	bf00      	nop
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08c      	sub	sp, #48	; 0x30
 801533c:	af04      	add	r7, sp, #16
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	460b      	mov	r3, r1
 8015342:	70fb      	strb	r3, [r7, #3]
 8015344:	4613      	mov	r3, r2
 8015346:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015348:	2200      	movs	r2, #0
 801534a:	2124      	movs	r1, #36	; 0x24
 801534c:	2001      	movs	r0, #1
 801534e:	f7f6 fb99 	bl	800ba84 <pbuf_alloc>
 8015352:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d04c      	beq.n	80153f4 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	895b      	ldrh	r3, [r3, #10]
 801535e:	2b23      	cmp	r3, #35	; 0x23
 8015360:	d806      	bhi.n	8015370 <icmp_send_response+0x38>
 8015362:	4b26      	ldr	r3, [pc, #152]	; (80153fc <icmp_send_response+0xc4>)
 8015364:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015368:	4925      	ldr	r1, [pc, #148]	; (8015400 <icmp_send_response+0xc8>)
 801536a:	4826      	ldr	r0, [pc, #152]	; (8015404 <icmp_send_response+0xcc>)
 801536c:	f001 fc0c 	bl	8016b88 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	78fa      	ldrb	r2, [r7, #3]
 8015380:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	78ba      	ldrb	r2, [r7, #2]
 8015386:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	2200      	movs	r2, #0
 801538c:	711a      	strb	r2, [r3, #4]
 801538e:	2200      	movs	r2, #0
 8015390:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	2200      	movs	r2, #0
 8015396:	719a      	strb	r2, [r3, #6]
 8015398:	2200      	movs	r2, #0
 801539a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	f103 0008 	add.w	r0, r3, #8
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	221c      	movs	r2, #28
 80153aa:	4619      	mov	r1, r3
 80153ac:	f001 fbd9 	bl	8016b62 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80153b0:	69bb      	ldr	r3, [r7, #24]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80153b6:	f107 030c 	add.w	r3, r7, #12
 80153ba:	4618      	mov	r0, r3
 80153bc:	f000 f824 	bl	8015408 <ip4_route>
 80153c0:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d011      	beq.n	80153ec <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	2200      	movs	r2, #0
 80153cc:	709a      	strb	r2, [r3, #2]
 80153ce:	2200      	movs	r2, #0
 80153d0:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80153d2:	f107 020c 	add.w	r2, r7, #12
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	9302      	str	r3, [sp, #8]
 80153da:	2301      	movs	r3, #1
 80153dc:	9301      	str	r3, [sp, #4]
 80153de:	2300      	movs	r3, #0
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	23ff      	movs	r3, #255	; 0xff
 80153e4:	2100      	movs	r1, #0
 80153e6:	69f8      	ldr	r0, [r7, #28]
 80153e8:	f000 f9d4 	bl	8015794 <ip4_output_if>
  }
  pbuf_free(q);
 80153ec:	69f8      	ldr	r0, [r7, #28]
 80153ee:	f7f6 febb 	bl	800c168 <pbuf_free>
 80153f2:	e000      	b.n	80153f6 <icmp_send_response+0xbe>
    return;
 80153f4:	bf00      	nop
}
 80153f6:	3720      	adds	r7, #32
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	0801a9bc 	.word	0x0801a9bc
 8015400:	0801aa88 	.word	0x0801aa88
 8015404:	0801aa2c 	.word	0x0801aa2c

08015408 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015408:	b480      	push	{r7}
 801540a:	b085      	sub	sp, #20
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015410:	4b30      	ldr	r3, [pc, #192]	; (80154d4 <ip4_route+0xcc>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	60fb      	str	r3, [r7, #12]
 8015416:	e036      	b.n	8015486 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801541e:	f003 0301 	and.w	r3, r3, #1
 8015422:	b2db      	uxtb	r3, r3
 8015424:	2b00      	cmp	r3, #0
 8015426:	d02b      	beq.n	8015480 <ip4_route+0x78>
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801542e:	089b      	lsrs	r3, r3, #2
 8015430:	f003 0301 	and.w	r3, r3, #1
 8015434:	b2db      	uxtb	r3, r3
 8015436:	2b00      	cmp	r3, #0
 8015438:	d022      	beq.n	8015480 <ip4_route+0x78>
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	3304      	adds	r3, #4
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d01d      	beq.n	8015480 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	3304      	adds	r3, #4
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	405a      	eors	r2, r3
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	3308      	adds	r3, #8
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	4013      	ands	r3, r2
 8015458:	2b00      	cmp	r3, #0
 801545a:	d101      	bne.n	8015460 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	e033      	b.n	80154c8 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015466:	f003 0302 	and.w	r3, r3, #2
 801546a:	2b00      	cmp	r3, #0
 801546c:	d108      	bne.n	8015480 <ip4_route+0x78>
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	330c      	adds	r3, #12
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	429a      	cmp	r2, r3
 801547a:	d101      	bne.n	8015480 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	e023      	b.n	80154c8 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	60fb      	str	r3, [r7, #12]
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1c5      	bne.n	8015418 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801548c:	4b12      	ldr	r3, [pc, #72]	; (80154d8 <ip4_route+0xd0>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d015      	beq.n	80154c0 <ip4_route+0xb8>
 8015494:	4b10      	ldr	r3, [pc, #64]	; (80154d8 <ip4_route+0xd0>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801549c:	f003 0301 	and.w	r3, r3, #1
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d00d      	beq.n	80154c0 <ip4_route+0xb8>
 80154a4:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <ip4_route+0xd0>)
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80154ac:	f003 0304 	and.w	r3, r3, #4
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d005      	beq.n	80154c0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80154b4:	4b08      	ldr	r3, [pc, #32]	; (80154d8 <ip4_route+0xd0>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	3304      	adds	r3, #4
 80154ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d101      	bne.n	80154c4 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80154c0:	2300      	movs	r3, #0
 80154c2:	e001      	b.n	80154c8 <ip4_route+0xc0>
  }

  return netif_default;
 80154c4:	4b04      	ldr	r3, [pc, #16]	; (80154d8 <ip4_route+0xd0>)
 80154c6:	681b      	ldr	r3, [r3, #0]
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3714      	adds	r7, #20
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr
 80154d4:	2000fac4 	.word	0x2000fac4
 80154d8:	2000fac8 	.word	0x2000fac8

080154dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b088      	sub	sp, #32
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80154e6:	2301      	movs	r3, #1
 80154e8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	091b      	lsrs	r3, r3, #4
 80154f6:	b2db      	uxtb	r3, r3
 80154f8:	2b04      	cmp	r3, #4
 80154fa:	d004      	beq.n	8015506 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f7f6 fe33 	bl	800c168 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015502:	2300      	movs	r3, #0
 8015504:	e13e      	b.n	8015784 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8015506:	69fb      	ldr	r3, [r7, #28]
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	b29b      	uxth	r3, r3
 801550c:	f003 030f 	and.w	r3, r3, #15
 8015510:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8015512:	89fb      	ldrh	r3, [r7, #14]
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	885b      	ldrh	r3, [r3, #2]
 801551c:	b29b      	uxth	r3, r3
 801551e:	4618      	mov	r0, r3
 8015520:	f7f5 fc4a 	bl	800adb8 <lwip_htons>
 8015524:	4603      	mov	r3, r0
 8015526:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	891b      	ldrh	r3, [r3, #8]
 801552c:	89ba      	ldrh	r2, [r7, #12]
 801552e:	429a      	cmp	r2, r3
 8015530:	d204      	bcs.n	801553c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8015532:	89bb      	ldrh	r3, [r7, #12]
 8015534:	4619      	mov	r1, r3
 8015536:	6878      	ldr	r0, [r7, #4]
 8015538:	f7f6 fca2 	bl	800be80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	895b      	ldrh	r3, [r3, #10]
 8015540:	89fa      	ldrh	r2, [r7, #14]
 8015542:	429a      	cmp	r2, r3
 8015544:	d807      	bhi.n	8015556 <ip4_input+0x7a>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	891b      	ldrh	r3, [r3, #8]
 801554a:	89ba      	ldrh	r2, [r7, #12]
 801554c:	429a      	cmp	r2, r3
 801554e:	d802      	bhi.n	8015556 <ip4_input+0x7a>
 8015550:	89fb      	ldrh	r3, [r7, #14]
 8015552:	2b13      	cmp	r3, #19
 8015554:	d804      	bhi.n	8015560 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f7f6 fe06 	bl	800c168 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801555c:	2300      	movs	r3, #0
 801555e:	e111      	b.n	8015784 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	691b      	ldr	r3, [r3, #16]
 8015564:	4a89      	ldr	r2, [pc, #548]	; (801578c <ip4_input+0x2b0>)
 8015566:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	4a87      	ldr	r2, [pc, #540]	; (801578c <ip4_input+0x2b0>)
 801556e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015570:	4b86      	ldr	r3, [pc, #536]	; (801578c <ip4_input+0x2b0>)
 8015572:	695b      	ldr	r3, [r3, #20]
 8015574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015578:	2be0      	cmp	r3, #224	; 0xe0
 801557a:	d112      	bne.n	80155a2 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015582:	f003 0301 	and.w	r3, r3, #1
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2b00      	cmp	r3, #0
 801558a:	d007      	beq.n	801559c <ip4_input+0xc0>
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	3304      	adds	r3, #4
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d002      	beq.n	801559c <ip4_input+0xc0>
      netif = inp;
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	61bb      	str	r3, [r7, #24]
 801559a:	e041      	b.n	8015620 <ip4_input+0x144>
    } else {
      netif = NULL;
 801559c:	2300      	movs	r3, #0
 801559e:	61bb      	str	r3, [r7, #24]
 80155a0:	e03e      	b.n	8015620 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80155a2:	2301      	movs	r3, #1
 80155a4:	613b      	str	r3, [r7, #16]
    netif = inp;
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80155b0:	f003 0301 	and.w	r3, r3, #1
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d014      	beq.n	80155e4 <ip4_input+0x108>
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	3304      	adds	r3, #4
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00f      	beq.n	80155e4 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155c4:	4b71      	ldr	r3, [pc, #452]	; (801578c <ip4_input+0x2b0>)
 80155c6:	695a      	ldr	r2, [r3, #20]
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	3304      	adds	r3, #4
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d026      	beq.n	8015620 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80155d2:	4b6e      	ldr	r3, [pc, #440]	; (801578c <ip4_input+0x2b0>)
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	69b9      	ldr	r1, [r7, #24]
 80155d8:	4618      	mov	r0, r3
 80155da:	f000 f9ad 	bl	8015938 <ip4_addr_isbroadcast_u32>
 80155de:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d11d      	bne.n	8015620 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d00d      	beq.n	8015606 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80155ea:	4b68      	ldr	r3, [pc, #416]	; (801578c <ip4_input+0x2b0>)
 80155ec:	695b      	ldr	r3, [r3, #20]
 80155ee:	b2db      	uxtb	r3, r3
 80155f0:	2b7f      	cmp	r3, #127	; 0x7f
 80155f2:	d102      	bne.n	80155fa <ip4_input+0x11e>
          netif = NULL;
 80155f4:	2300      	movs	r3, #0
 80155f6:	61bb      	str	r3, [r7, #24]
          break;
 80155f8:	e012      	b.n	8015620 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 80155fe:	4b64      	ldr	r3, [pc, #400]	; (8015790 <ip4_input+0x2b4>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	61bb      	str	r3, [r7, #24]
 8015604:	e002      	b.n	801560c <ip4_input+0x130>
      } else {
        netif = netif->next;
 8015606:	69bb      	ldr	r3, [r7, #24]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801560c:	69ba      	ldr	r2, [r7, #24]
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	429a      	cmp	r2, r3
 8015612:	d102      	bne.n	801561a <ip4_input+0x13e>
        netif = netif->next;
 8015614:	69bb      	ldr	r3, [r7, #24]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d1c4      	bne.n	80155aa <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d111      	bne.n	801564a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	7a5b      	ldrb	r3, [r3, #9]
 801562a:	2b11      	cmp	r3, #17
 801562c:	d10d      	bne.n	801564a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801562e:	89fb      	ldrh	r3, [r7, #14]
 8015630:	69fa      	ldr	r2, [r7, #28]
 8015632:	4413      	add	r3, r2
 8015634:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	885b      	ldrh	r3, [r3, #2]
 801563a:	b29b      	uxth	r3, r3
 801563c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015640:	d103      	bne.n	801564a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015646:	2300      	movs	r3, #0
 8015648:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d017      	beq.n	8015680 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015650:	4b4e      	ldr	r3, [pc, #312]	; (801578c <ip4_input+0x2b0>)
 8015652:	691b      	ldr	r3, [r3, #16]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d013      	beq.n	8015680 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015658:	4b4c      	ldr	r3, [pc, #304]	; (801578c <ip4_input+0x2b0>)
 801565a:	691b      	ldr	r3, [r3, #16]
 801565c:	6839      	ldr	r1, [r7, #0]
 801565e:	4618      	mov	r0, r3
 8015660:	f000 f96a 	bl	8015938 <ip4_addr_isbroadcast_u32>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d105      	bne.n	8015676 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801566a:	4b48      	ldr	r3, [pc, #288]	; (801578c <ip4_input+0x2b0>)
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015672:	2be0      	cmp	r3, #224	; 0xe0
 8015674:	d104      	bne.n	8015680 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f7f6 fd76 	bl	800c168 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801567c:	2300      	movs	r3, #0
 801567e:	e081      	b.n	8015784 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d104      	bne.n	8015690 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f7f6 fd6e 	bl	800c168 <pbuf_free>
    return ERR_OK;
 801568c:	2300      	movs	r3, #0
 801568e:	e079      	b.n	8015784 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	88db      	ldrh	r3, [r3, #6]
 8015694:	b29b      	uxth	r3, r3
 8015696:	461a      	mov	r2, r3
 8015698:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801569c:	4013      	ands	r3, r2
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00b      	beq.n	80156ba <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f000 fc8e 	bl	8015fc4 <ip4_reass>
 80156a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d101      	bne.n	80156b4 <ip4_input+0x1d8>
      return ERR_OK;
 80156b0:	2300      	movs	r3, #0
 80156b2:	e067      	b.n	8015784 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80156ba:	4a34      	ldr	r2, [pc, #208]	; (801578c <ip4_input+0x2b0>)
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156c0:	4a32      	ldr	r2, [pc, #200]	; (801578c <ip4_input+0x2b0>)
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80156c6:	4a31      	ldr	r2, [pc, #196]	; (801578c <ip4_input+0x2b0>)
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	f003 030f 	and.w	r3, r3, #15
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	b29a      	uxth	r2, r3
 80156dc:	4b2b      	ldr	r3, [pc, #172]	; (801578c <ip4_input+0x2b0>)
 80156de:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80156e0:	89fb      	ldrh	r3, [r7, #14]
 80156e2:	425b      	negs	r3, r3
 80156e4:	b29b      	uxth	r3, r3
 80156e6:	b21b      	sxth	r3, r3
 80156e8:	4619      	mov	r1, r3
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7f6 fd18 	bl	800c120 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	7a5b      	ldrb	r3, [r3, #9]
 80156f4:	2b06      	cmp	r3, #6
 80156f6:	d009      	beq.n	801570c <ip4_input+0x230>
 80156f8:	2b11      	cmp	r3, #17
 80156fa:	d002      	beq.n	8015702 <ip4_input+0x226>
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d00a      	beq.n	8015716 <ip4_input+0x23a>
 8015700:	e00e      	b.n	8015720 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7fc fc05 	bl	8011f14 <udp_input>
      break;
 801570a:	e028      	b.n	801575e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801570c:	6839      	ldr	r1, [r7, #0]
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f7f8 fc24 	bl	800df5c <tcp_input>
      break;
 8015714:	e023      	b.n	801575e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8015716:	6839      	ldr	r1, [r7, #0]
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f7ff fce7 	bl	80150ec <icmp_input>
      break;
 801571e:	e01e      	b.n	801575e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015720:	4b1a      	ldr	r3, [pc, #104]	; (801578c <ip4_input+0x2b0>)
 8015722:	695b      	ldr	r3, [r3, #20]
 8015724:	69b9      	ldr	r1, [r7, #24]
 8015726:	4618      	mov	r0, r3
 8015728:	f000 f906 	bl	8015938 <ip4_addr_isbroadcast_u32>
 801572c:	4603      	mov	r3, r0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d112      	bne.n	8015758 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015732:	4b16      	ldr	r3, [pc, #88]	; (801578c <ip4_input+0x2b0>)
 8015734:	695b      	ldr	r3, [r3, #20]
 8015736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801573a:	2be0      	cmp	r3, #224	; 0xe0
 801573c:	d00c      	beq.n	8015758 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801573e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015742:	4619      	mov	r1, r3
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f7f6 fcfd 	bl	800c144 <pbuf_header_force>
        p->payload = iphdr;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	69fa      	ldr	r2, [r7, #28]
 801574e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015750:	2102      	movs	r1, #2
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7ff fdd0 	bl	80152f8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7f6 fd05 	bl	800c168 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801575e:	4b0b      	ldr	r3, [pc, #44]	; (801578c <ip4_input+0x2b0>)
 8015760:	2200      	movs	r2, #0
 8015762:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015764:	4b09      	ldr	r3, [pc, #36]	; (801578c <ip4_input+0x2b0>)
 8015766:	2200      	movs	r2, #0
 8015768:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801576a:	4b08      	ldr	r3, [pc, #32]	; (801578c <ip4_input+0x2b0>)
 801576c:	2200      	movs	r2, #0
 801576e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015770:	4b06      	ldr	r3, [pc, #24]	; (801578c <ip4_input+0x2b0>)
 8015772:	2200      	movs	r2, #0
 8015774:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015776:	4b05      	ldr	r3, [pc, #20]	; (801578c <ip4_input+0x2b0>)
 8015778:	2200      	movs	r2, #0
 801577a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801577c:	4b03      	ldr	r3, [pc, #12]	; (801578c <ip4_input+0x2b0>)
 801577e:	2200      	movs	r2, #0
 8015780:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	3720      	adds	r7, #32
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	2000c3a4 	.word	0x2000c3a4
 8015790:	2000fac4 	.word	0x2000fac4

08015794 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b08a      	sub	sp, #40	; 0x28
 8015798:	af04      	add	r7, sp, #16
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	60b9      	str	r1, [r7, #8]
 801579e:	607a      	str	r2, [r7, #4]
 80157a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d009      	beq.n	80157c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d003      	beq.n	80157ba <ip4_output_if+0x26>
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d102      	bne.n	80157c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80157ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157bc:	3304      	adds	r3, #4
 80157be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80157c0:	78fa      	ldrb	r2, [r7, #3]
 80157c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c4:	9302      	str	r3, [sp, #8]
 80157c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80157ca:	9301      	str	r3, [sp, #4]
 80157cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157d0:	9300      	str	r3, [sp, #0]
 80157d2:	4613      	mov	r3, r2
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	6979      	ldr	r1, [r7, #20]
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f000 f805 	bl	80157e8 <ip4_output_if_src>
 80157de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3718      	adds	r7, #24
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}

080157e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b088      	sub	sp, #32
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
 80157f4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	89db      	ldrh	r3, [r3, #14]
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d006      	beq.n	801580c <ip4_output_if_src+0x24>
 80157fe:	4b48      	ldr	r3, [pc, #288]	; (8015920 <ip4_output_if_src+0x138>)
 8015800:	f240 3233 	movw	r2, #819	; 0x333
 8015804:	4947      	ldr	r1, [pc, #284]	; (8015924 <ip4_output_if_src+0x13c>)
 8015806:	4848      	ldr	r0, [pc, #288]	; (8015928 <ip4_output_if_src+0x140>)
 8015808:	f001 f9be 	bl	8016b88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d060      	beq.n	80158d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015812:	2314      	movs	r3, #20
 8015814:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8015816:	2114      	movs	r1, #20
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f7f6 fc81 	bl	800c120 <pbuf_header>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d002      	beq.n	801582a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015824:	f06f 0301 	mvn.w	r3, #1
 8015828:	e075      	b.n	8015916 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	895b      	ldrh	r3, [r3, #10]
 8015834:	2b13      	cmp	r3, #19
 8015836:	d806      	bhi.n	8015846 <ip4_output_if_src+0x5e>
 8015838:	4b39      	ldr	r3, [pc, #228]	; (8015920 <ip4_output_if_src+0x138>)
 801583a:	f240 3261 	movw	r2, #865	; 0x361
 801583e:	493b      	ldr	r1, [pc, #236]	; (801592c <ip4_output_if_src+0x144>)
 8015840:	4839      	ldr	r0, [pc, #228]	; (8015928 <ip4_output_if_src+0x140>)
 8015842:	f001 f9a1 	bl	8016b88 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015852:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681a      	ldr	r2, [r3, #0]
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801585c:	8b7b      	ldrh	r3, [r7, #26]
 801585e:	089b      	lsrs	r3, r3, #2
 8015860:	b29b      	uxth	r3, r3
 8015862:	b2db      	uxtb	r3, r3
 8015864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015868:	b2da      	uxtb	r2, r3
 801586a:	69fb      	ldr	r3, [r7, #28]
 801586c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015874:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	891b      	ldrh	r3, [r3, #8]
 801587a:	4618      	mov	r0, r3
 801587c:	f7f5 fa9c 	bl	800adb8 <lwip_htons>
 8015880:	4603      	mov	r3, r0
 8015882:	461a      	mov	r2, r3
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	2200      	movs	r2, #0
 801588c:	719a      	strb	r2, [r3, #6]
 801588e:	2200      	movs	r2, #0
 8015890:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015892:	4b27      	ldr	r3, [pc, #156]	; (8015930 <ip4_output_if_src+0x148>)
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	4618      	mov	r0, r3
 8015898:	f7f5 fa8e 	bl	800adb8 <lwip_htons>
 801589c:	4603      	mov	r3, r0
 801589e:	461a      	mov	r2, r3
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80158a4:	4b22      	ldr	r3, [pc, #136]	; (8015930 <ip4_output_if_src+0x148>)
 80158a6:	881b      	ldrh	r3, [r3, #0]
 80158a8:	3301      	adds	r3, #1
 80158aa:	b29a      	uxth	r2, r3
 80158ac:	4b20      	ldr	r3, [pc, #128]	; (8015930 <ip4_output_if_src+0x148>)
 80158ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d104      	bne.n	80158c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80158b6:	4b1f      	ldr	r3, [pc, #124]	; (8015934 <ip4_output_if_src+0x14c>)
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	60da      	str	r2, [r3, #12]
 80158be:	e003      	b.n	80158c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	681a      	ldr	r2, [r3, #0]
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	2200      	movs	r2, #0
 80158cc:	729a      	strb	r2, [r3, #10]
 80158ce:	2200      	movs	r2, #0
 80158d0:	72da      	strb	r2, [r3, #11]
 80158d2:	e008      	b.n	80158e6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80158e0:	f107 0314 	add.w	r3, r7, #20
 80158e4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80158e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d00c      	beq.n	8015908 <ip4_output_if_src+0x120>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	891a      	ldrh	r2, [r3, #8]
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d906      	bls.n	8015908 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80158fa:	687a      	ldr	r2, [r7, #4]
 80158fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158fe:	68f8      	ldr	r0, [r7, #12]
 8015900:	f000 fd0a 	bl	8016318 <ip4_frag>
 8015904:	4603      	mov	r3, r0
 8015906:	e006      	b.n	8015916 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590a:	695b      	ldr	r3, [r3, #20]
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	68f9      	ldr	r1, [r7, #12]
 8015910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015912:	4798      	blx	r3
 8015914:	4603      	mov	r3, r0
}
 8015916:	4618      	mov	r0, r3
 8015918:	3720      	adds	r7, #32
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	0801aab4 	.word	0x0801aab4
 8015924:	0801aae8 	.word	0x0801aae8
 8015928:	0801aaf4 	.word	0x0801aaf4
 801592c:	0801ab1c 	.word	0x0801ab1c
 8015930:	20008d7e 	.word	0x20008d7e
 8015934:	080262e4 	.word	0x080262e4

08015938 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015938:	b480      	push	{r7}
 801593a:	b085      	sub	sp, #20
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
 8015940:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801594c:	d002      	beq.n	8015954 <ip4_addr_isbroadcast_u32+0x1c>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d101      	bne.n	8015958 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015954:	2301      	movs	r3, #1
 8015956:	e02a      	b.n	80159ae <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801595e:	f003 0302 	and.w	r3, r3, #2
 8015962:	2b00      	cmp	r3, #0
 8015964:	d101      	bne.n	801596a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015966:	2300      	movs	r3, #0
 8015968:	e021      	b.n	80159ae <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	3304      	adds	r3, #4
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	429a      	cmp	r2, r3
 8015974:	d101      	bne.n	801597a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015976:	2300      	movs	r3, #0
 8015978:	e019      	b.n	80159ae <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801597a:	68fa      	ldr	r2, [r7, #12]
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	3304      	adds	r3, #4
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	405a      	eors	r2, r3
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	3308      	adds	r3, #8
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4013      	ands	r3, r2
 801598c:	2b00      	cmp	r3, #0
 801598e:	d10d      	bne.n	80159ac <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	3308      	adds	r3, #8
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	43da      	mvns	r2, r3
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	3308      	adds	r3, #8
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d101      	bne.n	80159ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80159a8:	2301      	movs	r3, #1
 80159aa:	e000      	b.n	80159ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80159ac:	2300      	movs	r3, #0
  }
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3714      	adds	r7, #20
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr
	...

080159bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80159c2:	2300      	movs	r3, #0
 80159c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80159c6:	4b12      	ldr	r3, [pc, #72]	; (8015a10 <ip_reass_tmr+0x54>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80159cc:	e018      	b.n	8015a00 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	7fdb      	ldrb	r3, [r3, #31]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00b      	beq.n	80159ee <ip_reass_tmr+0x32>
      r->timer--;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	7fdb      	ldrb	r3, [r3, #31]
 80159da:	3b01      	subs	r3, #1
 80159dc:	b2da      	uxtb	r2, r3
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	60fb      	str	r3, [r7, #12]
 80159ec:	e008      	b.n	8015a00 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80159f8:	68b9      	ldr	r1, [r7, #8]
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f000 f80a 	bl	8015a14 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d1e3      	bne.n	80159ce <ip_reass_tmr+0x12>
     }
   }
}
 8015a06:	bf00      	nop
 8015a08:	3710      	adds	r7, #16
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	bf00      	nop
 8015a10:	20008d80 	.word	0x20008d80

08015a14 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b088      	sub	sp, #32
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
 8015a1c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015a22:	683a      	ldr	r2, [r7, #0]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d105      	bne.n	8015a36 <ip_reass_free_complete_datagram+0x22>
 8015a2a:	4b45      	ldr	r3, [pc, #276]	; (8015b40 <ip_reass_free_complete_datagram+0x12c>)
 8015a2c:	22ab      	movs	r2, #171	; 0xab
 8015a2e:	4945      	ldr	r1, [pc, #276]	; (8015b44 <ip_reass_free_complete_datagram+0x130>)
 8015a30:	4845      	ldr	r0, [pc, #276]	; (8015b48 <ip_reass_free_complete_datagram+0x134>)
 8015a32:	f001 f8a9 	bl	8016b88 <iprintf>
  if (prev != NULL) {
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d00a      	beq.n	8015a52 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015a3c:	683b      	ldr	r3, [r7, #0]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d005      	beq.n	8015a52 <ip_reass_free_complete_datagram+0x3e>
 8015a46:	4b3e      	ldr	r3, [pc, #248]	; (8015b40 <ip_reass_free_complete_datagram+0x12c>)
 8015a48:	22ad      	movs	r2, #173	; 0xad
 8015a4a:	4940      	ldr	r1, [pc, #256]	; (8015b4c <ip_reass_free_complete_datagram+0x138>)
 8015a4c:	483e      	ldr	r0, [pc, #248]	; (8015b48 <ip_reass_free_complete_datagram+0x134>)
 8015a4e:	f001 f89b 	bl	8016b88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	889b      	ldrh	r3, [r3, #4]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d12a      	bne.n	8015aba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	6858      	ldr	r0, [r3, #4]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	3308      	adds	r3, #8
 8015a7a:	2214      	movs	r2, #20
 8015a7c:	4619      	mov	r1, r3
 8015a7e:	f001 f870 	bl	8016b62 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a82:	2101      	movs	r1, #1
 8015a84:	69b8      	ldr	r0, [r7, #24]
 8015a86:	f7ff fc47 	bl	8015318 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a8a:	69b8      	ldr	r0, [r7, #24]
 8015a8c:	f7f6 fc06 	bl	800c29c <pbuf_clen>
 8015a90:	4603      	mov	r3, r0
 8015a92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a94:	8bfa      	ldrh	r2, [r7, #30]
 8015a96:	8a7b      	ldrh	r3, [r7, #18]
 8015a98:	4413      	add	r3, r2
 8015a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a9e:	db05      	blt.n	8015aac <ip_reass_free_complete_datagram+0x98>
 8015aa0:	4b27      	ldr	r3, [pc, #156]	; (8015b40 <ip_reass_free_complete_datagram+0x12c>)
 8015aa2:	22bc      	movs	r2, #188	; 0xbc
 8015aa4:	492a      	ldr	r1, [pc, #168]	; (8015b50 <ip_reass_free_complete_datagram+0x13c>)
 8015aa6:	4828      	ldr	r0, [pc, #160]	; (8015b48 <ip_reass_free_complete_datagram+0x134>)
 8015aa8:	f001 f86e 	bl	8016b88 <iprintf>
    pbufs_freed += clen;
 8015aac:	8bfa      	ldrh	r2, [r7, #30]
 8015aae:	8a7b      	ldrh	r3, [r7, #18]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015ab4:	69b8      	ldr	r0, [r7, #24]
 8015ab6:	f7f6 fb57 	bl	800c168 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015ac0:	e01f      	b.n	8015b02 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015ac2:	69bb      	ldr	r3, [r7, #24]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7f6 fbe2 	bl	800c29c <pbuf_clen>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015adc:	8bfa      	ldrh	r2, [r7, #30]
 8015ade:	8a7b      	ldrh	r3, [r7, #18]
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ae6:	db05      	blt.n	8015af4 <ip_reass_free_complete_datagram+0xe0>
 8015ae8:	4b15      	ldr	r3, [pc, #84]	; (8015b40 <ip_reass_free_complete_datagram+0x12c>)
 8015aea:	22cc      	movs	r2, #204	; 0xcc
 8015aec:	4918      	ldr	r1, [pc, #96]	; (8015b50 <ip_reass_free_complete_datagram+0x13c>)
 8015aee:	4816      	ldr	r0, [pc, #88]	; (8015b48 <ip_reass_free_complete_datagram+0x134>)
 8015af0:	f001 f84a 	bl	8016b88 <iprintf>
    pbufs_freed += clen;
 8015af4:	8bfa      	ldrh	r2, [r7, #30]
 8015af6:	8a7b      	ldrh	r3, [r7, #18]
 8015af8:	4413      	add	r3, r2
 8015afa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015afc:	68f8      	ldr	r0, [r7, #12]
 8015afe:	f7f6 fb33 	bl	800c168 <pbuf_free>
  while (p != NULL) {
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d1dc      	bne.n	8015ac2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015b08:	6839      	ldr	r1, [r7, #0]
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 f8c2 	bl	8015c94 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015b10:	4b10      	ldr	r3, [pc, #64]	; (8015b54 <ip_reass_free_complete_datagram+0x140>)
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	8bfa      	ldrh	r2, [r7, #30]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d905      	bls.n	8015b26 <ip_reass_free_complete_datagram+0x112>
 8015b1a:	4b09      	ldr	r3, [pc, #36]	; (8015b40 <ip_reass_free_complete_datagram+0x12c>)
 8015b1c:	22d2      	movs	r2, #210	; 0xd2
 8015b1e:	490e      	ldr	r1, [pc, #56]	; (8015b58 <ip_reass_free_complete_datagram+0x144>)
 8015b20:	4809      	ldr	r0, [pc, #36]	; (8015b48 <ip_reass_free_complete_datagram+0x134>)
 8015b22:	f001 f831 	bl	8016b88 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8015b26:	4b0b      	ldr	r3, [pc, #44]	; (8015b54 <ip_reass_free_complete_datagram+0x140>)
 8015b28:	881a      	ldrh	r2, [r3, #0]
 8015b2a:	8bfb      	ldrh	r3, [r7, #30]
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	b29a      	uxth	r2, r3
 8015b30:	4b08      	ldr	r3, [pc, #32]	; (8015b54 <ip_reass_free_complete_datagram+0x140>)
 8015b32:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015b34:	8bfb      	ldrh	r3, [r7, #30]
}
 8015b36:	4618      	mov	r0, r3
 8015b38:	3720      	adds	r7, #32
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	bd80      	pop	{r7, pc}
 8015b3e:	bf00      	nop
 8015b40:	0801ab4c 	.word	0x0801ab4c
 8015b44:	0801ab88 	.word	0x0801ab88
 8015b48:	0801ab94 	.word	0x0801ab94
 8015b4c:	0801abbc 	.word	0x0801abbc
 8015b50:	0801abd0 	.word	0x0801abd0
 8015b54:	20008d84 	.word	0x20008d84
 8015b58:	0801abf0 	.word	0x0801abf0

08015b5c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08a      	sub	sp, #40	; 0x28
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015b66:	2300      	movs	r3, #0
 8015b68:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015b72:	2300      	movs	r3, #0
 8015b74:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015b7a:	4b28      	ldr	r3, [pc, #160]	; (8015c1c <ip_reass_remove_oldest_datagram+0xc0>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b80:	e030      	b.n	8015be4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b84:	695a      	ldr	r2, [r3, #20]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d10c      	bne.n	8015ba8 <ip_reass_remove_oldest_datagram+0x4c>
 8015b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b90:	699a      	ldr	r2, [r3, #24]
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	691b      	ldr	r3, [r3, #16]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d106      	bne.n	8015ba8 <ip_reass_remove_oldest_datagram+0x4c>
 8015b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9c:	899a      	ldrh	r2, [r3, #12]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	889b      	ldrh	r3, [r3, #4]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d014      	beq.n	8015bd2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	3301      	adds	r3, #1
 8015bac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015bae:	6a3b      	ldr	r3, [r7, #32]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d104      	bne.n	8015bbe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	61bb      	str	r3, [r7, #24]
 8015bbc:	e009      	b.n	8015bd2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc0:	7fda      	ldrb	r2, [r3, #31]
 8015bc2:	6a3b      	ldr	r3, [r7, #32]
 8015bc4:	7fdb      	ldrb	r3, [r3, #31]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d803      	bhi.n	8015bd2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bcc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d001      	beq.n	8015bde <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1cb      	bne.n	8015b82 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d008      	beq.n	8015c02 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015bf0:	69b9      	ldr	r1, [r7, #24]
 8015bf2:	6a38      	ldr	r0, [r7, #32]
 8015bf4:	f7ff ff0e 	bl	8015a14 <ip_reass_free_complete_datagram>
 8015bf8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015bfa:	697a      	ldr	r2, [r7, #20]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	4413      	add	r3, r2
 8015c00:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015c02:	697a      	ldr	r2, [r7, #20]
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	da02      	bge.n	8015c10 <ip_reass_remove_oldest_datagram+0xb4>
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	dcac      	bgt.n	8015b6a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015c10:	697b      	ldr	r3, [r7, #20]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3728      	adds	r7, #40	; 0x28
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	20008d80 	.word	0x20008d80

08015c20 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c2a:	2004      	movs	r0, #4
 8015c2c:	f7f5 fce8 	bl	800b600 <memp_malloc>
 8015c30:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d110      	bne.n	8015c5a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015c38:	6839      	ldr	r1, [r7, #0]
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f7ff ff8e 	bl	8015b5c <ip_reass_remove_oldest_datagram>
 8015c40:	4602      	mov	r2, r0
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	4293      	cmp	r3, r2
 8015c46:	dc03      	bgt.n	8015c50 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c48:	2004      	movs	r0, #4
 8015c4a:	f7f5 fcd9 	bl	800b600 <memp_malloc>
 8015c4e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d101      	bne.n	8015c5a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8015c56:	2300      	movs	r3, #0
 8015c58:	e016      	b.n	8015c88 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015c5a:	2220      	movs	r2, #32
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f000 ff8a 	bl	8016b78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2203      	movs	r2, #3
 8015c68:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015c6a:	4b09      	ldr	r3, [pc, #36]	; (8015c90 <ip_reass_enqueue_new_datagram+0x70>)
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015c72:	4a07      	ldr	r2, [pc, #28]	; (8015c90 <ip_reass_enqueue_new_datagram+0x70>)
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	3308      	adds	r3, #8
 8015c7c:	2214      	movs	r2, #20
 8015c7e:	6879      	ldr	r1, [r7, #4]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f000 ff6e 	bl	8016b62 <memcpy>
  return ipr;
 8015c86:	68fb      	ldr	r3, [r7, #12]
}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}
 8015c90:	20008d80 	.word	0x20008d80

08015c94 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c9e:	4b10      	ldr	r3, [pc, #64]	; (8015ce0 <ip_reass_dequeue_datagram+0x4c>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d104      	bne.n	8015cb2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	4a0c      	ldr	r2, [pc, #48]	; (8015ce0 <ip_reass_dequeue_datagram+0x4c>)
 8015cae:	6013      	str	r3, [r2, #0]
 8015cb0:	e00d      	b.n	8015cce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d106      	bne.n	8015cc6 <ip_reass_dequeue_datagram+0x32>
 8015cb8:	4b0a      	ldr	r3, [pc, #40]	; (8015ce4 <ip_reass_dequeue_datagram+0x50>)
 8015cba:	f240 1245 	movw	r2, #325	; 0x145
 8015cbe:	490a      	ldr	r1, [pc, #40]	; (8015ce8 <ip_reass_dequeue_datagram+0x54>)
 8015cc0:	480a      	ldr	r0, [pc, #40]	; (8015cec <ip_reass_dequeue_datagram+0x58>)
 8015cc2:	f000 ff61 	bl	8016b88 <iprintf>
    prev->next = ipr->next;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681a      	ldr	r2, [r3, #0]
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015cce:	6879      	ldr	r1, [r7, #4]
 8015cd0:	2004      	movs	r0, #4
 8015cd2:	f7f5 fce7 	bl	800b6a4 <memp_free>
}
 8015cd6:	bf00      	nop
 8015cd8:	3708      	adds	r7, #8
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	20008d80 	.word	0x20008d80
 8015ce4:	0801ab4c 	.word	0x0801ab4c
 8015ce8:	0801ac0c 	.word	0x0801ac0c
 8015cec:	0801ab94 	.word	0x0801ab94

08015cf0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b08c      	sub	sp, #48	; 0x30
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015d00:	2301      	movs	r3, #1
 8015d02:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015d0a:	69fb      	ldr	r3, [r7, #28]
 8015d0c:	885b      	ldrh	r3, [r3, #2]
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7f5 f851 	bl	800adb8 <lwip_htons>
 8015d16:	4603      	mov	r3, r0
 8015d18:	461a      	mov	r2, r3
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	f003 030f 	and.w	r3, r3, #15
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	1ad3      	subs	r3, r2, r3
 8015d2c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	88db      	ldrh	r3, [r3, #6]
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7f5 f83f 	bl	800adb8 <lwip_htons>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	2200      	movs	r2, #0
 8015d50:	701a      	strb	r2, [r3, #0]
 8015d52:	2200      	movs	r2, #0
 8015d54:	705a      	strb	r2, [r3, #1]
 8015d56:	2200      	movs	r2, #0
 8015d58:	709a      	strb	r2, [r3, #2]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d60:	8b3a      	ldrh	r2, [r7, #24]
 8015d62:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8015d64:	8b3a      	ldrh	r2, [r7, #24]
 8015d66:	8b7b      	ldrh	r3, [r7, #26]
 8015d68:	4413      	add	r3, r2
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	627b      	str	r3, [r7, #36]	; 0x24
 8015d76:	e061      	b.n	8015e3c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8015d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8015d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d80:	889b      	ldrh	r3, [r3, #4]
 8015d82:	b29a      	uxth	r2, r3
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	889b      	ldrh	r3, [r3, #4]
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d232      	bcs.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d92:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d01f      	beq.n	8015dda <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9c:	889b      	ldrh	r3, [r3, #4]
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da2:	88db      	ldrh	r3, [r3, #6]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	429a      	cmp	r2, r3
 8015da8:	f0c0 80e3 	bcc.w	8015f72 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8015dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dae:	88db      	ldrh	r3, [r3, #6]
 8015db0:	b29a      	uxth	r2, r3
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	889b      	ldrh	r3, [r3, #4]
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	429a      	cmp	r2, r3
 8015dba:	f200 80da 	bhi.w	8015f72 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc0:	68ba      	ldr	r2, [r7, #8]
 8015dc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc6:	88db      	ldrh	r3, [r3, #6]
 8015dc8:	b29a      	uxth	r2, r3
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	889b      	ldrh	r3, [r3, #4]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d037      	beq.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015dd8:	e034      	b.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8015dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ddc:	88db      	ldrh	r3, [r3, #6]
 8015dde:	b29a      	uxth	r2, r3
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	889b      	ldrh	r3, [r3, #4]
 8015de4:	b29b      	uxth	r3, r3
 8015de6:	429a      	cmp	r2, r3
 8015de8:	f200 80c5 	bhi.w	8015f76 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	68ba      	ldr	r2, [r7, #8]
 8015df0:	605a      	str	r2, [r3, #4]
      break;
 8015df2:	e027      	b.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8015df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df6:	889b      	ldrh	r3, [r3, #4]
 8015df8:	b29a      	uxth	r2, r3
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	889b      	ldrh	r3, [r3, #4]
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	429a      	cmp	r2, r3
 8015e02:	f000 80ba 	beq.w	8015f7a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e08:	889b      	ldrh	r3, [r3, #4]
 8015e0a:	b29a      	uxth	r2, r3
 8015e0c:	697b      	ldr	r3, [r7, #20]
 8015e0e:	88db      	ldrh	r3, [r3, #6]
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	429a      	cmp	r2, r3
 8015e14:	f0c0 80b3 	bcc.w	8015f7e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d009      	beq.n	8015e32 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	889b      	ldrh	r3, [r3, #4]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d001      	beq.n	8015e32 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d19a      	bne.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8015e42:	e000      	b.n	8015e46 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8015e44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d12d      	bne.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8015e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d01c      	beq.n	8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e54:	88db      	ldrh	r3, [r3, #6]
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e5a:	889b      	ldrh	r3, [r3, #4]
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d906      	bls.n	8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8015e62:	4b51      	ldr	r3, [pc, #324]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015e64:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015e68:	4950      	ldr	r1, [pc, #320]	; (8015fac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e6a:	4851      	ldr	r0, [pc, #324]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e6c:	f000 fe8c 	bl	8016b88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e78:	88db      	ldrh	r3, [r3, #6]
 8015e7a:	b29a      	uxth	r2, r3
 8015e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7e:	889b      	ldrh	r3, [r3, #4]
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d010      	beq.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	623b      	str	r3, [r7, #32]
 8015e8a:	e00d      	b.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d006      	beq.n	8015ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8015e94:	4b44      	ldr	r3, [pc, #272]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015e96:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8015e9a:	4946      	ldr	r1, [pc, #280]	; (8015fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e9c:	4844      	ldr	r0, [pc, #272]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e9e:	f000 fe73 	bl	8016b88 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d105      	bne.n	8015eba <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	7f9b      	ldrb	r3, [r3, #30]
 8015eb2:	f003 0301 	and.w	r3, r3, #1
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d059      	beq.n	8015f6e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8015eba:	6a3b      	ldr	r3, [r7, #32]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d04f      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d006      	beq.n	8015ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	889b      	ldrh	r3, [r3, #4]
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d002      	beq.n	8015edc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	623b      	str	r3, [r7, #32]
 8015eda:	e041      	b.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ede:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ee6:	e012      	b.n	8015f0e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	88db      	ldrh	r3, [r3, #6]
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	889b      	ldrh	r3, [r3, #4]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d002      	beq.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	623b      	str	r3, [r7, #32]
            break;
 8015f02:	e007      	b.n	8015f14 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8015f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1e9      	bne.n	8015ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015f14:	6a3b      	ldr	r3, [r7, #32]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d022      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d106      	bne.n	8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8015f22:	4b21      	ldr	r3, [pc, #132]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f24:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8015f28:	4923      	ldr	r1, [pc, #140]	; (8015fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f2a:	4821      	ldr	r0, [pc, #132]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f2c:	f000 fe2c 	bl	8016b88 <iprintf>
          LWIP_ASSERT("sanity check",
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d106      	bne.n	8015f4a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015f3c:	4b1a      	ldr	r3, [pc, #104]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f3e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015f42:	491d      	ldr	r1, [pc, #116]	; (8015fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f44:	481a      	ldr	r0, [pc, #104]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f46:	f000 fe1f 	bl	8016b88 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d006      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8015f52:	4b15      	ldr	r3, [pc, #84]	; (8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015f54:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015f58:	4918      	ldr	r1, [pc, #96]	; (8015fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f5a:	4815      	ldr	r0, [pc, #84]	; (8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f5c:	f000 fe14 	bl	8016b88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f60:	6a3b      	ldr	r3, [r7, #32]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	bf14      	ite	ne
 8015f66:	2301      	movne	r3, #1
 8015f68:	2300      	moveq	r3, #0
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	e018      	b.n	8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f6e:	2300      	movs	r3, #0
 8015f70:	e016      	b.n	8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8015f72:	bf00      	nop
 8015f74:	e004      	b.n	8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8015f76:	bf00      	nop
 8015f78:	e002      	b.n	8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015f7a:	bf00      	nop
 8015f7c:	e000      	b.n	8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015f7e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015f80:	68b8      	ldr	r0, [r7, #8]
 8015f82:	f7f6 f98b 	bl	800c29c <pbuf_clen>
 8015f86:	4603      	mov	r3, r0
 8015f88:	461a      	mov	r2, r3
 8015f8a:	4b0d      	ldr	r3, [pc, #52]	; (8015fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f8c:	881b      	ldrh	r3, [r3, #0]
 8015f8e:	1a9b      	subs	r3, r3, r2
 8015f90:	b29a      	uxth	r2, r3
 8015f92:	4b0b      	ldr	r3, [pc, #44]	; (8015fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f94:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8015f96:	68b8      	ldr	r0, [r7, #8]
 8015f98:	f7f6 f8e6 	bl	800c168 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3730      	adds	r7, #48	; 0x30
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	0801ab4c 	.word	0x0801ab4c
 8015fac:	0801ac28 	.word	0x0801ac28
 8015fb0:	0801ab94 	.word	0x0801ab94
 8015fb4:	0801ac48 	.word	0x0801ac48
 8015fb8:	0801ac80 	.word	0x0801ac80
 8015fbc:	0801ac90 	.word	0x0801ac90
 8015fc0:	20008d84 	.word	0x20008d84

08015fc4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b08e      	sub	sp, #56	; 0x38
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	f003 030f 	and.w	r3, r3, #15
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	2b14      	cmp	r3, #20
 8015fde:	f040 8131 	bne.w	8016244 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe4:	88db      	ldrh	r3, [r3, #6]
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f7f4 fee5 	bl	800adb8 <lwip_htons>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	00db      	lsls	r3, r3, #3
 8015ff8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	885b      	ldrh	r3, [r3, #2]
 8015ffe:	b29b      	uxth	r3, r3
 8016000:	4618      	mov	r0, r3
 8016002:	f7f4 fed9 	bl	800adb8 <lwip_htons>
 8016006:	4603      	mov	r3, r0
 8016008:	461a      	mov	r2, r3
 801600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801600c:	781b      	ldrb	r3, [r3, #0]
 801600e:	b29b      	uxth	r3, r3
 8016010:	f003 030f 	and.w	r3, r3, #15
 8016014:	b29b      	uxth	r3, r3
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	b29b      	uxth	r3, r3
 801601a:	1ad3      	subs	r3, r2, r3
 801601c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f7f6 f93c 	bl	800c29c <pbuf_clen>
 8016024:	4603      	mov	r3, r0
 8016026:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016028:	4b8d      	ldr	r3, [pc, #564]	; (8016260 <ip4_reass+0x29c>)
 801602a:	881b      	ldrh	r3, [r3, #0]
 801602c:	461a      	mov	r2, r3
 801602e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016030:	4413      	add	r3, r2
 8016032:	2b0a      	cmp	r3, #10
 8016034:	dd10      	ble.n	8016058 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016038:	4619      	mov	r1, r3
 801603a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801603c:	f7ff fd8e 	bl	8015b5c <ip_reass_remove_oldest_datagram>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	f000 8100 	beq.w	8016248 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016048:	4b85      	ldr	r3, [pc, #532]	; (8016260 <ip4_reass+0x29c>)
 801604a:	881b      	ldrh	r3, [r3, #0]
 801604c:	461a      	mov	r2, r3
 801604e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016050:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016052:	2b0a      	cmp	r3, #10
 8016054:	f300 80f8 	bgt.w	8016248 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016058:	4b82      	ldr	r3, [pc, #520]	; (8016264 <ip4_reass+0x2a0>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	633b      	str	r3, [r7, #48]	; 0x30
 801605e:	e015      	b.n	801608c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016062:	695a      	ldr	r2, [r3, #20]
 8016064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016066:	68db      	ldr	r3, [r3, #12]
 8016068:	429a      	cmp	r2, r3
 801606a:	d10c      	bne.n	8016086 <ip4_reass+0xc2>
 801606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606e:	699a      	ldr	r2, [r3, #24]
 8016070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016072:	691b      	ldr	r3, [r3, #16]
 8016074:	429a      	cmp	r2, r3
 8016076:	d106      	bne.n	8016086 <ip4_reass+0xc2>
 8016078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607a:	899a      	ldrh	r2, [r3, #12]
 801607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607e:	889b      	ldrh	r3, [r3, #4]
 8016080:	b29b      	uxth	r3, r3
 8016082:	429a      	cmp	r2, r3
 8016084:	d006      	beq.n	8016094 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	633b      	str	r3, [r7, #48]	; 0x30
 801608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801608e:	2b00      	cmp	r3, #0
 8016090:	d1e6      	bne.n	8016060 <ip4_reass+0x9c>
 8016092:	e000      	b.n	8016096 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016094:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016098:	2b00      	cmp	r3, #0
 801609a:	d109      	bne.n	80160b0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801609c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801609e:	4619      	mov	r1, r3
 80160a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160a2:	f7ff fdbd 	bl	8015c20 <ip_reass_enqueue_new_datagram>
 80160a6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80160a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d11c      	bne.n	80160e8 <ip4_reass+0x124>
      goto nullreturn;
 80160ae:	e0ce      	b.n	801624e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80160b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b2:	88db      	ldrh	r3, [r3, #6]
 80160b4:	b29b      	uxth	r3, r3
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7f4 fe7e 	bl	800adb8 <lwip_htons>
 80160bc:	4603      	mov	r3, r0
 80160be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d110      	bne.n	80160e8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80160c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c8:	89db      	ldrh	r3, [r3, #14]
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f4 fe74 	bl	800adb8 <lwip_htons>
 80160d0:	4603      	mov	r3, r0
 80160d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d006      	beq.n	80160e8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80160da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160dc:	3308      	adds	r3, #8
 80160de:	2214      	movs	r2, #20
 80160e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160e2:	4618      	mov	r0, r3
 80160e4:	f000 fd3d 	bl	8016b62 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80160e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ea:	88db      	ldrh	r3, [r3, #6]
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	f003 0320 	and.w	r3, r3, #32
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	bf0c      	ite	eq
 80160f6:	2301      	moveq	r3, #1
 80160f8:	2300      	movne	r3, #0
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80160fe:	69fb      	ldr	r3, [r7, #28]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d00e      	beq.n	8016122 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8016104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016108:	4413      	add	r3, r2
 801610a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801610c:	8b7a      	ldrh	r2, [r7, #26]
 801610e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016110:	429a      	cmp	r2, r3
 8016112:	f0c0 8099 	bcc.w	8016248 <ip4_reass+0x284>
 8016116:	8b7b      	ldrh	r3, [r7, #26]
 8016118:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801611c:	4293      	cmp	r3, r2
 801611e:	f200 8093 	bhi.w	8016248 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016122:	69fa      	ldr	r2, [r7, #28]
 8016124:	6879      	ldr	r1, [r7, #4]
 8016126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016128:	f7ff fde2 	bl	8015cf0 <ip_reass_chain_frag_into_datagram_and_validate>
 801612c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016134:	f000 808a 	beq.w	801624c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016138:	4b49      	ldr	r3, [pc, #292]	; (8016260 <ip4_reass+0x29c>)
 801613a:	881a      	ldrh	r2, [r3, #0]
 801613c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801613e:	4413      	add	r3, r2
 8016140:	b29a      	uxth	r2, r3
 8016142:	4b47      	ldr	r3, [pc, #284]	; (8016260 <ip4_reass+0x29c>)
 8016144:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d00d      	beq.n	8016168 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801614c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801614e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016150:	4413      	add	r3, r2
 8016152:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016156:	8a7a      	ldrh	r2, [r7, #18]
 8016158:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615c:	7f9b      	ldrb	r3, [r3, #30]
 801615e:	f043 0301 	orr.w	r3, r3, #1
 8016162:	b2da      	uxtb	r2, r3
 8016164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016166:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016168:	697b      	ldr	r3, [r7, #20]
 801616a:	2b01      	cmp	r3, #1
 801616c:	d168      	bne.n	8016240 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016170:	8b9b      	ldrh	r3, [r3, #28]
 8016172:	3314      	adds	r3, #20
 8016174:	b29a      	uxth	r2, r3
 8016176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016178:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8016184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618e:	3308      	adds	r3, #8
 8016190:	2214      	movs	r2, #20
 8016192:	4619      	mov	r1, r3
 8016194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016196:	f000 fce4 	bl	8016b62 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	8b9b      	ldrh	r3, [r3, #28]
 801619e:	4618      	mov	r0, r3
 80161a0:	f7f4 fe0a 	bl	800adb8 <lwip_htons>
 80161a4:	4603      	mov	r3, r0
 80161a6:	461a      	mov	r2, r3
 80161a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80161ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ae:	2200      	movs	r2, #0
 80161b0:	719a      	strb	r2, [r3, #6]
 80161b2:	2200      	movs	r2, #0
 80161b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b8:	2200      	movs	r2, #0
 80161ba:	729a      	strb	r2, [r3, #10]
 80161bc:	2200      	movs	r2, #0
 80161be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80161c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80161c6:	e00e      	b.n	80161e6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80161c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80161ce:	f06f 0113 	mvn.w	r1, #19
 80161d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80161d4:	f7f5 ffa4 	bl	800c120 <pbuf_header>
      pbuf_cat(p, r);
 80161d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7f6 f89e 	bl	800c31c <pbuf_cat>
      r = iprh->next_pbuf;
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80161e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d1ed      	bne.n	80161c8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80161ec:	4b1d      	ldr	r3, [pc, #116]	; (8016264 <ip4_reass+0x2a0>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d102      	bne.n	80161fc <ip4_reass+0x238>
      ipr_prev = NULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161fa:	e010      	b.n	801621e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161fc:	4b19      	ldr	r3, [pc, #100]	; (8016264 <ip4_reass+0x2a0>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016202:	e007      	b.n	8016214 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8016204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801620a:	429a      	cmp	r2, r3
 801620c:	d006      	beq.n	801621c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016216:	2b00      	cmp	r3, #0
 8016218:	d1f4      	bne.n	8016204 <ip4_reass+0x240>
 801621a:	e000      	b.n	801621e <ip4_reass+0x25a>
          break;
 801621c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801621e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016222:	f7ff fd37 	bl	8015c94 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f7f6 f838 	bl	800c29c <pbuf_clen>
 801622c:	4603      	mov	r3, r0
 801622e:	461a      	mov	r2, r3
 8016230:	4b0b      	ldr	r3, [pc, #44]	; (8016260 <ip4_reass+0x29c>)
 8016232:	881b      	ldrh	r3, [r3, #0]
 8016234:	1a9b      	subs	r3, r3, r2
 8016236:	b29a      	uxth	r2, r3
 8016238:	4b09      	ldr	r3, [pc, #36]	; (8016260 <ip4_reass+0x29c>)
 801623a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	e00a      	b.n	8016256 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016240:	2300      	movs	r3, #0
 8016242:	e008      	b.n	8016256 <ip4_reass+0x292>
    goto nullreturn;
 8016244:	bf00      	nop
 8016246:	e002      	b.n	801624e <ip4_reass+0x28a>

nullreturn:
 8016248:	bf00      	nop
 801624a:	e000      	b.n	801624e <ip4_reass+0x28a>
    goto nullreturn;
 801624c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f7f5 ff8a 	bl	800c168 <pbuf_free>
  return NULL;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	3738      	adds	r7, #56	; 0x38
 801625a:	46bd      	mov	sp, r7
 801625c:	bd80      	pop	{r7, pc}
 801625e:	bf00      	nop
 8016260:	20008d84 	.word	0x20008d84
 8016264:	20008d80 	.word	0x20008d80

08016268 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801626c:	2005      	movs	r0, #5
 801626e:	f7f5 f9c7 	bl	800b600 <memp_malloc>
 8016272:	4603      	mov	r3, r0
}
 8016274:	4618      	mov	r0, r3
 8016276:	bd80      	pop	{r7, pc}

08016278 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d106      	bne.n	8016294 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016286:	4b07      	ldr	r3, [pc, #28]	; (80162a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016288:	f240 22ae 	movw	r2, #686	; 0x2ae
 801628c:	4906      	ldr	r1, [pc, #24]	; (80162a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801628e:	4807      	ldr	r0, [pc, #28]	; (80162ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8016290:	f000 fc7a 	bl	8016b88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016294:	6879      	ldr	r1, [r7, #4]
 8016296:	2005      	movs	r0, #5
 8016298:	f7f5 fa04 	bl	800b6a4 <memp_free>
}
 801629c:	bf00      	nop
 801629e:	3708      	adds	r7, #8
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}
 80162a4:	0801ab4c 	.word	0x0801ab4c
 80162a8:	0801acb4 	.word	0x0801acb4
 80162ac:	0801ab94 	.word	0x0801ab94

080162b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d106      	bne.n	80162d0 <ipfrag_free_pbuf_custom+0x20>
 80162c2:	4b11      	ldr	r3, [pc, #68]	; (8016308 <ipfrag_free_pbuf_custom+0x58>)
 80162c4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80162c8:	4910      	ldr	r1, [pc, #64]	; (801630c <ipfrag_free_pbuf_custom+0x5c>)
 80162ca:	4811      	ldr	r0, [pc, #68]	; (8016310 <ipfrag_free_pbuf_custom+0x60>)
 80162cc:	f000 fc5c 	bl	8016b88 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80162d0:	68fa      	ldr	r2, [r7, #12]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d006      	beq.n	80162e6 <ipfrag_free_pbuf_custom+0x36>
 80162d8:	4b0b      	ldr	r3, [pc, #44]	; (8016308 <ipfrag_free_pbuf_custom+0x58>)
 80162da:	f240 22b9 	movw	r2, #697	; 0x2b9
 80162de:	490d      	ldr	r1, [pc, #52]	; (8016314 <ipfrag_free_pbuf_custom+0x64>)
 80162e0:	480b      	ldr	r0, [pc, #44]	; (8016310 <ipfrag_free_pbuf_custom+0x60>)
 80162e2:	f000 fc51 	bl	8016b88 <iprintf>
  if (pcr->original != NULL) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	695b      	ldr	r3, [r3, #20]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d004      	beq.n	80162f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	695b      	ldr	r3, [r3, #20]
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7f5 ff38 	bl	800c168 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80162f8:	68f8      	ldr	r0, [r7, #12]
 80162fa:	f7ff ffbd 	bl	8016278 <ip_frag_free_pbuf_custom_ref>
}
 80162fe:	bf00      	nop
 8016300:	3710      	adds	r7, #16
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	0801ab4c 	.word	0x0801ab4c
 801630c:	0801acc0 	.word	0x0801acc0
 8016310:	0801ab94 	.word	0x0801ab94
 8016314:	0801accc 	.word	0x0801accc

08016318 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b092      	sub	sp, #72	; 0x48
 801631c:	af02      	add	r7, sp, #8
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016324:	2300      	movs	r3, #0
 8016326:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8016328:	68bb      	ldr	r3, [r7, #8]
 801632a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801632c:	3b14      	subs	r3, #20
 801632e:	2b00      	cmp	r3, #0
 8016330:	da00      	bge.n	8016334 <ip4_frag+0x1c>
 8016332:	3307      	adds	r3, #7
 8016334:	10db      	asrs	r3, r3, #3
 8016336:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016338:	2314      	movs	r3, #20
 801633a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016344:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8016346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	f003 030f 	and.w	r3, r3, #15
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	2b14      	cmp	r3, #20
 8016352:	d009      	beq.n	8016368 <ip4_frag+0x50>
 8016354:	4b79      	ldr	r3, [pc, #484]	; (801653c <ip4_frag+0x224>)
 8016356:	f240 22e1 	movw	r2, #737	; 0x2e1
 801635a:	4979      	ldr	r1, [pc, #484]	; (8016540 <ip4_frag+0x228>)
 801635c:	4879      	ldr	r0, [pc, #484]	; (8016544 <ip4_frag+0x22c>)
 801635e:	f000 fc13 	bl	8016b88 <iprintf>
 8016362:	f06f 0305 	mvn.w	r3, #5
 8016366:	e0e5      	b.n	8016534 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636a:	88db      	ldrh	r3, [r3, #6]
 801636c:	b29b      	uxth	r3, r3
 801636e:	4618      	mov	r0, r3
 8016370:	f7f4 fd22 	bl	800adb8 <lwip_htons>
 8016374:	4603      	mov	r3, r0
 8016376:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8016378:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801637a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801637e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016380:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016386:	2b00      	cmp	r3, #0
 8016388:	d009      	beq.n	801639e <ip4_frag+0x86>
 801638a:	4b6c      	ldr	r3, [pc, #432]	; (801653c <ip4_frag+0x224>)
 801638c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016390:	496d      	ldr	r1, [pc, #436]	; (8016548 <ip4_frag+0x230>)
 8016392:	486c      	ldr	r0, [pc, #432]	; (8016544 <ip4_frag+0x22c>)
 8016394:	f000 fbf8 	bl	8016b88 <iprintf>
 8016398:	f06f 0305 	mvn.w	r3, #5
 801639c:	e0ca      	b.n	8016534 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	891b      	ldrh	r3, [r3, #8]
 80163a2:	3b14      	subs	r3, #20
 80163a4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80163a6:	e0bc      	b.n	8016522 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80163a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80163aa:	00da      	lsls	r2, r3, #3
 80163ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163ae:	4293      	cmp	r3, r2
 80163b0:	bfa8      	it	ge
 80163b2:	4613      	movge	r3, r2
 80163b4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163b6:	2200      	movs	r2, #0
 80163b8:	2114      	movs	r1, #20
 80163ba:	2002      	movs	r0, #2
 80163bc:	f7f5 fb62 	bl	800ba84 <pbuf_alloc>
 80163c0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80163c2:	6a3b      	ldr	r3, [r7, #32]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	f000 80b2 	beq.w	801652e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	895b      	ldrh	r3, [r3, #10]
 80163ce:	2b13      	cmp	r3, #19
 80163d0:	d806      	bhi.n	80163e0 <ip4_frag+0xc8>
 80163d2:	4b5a      	ldr	r3, [pc, #360]	; (801653c <ip4_frag+0x224>)
 80163d4:	f240 3209 	movw	r2, #777	; 0x309
 80163d8:	495c      	ldr	r1, [pc, #368]	; (801654c <ip4_frag+0x234>)
 80163da:	485a      	ldr	r0, [pc, #360]	; (8016544 <ip4_frag+0x22c>)
 80163dc:	f000 fbd4 	bl	8016b88 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80163e0:	6a3b      	ldr	r3, [r7, #32]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	2214      	movs	r2, #20
 80163e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163e8:	4618      	mov	r0, r3
 80163ea:	f000 fbba 	bl	8016b62 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80163f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80163f8:	e04f      	b.n	801649a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	895a      	ldrh	r2, [r3, #10]
 80163fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016400:	1ad3      	subs	r3, r2, r3
 8016402:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016404:	8b7a      	ldrh	r2, [r7, #26]
 8016406:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016408:	4293      	cmp	r3, r2
 801640a:	bf28      	it	cs
 801640c:	4613      	movcs	r3, r2
 801640e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016410:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016412:	2b00      	cmp	r3, #0
 8016414:	d105      	bne.n	8016422 <ip4_frag+0x10a>
        poff = 0;
 8016416:	2300      	movs	r3, #0
 8016418:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	60fb      	str	r3, [r7, #12]
        continue;
 8016420:	e03b      	b.n	801649a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016422:	f7ff ff21 	bl	8016268 <ip_frag_alloc_pbuf_custom_ref>
 8016426:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d103      	bne.n	8016436 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 801642e:	6a38      	ldr	r0, [r7, #32]
 8016430:	f7f5 fe9a 	bl	800c168 <pbuf_free>
        goto memerr;
 8016434:	e07c      	b.n	8016530 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016436:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801643c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801643e:	4413      	add	r3, r2
 8016440:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8016442:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016444:	9201      	str	r2, [sp, #4]
 8016446:	9300      	str	r3, [sp, #0]
 8016448:	4603      	mov	r3, r0
 801644a:	2202      	movs	r2, #2
 801644c:	2004      	movs	r0, #4
 801644e:	f7f5 fcad 	bl	800bdac <pbuf_alloced_custom>
 8016452:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d106      	bne.n	8016468 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801645a:	6978      	ldr	r0, [r7, #20]
 801645c:	f7ff ff0c 	bl	8016278 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016460:	6a38      	ldr	r0, [r7, #32]
 8016462:	f7f5 fe81 	bl	800c168 <pbuf_free>
        goto memerr;
 8016466:	e063      	b.n	8016530 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f7f5 ff2f 	bl	800c2cc <pbuf_ref>
      pcr->original = p;
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	68fa      	ldr	r2, [r7, #12]
 8016472:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	4a36      	ldr	r2, [pc, #216]	; (8016550 <ip4_frag+0x238>)
 8016478:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801647a:	6939      	ldr	r1, [r7, #16]
 801647c:	6a38      	ldr	r0, [r7, #32]
 801647e:	f7f5 ff4d 	bl	800c31c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8016482:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016484:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801648a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801648c:	2b00      	cmp	r3, #0
 801648e:	d004      	beq.n	801649a <ip4_frag+0x182>
        poff = 0;
 8016490:	2300      	movs	r3, #0
 8016492:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801649a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801649c:	2b00      	cmp	r3, #0
 801649e:	d1ac      	bne.n	80163fa <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80164a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80164a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164a4:	4413      	add	r3, r2
 80164a6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80164a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80164ae:	3b14      	subs	r3, #20
 80164b0:	429a      	cmp	r2, r3
 80164b2:	bfd4      	ite	le
 80164b4:	2301      	movle	r3, #1
 80164b6:	2300      	movgt	r3, #0
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80164bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80164be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164c2:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d103      	bne.n	80164d2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80164ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80164d0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80164d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f4 fc6f 	bl	800adb8 <lwip_htons>
 80164da:	4603      	mov	r3, r0
 80164dc:	461a      	mov	r2, r3
 80164de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80164e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164e4:	3314      	adds	r3, #20
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f4 fc65 	bl	800adb8 <lwip_htons>
 80164ee:	4603      	mov	r3, r0
 80164f0:	461a      	mov	r2, r3
 80164f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80164f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f8:	2200      	movs	r2, #0
 80164fa:	729a      	strb	r2, [r3, #10]
 80164fc:	2200      	movs	r2, #0
 80164fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	695b      	ldr	r3, [r3, #20]
 8016504:	687a      	ldr	r2, [r7, #4]
 8016506:	6a39      	ldr	r1, [r7, #32]
 8016508:	68b8      	ldr	r0, [r7, #8]
 801650a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801650c:	6a38      	ldr	r0, [r7, #32]
 801650e:	f7f5 fe2b 	bl	800c168 <pbuf_free>
    left -= fragsize;
 8016512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016516:	1ad3      	subs	r3, r2, r3
 8016518:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801651a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801651c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801651e:	4413      	add	r3, r2
 8016520:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016522:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016524:	2b00      	cmp	r3, #0
 8016526:	f47f af3f 	bne.w	80163a8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801652a:	2300      	movs	r3, #0
 801652c:	e002      	b.n	8016534 <ip4_frag+0x21c>
      goto memerr;
 801652e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016534:	4618      	mov	r0, r3
 8016536:	3740      	adds	r7, #64	; 0x40
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	0801ab4c 	.word	0x0801ab4c
 8016540:	0801acd8 	.word	0x0801acd8
 8016544:	0801ab94 	.word	0x0801ab94
 8016548:	0801ad00 	.word	0x0801ad00
 801654c:	0801ad1c 	.word	0x0801ad1c
 8016550:	080162b1 	.word	0x080162b1

08016554 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b086      	sub	sp, #24
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
 801655c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801655e:	230e      	movs	r3, #14
 8016560:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	895b      	ldrh	r3, [r3, #10]
 8016566:	2b0e      	cmp	r3, #14
 8016568:	d977      	bls.n	801665a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	7b1a      	ldrb	r2, [r3, #12]
 8016574:	7b5b      	ldrb	r3, [r3, #13]
 8016576:	021b      	lsls	r3, r3, #8
 8016578:	4313      	orrs	r3, r2
 801657a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	f003 0301 	and.w	r3, r3, #1
 8016584:	2b00      	cmp	r3, #0
 8016586:	d023      	beq.n	80165d0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	2b01      	cmp	r3, #1
 801658e:	d10f      	bne.n	80165b0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016590:	693b      	ldr	r3, [r7, #16]
 8016592:	785b      	ldrb	r3, [r3, #1]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d11b      	bne.n	80165d0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801659c:	2b5e      	cmp	r3, #94	; 0x5e
 801659e:	d117      	bne.n	80165d0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	7b5b      	ldrb	r3, [r3, #13]
 80165a4:	f043 0310 	orr.w	r3, r3, #16
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	735a      	strb	r2, [r3, #13]
 80165ae:	e00f      	b.n	80165d0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80165b0:	693b      	ldr	r3, [r7, #16]
 80165b2:	2206      	movs	r2, #6
 80165b4:	4930      	ldr	r1, [pc, #192]	; (8016678 <ethernet_input+0x124>)
 80165b6:	4618      	mov	r0, r3
 80165b8:	f000 fac4 	bl	8016b44 <memcmp>
 80165bc:	4603      	mov	r3, r0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d106      	bne.n	80165d0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	7b5b      	ldrb	r3, [r3, #13]
 80165c6:	f043 0308 	orr.w	r3, r3, #8
 80165ca:	b2da      	uxtb	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80165d0:	89fb      	ldrh	r3, [r7, #14]
 80165d2:	2b08      	cmp	r3, #8
 80165d4:	d003      	beq.n	80165de <ethernet_input+0x8a>
 80165d6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80165da:	d01e      	beq.n	801661a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80165dc:	e044      	b.n	8016668 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80165e4:	f003 0308 	and.w	r3, r3, #8
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d038      	beq.n	801665e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	895b      	ldrh	r3, [r3, #10]
 80165f0:	461a      	mov	r2, r3
 80165f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	db33      	blt.n	8016662 <ethernet_input+0x10e>
 80165fa:	8afb      	ldrh	r3, [r7, #22]
 80165fc:	425b      	negs	r3, r3
 80165fe:	b29b      	uxth	r3, r3
 8016600:	b21b      	sxth	r3, r3
 8016602:	4619      	mov	r1, r3
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	f7f5 fd8b 	bl	800c120 <pbuf_header>
 801660a:	4603      	mov	r3, r0
 801660c:	2b00      	cmp	r3, #0
 801660e:	d128      	bne.n	8016662 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8016610:	6839      	ldr	r1, [r7, #0]
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f7fe ff62 	bl	80154dc <ip4_input>
      break;
 8016618:	e01d      	b.n	8016656 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016620:	f003 0308 	and.w	r3, r3, #8
 8016624:	2b00      	cmp	r3, #0
 8016626:	d01e      	beq.n	8016666 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	895b      	ldrh	r3, [r3, #10]
 801662c:	461a      	mov	r2, r3
 801662e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016632:	429a      	cmp	r2, r3
 8016634:	db15      	blt.n	8016662 <ethernet_input+0x10e>
 8016636:	8afb      	ldrh	r3, [r7, #22]
 8016638:	425b      	negs	r3, r3
 801663a:	b29b      	uxth	r3, r3
 801663c:	b21b      	sxth	r3, r3
 801663e:	4619      	mov	r1, r3
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f7f5 fd6d 	bl	800c120 <pbuf_header>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d10a      	bne.n	8016662 <ethernet_input+0x10e>
        etharp_input(p, netif);
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7fe f92c 	bl	80148ac <etharp_input>
      break;
 8016654:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016656:	2300      	movs	r3, #0
 8016658:	e00a      	b.n	8016670 <ethernet_input+0x11c>
    goto free_and_return;
 801665a:	bf00      	nop
 801665c:	e004      	b.n	8016668 <ethernet_input+0x114>
        goto free_and_return;
 801665e:	bf00      	nop
 8016660:	e002      	b.n	8016668 <ethernet_input+0x114>

free_and_return:
 8016662:	bf00      	nop
 8016664:	e000      	b.n	8016668 <ethernet_input+0x114>
        goto free_and_return;
 8016666:	bf00      	nop
  pbuf_free(p);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f7f5 fd7d 	bl	800c168 <pbuf_free>
  return ERR_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3718      	adds	r7, #24
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	080262ec 	.word	0x080262ec

0801667c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b086      	sub	sp, #24
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	607a      	str	r2, [r7, #4]
 8016688:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801668a:	8c3b      	ldrh	r3, [r7, #32]
 801668c:	4618      	mov	r0, r3
 801668e:	f7f4 fb93 	bl	800adb8 <lwip_htons>
 8016692:	4603      	mov	r3, r0
 8016694:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8016696:	210e      	movs	r1, #14
 8016698:	68b8      	ldr	r0, [r7, #8]
 801669a:	f7f5 fd41 	bl	800c120 <pbuf_header>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d125      	bne.n	80166f0 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	8afa      	ldrh	r2, [r7, #22]
 80166ae:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	2206      	movs	r2, #6
 80166b4:	6839      	ldr	r1, [r7, #0]
 80166b6:	4618      	mov	r0, r3
 80166b8:	f000 fa53 	bl	8016b62 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	3306      	adds	r3, #6
 80166c0:	2206      	movs	r2, #6
 80166c2:	6879      	ldr	r1, [r7, #4]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f000 fa4c 	bl	8016b62 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166d0:	2b06      	cmp	r3, #6
 80166d2:	d006      	beq.n	80166e2 <ethernet_output+0x66>
 80166d4:	4b0a      	ldr	r3, [pc, #40]	; (8016700 <ethernet_output+0x84>)
 80166d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80166da:	490a      	ldr	r1, [pc, #40]	; (8016704 <ethernet_output+0x88>)
 80166dc:	480a      	ldr	r0, [pc, #40]	; (8016708 <ethernet_output+0x8c>)
 80166de:	f000 fa53 	bl	8016b88 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	699b      	ldr	r3, [r3, #24]
 80166e6:	68b9      	ldr	r1, [r7, #8]
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	4798      	blx	r3
 80166ec:	4603      	mov	r3, r0
 80166ee:	e002      	b.n	80166f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80166f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80166f2:	f06f 0301 	mvn.w	r3, #1
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3718      	adds	r7, #24
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	0801ad3c 	.word	0x0801ad3c
 8016704:	0801ad74 	.word	0x0801ad74
 8016708:	0801ada8 	.word	0x0801ada8

0801670c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b086      	sub	sp, #24
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	60bb      	str	r3, [r7, #8]
 801671a:	2304      	movs	r3, #4
 801671c:	60fb      	str	r3, [r7, #12]
 801671e:	2300      	movs	r3, #0
 8016720:	613b      	str	r3, [r7, #16]
 8016722:	2300      	movs	r3, #0
 8016724:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016726:	f107 0308 	add.w	r3, r7, #8
 801672a:	2100      	movs	r1, #0
 801672c:	4618      	mov	r0, r3
 801672e:	f7ee fcec 	bl	800510a <osMessageCreate>
 8016732:	4602      	mov	r2, r0
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d102      	bne.n	8016746 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016744:	e000      	b.n	8016748 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016746:	2300      	movs	r3, #0
}
 8016748:	4618      	mov	r0, r3
 801674a:	3718      	adds	r7, #24
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b082      	sub	sp, #8
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4618      	mov	r0, r3
 801675e:	f7ee fdb1 	bl	80052c4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	4618      	mov	r0, r3
 8016768:	f7ee fdc2 	bl	80052f0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801676c:	bf00      	nop
 801676e:	3708      	adds	r7, #8
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}

08016774 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801677e:	bf00      	nop
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	6839      	ldr	r1, [r7, #0]
 8016786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801678a:	4618      	mov	r0, r3
 801678c:	f7ee fce6 	bl	800515c <osMessagePut>
 8016790:	4603      	mov	r3, r0
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1f4      	bne.n	8016780 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8016796:	bf00      	nop
 8016798:	3708      	adds	r7, #8
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}

0801679e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801679e:	b580      	push	{r7, lr}
 80167a0:	b084      	sub	sp, #16
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	6078      	str	r0, [r7, #4]
 80167a6:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	6839      	ldr	r1, [r7, #0]
 80167ae:	2200      	movs	r2, #0
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ee fcd3 	bl	800515c <osMessagePut>
 80167b6:	4603      	mov	r3, r0
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d102      	bne.n	80167c2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80167bc:	2300      	movs	r3, #0
 80167be:	73fb      	strb	r3, [r7, #15]
 80167c0:	e001      	b.n	80167c6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80167c2:	23ff      	movs	r3, #255	; 0xff
 80167c4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80167c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b08c      	sub	sp, #48	; 0x30
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	61f8      	str	r0, [r7, #28]
 80167da:	61b9      	str	r1, [r7, #24]
 80167dc:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80167de:	f7ee fabd 	bl	8004d5c <osKernelSysTick>
 80167e2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d017      	beq.n	801681a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	6819      	ldr	r1, [r3, #0]
 80167ee:	f107 0320 	add.w	r3, r7, #32
 80167f2:	697a      	ldr	r2, [r7, #20]
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7ee fcf1 	bl	80051dc <osMessageGet>

    if(event.status == osEventMessage)
 80167fa:	6a3b      	ldr	r3, [r7, #32]
 80167fc:	2b10      	cmp	r3, #16
 80167fe:	d109      	bne.n	8016814 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016802:	461a      	mov	r2, r3
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016808:	f7ee faa8 	bl	8004d5c <osKernelSysTick>
 801680c:	4602      	mov	r2, r0
 801680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	e019      	b.n	8016848 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016818:	e016      	b.n	8016848 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	6819      	ldr	r1, [r3, #0]
 801681e:	463b      	mov	r3, r7
 8016820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016824:	4618      	mov	r0, r3
 8016826:	f7ee fcd9 	bl	80051dc <osMessageGet>
 801682a:	f107 0320 	add.w	r3, r7, #32
 801682e:	463a      	mov	r2, r7
 8016830:	ca07      	ldmia	r2, {r0, r1, r2}
 8016832:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016838:	461a      	mov	r2, r3
 801683a:	69bb      	ldr	r3, [r7, #24]
 801683c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801683e:	f7ee fa8d 	bl	8004d5c <osKernelSysTick>
 8016842:	4602      	mov	r2, r0
 8016844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016846:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016848:	4618      	mov	r0, r3
 801684a:	3730      	adds	r7, #48	; 0x30
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}

08016850 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b086      	sub	sp, #24
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	6819      	ldr	r1, [r3, #0]
 801685e:	f107 030c 	add.w	r3, r7, #12
 8016862:	2200      	movs	r2, #0
 8016864:	4618      	mov	r0, r3
 8016866:	f7ee fcb9 	bl	80051dc <osMessageGet>

  if(event.status == osEventMessage)
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	2b10      	cmp	r3, #16
 801686e:	d105      	bne.n	801687c <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	461a      	mov	r2, r3
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016878:	2300      	movs	r3, #0
 801687a:	e001      	b.n	8016880 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801687c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8016880:	4618      	mov	r0, r3
 8016882:	3718      	adds	r7, #24
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}

08016888 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d101      	bne.n	801689c <sys_mbox_valid+0x14>
    return 0;
 8016898:	2300      	movs	r3, #0
 801689a:	e000      	b.n	801689e <sys_mbox_valid+0x16>
  else
    return 1;
 801689c:	2301      	movs	r3, #1
}
 801689e:	4618      	mov	r0, r3
 80168a0:	370c      	adds	r7, #12
 80168a2:	46bd      	mov	sp, r7
 80168a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a8:	4770      	bx	lr

080168aa <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80168aa:	b480      	push	{r7}
 80168ac:	b083      	sub	sp, #12
 80168ae:	af00      	add	r7, sp, #0
 80168b0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2200      	movs	r2, #0
 80168b6:	601a      	str	r2, [r3, #0]
}
 80168b8:	bf00      	nop
 80168ba:	370c      	adds	r7, #12
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b084      	sub	sp, #16
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	460b      	mov	r3, r1
 80168ce:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80168d0:	2300      	movs	r3, #0
 80168d2:	60bb      	str	r3, [r7, #8]
 80168d4:	2300      	movs	r3, #0
 80168d6:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80168d8:	f107 0308 	add.w	r3, r7, #8
 80168dc:	2101      	movs	r1, #1
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ee fb48 	bl	8004f74 <osSemaphoreCreate>
 80168e4:	4602      	mov	r2, r0
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d102      	bne.n	80168f8 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80168f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168f6:	e009      	b.n	801690c <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80168f8:	78fb      	ldrb	r3, [r7, #3]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d105      	bne.n	801690a <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	2100      	movs	r1, #0
 8016904:	4618      	mov	r0, r3
 8016906:	f7ee fb69 	bl	8004fdc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801690a:	2300      	movs	r3, #0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3710      	adds	r7, #16
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801691e:	f7ee fa1d 	bl	8004d5c <osKernelSysTick>
 8016922:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d011      	beq.n	801694e <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	6839      	ldr	r1, [r7, #0]
 8016930:	4618      	mov	r0, r3
 8016932:	f7ee fb53 	bl	8004fdc <osSemaphoreWait>
 8016936:	4603      	mov	r3, r0
 8016938:	2b00      	cmp	r3, #0
 801693a:	d105      	bne.n	8016948 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801693c:	f7ee fa0e 	bl	8004d5c <osKernelSysTick>
 8016940:	4602      	mov	r2, r0
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	1ad3      	subs	r3, r2, r3
 8016946:	e012      	b.n	801696e <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801694c:	e00f      	b.n	801696e <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801694e:	bf00      	nop
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016958:	4618      	mov	r0, r3
 801695a:	f7ee fb3f 	bl	8004fdc <osSemaphoreWait>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	d1f5      	bne.n	8016950 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016964:	f7ee f9fa 	bl	8004d5c <osKernelSysTick>
 8016968:	4602      	mov	r2, r0
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801696e:	4618      	mov	r0, r3
 8016970:	3710      	adds	r7, #16
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}

08016976 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016976:	b580      	push	{r7, lr}
 8016978:	b082      	sub	sp, #8
 801697a:	af00      	add	r7, sp, #0
 801697c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	4618      	mov	r0, r3
 8016984:	f7ee fb78 	bl	8005078 <osSemaphoreRelease>
}
 8016988:	bf00      	nop
 801698a:	3708      	adds	r7, #8
 801698c:	46bd      	mov	sp, r7
 801698e:	bd80      	pop	{r7, pc}

08016990 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b082      	sub	sp, #8
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	4618      	mov	r0, r3
 801699e:	f7ee fba1 	bl	80050e4 <osSemaphoreDelete>
}
 80169a2:	bf00      	nop
 80169a4:	3708      	adds	r7, #8
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80169aa:	b480      	push	{r7}
 80169ac:	b083      	sub	sp, #12
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d101      	bne.n	80169be <sys_sem_valid+0x14>
    return 0;
 80169ba:	2300      	movs	r3, #0
 80169bc:	e000      	b.n	80169c0 <sys_sem_valid+0x16>
  else
    return 1;
 80169be:	2301      	movs	r3, #1
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	370c      	adds	r7, #12
 80169c4:	46bd      	mov	sp, r7
 80169c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ca:	4770      	bx	lr

080169cc <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80169cc:	b480      	push	{r7}
 80169ce:	b083      	sub	sp, #12
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2200      	movs	r2, #0
 80169d8:	601a      	str	r2, [r3, #0]
}
 80169da:	bf00      	nop
 80169dc:	370c      	adds	r7, #12
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr
	...

080169e8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80169ec:	4803      	ldr	r0, [pc, #12]	; (80169fc <sys_init+0x14>)
 80169ee:	f7ee fa25 	bl	8004e3c <osMutexCreate>
 80169f2:	4602      	mov	r2, r0
 80169f4:	4b02      	ldr	r3, [pc, #8]	; (8016a00 <sys_init+0x18>)
 80169f6:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80169f8:	bf00      	nop
 80169fa:	bd80      	pop	{r7, pc}
 80169fc:	080262fc 	.word	0x080262fc
 8016a00:	2000fb1c 	.word	0x2000fb1c

08016a04 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b084      	sub	sp, #16
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	60bb      	str	r3, [r7, #8]
 8016a10:	2300      	movs	r3, #0
 8016a12:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016a14:	f107 0308 	add.w	r3, r7, #8
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f7ee fa0f 	bl	8004e3c <osMutexCreate>
 8016a1e:	4602      	mov	r2, r0
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d102      	bne.n	8016a32 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a30:	e000      	b.n	8016a34 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016a32:	2300      	movs	r3, #0
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3710      	adds	r7, #16
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7ee fa0d 	bl	8004e6c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016a52:	bf00      	nop
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}

08016a5a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016a5a:	b580      	push	{r7, lr}
 8016a5c:	b082      	sub	sp, #8
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7ee fa4e 	bl	8004f08 <osMutexRelease>
}
 8016a6c:	bf00      	nop
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}

08016a74 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b08c      	sub	sp, #48	; 0x30
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	607a      	str	r2, [r7, #4]
 8016a80:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016a82:	f107 0314 	add.w	r3, r7, #20
 8016a86:	2200      	movs	r2, #0
 8016a88:	601a      	str	r2, [r3, #0]
 8016a8a:	605a      	str	r2, [r3, #4]
 8016a8c:	609a      	str	r2, [r3, #8]
 8016a8e:	60da      	str	r2, [r3, #12]
 8016a90:	611a      	str	r2, [r3, #16]
 8016a92:	615a      	str	r2, [r3, #20]
 8016a94:	619a      	str	r2, [r3, #24]
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	617b      	str	r3, [r7, #20]
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	61bb      	str	r3, [r7, #24]
 8016a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aa0:	b21b      	sxth	r3, r3
 8016aa2:	83bb      	strh	r3, [r7, #28]
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016aa8:	f107 0314 	add.w	r3, r7, #20
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7ee f964 	bl	8004d7c <osThreadCreate>
 8016ab4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3730      	adds	r7, #48	; 0x30
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016ac4:	4b04      	ldr	r3, [pc, #16]	; (8016ad8 <sys_arch_protect+0x18>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7ee f9cd 	bl	8004e6c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016ad2:	2301      	movs	r3, #1
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	bd80      	pop	{r7, pc}
 8016ad8:	2000fb1c 	.word	0x2000fb1c

08016adc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016ae4:	4b04      	ldr	r3, [pc, #16]	; (8016af8 <sys_arch_unprotect+0x1c>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7ee fa0d 	bl	8004f08 <osMutexRelease>
}
 8016aee:	bf00      	nop
 8016af0:	3708      	adds	r7, #8
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
 8016af6:	bf00      	nop
 8016af8:	2000fb1c 	.word	0x2000fb1c

08016afc <__libc_init_array>:
 8016afc:	b570      	push	{r4, r5, r6, lr}
 8016afe:	4e0d      	ldr	r6, [pc, #52]	; (8016b34 <__libc_init_array+0x38>)
 8016b00:	4c0d      	ldr	r4, [pc, #52]	; (8016b38 <__libc_init_array+0x3c>)
 8016b02:	1ba4      	subs	r4, r4, r6
 8016b04:	10a4      	asrs	r4, r4, #2
 8016b06:	2500      	movs	r5, #0
 8016b08:	42a5      	cmp	r5, r4
 8016b0a:	d109      	bne.n	8016b20 <__libc_init_array+0x24>
 8016b0c:	4e0b      	ldr	r6, [pc, #44]	; (8016b3c <__libc_init_array+0x40>)
 8016b0e:	4c0c      	ldr	r4, [pc, #48]	; (8016b40 <__libc_init_array+0x44>)
 8016b10:	f001 f9ac 	bl	8017e6c <_init>
 8016b14:	1ba4      	subs	r4, r4, r6
 8016b16:	10a4      	asrs	r4, r4, #2
 8016b18:	2500      	movs	r5, #0
 8016b1a:	42a5      	cmp	r5, r4
 8016b1c:	d105      	bne.n	8016b2a <__libc_init_array+0x2e>
 8016b1e:	bd70      	pop	{r4, r5, r6, pc}
 8016b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b24:	4798      	blx	r3
 8016b26:	3501      	adds	r5, #1
 8016b28:	e7ee      	b.n	8016b08 <__libc_init_array+0xc>
 8016b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016b2e:	4798      	blx	r3
 8016b30:	3501      	adds	r5, #1
 8016b32:	e7f2      	b.n	8016b1a <__libc_init_array+0x1e>
 8016b34:	080264b0 	.word	0x080264b0
 8016b38:	080264b0 	.word	0x080264b0
 8016b3c:	080264b0 	.word	0x080264b0
 8016b40:	080264b4 	.word	0x080264b4

08016b44 <memcmp>:
 8016b44:	b530      	push	{r4, r5, lr}
 8016b46:	2400      	movs	r4, #0
 8016b48:	42a2      	cmp	r2, r4
 8016b4a:	d101      	bne.n	8016b50 <memcmp+0xc>
 8016b4c:	2000      	movs	r0, #0
 8016b4e:	e007      	b.n	8016b60 <memcmp+0x1c>
 8016b50:	5d03      	ldrb	r3, [r0, r4]
 8016b52:	3401      	adds	r4, #1
 8016b54:	190d      	adds	r5, r1, r4
 8016b56:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016b5a:	42ab      	cmp	r3, r5
 8016b5c:	d0f4      	beq.n	8016b48 <memcmp+0x4>
 8016b5e:	1b58      	subs	r0, r3, r5
 8016b60:	bd30      	pop	{r4, r5, pc}

08016b62 <memcpy>:
 8016b62:	b510      	push	{r4, lr}
 8016b64:	1e43      	subs	r3, r0, #1
 8016b66:	440a      	add	r2, r1
 8016b68:	4291      	cmp	r1, r2
 8016b6a:	d100      	bne.n	8016b6e <memcpy+0xc>
 8016b6c:	bd10      	pop	{r4, pc}
 8016b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b76:	e7f7      	b.n	8016b68 <memcpy+0x6>

08016b78 <memset>:
 8016b78:	4402      	add	r2, r0
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d100      	bne.n	8016b82 <memset+0xa>
 8016b80:	4770      	bx	lr
 8016b82:	f803 1b01 	strb.w	r1, [r3], #1
 8016b86:	e7f9      	b.n	8016b7c <memset+0x4>

08016b88 <iprintf>:
 8016b88:	b40f      	push	{r0, r1, r2, r3}
 8016b8a:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <iprintf+0x2c>)
 8016b8c:	b513      	push	{r0, r1, r4, lr}
 8016b8e:	681c      	ldr	r4, [r3, #0]
 8016b90:	b124      	cbz	r4, 8016b9c <iprintf+0x14>
 8016b92:	69a3      	ldr	r3, [r4, #24]
 8016b94:	b913      	cbnz	r3, 8016b9c <iprintf+0x14>
 8016b96:	4620      	mov	r0, r4
 8016b98:	f000 f90c 	bl	8016db4 <__sinit>
 8016b9c:	ab05      	add	r3, sp, #20
 8016b9e:	9a04      	ldr	r2, [sp, #16]
 8016ba0:	68a1      	ldr	r1, [r4, #8]
 8016ba2:	9301      	str	r3, [sp, #4]
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f000 fbdb 	bl	8017360 <_vfiprintf_r>
 8016baa:	b002      	add	sp, #8
 8016bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bb0:	b004      	add	sp, #16
 8016bb2:	4770      	bx	lr
 8016bb4:	20000020 	.word	0x20000020

08016bb8 <rand>:
 8016bb8:	b538      	push	{r3, r4, r5, lr}
 8016bba:	4b13      	ldr	r3, [pc, #76]	; (8016c08 <rand+0x50>)
 8016bbc:	681c      	ldr	r4, [r3, #0]
 8016bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bc0:	b97b      	cbnz	r3, 8016be2 <rand+0x2a>
 8016bc2:	2018      	movs	r0, #24
 8016bc4:	f000 f98e 	bl	8016ee4 <malloc>
 8016bc8:	4a10      	ldr	r2, [pc, #64]	; (8016c0c <rand+0x54>)
 8016bca:	4b11      	ldr	r3, [pc, #68]	; (8016c10 <rand+0x58>)
 8016bcc:	63a0      	str	r0, [r4, #56]	; 0x38
 8016bce:	e9c0 2300 	strd	r2, r3, [r0]
 8016bd2:	4b10      	ldr	r3, [pc, #64]	; (8016c14 <rand+0x5c>)
 8016bd4:	6083      	str	r3, [r0, #8]
 8016bd6:	230b      	movs	r3, #11
 8016bd8:	8183      	strh	r3, [r0, #12]
 8016bda:	2201      	movs	r2, #1
 8016bdc:	2300      	movs	r3, #0
 8016bde:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016be4:	480c      	ldr	r0, [pc, #48]	; (8016c18 <rand+0x60>)
 8016be6:	690a      	ldr	r2, [r1, #16]
 8016be8:	694b      	ldr	r3, [r1, #20]
 8016bea:	4c0c      	ldr	r4, [pc, #48]	; (8016c1c <rand+0x64>)
 8016bec:	4350      	muls	r0, r2
 8016bee:	fb04 0003 	mla	r0, r4, r3, r0
 8016bf2:	fba2 2304 	umull	r2, r3, r2, r4
 8016bf6:	4403      	add	r3, r0
 8016bf8:	1c54      	adds	r4, r2, #1
 8016bfa:	f143 0500 	adc.w	r5, r3, #0
 8016bfe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016c02:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016c06:	bd38      	pop	{r3, r4, r5, pc}
 8016c08:	20000020 	.word	0x20000020
 8016c0c:	abcd330e 	.word	0xabcd330e
 8016c10:	e66d1234 	.word	0xe66d1234
 8016c14:	0005deec 	.word	0x0005deec
 8016c18:	5851f42d 	.word	0x5851f42d
 8016c1c:	4c957f2d 	.word	0x4c957f2d

08016c20 <siprintf>:
 8016c20:	b40e      	push	{r1, r2, r3}
 8016c22:	b500      	push	{lr}
 8016c24:	b09c      	sub	sp, #112	; 0x70
 8016c26:	ab1d      	add	r3, sp, #116	; 0x74
 8016c28:	9002      	str	r0, [sp, #8]
 8016c2a:	9006      	str	r0, [sp, #24]
 8016c2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c30:	4809      	ldr	r0, [pc, #36]	; (8016c58 <siprintf+0x38>)
 8016c32:	9107      	str	r1, [sp, #28]
 8016c34:	9104      	str	r1, [sp, #16]
 8016c36:	4909      	ldr	r1, [pc, #36]	; (8016c5c <siprintf+0x3c>)
 8016c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c3c:	9105      	str	r1, [sp, #20]
 8016c3e:	6800      	ldr	r0, [r0, #0]
 8016c40:	9301      	str	r3, [sp, #4]
 8016c42:	a902      	add	r1, sp, #8
 8016c44:	f000 fa6a 	bl	801711c <_svfiprintf_r>
 8016c48:	9b02      	ldr	r3, [sp, #8]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	701a      	strb	r2, [r3, #0]
 8016c4e:	b01c      	add	sp, #112	; 0x70
 8016c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c54:	b003      	add	sp, #12
 8016c56:	4770      	bx	lr
 8016c58:	20000020 	.word	0x20000020
 8016c5c:	ffff0208 	.word	0xffff0208

08016c60 <strcasecmp>:
 8016c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c62:	4606      	mov	r6, r0
 8016c64:	460f      	mov	r7, r1
 8016c66:	f816 4b01 	ldrb.w	r4, [r6], #1
 8016c6a:	f000 f92d 	bl	8016ec8 <__locale_ctype_ptr>
 8016c6e:	4420      	add	r0, r4
 8016c70:	f817 5b01 	ldrb.w	r5, [r7], #1
 8016c74:	7843      	ldrb	r3, [r0, #1]
 8016c76:	f003 0303 	and.w	r3, r3, #3
 8016c7a:	2b01      	cmp	r3, #1
 8016c7c:	bf08      	it	eq
 8016c7e:	3420      	addeq	r4, #32
 8016c80:	f000 f922 	bl	8016ec8 <__locale_ctype_ptr>
 8016c84:	4428      	add	r0, r5
 8016c86:	7842      	ldrb	r2, [r0, #1]
 8016c88:	f002 0203 	and.w	r2, r2, #3
 8016c8c:	2a01      	cmp	r2, #1
 8016c8e:	bf08      	it	eq
 8016c90:	3520      	addeq	r5, #32
 8016c92:	1b60      	subs	r0, r4, r5
 8016c94:	d101      	bne.n	8016c9a <strcasecmp+0x3a>
 8016c96:	2d00      	cmp	r5, #0
 8016c98:	d1e5      	bne.n	8016c66 <strcasecmp+0x6>
 8016c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016c9c <strchr>:
 8016c9c:	b2c9      	uxtb	r1, r1
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ca4:	b11a      	cbz	r2, 8016cae <strchr+0x12>
 8016ca6:	428a      	cmp	r2, r1
 8016ca8:	d1f9      	bne.n	8016c9e <strchr+0x2>
 8016caa:	4618      	mov	r0, r3
 8016cac:	4770      	bx	lr
 8016cae:	2900      	cmp	r1, #0
 8016cb0:	bf18      	it	ne
 8016cb2:	2300      	movne	r3, #0
 8016cb4:	e7f9      	b.n	8016caa <strchr+0xe>

08016cb6 <strncmp>:
 8016cb6:	b510      	push	{r4, lr}
 8016cb8:	b16a      	cbz	r2, 8016cd6 <strncmp+0x20>
 8016cba:	3901      	subs	r1, #1
 8016cbc:	1884      	adds	r4, r0, r2
 8016cbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016cc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	d103      	bne.n	8016cd2 <strncmp+0x1c>
 8016cca:	42a0      	cmp	r0, r4
 8016ccc:	d001      	beq.n	8016cd2 <strncmp+0x1c>
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d1f5      	bne.n	8016cbe <strncmp+0x8>
 8016cd2:	1a98      	subs	r0, r3, r2
 8016cd4:	bd10      	pop	{r4, pc}
 8016cd6:	4610      	mov	r0, r2
 8016cd8:	e7fc      	b.n	8016cd4 <strncmp+0x1e>

08016cda <__strtok_r>:
 8016cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cdc:	b918      	cbnz	r0, 8016ce6 <__strtok_r+0xc>
 8016cde:	6810      	ldr	r0, [r2, #0]
 8016ce0:	b908      	cbnz	r0, 8016ce6 <__strtok_r+0xc>
 8016ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	460f      	mov	r7, r1
 8016cea:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016cee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016cf2:	b91e      	cbnz	r6, 8016cfc <__strtok_r+0x22>
 8016cf4:	b96d      	cbnz	r5, 8016d12 <__strtok_r+0x38>
 8016cf6:	6015      	str	r5, [r2, #0]
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	e7f2      	b.n	8016ce2 <__strtok_r+0x8>
 8016cfc:	42b5      	cmp	r5, r6
 8016cfe:	d1f6      	bne.n	8016cee <__strtok_r+0x14>
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d1ef      	bne.n	8016ce4 <__strtok_r+0xa>
 8016d04:	6014      	str	r4, [r2, #0]
 8016d06:	7003      	strb	r3, [r0, #0]
 8016d08:	e7eb      	b.n	8016ce2 <__strtok_r+0x8>
 8016d0a:	462b      	mov	r3, r5
 8016d0c:	e00d      	b.n	8016d2a <__strtok_r+0x50>
 8016d0e:	b926      	cbnz	r6, 8016d1a <__strtok_r+0x40>
 8016d10:	461c      	mov	r4, r3
 8016d12:	4623      	mov	r3, r4
 8016d14:	460f      	mov	r7, r1
 8016d16:	f813 5b01 	ldrb.w	r5, [r3], #1
 8016d1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016d1e:	42b5      	cmp	r5, r6
 8016d20:	d1f5      	bne.n	8016d0e <__strtok_r+0x34>
 8016d22:	2d00      	cmp	r5, #0
 8016d24:	d0f1      	beq.n	8016d0a <__strtok_r+0x30>
 8016d26:	2100      	movs	r1, #0
 8016d28:	7021      	strb	r1, [r4, #0]
 8016d2a:	6013      	str	r3, [r2, #0]
 8016d2c:	e7d9      	b.n	8016ce2 <__strtok_r+0x8>

08016d2e <strtok_r>:
 8016d2e:	2301      	movs	r3, #1
 8016d30:	f7ff bfd3 	b.w	8016cda <__strtok_r>

08016d34 <std>:
 8016d34:	2300      	movs	r3, #0
 8016d36:	b510      	push	{r4, lr}
 8016d38:	4604      	mov	r4, r0
 8016d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d3e:	6083      	str	r3, [r0, #8]
 8016d40:	8181      	strh	r1, [r0, #12]
 8016d42:	6643      	str	r3, [r0, #100]	; 0x64
 8016d44:	81c2      	strh	r2, [r0, #14]
 8016d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d4a:	6183      	str	r3, [r0, #24]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	2208      	movs	r2, #8
 8016d50:	305c      	adds	r0, #92	; 0x5c
 8016d52:	f7ff ff11 	bl	8016b78 <memset>
 8016d56:	4b05      	ldr	r3, [pc, #20]	; (8016d6c <std+0x38>)
 8016d58:	6263      	str	r3, [r4, #36]	; 0x24
 8016d5a:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <std+0x3c>)
 8016d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d5e:	4b05      	ldr	r3, [pc, #20]	; (8016d74 <std+0x40>)
 8016d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d62:	4b05      	ldr	r3, [pc, #20]	; (8016d78 <std+0x44>)
 8016d64:	6224      	str	r4, [r4, #32]
 8016d66:	6323      	str	r3, [r4, #48]	; 0x30
 8016d68:	bd10      	pop	{r4, pc}
 8016d6a:	bf00      	nop
 8016d6c:	080178bd 	.word	0x080178bd
 8016d70:	080178df 	.word	0x080178df
 8016d74:	08017917 	.word	0x08017917
 8016d78:	0801793b 	.word	0x0801793b

08016d7c <_cleanup_r>:
 8016d7c:	4901      	ldr	r1, [pc, #4]	; (8016d84 <_cleanup_r+0x8>)
 8016d7e:	f000 b885 	b.w	8016e8c <_fwalk_reent>
 8016d82:	bf00      	nop
 8016d84:	08017c31 	.word	0x08017c31

08016d88 <__sfmoreglue>:
 8016d88:	b570      	push	{r4, r5, r6, lr}
 8016d8a:	1e4a      	subs	r2, r1, #1
 8016d8c:	2568      	movs	r5, #104	; 0x68
 8016d8e:	4355      	muls	r5, r2
 8016d90:	460e      	mov	r6, r1
 8016d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d96:	f000 f90d 	bl	8016fb4 <_malloc_r>
 8016d9a:	4604      	mov	r4, r0
 8016d9c:	b140      	cbz	r0, 8016db0 <__sfmoreglue+0x28>
 8016d9e:	2100      	movs	r1, #0
 8016da0:	e9c0 1600 	strd	r1, r6, [r0]
 8016da4:	300c      	adds	r0, #12
 8016da6:	60a0      	str	r0, [r4, #8]
 8016da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016dac:	f7ff fee4 	bl	8016b78 <memset>
 8016db0:	4620      	mov	r0, r4
 8016db2:	bd70      	pop	{r4, r5, r6, pc}

08016db4 <__sinit>:
 8016db4:	6983      	ldr	r3, [r0, #24]
 8016db6:	b510      	push	{r4, lr}
 8016db8:	4604      	mov	r4, r0
 8016dba:	bb33      	cbnz	r3, 8016e0a <__sinit+0x56>
 8016dbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016dc0:	6503      	str	r3, [r0, #80]	; 0x50
 8016dc2:	4b12      	ldr	r3, [pc, #72]	; (8016e0c <__sinit+0x58>)
 8016dc4:	4a12      	ldr	r2, [pc, #72]	; (8016e10 <__sinit+0x5c>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	6282      	str	r2, [r0, #40]	; 0x28
 8016dca:	4298      	cmp	r0, r3
 8016dcc:	bf04      	itt	eq
 8016dce:	2301      	moveq	r3, #1
 8016dd0:	6183      	streq	r3, [r0, #24]
 8016dd2:	f000 f81f 	bl	8016e14 <__sfp>
 8016dd6:	6060      	str	r0, [r4, #4]
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f000 f81b 	bl	8016e14 <__sfp>
 8016dde:	60a0      	str	r0, [r4, #8]
 8016de0:	4620      	mov	r0, r4
 8016de2:	f000 f817 	bl	8016e14 <__sfp>
 8016de6:	2200      	movs	r2, #0
 8016de8:	60e0      	str	r0, [r4, #12]
 8016dea:	2104      	movs	r1, #4
 8016dec:	6860      	ldr	r0, [r4, #4]
 8016dee:	f7ff ffa1 	bl	8016d34 <std>
 8016df2:	2201      	movs	r2, #1
 8016df4:	2109      	movs	r1, #9
 8016df6:	68a0      	ldr	r0, [r4, #8]
 8016df8:	f7ff ff9c 	bl	8016d34 <std>
 8016dfc:	2202      	movs	r2, #2
 8016dfe:	2112      	movs	r1, #18
 8016e00:	68e0      	ldr	r0, [r4, #12]
 8016e02:	f7ff ff97 	bl	8016d34 <std>
 8016e06:	2301      	movs	r3, #1
 8016e08:	61a3      	str	r3, [r4, #24]
 8016e0a:	bd10      	pop	{r4, pc}
 8016e0c:	08026304 	.word	0x08026304
 8016e10:	08016d7d 	.word	0x08016d7d

08016e14 <__sfp>:
 8016e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e16:	4b1b      	ldr	r3, [pc, #108]	; (8016e84 <__sfp+0x70>)
 8016e18:	681e      	ldr	r6, [r3, #0]
 8016e1a:	69b3      	ldr	r3, [r6, #24]
 8016e1c:	4607      	mov	r7, r0
 8016e1e:	b913      	cbnz	r3, 8016e26 <__sfp+0x12>
 8016e20:	4630      	mov	r0, r6
 8016e22:	f7ff ffc7 	bl	8016db4 <__sinit>
 8016e26:	3648      	adds	r6, #72	; 0x48
 8016e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e2c:	3b01      	subs	r3, #1
 8016e2e:	d503      	bpl.n	8016e38 <__sfp+0x24>
 8016e30:	6833      	ldr	r3, [r6, #0]
 8016e32:	b133      	cbz	r3, 8016e42 <__sfp+0x2e>
 8016e34:	6836      	ldr	r6, [r6, #0]
 8016e36:	e7f7      	b.n	8016e28 <__sfp+0x14>
 8016e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e3c:	b16d      	cbz	r5, 8016e5a <__sfp+0x46>
 8016e3e:	3468      	adds	r4, #104	; 0x68
 8016e40:	e7f4      	b.n	8016e2c <__sfp+0x18>
 8016e42:	2104      	movs	r1, #4
 8016e44:	4638      	mov	r0, r7
 8016e46:	f7ff ff9f 	bl	8016d88 <__sfmoreglue>
 8016e4a:	6030      	str	r0, [r6, #0]
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d1f1      	bne.n	8016e34 <__sfp+0x20>
 8016e50:	230c      	movs	r3, #12
 8016e52:	603b      	str	r3, [r7, #0]
 8016e54:	4604      	mov	r4, r0
 8016e56:	4620      	mov	r0, r4
 8016e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e5a:	4b0b      	ldr	r3, [pc, #44]	; (8016e88 <__sfp+0x74>)
 8016e5c:	6665      	str	r5, [r4, #100]	; 0x64
 8016e5e:	e9c4 5500 	strd	r5, r5, [r4]
 8016e62:	60a5      	str	r5, [r4, #8]
 8016e64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016e68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016e6c:	2208      	movs	r2, #8
 8016e6e:	4629      	mov	r1, r5
 8016e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e74:	f7ff fe80 	bl	8016b78 <memset>
 8016e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e80:	e7e9      	b.n	8016e56 <__sfp+0x42>
 8016e82:	bf00      	nop
 8016e84:	08026304 	.word	0x08026304
 8016e88:	ffff0001 	.word	0xffff0001

08016e8c <_fwalk_reent>:
 8016e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e90:	4680      	mov	r8, r0
 8016e92:	4689      	mov	r9, r1
 8016e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e98:	2600      	movs	r6, #0
 8016e9a:	b914      	cbnz	r4, 8016ea2 <_fwalk_reent+0x16>
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ea2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016ea6:	3f01      	subs	r7, #1
 8016ea8:	d501      	bpl.n	8016eae <_fwalk_reent+0x22>
 8016eaa:	6824      	ldr	r4, [r4, #0]
 8016eac:	e7f5      	b.n	8016e9a <_fwalk_reent+0xe>
 8016eae:	89ab      	ldrh	r3, [r5, #12]
 8016eb0:	2b01      	cmp	r3, #1
 8016eb2:	d907      	bls.n	8016ec4 <_fwalk_reent+0x38>
 8016eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016eb8:	3301      	adds	r3, #1
 8016eba:	d003      	beq.n	8016ec4 <_fwalk_reent+0x38>
 8016ebc:	4629      	mov	r1, r5
 8016ebe:	4640      	mov	r0, r8
 8016ec0:	47c8      	blx	r9
 8016ec2:	4306      	orrs	r6, r0
 8016ec4:	3568      	adds	r5, #104	; 0x68
 8016ec6:	e7ee      	b.n	8016ea6 <_fwalk_reent+0x1a>

08016ec8 <__locale_ctype_ptr>:
 8016ec8:	4b04      	ldr	r3, [pc, #16]	; (8016edc <__locale_ctype_ptr+0x14>)
 8016eca:	4a05      	ldr	r2, [pc, #20]	; (8016ee0 <__locale_ctype_ptr+0x18>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	6a1b      	ldr	r3, [r3, #32]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	bf08      	it	eq
 8016ed4:	4613      	moveq	r3, r2
 8016ed6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016eda:	4770      	bx	lr
 8016edc:	20000020 	.word	0x20000020
 8016ee0:	20000084 	.word	0x20000084

08016ee4 <malloc>:
 8016ee4:	4b02      	ldr	r3, [pc, #8]	; (8016ef0 <malloc+0xc>)
 8016ee6:	4601      	mov	r1, r0
 8016ee8:	6818      	ldr	r0, [r3, #0]
 8016eea:	f000 b863 	b.w	8016fb4 <_malloc_r>
 8016eee:	bf00      	nop
 8016ef0:	20000020 	.word	0x20000020

08016ef4 <__ascii_mbtowc>:
 8016ef4:	b082      	sub	sp, #8
 8016ef6:	b901      	cbnz	r1, 8016efa <__ascii_mbtowc+0x6>
 8016ef8:	a901      	add	r1, sp, #4
 8016efa:	b142      	cbz	r2, 8016f0e <__ascii_mbtowc+0x1a>
 8016efc:	b14b      	cbz	r3, 8016f12 <__ascii_mbtowc+0x1e>
 8016efe:	7813      	ldrb	r3, [r2, #0]
 8016f00:	600b      	str	r3, [r1, #0]
 8016f02:	7812      	ldrb	r2, [r2, #0]
 8016f04:	1c10      	adds	r0, r2, #0
 8016f06:	bf18      	it	ne
 8016f08:	2001      	movne	r0, #1
 8016f0a:	b002      	add	sp, #8
 8016f0c:	4770      	bx	lr
 8016f0e:	4610      	mov	r0, r2
 8016f10:	e7fb      	b.n	8016f0a <__ascii_mbtowc+0x16>
 8016f12:	f06f 0001 	mvn.w	r0, #1
 8016f16:	e7f8      	b.n	8016f0a <__ascii_mbtowc+0x16>

08016f18 <_free_r>:
 8016f18:	b538      	push	{r3, r4, r5, lr}
 8016f1a:	4605      	mov	r5, r0
 8016f1c:	2900      	cmp	r1, #0
 8016f1e:	d045      	beq.n	8016fac <_free_r+0x94>
 8016f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f24:	1f0c      	subs	r4, r1, #4
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	bfb8      	it	lt
 8016f2a:	18e4      	addlt	r4, r4, r3
 8016f2c:	f000 ff39 	bl	8017da2 <__malloc_lock>
 8016f30:	4a1f      	ldr	r2, [pc, #124]	; (8016fb0 <_free_r+0x98>)
 8016f32:	6813      	ldr	r3, [r2, #0]
 8016f34:	4610      	mov	r0, r2
 8016f36:	b933      	cbnz	r3, 8016f46 <_free_r+0x2e>
 8016f38:	6063      	str	r3, [r4, #4]
 8016f3a:	6014      	str	r4, [r2, #0]
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f42:	f000 bf2f 	b.w	8017da4 <__malloc_unlock>
 8016f46:	42a3      	cmp	r3, r4
 8016f48:	d90c      	bls.n	8016f64 <_free_r+0x4c>
 8016f4a:	6821      	ldr	r1, [r4, #0]
 8016f4c:	1862      	adds	r2, r4, r1
 8016f4e:	4293      	cmp	r3, r2
 8016f50:	bf04      	itt	eq
 8016f52:	681a      	ldreq	r2, [r3, #0]
 8016f54:	685b      	ldreq	r3, [r3, #4]
 8016f56:	6063      	str	r3, [r4, #4]
 8016f58:	bf04      	itt	eq
 8016f5a:	1852      	addeq	r2, r2, r1
 8016f5c:	6022      	streq	r2, [r4, #0]
 8016f5e:	6004      	str	r4, [r0, #0]
 8016f60:	e7ec      	b.n	8016f3c <_free_r+0x24>
 8016f62:	4613      	mov	r3, r2
 8016f64:	685a      	ldr	r2, [r3, #4]
 8016f66:	b10a      	cbz	r2, 8016f6c <_free_r+0x54>
 8016f68:	42a2      	cmp	r2, r4
 8016f6a:	d9fa      	bls.n	8016f62 <_free_r+0x4a>
 8016f6c:	6819      	ldr	r1, [r3, #0]
 8016f6e:	1858      	adds	r0, r3, r1
 8016f70:	42a0      	cmp	r0, r4
 8016f72:	d10b      	bne.n	8016f8c <_free_r+0x74>
 8016f74:	6820      	ldr	r0, [r4, #0]
 8016f76:	4401      	add	r1, r0
 8016f78:	1858      	adds	r0, r3, r1
 8016f7a:	4282      	cmp	r2, r0
 8016f7c:	6019      	str	r1, [r3, #0]
 8016f7e:	d1dd      	bne.n	8016f3c <_free_r+0x24>
 8016f80:	6810      	ldr	r0, [r2, #0]
 8016f82:	6852      	ldr	r2, [r2, #4]
 8016f84:	605a      	str	r2, [r3, #4]
 8016f86:	4401      	add	r1, r0
 8016f88:	6019      	str	r1, [r3, #0]
 8016f8a:	e7d7      	b.n	8016f3c <_free_r+0x24>
 8016f8c:	d902      	bls.n	8016f94 <_free_r+0x7c>
 8016f8e:	230c      	movs	r3, #12
 8016f90:	602b      	str	r3, [r5, #0]
 8016f92:	e7d3      	b.n	8016f3c <_free_r+0x24>
 8016f94:	6820      	ldr	r0, [r4, #0]
 8016f96:	1821      	adds	r1, r4, r0
 8016f98:	428a      	cmp	r2, r1
 8016f9a:	bf04      	itt	eq
 8016f9c:	6811      	ldreq	r1, [r2, #0]
 8016f9e:	6852      	ldreq	r2, [r2, #4]
 8016fa0:	6062      	str	r2, [r4, #4]
 8016fa2:	bf04      	itt	eq
 8016fa4:	1809      	addeq	r1, r1, r0
 8016fa6:	6021      	streq	r1, [r4, #0]
 8016fa8:	605c      	str	r4, [r3, #4]
 8016faa:	e7c7      	b.n	8016f3c <_free_r+0x24>
 8016fac:	bd38      	pop	{r3, r4, r5, pc}
 8016fae:	bf00      	nop
 8016fb0:	20008d88 	.word	0x20008d88

08016fb4 <_malloc_r>:
 8016fb4:	b570      	push	{r4, r5, r6, lr}
 8016fb6:	1ccd      	adds	r5, r1, #3
 8016fb8:	f025 0503 	bic.w	r5, r5, #3
 8016fbc:	3508      	adds	r5, #8
 8016fbe:	2d0c      	cmp	r5, #12
 8016fc0:	bf38      	it	cc
 8016fc2:	250c      	movcc	r5, #12
 8016fc4:	2d00      	cmp	r5, #0
 8016fc6:	4606      	mov	r6, r0
 8016fc8:	db01      	blt.n	8016fce <_malloc_r+0x1a>
 8016fca:	42a9      	cmp	r1, r5
 8016fcc:	d903      	bls.n	8016fd6 <_malloc_r+0x22>
 8016fce:	230c      	movs	r3, #12
 8016fd0:	6033      	str	r3, [r6, #0]
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	bd70      	pop	{r4, r5, r6, pc}
 8016fd6:	f000 fee4 	bl	8017da2 <__malloc_lock>
 8016fda:	4a21      	ldr	r2, [pc, #132]	; (8017060 <_malloc_r+0xac>)
 8016fdc:	6814      	ldr	r4, [r2, #0]
 8016fde:	4621      	mov	r1, r4
 8016fe0:	b991      	cbnz	r1, 8017008 <_malloc_r+0x54>
 8016fe2:	4c20      	ldr	r4, [pc, #128]	; (8017064 <_malloc_r+0xb0>)
 8016fe4:	6823      	ldr	r3, [r4, #0]
 8016fe6:	b91b      	cbnz	r3, 8016ff0 <_malloc_r+0x3c>
 8016fe8:	4630      	mov	r0, r6
 8016fea:	f000 fc57 	bl	801789c <_sbrk_r>
 8016fee:	6020      	str	r0, [r4, #0]
 8016ff0:	4629      	mov	r1, r5
 8016ff2:	4630      	mov	r0, r6
 8016ff4:	f000 fc52 	bl	801789c <_sbrk_r>
 8016ff8:	1c43      	adds	r3, r0, #1
 8016ffa:	d124      	bne.n	8017046 <_malloc_r+0x92>
 8016ffc:	230c      	movs	r3, #12
 8016ffe:	6033      	str	r3, [r6, #0]
 8017000:	4630      	mov	r0, r6
 8017002:	f000 fecf 	bl	8017da4 <__malloc_unlock>
 8017006:	e7e4      	b.n	8016fd2 <_malloc_r+0x1e>
 8017008:	680b      	ldr	r3, [r1, #0]
 801700a:	1b5b      	subs	r3, r3, r5
 801700c:	d418      	bmi.n	8017040 <_malloc_r+0x8c>
 801700e:	2b0b      	cmp	r3, #11
 8017010:	d90f      	bls.n	8017032 <_malloc_r+0x7e>
 8017012:	600b      	str	r3, [r1, #0]
 8017014:	50cd      	str	r5, [r1, r3]
 8017016:	18cc      	adds	r4, r1, r3
 8017018:	4630      	mov	r0, r6
 801701a:	f000 fec3 	bl	8017da4 <__malloc_unlock>
 801701e:	f104 000b 	add.w	r0, r4, #11
 8017022:	1d23      	adds	r3, r4, #4
 8017024:	f020 0007 	bic.w	r0, r0, #7
 8017028:	1ac3      	subs	r3, r0, r3
 801702a:	d0d3      	beq.n	8016fd4 <_malloc_r+0x20>
 801702c:	425a      	negs	r2, r3
 801702e:	50e2      	str	r2, [r4, r3]
 8017030:	e7d0      	b.n	8016fd4 <_malloc_r+0x20>
 8017032:	428c      	cmp	r4, r1
 8017034:	684b      	ldr	r3, [r1, #4]
 8017036:	bf16      	itet	ne
 8017038:	6063      	strne	r3, [r4, #4]
 801703a:	6013      	streq	r3, [r2, #0]
 801703c:	460c      	movne	r4, r1
 801703e:	e7eb      	b.n	8017018 <_malloc_r+0x64>
 8017040:	460c      	mov	r4, r1
 8017042:	6849      	ldr	r1, [r1, #4]
 8017044:	e7cc      	b.n	8016fe0 <_malloc_r+0x2c>
 8017046:	1cc4      	adds	r4, r0, #3
 8017048:	f024 0403 	bic.w	r4, r4, #3
 801704c:	42a0      	cmp	r0, r4
 801704e:	d005      	beq.n	801705c <_malloc_r+0xa8>
 8017050:	1a21      	subs	r1, r4, r0
 8017052:	4630      	mov	r0, r6
 8017054:	f000 fc22 	bl	801789c <_sbrk_r>
 8017058:	3001      	adds	r0, #1
 801705a:	d0cf      	beq.n	8016ffc <_malloc_r+0x48>
 801705c:	6025      	str	r5, [r4, #0]
 801705e:	e7db      	b.n	8017018 <_malloc_r+0x64>
 8017060:	20008d88 	.word	0x20008d88
 8017064:	20008d8c 	.word	0x20008d8c

08017068 <__ssputs_r>:
 8017068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801706c:	688e      	ldr	r6, [r1, #8]
 801706e:	429e      	cmp	r6, r3
 8017070:	4682      	mov	sl, r0
 8017072:	460c      	mov	r4, r1
 8017074:	4690      	mov	r8, r2
 8017076:	4699      	mov	r9, r3
 8017078:	d837      	bhi.n	80170ea <__ssputs_r+0x82>
 801707a:	898a      	ldrh	r2, [r1, #12]
 801707c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017080:	d031      	beq.n	80170e6 <__ssputs_r+0x7e>
 8017082:	6825      	ldr	r5, [r4, #0]
 8017084:	6909      	ldr	r1, [r1, #16]
 8017086:	1a6f      	subs	r7, r5, r1
 8017088:	6965      	ldr	r5, [r4, #20]
 801708a:	2302      	movs	r3, #2
 801708c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017090:	fb95 f5f3 	sdiv	r5, r5, r3
 8017094:	f109 0301 	add.w	r3, r9, #1
 8017098:	443b      	add	r3, r7
 801709a:	429d      	cmp	r5, r3
 801709c:	bf38      	it	cc
 801709e:	461d      	movcc	r5, r3
 80170a0:	0553      	lsls	r3, r2, #21
 80170a2:	d530      	bpl.n	8017106 <__ssputs_r+0x9e>
 80170a4:	4629      	mov	r1, r5
 80170a6:	f7ff ff85 	bl	8016fb4 <_malloc_r>
 80170aa:	4606      	mov	r6, r0
 80170ac:	b950      	cbnz	r0, 80170c4 <__ssputs_r+0x5c>
 80170ae:	230c      	movs	r3, #12
 80170b0:	f8ca 3000 	str.w	r3, [sl]
 80170b4:	89a3      	ldrh	r3, [r4, #12]
 80170b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ba:	81a3      	strh	r3, [r4, #12]
 80170bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170c4:	463a      	mov	r2, r7
 80170c6:	6921      	ldr	r1, [r4, #16]
 80170c8:	f7ff fd4b 	bl	8016b62 <memcpy>
 80170cc:	89a3      	ldrh	r3, [r4, #12]
 80170ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80170d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170d6:	81a3      	strh	r3, [r4, #12]
 80170d8:	6126      	str	r6, [r4, #16]
 80170da:	6165      	str	r5, [r4, #20]
 80170dc:	443e      	add	r6, r7
 80170de:	1bed      	subs	r5, r5, r7
 80170e0:	6026      	str	r6, [r4, #0]
 80170e2:	60a5      	str	r5, [r4, #8]
 80170e4:	464e      	mov	r6, r9
 80170e6:	454e      	cmp	r6, r9
 80170e8:	d900      	bls.n	80170ec <__ssputs_r+0x84>
 80170ea:	464e      	mov	r6, r9
 80170ec:	4632      	mov	r2, r6
 80170ee:	4641      	mov	r1, r8
 80170f0:	6820      	ldr	r0, [r4, #0]
 80170f2:	f000 fe3d 	bl	8017d70 <memmove>
 80170f6:	68a3      	ldr	r3, [r4, #8]
 80170f8:	1b9b      	subs	r3, r3, r6
 80170fa:	60a3      	str	r3, [r4, #8]
 80170fc:	6823      	ldr	r3, [r4, #0]
 80170fe:	441e      	add	r6, r3
 8017100:	6026      	str	r6, [r4, #0]
 8017102:	2000      	movs	r0, #0
 8017104:	e7dc      	b.n	80170c0 <__ssputs_r+0x58>
 8017106:	462a      	mov	r2, r5
 8017108:	f000 fe4d 	bl	8017da6 <_realloc_r>
 801710c:	4606      	mov	r6, r0
 801710e:	2800      	cmp	r0, #0
 8017110:	d1e2      	bne.n	80170d8 <__ssputs_r+0x70>
 8017112:	6921      	ldr	r1, [r4, #16]
 8017114:	4650      	mov	r0, sl
 8017116:	f7ff feff 	bl	8016f18 <_free_r>
 801711a:	e7c8      	b.n	80170ae <__ssputs_r+0x46>

0801711c <_svfiprintf_r>:
 801711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017120:	461d      	mov	r5, r3
 8017122:	898b      	ldrh	r3, [r1, #12]
 8017124:	061f      	lsls	r7, r3, #24
 8017126:	b09d      	sub	sp, #116	; 0x74
 8017128:	4680      	mov	r8, r0
 801712a:	460c      	mov	r4, r1
 801712c:	4616      	mov	r6, r2
 801712e:	d50f      	bpl.n	8017150 <_svfiprintf_r+0x34>
 8017130:	690b      	ldr	r3, [r1, #16]
 8017132:	b96b      	cbnz	r3, 8017150 <_svfiprintf_r+0x34>
 8017134:	2140      	movs	r1, #64	; 0x40
 8017136:	f7ff ff3d 	bl	8016fb4 <_malloc_r>
 801713a:	6020      	str	r0, [r4, #0]
 801713c:	6120      	str	r0, [r4, #16]
 801713e:	b928      	cbnz	r0, 801714c <_svfiprintf_r+0x30>
 8017140:	230c      	movs	r3, #12
 8017142:	f8c8 3000 	str.w	r3, [r8]
 8017146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801714a:	e0c8      	b.n	80172de <_svfiprintf_r+0x1c2>
 801714c:	2340      	movs	r3, #64	; 0x40
 801714e:	6163      	str	r3, [r4, #20]
 8017150:	2300      	movs	r3, #0
 8017152:	9309      	str	r3, [sp, #36]	; 0x24
 8017154:	2320      	movs	r3, #32
 8017156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801715a:	2330      	movs	r3, #48	; 0x30
 801715c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017160:	9503      	str	r5, [sp, #12]
 8017162:	f04f 0b01 	mov.w	fp, #1
 8017166:	4637      	mov	r7, r6
 8017168:	463d      	mov	r5, r7
 801716a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801716e:	b10b      	cbz	r3, 8017174 <_svfiprintf_r+0x58>
 8017170:	2b25      	cmp	r3, #37	; 0x25
 8017172:	d13e      	bne.n	80171f2 <_svfiprintf_r+0xd6>
 8017174:	ebb7 0a06 	subs.w	sl, r7, r6
 8017178:	d00b      	beq.n	8017192 <_svfiprintf_r+0x76>
 801717a:	4653      	mov	r3, sl
 801717c:	4632      	mov	r2, r6
 801717e:	4621      	mov	r1, r4
 8017180:	4640      	mov	r0, r8
 8017182:	f7ff ff71 	bl	8017068 <__ssputs_r>
 8017186:	3001      	adds	r0, #1
 8017188:	f000 80a4 	beq.w	80172d4 <_svfiprintf_r+0x1b8>
 801718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801718e:	4453      	add	r3, sl
 8017190:	9309      	str	r3, [sp, #36]	; 0x24
 8017192:	783b      	ldrb	r3, [r7, #0]
 8017194:	2b00      	cmp	r3, #0
 8017196:	f000 809d 	beq.w	80172d4 <_svfiprintf_r+0x1b8>
 801719a:	2300      	movs	r3, #0
 801719c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80171a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171a4:	9304      	str	r3, [sp, #16]
 80171a6:	9307      	str	r3, [sp, #28]
 80171a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171ac:	931a      	str	r3, [sp, #104]	; 0x68
 80171ae:	462f      	mov	r7, r5
 80171b0:	2205      	movs	r2, #5
 80171b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80171b6:	4850      	ldr	r0, [pc, #320]	; (80172f8 <_svfiprintf_r+0x1dc>)
 80171b8:	f7e9 f832 	bl	8000220 <memchr>
 80171bc:	9b04      	ldr	r3, [sp, #16]
 80171be:	b9d0      	cbnz	r0, 80171f6 <_svfiprintf_r+0xda>
 80171c0:	06d9      	lsls	r1, r3, #27
 80171c2:	bf44      	itt	mi
 80171c4:	2220      	movmi	r2, #32
 80171c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171ca:	071a      	lsls	r2, r3, #28
 80171cc:	bf44      	itt	mi
 80171ce:	222b      	movmi	r2, #43	; 0x2b
 80171d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171d4:	782a      	ldrb	r2, [r5, #0]
 80171d6:	2a2a      	cmp	r2, #42	; 0x2a
 80171d8:	d015      	beq.n	8017206 <_svfiprintf_r+0xea>
 80171da:	9a07      	ldr	r2, [sp, #28]
 80171dc:	462f      	mov	r7, r5
 80171de:	2000      	movs	r0, #0
 80171e0:	250a      	movs	r5, #10
 80171e2:	4639      	mov	r1, r7
 80171e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80171e8:	3b30      	subs	r3, #48	; 0x30
 80171ea:	2b09      	cmp	r3, #9
 80171ec:	d94d      	bls.n	801728a <_svfiprintf_r+0x16e>
 80171ee:	b1b8      	cbz	r0, 8017220 <_svfiprintf_r+0x104>
 80171f0:	e00f      	b.n	8017212 <_svfiprintf_r+0xf6>
 80171f2:	462f      	mov	r7, r5
 80171f4:	e7b8      	b.n	8017168 <_svfiprintf_r+0x4c>
 80171f6:	4a40      	ldr	r2, [pc, #256]	; (80172f8 <_svfiprintf_r+0x1dc>)
 80171f8:	1a80      	subs	r0, r0, r2
 80171fa:	fa0b f000 	lsl.w	r0, fp, r0
 80171fe:	4318      	orrs	r0, r3
 8017200:	9004      	str	r0, [sp, #16]
 8017202:	463d      	mov	r5, r7
 8017204:	e7d3      	b.n	80171ae <_svfiprintf_r+0x92>
 8017206:	9a03      	ldr	r2, [sp, #12]
 8017208:	1d11      	adds	r1, r2, #4
 801720a:	6812      	ldr	r2, [r2, #0]
 801720c:	9103      	str	r1, [sp, #12]
 801720e:	2a00      	cmp	r2, #0
 8017210:	db01      	blt.n	8017216 <_svfiprintf_r+0xfa>
 8017212:	9207      	str	r2, [sp, #28]
 8017214:	e004      	b.n	8017220 <_svfiprintf_r+0x104>
 8017216:	4252      	negs	r2, r2
 8017218:	f043 0302 	orr.w	r3, r3, #2
 801721c:	9207      	str	r2, [sp, #28]
 801721e:	9304      	str	r3, [sp, #16]
 8017220:	783b      	ldrb	r3, [r7, #0]
 8017222:	2b2e      	cmp	r3, #46	; 0x2e
 8017224:	d10c      	bne.n	8017240 <_svfiprintf_r+0x124>
 8017226:	787b      	ldrb	r3, [r7, #1]
 8017228:	2b2a      	cmp	r3, #42	; 0x2a
 801722a:	d133      	bne.n	8017294 <_svfiprintf_r+0x178>
 801722c:	9b03      	ldr	r3, [sp, #12]
 801722e:	1d1a      	adds	r2, r3, #4
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	9203      	str	r2, [sp, #12]
 8017234:	2b00      	cmp	r3, #0
 8017236:	bfb8      	it	lt
 8017238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801723c:	3702      	adds	r7, #2
 801723e:	9305      	str	r3, [sp, #20]
 8017240:	4d2e      	ldr	r5, [pc, #184]	; (80172fc <_svfiprintf_r+0x1e0>)
 8017242:	7839      	ldrb	r1, [r7, #0]
 8017244:	2203      	movs	r2, #3
 8017246:	4628      	mov	r0, r5
 8017248:	f7e8 ffea 	bl	8000220 <memchr>
 801724c:	b138      	cbz	r0, 801725e <_svfiprintf_r+0x142>
 801724e:	2340      	movs	r3, #64	; 0x40
 8017250:	1b40      	subs	r0, r0, r5
 8017252:	fa03 f000 	lsl.w	r0, r3, r0
 8017256:	9b04      	ldr	r3, [sp, #16]
 8017258:	4303      	orrs	r3, r0
 801725a:	3701      	adds	r7, #1
 801725c:	9304      	str	r3, [sp, #16]
 801725e:	7839      	ldrb	r1, [r7, #0]
 8017260:	4827      	ldr	r0, [pc, #156]	; (8017300 <_svfiprintf_r+0x1e4>)
 8017262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017266:	2206      	movs	r2, #6
 8017268:	1c7e      	adds	r6, r7, #1
 801726a:	f7e8 ffd9 	bl	8000220 <memchr>
 801726e:	2800      	cmp	r0, #0
 8017270:	d038      	beq.n	80172e4 <_svfiprintf_r+0x1c8>
 8017272:	4b24      	ldr	r3, [pc, #144]	; (8017304 <_svfiprintf_r+0x1e8>)
 8017274:	bb13      	cbnz	r3, 80172bc <_svfiprintf_r+0x1a0>
 8017276:	9b03      	ldr	r3, [sp, #12]
 8017278:	3307      	adds	r3, #7
 801727a:	f023 0307 	bic.w	r3, r3, #7
 801727e:	3308      	adds	r3, #8
 8017280:	9303      	str	r3, [sp, #12]
 8017282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017284:	444b      	add	r3, r9
 8017286:	9309      	str	r3, [sp, #36]	; 0x24
 8017288:	e76d      	b.n	8017166 <_svfiprintf_r+0x4a>
 801728a:	fb05 3202 	mla	r2, r5, r2, r3
 801728e:	2001      	movs	r0, #1
 8017290:	460f      	mov	r7, r1
 8017292:	e7a6      	b.n	80171e2 <_svfiprintf_r+0xc6>
 8017294:	2300      	movs	r3, #0
 8017296:	3701      	adds	r7, #1
 8017298:	9305      	str	r3, [sp, #20]
 801729a:	4619      	mov	r1, r3
 801729c:	250a      	movs	r5, #10
 801729e:	4638      	mov	r0, r7
 80172a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172a4:	3a30      	subs	r2, #48	; 0x30
 80172a6:	2a09      	cmp	r2, #9
 80172a8:	d903      	bls.n	80172b2 <_svfiprintf_r+0x196>
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d0c8      	beq.n	8017240 <_svfiprintf_r+0x124>
 80172ae:	9105      	str	r1, [sp, #20]
 80172b0:	e7c6      	b.n	8017240 <_svfiprintf_r+0x124>
 80172b2:	fb05 2101 	mla	r1, r5, r1, r2
 80172b6:	2301      	movs	r3, #1
 80172b8:	4607      	mov	r7, r0
 80172ba:	e7f0      	b.n	801729e <_svfiprintf_r+0x182>
 80172bc:	ab03      	add	r3, sp, #12
 80172be:	9300      	str	r3, [sp, #0]
 80172c0:	4622      	mov	r2, r4
 80172c2:	4b11      	ldr	r3, [pc, #68]	; (8017308 <_svfiprintf_r+0x1ec>)
 80172c4:	a904      	add	r1, sp, #16
 80172c6:	4640      	mov	r0, r8
 80172c8:	f3af 8000 	nop.w
 80172cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80172d0:	4681      	mov	r9, r0
 80172d2:	d1d6      	bne.n	8017282 <_svfiprintf_r+0x166>
 80172d4:	89a3      	ldrh	r3, [r4, #12]
 80172d6:	065b      	lsls	r3, r3, #25
 80172d8:	f53f af35 	bmi.w	8017146 <_svfiprintf_r+0x2a>
 80172dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172de:	b01d      	add	sp, #116	; 0x74
 80172e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e4:	ab03      	add	r3, sp, #12
 80172e6:	9300      	str	r3, [sp, #0]
 80172e8:	4622      	mov	r2, r4
 80172ea:	4b07      	ldr	r3, [pc, #28]	; (8017308 <_svfiprintf_r+0x1ec>)
 80172ec:	a904      	add	r1, sp, #16
 80172ee:	4640      	mov	r0, r8
 80172f0:	f000 f9c2 	bl	8017678 <_printf_i>
 80172f4:	e7ea      	b.n	80172cc <_svfiprintf_r+0x1b0>
 80172f6:	bf00      	nop
 80172f8:	08026372 	.word	0x08026372
 80172fc:	08026378 	.word	0x08026378
 8017300:	0802637c 	.word	0x0802637c
 8017304:	00000000 	.word	0x00000000
 8017308:	08017069 	.word	0x08017069

0801730c <__sfputc_r>:
 801730c:	6893      	ldr	r3, [r2, #8]
 801730e:	3b01      	subs	r3, #1
 8017310:	2b00      	cmp	r3, #0
 8017312:	b410      	push	{r4}
 8017314:	6093      	str	r3, [r2, #8]
 8017316:	da08      	bge.n	801732a <__sfputc_r+0x1e>
 8017318:	6994      	ldr	r4, [r2, #24]
 801731a:	42a3      	cmp	r3, r4
 801731c:	db01      	blt.n	8017322 <__sfputc_r+0x16>
 801731e:	290a      	cmp	r1, #10
 8017320:	d103      	bne.n	801732a <__sfputc_r+0x1e>
 8017322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017326:	f000 bb0d 	b.w	8017944 <__swbuf_r>
 801732a:	6813      	ldr	r3, [r2, #0]
 801732c:	1c58      	adds	r0, r3, #1
 801732e:	6010      	str	r0, [r2, #0]
 8017330:	7019      	strb	r1, [r3, #0]
 8017332:	4608      	mov	r0, r1
 8017334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017338:	4770      	bx	lr

0801733a <__sfputs_r>:
 801733a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801733c:	4606      	mov	r6, r0
 801733e:	460f      	mov	r7, r1
 8017340:	4614      	mov	r4, r2
 8017342:	18d5      	adds	r5, r2, r3
 8017344:	42ac      	cmp	r4, r5
 8017346:	d101      	bne.n	801734c <__sfputs_r+0x12>
 8017348:	2000      	movs	r0, #0
 801734a:	e007      	b.n	801735c <__sfputs_r+0x22>
 801734c:	463a      	mov	r2, r7
 801734e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017352:	4630      	mov	r0, r6
 8017354:	f7ff ffda 	bl	801730c <__sfputc_r>
 8017358:	1c43      	adds	r3, r0, #1
 801735a:	d1f3      	bne.n	8017344 <__sfputs_r+0xa>
 801735c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017360 <_vfiprintf_r>:
 8017360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017364:	460c      	mov	r4, r1
 8017366:	b09d      	sub	sp, #116	; 0x74
 8017368:	4617      	mov	r7, r2
 801736a:	461d      	mov	r5, r3
 801736c:	4606      	mov	r6, r0
 801736e:	b118      	cbz	r0, 8017378 <_vfiprintf_r+0x18>
 8017370:	6983      	ldr	r3, [r0, #24]
 8017372:	b90b      	cbnz	r3, 8017378 <_vfiprintf_r+0x18>
 8017374:	f7ff fd1e 	bl	8016db4 <__sinit>
 8017378:	4b7c      	ldr	r3, [pc, #496]	; (801756c <_vfiprintf_r+0x20c>)
 801737a:	429c      	cmp	r4, r3
 801737c:	d158      	bne.n	8017430 <_vfiprintf_r+0xd0>
 801737e:	6874      	ldr	r4, [r6, #4]
 8017380:	89a3      	ldrh	r3, [r4, #12]
 8017382:	0718      	lsls	r0, r3, #28
 8017384:	d55e      	bpl.n	8017444 <_vfiprintf_r+0xe4>
 8017386:	6923      	ldr	r3, [r4, #16]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d05b      	beq.n	8017444 <_vfiprintf_r+0xe4>
 801738c:	2300      	movs	r3, #0
 801738e:	9309      	str	r3, [sp, #36]	; 0x24
 8017390:	2320      	movs	r3, #32
 8017392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017396:	2330      	movs	r3, #48	; 0x30
 8017398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801739c:	9503      	str	r5, [sp, #12]
 801739e:	f04f 0b01 	mov.w	fp, #1
 80173a2:	46b8      	mov	r8, r7
 80173a4:	4645      	mov	r5, r8
 80173a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80173aa:	b10b      	cbz	r3, 80173b0 <_vfiprintf_r+0x50>
 80173ac:	2b25      	cmp	r3, #37	; 0x25
 80173ae:	d154      	bne.n	801745a <_vfiprintf_r+0xfa>
 80173b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80173b4:	d00b      	beq.n	80173ce <_vfiprintf_r+0x6e>
 80173b6:	4653      	mov	r3, sl
 80173b8:	463a      	mov	r2, r7
 80173ba:	4621      	mov	r1, r4
 80173bc:	4630      	mov	r0, r6
 80173be:	f7ff ffbc 	bl	801733a <__sfputs_r>
 80173c2:	3001      	adds	r0, #1
 80173c4:	f000 80c2 	beq.w	801754c <_vfiprintf_r+0x1ec>
 80173c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ca:	4453      	add	r3, sl
 80173cc:	9309      	str	r3, [sp, #36]	; 0x24
 80173ce:	f898 3000 	ldrb.w	r3, [r8]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	f000 80ba 	beq.w	801754c <_vfiprintf_r+0x1ec>
 80173d8:	2300      	movs	r3, #0
 80173da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173e2:	9304      	str	r3, [sp, #16]
 80173e4:	9307      	str	r3, [sp, #28]
 80173e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173ea:	931a      	str	r3, [sp, #104]	; 0x68
 80173ec:	46a8      	mov	r8, r5
 80173ee:	2205      	movs	r2, #5
 80173f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80173f4:	485e      	ldr	r0, [pc, #376]	; (8017570 <_vfiprintf_r+0x210>)
 80173f6:	f7e8 ff13 	bl	8000220 <memchr>
 80173fa:	9b04      	ldr	r3, [sp, #16]
 80173fc:	bb78      	cbnz	r0, 801745e <_vfiprintf_r+0xfe>
 80173fe:	06d9      	lsls	r1, r3, #27
 8017400:	bf44      	itt	mi
 8017402:	2220      	movmi	r2, #32
 8017404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017408:	071a      	lsls	r2, r3, #28
 801740a:	bf44      	itt	mi
 801740c:	222b      	movmi	r2, #43	; 0x2b
 801740e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017412:	782a      	ldrb	r2, [r5, #0]
 8017414:	2a2a      	cmp	r2, #42	; 0x2a
 8017416:	d02a      	beq.n	801746e <_vfiprintf_r+0x10e>
 8017418:	9a07      	ldr	r2, [sp, #28]
 801741a:	46a8      	mov	r8, r5
 801741c:	2000      	movs	r0, #0
 801741e:	250a      	movs	r5, #10
 8017420:	4641      	mov	r1, r8
 8017422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017426:	3b30      	subs	r3, #48	; 0x30
 8017428:	2b09      	cmp	r3, #9
 801742a:	d969      	bls.n	8017500 <_vfiprintf_r+0x1a0>
 801742c:	b360      	cbz	r0, 8017488 <_vfiprintf_r+0x128>
 801742e:	e024      	b.n	801747a <_vfiprintf_r+0x11a>
 8017430:	4b50      	ldr	r3, [pc, #320]	; (8017574 <_vfiprintf_r+0x214>)
 8017432:	429c      	cmp	r4, r3
 8017434:	d101      	bne.n	801743a <_vfiprintf_r+0xda>
 8017436:	68b4      	ldr	r4, [r6, #8]
 8017438:	e7a2      	b.n	8017380 <_vfiprintf_r+0x20>
 801743a:	4b4f      	ldr	r3, [pc, #316]	; (8017578 <_vfiprintf_r+0x218>)
 801743c:	429c      	cmp	r4, r3
 801743e:	bf08      	it	eq
 8017440:	68f4      	ldreq	r4, [r6, #12]
 8017442:	e79d      	b.n	8017380 <_vfiprintf_r+0x20>
 8017444:	4621      	mov	r1, r4
 8017446:	4630      	mov	r0, r6
 8017448:	f000 faee 	bl	8017a28 <__swsetup_r>
 801744c:	2800      	cmp	r0, #0
 801744e:	d09d      	beq.n	801738c <_vfiprintf_r+0x2c>
 8017450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017454:	b01d      	add	sp, #116	; 0x74
 8017456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801745a:	46a8      	mov	r8, r5
 801745c:	e7a2      	b.n	80173a4 <_vfiprintf_r+0x44>
 801745e:	4a44      	ldr	r2, [pc, #272]	; (8017570 <_vfiprintf_r+0x210>)
 8017460:	1a80      	subs	r0, r0, r2
 8017462:	fa0b f000 	lsl.w	r0, fp, r0
 8017466:	4318      	orrs	r0, r3
 8017468:	9004      	str	r0, [sp, #16]
 801746a:	4645      	mov	r5, r8
 801746c:	e7be      	b.n	80173ec <_vfiprintf_r+0x8c>
 801746e:	9a03      	ldr	r2, [sp, #12]
 8017470:	1d11      	adds	r1, r2, #4
 8017472:	6812      	ldr	r2, [r2, #0]
 8017474:	9103      	str	r1, [sp, #12]
 8017476:	2a00      	cmp	r2, #0
 8017478:	db01      	blt.n	801747e <_vfiprintf_r+0x11e>
 801747a:	9207      	str	r2, [sp, #28]
 801747c:	e004      	b.n	8017488 <_vfiprintf_r+0x128>
 801747e:	4252      	negs	r2, r2
 8017480:	f043 0302 	orr.w	r3, r3, #2
 8017484:	9207      	str	r2, [sp, #28]
 8017486:	9304      	str	r3, [sp, #16]
 8017488:	f898 3000 	ldrb.w	r3, [r8]
 801748c:	2b2e      	cmp	r3, #46	; 0x2e
 801748e:	d10e      	bne.n	80174ae <_vfiprintf_r+0x14e>
 8017490:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017494:	2b2a      	cmp	r3, #42	; 0x2a
 8017496:	d138      	bne.n	801750a <_vfiprintf_r+0x1aa>
 8017498:	9b03      	ldr	r3, [sp, #12]
 801749a:	1d1a      	adds	r2, r3, #4
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	9203      	str	r2, [sp, #12]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	bfb8      	it	lt
 80174a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80174a8:	f108 0802 	add.w	r8, r8, #2
 80174ac:	9305      	str	r3, [sp, #20]
 80174ae:	4d33      	ldr	r5, [pc, #204]	; (801757c <_vfiprintf_r+0x21c>)
 80174b0:	f898 1000 	ldrb.w	r1, [r8]
 80174b4:	2203      	movs	r2, #3
 80174b6:	4628      	mov	r0, r5
 80174b8:	f7e8 feb2 	bl	8000220 <memchr>
 80174bc:	b140      	cbz	r0, 80174d0 <_vfiprintf_r+0x170>
 80174be:	2340      	movs	r3, #64	; 0x40
 80174c0:	1b40      	subs	r0, r0, r5
 80174c2:	fa03 f000 	lsl.w	r0, r3, r0
 80174c6:	9b04      	ldr	r3, [sp, #16]
 80174c8:	4303      	orrs	r3, r0
 80174ca:	f108 0801 	add.w	r8, r8, #1
 80174ce:	9304      	str	r3, [sp, #16]
 80174d0:	f898 1000 	ldrb.w	r1, [r8]
 80174d4:	482a      	ldr	r0, [pc, #168]	; (8017580 <_vfiprintf_r+0x220>)
 80174d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174da:	2206      	movs	r2, #6
 80174dc:	f108 0701 	add.w	r7, r8, #1
 80174e0:	f7e8 fe9e 	bl	8000220 <memchr>
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d037      	beq.n	8017558 <_vfiprintf_r+0x1f8>
 80174e8:	4b26      	ldr	r3, [pc, #152]	; (8017584 <_vfiprintf_r+0x224>)
 80174ea:	bb1b      	cbnz	r3, 8017534 <_vfiprintf_r+0x1d4>
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	3307      	adds	r3, #7
 80174f0:	f023 0307 	bic.w	r3, r3, #7
 80174f4:	3308      	adds	r3, #8
 80174f6:	9303      	str	r3, [sp, #12]
 80174f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174fa:	444b      	add	r3, r9
 80174fc:	9309      	str	r3, [sp, #36]	; 0x24
 80174fe:	e750      	b.n	80173a2 <_vfiprintf_r+0x42>
 8017500:	fb05 3202 	mla	r2, r5, r2, r3
 8017504:	2001      	movs	r0, #1
 8017506:	4688      	mov	r8, r1
 8017508:	e78a      	b.n	8017420 <_vfiprintf_r+0xc0>
 801750a:	2300      	movs	r3, #0
 801750c:	f108 0801 	add.w	r8, r8, #1
 8017510:	9305      	str	r3, [sp, #20]
 8017512:	4619      	mov	r1, r3
 8017514:	250a      	movs	r5, #10
 8017516:	4640      	mov	r0, r8
 8017518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801751c:	3a30      	subs	r2, #48	; 0x30
 801751e:	2a09      	cmp	r2, #9
 8017520:	d903      	bls.n	801752a <_vfiprintf_r+0x1ca>
 8017522:	2b00      	cmp	r3, #0
 8017524:	d0c3      	beq.n	80174ae <_vfiprintf_r+0x14e>
 8017526:	9105      	str	r1, [sp, #20]
 8017528:	e7c1      	b.n	80174ae <_vfiprintf_r+0x14e>
 801752a:	fb05 2101 	mla	r1, r5, r1, r2
 801752e:	2301      	movs	r3, #1
 8017530:	4680      	mov	r8, r0
 8017532:	e7f0      	b.n	8017516 <_vfiprintf_r+0x1b6>
 8017534:	ab03      	add	r3, sp, #12
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	4622      	mov	r2, r4
 801753a:	4b13      	ldr	r3, [pc, #76]	; (8017588 <_vfiprintf_r+0x228>)
 801753c:	a904      	add	r1, sp, #16
 801753e:	4630      	mov	r0, r6
 8017540:	f3af 8000 	nop.w
 8017544:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017548:	4681      	mov	r9, r0
 801754a:	d1d5      	bne.n	80174f8 <_vfiprintf_r+0x198>
 801754c:	89a3      	ldrh	r3, [r4, #12]
 801754e:	065b      	lsls	r3, r3, #25
 8017550:	f53f af7e 	bmi.w	8017450 <_vfiprintf_r+0xf0>
 8017554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017556:	e77d      	b.n	8017454 <_vfiprintf_r+0xf4>
 8017558:	ab03      	add	r3, sp, #12
 801755a:	9300      	str	r3, [sp, #0]
 801755c:	4622      	mov	r2, r4
 801755e:	4b0a      	ldr	r3, [pc, #40]	; (8017588 <_vfiprintf_r+0x228>)
 8017560:	a904      	add	r1, sp, #16
 8017562:	4630      	mov	r0, r6
 8017564:	f000 f888 	bl	8017678 <_printf_i>
 8017568:	e7ec      	b.n	8017544 <_vfiprintf_r+0x1e4>
 801756a:	bf00      	nop
 801756c:	08026328 	.word	0x08026328
 8017570:	08026372 	.word	0x08026372
 8017574:	08026348 	.word	0x08026348
 8017578:	08026308 	.word	0x08026308
 801757c:	08026378 	.word	0x08026378
 8017580:	0802637c 	.word	0x0802637c
 8017584:	00000000 	.word	0x00000000
 8017588:	0801733b 	.word	0x0801733b

0801758c <_printf_common>:
 801758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017590:	4691      	mov	r9, r2
 8017592:	461f      	mov	r7, r3
 8017594:	688a      	ldr	r2, [r1, #8]
 8017596:	690b      	ldr	r3, [r1, #16]
 8017598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801759c:	4293      	cmp	r3, r2
 801759e:	bfb8      	it	lt
 80175a0:	4613      	movlt	r3, r2
 80175a2:	f8c9 3000 	str.w	r3, [r9]
 80175a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175aa:	4606      	mov	r6, r0
 80175ac:	460c      	mov	r4, r1
 80175ae:	b112      	cbz	r2, 80175b6 <_printf_common+0x2a>
 80175b0:	3301      	adds	r3, #1
 80175b2:	f8c9 3000 	str.w	r3, [r9]
 80175b6:	6823      	ldr	r3, [r4, #0]
 80175b8:	0699      	lsls	r1, r3, #26
 80175ba:	bf42      	ittt	mi
 80175bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80175c0:	3302      	addmi	r3, #2
 80175c2:	f8c9 3000 	strmi.w	r3, [r9]
 80175c6:	6825      	ldr	r5, [r4, #0]
 80175c8:	f015 0506 	ands.w	r5, r5, #6
 80175cc:	d107      	bne.n	80175de <_printf_common+0x52>
 80175ce:	f104 0a19 	add.w	sl, r4, #25
 80175d2:	68e3      	ldr	r3, [r4, #12]
 80175d4:	f8d9 2000 	ldr.w	r2, [r9]
 80175d8:	1a9b      	subs	r3, r3, r2
 80175da:	42ab      	cmp	r3, r5
 80175dc:	dc28      	bgt.n	8017630 <_printf_common+0xa4>
 80175de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80175e2:	6822      	ldr	r2, [r4, #0]
 80175e4:	3300      	adds	r3, #0
 80175e6:	bf18      	it	ne
 80175e8:	2301      	movne	r3, #1
 80175ea:	0692      	lsls	r2, r2, #26
 80175ec:	d42d      	bmi.n	801764a <_printf_common+0xbe>
 80175ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175f2:	4639      	mov	r1, r7
 80175f4:	4630      	mov	r0, r6
 80175f6:	47c0      	blx	r8
 80175f8:	3001      	adds	r0, #1
 80175fa:	d020      	beq.n	801763e <_printf_common+0xb2>
 80175fc:	6823      	ldr	r3, [r4, #0]
 80175fe:	68e5      	ldr	r5, [r4, #12]
 8017600:	f8d9 2000 	ldr.w	r2, [r9]
 8017604:	f003 0306 	and.w	r3, r3, #6
 8017608:	2b04      	cmp	r3, #4
 801760a:	bf08      	it	eq
 801760c:	1aad      	subeq	r5, r5, r2
 801760e:	68a3      	ldr	r3, [r4, #8]
 8017610:	6922      	ldr	r2, [r4, #16]
 8017612:	bf0c      	ite	eq
 8017614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017618:	2500      	movne	r5, #0
 801761a:	4293      	cmp	r3, r2
 801761c:	bfc4      	itt	gt
 801761e:	1a9b      	subgt	r3, r3, r2
 8017620:	18ed      	addgt	r5, r5, r3
 8017622:	f04f 0900 	mov.w	r9, #0
 8017626:	341a      	adds	r4, #26
 8017628:	454d      	cmp	r5, r9
 801762a:	d11a      	bne.n	8017662 <_printf_common+0xd6>
 801762c:	2000      	movs	r0, #0
 801762e:	e008      	b.n	8017642 <_printf_common+0xb6>
 8017630:	2301      	movs	r3, #1
 8017632:	4652      	mov	r2, sl
 8017634:	4639      	mov	r1, r7
 8017636:	4630      	mov	r0, r6
 8017638:	47c0      	blx	r8
 801763a:	3001      	adds	r0, #1
 801763c:	d103      	bne.n	8017646 <_printf_common+0xba>
 801763e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017646:	3501      	adds	r5, #1
 8017648:	e7c3      	b.n	80175d2 <_printf_common+0x46>
 801764a:	18e1      	adds	r1, r4, r3
 801764c:	1c5a      	adds	r2, r3, #1
 801764e:	2030      	movs	r0, #48	; 0x30
 8017650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017654:	4422      	add	r2, r4
 8017656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801765a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801765e:	3302      	adds	r3, #2
 8017660:	e7c5      	b.n	80175ee <_printf_common+0x62>
 8017662:	2301      	movs	r3, #1
 8017664:	4622      	mov	r2, r4
 8017666:	4639      	mov	r1, r7
 8017668:	4630      	mov	r0, r6
 801766a:	47c0      	blx	r8
 801766c:	3001      	adds	r0, #1
 801766e:	d0e6      	beq.n	801763e <_printf_common+0xb2>
 8017670:	f109 0901 	add.w	r9, r9, #1
 8017674:	e7d8      	b.n	8017628 <_printf_common+0x9c>
	...

08017678 <_printf_i>:
 8017678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801767c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017680:	460c      	mov	r4, r1
 8017682:	7e09      	ldrb	r1, [r1, #24]
 8017684:	b085      	sub	sp, #20
 8017686:	296e      	cmp	r1, #110	; 0x6e
 8017688:	4617      	mov	r7, r2
 801768a:	4606      	mov	r6, r0
 801768c:	4698      	mov	r8, r3
 801768e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017690:	f000 80b3 	beq.w	80177fa <_printf_i+0x182>
 8017694:	d822      	bhi.n	80176dc <_printf_i+0x64>
 8017696:	2963      	cmp	r1, #99	; 0x63
 8017698:	d036      	beq.n	8017708 <_printf_i+0x90>
 801769a:	d80a      	bhi.n	80176b2 <_printf_i+0x3a>
 801769c:	2900      	cmp	r1, #0
 801769e:	f000 80b9 	beq.w	8017814 <_printf_i+0x19c>
 80176a2:	2958      	cmp	r1, #88	; 0x58
 80176a4:	f000 8083 	beq.w	80177ae <_printf_i+0x136>
 80176a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80176b0:	e032      	b.n	8017718 <_printf_i+0xa0>
 80176b2:	2964      	cmp	r1, #100	; 0x64
 80176b4:	d001      	beq.n	80176ba <_printf_i+0x42>
 80176b6:	2969      	cmp	r1, #105	; 0x69
 80176b8:	d1f6      	bne.n	80176a8 <_printf_i+0x30>
 80176ba:	6820      	ldr	r0, [r4, #0]
 80176bc:	6813      	ldr	r3, [r2, #0]
 80176be:	0605      	lsls	r5, r0, #24
 80176c0:	f103 0104 	add.w	r1, r3, #4
 80176c4:	d52a      	bpl.n	801771c <_printf_i+0xa4>
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	6011      	str	r1, [r2, #0]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	da03      	bge.n	80176d6 <_printf_i+0x5e>
 80176ce:	222d      	movs	r2, #45	; 0x2d
 80176d0:	425b      	negs	r3, r3
 80176d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80176d6:	486f      	ldr	r0, [pc, #444]	; (8017894 <_printf_i+0x21c>)
 80176d8:	220a      	movs	r2, #10
 80176da:	e039      	b.n	8017750 <_printf_i+0xd8>
 80176dc:	2973      	cmp	r1, #115	; 0x73
 80176de:	f000 809d 	beq.w	801781c <_printf_i+0x1a4>
 80176e2:	d808      	bhi.n	80176f6 <_printf_i+0x7e>
 80176e4:	296f      	cmp	r1, #111	; 0x6f
 80176e6:	d020      	beq.n	801772a <_printf_i+0xb2>
 80176e8:	2970      	cmp	r1, #112	; 0x70
 80176ea:	d1dd      	bne.n	80176a8 <_printf_i+0x30>
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	f043 0320 	orr.w	r3, r3, #32
 80176f2:	6023      	str	r3, [r4, #0]
 80176f4:	e003      	b.n	80176fe <_printf_i+0x86>
 80176f6:	2975      	cmp	r1, #117	; 0x75
 80176f8:	d017      	beq.n	801772a <_printf_i+0xb2>
 80176fa:	2978      	cmp	r1, #120	; 0x78
 80176fc:	d1d4      	bne.n	80176a8 <_printf_i+0x30>
 80176fe:	2378      	movs	r3, #120	; 0x78
 8017700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017704:	4864      	ldr	r0, [pc, #400]	; (8017898 <_printf_i+0x220>)
 8017706:	e055      	b.n	80177b4 <_printf_i+0x13c>
 8017708:	6813      	ldr	r3, [r2, #0]
 801770a:	1d19      	adds	r1, r3, #4
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	6011      	str	r1, [r2, #0]
 8017710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017718:	2301      	movs	r3, #1
 801771a:	e08c      	b.n	8017836 <_printf_i+0x1be>
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	6011      	str	r1, [r2, #0]
 8017720:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017724:	bf18      	it	ne
 8017726:	b21b      	sxthne	r3, r3
 8017728:	e7cf      	b.n	80176ca <_printf_i+0x52>
 801772a:	6813      	ldr	r3, [r2, #0]
 801772c:	6825      	ldr	r5, [r4, #0]
 801772e:	1d18      	adds	r0, r3, #4
 8017730:	6010      	str	r0, [r2, #0]
 8017732:	0628      	lsls	r0, r5, #24
 8017734:	d501      	bpl.n	801773a <_printf_i+0xc2>
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	e002      	b.n	8017740 <_printf_i+0xc8>
 801773a:	0668      	lsls	r0, r5, #25
 801773c:	d5fb      	bpl.n	8017736 <_printf_i+0xbe>
 801773e:	881b      	ldrh	r3, [r3, #0]
 8017740:	4854      	ldr	r0, [pc, #336]	; (8017894 <_printf_i+0x21c>)
 8017742:	296f      	cmp	r1, #111	; 0x6f
 8017744:	bf14      	ite	ne
 8017746:	220a      	movne	r2, #10
 8017748:	2208      	moveq	r2, #8
 801774a:	2100      	movs	r1, #0
 801774c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017750:	6865      	ldr	r5, [r4, #4]
 8017752:	60a5      	str	r5, [r4, #8]
 8017754:	2d00      	cmp	r5, #0
 8017756:	f2c0 8095 	blt.w	8017884 <_printf_i+0x20c>
 801775a:	6821      	ldr	r1, [r4, #0]
 801775c:	f021 0104 	bic.w	r1, r1, #4
 8017760:	6021      	str	r1, [r4, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d13d      	bne.n	80177e2 <_printf_i+0x16a>
 8017766:	2d00      	cmp	r5, #0
 8017768:	f040 808e 	bne.w	8017888 <_printf_i+0x210>
 801776c:	4665      	mov	r5, ip
 801776e:	2a08      	cmp	r2, #8
 8017770:	d10b      	bne.n	801778a <_printf_i+0x112>
 8017772:	6823      	ldr	r3, [r4, #0]
 8017774:	07db      	lsls	r3, r3, #31
 8017776:	d508      	bpl.n	801778a <_printf_i+0x112>
 8017778:	6923      	ldr	r3, [r4, #16]
 801777a:	6862      	ldr	r2, [r4, #4]
 801777c:	429a      	cmp	r2, r3
 801777e:	bfde      	ittt	le
 8017780:	2330      	movle	r3, #48	; 0x30
 8017782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017786:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801778a:	ebac 0305 	sub.w	r3, ip, r5
 801778e:	6123      	str	r3, [r4, #16]
 8017790:	f8cd 8000 	str.w	r8, [sp]
 8017794:	463b      	mov	r3, r7
 8017796:	aa03      	add	r2, sp, #12
 8017798:	4621      	mov	r1, r4
 801779a:	4630      	mov	r0, r6
 801779c:	f7ff fef6 	bl	801758c <_printf_common>
 80177a0:	3001      	adds	r0, #1
 80177a2:	d14d      	bne.n	8017840 <_printf_i+0x1c8>
 80177a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80177a8:	b005      	add	sp, #20
 80177aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177ae:	4839      	ldr	r0, [pc, #228]	; (8017894 <_printf_i+0x21c>)
 80177b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80177b4:	6813      	ldr	r3, [r2, #0]
 80177b6:	6821      	ldr	r1, [r4, #0]
 80177b8:	1d1d      	adds	r5, r3, #4
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	6015      	str	r5, [r2, #0]
 80177be:	060a      	lsls	r2, r1, #24
 80177c0:	d50b      	bpl.n	80177da <_printf_i+0x162>
 80177c2:	07ca      	lsls	r2, r1, #31
 80177c4:	bf44      	itt	mi
 80177c6:	f041 0120 	orrmi.w	r1, r1, #32
 80177ca:	6021      	strmi	r1, [r4, #0]
 80177cc:	b91b      	cbnz	r3, 80177d6 <_printf_i+0x15e>
 80177ce:	6822      	ldr	r2, [r4, #0]
 80177d0:	f022 0220 	bic.w	r2, r2, #32
 80177d4:	6022      	str	r2, [r4, #0]
 80177d6:	2210      	movs	r2, #16
 80177d8:	e7b7      	b.n	801774a <_printf_i+0xd2>
 80177da:	064d      	lsls	r5, r1, #25
 80177dc:	bf48      	it	mi
 80177de:	b29b      	uxthmi	r3, r3
 80177e0:	e7ef      	b.n	80177c2 <_printf_i+0x14a>
 80177e2:	4665      	mov	r5, ip
 80177e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80177e8:	fb02 3311 	mls	r3, r2, r1, r3
 80177ec:	5cc3      	ldrb	r3, [r0, r3]
 80177ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80177f2:	460b      	mov	r3, r1
 80177f4:	2900      	cmp	r1, #0
 80177f6:	d1f5      	bne.n	80177e4 <_printf_i+0x16c>
 80177f8:	e7b9      	b.n	801776e <_printf_i+0xf6>
 80177fa:	6813      	ldr	r3, [r2, #0]
 80177fc:	6825      	ldr	r5, [r4, #0]
 80177fe:	6961      	ldr	r1, [r4, #20]
 8017800:	1d18      	adds	r0, r3, #4
 8017802:	6010      	str	r0, [r2, #0]
 8017804:	0628      	lsls	r0, r5, #24
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	d501      	bpl.n	801780e <_printf_i+0x196>
 801780a:	6019      	str	r1, [r3, #0]
 801780c:	e002      	b.n	8017814 <_printf_i+0x19c>
 801780e:	066a      	lsls	r2, r5, #25
 8017810:	d5fb      	bpl.n	801780a <_printf_i+0x192>
 8017812:	8019      	strh	r1, [r3, #0]
 8017814:	2300      	movs	r3, #0
 8017816:	6123      	str	r3, [r4, #16]
 8017818:	4665      	mov	r5, ip
 801781a:	e7b9      	b.n	8017790 <_printf_i+0x118>
 801781c:	6813      	ldr	r3, [r2, #0]
 801781e:	1d19      	adds	r1, r3, #4
 8017820:	6011      	str	r1, [r2, #0]
 8017822:	681d      	ldr	r5, [r3, #0]
 8017824:	6862      	ldr	r2, [r4, #4]
 8017826:	2100      	movs	r1, #0
 8017828:	4628      	mov	r0, r5
 801782a:	f7e8 fcf9 	bl	8000220 <memchr>
 801782e:	b108      	cbz	r0, 8017834 <_printf_i+0x1bc>
 8017830:	1b40      	subs	r0, r0, r5
 8017832:	6060      	str	r0, [r4, #4]
 8017834:	6863      	ldr	r3, [r4, #4]
 8017836:	6123      	str	r3, [r4, #16]
 8017838:	2300      	movs	r3, #0
 801783a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801783e:	e7a7      	b.n	8017790 <_printf_i+0x118>
 8017840:	6923      	ldr	r3, [r4, #16]
 8017842:	462a      	mov	r2, r5
 8017844:	4639      	mov	r1, r7
 8017846:	4630      	mov	r0, r6
 8017848:	47c0      	blx	r8
 801784a:	3001      	adds	r0, #1
 801784c:	d0aa      	beq.n	80177a4 <_printf_i+0x12c>
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	079b      	lsls	r3, r3, #30
 8017852:	d413      	bmi.n	801787c <_printf_i+0x204>
 8017854:	68e0      	ldr	r0, [r4, #12]
 8017856:	9b03      	ldr	r3, [sp, #12]
 8017858:	4298      	cmp	r0, r3
 801785a:	bfb8      	it	lt
 801785c:	4618      	movlt	r0, r3
 801785e:	e7a3      	b.n	80177a8 <_printf_i+0x130>
 8017860:	2301      	movs	r3, #1
 8017862:	464a      	mov	r2, r9
 8017864:	4639      	mov	r1, r7
 8017866:	4630      	mov	r0, r6
 8017868:	47c0      	blx	r8
 801786a:	3001      	adds	r0, #1
 801786c:	d09a      	beq.n	80177a4 <_printf_i+0x12c>
 801786e:	3501      	adds	r5, #1
 8017870:	68e3      	ldr	r3, [r4, #12]
 8017872:	9a03      	ldr	r2, [sp, #12]
 8017874:	1a9b      	subs	r3, r3, r2
 8017876:	42ab      	cmp	r3, r5
 8017878:	dcf2      	bgt.n	8017860 <_printf_i+0x1e8>
 801787a:	e7eb      	b.n	8017854 <_printf_i+0x1dc>
 801787c:	2500      	movs	r5, #0
 801787e:	f104 0919 	add.w	r9, r4, #25
 8017882:	e7f5      	b.n	8017870 <_printf_i+0x1f8>
 8017884:	2b00      	cmp	r3, #0
 8017886:	d1ac      	bne.n	80177e2 <_printf_i+0x16a>
 8017888:	7803      	ldrb	r3, [r0, #0]
 801788a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801788e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017892:	e76c      	b.n	801776e <_printf_i+0xf6>
 8017894:	08026383 	.word	0x08026383
 8017898:	08026394 	.word	0x08026394

0801789c <_sbrk_r>:
 801789c:	b538      	push	{r3, r4, r5, lr}
 801789e:	4c06      	ldr	r4, [pc, #24]	; (80178b8 <_sbrk_r+0x1c>)
 80178a0:	2300      	movs	r3, #0
 80178a2:	4605      	mov	r5, r0
 80178a4:	4608      	mov	r0, r1
 80178a6:	6023      	str	r3, [r4, #0]
 80178a8:	f7e9 faae 	bl	8000e08 <_sbrk>
 80178ac:	1c43      	adds	r3, r0, #1
 80178ae:	d102      	bne.n	80178b6 <_sbrk_r+0x1a>
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	b103      	cbz	r3, 80178b6 <_sbrk_r+0x1a>
 80178b4:	602b      	str	r3, [r5, #0]
 80178b6:	bd38      	pop	{r3, r4, r5, pc}
 80178b8:	2000fb18 	.word	0x2000fb18

080178bc <__sread>:
 80178bc:	b510      	push	{r4, lr}
 80178be:	460c      	mov	r4, r1
 80178c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178c4:	f000 fa96 	bl	8017df4 <_read_r>
 80178c8:	2800      	cmp	r0, #0
 80178ca:	bfab      	itete	ge
 80178cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178ce:	89a3      	ldrhlt	r3, [r4, #12]
 80178d0:	181b      	addge	r3, r3, r0
 80178d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178d6:	bfac      	ite	ge
 80178d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80178da:	81a3      	strhlt	r3, [r4, #12]
 80178dc:	bd10      	pop	{r4, pc}

080178de <__swrite>:
 80178de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e2:	461f      	mov	r7, r3
 80178e4:	898b      	ldrh	r3, [r1, #12]
 80178e6:	05db      	lsls	r3, r3, #23
 80178e8:	4605      	mov	r5, r0
 80178ea:	460c      	mov	r4, r1
 80178ec:	4616      	mov	r6, r2
 80178ee:	d505      	bpl.n	80178fc <__swrite+0x1e>
 80178f0:	2302      	movs	r3, #2
 80178f2:	2200      	movs	r2, #0
 80178f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f8:	f000 f9c4 	bl	8017c84 <_lseek_r>
 80178fc:	89a3      	ldrh	r3, [r4, #12]
 80178fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017906:	81a3      	strh	r3, [r4, #12]
 8017908:	4632      	mov	r2, r6
 801790a:	463b      	mov	r3, r7
 801790c:	4628      	mov	r0, r5
 801790e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017912:	f000 b877 	b.w	8017a04 <_write_r>

08017916 <__sseek>:
 8017916:	b510      	push	{r4, lr}
 8017918:	460c      	mov	r4, r1
 801791a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801791e:	f000 f9b1 	bl	8017c84 <_lseek_r>
 8017922:	1c43      	adds	r3, r0, #1
 8017924:	89a3      	ldrh	r3, [r4, #12]
 8017926:	bf15      	itete	ne
 8017928:	6560      	strne	r0, [r4, #84]	; 0x54
 801792a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801792e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017932:	81a3      	strheq	r3, [r4, #12]
 8017934:	bf18      	it	ne
 8017936:	81a3      	strhne	r3, [r4, #12]
 8017938:	bd10      	pop	{r4, pc}

0801793a <__sclose>:
 801793a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801793e:	f000 b8e1 	b.w	8017b04 <_close_r>
	...

08017944 <__swbuf_r>:
 8017944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017946:	460e      	mov	r6, r1
 8017948:	4614      	mov	r4, r2
 801794a:	4605      	mov	r5, r0
 801794c:	b118      	cbz	r0, 8017956 <__swbuf_r+0x12>
 801794e:	6983      	ldr	r3, [r0, #24]
 8017950:	b90b      	cbnz	r3, 8017956 <__swbuf_r+0x12>
 8017952:	f7ff fa2f 	bl	8016db4 <__sinit>
 8017956:	4b21      	ldr	r3, [pc, #132]	; (80179dc <__swbuf_r+0x98>)
 8017958:	429c      	cmp	r4, r3
 801795a:	d12a      	bne.n	80179b2 <__swbuf_r+0x6e>
 801795c:	686c      	ldr	r4, [r5, #4]
 801795e:	69a3      	ldr	r3, [r4, #24]
 8017960:	60a3      	str	r3, [r4, #8]
 8017962:	89a3      	ldrh	r3, [r4, #12]
 8017964:	071a      	lsls	r2, r3, #28
 8017966:	d52e      	bpl.n	80179c6 <__swbuf_r+0x82>
 8017968:	6923      	ldr	r3, [r4, #16]
 801796a:	b363      	cbz	r3, 80179c6 <__swbuf_r+0x82>
 801796c:	6923      	ldr	r3, [r4, #16]
 801796e:	6820      	ldr	r0, [r4, #0]
 8017970:	1ac0      	subs	r0, r0, r3
 8017972:	6963      	ldr	r3, [r4, #20]
 8017974:	b2f6      	uxtb	r6, r6
 8017976:	4283      	cmp	r3, r0
 8017978:	4637      	mov	r7, r6
 801797a:	dc04      	bgt.n	8017986 <__swbuf_r+0x42>
 801797c:	4621      	mov	r1, r4
 801797e:	4628      	mov	r0, r5
 8017980:	f000 f956 	bl	8017c30 <_fflush_r>
 8017984:	bb28      	cbnz	r0, 80179d2 <__swbuf_r+0x8e>
 8017986:	68a3      	ldr	r3, [r4, #8]
 8017988:	3b01      	subs	r3, #1
 801798a:	60a3      	str	r3, [r4, #8]
 801798c:	6823      	ldr	r3, [r4, #0]
 801798e:	1c5a      	adds	r2, r3, #1
 8017990:	6022      	str	r2, [r4, #0]
 8017992:	701e      	strb	r6, [r3, #0]
 8017994:	6963      	ldr	r3, [r4, #20]
 8017996:	3001      	adds	r0, #1
 8017998:	4283      	cmp	r3, r0
 801799a:	d004      	beq.n	80179a6 <__swbuf_r+0x62>
 801799c:	89a3      	ldrh	r3, [r4, #12]
 801799e:	07db      	lsls	r3, r3, #31
 80179a0:	d519      	bpl.n	80179d6 <__swbuf_r+0x92>
 80179a2:	2e0a      	cmp	r6, #10
 80179a4:	d117      	bne.n	80179d6 <__swbuf_r+0x92>
 80179a6:	4621      	mov	r1, r4
 80179a8:	4628      	mov	r0, r5
 80179aa:	f000 f941 	bl	8017c30 <_fflush_r>
 80179ae:	b190      	cbz	r0, 80179d6 <__swbuf_r+0x92>
 80179b0:	e00f      	b.n	80179d2 <__swbuf_r+0x8e>
 80179b2:	4b0b      	ldr	r3, [pc, #44]	; (80179e0 <__swbuf_r+0x9c>)
 80179b4:	429c      	cmp	r4, r3
 80179b6:	d101      	bne.n	80179bc <__swbuf_r+0x78>
 80179b8:	68ac      	ldr	r4, [r5, #8]
 80179ba:	e7d0      	b.n	801795e <__swbuf_r+0x1a>
 80179bc:	4b09      	ldr	r3, [pc, #36]	; (80179e4 <__swbuf_r+0xa0>)
 80179be:	429c      	cmp	r4, r3
 80179c0:	bf08      	it	eq
 80179c2:	68ec      	ldreq	r4, [r5, #12]
 80179c4:	e7cb      	b.n	801795e <__swbuf_r+0x1a>
 80179c6:	4621      	mov	r1, r4
 80179c8:	4628      	mov	r0, r5
 80179ca:	f000 f82d 	bl	8017a28 <__swsetup_r>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	d0cc      	beq.n	801796c <__swbuf_r+0x28>
 80179d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80179d6:	4638      	mov	r0, r7
 80179d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179da:	bf00      	nop
 80179dc:	08026328 	.word	0x08026328
 80179e0:	08026348 	.word	0x08026348
 80179e4:	08026308 	.word	0x08026308

080179e8 <__ascii_wctomb>:
 80179e8:	b149      	cbz	r1, 80179fe <__ascii_wctomb+0x16>
 80179ea:	2aff      	cmp	r2, #255	; 0xff
 80179ec:	bf85      	ittet	hi
 80179ee:	238a      	movhi	r3, #138	; 0x8a
 80179f0:	6003      	strhi	r3, [r0, #0]
 80179f2:	700a      	strbls	r2, [r1, #0]
 80179f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80179f8:	bf98      	it	ls
 80179fa:	2001      	movls	r0, #1
 80179fc:	4770      	bx	lr
 80179fe:	4608      	mov	r0, r1
 8017a00:	4770      	bx	lr
	...

08017a04 <_write_r>:
 8017a04:	b538      	push	{r3, r4, r5, lr}
 8017a06:	4c07      	ldr	r4, [pc, #28]	; (8017a24 <_write_r+0x20>)
 8017a08:	4605      	mov	r5, r0
 8017a0a:	4608      	mov	r0, r1
 8017a0c:	4611      	mov	r1, r2
 8017a0e:	2200      	movs	r2, #0
 8017a10:	6022      	str	r2, [r4, #0]
 8017a12:	461a      	mov	r2, r3
 8017a14:	f7e9 f9a7 	bl	8000d66 <_write>
 8017a18:	1c43      	adds	r3, r0, #1
 8017a1a:	d102      	bne.n	8017a22 <_write_r+0x1e>
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	b103      	cbz	r3, 8017a22 <_write_r+0x1e>
 8017a20:	602b      	str	r3, [r5, #0]
 8017a22:	bd38      	pop	{r3, r4, r5, pc}
 8017a24:	2000fb18 	.word	0x2000fb18

08017a28 <__swsetup_r>:
 8017a28:	4b32      	ldr	r3, [pc, #200]	; (8017af4 <__swsetup_r+0xcc>)
 8017a2a:	b570      	push	{r4, r5, r6, lr}
 8017a2c:	681d      	ldr	r5, [r3, #0]
 8017a2e:	4606      	mov	r6, r0
 8017a30:	460c      	mov	r4, r1
 8017a32:	b125      	cbz	r5, 8017a3e <__swsetup_r+0x16>
 8017a34:	69ab      	ldr	r3, [r5, #24]
 8017a36:	b913      	cbnz	r3, 8017a3e <__swsetup_r+0x16>
 8017a38:	4628      	mov	r0, r5
 8017a3a:	f7ff f9bb 	bl	8016db4 <__sinit>
 8017a3e:	4b2e      	ldr	r3, [pc, #184]	; (8017af8 <__swsetup_r+0xd0>)
 8017a40:	429c      	cmp	r4, r3
 8017a42:	d10f      	bne.n	8017a64 <__swsetup_r+0x3c>
 8017a44:	686c      	ldr	r4, [r5, #4]
 8017a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a4a:	b29a      	uxth	r2, r3
 8017a4c:	0715      	lsls	r5, r2, #28
 8017a4e:	d42c      	bmi.n	8017aaa <__swsetup_r+0x82>
 8017a50:	06d0      	lsls	r0, r2, #27
 8017a52:	d411      	bmi.n	8017a78 <__swsetup_r+0x50>
 8017a54:	2209      	movs	r2, #9
 8017a56:	6032      	str	r2, [r6, #0]
 8017a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a5c:	81a3      	strh	r3, [r4, #12]
 8017a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a62:	e03e      	b.n	8017ae2 <__swsetup_r+0xba>
 8017a64:	4b25      	ldr	r3, [pc, #148]	; (8017afc <__swsetup_r+0xd4>)
 8017a66:	429c      	cmp	r4, r3
 8017a68:	d101      	bne.n	8017a6e <__swsetup_r+0x46>
 8017a6a:	68ac      	ldr	r4, [r5, #8]
 8017a6c:	e7eb      	b.n	8017a46 <__swsetup_r+0x1e>
 8017a6e:	4b24      	ldr	r3, [pc, #144]	; (8017b00 <__swsetup_r+0xd8>)
 8017a70:	429c      	cmp	r4, r3
 8017a72:	bf08      	it	eq
 8017a74:	68ec      	ldreq	r4, [r5, #12]
 8017a76:	e7e6      	b.n	8017a46 <__swsetup_r+0x1e>
 8017a78:	0751      	lsls	r1, r2, #29
 8017a7a:	d512      	bpl.n	8017aa2 <__swsetup_r+0x7a>
 8017a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a7e:	b141      	cbz	r1, 8017a92 <__swsetup_r+0x6a>
 8017a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a84:	4299      	cmp	r1, r3
 8017a86:	d002      	beq.n	8017a8e <__swsetup_r+0x66>
 8017a88:	4630      	mov	r0, r6
 8017a8a:	f7ff fa45 	bl	8016f18 <_free_r>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	6363      	str	r3, [r4, #52]	; 0x34
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a98:	81a3      	strh	r3, [r4, #12]
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	6063      	str	r3, [r4, #4]
 8017a9e:	6923      	ldr	r3, [r4, #16]
 8017aa0:	6023      	str	r3, [r4, #0]
 8017aa2:	89a3      	ldrh	r3, [r4, #12]
 8017aa4:	f043 0308 	orr.w	r3, r3, #8
 8017aa8:	81a3      	strh	r3, [r4, #12]
 8017aaa:	6923      	ldr	r3, [r4, #16]
 8017aac:	b94b      	cbnz	r3, 8017ac2 <__swsetup_r+0x9a>
 8017aae:	89a3      	ldrh	r3, [r4, #12]
 8017ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ab8:	d003      	beq.n	8017ac2 <__swsetup_r+0x9a>
 8017aba:	4621      	mov	r1, r4
 8017abc:	4630      	mov	r0, r6
 8017abe:	f000 f917 	bl	8017cf0 <__smakebuf_r>
 8017ac2:	89a2      	ldrh	r2, [r4, #12]
 8017ac4:	f012 0301 	ands.w	r3, r2, #1
 8017ac8:	d00c      	beq.n	8017ae4 <__swsetup_r+0xbc>
 8017aca:	2300      	movs	r3, #0
 8017acc:	60a3      	str	r3, [r4, #8]
 8017ace:	6963      	ldr	r3, [r4, #20]
 8017ad0:	425b      	negs	r3, r3
 8017ad2:	61a3      	str	r3, [r4, #24]
 8017ad4:	6923      	ldr	r3, [r4, #16]
 8017ad6:	b953      	cbnz	r3, 8017aee <__swsetup_r+0xc6>
 8017ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017adc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017ae0:	d1ba      	bne.n	8017a58 <__swsetup_r+0x30>
 8017ae2:	bd70      	pop	{r4, r5, r6, pc}
 8017ae4:	0792      	lsls	r2, r2, #30
 8017ae6:	bf58      	it	pl
 8017ae8:	6963      	ldrpl	r3, [r4, #20]
 8017aea:	60a3      	str	r3, [r4, #8]
 8017aec:	e7f2      	b.n	8017ad4 <__swsetup_r+0xac>
 8017aee:	2000      	movs	r0, #0
 8017af0:	e7f7      	b.n	8017ae2 <__swsetup_r+0xba>
 8017af2:	bf00      	nop
 8017af4:	20000020 	.word	0x20000020
 8017af8:	08026328 	.word	0x08026328
 8017afc:	08026348 	.word	0x08026348
 8017b00:	08026308 	.word	0x08026308

08017b04 <_close_r>:
 8017b04:	b538      	push	{r3, r4, r5, lr}
 8017b06:	4c06      	ldr	r4, [pc, #24]	; (8017b20 <_close_r+0x1c>)
 8017b08:	2300      	movs	r3, #0
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	4608      	mov	r0, r1
 8017b0e:	6023      	str	r3, [r4, #0]
 8017b10:	f7e9 f945 	bl	8000d9e <_close>
 8017b14:	1c43      	adds	r3, r0, #1
 8017b16:	d102      	bne.n	8017b1e <_close_r+0x1a>
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	b103      	cbz	r3, 8017b1e <_close_r+0x1a>
 8017b1c:	602b      	str	r3, [r5, #0]
 8017b1e:	bd38      	pop	{r3, r4, r5, pc}
 8017b20:	2000fb18 	.word	0x2000fb18

08017b24 <__sflush_r>:
 8017b24:	898a      	ldrh	r2, [r1, #12]
 8017b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	0710      	lsls	r0, r2, #28
 8017b2e:	460c      	mov	r4, r1
 8017b30:	d458      	bmi.n	8017be4 <__sflush_r+0xc0>
 8017b32:	684b      	ldr	r3, [r1, #4]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	dc05      	bgt.n	8017b44 <__sflush_r+0x20>
 8017b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	dc02      	bgt.n	8017b44 <__sflush_r+0x20>
 8017b3e:	2000      	movs	r0, #0
 8017b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b46:	2e00      	cmp	r6, #0
 8017b48:	d0f9      	beq.n	8017b3e <__sflush_r+0x1a>
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b50:	682f      	ldr	r7, [r5, #0]
 8017b52:	6a21      	ldr	r1, [r4, #32]
 8017b54:	602b      	str	r3, [r5, #0]
 8017b56:	d032      	beq.n	8017bbe <__sflush_r+0x9a>
 8017b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b5a:	89a3      	ldrh	r3, [r4, #12]
 8017b5c:	075a      	lsls	r2, r3, #29
 8017b5e:	d505      	bpl.n	8017b6c <__sflush_r+0x48>
 8017b60:	6863      	ldr	r3, [r4, #4]
 8017b62:	1ac0      	subs	r0, r0, r3
 8017b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b66:	b10b      	cbz	r3, 8017b6c <__sflush_r+0x48>
 8017b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b6a:	1ac0      	subs	r0, r0, r3
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	4602      	mov	r2, r0
 8017b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b72:	6a21      	ldr	r1, [r4, #32]
 8017b74:	4628      	mov	r0, r5
 8017b76:	47b0      	blx	r6
 8017b78:	1c43      	adds	r3, r0, #1
 8017b7a:	89a3      	ldrh	r3, [r4, #12]
 8017b7c:	d106      	bne.n	8017b8c <__sflush_r+0x68>
 8017b7e:	6829      	ldr	r1, [r5, #0]
 8017b80:	291d      	cmp	r1, #29
 8017b82:	d848      	bhi.n	8017c16 <__sflush_r+0xf2>
 8017b84:	4a29      	ldr	r2, [pc, #164]	; (8017c2c <__sflush_r+0x108>)
 8017b86:	40ca      	lsrs	r2, r1
 8017b88:	07d6      	lsls	r6, r2, #31
 8017b8a:	d544      	bpl.n	8017c16 <__sflush_r+0xf2>
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	6062      	str	r2, [r4, #4]
 8017b90:	04d9      	lsls	r1, r3, #19
 8017b92:	6922      	ldr	r2, [r4, #16]
 8017b94:	6022      	str	r2, [r4, #0]
 8017b96:	d504      	bpl.n	8017ba2 <__sflush_r+0x7e>
 8017b98:	1c42      	adds	r2, r0, #1
 8017b9a:	d101      	bne.n	8017ba0 <__sflush_r+0x7c>
 8017b9c:	682b      	ldr	r3, [r5, #0]
 8017b9e:	b903      	cbnz	r3, 8017ba2 <__sflush_r+0x7e>
 8017ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8017ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ba4:	602f      	str	r7, [r5, #0]
 8017ba6:	2900      	cmp	r1, #0
 8017ba8:	d0c9      	beq.n	8017b3e <__sflush_r+0x1a>
 8017baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bae:	4299      	cmp	r1, r3
 8017bb0:	d002      	beq.n	8017bb8 <__sflush_r+0x94>
 8017bb2:	4628      	mov	r0, r5
 8017bb4:	f7ff f9b0 	bl	8016f18 <_free_r>
 8017bb8:	2000      	movs	r0, #0
 8017bba:	6360      	str	r0, [r4, #52]	; 0x34
 8017bbc:	e7c0      	b.n	8017b40 <__sflush_r+0x1c>
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	4628      	mov	r0, r5
 8017bc2:	47b0      	blx	r6
 8017bc4:	1c41      	adds	r1, r0, #1
 8017bc6:	d1c8      	bne.n	8017b5a <__sflush_r+0x36>
 8017bc8:	682b      	ldr	r3, [r5, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d0c5      	beq.n	8017b5a <__sflush_r+0x36>
 8017bce:	2b1d      	cmp	r3, #29
 8017bd0:	d001      	beq.n	8017bd6 <__sflush_r+0xb2>
 8017bd2:	2b16      	cmp	r3, #22
 8017bd4:	d101      	bne.n	8017bda <__sflush_r+0xb6>
 8017bd6:	602f      	str	r7, [r5, #0]
 8017bd8:	e7b1      	b.n	8017b3e <__sflush_r+0x1a>
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017be0:	81a3      	strh	r3, [r4, #12]
 8017be2:	e7ad      	b.n	8017b40 <__sflush_r+0x1c>
 8017be4:	690f      	ldr	r7, [r1, #16]
 8017be6:	2f00      	cmp	r7, #0
 8017be8:	d0a9      	beq.n	8017b3e <__sflush_r+0x1a>
 8017bea:	0793      	lsls	r3, r2, #30
 8017bec:	680e      	ldr	r6, [r1, #0]
 8017bee:	bf08      	it	eq
 8017bf0:	694b      	ldreq	r3, [r1, #20]
 8017bf2:	600f      	str	r7, [r1, #0]
 8017bf4:	bf18      	it	ne
 8017bf6:	2300      	movne	r3, #0
 8017bf8:	eba6 0807 	sub.w	r8, r6, r7
 8017bfc:	608b      	str	r3, [r1, #8]
 8017bfe:	f1b8 0f00 	cmp.w	r8, #0
 8017c02:	dd9c      	ble.n	8017b3e <__sflush_r+0x1a>
 8017c04:	4643      	mov	r3, r8
 8017c06:	463a      	mov	r2, r7
 8017c08:	6a21      	ldr	r1, [r4, #32]
 8017c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c0c:	4628      	mov	r0, r5
 8017c0e:	47b0      	blx	r6
 8017c10:	2800      	cmp	r0, #0
 8017c12:	dc06      	bgt.n	8017c22 <__sflush_r+0xfe>
 8017c14:	89a3      	ldrh	r3, [r4, #12]
 8017c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c1a:	81a3      	strh	r3, [r4, #12]
 8017c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c20:	e78e      	b.n	8017b40 <__sflush_r+0x1c>
 8017c22:	4407      	add	r7, r0
 8017c24:	eba8 0800 	sub.w	r8, r8, r0
 8017c28:	e7e9      	b.n	8017bfe <__sflush_r+0xda>
 8017c2a:	bf00      	nop
 8017c2c:	20400001 	.word	0x20400001

08017c30 <_fflush_r>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	690b      	ldr	r3, [r1, #16]
 8017c34:	4605      	mov	r5, r0
 8017c36:	460c      	mov	r4, r1
 8017c38:	b1db      	cbz	r3, 8017c72 <_fflush_r+0x42>
 8017c3a:	b118      	cbz	r0, 8017c44 <_fflush_r+0x14>
 8017c3c:	6983      	ldr	r3, [r0, #24]
 8017c3e:	b90b      	cbnz	r3, 8017c44 <_fflush_r+0x14>
 8017c40:	f7ff f8b8 	bl	8016db4 <__sinit>
 8017c44:	4b0c      	ldr	r3, [pc, #48]	; (8017c78 <_fflush_r+0x48>)
 8017c46:	429c      	cmp	r4, r3
 8017c48:	d109      	bne.n	8017c5e <_fflush_r+0x2e>
 8017c4a:	686c      	ldr	r4, [r5, #4]
 8017c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c50:	b17b      	cbz	r3, 8017c72 <_fflush_r+0x42>
 8017c52:	4621      	mov	r1, r4
 8017c54:	4628      	mov	r0, r5
 8017c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c5a:	f7ff bf63 	b.w	8017b24 <__sflush_r>
 8017c5e:	4b07      	ldr	r3, [pc, #28]	; (8017c7c <_fflush_r+0x4c>)
 8017c60:	429c      	cmp	r4, r3
 8017c62:	d101      	bne.n	8017c68 <_fflush_r+0x38>
 8017c64:	68ac      	ldr	r4, [r5, #8]
 8017c66:	e7f1      	b.n	8017c4c <_fflush_r+0x1c>
 8017c68:	4b05      	ldr	r3, [pc, #20]	; (8017c80 <_fflush_r+0x50>)
 8017c6a:	429c      	cmp	r4, r3
 8017c6c:	bf08      	it	eq
 8017c6e:	68ec      	ldreq	r4, [r5, #12]
 8017c70:	e7ec      	b.n	8017c4c <_fflush_r+0x1c>
 8017c72:	2000      	movs	r0, #0
 8017c74:	bd38      	pop	{r3, r4, r5, pc}
 8017c76:	bf00      	nop
 8017c78:	08026328 	.word	0x08026328
 8017c7c:	08026348 	.word	0x08026348
 8017c80:	08026308 	.word	0x08026308

08017c84 <_lseek_r>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	4c07      	ldr	r4, [pc, #28]	; (8017ca4 <_lseek_r+0x20>)
 8017c88:	4605      	mov	r5, r0
 8017c8a:	4608      	mov	r0, r1
 8017c8c:	4611      	mov	r1, r2
 8017c8e:	2200      	movs	r2, #0
 8017c90:	6022      	str	r2, [r4, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	f7e9 f8aa 	bl	8000dec <_lseek>
 8017c98:	1c43      	adds	r3, r0, #1
 8017c9a:	d102      	bne.n	8017ca2 <_lseek_r+0x1e>
 8017c9c:	6823      	ldr	r3, [r4, #0]
 8017c9e:	b103      	cbz	r3, 8017ca2 <_lseek_r+0x1e>
 8017ca0:	602b      	str	r3, [r5, #0]
 8017ca2:	bd38      	pop	{r3, r4, r5, pc}
 8017ca4:	2000fb18 	.word	0x2000fb18

08017ca8 <__swhatbuf_r>:
 8017ca8:	b570      	push	{r4, r5, r6, lr}
 8017caa:	460e      	mov	r6, r1
 8017cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb0:	2900      	cmp	r1, #0
 8017cb2:	b096      	sub	sp, #88	; 0x58
 8017cb4:	4614      	mov	r4, r2
 8017cb6:	461d      	mov	r5, r3
 8017cb8:	da07      	bge.n	8017cca <__swhatbuf_r+0x22>
 8017cba:	2300      	movs	r3, #0
 8017cbc:	602b      	str	r3, [r5, #0]
 8017cbe:	89b3      	ldrh	r3, [r6, #12]
 8017cc0:	061a      	lsls	r2, r3, #24
 8017cc2:	d410      	bmi.n	8017ce6 <__swhatbuf_r+0x3e>
 8017cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cc8:	e00e      	b.n	8017ce8 <__swhatbuf_r+0x40>
 8017cca:	466a      	mov	r2, sp
 8017ccc:	f000 f8a4 	bl	8017e18 <_fstat_r>
 8017cd0:	2800      	cmp	r0, #0
 8017cd2:	dbf2      	blt.n	8017cba <__swhatbuf_r+0x12>
 8017cd4:	9a01      	ldr	r2, [sp, #4]
 8017cd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017cda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017cde:	425a      	negs	r2, r3
 8017ce0:	415a      	adcs	r2, r3
 8017ce2:	602a      	str	r2, [r5, #0]
 8017ce4:	e7ee      	b.n	8017cc4 <__swhatbuf_r+0x1c>
 8017ce6:	2340      	movs	r3, #64	; 0x40
 8017ce8:	2000      	movs	r0, #0
 8017cea:	6023      	str	r3, [r4, #0]
 8017cec:	b016      	add	sp, #88	; 0x58
 8017cee:	bd70      	pop	{r4, r5, r6, pc}

08017cf0 <__smakebuf_r>:
 8017cf0:	898b      	ldrh	r3, [r1, #12]
 8017cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017cf4:	079d      	lsls	r5, r3, #30
 8017cf6:	4606      	mov	r6, r0
 8017cf8:	460c      	mov	r4, r1
 8017cfa:	d507      	bpl.n	8017d0c <__smakebuf_r+0x1c>
 8017cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d00:	6023      	str	r3, [r4, #0]
 8017d02:	6123      	str	r3, [r4, #16]
 8017d04:	2301      	movs	r3, #1
 8017d06:	6163      	str	r3, [r4, #20]
 8017d08:	b002      	add	sp, #8
 8017d0a:	bd70      	pop	{r4, r5, r6, pc}
 8017d0c:	ab01      	add	r3, sp, #4
 8017d0e:	466a      	mov	r2, sp
 8017d10:	f7ff ffca 	bl	8017ca8 <__swhatbuf_r>
 8017d14:	9900      	ldr	r1, [sp, #0]
 8017d16:	4605      	mov	r5, r0
 8017d18:	4630      	mov	r0, r6
 8017d1a:	f7ff f94b 	bl	8016fb4 <_malloc_r>
 8017d1e:	b948      	cbnz	r0, 8017d34 <__smakebuf_r+0x44>
 8017d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d24:	059a      	lsls	r2, r3, #22
 8017d26:	d4ef      	bmi.n	8017d08 <__smakebuf_r+0x18>
 8017d28:	f023 0303 	bic.w	r3, r3, #3
 8017d2c:	f043 0302 	orr.w	r3, r3, #2
 8017d30:	81a3      	strh	r3, [r4, #12]
 8017d32:	e7e3      	b.n	8017cfc <__smakebuf_r+0xc>
 8017d34:	4b0d      	ldr	r3, [pc, #52]	; (8017d6c <__smakebuf_r+0x7c>)
 8017d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	6020      	str	r0, [r4, #0]
 8017d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d40:	81a3      	strh	r3, [r4, #12]
 8017d42:	9b00      	ldr	r3, [sp, #0]
 8017d44:	6163      	str	r3, [r4, #20]
 8017d46:	9b01      	ldr	r3, [sp, #4]
 8017d48:	6120      	str	r0, [r4, #16]
 8017d4a:	b15b      	cbz	r3, 8017d64 <__smakebuf_r+0x74>
 8017d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d50:	4630      	mov	r0, r6
 8017d52:	f000 f873 	bl	8017e3c <_isatty_r>
 8017d56:	b128      	cbz	r0, 8017d64 <__smakebuf_r+0x74>
 8017d58:	89a3      	ldrh	r3, [r4, #12]
 8017d5a:	f023 0303 	bic.w	r3, r3, #3
 8017d5e:	f043 0301 	orr.w	r3, r3, #1
 8017d62:	81a3      	strh	r3, [r4, #12]
 8017d64:	89a3      	ldrh	r3, [r4, #12]
 8017d66:	431d      	orrs	r5, r3
 8017d68:	81a5      	strh	r5, [r4, #12]
 8017d6a:	e7cd      	b.n	8017d08 <__smakebuf_r+0x18>
 8017d6c:	08016d7d 	.word	0x08016d7d

08017d70 <memmove>:
 8017d70:	4288      	cmp	r0, r1
 8017d72:	b510      	push	{r4, lr}
 8017d74:	eb01 0302 	add.w	r3, r1, r2
 8017d78:	d807      	bhi.n	8017d8a <memmove+0x1a>
 8017d7a:	1e42      	subs	r2, r0, #1
 8017d7c:	4299      	cmp	r1, r3
 8017d7e:	d00a      	beq.n	8017d96 <memmove+0x26>
 8017d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017d88:	e7f8      	b.n	8017d7c <memmove+0xc>
 8017d8a:	4283      	cmp	r3, r0
 8017d8c:	d9f5      	bls.n	8017d7a <memmove+0xa>
 8017d8e:	1881      	adds	r1, r0, r2
 8017d90:	1ad2      	subs	r2, r2, r3
 8017d92:	42d3      	cmn	r3, r2
 8017d94:	d100      	bne.n	8017d98 <memmove+0x28>
 8017d96:	bd10      	pop	{r4, pc}
 8017d98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017da0:	e7f7      	b.n	8017d92 <memmove+0x22>

08017da2 <__malloc_lock>:
 8017da2:	4770      	bx	lr

08017da4 <__malloc_unlock>:
 8017da4:	4770      	bx	lr

08017da6 <_realloc_r>:
 8017da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da8:	4607      	mov	r7, r0
 8017daa:	4614      	mov	r4, r2
 8017dac:	460e      	mov	r6, r1
 8017dae:	b921      	cbnz	r1, 8017dba <_realloc_r+0x14>
 8017db0:	4611      	mov	r1, r2
 8017db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017db6:	f7ff b8fd 	b.w	8016fb4 <_malloc_r>
 8017dba:	b922      	cbnz	r2, 8017dc6 <_realloc_r+0x20>
 8017dbc:	f7ff f8ac 	bl	8016f18 <_free_r>
 8017dc0:	4625      	mov	r5, r4
 8017dc2:	4628      	mov	r0, r5
 8017dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dc6:	f000 f849 	bl	8017e5c <_malloc_usable_size_r>
 8017dca:	42a0      	cmp	r0, r4
 8017dcc:	d20f      	bcs.n	8017dee <_realloc_r+0x48>
 8017dce:	4621      	mov	r1, r4
 8017dd0:	4638      	mov	r0, r7
 8017dd2:	f7ff f8ef 	bl	8016fb4 <_malloc_r>
 8017dd6:	4605      	mov	r5, r0
 8017dd8:	2800      	cmp	r0, #0
 8017dda:	d0f2      	beq.n	8017dc2 <_realloc_r+0x1c>
 8017ddc:	4631      	mov	r1, r6
 8017dde:	4622      	mov	r2, r4
 8017de0:	f7fe febf 	bl	8016b62 <memcpy>
 8017de4:	4631      	mov	r1, r6
 8017de6:	4638      	mov	r0, r7
 8017de8:	f7ff f896 	bl	8016f18 <_free_r>
 8017dec:	e7e9      	b.n	8017dc2 <_realloc_r+0x1c>
 8017dee:	4635      	mov	r5, r6
 8017df0:	e7e7      	b.n	8017dc2 <_realloc_r+0x1c>
	...

08017df4 <_read_r>:
 8017df4:	b538      	push	{r3, r4, r5, lr}
 8017df6:	4c07      	ldr	r4, [pc, #28]	; (8017e14 <_read_r+0x20>)
 8017df8:	4605      	mov	r5, r0
 8017dfa:	4608      	mov	r0, r1
 8017dfc:	4611      	mov	r1, r2
 8017dfe:	2200      	movs	r2, #0
 8017e00:	6022      	str	r2, [r4, #0]
 8017e02:	461a      	mov	r2, r3
 8017e04:	f7e8 ff92 	bl	8000d2c <_read>
 8017e08:	1c43      	adds	r3, r0, #1
 8017e0a:	d102      	bne.n	8017e12 <_read_r+0x1e>
 8017e0c:	6823      	ldr	r3, [r4, #0]
 8017e0e:	b103      	cbz	r3, 8017e12 <_read_r+0x1e>
 8017e10:	602b      	str	r3, [r5, #0]
 8017e12:	bd38      	pop	{r3, r4, r5, pc}
 8017e14:	2000fb18 	.word	0x2000fb18

08017e18 <_fstat_r>:
 8017e18:	b538      	push	{r3, r4, r5, lr}
 8017e1a:	4c07      	ldr	r4, [pc, #28]	; (8017e38 <_fstat_r+0x20>)
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	4605      	mov	r5, r0
 8017e20:	4608      	mov	r0, r1
 8017e22:	4611      	mov	r1, r2
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	f7e8 ffc6 	bl	8000db6 <_fstat>
 8017e2a:	1c43      	adds	r3, r0, #1
 8017e2c:	d102      	bne.n	8017e34 <_fstat_r+0x1c>
 8017e2e:	6823      	ldr	r3, [r4, #0]
 8017e30:	b103      	cbz	r3, 8017e34 <_fstat_r+0x1c>
 8017e32:	602b      	str	r3, [r5, #0]
 8017e34:	bd38      	pop	{r3, r4, r5, pc}
 8017e36:	bf00      	nop
 8017e38:	2000fb18 	.word	0x2000fb18

08017e3c <_isatty_r>:
 8017e3c:	b538      	push	{r3, r4, r5, lr}
 8017e3e:	4c06      	ldr	r4, [pc, #24]	; (8017e58 <_isatty_r+0x1c>)
 8017e40:	2300      	movs	r3, #0
 8017e42:	4605      	mov	r5, r0
 8017e44:	4608      	mov	r0, r1
 8017e46:	6023      	str	r3, [r4, #0]
 8017e48:	f7e8 ffc5 	bl	8000dd6 <_isatty>
 8017e4c:	1c43      	adds	r3, r0, #1
 8017e4e:	d102      	bne.n	8017e56 <_isatty_r+0x1a>
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	b103      	cbz	r3, 8017e56 <_isatty_r+0x1a>
 8017e54:	602b      	str	r3, [r5, #0]
 8017e56:	bd38      	pop	{r3, r4, r5, pc}
 8017e58:	2000fb18 	.word	0x2000fb18

08017e5c <_malloc_usable_size_r>:
 8017e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e60:	1f18      	subs	r0, r3, #4
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	bfbc      	itt	lt
 8017e66:	580b      	ldrlt	r3, [r1, r0]
 8017e68:	18c0      	addlt	r0, r0, r3
 8017e6a:	4770      	bx	lr

08017e6c <_init>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	bf00      	nop
 8017e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e72:	bc08      	pop	{r3}
 8017e74:	469e      	mov	lr, r3
 8017e76:	4770      	bx	lr

08017e78 <_fini>:
 8017e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e7a:	bf00      	nop
 8017e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e7e:	bc08      	pop	{r3}
 8017e80:	469e      	mov	lr, r3
 8017e82:	4770      	bx	lr
