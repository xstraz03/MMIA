
CV10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e5bc  08017bb8  08017bb8  00027bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026174  08026174  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08026174  08026174  00036174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802617c  0802617c  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802617c  0802617c  0003617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026180  08026180  00036180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08026184  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f91c  200001f0  08026374  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb0c  08026374  0004fb0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045861  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000082f4  00000000  00000000  00085a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023e0  00000000  00000000  0008dd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002168  00000000  00000000  00090158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036444  00000000  00000000  000922c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002e873  00000000  00000000  000c8704  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe2b9  00000000  00000000  000f6f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f5230  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c08  00000000  00000000  001f52ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ba0 	.word	0x08017ba0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08017ba0 	.word	0x08017ba0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000020c 	.word	0x2000020c
 80005f0:	20000260 	.word	0x20000260

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fe33 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f827 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8e7 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f88d 	bl	8000724 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060a:	f000 f8b5 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800060e:	f003 ff57 	bl	80044c0 <MX_LWIP_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0x54>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fb17 	bl	8004c5c <osThreadCreate>
 800062e:	4602      	mov	r2, r0
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0x58>)
 8000632:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  /* Initialize tcp echo server */
  tcpecho_init();
 8000634:	f000 fbfc 	bl	8000e30 <tcpecho_init>

  /* Initialize HTTP server */
  httpd_init();
 8000638:	f00a fa0c 	bl	800aa54 <httpd_init>

  /* Initialize telnet server */
  telnet_init();
 800063c:	f000 fdd4 	bl	80011e8 <telnet_init>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f004 faf5 	bl	8004c2e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x50>
 8000646:	bf00      	nop
 8000648:	08017bc4 	.word	0x08017bc4
 800064c:	20008d90 	.word	0x20008d90

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f016 f924 	bl	80168ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f99b 	bl	8002a10 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f940 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fbf4 	bl	8002ef0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f929 	bl	8000964 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART3_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x4c>)
 800075c:	f003 f82a 	bl	80037b4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f8fd 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20008d94 	.word	0x20008d94
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2204      	movs	r2, #4
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f002 f80b 	bl	80027d6 <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8cd 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20008dd4 	.word	0x20008dd4

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_GPIO_Init+0x148>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a4a      	ldr	r2, [pc, #296]	; (800091c <MX_GPIO_Init+0x148>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b48      	ldr	r3, [pc, #288]	; (800091c <MX_GPIO_Init+0x148>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <MX_GPIO_Init+0x148>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a43      	ldr	r2, [pc, #268]	; (800091c <MX_GPIO_Init+0x148>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b41      	ldr	r3, [pc, #260]	; (800091c <MX_GPIO_Init+0x148>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_GPIO_Init+0x148>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a3c      	ldr	r2, [pc, #240]	; (800091c <MX_GPIO_Init+0x148>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b3a      	ldr	r3, [pc, #232]	; (800091c <MX_GPIO_Init+0x148>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <MX_GPIO_Init+0x148>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a35      	ldr	r2, [pc, #212]	; (800091c <MX_GPIO_Init+0x148>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <MX_GPIO_Init+0x148>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <MX_GPIO_Init+0x148>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2e      	ldr	r2, [pc, #184]	; (800091c <MX_GPIO_Init+0x148>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <MX_GPIO_Init+0x148>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <MX_GPIO_Init+0x148>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a27      	ldr	r2, [pc, #156]	; (800091c <MX_GPIO_Init+0x148>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b25      	ldr	r3, [pc, #148]	; (800091c <MX_GPIO_Init+0x148>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f244 0181 	movw	r1, #16513	; 0x4081
 8000898:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x14c>)
 800089a:	f001 ff83 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	4820      	ldr	r0, [pc, #128]	; (8000924 <MX_GPIO_Init+0x150>)
 80008a4:	f001 ff7e 	bl	80027a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_GPIO_Init+0x154>)
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	481b      	ldr	r0, [pc, #108]	; (800092c <MX_GPIO_Init+0x158>)
 80008be:	f001 fdaf 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4811      	ldr	r0, [pc, #68]	; (8000920 <MX_GPIO_Init+0x14c>)
 80008dc:	f001 fda0 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <MX_GPIO_Init+0x150>)
 80008f8:	f001 fd92 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_GPIO_Init+0x150>)
 8000910:	f001 fd86 	bl	8002420 <HAL_GPIO_Init>

}
 8000914:	bf00      	nop
 8000916:	3730      	adds	r7, #48	; 0x30
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	10110000 	.word	0x10110000
 800092c:	40020800 	.word	0x40020800

08000930 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f004 f9db 	bl	8004cf4 <osDelay>
 800093e:	e7fb      	b.n	8000938 <StartDefaultTask+0x8>

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fca9 	bl	80012a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x54>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_MspInit+0x54>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x54>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x54>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_MspInit+0x54>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x54>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	210f      	movs	r1, #15
 80009b6:	f06f 0001 	mvn.w	r0, #1
 80009ba:	f000 fd6f 	bl	800149c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12c      	bne.n	8000a48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a44:	f001 fcec 	bl	8002420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004800 	.word	0x40004800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020c00 	.word	0x40020c00

08000a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a7c:	d13f      	bne.n	8000afe <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aac:	230a      	movs	r3, #10
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ab8:	f001 fcb2 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <HAL_PCD_MspInit+0xb0>)
 8000ad2:	f001 fca5 	bl	8002420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_PCD_MspInit+0xac>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	; 0x30
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2019      	movs	r0, #25
 8000b26:	f000 fcb9 	bl	800149c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fcd2 	bl	80014d4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_InitTick+0xa4>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fbbc 	bl	80032d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b5c:	f002 fba6 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8000b60:	4603      	mov	r3, r0
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0xac>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_InitTick+0xb0>)
 8000b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_InitTick+0xac>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0xac>)
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_InitTick+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_InitTick+0xac>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <HAL_InitTick+0xac>)
 8000b96:	f002 fbcf 	bl	8003338 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <HAL_InitTick+0xac>)
 8000ba2:	f002 fbfe 	bl	80033a2 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	431bde83 	.word	0x431bde83
 8000bbc:	200091dc 	.word	0x200091dc
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bfe:	f002 fbf4 	bl	80033ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200091dc 	.word	0x200091dc

08000c0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
	}

return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
	}
	return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_isatty>:

int _isatty(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x50>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x16>
		heap_end = &end;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <_sbrk+0x50>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <_sbrk+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <_sbrk+0x50>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <_sbrk+0x50>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	466a      	mov	r2, sp
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d905      	bls.n	8000d1e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <_sbrk+0x58>)
 8000d14:	220c      	movs	r2, #12
 8000d16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1c:	e006      	b.n	8000d2c <_sbrk+0x44>
	}

	heap_end += incr;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <_sbrk+0x50>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <_sbrk+0x50>)
 8000d28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	20000460 	.word	0x20000460
 8000d3c:	2000fb10 	.word	0x2000fb10
 8000d40:	2000fb04 	.word	0x2000fb04

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SystemInit+0x28>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SystemInit+0x28>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SystemInit+0x28>)
 8000d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2010      	movs	r0, #16
 8000d7e:	f006 feeb 	bl	8007b58 <netconn_new_with_proto_and_callback>
 8000d82:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d04e      	beq.n	8000e28 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	69f8      	ldr	r0, [r7, #28]
 8000d90:	f006 ff82 	bl	8007c98 <netconn_bind>
 8000d94:	4603      	mov	r3, r0
 8000d96:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d13f      	bne.n	8000e20 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000da0:	21ff      	movs	r1, #255	; 0xff
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f006 ffb0 	bl	8007d08 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	69f8      	ldr	r0, [r7, #28]
 8000db0:	f006 ffd6 	bl	8007d60 <netconn_accept>
 8000db4:	4603      	mov	r3, r0
 8000db6:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000db8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1f3      	bne.n	8000da8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dc0:	e01b      	b.n	8000dfa <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	f107 020a 	add.w	r2, r7, #10
 8000dc8:	f107 010c 	add.w	r1, r7, #12
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f008 fe91 	bl	8009af4 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	897b      	ldrh	r3, [r7, #10]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2301      	movs	r3, #1
 8000de0:	f007 f984 	bl	80080ec <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f008 fece 	bl	8009b88 <netbuf_next>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dae7      	bge.n	8000dc2 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f008 fe5d 	bl	8009ab4 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f007 f8fa 	bl	8007ffc <netconn_recv>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0d9      	beq.n	8000dc2 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f007 fa13 	bl	800823c <netconn_close>
          netconn_delete(newconn);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 ff17 	bl	8007c4c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e1e:	e7c3      	b.n	8000da8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 ff12 	bl	8007c4c <netconn_delete>
    }
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e36:	2304      	movs	r3, #4
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4903      	ldr	r1, [pc, #12]	; (8000e50 <tcpecho_init+0x20>)
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <tcpecho_init+0x24>)
 8000e44:	f015 fcb0 	bl	80167a8 <sys_thread_new>
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	08000d71 	.word	0x08000d71
 8000e54:	08017be0 	.word	0x08017be0

08000e58 <telnet_process_command>:




static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	char *token, *saveptr;// saveptr interni promena kvuli strtok_r
	static char s[CHAR_BUFFER];


	token = strtok_r(cmd, " ",&saveptr);
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	461a      	mov	r2, r3
 8000e68:	497f      	ldr	r1, [pc, #508]	; (8001068 <telnet_process_command+0x210>)
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f015 fdf9 	bl	8016a62 <strtok_r>
 8000e70:	60f8      	str	r0, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 8000e72:	497e      	ldr	r1, [pc, #504]	; (800106c <telnet_process_command+0x214>)
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f015 fd8d 	bl	8016994 <strcasecmp>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d114      	bne.n	8000eaa <telnet_process_command+0x52>
	{
		sprintf(s, "Komunikace OK\n");
 8000e80:	4a7b      	ldr	r2, [pc, #492]	; (8001070 <telnet_process_command+0x218>)
 8000e82:	4b7c      	ldr	r3, [pc, #496]	; (8001074 <telnet_process_command+0x21c>)
 8000e84:	4614      	mov	r4, r2
 8000e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e88:	c407      	stmia	r4!, {r0, r1, r2}
 8000e8a:	8023      	strh	r3, [r4, #0]
 8000e8c:	3402      	adds	r4, #2
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	7023      	strb	r3, [r4, #0]
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000e92:	4877      	ldr	r0, [pc, #476]	; (8001070 <telnet_process_command+0x218>)
 8000e94:	f7ff f9b6 	bl	8000204 <strlen>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4973      	ldr	r1, [pc, #460]	; (8001070 <telnet_process_command+0x218>)
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f007 f922 	bl	80080ec <netconn_write_partly>

	}



}
 8000ea8:	e0da      	b.n	8001060 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED1") == 0)
 8000eaa:	4973      	ldr	r1, [pc, #460]	; (8001078 <telnet_process_command+0x220>)
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f015 fd71 	bl	8016994 <strcasecmp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d121      	bne.n	8000efc <telnet_process_command+0xa4>
		token = strtok_r(cmd, " ",&saveptr);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	496a      	ldr	r1, [pc, #424]	; (8001068 <telnet_process_command+0x210>)
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f015 fdce 	bl	8016a62 <strtok_r>
 8000ec6:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000ec8:	496c      	ldr	r1, [pc, #432]	; (800107c <telnet_process_command+0x224>)
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f015 fd62 	bl	8016994 <strcasecmp>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <telnet_process_command+0x88>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4869      	ldr	r0, [pc, #420]	; (8001080 <telnet_process_command+0x228>)
 8000edc:	f001 fc62 	bl	80027a4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 8000ee0:	4968      	ldr	r1, [pc, #416]	; (8001084 <telnet_process_command+0x22c>)
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f015 fd56 	bl	8016994 <strcasecmp>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 80b8 	bne.w	8001060 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4862      	ldr	r0, [pc, #392]	; (8001080 <telnet_process_command+0x228>)
 8000ef6:	f001 fc55 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8000efa:	e0b1      	b.n	8001060 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED2") == 0)
 8000efc:	4962      	ldr	r1, [pc, #392]	; (8001088 <telnet_process_command+0x230>)
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f015 fd48 	bl	8016994 <strcasecmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d121      	bne.n	8000f4e <telnet_process_command+0xf6>
		token = strtok_r(cmd, " ",&saveptr);
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4955      	ldr	r1, [pc, #340]	; (8001068 <telnet_process_command+0x210>)
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f015 fda5 	bl	8016a62 <strtok_r>
 8000f18:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000f1a:	4958      	ldr	r1, [pc, #352]	; (800107c <telnet_process_command+0x224>)
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f015 fd39 	bl	8016994 <strcasecmp>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d104      	bne.n	8000f32 <telnet_process_command+0xda>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4854      	ldr	r0, [pc, #336]	; (8001080 <telnet_process_command+0x228>)
 8000f2e:	f001 fc39 	bl	80027a4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 8000f32:	4954      	ldr	r1, [pc, #336]	; (8001084 <telnet_process_command+0x22c>)
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f015 fd2d 	bl	8016994 <strcasecmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f040 808f 	bne.w	8001060 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	484e      	ldr	r0, [pc, #312]	; (8001080 <telnet_process_command+0x228>)
 8000f48:	f001 fc2c 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8000f4c:	e088      	b.n	8001060 <telnet_process_command+0x208>
	else if (strcasecmp(token, "LED3") == 0)
 8000f4e:	494f      	ldr	r1, [pc, #316]	; (800108c <telnet_process_command+0x234>)
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f015 fd1f 	bl	8016994 <strcasecmp>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d122      	bne.n	8000fa2 <telnet_process_command+0x14a>
		token = strtok_r(cmd, " ",&saveptr);
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	461a      	mov	r2, r3
 8000f62:	4941      	ldr	r1, [pc, #260]	; (8001068 <telnet_process_command+0x210>)
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f015 fd7c 	bl	8016a62 <strtok_r>
 8000f6a:	60f8      	str	r0, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 8000f6c:	4943      	ldr	r1, [pc, #268]	; (800107c <telnet_process_command+0x224>)
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f015 fd10 	bl	8016994 <strcasecmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d105      	bne.n	8000f86 <telnet_process_command+0x12e>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f80:	483f      	ldr	r0, [pc, #252]	; (8001080 <telnet_process_command+0x228>)
 8000f82:	f001 fc0f 	bl	80027a4 <HAL_GPIO_WritePin>
		if (strcasecmp(token, "OFF") == 0)
 8000f86:	493f      	ldr	r1, [pc, #252]	; (8001084 <telnet_process_command+0x22c>)
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f015 fd03 	bl	8016994 <strcasecmp>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d165      	bne.n	8001060 <telnet_process_command+0x208>
			HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9a:	4839      	ldr	r0, [pc, #228]	; (8001080 <telnet_process_command+0x228>)
 8000f9c:	f001 fc02 	bl	80027a4 <HAL_GPIO_WritePin>
}
 8000fa0:	e05e      	b.n	8001060 <telnet_process_command+0x208>
	else if (strcasecmp(token, "STATUS") == 0)
 8000fa2:	493b      	ldr	r1, [pc, #236]	; (8001090 <telnet_process_command+0x238>)
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f015 fcf5 	bl	8016994 <strcasecmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d157      	bne.n	8001060 <telnet_process_command+0x208>
		token = strtok_r(cmd, " ",&saveptr);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	492c      	ldr	r1, [pc, #176]	; (8001068 <telnet_process_command+0x210>)
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f015 fd52 	bl	8016a62 <strtok_r>
 8000fbe:	60f8      	str	r0, [r7, #12]
		if(HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)==1) strcpy(LED1_status, "Zapnuto");
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	482f      	ldr	r0, [pc, #188]	; (8001080 <telnet_process_command+0x228>)
 8000fc4:	f001 fbd6 	bl	8002774 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d106      	bne.n	8000fdc <telnet_process_command+0x184>
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <telnet_process_command+0x23c>)
 8000fd0:	4a31      	ldr	r2, [pc, #196]	; (8001098 <telnet_process_command+0x240>)
 8000fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fda:	e005      	b.n	8000fe8 <telnet_process_command+0x190>
		else strcpy(LED1_status, "Vypnuto");
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <telnet_process_command+0x23c>)
 8000fde:	4a2f      	ldr	r2, [pc, #188]	; (800109c <telnet_process_command+0x244>)
 8000fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)==1) strcpy(LED2_status, "Zapnuto");
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	4825      	ldr	r0, [pc, #148]	; (8001080 <telnet_process_command+0x228>)
 8000fec:	f001 fbc2 	bl	8002774 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d106      	bne.n	8001004 <telnet_process_command+0x1ac>
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <telnet_process_command+0x248>)
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <telnet_process_command+0x240>)
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001002:	e005      	b.n	8001010 <telnet_process_command+0x1b8>
		else strcpy(LED2_status, "Vypnuto");
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <telnet_process_command+0x248>)
 8001006:	4a25      	ldr	r2, [pc, #148]	; (800109c <telnet_process_command+0x244>)
 8001008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100c:	e883 0003 	stmia.w	r3, {r0, r1}
		if(HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin)==1) strcpy(LED3_status, "Zapnuto");
 8001010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001014:	481a      	ldr	r0, [pc, #104]	; (8001080 <telnet_process_command+0x228>)
 8001016:	f001 fbad 	bl	8002774 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d106      	bne.n	800102e <telnet_process_command+0x1d6>
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <telnet_process_command+0x24c>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <telnet_process_command+0x240>)
 8001024:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001028:	e883 0003 	stmia.w	r3, {r0, r1}
 800102c:	e005      	b.n	800103a <telnet_process_command+0x1e2>
		else strcpy(LED3_status, "Vypnuto");
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <telnet_process_command+0x24c>)
 8001030:	4a1a      	ldr	r2, [pc, #104]	; (800109c <telnet_process_command+0x244>)
 8001032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001036:	e883 0003 	stmia.w	r3, {r0, r1}
		sprintf(s, "STATUS: LED1 %s LED2 %s LED3 %s", LED1_status, LED2_status,LED3_status);
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <telnet_process_command+0x24c>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <telnet_process_command+0x248>)
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <telnet_process_command+0x23c>)
 8001042:	4919      	ldr	r1, [pc, #100]	; (80010a8 <telnet_process_command+0x250>)
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <telnet_process_command+0x218>)
 8001046:	f015 fc85 	bl	8016954 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <telnet_process_command+0x218>)
 800104c:	f7ff f8da 	bl	8000204 <strlen>
 8001050:	4602      	mov	r2, r0
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	4905      	ldr	r1, [pc, #20]	; (8001070 <telnet_process_command+0x218>)
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f007 f846 	bl	80080ec <netconn_write_partly>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	08017bf0 	.word	0x08017bf0
 800106c:	08017bf4 	.word	0x08017bf4
 8001070:	20000464 	.word	0x20000464
 8001074:	08017bfc 	.word	0x08017bfc
 8001078:	08017c0c 	.word	0x08017c0c
 800107c:	08017c14 	.word	0x08017c14
 8001080:	40020400 	.word	0x40020400
 8001084:	08017c18 	.word	0x08017c18
 8001088:	08017c1c 	.word	0x08017c1c
 800108c:	08017c24 	.word	0x08017c24
 8001090:	08017c2c 	.word	0x08017c2c
 8001094:	200004c8 	.word	0x200004c8
 8001098:	08017c34 	.word	0x08017c34
 800109c:	08017c3c 	.word	0x08017c3c
 80010a0:	2000052c 	.word	0x2000052c
 80010a4:	20000590 	.word	0x20000590
 80010a8:	08017c44 	.word	0x08017c44

080010ac <telnet_byte_available>:




static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <telnet_byte_available+0x64>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b63      	cmp	r3, #99	; 0x63
 80010be:	d810      	bhi.n	80010e2 <telnet_byte_available+0x36>
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b1f      	cmp	r3, #31
 80010c4:	d90d      	bls.n	80010e2 <telnet_byte_available+0x36>
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db09      	blt.n	80010e2 <telnet_byte_available+0x36>
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <telnet_byte_available+0x64>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	b291      	uxth	r1, r2
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <telnet_byte_available+0x64>)
 80010d8:	8011      	strh	r1, [r2, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <telnet_byte_available+0x68>)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b0a      	cmp	r3, #10
 80010e6:	d002      	beq.n	80010ee <telnet_byte_available+0x42>
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b0d      	cmp	r3, #13
 80010ec:	d10c      	bne.n	8001108 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <telnet_byte_available+0x64>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <telnet_byte_available+0x68>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <telnet_byte_available+0x68>)
 80010fe:	f7ff feab 	bl	8000e58 <telnet_process_command>
		cnt = 0;
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <telnet_byte_available+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
	}
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200005f4 	.word	0x200005f4
 8001114:	200005f8 	.word	0x200005f8

08001118 <telnet_thread>:



/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	u16_t len;

	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2010      	movs	r0, #16
 8001126:	f006 fd17 	bl	8007b58 <netconn_new_with_proto_and_callback>
 800112a:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d055      	beq.n	80011de <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 23);
 8001132:	2217      	movs	r2, #23
 8001134:	2100      	movs	r1, #0
 8001136:	69f8      	ldr	r0, [r7, #28]
 8001138:	f006 fdae 	bl	8007c98 <netconn_bind>
 800113c:	4603      	mov	r3, r0
 800113e:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 8001140:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d146      	bne.n	80011d6 <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001148:	21ff      	movs	r1, #255	; 0xff
 800114a:	69f8      	ldr	r0, [r7, #28]
 800114c:	f006 fddc 	bl	8007d08 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	69f8      	ldr	r0, [r7, #28]
 8001158:	f006 fe02 	bl	8007d60 <netconn_accept>
 800115c:	4603      	mov	r3, r0
 800115e:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8001160:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 8001168:	e022      	b.n	80011b0 <telnet_thread+0x98>
					{
						do
						{

							netbuf_data(buf, (void**)&data, &len);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	f107 020a 	add.w	r2, r7, #10
 8001170:	f107 010c 	add.w	r1, r7, #12
 8001174:	4618      	mov	r0, r3
 8001176:	f008 fcbd 	bl	8009af4 <netbuf_data>
							while (len--) telnet_byte_available((uintptr_t)data++, newconn);
 800117a:	e008      	b.n	800118e <telnet_thread+0x76>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	60fa      	str	r2, [r7, #12]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff8f 	bl	80010ac <telnet_byte_available>
 800118e:	897b      	ldrh	r3, [r7, #10]
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	b292      	uxth	r2, r2
 8001194:	817a      	strh	r2, [r7, #10]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <telnet_thread+0x64>

							// netbuf_data(buf, &data, &len);
							//netconn_write(newconn, data, len, NETCONN_COPY);

						}
						while (netbuf_next(buf) >= 0);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4618      	mov	r0, r3
 800119e:	f008 fcf3 	bl	8009b88 <netbuf_next>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	dae0      	bge.n	800116a <telnet_thread+0x52>

						netbuf_delete(buf);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fc82 	bl	8009ab4 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f107 0210 	add.w	r2, r7, #16
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 ff1f 	bl	8007ffc <netconn_recv>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0d2      	beq.n	800116a <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 f838 	bl	800823c <netconn_close>
					netconn_delete(newconn);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f006 fd3c 	bl	8007c4c <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80011d4:	e7bc      	b.n	8001150 <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fd37 	bl	8007c4c <netconn_delete>
		}
	}
}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 80011ee:	2304      	movs	r3, #4
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f6:	2200      	movs	r2, #0
 80011f8:	4903      	ldr	r1, [pc, #12]	; (8001208 <telnet_init+0x20>)
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <telnet_init+0x24>)
 80011fc:	f015 fad4 	bl	80167a8 <sys_thread_new>
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	08001119 	.word	0x08001119
 800120c:	08017c64 	.word	0x08017c64

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001216:	e003      	b.n	8001220 <LoopCopyDataInit>

08001218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800121a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800121c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121e:	3104      	adds	r1, #4

08001220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001228:	d3f6      	bcc.n	8001218 <CopyDataInit>
  ldr  r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800122c:	e002      	b.n	8001234 <LoopFillZerobss>

0800122e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001230:	f842 3b04 	str.w	r3, [r2], #4

08001234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001238:	d3f9      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800123a:	f7ff fd83 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f015 faf7 	bl	8016830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff f9d7 	bl	80005f4 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001248:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800124c:	08026184 	.word	0x08026184
  ldr  r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001254:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001258:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800125c:	2000fb0c 	.word	0x2000fb0c

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f8fa 	bl	8001486 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fc3c 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fb6c 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	2000921c 	.word	0x2000921c

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000921c 	.word	0x2000921c

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <HAL_Delay+0x40>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000008 	.word	0x20000008

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff4c 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ae:	f7ff ff61 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	6978      	ldr	r0, [r7, #20]
 80014ba:	f7ff ffb1 	bl	8001420 <NVIC_EncodePriority>
 80014be:	4602      	mov	r2, r0
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff80 	bl	80013cc <__NVIC_SetPriority>
}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff54 	bl	8001390 <__NVIC_EnableIRQ>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001500:	4baa      	ldr	r3, [pc, #680]	; (80017ac <HAL_ETH_Init+0x2bc>)
 8001502:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e185      	b.n	8001822 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f003 f80a 	bl	8004544 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	4b9e      	ldr	r3, [pc, #632]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	4a9d      	ldr	r2, [pc, #628]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 800153a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153e:	6453      	str	r3, [r2, #68]	; 0x44
 8001540:	4b9b      	ldr	r3, [pc, #620]	; (80017b0 <HAL_ETH_Init+0x2c0>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800154c:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_ETH_Init+0x2c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a98      	ldr	r2, [pc, #608]	; (80017b4 <HAL_ETH_Init+0x2c4>)
 8001552:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001556:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001558:	4b96      	ldr	r3, [pc, #600]	; (80017b4 <HAL_ETH_Init+0x2c4>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4994      	ldr	r1, [pc, #592]	; (80017b4 <HAL_ETH_Init+0x2c4>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800157e:	f7ff fea7 	bl	80012d0 <HAL_GetTick>
 8001582:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001584:	e011      	b.n	80015aa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001586:	f7ff fea3 	bl	80012d0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001594:	d909      	bls.n	80015aa <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e13b      	b.n	8001822 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e4      	bne.n	8001586 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f023 031c 	bic.w	r3, r3, #28
 80015ca:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015cc:	f001 fe4e 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80015d0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4a78      	ldr	r2, [pc, #480]	; (80017b8 <HAL_ETH_Init+0x2c8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d908      	bls.n	80015ec <HAL_ETH_Init+0xfc>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4a77      	ldr	r2, [pc, #476]	; (80017bc <HAL_ETH_Init+0x2cc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d804      	bhi.n	80015ec <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e027      	b.n	800163c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	4a73      	ldr	r2, [pc, #460]	; (80017bc <HAL_ETH_Init+0x2cc>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d908      	bls.n	8001606 <HAL_ETH_Init+0x116>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <HAL_ETH_Init+0x2d0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d804      	bhi.n	8001606 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f043 030c 	orr.w	r3, r3, #12
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	e01a      	b.n	800163c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4a6d      	ldr	r2, [pc, #436]	; (80017c0 <HAL_ETH_Init+0x2d0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d903      	bls.n	8001616 <HAL_ETH_Init+0x126>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_ETH_Init+0x2d4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d911      	bls.n	800163a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	4a6a      	ldr	r2, [pc, #424]	; (80017c4 <HAL_ETH_Init+0x2d4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d908      	bls.n	8001630 <HAL_ETH_Init+0x140>
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_ETH_Init+0x2d8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d804      	bhi.n	8001630 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e005      	b.n	800163c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f043 0310 	orr.w	r3, r3, #16
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	e000      	b.n	800163c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800163a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fb9e 	bl	8001d8c <HAL_ETH_WritePHYRegister>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800165a:	6939      	ldr	r1, [r7, #16]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 fc2b 	bl	8001eb8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0d9      	b.n	8001822 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800166e:	20ff      	movs	r0, #255	; 0xff
 8001670:	f7ff fe3a 	bl	80012e8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a7 	beq.w	80017cc <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800167e:	f7ff fe27 	bl	80012d0 <HAL_GetTick>
 8001682:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	461a      	mov	r2, r3
 800168a:	2101      	movs	r1, #1
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fb15 	bl	8001cbc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001692:	f7ff fe1d 	bl	80012d0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d90f      	bls.n	80016c4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fc04 	bl	8001eb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0ae      	b.n	8001822 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0da      	beq.n	8001684 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80016ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d2:	2100      	movs	r1, #0
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fb59 	bl	8001d8c <HAL_ETH_WritePHYRegister>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016e4:	6939      	ldr	r1, [r7, #16]
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fbe6 	bl	8001eb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016f4:	2301      	movs	r3, #1
 80016f6:	e094      	b.n	8001822 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff fdea 	bl	80012d0 <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	461a      	mov	r2, r3
 8001704:	2101      	movs	r1, #1
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fad8 	bl	8001cbc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800170c:	f7ff fde0 	bl	80012d0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d90f      	bls.n	800173e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fbc7 	bl	8001eb8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e071      	b.n	8001822 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0da      	beq.n	80016fe <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	461a      	mov	r2, r3
 800174e:	211f      	movs	r1, #31
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fab3 	bl	8001cbc <HAL_ETH_ReadPHYRegister>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00b      	beq.n	8001774 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fba8 	bl	8001eb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001770:	2301      	movs	r3, #1
 8001772:	e056      	b.n	8001822 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e002      	b.n	800178e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	e037      	b.n	8001810 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e032      	b.n	8001810 <HAL_ETH_Init+0x320>
 80017aa:	bf00      	nop
 80017ac:	03938700 	.word	0x03938700
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	01312cff 	.word	0x01312cff
 80017bc:	02160ebf 	.word	0x02160ebf
 80017c0:	039386ff 	.word	0x039386ff
 80017c4:	05f5e0ff 	.word	0x05f5e0ff
 80017c8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80017dc:	4313      	orrs	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fad1 	bl	8001d8c <HAL_ETH_WritePHYRegister>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fb5e 	bl	8001eb8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e00c      	b.n	8001822 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001808:	f640 70ff 	movw	r0, #4095	; 0xfff
 800180c:	f7ff fd6c 	bl	80012e8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fb50 	bl	8001eb8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
 8001838:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ETH_DMATxDescListInit+0x20>
 8001848:	2302      	movs	r3, #2
 800184a:	e052      	b.n	80018f2 <HAL_ETH_DMATxDescListInit+0xc6>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e030      	b.n	80018ca <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001878:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	461a      	mov	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d208      	bcs.n	80018be <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3301      	adds	r3, #1
 80018b0:	015b      	lsls	r3, r3, #5
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4413      	add	r3, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	e002      	b.n	80018c4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3ca      	bcc.n	8001868 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	3310      	adds	r3, #16
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	371c      	adds	r7, #28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80018fe:	b480      	push	{r7}
 8001900:	b087      	sub	sp, #28
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ETH_DMARxDescListInit+0x20>
 800191a:	2302      	movs	r3, #2
 800191c:	e056      	b.n	80019cc <HAL_ETH_DMARxDescListInit+0xce>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2202      	movs	r2, #2
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e034      	b.n	80019a4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	015b      	lsls	r3, r3, #5
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4413      	add	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800194a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001952:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	429a      	cmp	r2, r3
 8001984:	d208      	bcs.n	8001998 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	461a      	mov	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e002      	b.n	800199e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3c6      	bcc.n	800193a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	330c      	adds	r3, #12
 80019b8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_ETH_TransmitFrame+0x24>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0cd      	b.n	8001b98 <HAL_ETH_TransmitFrame+0x1c0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0b8      	b.n	8001b98 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da09      	bge.n	8001a44 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2212      	movs	r2, #18
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0a9      	b.n	8001b98 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d915      	bls.n	8001a7a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0a9b      	lsrs	r3, r3, #10
 8001a58:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4b51      	ldr	r3, [pc, #324]	; (8001ba4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e001      	b.n	8001a7e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d11c      	bne.n	8001abe <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a92:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a9e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aae:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001abc:	e04b      	b.n	8001b56 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e044      	b.n	8001b4e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ad2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d107      	bne.n	8001aea <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001af2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d116      	bne.n	8001b2c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b0c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b12:	fb02 f203 	mul.w	r2, r2, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b1e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b2a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b3a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3b6      	bcc.n	8001ac4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5e:	3314      	adds	r3, #20
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00d      	beq.n	8001b86 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	3314      	adds	r3, #20
 8001b74:	2204      	movs	r2, #4
 8001b76:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	3304      	adds	r3, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	ac02b00b 	.word	0xac02b00b
 8001ba8:	fffffa0c 	.word	0xfffffa0c

08001bac <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e074      	b.n	8001cb0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001bd6:	e05a      	b.n	8001c8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bec:	d10d      	bne.n	8001c0a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	461a      	mov	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
 8001c08:	e041      	b.n	8001c8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10b      	bne.n	8001c30 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c2e:	e02e      	b.n	8001c8e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d103      	bne.n	8001c52 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c5e:	1f1a      	subs	r2, r3, #4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e010      	b.n	8001cb0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db02      	blt.n	8001c9e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d99c      	bls.n	8001bd8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b82      	cmp	r3, #130	; 0x82
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e050      	b.n	8001d84 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2282      	movs	r2, #130	; 0x82
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 031c 	and.w	r3, r3, #28
 8001cf8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8a1b      	ldrh	r3, [r3, #16]
 8001cfe:	02db      	lsls	r3, r3, #11
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2e:	f7ff facf 	bl	80012d0 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d34:	e015      	b.n	8001d62 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d36:	f7ff facb 	bl	80012d0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d309      	bcc.n	8001d5a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e014      	b.n	8001d84 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e4      	bne.n	8001d36 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	460b      	mov	r3, r1
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b42      	cmp	r3, #66	; 0x42
 8001dac:	d101      	bne.n	8001db2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	e04e      	b.n	8001e50 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2242      	movs	r2, #66	; 0x42
 8001db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 031c 	and.w	r3, r3, #28
 8001dc8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8a1b      	ldrh	r3, [r3, #16]
 8001dce:	02db      	lsls	r3, r3, #11
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dd8:	897b      	ldrh	r3, [r7, #10]
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e08:	f7ff fa62 	bl	80012d0 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e0e:	e015      	b.n	8001e3c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e10:	f7ff fa5e 	bl	80012d0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1e:	d309      	bcc.n	8001e34 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e00d      	b.n	8001e50 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1e4      	bne.n	8001e10 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ETH_Start+0x16>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e01f      	b.n	8001eae <HAL_ETH_Start+0x56>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa1c 	bl	80022bc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa36 	bl	80022f6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa80 	bl	8002390 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fa4d 	bl	8002330 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa62 	bl	8002360 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0b0      	sub	sp, #192	; 0xc0
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	663b      	str	r3, [r7, #96]	; 0x60
 8001f04:	e001      	b.n	8001f0a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f14:	2300      	movs	r3, #0
 8001f16:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f24:	2340      	movs	r3, #64	; 0x40
 8001f26:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f90:	4bac      	ldr	r3, [pc, #688]	; (8002244 <ETH_MACDMAConfig+0x38c>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f9c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fa0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fa4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001faa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fae:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fb2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fb8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fbc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fc0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fc4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fc8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fcc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff f97b 	bl	80012e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ffc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002000:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002004:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002006:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800200a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800200c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002010:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002016:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800201c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002020:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002028:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800202a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff f956 	bl	80012e8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002044:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800204e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002058:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002064:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002068:	f64f 7341 	movw	r3, #65345	; 0xff41
 800206c:	4013      	ands	r3, r2
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002072:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002076:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800207c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800207e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002082:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002088:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800208a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800208e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002094:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff f917 	bl	80012e8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020c4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff f902 	bl	80012e8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ec:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80020fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002100:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002112:	2304      	movs	r3, #4
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800211c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002136:	2300      	movs	r3, #0
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	3318      	adds	r3, #24
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800214a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <ETH_MACDMAConfig+0x390>)
 8002150:	4013      	ands	r3, r2
 8002152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002156:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002158:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800215a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800215c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800215e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002160:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002162:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002164:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002166:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002168:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800216a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800216c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800216e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002172:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002176:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002178:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	3318      	adds	r3, #24
 800218c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002190:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	3318      	adds	r3, #24
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff f8a0 	bl	80012e8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b0:	3318      	adds	r3, #24
 80021b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021bc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021c0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021c4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021c8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021cc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021ce:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021d2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7ff f879 	bl	80012e8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002202:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10f      	bne.n	800222c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002214:	331c      	adds	r3, #28
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	331c      	adds	r3, #28
 800222a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	461a      	mov	r2, r3
 8002232:	2100      	movs	r1, #0
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f809 	bl	800224c <ETH_MACAddressConfig>
}
 800223a:	bf00      	nop
 800223c:	37c0      	adds	r7, #192	; 0xc0
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	ff20810f 	.word	0xff20810f
 8002248:	f8de3f23 	.word	0xf8de3f23

0800224c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3305      	adds	r3, #5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	3204      	adds	r2, #4
 8002264:	7812      	ldrb	r2, [r2, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <ETH_MACAddressConfig+0x68>)
 800226e:	4413      	add	r3, r2
 8002270:	461a      	mov	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3303      	adds	r3, #3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	061a      	lsls	r2, r3, #24
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3302      	adds	r3, #2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4313      	orrs	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <ETH_MACAddressConfig+0x6c>)
 800229e:	4413      	add	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40028040 	.word	0x40028040
 80022b8:	40028044 	.word	0x40028044

080022bc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0208 	orr.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f000 f87f 	bl	80023e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0204 	orr.w	r2, r2, #4
 8002310:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f000 f862 	bl	80023e4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	3318      	adds	r3, #24
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800234c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002350:	3318      	adds	r3, #24
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	3318      	adds	r3, #24
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0202 	orr.w	r2, r2, #2
 800237c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002380:	3318      	adds	r3, #24
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	3318      	adds	r3, #24
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	3318      	adds	r3, #24
 80023b6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	3318      	adds	r3, #24
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 f80c 	bl	80023e4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	3318      	adds	r3, #24
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <ETH_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <ETH_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002400:	bf00      	nop
  } 
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <ETH_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000000 	.word	0x20000000
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e177      	b.n	800272c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800243c:	2201      	movs	r2, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 8166 	bne.w	8002726 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d00b      	beq.n	800247a <HAL_GPIO_Init+0x5a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246e:	2b11      	cmp	r3, #17
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b12      	cmp	r3, #18
 8002478:	d130      	bne.n	80024dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0201 	and.w	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0xfc>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80c0 	beq.w	8002726 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_GPIO_Init+0x320>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a64      	ldr	r2, [pc, #400]	; (8002740 <HAL_GPIO_Init+0x320>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <HAL_GPIO_Init+0x320>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c2:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_GPIO_Init+0x324>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a57      	ldr	r2, [pc, #348]	; (8002748 <HAL_GPIO_Init+0x328>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d037      	beq.n	800265e <HAL_GPIO_Init+0x23e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_GPIO_Init+0x32c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d031      	beq.n	800265a <HAL_GPIO_Init+0x23a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_GPIO_Init+0x330>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02b      	beq.n	8002656 <HAL_GPIO_Init+0x236>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_GPIO_Init+0x334>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x232>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a53      	ldr	r2, [pc, #332]	; (8002758 <HAL_GPIO_Init+0x338>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x22e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_GPIO_Init+0x33c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x22a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a51      	ldr	r2, [pc, #324]	; (8002760 <HAL_GPIO_Init+0x340>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x226>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_GPIO_Init+0x344>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x222>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <HAL_GPIO_Init+0x348>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x21e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4e      	ldr	r2, [pc, #312]	; (800276c <HAL_GPIO_Init+0x34c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x21a>
 8002636:	2309      	movs	r3, #9
 8002638:	e012      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800263a:	230a      	movs	r3, #10
 800263c:	e010      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800263e:	2308      	movs	r3, #8
 8002640:	e00e      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002642:	2307      	movs	r3, #7
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002646:	2306      	movs	r3, #6
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x240>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x240>
 800265e:	2300      	movs	r3, #0
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002670:	4934      	ldr	r1, [pc, #208]	; (8002744 <HAL_GPIO_Init+0x324>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <HAL_GPIO_Init+0x350>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026cc:	4a28      	ldr	r2, [pc, #160]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_GPIO_Init+0x350>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_GPIO_Init+0x350>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3301      	adds	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f67f ae84 	bls.w	800243c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002734:	bf00      	nop
 8002736:	3724      	adds	r7, #36	; 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e001      	b.n	8002796 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	807b      	strh	r3, [r7, #2]
 80027b0:	4613      	mov	r3, r2
 80027b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b4:	787b      	ldrb	r3, [r7, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c2:	887b      	ldrh	r3, [r7, #2]
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d8:	b08f      	sub	sp, #60	; 0x3c
 80027da:	af0a      	add	r7, sp, #40	; 0x28
 80027dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e10f      	b.n	8002a08 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f92a 	bl	8000a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2203      	movs	r2, #3
 800280c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fbef 	bl	800400a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	687e      	ldr	r6, [r7, #4]
 8002834:	466d      	mov	r5, sp
 8002836:	f106 0410 	add.w	r4, r6, #16
 800283a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002846:	e885 0003 	stmia.w	r5, {r0, r1}
 800284a:	1d33      	adds	r3, r6, #4
 800284c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f001 fb7a 	bl	8003f48 <USB_CoreInit>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0d0      	b.n	8002a08 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fbdd 	bl	800402c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e04a      	b.n	800290e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	333d      	adds	r3, #61	; 0x3d
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	333c      	adds	r3, #60	; 0x3c
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	b298      	uxth	r0, r3
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3342      	adds	r3, #66	; 0x42
 80028b4:	4602      	mov	r2, r0
 80028b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3344      	adds	r3, #68	; 0x44
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3348      	adds	r3, #72	; 0x48
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	3350      	adds	r3, #80	; 0x50
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	3301      	adds	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3af      	bcc.n	8002878 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
 800291c:	e044      	b.n	80029a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3301      	adds	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d3b5      	bcc.n	800291e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	687e      	ldr	r6, [r7, #4]
 80029ba:	466d      	mov	r5, sp
 80029bc:	f106 0410 	add.w	r4, r6, #16
 80029c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80029d0:	1d33      	adds	r3, r6, #4
 80029d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	f001 fb53 	bl	8004080 <USB_DevInit>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e00d      	b.n	8002a08 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fd10 	bl	8004426 <USB_DevDisconnect>

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e25b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a2e:	4ba3      	ldr	r3, [pc, #652]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d00c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4ba0      	ldr	r3, [pc, #640]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d112      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a46:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b99      	ldr	r3, [pc, #612]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d05b      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d157      	bne.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e236      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d106      	bne.n	8002a84 <HAL_RCC_OscConfig+0x74>
 8002a76:	4b91      	ldr	r3, [pc, #580]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a90      	ldr	r2, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e01d      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8a      	ldr	r2, [pc, #552]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b88      	ldr	r3, [pc, #544]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a80      	ldr	r2, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fc02 	bl	80012d0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fbfe 	bl	80012d0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e1fb      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xc0>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fbee 	bl	80012d0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fbea 	bl	80012d0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1e7      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0xe8>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b32:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e1bb      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4952      	ldr	r1, [pc, #328]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	e03a      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fba3 	bl	80012d0 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fb9f 	bl	80012d0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e19c      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_OscConfig+0x2b0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fb82 	bl	80012d0 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fb7e 	bl	80012d0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e17b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d030      	beq.n	8002c5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe fb62 	bl	80012d0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7fe fb5e 	bl	80012d0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e15b      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x200>
 8002c2e:	e015      	b.n	8002c5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x2b4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fb4b 	bl	80012d0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fb47 	bl	80012d0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e144      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f0      	bne.n	8002c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a0 	beq.w	8002daa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10f      	bne.n	8002c9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d121      	bne.n	8002cea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <HAL_RCC_OscConfig+0x2b8>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fb0d 	bl	80012d0 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e011      	b.n	8002cde <HAL_RCC_OscConfig+0x2ce>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470000 	.word	0x42470000
 8002cc4:	42470e80 	.word	0x42470e80
 8002cc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fb00 	bl	80012d0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0fd      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x4d4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a7c      	ldr	r2, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	e01c      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d08:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a76      	ldr	r2, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	4a73      	ldr	r2, [pc, #460]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d20:	e00b      	b.n	8002d3a <HAL_RCC_OscConfig+0x32a>
 8002d22:	4b71      	ldr	r3, [pc, #452]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a6d      	ldr	r2, [pc, #436]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe fac5 	bl	80012d0 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fe fac1 	bl	80012d0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0bc      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0ee      	beq.n	8002d4a <HAL_RCC_OscConfig+0x33a>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe faaf 	bl	80012d0 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe faab 	bl	80012d0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0a6      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ee      	bne.n	8002d76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9e:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8092 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d05c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d141      	bne.n	8002e4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b48      	ldr	r3, [pc, #288]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fa7f 	bl	80012d0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fa7b 	bl	80012d0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e078      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	019b      	lsls	r3, r3, #6
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	4933      	ldr	r1, [pc, #204]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1e:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fa54 	bl	80012d0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fa50 	bl	80012d0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04d      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e4a:	e045      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x4dc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fa3d 	bl	80012d0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fa39 	bl	80012d0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e036      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x44a>
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e029      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_RCC_OscConfig+0x4d8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d115      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470060 	.word	0x42470060

08002ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0cc      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d90c      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f12:	4b65      	ldr	r3, [pc, #404]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0b8      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f44:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f5c:	4b53      	ldr	r3, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d044      	beq.n	8003010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d107      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d119      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e067      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4934      	ldr	r1, [pc, #208]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f976 	bl	80012d0 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe f972 	bl	80012d0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e04f      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 020c 	and.w	r2, r3, #12
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	429a      	cmp	r2, r3
 800300e:	d1eb      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d20c      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e032      	b.n	800309e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4916      	ldr	r1, [pc, #88]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003076:	f000 f821 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800307a:	4601      	mov	r1, r0
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	fa21 f303 	lsr.w	r3, r1, r3
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fd3a 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00
 80030ac:	40023800 	.word	0x40023800
 80030b0:	0801aaa4 	.word	0x0801aaa4
 80030b4:	20000000 	.word	0x20000000
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d007      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x32>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d008      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x38>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80b4 	bne.w	8003250 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030ea:	60bb      	str	r3, [r7, #8]
       break;
 80030ec:	e0b3      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ee:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80030f0:	60bb      	str	r3, [r7, #8]
      break;
 80030f2:	e0b0      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b58      	ldr	r3, [pc, #352]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04a      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	f04f 0400 	mov.w	r4, #0
 8003114:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	ea03 0501 	and.w	r5, r3, r1
 8003120:	ea04 0602 	and.w	r6, r4, r2
 8003124:	4629      	mov	r1, r5
 8003126:	4632      	mov	r2, r6
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f04f 0400 	mov.w	r4, #0
 8003130:	0154      	lsls	r4, r2, #5
 8003132:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003136:	014b      	lsls	r3, r1, #5
 8003138:	4619      	mov	r1, r3
 800313a:	4622      	mov	r2, r4
 800313c:	1b49      	subs	r1, r1, r5
 800313e:	eb62 0206 	sbc.w	r2, r2, r6
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	0194      	lsls	r4, r2, #6
 800314c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003150:	018b      	lsls	r3, r1, #6
 8003152:	1a5b      	subs	r3, r3, r1
 8003154:	eb64 0402 	sbc.w	r4, r4, r2
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	00e2      	lsls	r2, r4, #3
 8003162:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003166:	00d9      	lsls	r1, r3, #3
 8003168:	460b      	mov	r3, r1
 800316a:	4614      	mov	r4, r2
 800316c:	195b      	adds	r3, r3, r5
 800316e:	eb44 0406 	adc.w	r4, r4, r6
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	0262      	lsls	r2, r4, #9
 800317c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003180:	0259      	lsls	r1, r3, #9
 8003182:	460b      	mov	r3, r1
 8003184:	4614      	mov	r4, r2
 8003186:	4618      	mov	r0, r3
 8003188:	4621      	mov	r1, r4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f04f 0400 	mov.w	r4, #0
 8003190:	461a      	mov	r2, r3
 8003192:	4623      	mov	r3, r4
 8003194:	f7fd f894 	bl	80002c0 <__aeabi_uldivmod>
 8003198:	4603      	mov	r3, r0
 800319a:	460c      	mov	r4, r1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	e049      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	f04f 0400 	mov.w	r4, #0
 80031aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	ea03 0501 	and.w	r5, r3, r1
 80031b6:	ea04 0602 	and.w	r6, r4, r2
 80031ba:	4629      	mov	r1, r5
 80031bc:	4632      	mov	r2, r6
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	0154      	lsls	r4, r2, #5
 80031c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031cc:	014b      	lsls	r3, r1, #5
 80031ce:	4619      	mov	r1, r3
 80031d0:	4622      	mov	r2, r4
 80031d2:	1b49      	subs	r1, r1, r5
 80031d4:	eb62 0206 	sbc.w	r2, r2, r6
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	0194      	lsls	r4, r2, #6
 80031e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031e6:	018b      	lsls	r3, r1, #6
 80031e8:	1a5b      	subs	r3, r3, r1
 80031ea:	eb64 0402 	sbc.w	r4, r4, r2
 80031ee:	f04f 0100 	mov.w	r1, #0
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	00e2      	lsls	r2, r4, #3
 80031f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031fc:	00d9      	lsls	r1, r3, #3
 80031fe:	460b      	mov	r3, r1
 8003200:	4614      	mov	r4, r2
 8003202:	195b      	adds	r3, r3, r5
 8003204:	eb44 0406 	adc.w	r4, r4, r6
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	02a2      	lsls	r2, r4, #10
 8003212:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003216:	0299      	lsls	r1, r3, #10
 8003218:	460b      	mov	r3, r1
 800321a:	4614      	mov	r4, r2
 800321c:	4618      	mov	r0, r3
 800321e:	4621      	mov	r1, r4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f04f 0400 	mov.w	r4, #0
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	f7fd f849 	bl	80002c0 <__aeabi_uldivmod>
 800322e:	4603      	mov	r3, r0
 8003230:	460c      	mov	r4, r1
 8003232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	3301      	adds	r3, #1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	60bb      	str	r3, [r7, #8]
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003252:	60bb      	str	r3, [r7, #8]
      break;
 8003254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003256:	68bb      	ldr	r3, [r7, #8]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400
 8003268:	007a1200 	.word	0x007a1200

0800326c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCC_GetHCLKFreq+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff0 	bl	800326c <HAL_RCC_GetHCLKFreq>
 800328c:	4601      	mov	r1, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4a03      	ldr	r2, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	0801aab4 	.word	0x0801aab4

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffdc 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	0801aab4 	.word	0x0801aab4

080032d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	220f      	movs	r2, #15
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0203 	and.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_RCC_GetClockConfig+0x60>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e01d      	b.n	8003386 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f815 	bl	800338e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 f968 	bl	800364c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d007      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d122      	bne.n	8003446 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d11b      	bne.n	8003446 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f06f 0202 	mvn.w	r2, #2
 8003416:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8ee 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003432:	e005      	b.n	8003440 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8e0 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8f1 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d122      	bne.n	800349a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d11b      	bne.n	800349a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f06f 0204 	mvn.w	r2, #4
 800346a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8c4 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 8003486:	e005      	b.n	8003494 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8b6 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8c7 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d122      	bne.n	80034ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11b      	bne.n	80034ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f06f 0208 	mvn.w	r2, #8
 80034be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2204      	movs	r2, #4
 80034c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f89a 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 80034da:	e005      	b.n	80034e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f88c 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f89d 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f003 0310 	and.w	r3, r3, #16
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d122      	bne.n	8003542 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b10      	cmp	r3, #16
 8003508:	d11b      	bne.n	8003542 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f06f 0210 	mvn.w	r2, #16
 8003512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2208      	movs	r2, #8
 8003518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f870 	bl	800360e <HAL_TIM_IC_CaptureCallback>
 800352e:	e005      	b.n	800353c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f862 	bl	80035fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f873 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0201 	mvn.w	r2, #1
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fd f9e9 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b80      	cmp	r3, #128	; 0x80
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f903 	bl	80037a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d10e      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d107      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f838 	bl	8003636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d10e      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d107      	bne.n	80035f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f06f 0220 	mvn.w	r2, #32
 80035ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8cd 	bl	800378c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <TIM_Base_SetConfig+0x114>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d00f      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3d      	ldr	r2, [pc, #244]	; (8003764 <TIM_Base_SetConfig+0x118>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <TIM_Base_SetConfig+0x11c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a3b      	ldr	r2, [pc, #236]	; (800376c <TIM_Base_SetConfig+0x120>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <TIM_Base_SetConfig+0x124>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <TIM_Base_SetConfig+0x114>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d027      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <TIM_Base_SetConfig+0x118>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d023      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <TIM_Base_SetConfig+0x11c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	; (800376c <TIM_Base_SetConfig+0x120>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <TIM_Base_SetConfig+0x124>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d017      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a28      	ldr	r2, [pc, #160]	; (8003774 <TIM_Base_SetConfig+0x128>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <TIM_Base_SetConfig+0x12c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a26      	ldr	r2, [pc, #152]	; (800377c <TIM_Base_SetConfig+0x130>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a25      	ldr	r2, [pc, #148]	; (8003780 <TIM_Base_SetConfig+0x134>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a24      	ldr	r2, [pc, #144]	; (8003784 <TIM_Base_SetConfig+0x138>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <TIM_Base_SetConfig+0x13c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <TIM_Base_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0xf8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	; (8003770 <TIM_Base_SetConfig+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d103      	bne.n	800374c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	615a      	str	r2, [r3, #20]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800
 8003780:	40001800 	.word	0x40001800
 8003784:	40001c00 	.word	0x40001c00
 8003788:	40002000 	.word	0x40002000

0800378c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e03f      	b.n	8003846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f8f6 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f829 	bl	8003850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800382c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003892:	f023 030c 	bic.w	r3, r3, #12
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	68f9      	ldr	r1, [r7, #12]
 800389c:	430b      	orrs	r3, r1
 800389e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038be:	f040 818b 	bne.w	8003bd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4ac1      	ldr	r2, [pc, #772]	; (8003bcc <UART_SetConfig+0x37c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d005      	beq.n	80038d8 <UART_SetConfig+0x88>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4abf      	ldr	r2, [pc, #764]	; (8003bd0 <UART_SetConfig+0x380>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	f040 80bd 	bne.w	8003a52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7ff fce8 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 80038dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	461d      	mov	r5, r3
 80038e2:	f04f 0600 	mov.w	r6, #0
 80038e6:	46a8      	mov	r8, r5
 80038e8:	46b1      	mov	r9, r6
 80038ea:	eb18 0308 	adds.w	r3, r8, r8
 80038ee:	eb49 0409 	adc.w	r4, r9, r9
 80038f2:	4698      	mov	r8, r3
 80038f4:	46a1      	mov	r9, r4
 80038f6:	eb18 0805 	adds.w	r8, r8, r5
 80038fa:	eb49 0906 	adc.w	r9, r9, r6
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800390a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800390e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003912:	4688      	mov	r8, r1
 8003914:	4691      	mov	r9, r2
 8003916:	eb18 0005 	adds.w	r0, r8, r5
 800391a:	eb49 0106 	adc.w	r1, r9, r6
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	461d      	mov	r5, r3
 8003924:	f04f 0600 	mov.w	r6, #0
 8003928:	196b      	adds	r3, r5, r5
 800392a:	eb46 0406 	adc.w	r4, r6, r6
 800392e:	461a      	mov	r2, r3
 8003930:	4623      	mov	r3, r4
 8003932:	f7fc fcc5 	bl	80002c0 <__aeabi_uldivmod>
 8003936:	4603      	mov	r3, r0
 8003938:	460c      	mov	r4, r1
 800393a:	461a      	mov	r2, r3
 800393c:	4ba5      	ldr	r3, [pc, #660]	; (8003bd4 <UART_SetConfig+0x384>)
 800393e:	fba3 2302 	umull	r2, r3, r3, r2
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	461d      	mov	r5, r3
 800394c:	f04f 0600 	mov.w	r6, #0
 8003950:	46a9      	mov	r9, r5
 8003952:	46b2      	mov	sl, r6
 8003954:	eb19 0309 	adds.w	r3, r9, r9
 8003958:	eb4a 040a 	adc.w	r4, sl, sl
 800395c:	4699      	mov	r9, r3
 800395e:	46a2      	mov	sl, r4
 8003960:	eb19 0905 	adds.w	r9, r9, r5
 8003964:	eb4a 0a06 	adc.w	sl, sl, r6
 8003968:	f04f 0100 	mov.w	r1, #0
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800397c:	4689      	mov	r9, r1
 800397e:	4692      	mov	sl, r2
 8003980:	eb19 0005 	adds.w	r0, r9, r5
 8003984:	eb4a 0106 	adc.w	r1, sl, r6
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	461d      	mov	r5, r3
 800398e:	f04f 0600 	mov.w	r6, #0
 8003992:	196b      	adds	r3, r5, r5
 8003994:	eb46 0406 	adc.w	r4, r6, r6
 8003998:	461a      	mov	r2, r3
 800399a:	4623      	mov	r3, r4
 800399c:	f7fc fc90 	bl	80002c0 <__aeabi_uldivmod>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <UART_SetConfig+0x384>)
 80039a8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	2164      	movs	r1, #100	; 0x64
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	3332      	adds	r3, #50	; 0x32
 80039ba:	4a86      	ldr	r2, [pc, #536]	; (8003bd4 <UART_SetConfig+0x384>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039c8:	4498      	add	r8, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	461d      	mov	r5, r3
 80039ce:	f04f 0600 	mov.w	r6, #0
 80039d2:	46a9      	mov	r9, r5
 80039d4:	46b2      	mov	sl, r6
 80039d6:	eb19 0309 	adds.w	r3, r9, r9
 80039da:	eb4a 040a 	adc.w	r4, sl, sl
 80039de:	4699      	mov	r9, r3
 80039e0:	46a2      	mov	sl, r4
 80039e2:	eb19 0905 	adds.w	r9, r9, r5
 80039e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039fe:	4689      	mov	r9, r1
 8003a00:	4692      	mov	sl, r2
 8003a02:	eb19 0005 	adds.w	r0, r9, r5
 8003a06:	eb4a 0106 	adc.w	r1, sl, r6
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	461d      	mov	r5, r3
 8003a10:	f04f 0600 	mov.w	r6, #0
 8003a14:	196b      	adds	r3, r5, r5
 8003a16:	eb46 0406 	adc.w	r4, r6, r6
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	f7fc fc4f 	bl	80002c0 <__aeabi_uldivmod>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <UART_SetConfig+0x384>)
 8003a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2164      	movs	r1, #100	; 0x64
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	3332      	adds	r3, #50	; 0x32
 8003a3c:	4a65      	ldr	r2, [pc, #404]	; (8003bd4 <UART_SetConfig+0x384>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	f003 0207 	and.w	r2, r3, #7
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4442      	add	r2, r8
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	e26f      	b.n	8003f32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7ff fc17 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8003a56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	f04f 0600 	mov.w	r6, #0
 8003a60:	46a8      	mov	r8, r5
 8003a62:	46b1      	mov	r9, r6
 8003a64:	eb18 0308 	adds.w	r3, r8, r8
 8003a68:	eb49 0409 	adc.w	r4, r9, r9
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	46a1      	mov	r9, r4
 8003a70:	eb18 0805 	adds.w	r8, r8, r5
 8003a74:	eb49 0906 	adc.w	r9, r9, r6
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a8c:	4688      	mov	r8, r1
 8003a8e:	4691      	mov	r9, r2
 8003a90:	eb18 0005 	adds.w	r0, r8, r5
 8003a94:	eb49 0106 	adc.w	r1, r9, r6
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f04f 0600 	mov.w	r6, #0
 8003aa2:	196b      	adds	r3, r5, r5
 8003aa4:	eb46 0406 	adc.w	r4, r6, r6
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	f7fc fc08 	bl	80002c0 <__aeabi_uldivmod>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	460c      	mov	r4, r1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <UART_SetConfig+0x384>)
 8003ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	f04f 0600 	mov.w	r6, #0
 8003aca:	46a9      	mov	r9, r5
 8003acc:	46b2      	mov	sl, r6
 8003ace:	eb19 0309 	adds.w	r3, r9, r9
 8003ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ad6:	4699      	mov	r9, r3
 8003ad8:	46a2      	mov	sl, r4
 8003ada:	eb19 0905 	adds.w	r9, r9, r5
 8003ade:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003af6:	4689      	mov	r9, r1
 8003af8:	4692      	mov	sl, r2
 8003afa:	eb19 0005 	adds.w	r0, r9, r5
 8003afe:	eb4a 0106 	adc.w	r1, sl, r6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	461d      	mov	r5, r3
 8003b08:	f04f 0600 	mov.w	r6, #0
 8003b0c:	196b      	adds	r3, r5, r5
 8003b0e:	eb46 0406 	adc.w	r4, r6, r6
 8003b12:	461a      	mov	r2, r3
 8003b14:	4623      	mov	r3, r4
 8003b16:	f7fc fbd3 	bl	80002c0 <__aeabi_uldivmod>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <UART_SetConfig+0x384>)
 8003b22:	fba3 1302 	umull	r1, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2164      	movs	r1, #100	; 0x64
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	3332      	adds	r3, #50	; 0x32
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <UART_SetConfig+0x384>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b42:	4498      	add	r8, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	461d      	mov	r5, r3
 8003b48:	f04f 0600 	mov.w	r6, #0
 8003b4c:	46a9      	mov	r9, r5
 8003b4e:	46b2      	mov	sl, r6
 8003b50:	eb19 0309 	adds.w	r3, r9, r9
 8003b54:	eb4a 040a 	adc.w	r4, sl, sl
 8003b58:	4699      	mov	r9, r3
 8003b5a:	46a2      	mov	sl, r4
 8003b5c:	eb19 0905 	adds.w	r9, r9, r5
 8003b60:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b78:	4689      	mov	r9, r1
 8003b7a:	4692      	mov	sl, r2
 8003b7c:	eb19 0005 	adds.w	r0, r9, r5
 8003b80:	eb4a 0106 	adc.w	r1, sl, r6
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	461d      	mov	r5, r3
 8003b8a:	f04f 0600 	mov.w	r6, #0
 8003b8e:	196b      	adds	r3, r5, r5
 8003b90:	eb46 0406 	adc.w	r4, r6, r6
 8003b94:	461a      	mov	r2, r3
 8003b96:	4623      	mov	r3, r4
 8003b98:	f7fc fb92 	bl	80002c0 <__aeabi_uldivmod>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <UART_SetConfig+0x384>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <UART_SetConfig+0x384>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 0207 	and.w	r2, r3, #7
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4442      	add	r2, r8
 8003bc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bca:	e1b2      	b.n	8003f32 <UART_SetConfig+0x6e2>
 8003bcc:	40011000 	.word	0x40011000
 8003bd0:	40011400 	.word	0x40011400
 8003bd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4ad7      	ldr	r2, [pc, #860]	; (8003f3c <UART_SetConfig+0x6ec>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d005      	beq.n	8003bee <UART_SetConfig+0x39e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4ad6      	ldr	r2, [pc, #856]	; (8003f40 <UART_SetConfig+0x6f0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	f040 80d1 	bne.w	8003d90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bee:	f7ff fb5d 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8003bf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	469a      	mov	sl, r3
 8003bf8:	f04f 0b00 	mov.w	fp, #0
 8003bfc:	46d0      	mov	r8, sl
 8003bfe:	46d9      	mov	r9, fp
 8003c00:	eb18 0308 	adds.w	r3, r8, r8
 8003c04:	eb49 0409 	adc.w	r4, r9, r9
 8003c08:	4698      	mov	r8, r3
 8003c0a:	46a1      	mov	r9, r4
 8003c0c:	eb18 080a 	adds.w	r8, r8, sl
 8003c10:	eb49 090b 	adc.w	r9, r9, fp
 8003c14:	f04f 0100 	mov.w	r1, #0
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c28:	4688      	mov	r8, r1
 8003c2a:	4691      	mov	r9, r2
 8003c2c:	eb1a 0508 	adds.w	r5, sl, r8
 8003c30:	eb4b 0609 	adc.w	r6, fp, r9
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	0094      	lsls	r4, r2, #2
 8003c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c4c:	008b      	lsls	r3, r1, #2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	4631      	mov	r1, r6
 8003c56:	f7fc fb33 	bl	80002c0 <__aeabi_uldivmod>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4bb8      	ldr	r3, [pc, #736]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003c62:	fba3 2302 	umull	r2, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	469b      	mov	fp, r3
 8003c70:	f04f 0c00 	mov.w	ip, #0
 8003c74:	46d9      	mov	r9, fp
 8003c76:	46e2      	mov	sl, ip
 8003c78:	eb19 0309 	adds.w	r3, r9, r9
 8003c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c80:	4699      	mov	r9, r3
 8003c82:	46a2      	mov	sl, r4
 8003c84:	eb19 090b 	adds.w	r9, r9, fp
 8003c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ca0:	4689      	mov	r9, r1
 8003ca2:	4692      	mov	sl, r2
 8003ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	0094      	lsls	r4, r2, #2
 8003cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc4:	008b      	lsls	r3, r1, #2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4623      	mov	r3, r4
 8003cca:	4628      	mov	r0, r5
 8003ccc:	4631      	mov	r1, r6
 8003cce:	f7fc faf7 	bl	80002c0 <__aeabi_uldivmod>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b9a      	ldr	r3, [pc, #616]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003cda:	fba3 1302 	umull	r1, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2164      	movs	r1, #100	; 0x64
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	; 0x32
 8003cec:	4a95      	ldr	r2, [pc, #596]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf8:	4498      	add	r8, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	469b      	mov	fp, r3
 8003cfe:	f04f 0c00 	mov.w	ip, #0
 8003d02:	46d9      	mov	r9, fp
 8003d04:	46e2      	mov	sl, ip
 8003d06:	eb19 0309 	adds.w	r3, r9, r9
 8003d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d0e:	4699      	mov	r9, r3
 8003d10:	46a2      	mov	sl, r4
 8003d12:	eb19 090b 	adds.w	r9, r9, fp
 8003d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d2e:	4689      	mov	r9, r1
 8003d30:	4692      	mov	sl, r2
 8003d32:	eb1b 0509 	adds.w	r5, fp, r9
 8003d36:	eb4c 060a 	adc.w	r6, ip, sl
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f04f 0400 	mov.w	r4, #0
 8003d4c:	0094      	lsls	r4, r2, #2
 8003d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d52:	008b      	lsls	r3, r1, #2
 8003d54:	461a      	mov	r2, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	f7fc fab0 	bl	80002c0 <__aeabi_uldivmod>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003d68:	fba3 1302 	umull	r1, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	2164      	movs	r1, #100	; 0x64
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	3332      	adds	r3, #50	; 0x32
 8003d7a:	4a72      	ldr	r2, [pc, #456]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4442      	add	r2, r8
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	e0d0      	b.n	8003f32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7ff fa78 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 8003d94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f04f 0b00 	mov.w	fp, #0
 8003d9e:	46d0      	mov	r8, sl
 8003da0:	46d9      	mov	r9, fp
 8003da2:	eb18 0308 	adds.w	r3, r8, r8
 8003da6:	eb49 0409 	adc.w	r4, r9, r9
 8003daa:	4698      	mov	r8, r3
 8003dac:	46a1      	mov	r9, r4
 8003dae:	eb18 080a 	adds.w	r8, r8, sl
 8003db2:	eb49 090b 	adc.w	r9, r9, fp
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dca:	4688      	mov	r8, r1
 8003dcc:	4691      	mov	r9, r2
 8003dce:	eb1a 0508 	adds.w	r5, sl, r8
 8003dd2:	eb4b 0609 	adc.w	r6, fp, r9
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	0094      	lsls	r4, r2, #2
 8003dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dee:	008b      	lsls	r3, r1, #2
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	4631      	mov	r1, r6
 8003df8:	f7fc fa62 	bl	80002c0 <__aeabi_uldivmod>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003e04:	fba3 2302 	umull	r2, r3, r3, r2
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	469b      	mov	fp, r3
 8003e12:	f04f 0c00 	mov.w	ip, #0
 8003e16:	46d9      	mov	r9, fp
 8003e18:	46e2      	mov	sl, ip
 8003e1a:	eb19 0309 	adds.w	r3, r9, r9
 8003e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e22:	4699      	mov	r9, r3
 8003e24:	46a2      	mov	sl, r4
 8003e26:	eb19 090b 	adds.w	r9, r9, fp
 8003e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e42:	4689      	mov	r9, r1
 8003e44:	4692      	mov	sl, r2
 8003e46:	eb1b 0509 	adds.w	r5, fp, r9
 8003e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	f04f 0400 	mov.w	r4, #0
 8003e60:	0094      	lsls	r4, r2, #2
 8003e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	4631      	mov	r1, r6
 8003e70:	f7fc fa26 	bl	80002c0 <__aeabi_uldivmod>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b32      	ldr	r3, [pc, #200]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2164      	movs	r1, #100	; 0x64
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9a:	4498      	add	r8, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	469b      	mov	fp, r3
 8003ea0:	f04f 0c00 	mov.w	ip, #0
 8003ea4:	46d9      	mov	r9, fp
 8003ea6:	46e2      	mov	sl, ip
 8003ea8:	eb19 0309 	adds.w	r3, r9, r9
 8003eac:	eb4a 040a 	adc.w	r4, sl, sl
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	46a2      	mov	sl, r4
 8003eb4:	eb19 090b 	adds.w	r9, r9, fp
 8003eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ebc:	f04f 0100 	mov.w	r1, #0
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ed0:	4689      	mov	r9, r1
 8003ed2:	4692      	mov	sl, r2
 8003ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	f04f 0400 	mov.w	r4, #0
 8003eee:	0094      	lsls	r4, r2, #2
 8003ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef4:	008b      	lsls	r3, r1, #2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4623      	mov	r3, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	4631      	mov	r1, r6
 8003efe:	f7fc f9df 	bl	80002c0 <__aeabi_uldivmod>
 8003f02:	4603      	mov	r3, r0
 8003f04:	460c      	mov	r4, r1
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2164      	movs	r1, #100	; 0x64
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <UART_SetConfig+0x6f4>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4442      	add	r2, r8
 8003f2e:	609a      	str	r2, [r3, #8]
}
 8003f30:	e7ff      	b.n	8003f32 <UART_SetConfig+0x6e2>
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	40011000 	.word	0x40011000
 8003f40:	40011400 	.word	0x40011400
 8003f44:	51eb851f 	.word	0x51eb851f

08003f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f48:	b084      	sub	sp, #16
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	f107 001c 	add.w	r0, r7, #28
 8003f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d122      	bne.n	8003fa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa5c 	bl	8004458 <USB_CoreReset>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e01a      	b.n	8003fdc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa50 	bl	8004458 <USB_CoreReset>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8003fce:	e005      	b.n	8003fdc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10b      	bne.n	8003ffa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f043 0206 	orr.w	r2, r3, #6
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004006:	b004      	add	sp, #16
 8004008:	4770      	bx	lr

0800400a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d106      	bne.n	8004058 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e00b      	b.n	8004070 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	e001      	b.n	8004070 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e003      	b.n	8004078 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004070:	2032      	movs	r0, #50	; 0x32
 8004072:	f7fd f939 	bl	80012e8 <HAL_Delay>

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004080:	b084      	sub	sp, #16
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800408e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e009      	b.n	80040b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3340      	adds	r3, #64	; 0x40
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	3301      	adds	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b0e      	cmp	r3, #14
 80040b8:	d9f2      	bls.n	80040a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d112      	bne.n	80040e6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
 80040e4:	e00b      	b.n	80040fe <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004104:	461a      	mov	r2, r3
 8004106:	2300      	movs	r3, #0
 8004108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	4619      	mov	r1, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	461a      	mov	r2, r3
 800411a:	680b      	ldr	r3, [r1, #0]
 800411c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	2b01      	cmp	r3, #1
 8004122:	d10c      	bne.n	800413e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800412a:	2100      	movs	r1, #0
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f961 	bl	80043f4 <USB_SetDevSpeed>
 8004132:	e008      	b.n	8004146 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004134:	2101      	movs	r1, #1
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f95c 	bl	80043f4 <USB_SetDevSpeed>
 800413c:	e003      	b.n	8004146 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800413e:	2103      	movs	r1, #3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f957 	bl	80043f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004146:	2110      	movs	r1, #16
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f90b 	bl	8004364 <USB_FlushTxFifo>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f929 	bl	80043b0 <USB_FlushRxFifo>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417a:	461a      	mov	r2, r3
 800417c:	2300      	movs	r3, #0
 800417e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e043      	b.n	800421a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a8:	d118      	bne.n	80041dc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	461a      	mov	r2, r3
 80041be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e013      	b.n	80041ee <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e008      	b.n	80041ee <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e8:	461a      	mov	r2, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	461a      	mov	r2, r3
 80041fc:	2300      	movs	r3, #0
 80041fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	461a      	mov	r2, r3
 800420e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3301      	adds	r3, #1
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3b7      	bcc.n	8004192 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e043      	b.n	80042b0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800423a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423e:	d118      	bne.n	8004272 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e013      	b.n	8004284 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	461a      	mov	r2, r3
 800426a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e008      	b.n	8004284 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	461a      	mov	r2, r3
 80042a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3301      	adds	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3b7      	bcc.n	8004228 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ca:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d111      	bne.n	80042f6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	461a      	mov	r2, r3
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <USB_DevInit+0x2dc>)
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	f043 0303 	orr.w	r3, r3, #3
 80042f4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004302:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f043 0210 	orr.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <USB_DevInit+0x2e0>)
 800431c:	4313      	orrs	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f043 0208 	orr.w	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d107      	bne.n	800434a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800434a:	7dfb      	ldrb	r3, [r7, #23]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004356:	b004      	add	sp, #16
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	00800100 	.word	0x00800100
 8004360:	803c3800 	.word	0x803c3800

08004364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	019b      	lsls	r3, r3, #6
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <USB_FlushTxFifo+0x48>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d901      	bls.n	8004390 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e006      	b.n	800439e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b20      	cmp	r3, #32
 800439a:	d0f0      	beq.n	800437e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	00030d40 	.word	0x00030d40

080043b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2210      	movs	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <USB_FlushRxFifo+0x40>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d0f0      	beq.n	80043c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	00030d40 	.word	0x00030d40

080043f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004446:	2003      	movs	r0, #3
 8004448:	f7fc ff4e 	bl	80012e8 <HAL_Delay>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a13      	ldr	r2, [pc, #76]	; (80044bc <USB_CoreReset+0x64>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e01b      	b.n	80044ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	daf2      	bge.n	8004464 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f043 0201 	orr.w	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <USB_CoreReset+0x64>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e006      	b.n	80044ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d0f0      	beq.n	800448e <USB_CoreReset+0x36>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	00030d40 	.word	0x00030d40

080044c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80044c6:	2100      	movs	r1, #0
 80044c8:	2000      	movs	r0, #0
 80044ca:	f005 fcb9 	bl	8009e40 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80044ce:	4b17      	ldr	r3, [pc, #92]	; (800452c <MX_LWIP_Init+0x6c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <MX_LWIP_Init+0x70>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <MX_LWIP_Init+0x74>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80044e0:	4b15      	ldr	r3, [pc, #84]	; (8004538 <MX_LWIP_Init+0x78>)
 80044e2:	9302      	str	r3, [sp, #8]
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <MX_LWIP_Init+0x7c>)
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <MX_LWIP_Init+0x74>)
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <MX_LWIP_Init+0x70>)
 80044f0:	490e      	ldr	r1, [pc, #56]	; (800452c <MX_LWIP_Init+0x6c>)
 80044f2:	4813      	ldr	r0, [pc, #76]	; (8004540 <MX_LWIP_Init+0x80>)
 80044f4:	f006 ffa2 	bl	800b43c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80044f8:	4811      	ldr	r0, [pc, #68]	; (8004540 <MX_LWIP_Init+0x80>)
 80044fa:	f007 f887 	bl	800b60c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <MX_LWIP_Init+0x80>)
 8004500:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004510:	480b      	ldr	r0, [pc, #44]	; (8004540 <MX_LWIP_Init+0x80>)
 8004512:	f007 f88b 	bl	800b62c <netif_set_up>
 8004516:	e002      	b.n	800451e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004518:	4809      	ldr	r0, [pc, #36]	; (8004540 <MX_LWIP_Init+0x80>)
 800451a:	f007 f8cb 	bl	800b6b4 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800451e:	4808      	ldr	r0, [pc, #32]	; (8004540 <MX_LWIP_Init+0x80>)
 8004520:	f00e f9d2 	bl	80128c8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20009254 	.word	0x20009254
 8004530:	20009258 	.word	0x20009258
 8004534:	2000925c 	.word	0x2000925c
 8004538:	08009d3d 	.word	0x08009d3d
 800453c:	08004b71 	.word	0x08004b71
 8004540:	20009220 	.word	0x20009220

08004544 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a55      	ldr	r2, [pc, #340]	; (80046b8 <HAL_ETH_MspInit+0x174>)
 8004562:	4293      	cmp	r3, r2
 8004564:	f040 80a4 	bne.w	80046b0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <HAL_ETH_MspInit+0x178>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	4a52      	ldr	r2, [pc, #328]	; (80046bc <HAL_ETH_MspInit+0x178>)
 8004572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004576:	6313      	str	r3, [r2, #48]	; 0x30
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_ETH_MspInit+0x178>)
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	4b4c      	ldr	r3, [pc, #304]	; (80046bc <HAL_ETH_MspInit+0x178>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	4a4b      	ldr	r2, [pc, #300]	; (80046bc <HAL_ETH_MspInit+0x178>)
 800458e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004592:	6313      	str	r3, [r2, #48]	; 0x30
 8004594:	4b49      	ldr	r3, [pc, #292]	; (80046bc <HAL_ETH_MspInit+0x178>)
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	4a44      	ldr	r2, [pc, #272]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ae:	6313      	str	r3, [r2, #48]	; 0x30
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6313      	str	r3, [r2, #48]	; 0x30
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	4b37      	ldr	r3, [pc, #220]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	4a36      	ldr	r2, [pc, #216]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6313      	str	r3, [r2, #48]	; 0x30
 80045e8:	4b34      	ldr	r3, [pc, #208]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <HAL_ETH_MspInit+0x178>)
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	6313      	str	r3, [r2, #48]	; 0x30
 8004604:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <HAL_ETH_MspInit+0x178>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_ETH_MspInit+0x178>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <HAL_ETH_MspInit+0x178>)
 800461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461e:	6313      	str	r3, [r2, #48]	; 0x30
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_ETH_MspInit+0x178>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800462c:	2332      	movs	r3, #50	; 0x32
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004630:	2302      	movs	r3, #2
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004638:	2303      	movs	r3, #3
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800463c:	230b      	movs	r3, #11
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004644:	4619      	mov	r1, r3
 8004646:	481e      	ldr	r0, [pc, #120]	; (80046c0 <HAL_ETH_MspInit+0x17c>)
 8004648:	f7fd feea 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800464c:	2386      	movs	r3, #134	; 0x86
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004650:	2302      	movs	r3, #2
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004654:	2300      	movs	r3, #0
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004658:	2303      	movs	r3, #3
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800465c:	230b      	movs	r3, #11
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004664:	4619      	mov	r1, r3
 8004666:	4817      	ldr	r0, [pc, #92]	; (80046c4 <HAL_ETH_MspInit+0x180>)
 8004668:	f7fd feda 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800466c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467a:	2303      	movs	r3, #3
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800467e:	230b      	movs	r3, #11
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004686:	4619      	mov	r1, r3
 8004688:	480f      	ldr	r0, [pc, #60]	; (80046c8 <HAL_ETH_MspInit+0x184>)
 800468a:	f7fd fec9 	bl	8002420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800468e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469c:	2303      	movs	r3, #3
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046a0:	230b      	movs	r3, #11
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a8:	4619      	mov	r1, r3
 80046aa:	4808      	ldr	r0, [pc, #32]	; (80046cc <HAL_ETH_MspInit+0x188>)
 80046ac:	f7fd feb8 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046b0:	bf00      	nop
 80046b2:	3738      	adds	r7, #56	; 0x38
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40028000 	.word	0x40028000
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020000 	.word	0x40020000
 80046c8:	40020400 	.word	0x40020400
 80046cc:	40021800 	.word	0x40021800

080046d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b090      	sub	sp, #64	; 0x40
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <low_level_init+0x180>)
 80046de:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <low_level_init+0x184>)
 80046e0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80046e2:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <low_level_init+0x180>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <low_level_init+0x180>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80046fa:	23e1      	movs	r3, #225	; 0xe1
 80046fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004700:	23fe      	movs	r3, #254	; 0xfe
 8004702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8004706:	23ec      	movs	r3, #236	; 0xec
 8004708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 800470c:	2371      	movs	r3, #113	; 0x71
 800470e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004712:	4a4f      	ldr	r2, [pc, #316]	; (8004850 <low_level_init+0x180>)
 8004714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004718:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800471a:	4b4d      	ldr	r3, [pc, #308]	; (8004850 <low_level_init+0x180>)
 800471c:	2201      	movs	r2, #1
 800471e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <low_level_init+0x180>)
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004726:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <low_level_init+0x180>)
 8004728:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800472c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800472e:	4848      	ldr	r0, [pc, #288]	; (8004850 <low_level_init+0x180>)
 8004730:	f7fc fede 	bl	80014f0 <HAL_ETH_Init>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800473a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004754:	2304      	movs	r3, #4
 8004756:	4a40      	ldr	r2, [pc, #256]	; (8004858 <low_level_init+0x188>)
 8004758:	4940      	ldr	r1, [pc, #256]	; (800485c <low_level_init+0x18c>)
 800475a:	483d      	ldr	r0, [pc, #244]	; (8004850 <low_level_init+0x180>)
 800475c:	f7fd f866 	bl	800182c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004760:	2304      	movs	r3, #4
 8004762:	4a3f      	ldr	r2, [pc, #252]	; (8004860 <low_level_init+0x190>)
 8004764:	493f      	ldr	r1, [pc, #252]	; (8004864 <low_level_init+0x194>)
 8004766:	483a      	ldr	r0, [pc, #232]	; (8004850 <low_level_init+0x180>)
 8004768:	f7fd f8c9 	bl	80018fe <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2206      	movs	r2, #6
 8004770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <low_level_init+0x180>)
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <low_level_init+0x180>)
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	785a      	ldrb	r2, [r3, #1]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <low_level_init+0x180>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	789a      	ldrb	r2, [r3, #2]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004798:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <low_level_init+0x180>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	78da      	ldrb	r2, [r3, #3]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <low_level_init+0x180>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	791a      	ldrb	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <low_level_init+0x180>)
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	795a      	ldrb	r2, [r3, #5]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047c2:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047ca:	f043 030a 	orr.w	r3, r3, #10
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80047d6:	2300      	movs	r3, #0
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80047de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fb35 	bl	8004e54 <osSemaphoreCreate>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <low_level_init+0x198>)
 80047ee:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <low_level_init+0x19c>)
 80047f2:	f107 040c 	add.w	r4, r7, #12
 80047f6:	461d      	mov	r5, r3
 80047f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fa26 	bl	8004c5c <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004810:	480f      	ldr	r0, [pc, #60]	; (8004850 <low_level_init+0x180>)
 8004812:	f7fd fb21 	bl	8001e58 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800481a:	461a      	mov	r2, r3
 800481c:	211d      	movs	r1, #29
 800481e:	480c      	ldr	r0, [pc, #48]	; (8004850 <low_level_init+0x180>)
 8004820:	f7fd fa4c 	bl	8001cbc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	f043 030b 	orr.w	r3, r3, #11
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	461a      	mov	r2, r3
 8004830:	211d      	movs	r1, #29
 8004832:	4807      	ldr	r0, [pc, #28]	; (8004850 <low_level_init+0x180>)
 8004834:	f7fd faaa 	bl	8001d8c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800483c:	461a      	mov	r2, r3
 800483e:	211d      	movs	r1, #29
 8004840:	4803      	ldr	r0, [pc, #12]	; (8004850 <low_level_init+0x180>)
 8004842:	f7fd fa3b 	bl	8001cbc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004846:	bf00      	nop
 8004848:	3740      	adds	r7, #64	; 0x40
 800484a:	46bd      	mov	sp, r7
 800484c:	bdb0      	pop	{r4, r5, r7, pc}
 800484e:	bf00      	nop
 8004850:	2000ab30 	.word	0x2000ab30
 8004854:	40028000 	.word	0x40028000
 8004858:	2000ab78 	.word	0x2000ab78
 800485c:	20009260 	.word	0x20009260
 8004860:	200092e0 	.word	0x200092e0
 8004864:	2000aab0 	.word	0x2000aab0
 8004868:	2000065c 	.word	0x2000065c
 800486c:	08017c7c 	.word	0x08017c7c

08004870 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800487a:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <low_level_output+0x138>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004892:	4b45      	ldr	r3, [pc, #276]	; (80049a8 <low_level_output+0x138>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	623b      	str	r3, [r7, #32]
 80048a0:	e05a      	b.n	8004958 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da03      	bge.n	80048b2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80048aa:	23f8      	movs	r3, #248	; 0xf8
 80048ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80048b0:	e05c      	b.n	800496c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	895b      	ldrh	r3, [r3, #10]
 80048b6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80048bc:	e02f      	b.n	800491e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	18d0      	adds	r0, r2, r3
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	18d1      	adds	r1, r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048d2:	3304      	adds	r3, #4
 80048d4:	461a      	mov	r2, r3
 80048d6:	f011 ffde 	bl	8016896 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da03      	bge.n	80048f0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80048e8:	23f8      	movs	r3, #248	; 0xf8
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80048ee:	e03d      	b.n	800496c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004900:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800490c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004918:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004928:	4293      	cmp	r3, r2
 800492a:	d8c8      	bhi.n	80048be <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	18d0      	adds	r0, r2, r3
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4619      	mov	r1, r3
 800493e:	f011 ffaa 	bl	8016896 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1a1      	bne.n	80048a2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	4811      	ldr	r0, [pc, #68]	; (80049a8 <low_level_output+0x138>)
 8004962:	f7fd f839 	bl	80019d8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <low_level_output+0x138>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	3314      	adds	r3, #20
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <low_level_output+0x138>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	3314      	adds	r3, #20
 800498a:	2220      	movs	r2, #32
 800498c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <low_level_output+0x138>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	3304      	adds	r3, #4
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800499c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3728      	adds	r7, #40	; 0x28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000ab30 	.word	0x2000ab30

080049ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80049d0:	484e      	ldr	r0, [pc, #312]	; (8004b0c <low_level_input+0x160>)
 80049d2:	f7fd f8eb 	bl	8001bac <HAL_ETH_GetReceivedFrame_IT>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <low_level_input+0x34>
  
    return NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	e091      	b.n	8004b04 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <low_level_input+0x160>)
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80049e6:	4b49      	ldr	r3, [pc, #292]	; (8004b0c <low_level_input+0x160>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	2203      	movs	r2, #3
 80049f6:	4619      	mov	r1, r3
 80049f8:	2004      	movs	r0, #4
 80049fa:	f006 fedd 	bl	800b7b8 <pbuf_alloc>
 80049fe:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04b      	beq.n	8004a9e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <low_level_input+0x160>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	e040      	b.n	8004a98 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	895b      	ldrh	r3, [r3, #10]
 8004a1a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a20:	e021      	b.n	8004a66 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	18d0      	adds	r0, r2, r3
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	18d1      	adds	r1, r2, r3
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a36:	3304      	adds	r3, #4
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f011 ff2c 	bl	8016896 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a54:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a60:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d8d6      	bhi.n	8004a22 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	18d0      	adds	r0, r2, r3
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f011 ff06 	bl	8016896 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1bb      	bne.n	8004a16 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <low_level_input+0x160>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	e00b      	b.n	8004ac2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <low_level_input+0x160>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3ee      	bcc.n	8004aaa <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <low_level_input+0x160>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <low_level_input+0x160>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ada:	3314      	adds	r3, #20
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00d      	beq.n	8004b02 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <low_level_input+0x160>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aee:	3314      	adds	r3, #20
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <low_level_input+0x160>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afc:	3308      	adds	r3, #8
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3730      	adds	r7, #48	; 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000ab30 	.word	0x2000ab30

08004b10 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <ethernetif_input+0x58>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f9c9 	bl	8004ebc <osSemaphoreWait>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f5      	bne.n	8004b1c <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8004b30:	480e      	ldr	r0, [pc, #56]	; (8004b6c <ethernetif_input+0x5c>)
 8004b32:	f011 fe1d 	bl	8016770 <sys_mutex_lock>
        p = low_level_input( netif );
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff ff38 	bl	80049ac <low_level_input>
 8004b3c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	4798      	blx	r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	f007 f9a1 	bl	800be9c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004b5a:	4804      	ldr	r0, [pc, #16]	; (8004b6c <ethernetif_input+0x5c>)
 8004b5c:	f011 fe17 	bl	801678e <sys_mutex_unlock>
      } while(p!=NULL);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e4      	bne.n	8004b30 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b66:	e7d9      	b.n	8004b1c <ethernetif_input+0xc>
 8004b68:	2000065c 	.word	0x2000065c
 8004b6c:	2000c38c 	.word	0x2000c38c

08004b70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <ethernetif_init+0x1c>
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <ethernetif_init+0x48>)
 8004b80:	f240 222b 	movw	r2, #555	; 0x22b
 8004b84:	490d      	ldr	r1, [pc, #52]	; (8004bbc <ethernetif_init+0x4c>)
 8004b86:	480e      	ldr	r0, [pc, #56]	; (8004bc0 <ethernetif_init+0x50>)
 8004b88:	f011 fe98 	bl	80168bc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2273      	movs	r2, #115	; 0x73
 8004b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2274      	movs	r2, #116	; 0x74
 8004b98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <ethernetif_init+0x54>)
 8004ba0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <ethernetif_init+0x58>)
 8004ba6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fd91 	bl	80046d0 <low_level_init>

  return ERR_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08017c98 	.word	0x08017c98
 8004bbc:	08017cb4 	.word	0x08017cb4
 8004bc0:	08017cc4 	.word	0x08017cc4
 8004bc4:	08014831 	.word	0x08014831
 8004bc8:	08004871 	.word	0x08004871

08004bcc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bd0:	f7fc fb7e 	bl	80012d0 <HAL_GetTick>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bec:	2b84      	cmp	r3, #132	; 0x84
 8004bee:	d005      	beq.n	8004bfc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c10:	f3ef 8305 	mrs	r3, IPSR
 8004c14:	607b      	str	r3, [r7, #4]
  return(result);
 8004c16:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c32:	f001 fcf9 	bl	8006628 <vTaskStartScheduler>
  
  return osOK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004c40:	f7ff ffe3 	bl	8004c0a <inHandlerMode>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004c4a:	f001 fe05 	bl	8006858 <xTaskGetTickCountFromISR>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	e002      	b.n	8004c58 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004c52:	f001 fdf1 	bl	8006838 <xTaskGetTickCount>
 8004c56:	4603      	mov	r3, r0
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af04      	add	r7, sp, #16
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <osThreadCreate+0x54>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01c      	beq.n	8004cb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685c      	ldr	r4, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691e      	ldr	r6, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ffa6 	bl	8004bda <makeFreeRtosPriority>
 8004c8e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c98:	9202      	str	r2, [sp, #8]
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	9100      	str	r1, [sp, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f001 fb05 	bl	80062b4 <xTaskCreateStatic>
 8004caa:	4603      	mov	r3, r0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	e01c      	b.n	8004cea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685c      	ldr	r4, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cbc:	b29e      	uxth	r6, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ff88 	bl	8004bda <makeFreeRtosPriority>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	9200      	str	r2, [sp, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f001 fb43 	bl	8006366 <xTaskCreate>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d001      	beq.n	8004cea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e000      	b.n	8004cec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <osDelay+0x16>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	e000      	b.n	8004d0c <osDelay+0x18>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fc57 	bl	80065c0 <vTaskDelay>
  
  return osOK;
 8004d12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4619      	mov	r1, r3
 8004d32:	2001      	movs	r0, #1
 8004d34:	f000 fc7c 	bl	8005630 <xQueueCreateMutexStatic>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	e003      	b.n	8004d44 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f000 fc5f 	bl	8005600 <xQueueCreateMutex>
 8004d42:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <osMutexWait+0x18>
    return osErrorParameter;
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	e03a      	b.n	8004dda <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6e:	d103      	bne.n	8004d78 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e009      	b.n	8004d8c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <osMutexWait+0x40>
      ticks = 1;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d8c:	f7ff ff3d 	bl	8004c0a <inHandlerMode>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d96:	f107 0308 	add.w	r3, r7, #8
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 f85e 	bl	8005e60 <xQueueReceiveFromISR>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <osMutexWait+0x62>
      return osErrorOS;
 8004daa:	23ff      	movs	r3, #255	; 0xff
 8004dac:	e015      	b.n	8004dda <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d011      	beq.n	8004dd8 <osMutexWait+0x8c>
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <osMutexWait+0x98>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	e008      	b.n	8004dd8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 ff41 	bl	8005c50 <xQueueSemaphoreTake>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d001      	beq.n	8004dd8 <osMutexWait+0x8c>
    return osErrorOS;
 8004dd4:	23ff      	movs	r3, #255	; 0xff
 8004dd6:	e000      	b.n	8004dda <osMutexWait+0x8e>
  }
  
  return osOK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004df8:	f7ff ff07 	bl	8004c0a <inHandlerMode>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fdbb 	bl	8005984 <xQueueGiveFromISR>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d001      	beq.n	8004e18 <osMutexRelease+0x30>
      return osErrorOS;
 8004e14:	23ff      	movs	r3, #255	; 0xff
 8004e16:	e017      	b.n	8004e48 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d013      	beq.n	8004e46 <osMutexRelease+0x5e>
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <osMutexRelease+0x68>)
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	e00a      	b.n	8004e46 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e30:	2300      	movs	r3, #0
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc16 	bl	8005668 <xQueueGenericSend>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d001      	beq.n	8004e46 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004e42:	23ff      	movs	r3, #255	; 0xff
 8004e44:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004e46:	68fb      	ldr	r3, [r7, #12]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	e000ed04 	.word	0xe000ed04

08004e54 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d010      	beq.n	8004e88 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10b      	bne.n	8004e84 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	2303      	movs	r3, #3
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f000 fad8 	bl	8005430 <xQueueGenericCreateStatic>
 8004e80:	4603      	mov	r3, r0
 8004e82:	e016      	b.n	8004eb2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e014      	b.n	8004eb2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d110      	bne.n	8004eb0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004e8e:	2203      	movs	r2, #3
 8004e90:	2100      	movs	r1, #0
 8004e92:	2001      	movs	r0, #1
 8004e94:	f000 fb3e 	bl	8005514 <xQueueGenericCreate>
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <osSemaphoreCreate+0x58>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fbde 	bl	8005668 <xQueueGenericSend>
      return sema;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e000      	b.n	8004eb2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004eb0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	e03a      	b.n	8004f4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ede:	d103      	bne.n	8004ee8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e009      	b.n	8004efc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <osSemaphoreWait+0x40>
      ticks = 1;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004efc:	f7ff fe85 	bl	8004c0a <inHandlerMode>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 ffa6 	bl	8005e60 <xQueueReceiveFromISR>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8004f1a:	23ff      	movs	r3, #255	; 0xff
 8004f1c:	e015      	b.n	8004f4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d011      	beq.n	8004f48 <osSemaphoreWait+0x8c>
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <osSemaphoreWait+0x98>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	e008      	b.n	8004f48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fe89 	bl	8005c50 <xQueueSemaphoreTake>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d001      	beq.n	8004f48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004f44:	23ff      	movs	r3, #255	; 0xff
 8004f46:	e000      	b.n	8004f4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004f68:	f7ff fe4f 	bl	8004c0a <inHandlerMode>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f72:	f107 0308 	add.w	r3, r7, #8
 8004f76:	4619      	mov	r1, r3
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fd03 	bl	8005984 <xQueueGiveFromISR>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004f84:	23ff      	movs	r3, #255	; 0xff
 8004f86:	e017      	b.n	8004fb8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d013      	beq.n	8004fb6 <osSemaphoreRelease+0x5e>
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <osSemaphoreRelease+0x68>)
 8004f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	e00a      	b.n	8004fb6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fb5e 	bl	8005668 <xQueueGenericSend>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004fb2:	23ff      	movs	r3, #255	; 0xff
 8004fb4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004fcc:	f7ff fe1d 	bl	8004c0a <inHandlerMode>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004fd6:	2382      	movs	r3, #130	; 0x82
 8004fd8:	e003      	b.n	8004fe2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fff5 	bl	8005fca <vQueueDelete>

  return osOK; 
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004fea:	b590      	push	{r4, r7, lr}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af02      	add	r7, sp, #8
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d012      	beq.n	8005022 <osMessageCreate+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00e      	beq.n	8005022 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68dc      	ldr	r4, [r3, #12]
 8005014:	2300      	movs	r3, #0
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4623      	mov	r3, r4
 800501a:	f000 fa09 	bl	8005430 <xQueueGenericCreateStatic>
 800501e:	4603      	mov	r3, r0
 8005020:	e008      	b.n	8005034 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	4619      	mov	r1, r3
 800502e:	f000 fa71 	bl	8005514 <xQueueGenericCreate>
 8005032:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	bd90      	pop	{r4, r7, pc}

0800503c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <osMessagePut+0x1e>
    ticks = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800505a:	f7ff fdd6 	bl	8004c0a <inHandlerMode>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d018      	beq.n	8005096 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005064:	f107 0210 	add.w	r2, r7, #16
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	2300      	movs	r3, #0
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fbf4 	bl	800585c <xQueueGenericSendFromISR>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <osMessagePut+0x42>
      return osErrorOS;
 800507a:	23ff      	movs	r3, #255	; 0xff
 800507c:	e018      	b.n	80050b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d014      	beq.n	80050ae <osMessagePut+0x72>
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <osMessagePut+0x7c>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	e00b      	b.n	80050ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005096:	f107 0108 	add.w	r1, r7, #8
 800509a:	2300      	movs	r3, #0
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fae2 	bl	8005668 <xQueueGenericSend>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d001      	beq.n	80050ae <osMessagePut+0x72>
      return osErrorOS;
 80050aa:	23ff      	movs	r3, #255	; 0xff
 80050ac:	e000      	b.n	80050b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b08b      	sub	sp, #44	; 0x2c
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	617b      	str	r3, [r7, #20]
    return event;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	461c      	mov	r4, r3
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050ea:	e054      	b.n	8005196 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d103      	bne.n	8005104 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
 8005102:	e009      	b.n	8005118 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d006      	beq.n	8005118 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <osMessageGet+0x5c>
      ticks = 1;
 8005114:	2301      	movs	r3, #1
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005118:	f7ff fd77 	bl	8004c0a <inHandlerMode>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01c      	beq.n	800515c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005122:	f107 0220 	add.w	r2, r7, #32
 8005126:	f107 0314 	add.w	r3, r7, #20
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	68b8      	ldr	r0, [r7, #8]
 8005130:	f000 fe96 	bl	8005e60 <xQueueReceiveFromISR>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d102      	bne.n	8005140 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800513a:	2310      	movs	r3, #16
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e001      	b.n	8005144 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01d      	beq.n	8005186 <osMessageGet+0xca>
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <osMessageGet+0xe4>)
 800514c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	e014      	b.n	8005186 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	3304      	adds	r3, #4
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	4619      	mov	r1, r3
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f000 fc96 	bl	8005a98 <xQueueReceive>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d102      	bne.n	8005178 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005172:	2310      	movs	r3, #16
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e006      	b.n	8005186 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <osMessageGet+0xc6>
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <osMessageGet+0xc8>
 8005182:	2340      	movs	r3, #64	; 0x40
 8005184:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	461c      	mov	r4, r3
 800518a:	f107 0314 	add.w	r3, r7, #20
 800518e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	372c      	adds	r7, #44	; 0x2c
 800519a:	46bd      	mov	sp, r7
 800519c:	bd90      	pop	{r4, r7, pc}
 800519e:	bf00      	nop
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80051ac:	f7ff fd2d 	bl	8004c0a <inHandlerMode>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 feec 	bl	8005f94 <uxQueueMessagesWaitingFromISR>
 80051bc:	4603      	mov	r3, r0
 80051be:	e003      	b.n	80051c8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 feca 	bl	8005f5a <uxQueueMessagesWaiting>
 80051c6:	4603      	mov	r3, r0
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80051d8:	f7ff fd17 	bl	8004c0a <inHandlerMode>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <osMessageDelete+0x16>
    return osErrorISR;
 80051e2:	2382      	movs	r3, #130	; 0x82
 80051e4:	e003      	b.n	80051ee <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 feef 	bl	8005fca <vQueueDelete>

  return osOK; 
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f103 0208 	add.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800520e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f103 0208 	add.w	r2, r3, #8
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f103 0208 	add.w	r2, r3, #8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ae:	d103      	bne.n	80052b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e00c      	b.n	80052d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3308      	adds	r3, #8
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e002      	b.n	80052c6 <vListInsert+0x2e>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d2f6      	bcs.n	80052c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6892      	ldr	r2, [r2, #8]
 8005320:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6852      	ldr	r2, [r2, #4]
 800532a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d103      	bne.n	800533e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	1e5a      	subs	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	e7fe      	b.n	8005386 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005388:	f002 f8d8 	bl	800753c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005394:	68f9      	ldr	r1, [r7, #12]
 8005396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	441a      	add	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	3b01      	subs	r3, #1
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	441a      	add	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	22ff      	movs	r2, #255	; 0xff
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	22ff      	movs	r2, #255	; 0xff
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d114      	bne.n	8005408 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01a      	beq.n	800541c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3310      	adds	r3, #16
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fb80 	bl	8006af0 <xTaskRemoveFromEventList>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d012      	beq.n	800541c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <xQueueGenericReset+0xcc>)
 80053f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	e009      	b.n	800541c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3310      	adds	r3, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fef2 	bl	80051f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3324      	adds	r3, #36	; 0x24
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff feed 	bl	80051f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800541c:	f002 f8bc 	bl	8007598 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005420:	2301      	movs	r3, #1
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d109      	bne.n	8005458 <xQueueGenericCreateStatic+0x28>
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
 8005456:	e7fe      	b.n	8005456 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <xQueueGenericCreateStatic+0x42>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	e7fe      	b.n	8005470 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <xQueueGenericCreateStatic+0x4e>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <xQueueGenericCreateStatic+0x52>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <xQueueGenericCreateStatic+0x54>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <xQueueGenericCreateStatic+0x6c>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	623b      	str	r3, [r7, #32]
 800549a:	e7fe      	b.n	800549a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <xQueueGenericCreateStatic+0x78>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <xQueueGenericCreateStatic+0x7c>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <xQueueGenericCreateStatic+0x7e>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <xQueueGenericCreateStatic+0x96>
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054c6:	2348      	movs	r3, #72	; 0x48
 80054c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b48      	cmp	r3, #72	; 0x48
 80054ce:	d009      	beq.n	80054e4 <xQueueGenericCreateStatic+0xb4>
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e7fe      	b.n	80054e2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f842 	bl	800558e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800550c:	4618      	mov	r0, r3
 800550e:	3730      	adds	r7, #48	; 0x30
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <xQueueGenericCreate+0x28>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	e7fe      	b.n	800553a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e004      	b.n	8005552 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	fb02 f303 	mul.w	r3, r2, r3
 8005550:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3348      	adds	r3, #72	; 0x48
 8005556:	4618      	mov	r0, r3
 8005558:	f002 f90a 	bl	8007770 <pvPortMalloc>
 800555c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00f      	beq.n	8005584 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	3348      	adds	r3, #72	; 0x48
 8005568:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005572:	79fa      	ldrb	r2, [r7, #7]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f805 	bl	800558e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005584:	69bb      	ldr	r3, [r7, #24]
	}
 8005586:	4618      	mov	r0, r3
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e002      	b.n	80055b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055bc:	2101      	movs	r1, #1
 80055be:	69b8      	ldr	r0, [r7, #24]
 80055c0:	f7ff fece 	bl	8005360 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055ec:	2300      	movs	r3, #0
 80055ee:	2200      	movs	r2, #0
 80055f0:	2100      	movs	r1, #0
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f838 	bl	8005668 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800560a:	2301      	movs	r3, #1
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	461a      	mov	r2, r3
 8005616:	6939      	ldr	r1, [r7, #16]
 8005618:	6978      	ldr	r0, [r7, #20]
 800561a:	f7ff ff7b 	bl	8005514 <xQueueGenericCreate>
 800561e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff ffd3 	bl	80055cc <prvInitialiseMutex>

		return pxNewQueue;
 8005626:	68fb      	ldr	r3, [r7, #12]
	}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8
 8005636:	4603      	mov	r3, r0
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800563c:	2301      	movs	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	6939      	ldr	r1, [r7, #16]
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7ff feee 	bl	8005430 <xQueueGenericCreateStatic>
 8005654:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ffb8 	bl	80055cc <prvInitialiseMutex>

		return pxNewQueue;
 800565c:	68fb      	ldr	r3, [r7, #12]
	}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <xQueueGenericSend+0x30>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
 8005696:	e7fe      	b.n	8005696 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSend+0x3e>
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueGenericSend+0x42>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericSend+0x44>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <xQueueGenericSend+0x5c>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
 80056c2:	e7fe      	b.n	80056c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x6a>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <xQueueGenericSend+0x6e>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueGenericSend+0x70>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <xQueueGenericSend+0x88>
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e7fe      	b.n	80056ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056f0:	f001 fbba 	bl	8006e68 <xTaskGetSchedulerState>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <xQueueGenericSend+0x98>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <xQueueGenericSend+0x9c>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <xQueueGenericSend+0x9e>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <xQueueGenericSend+0xb6>
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e7fe      	b.n	800571c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800571e:	f001 ff0d 	bl	800753c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	429a      	cmp	r2, r3
 800572c:	d302      	bcc.n	8005734 <xQueueGenericSend+0xcc>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d129      	bne.n	8005788 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fc80 	bl	800603e <prvCopyDataToQueue>
 800573e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b00      	cmp	r3, #0
 8005746:	d010      	beq.n	800576a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	4618      	mov	r0, r3
 800574e:	f001 f9cf 	bl	8006af0 <xTaskRemoveFromEventList>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005758:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <xQueueGenericSend+0x1f0>)
 800575a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	e00a      	b.n	8005780 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005770:	4b39      	ldr	r3, [pc, #228]	; (8005858 <xQueueGenericSend+0x1f0>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005780:	f001 ff0a 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	e063      	b.n	8005850 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800578e:	f001 ff03 	bl	8007598 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005792:	2300      	movs	r3, #0
 8005794:	e05c      	b.n	8005850 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fa07 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057aa:	f001 fef5 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ae:	f000 ff99 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057b2:	f001 fec3 	bl	800753c <vPortEnterCritical>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057bc:	b25b      	sxtb	r3, r3
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c2:	d103      	bne.n	80057cc <xQueueGenericSend+0x164>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d8:	d103      	bne.n	80057e2 <xQueueGenericSend+0x17a>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e2:	f001 fed9 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e6:	1d3a      	adds	r2, r7, #4
 80057e8:	f107 0314 	add.w	r3, r7, #20
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 f9f6 	bl	8006be0 <xTaskCheckForTimeOut>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d124      	bne.n	8005844 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fc:	f000 fd17 	bl	800622e <prvIsQueueFull>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	3310      	adds	r3, #16
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f94a 	bl	8006aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005816:	f000 fca2 	bl	800615e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800581a:	f000 ff71 	bl	8006700 <xTaskResumeAll>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af7c 	bne.w	800571e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <xQueueGenericSend+0x1f0>)
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	e772      	b.n	800571e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583a:	f000 fc90 	bl	800615e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800583e:	f000 ff5f 	bl	8006700 <xTaskResumeAll>
 8005842:	e76c      	b.n	800571e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fc8a 	bl	800615e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800584a:	f000 ff59 	bl	8006700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800584e:	2300      	movs	r3, #0
		}
	}
}
 8005850:	4618      	mov	r0, r3
 8005852:	3738      	adds	r7, #56	; 0x38
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	e000ed04 	.word	0xe000ed04

0800585c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08e      	sub	sp, #56	; 0x38
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2b00      	cmp	r3, #0
 8005872:	d109      	bne.n	8005888 <xQueueGenericSendFromISR+0x2c>
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	e7fe      	b.n	8005886 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <xQueueGenericSendFromISR+0x3a>
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <xQueueGenericSendFromISR+0x3e>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <xQueueGenericSendFromISR+0x40>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <xQueueGenericSendFromISR+0x58>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	e7fe      	b.n	80058b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d103      	bne.n	80058c2 <xQueueGenericSendFromISR+0x66>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <xQueueGenericSendFromISR+0x6a>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <xQueueGenericSendFromISR+0x6c>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <xQueueGenericSendFromISR+0x84>
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	e7fe      	b.n	80058de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058e0:	f001 ff08 	bl	80076f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058e4:	f3ef 8211 	mrs	r2, BASEPRI
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	61ba      	str	r2, [r7, #24]
 80058fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	429a      	cmp	r2, r3
 800590a:	d302      	bcc.n	8005912 <xQueueGenericSendFromISR+0xb6>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d12c      	bne.n	800596c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005922:	f000 fb8c 	bl	800603e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005926:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592e:	d112      	bne.n	8005956 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d016      	beq.n	8005966 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f8d7 	bl	8006af0 <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e007      	b.n	8005966 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005956:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800595a:	3301      	adds	r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	b25a      	sxtb	r2, r3
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800596a:	e001      	b.n	8005970 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800597c:	4618      	mov	r0, r3
 800597e:	3738      	adds	r7, #56	; 0x38
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08e      	sub	sp, #56	; 0x38
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <xQueueGiveFromISR+0x28>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	e7fe      	b.n	80059aa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <xQueueGiveFromISR+0x44>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	e7fe      	b.n	80059c6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <xQueueGiveFromISR+0x54>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueGiveFromISR+0x58>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <xQueueGiveFromISR+0x5a>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <xQueueGiveFromISR+0x72>
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e7fe      	b.n	80059f4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059f6:	f001 fe7d 	bl	80076f4 <vPortValidateInterruptPriority>
	__asm volatile
 80059fa:	f3ef 8211 	mrs	r2, BASEPRI
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	617a      	str	r2, [r7, #20]
 8005a10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d22b      	bcs.n	8005a7e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a40:	d112      	bne.n	8005a68 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	3324      	adds	r3, #36	; 0x24
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 f84e 	bl	8006af0 <xTaskRemoveFromEventList>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e007      	b.n	8005a78 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	b25a      	sxtb	r2, r3
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7c:	e001      	b.n	8005a82 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3738      	adds	r7, #56	; 0x38
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <xQueueReceive+0x2e>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	623b      	str	r3, [r7, #32]
 8005ac4:	e7fe      	b.n	8005ac4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <xQueueReceive+0x3c>
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <xQueueReceive+0x40>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <xQueueReceive+0x42>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <xQueueReceive+0x5a>
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e7fe      	b.n	8005af0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005af2:	f001 f9b9 	bl	8006e68 <xTaskGetSchedulerState>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <xQueueReceive+0x6a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <xQueueReceive+0x6e>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueReceive+0x70>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <xQueueReceive+0x88>
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e7fe      	b.n	8005b1e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b20:	f001 fd0c 	bl	800753c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01f      	beq.n	8005b70 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b34:	f000 faed 	bl	8006112 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	1e5a      	subs	r2, r3, #1
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00f      	beq.n	8005b68 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 ffcf 	bl	8006af0 <xTaskRemoveFromEventList>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b58:	4b3c      	ldr	r3, [pc, #240]	; (8005c4c <xQueueReceive+0x1b4>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b68:	f001 fd16 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e069      	b.n	8005c44 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b76:	f001 fd0f 	bl	8007598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e062      	b.n	8005c44 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d106      	bne.n	8005b92 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b84:	f107 0310 	add.w	r3, r7, #16
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 f813 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b92:	f001 fd01 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b96:	f000 fda5 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b9a:	f001 fccf 	bl	800753c <vPortEnterCritical>
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba4:	b25b      	sxtb	r3, r3
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005baa:	d103      	bne.n	8005bb4 <xQueueReceive+0x11c>
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc0:	d103      	bne.n	8005bca <xQueueReceive+0x132>
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bca:	f001 fce5 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bce:	1d3a      	adds	r2, r7, #4
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f802 	bl	8006be0 <xTaskCheckForTimeOut>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d123      	bne.n	8005c2a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005be4:	f000 fb0d 	bl	8006202 <prvIsQueueEmpty>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d017      	beq.n	8005c1e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	3324      	adds	r3, #36	; 0x24
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 ff56 	bl	8006aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfe:	f000 faae 	bl	800615e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c02:	f000 fd7d 	bl	8006700 <xTaskResumeAll>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d189      	bne.n	8005b20 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <xQueueReceive+0x1b4>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	e780      	b.n	8005b20 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c20:	f000 fa9d 	bl	800615e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c24:	f000 fd6c 	bl	8006700 <xTaskResumeAll>
 8005c28:	e77a      	b.n	8005b20 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2c:	f000 fa97 	bl	800615e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c30:	f000 fd66 	bl	8006700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c36:	f000 fae4 	bl	8006202 <prvIsQueueEmpty>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f43f af6f 	beq.w	8005b20 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	e000ed04 	.word	0xe000ed04

08005c50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <xQueueSemaphoreTake+0x30>
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	e7fe      	b.n	8005c7e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <xQueueSemaphoreTake+0x4c>
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e7fe      	b.n	8005c9a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c9c:	f001 f8e4 	bl	8006e68 <xTaskGetSchedulerState>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <xQueueSemaphoreTake+0x5c>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueSemaphoreTake+0x60>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueSemaphoreTake+0x62>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <xQueueSemaphoreTake+0x7a>
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61bb      	str	r3, [r7, #24]
 8005cc8:	e7fe      	b.n	8005cc8 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cca:	f001 fc37 	bl	800753c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d024      	beq.n	8005d24 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	1e5a      	subs	r2, r3, #1
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cea:	f001 fa83 	bl	80071f4 <pvTaskIncrementMutexHeldCount>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fef5 	bl	8006af0 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <xQueueSemaphoreTake+0x20c>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d1c:	f001 fc3c 	bl	8007598 <vPortExitCritical>
				return pdPASS;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e096      	b.n	8005e52 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d110      	bne.n	8005d4c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <xQueueSemaphoreTake+0xf4>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e7fe      	b.n	8005d42 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d44:	f001 fc28 	bl	8007598 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e082      	b.n	8005e52 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d52:	f107 030c 	add.w	r3, r7, #12
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 ff2c 	bl	8006bb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d60:	f001 fc1a 	bl	8007598 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d64:	f000 fcbe 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d68:	f001 fbe8 	bl	800753c <vPortEnterCritical>
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d78:	d103      	bne.n	8005d82 <xQueueSemaphoreTake+0x132>
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d88:	b25b      	sxtb	r3, r3
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8e:	d103      	bne.n	8005d98 <xQueueSemaphoreTake+0x148>
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d98:	f001 fbfe 	bl	8007598 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	f107 030c 	add.w	r3, r7, #12
 8005da2:	4611      	mov	r1, r2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff1b 	bl	8006be0 <xTaskCheckForTimeOut>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d132      	bne.n	8005e16 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005db2:	f000 fa26 	bl	8006202 <prvIsQueueEmpty>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d026      	beq.n	8005e0a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d109      	bne.n	8005dd8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005dc4:	f001 fbba 	bl	800753c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f869 	bl	8006ea4 <xTaskPriorityInherit>
 8005dd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005dd4:	f001 fbe0 	bl	8007598 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	3324      	adds	r3, #36	; 0x24
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fe61 	bl	8006aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de8:	f000 f9b9 	bl	800615e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dec:	f000 fc88 	bl	8006700 <xTaskResumeAll>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f47f af69 	bne.w	8005cca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <xQueueSemaphoreTake+0x20c>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	e75f      	b.n	8005cca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e0c:	f000 f9a7 	bl	800615e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e10:	f000 fc76 	bl	8006700 <xTaskResumeAll>
 8005e14:	e759      	b.n	8005cca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e18:	f000 f9a1 	bl	800615e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e1c:	f000 fc70 	bl	8006700 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e22:	f000 f9ee 	bl	8006202 <prvIsQueueEmpty>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f43f af4e 	beq.w	8005cca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005e34:	f001 fb82 	bl	800753c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e3a:	f000 f8e8 	bl	800600e <prvGetDisinheritPriorityAfterTimeout>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 f936 	bl	80070b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e4c:	f001 fba4 	bl	8007598 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3738      	adds	r7, #56	; 0x38
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08e      	sub	sp, #56	; 0x38
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <xQueueReceiveFromISR+0x2a>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	623b      	str	r3, [r7, #32]
 8005e88:	e7fe      	b.n	8005e88 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d103      	bne.n	8005e98 <xQueueReceiveFromISR+0x38>
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <xQueueReceiveFromISR+0x3c>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <xQueueReceiveFromISR+0x3e>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <xQueueReceiveFromISR+0x56>
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb6:	f001 fc1d 	bl	80076f4 <vPortValidateInterruptPriority>
	__asm volatile
 8005eba:	f3ef 8211 	mrs	r2, BASEPRI
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61ba      	str	r2, [r7, #24]
 8005ed0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ed2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02f      	beq.n	8005f42 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef0:	f000 f90f 	bl	8006112 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	1e5a      	subs	r2, r3, #1
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005efc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f04:	d112      	bne.n	8005f2c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	3310      	adds	r3, #16
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fdec 	bl	8006af0 <xTaskRemoveFromEventList>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e007      	b.n	8005f3c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f30:	3301      	adds	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	b25a      	sxtb	r2, r3
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f40:	e001      	b.n	8005f46 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3738      	adds	r7, #56	; 0x38
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d109      	bne.n	8005f7c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	e7fe      	b.n	8005f7a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005f7c:	f001 fade 	bl	800753c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005f86:	f001 fb07 	bl	8007598 <vPortExitCritical>

	return uxReturn;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <uxQueueMessagesWaitingFromISR+0x22>
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	e7fe      	b.n	8005fb4 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <vQueueDelete+0x26>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	e7fe      	b.n	8005fee <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f935 	bl	8006260 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f001 fc77 	bl	80078f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d006      	beq.n	800602c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f1c3 0307 	rsb	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e001      	b.n	8006030 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006030:	68fb      	ldr	r3, [r7, #12]
	}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10d      	bne.n	8006078 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d14d      	bne.n	8006100 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ffa1 	bl	8006fb0 <xTaskPriorityDisinherit>
 800606e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	e043      	b.n	8006100 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d119      	bne.n	80060b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6898      	ldr	r0, [r3, #8]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	461a      	mov	r2, r3
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	f010 fc04 	bl	8016896 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d32b      	bcc.n	8006100 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	e026      	b.n	8006100 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68d8      	ldr	r0, [r3, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	461a      	mov	r2, r3
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	f010 fbea 	bl	8016896 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	425b      	negs	r3, r3
 80060cc:	441a      	add	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d207      	bcs.n	80060ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	425b      	negs	r3, r3
 80060e8:	441a      	add	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d105      	bne.n	8006100 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006108:	697b      	ldr	r3, [r7, #20]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d018      	beq.n	8006156 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	441a      	add	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d303      	bcc.n	8006146 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68d9      	ldr	r1, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	461a      	mov	r2, r3
 8006150:	6838      	ldr	r0, [r7, #0]
 8006152:	f010 fba0 	bl	8016896 <memcpy>
	}
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006166:	f001 f9e9 	bl	800753c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006170:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006172:	e011      	b.n	8006198 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fcb5 	bl	8006af0 <xTaskRemoveFromEventList>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800618c:	f000 fd88 	bl	8006ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	3b01      	subs	r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	dce9      	bgt.n	8006174 <prvUnlockQueue+0x16>
 80061a0:	e000      	b.n	80061a4 <prvUnlockQueue+0x46>
					break;
 80061a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	22ff      	movs	r2, #255	; 0xff
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061ac:	f001 f9f4 	bl	8007598 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061b0:	f001 f9c4 	bl	800753c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061bc:	e011      	b.n	80061e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3310      	adds	r3, #16
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fc90 	bl	8006af0 <xTaskRemoveFromEventList>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061d6:	f000 fd63 	bl	8006ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	3b01      	subs	r3, #1
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dce9      	bgt.n	80061be <prvUnlockQueue+0x60>
 80061ea:	e000      	b.n	80061ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061f6:	f001 f9cf 	bl	8007598 <vPortExitCritical>
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800620a:	f001 f997 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e001      	b.n	8006220 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006220:	f001 f9ba 	bl	8007598 <vPortExitCritical>

	return xReturn;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006236:	f001 f981 	bl	800753c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006242:	429a      	cmp	r2, r3
 8006244:	d102      	bne.n	800624c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006246:	2301      	movs	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e001      	b.n	8006250 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f001 f9a2 	bl	8007598 <vPortExitCritical>

	return xReturn;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	e016      	b.n	800629c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800626e:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <vQueueUnregisterQueue+0x50>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	d10b      	bne.n	8006296 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800627e:	4a0c      	ldr	r2, [pc, #48]	; (80062b0 <vQueueUnregisterQueue+0x50>)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2100      	movs	r1, #0
 8006284:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <vQueueUnregisterQueue+0x50>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4413      	add	r3, r2
 8006290:	2200      	movs	r2, #0
 8006292:	605a      	str	r2, [r3, #4]
				break;
 8006294:	e005      	b.n	80062a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b07      	cmp	r3, #7
 80062a0:	d9e5      	bls.n	800626e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	2000c348 	.word	0x2000c348

080062b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08e      	sub	sp, #56	; 0x38
 80062b8:	af04      	add	r7, sp, #16
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <xTaskCreateStatic+0x28>
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	623b      	str	r3, [r7, #32]
 80062da:	e7fe      	b.n	80062da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <xTaskCreateStatic+0x42>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e7fe      	b.n	80062f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062f6:	2354      	movs	r3, #84	; 0x54
 80062f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b54      	cmp	r3, #84	; 0x54
 80062fe:	d009      	beq.n	8006314 <xTaskCreateStatic+0x60>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e7fe      	b.n	8006312 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d01e      	beq.n	8006358 <xTaskCreateStatic+0xa4>
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01b      	beq.n	8006358 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006328:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2202      	movs	r2, #2
 800632e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006332:	2300      	movs	r3, #0
 8006334:	9303      	str	r3, [sp, #12]
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	9302      	str	r3, [sp, #8]
 800633a:	f107 0314 	add.w	r3, r7, #20
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f850 	bl	80063f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006352:	f000 f8cb 	bl	80064ec <prvAddNewTaskToReadyList>
 8006356:	e001      	b.n	800635c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800635c:	697b      	ldr	r3, [r7, #20]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	3728      	adds	r7, #40	; 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08c      	sub	sp, #48	; 0x30
 800636a:	af04      	add	r7, sp, #16
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4618      	mov	r0, r3
 800637c:	f001 f9f8 	bl	8007770 <pvPortMalloc>
 8006380:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00e      	beq.n	80063a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006388:	2054      	movs	r0, #84	; 0x54
 800638a:	f001 f9f1 	bl	8007770 <pvPortMalloc>
 800638e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
 800639c:	e005      	b.n	80063aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f001 faa8 	bl	80078f4 <vPortFree>
 80063a4:	e001      	b.n	80063aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d017      	beq.n	80063e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063b8:	88fa      	ldrh	r2, [r7, #6]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 f80e 	bl	80063f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063d4:	69f8      	ldr	r0, [r7, #28]
 80063d6:	f000 f889 	bl	80064ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063da:	2301      	movs	r3, #1
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e002      	b.n	80063e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063e6:	69bb      	ldr	r3, [r7, #24]
	}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3720      	adds	r7, #32
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006408:	3b01      	subs	r3, #1
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <prvInitialiseNewTask+0x46>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	e7fe      	b.n	8006434 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e012      	b.n	8006462 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	7819      	ldrb	r1, [r3, #0]
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	3334      	adds	r3, #52	; 0x34
 800644c:	460a      	mov	r2, r1
 800644e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d9e9      	bls.n	800643c <prvInitialiseNewTask+0x4c>
 8006468:	e000      	b.n	800646c <prvInitialiseNewTask+0x7c>
		{
			break;
 800646a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	2b06      	cmp	r3, #6
 8006478:	d901      	bls.n	800647e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800647a:	2306      	movs	r3, #6
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	2200      	movs	r2, #0
 800648e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	3304      	adds	r3, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fece 	bl	8005236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	3318      	adds	r3, #24
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fec9 	bl	8005236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ac:	f1c3 0207 	rsb	r2, r3, #7
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2200      	movs	r2, #0
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f000 ff0b 	bl	80072e8 <pxPortInitialiseStack>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064e4:	bf00      	nop
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064f4:	f001 f822 	bl	800753c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064f8:	4b2a      	ldr	r3, [pc, #168]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 8006500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006502:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800650a:	4a27      	ldr	r2, [pc, #156]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006510:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <prvAddNewTaskToReadyList+0xb8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d110      	bne.n	800653a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006518:	f000 fbe6 	bl	8006ce8 <prvInitialiseTaskLists>
 800651c:	e00d      	b.n	800653a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <prvAddNewTaskToReadyList+0xc0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006526:	4b20      	ldr	r3, [pc, #128]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	429a      	cmp	r2, r3
 8006532:	d802      	bhi.n	800653a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800653a:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <prvAddNewTaskToReadyList+0xc4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <prvAddNewTaskToReadyList+0xc4>)
 8006542:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	4b19      	ldr	r3, [pc, #100]	; (80065b4 <prvAddNewTaskToReadyList+0xc8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4313      	orrs	r3, r2
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <prvAddNewTaskToReadyList+0xc8>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <prvAddNewTaskToReadyList+0xcc>)
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe fe6f 	bl	8005250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006572:	f001 f811 	bl	8007598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006576:	4b0d      	ldr	r3, [pc, #52]	; (80065ac <prvAddNewTaskToReadyList+0xc0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvAddNewTaskToReadyList+0xbc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006588:	429a      	cmp	r2, r3
 800658a:	d207      	bcs.n	800659c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <prvAddNewTaskToReadyList+0xd0>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000760 	.word	0x20000760
 80065a8:	20000660 	.word	0x20000660
 80065ac:	2000076c 	.word	0x2000076c
 80065b0:	2000077c 	.word	0x2000077c
 80065b4:	20000768 	.word	0x20000768
 80065b8:	20000664 	.word	0x20000664
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065d2:	4b13      	ldr	r3, [pc, #76]	; (8006620 <vTaskDelay+0x60>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <vTaskDelay+0x2e>
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	e7fe      	b.n	80065ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80065ee:	f000 f879 	bl	80066e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065f2:	2100      	movs	r1, #0
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fe11 	bl	800721c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065fa:	f000 f881 	bl	8006700 <xTaskResumeAll>
 80065fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <vTaskDelay+0x64>)
 8006608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000788 	.word	0x20000788
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006636:	463a      	mov	r2, r7
 8006638:	1d39      	adds	r1, r7, #4
 800663a:	f107 0308 	add.w	r3, r7, #8
 800663e:	4618      	mov	r0, r3
 8006640:	f7f9 ffbe 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	9202      	str	r2, [sp, #8]
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	2300      	movs	r3, #0
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	460a      	mov	r2, r1
 8006656:	491d      	ldr	r1, [pc, #116]	; (80066cc <vTaskStartScheduler+0xa4>)
 8006658:	481d      	ldr	r0, [pc, #116]	; (80066d0 <vTaskStartScheduler+0xa8>)
 800665a:	f7ff fe2b 	bl	80062b4 <xTaskCreateStatic>
 800665e:	4602      	mov	r2, r0
 8006660:	4b1c      	ldr	r3, [pc, #112]	; (80066d4 <vTaskStartScheduler+0xac>)
 8006662:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <vTaskStartScheduler+0xac>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e001      	b.n	8006676 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d115      	bne.n	80066a8 <vTaskStartScheduler+0x80>
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <vTaskStartScheduler+0xb0>)
 8006690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <vTaskStartScheduler+0xb4>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800669c:	4b10      	ldr	r3, [pc, #64]	; (80066e0 <vTaskStartScheduler+0xb8>)
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066a2:	f000 fead 	bl	8007400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066a6:	e00d      	b.n	80066c4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ae:	d109      	bne.n	80066c4 <vTaskStartScheduler+0x9c>
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e7fe      	b.n	80066c2 <vTaskStartScheduler+0x9a>
}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	08017cec 	.word	0x08017cec
 80066d0:	08006cb9 	.word	0x08006cb9
 80066d4:	20000784 	.word	0x20000784
 80066d8:	20000780 	.word	0x20000780
 80066dc:	2000076c 	.word	0x2000076c
 80066e0:	20000764 	.word	0x20000764

080066e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <vTaskSuspendAll+0x18>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a03      	ldr	r2, [pc, #12]	; (80066fc <vTaskSuspendAll+0x18>)
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	20000788 	.word	0x20000788

08006700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670e:	4b41      	ldr	r3, [pc, #260]	; (8006814 <xTaskResumeAll+0x114>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <xTaskResumeAll+0x2a>
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	e7fe      	b.n	8006728 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800672a:	f000 ff07 	bl	800753c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <xTaskResumeAll+0x114>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3b01      	subs	r3, #1
 8006734:	4a37      	ldr	r2, [pc, #220]	; (8006814 <xTaskResumeAll+0x114>)
 8006736:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006738:	4b36      	ldr	r3, [pc, #216]	; (8006814 <xTaskResumeAll+0x114>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d161      	bne.n	8006804 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006740:	4b35      	ldr	r3, [pc, #212]	; (8006818 <xTaskResumeAll+0x118>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05d      	beq.n	8006804 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006748:	e02e      	b.n	80067a8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800674a:	4b34      	ldr	r3, [pc, #208]	; (800681c <xTaskResumeAll+0x11c>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3318      	adds	r3, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fdd7 	bl	800530a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fdd2 	bl	800530a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	2201      	movs	r2, #1
 800676c:	409a      	lsls	r2, r3
 800676e:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <xTaskResumeAll+0x120>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <xTaskResumeAll+0x120>)
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a27      	ldr	r2, [pc, #156]	; (8006824 <xTaskResumeAll+0x124>)
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fe fd5e 	bl	8005250 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006798:	4b23      	ldr	r3, [pc, #140]	; (8006828 <xTaskResumeAll+0x128>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <xTaskResumeAll+0x12c>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a8:	4b1c      	ldr	r3, [pc, #112]	; (800681c <xTaskResumeAll+0x11c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1cc      	bne.n	800674a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067b6:	f000 fb31 	bl	8006e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067ba:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <xTaskResumeAll+0x130>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067c6:	f000 f859 	bl	800687c <xTaskIncrementTick>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <xTaskResumeAll+0x12c>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f1      	bne.n	80067c6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <xTaskResumeAll+0x130>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <xTaskResumeAll+0x12c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <xTaskResumeAll+0x134>)
 80067f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006804:	f000 fec8 	bl	8007598 <vPortExitCritical>

	return xAlreadyYielded;
 8006808:	68bb      	ldr	r3, [r7, #8]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000788 	.word	0x20000788
 8006818:	20000760 	.word	0x20000760
 800681c:	20000720 	.word	0x20000720
 8006820:	20000768 	.word	0x20000768
 8006824:	20000664 	.word	0x20000664
 8006828:	20000660 	.word	0x20000660
 800682c:	20000774 	.word	0x20000774
 8006830:	20000770 	.word	0x20000770
 8006834:	e000ed04 	.word	0xe000ed04

08006838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <xTaskGetTickCount+0x1c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006844:	687b      	ldr	r3, [r7, #4]
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000764 	.word	0x20000764

08006858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685e:	f000 ff49 	bl	80076f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006866:	4b04      	ldr	r3, [pc, #16]	; (8006878 <xTaskGetTickCountFromISR+0x20>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800686c:	683b      	ldr	r3, [r7, #0]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000764 	.word	0x20000764

0800687c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006886:	4b50      	ldr	r3, [pc, #320]	; (80069c8 <xTaskIncrementTick+0x14c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 808c 	bne.w	80069a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006890:	4b4e      	ldr	r3, [pc, #312]	; (80069cc <xTaskIncrementTick+0x150>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3301      	adds	r3, #1
 8006896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006898:	4a4c      	ldr	r2, [pc, #304]	; (80069cc <xTaskIncrementTick+0x150>)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11f      	bne.n	80068e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80068a4:	4b4a      	ldr	r3, [pc, #296]	; (80069d0 <xTaskIncrementTick+0x154>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <xTaskIncrementTick+0x46>
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	e7fe      	b.n	80068c0 <xTaskIncrementTick+0x44>
 80068c2:	4b43      	ldr	r3, [pc, #268]	; (80069d0 <xTaskIncrementTick+0x154>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	4b42      	ldr	r3, [pc, #264]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a40      	ldr	r2, [pc, #256]	; (80069d0 <xTaskIncrementTick+0x154>)
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	4a40      	ldr	r2, [pc, #256]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4b40      	ldr	r3, [pc, #256]	; (80069d8 <xTaskIncrementTick+0x15c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a3e      	ldr	r2, [pc, #248]	; (80069d8 <xTaskIncrementTick+0x15c>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	f000 fa9c 	bl	8006e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068e4:	4b3d      	ldr	r3, [pc, #244]	; (80069dc <xTaskIncrementTick+0x160>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d34d      	bcc.n	800698a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ee:	4b38      	ldr	r3, [pc, #224]	; (80069d0 <xTaskIncrementTick+0x154>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <xTaskIncrementTick+0x80>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <xTaskIncrementTick+0x82>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006902:	4b36      	ldr	r3, [pc, #216]	; (80069dc <xTaskIncrementTick+0x160>)
 8006904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006908:	601a      	str	r2, [r3, #0]
					break;
 800690a:	e03e      	b.n	800698a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800690c:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <xTaskIncrementTick+0x154>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d203      	bcs.n	800692c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006924:	4a2d      	ldr	r2, [pc, #180]	; (80069dc <xTaskIncrementTick+0x160>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
						break;
 800692a:	e02e      	b.n	800698a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fcea 	bl	800530a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3318      	adds	r3, #24
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fce1 	bl	800530a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	4b23      	ldr	r3, [pc, #140]	; (80069e0 <xTaskIncrementTick+0x164>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <xTaskIncrementTick+0x164>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <xTaskIncrementTick+0x168>)
 8006968:	441a      	add	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe fc6d 	bl	8005250 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <xTaskIncrementTick+0x16c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	429a      	cmp	r2, r3
 8006982:	d3b4      	bcc.n	80068ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006988:	e7b1      	b.n	80068ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800698a:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <xTaskIncrementTick+0x16c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006990:	4914      	ldr	r1, [pc, #80]	; (80069e4 <xTaskIncrementTick+0x168>)
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d907      	bls.n	80069b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e004      	b.n	80069b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069a8:	4b10      	ldr	r3, [pc, #64]	; (80069ec <xTaskIncrementTick+0x170>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a0f      	ldr	r2, [pc, #60]	; (80069ec <xTaskIncrementTick+0x170>)
 80069b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <xTaskIncrementTick+0x174>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069be:	697b      	ldr	r3, [r7, #20]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000788 	.word	0x20000788
 80069cc:	20000764 	.word	0x20000764
 80069d0:	20000718 	.word	0x20000718
 80069d4:	2000071c 	.word	0x2000071c
 80069d8:	20000778 	.word	0x20000778
 80069dc:	20000780 	.word	0x20000780
 80069e0:	20000768 	.word	0x20000768
 80069e4:	20000664 	.word	0x20000664
 80069e8:	20000660 	.word	0x20000660
 80069ec:	20000770 	.word	0x20000770
 80069f0:	20000774 	.word	0x20000774

080069f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069fa:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <vTaskSwitchContext+0xa0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a02:	4b25      	ldr	r3, [pc, #148]	; (8006a98 <vTaskSwitchContext+0xa4>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a08:	e03e      	b.n	8006a88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006a0a:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <vTaskSwitchContext+0xa4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <vTaskSwitchContext+0xa8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	fab3 f383 	clz	r3, r3
 8006a1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	f1c3 031f 	rsb	r3, r3, #31
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	491e      	ldr	r1, [pc, #120]	; (8006aa0 <vTaskSwitchContext+0xac>)
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	607b      	str	r3, [r7, #4]
 8006a4c:	e7fe      	b.n	8006a4c <vTaskSwitchContext+0x58>
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <vTaskSwitchContext+0xac>)
 8006a5a:	4413      	add	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d104      	bne.n	8006a7e <vTaskSwitchContext+0x8a>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a07      	ldr	r2, [pc, #28]	; (8006aa4 <vTaskSwitchContext+0xb0>)
 8006a86:	6013      	str	r3, [r2, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	20000788 	.word	0x20000788
 8006a98:	20000774 	.word	0x20000774
 8006a9c:	20000768 	.word	0x20000768
 8006aa0:	20000664 	.word	0x20000664
 8006aa4:	20000660 	.word	0x20000660

08006aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d109      	bne.n	8006acc <vTaskPlaceOnEventList+0x24>
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e7fe      	b.n	8006aca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <vTaskPlaceOnEventList+0x44>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fe fbdf 	bl	8005298 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ada:	2101      	movs	r1, #1
 8006adc:	6838      	ldr	r0, [r7, #0]
 8006ade:	f000 fb9d 	bl	800721c <prvAddCurrentTaskToDelayedList>
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000660 	.word	0x20000660

08006af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <xTaskRemoveFromEventList+0x2a>
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e7fe      	b.n	8006b18 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fbf3 	bl	800530a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <xTaskRemoveFromEventList+0xac>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11c      	bne.n	8006b66 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe fbea 	bl	800530a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <xTaskRemoveFromEventList+0xb0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <xTaskRemoveFromEventList+0xb0>)
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <xTaskRemoveFromEventList+0xb4>)
 8006b56:	441a      	add	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7fe fb76 	bl	8005250 <vListInsertEnd>
 8006b64:	e005      	b.n	8006b72 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3318      	adds	r3, #24
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	480e      	ldr	r0, [pc, #56]	; (8006ba8 <xTaskRemoveFromEventList+0xb8>)
 8006b6e:	f7fe fb6f 	bl	8005250 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <xTaskRemoveFromEventList+0xbc>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d905      	bls.n	8006b8c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <xTaskRemoveFromEventList+0xc0>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	e001      	b.n	8006b90 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b90:	697b      	ldr	r3, [r7, #20]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000788 	.word	0x20000788
 8006ba0:	20000768 	.word	0x20000768
 8006ba4:	20000664 	.word	0x20000664
 8006ba8:	20000720 	.word	0x20000720
 8006bac:	20000660 	.word	0x20000660
 8006bb0:	20000774 	.word	0x20000774

08006bb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <vTaskInternalSetTimeOutState+0x24>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <vTaskInternalSetTimeOutState+0x28>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000778 	.word	0x20000778
 8006bdc:	20000764 	.word	0x20000764

08006be0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <xTaskCheckForTimeOut+0x24>
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e7fe      	b.n	8006c02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <xTaskCheckForTimeOut+0x3e>
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e7fe      	b.n	8006c1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006c1e:	f000 fc8d 	bl	800753c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c22:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <xTaskCheckForTimeOut+0xb8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3a:	d102      	bne.n	8006c42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e023      	b.n	8006c8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <xTaskCheckForTimeOut+0xbc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d007      	beq.n	8006c5e <xTaskCheckForTimeOut+0x7e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d302      	bcc.n	8006c5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e015      	b.n	8006c8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d20b      	bcs.n	8006c80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ff9d 	bl	8006bb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e004      	b.n	8006c8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c8a:	f000 fc85 	bl	8007598 <vPortExitCritical>

	return xReturn;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000764 	.word	0x20000764
 8006c9c:	20000778 	.word	0x20000778

08006ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <vTaskMissedYield+0x14>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
}
 8006caa:	bf00      	nop
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	20000774 	.word	0x20000774

08006cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cc0:	f000 f852 	bl	8006d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <prvIdleTask+0x28>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d9f9      	bls.n	8006cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <prvIdleTask+0x2c>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cdc:	e7f0      	b.n	8006cc0 <prvIdleTask+0x8>
 8006cde:	bf00      	nop
 8006ce0:	20000664 	.word	0x20000664
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	e00c      	b.n	8006d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <prvInitialiseTaskLists+0x60>)
 8006d00:	4413      	add	r3, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe fa77 	bl	80051f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d9ef      	bls.n	8006cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d14:	480d      	ldr	r0, [pc, #52]	; (8006d4c <prvInitialiseTaskLists+0x64>)
 8006d16:	f7fe fa6e 	bl	80051f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d1a:	480d      	ldr	r0, [pc, #52]	; (8006d50 <prvInitialiseTaskLists+0x68>)
 8006d1c:	f7fe fa6b 	bl	80051f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d20:	480c      	ldr	r0, [pc, #48]	; (8006d54 <prvInitialiseTaskLists+0x6c>)
 8006d22:	f7fe fa68 	bl	80051f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d26:	480c      	ldr	r0, [pc, #48]	; (8006d58 <prvInitialiseTaskLists+0x70>)
 8006d28:	f7fe fa65 	bl	80051f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d2c:	480b      	ldr	r0, [pc, #44]	; (8006d5c <prvInitialiseTaskLists+0x74>)
 8006d2e:	f7fe fa62 	bl	80051f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <prvInitialiseTaskLists+0x78>)
 8006d34:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <prvInitialiseTaskLists+0x64>)
 8006d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <prvInitialiseTaskLists+0x7c>)
 8006d3a:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <prvInitialiseTaskLists+0x68>)
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000664 	.word	0x20000664
 8006d4c:	200006f0 	.word	0x200006f0
 8006d50:	20000704 	.word	0x20000704
 8006d54:	20000720 	.word	0x20000720
 8006d58:	20000734 	.word	0x20000734
 8006d5c:	2000074c 	.word	0x2000074c
 8006d60:	20000718 	.word	0x20000718
 8006d64:	2000071c 	.word	0x2000071c

08006d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d6e:	e019      	b.n	8006da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d70:	f000 fbe4 	bl	800753c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <prvCheckTasksWaitingTermination+0x4c>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fac2 	bl	800530a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <prvCheckTasksWaitingTermination+0x50>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	; (8006db8 <prvCheckTasksWaitingTermination+0x50>)
 8006d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d90:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <prvCheckTasksWaitingTermination+0x54>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <prvCheckTasksWaitingTermination+0x54>)
 8006d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d9a:	f000 fbfd 	bl	8007598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f80e 	bl	8006dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <prvCheckTasksWaitingTermination+0x54>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e1      	bne.n	8006d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000734 	.word	0x20000734
 8006db8:	20000760 	.word	0x20000760
 8006dbc:	20000748 	.word	0x20000748

08006dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d108      	bne.n	8006de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fd8c 	bl	80078f4 <vPortFree>
				vPortFree( pxTCB );
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fd89 	bl	80078f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006de2:	e017      	b.n	8006e14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d103      	bne.n	8006df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fd80 	bl	80078f4 <vPortFree>
	}
 8006df4:	e00e      	b.n	8006e14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d009      	beq.n	8006e14 <prvDeleteTCB+0x54>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e7fe      	b.n	8006e12 <prvDeleteTCB+0x52>
	}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <prvResetNextTaskUnblockTime+0x44>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <prvResetNextTaskUnblockTime+0x14>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <prvResetNextTaskUnblockTime+0x16>
 8006e30:	2300      	movs	r3, #0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <prvResetNextTaskUnblockTime+0x48>)
 8006e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e3e:	e008      	b.n	8006e52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <prvResetNextTaskUnblockTime+0x44>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4a05      	ldr	r2, [pc, #20]	; (8006e64 <prvResetNextTaskUnblockTime+0x48>)
 8006e50:	6013      	str	r3, [r2, #0]
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000718 	.word	0x20000718
 8006e64:	20000780 	.word	0x20000780

08006e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e6e:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <xTaskGetSchedulerState+0x34>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e76:	2301      	movs	r3, #1
 8006e78:	607b      	str	r3, [r7, #4]
 8006e7a:	e008      	b.n	8006e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e7c:	4b08      	ldr	r3, [pc, #32]	; (8006ea0 <xTaskGetSchedulerState+0x38>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e84:	2302      	movs	r3, #2
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	e001      	b.n	8006e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e8e:	687b      	ldr	r3, [r7, #4]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000076c 	.word	0x2000076c
 8006ea0:	20000788 	.word	0x20000788

08006ea4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d06e      	beq.n	8006f98 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	4b39      	ldr	r3, [pc, #228]	; (8006fa4 <xTaskPriorityInherit+0x100>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d25e      	bcs.n	8006f86 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	db06      	blt.n	8006ede <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <xTaskPriorityInherit+0x100>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	f1c3 0207 	rsb	r2, r3, #7
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6959      	ldr	r1, [r3, #20]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a2e      	ldr	r2, [pc, #184]	; (8006fa8 <xTaskPriorityInherit+0x104>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d101      	bne.n	8006efa <xTaskPriorityInherit+0x56>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xTaskPriorityInherit+0x58>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d03a      	beq.n	8006f76 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fa00 	bl	800530a <uxListRemove>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d115      	bne.n	8006f3c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	4924      	ldr	r1, [pc, #144]	; (8006fa8 <xTaskPriorityInherit+0x104>)
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <xTaskPriorityInherit+0x98>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	43da      	mvns	r2, r3
 8006f32:	4b1e      	ldr	r3, [pc, #120]	; (8006fac <xTaskPriorityInherit+0x108>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4013      	ands	r3, r2
 8006f38:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <xTaskPriorityInherit+0x108>)
 8006f3a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <xTaskPriorityInherit+0x100>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	4b17      	ldr	r3, [pc, #92]	; (8006fac <xTaskPriorityInherit+0x108>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a15      	ldr	r2, [pc, #84]	; (8006fac <xTaskPriorityInherit+0x108>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a10      	ldr	r2, [pc, #64]	; (8006fa8 <xTaskPriorityInherit+0x104>)
 8006f66:	441a      	add	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fe f96e 	bl	8005250 <vListInsertEnd>
 8006f74:	e004      	b.n	8006f80 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <xTaskPriorityInherit+0x100>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e008      	b.n	8006f98 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <xTaskPriorityInherit+0x100>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d201      	bcs.n	8006f98 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f98:	68fb      	ldr	r3, [r7, #12]
	}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000660 	.word	0x20000660
 8006fa8:	20000664 	.word	0x20000664
 8006fac:	20000768 	.word	0x20000768

08006fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d06c      	beq.n	80070a0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fc6:	4b39      	ldr	r3, [pc, #228]	; (80070ac <xTaskPriorityDisinherit+0xfc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d009      	beq.n	8006fe4 <xTaskPriorityDisinherit+0x34>
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	e7fe      	b.n	8006fe2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <xTaskPriorityDisinherit+0x50>
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	e7fe      	b.n	8006ffe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	429a      	cmp	r2, r3
 8007014:	d044      	beq.n	80070a0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701a:	2b00      	cmp	r3, #0
 800701c:	d140      	bne.n	80070a0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	3304      	adds	r3, #4
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f971 	bl	800530a <uxListRemove>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d115      	bne.n	800705a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	491f      	ldr	r1, [pc, #124]	; (80070b0 <xTaskPriorityDisinherit+0x100>)
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10a      	bne.n	800705a <xTaskPriorityDisinherit+0xaa>
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	2201      	movs	r2, #1
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43da      	mvns	r2, r3
 8007050:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <xTaskPriorityDisinherit+0x104>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4013      	ands	r3, r2
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <xTaskPriorityDisinherit+0x104>)
 8007058:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	f1c3 0207 	rsb	r2, r3, #7
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	2201      	movs	r2, #1
 8007074:	409a      	lsls	r2, r3
 8007076:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <xTaskPriorityDisinherit+0x104>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4313      	orrs	r3, r2
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <xTaskPriorityDisinherit+0x104>)
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007084:	4613      	mov	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4a08      	ldr	r2, [pc, #32]	; (80070b0 <xTaskPriorityDisinherit+0x100>)
 800708e:	441a      	add	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4610      	mov	r0, r2
 8007098:	f7fe f8da 	bl	8005250 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070a0:	697b      	ldr	r3, [r7, #20]
	}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000660 	.word	0x20000660
 80070b0:	20000664 	.word	0x20000664
 80070b4:	20000768 	.word	0x20000768

080070b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070c6:	2301      	movs	r3, #1
 80070c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8086 	beq.w	80071de <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <vTaskPriorityDisinheritAfterTimeout+0x36>
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e7fe      	b.n	80070ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d902      	bls.n	80070fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e002      	b.n	8007104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	429a      	cmp	r2, r3
 800710c:	d067      	beq.n	80071de <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	429a      	cmp	r2, r3
 8007116:	d162      	bne.n	80071de <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007118:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d109      	bne.n	8007136 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	e7fe      	b.n	8007134 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	db04      	blt.n	8007154 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f1c3 0207 	rsb	r2, r3, #7
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	6959      	ldr	r1, [r3, #20]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4a22      	ldr	r2, [pc, #136]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007164:	4413      	add	r3, r2
 8007166:	4299      	cmp	r1, r3
 8007168:	d101      	bne.n	800716e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d034      	beq.n	80071de <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe f8c6 	bl	800530a <uxListRemove>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d115      	bne.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4918      	ldr	r1, [pc, #96]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719e:	2201      	movs	r2, #1
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	43da      	mvns	r2, r3
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4013      	ands	r3, r2
 80071ac:	4a10      	ldr	r2, [pc, #64]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071ae:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	2201      	movs	r2, #1
 80071b6:	409a      	lsls	r2, r3
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	4a0c      	ldr	r2, [pc, #48]	; (80071f0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4a07      	ldr	r2, [pc, #28]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80071d0:	441a      	add	r2, r3
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7fe f839 	bl	8005250 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071de:	bf00      	nop
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000660 	.word	0x20000660
 80071ec:	20000664 	.word	0x20000664
 80071f0:	20000768 	.word	0x20000768

080071f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <pvTaskIncrementMutexHeldCount+0x24>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007200:	4b05      	ldr	r3, [pc, #20]	; (8007218 <pvTaskIncrementMutexHeldCount+0x24>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007206:	3201      	adds	r2, #1
 8007208:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <pvTaskIncrementMutexHeldCount+0x24>)
 800720c:	681b      	ldr	r3, [r3, #0]
	}
 800720e:	4618      	mov	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	20000660 	.word	0x20000660

0800721c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007226:	4b29      	ldr	r3, [pc, #164]	; (80072cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722c:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe f869 	bl	800530a <uxListRemove>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	2201      	movs	r2, #1
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43da      	mvns	r2, r3
 800724c:	4b21      	ldr	r3, [pc, #132]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4013      	ands	r3, r2
 8007252:	4a20      	ldr	r2, [pc, #128]	; (80072d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007254:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725c:	d10a      	bne.n	8007274 <prvAddCurrentTaskToDelayedList+0x58>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007264:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3304      	adds	r3, #4
 800726a:	4619      	mov	r1, r3
 800726c:	481a      	ldr	r0, [pc, #104]	; (80072d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800726e:	f7fd ffef 	bl	8005250 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007272:	e026      	b.n	80072c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800727c:	4b14      	ldr	r3, [pc, #80]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d209      	bcs.n	80072a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fd fffd 	bl	8005298 <vListInsert>
}
 800729e:	e010      	b.n	80072c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4619      	mov	r1, r3
 80072ac:	4610      	mov	r0, r2
 80072ae:	f7fd fff3 	bl	8005298 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072b2:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d202      	bcs.n	80072c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80072bc:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6013      	str	r3, [r2, #0]
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000764 	.word	0x20000764
 80072d0:	20000660 	.word	0x20000660
 80072d4:	20000768 	.word	0x20000768
 80072d8:	2000074c 	.word	0x2000074c
 80072dc:	2000071c 	.word	0x2000071c
 80072e0:	20000718 	.word	0x20000718
 80072e4:	20000780 	.word	0x20000780

080072e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3b04      	subs	r3, #4
 80072f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b04      	subs	r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f023 0201 	bic.w	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3b04      	subs	r3, #4
 8007316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007318:	4a0c      	ldr	r2, [pc, #48]	; (800734c <pxPortInitialiseStack+0x64>)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3b14      	subs	r3, #20
 8007322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3b04      	subs	r3, #4
 800732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f06f 0202 	mvn.w	r2, #2
 8007336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b20      	subs	r3, #32
 800733c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800733e:	68fb      	ldr	r3, [r7, #12]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	08007351 	.word	0x08007351

08007350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800735a:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <prvTaskExitError+0x50>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007362:	d009      	beq.n	8007378 <prvTaskExitError+0x28>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e7fe      	b.n	8007376 <prvTaskExitError+0x26>
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800738a:	bf00      	nop
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0fc      	beq.n	800738c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007392:	bf00      	nop
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	2000000c 	.word	0x2000000c
	...

080073b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <pxCurrentTCBConst2>)
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6808      	ldr	r0, [r1, #0]
 80073b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ba:	f380 8809 	msr	PSP, r0
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f04f 0000 	mov.w	r0, #0
 80073c6:	f380 8811 	msr	BASEPRI, r0
 80073ca:	4770      	bx	lr
 80073cc:	f3af 8000 	nop.w

080073d0 <pxCurrentTCBConst2>:
 80073d0:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073d8:	4808      	ldr	r0, [pc, #32]	; (80073fc <prvPortStartFirstTask+0x24>)
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f380 8808 	msr	MSP, r0
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8814 	msr	CONTROL, r0
 80073ea:	b662      	cpsie	i
 80073ec:	b661      	cpsie	f
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	df00      	svc	0
 80073f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073fa:	bf00      	nop
 80073fc:	e000ed08 	.word	0xe000ed08

08007400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007406:	4b44      	ldr	r3, [pc, #272]	; (8007518 <xPortStartScheduler+0x118>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a44      	ldr	r2, [pc, #272]	; (800751c <xPortStartScheduler+0x11c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d109      	bne.n	8007424 <xPortStartScheduler+0x24>
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e7fe      	b.n	8007422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007424:	4b3c      	ldr	r3, [pc, #240]	; (8007518 <xPortStartScheduler+0x118>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3d      	ldr	r2, [pc, #244]	; (8007520 <xPortStartScheduler+0x120>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d109      	bne.n	8007442 <xPortStartScheduler+0x42>
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e7fe      	b.n	8007440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007442:	4b38      	ldr	r3, [pc, #224]	; (8007524 <xPortStartScheduler+0x124>)
 8007444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b30      	ldr	r3, [pc, #192]	; (8007528 <xPortStartScheduler+0x128>)
 8007468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800746a:	4b30      	ldr	r3, [pc, #192]	; (800752c <xPortStartScheduler+0x12c>)
 800746c:	2207      	movs	r2, #7
 800746e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007470:	e009      	b.n	8007486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007472:	4b2e      	ldr	r3, [pc, #184]	; (800752c <xPortStartScheduler+0x12c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3b01      	subs	r3, #1
 8007478:	4a2c      	ldr	r2, [pc, #176]	; (800752c <xPortStartScheduler+0x12c>)
 800747a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	b2db      	uxtb	r3, r3
 8007484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b80      	cmp	r3, #128	; 0x80
 8007490:	d0ef      	beq.n	8007472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007492:	4b26      	ldr	r3, [pc, #152]	; (800752c <xPortStartScheduler+0x12c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f1c3 0307 	rsb	r3, r3, #7
 800749a:	2b04      	cmp	r3, #4
 800749c:	d009      	beq.n	80074b2 <xPortStartScheduler+0xb2>
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	e7fe      	b.n	80074b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074b2:	4b1e      	ldr	r3, [pc, #120]	; (800752c <xPortStartScheduler+0x12c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	4a1c      	ldr	r2, [pc, #112]	; (800752c <xPortStartScheduler+0x12c>)
 80074ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074bc:	4b1b      	ldr	r3, [pc, #108]	; (800752c <xPortStartScheduler+0x12c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <xPortStartScheduler+0x12c>)
 80074c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074d0:	4b17      	ldr	r3, [pc, #92]	; (8007530 <xPortStartScheduler+0x130>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <xPortStartScheduler+0x130>)
 80074d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074dc:	4b14      	ldr	r3, [pc, #80]	; (8007530 <xPortStartScheduler+0x130>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a13      	ldr	r2, [pc, #76]	; (8007530 <xPortStartScheduler+0x130>)
 80074e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074e8:	f000 f8d6 	bl	8007698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074ec:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xPortStartScheduler+0x134>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074f2:	f000 f8f5 	bl	80076e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <xPortStartScheduler+0x138>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0f      	ldr	r2, [pc, #60]	; (8007538 <xPortStartScheduler+0x138>)
 80074fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007502:	f7ff ff69 	bl	80073d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007506:	f7ff fa75 	bl	80069f4 <vTaskSwitchContext>
	prvTaskExitError();
 800750a:	f7ff ff21 	bl	8007350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed00 	.word	0xe000ed00
 800751c:	410fc271 	.word	0x410fc271
 8007520:	410fc270 	.word	0x410fc270
 8007524:	e000e400 	.word	0xe000e400
 8007528:	2000078c 	.word	0x2000078c
 800752c:	20000790 	.word	0x20000790
 8007530:	e000ed20 	.word	0xe000ed20
 8007534:	2000000c 	.word	0x2000000c
 8007538:	e000ef34 	.word	0xe000ef34

0800753c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vPortEnterCritical+0x54>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <vPortEnterCritical+0x54>)
 800755c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <vPortEnterCritical+0x54>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10e      	bne.n	8007584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007566:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <vPortEnterCritical+0x58>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <vPortEnterCritical+0x48>
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	e7fe      	b.n	8007582 <vPortEnterCritical+0x46>
	}
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000000c 	.word	0x2000000c
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800759e:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <vPortExitCritical+0x4c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <vPortExitCritical+0x22>
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	e7fe      	b.n	80075b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80075ba:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <vPortExitCritical+0x4c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3b01      	subs	r3, #1
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <vPortExitCritical+0x4c>)
 80075c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075c4:	4b07      	ldr	r3, [pc, #28]	; (80075e4 <vPortExitCritical+0x4c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <vPortExitCritical+0x3e>
 80075cc:	2300      	movs	r3, #0
 80075ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000000c 	.word	0x2000000c
	...

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f01e 0f10 	tst.w	lr, #16
 8007600:	bf08      	it	eq
 8007602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007614:	f380 8811 	msr	BASEPRI, r0
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f7ff f9e8 	bl	80069f4 <vTaskSwitchContext>
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	f380 8811 	msr	BASEPRI, r0
 800762c:	bc09      	pop	{r0, r3}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007636:	f01e 0f10 	tst.w	lr, #16
 800763a:	bf08      	it	eq
 800763c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007640:	f380 8809 	msr	PSP, r0
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst>:
 8007650:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007670:	f7ff f904 	bl	800687c <xTaskIncrementTick>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767a:	4b06      	ldr	r3, [pc, #24]	; (8007694 <SysTick_Handler+0x3c>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <vPortSetupTimerInterrupt+0x34>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortSetupTimerInterrupt+0x38>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076a8:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <vPortSetupTimerInterrupt+0x3c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	; (80076d8 <vPortSetupTimerInterrupt+0x40>)
 80076ae:	fba2 2303 	umull	r2, r3, r2, r3
 80076b2:	099b      	lsrs	r3, r3, #6
 80076b4:	4a09      	ldr	r2, [pc, #36]	; (80076dc <vPortSetupTimerInterrupt+0x44>)
 80076b6:	3b01      	subs	r3, #1
 80076b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ba:	4b04      	ldr	r3, [pc, #16]	; (80076cc <vPortSetupTimerInterrupt+0x34>)
 80076bc:	2207      	movs	r2, #7
 80076be:	601a      	str	r2, [r3, #0]
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	e000e010 	.word	0xe000e010
 80076d0:	e000e018 	.word	0xe000e018
 80076d4:	20000000 	.word	0x20000000
 80076d8:	10624dd3 	.word	0x10624dd3
 80076dc:	e000e014 	.word	0xe000e014

080076e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076f0 <vPortEnableVFP+0x10>
 80076e4:	6801      	ldr	r1, [r0, #0]
 80076e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ea:	6001      	str	r1, [r0, #0]
 80076ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076ee:	bf00      	nop
 80076f0:	e000ed88 	.word	0xe000ed88

080076f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076fa:	f3ef 8305 	mrs	r3, IPSR
 80076fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b0f      	cmp	r3, #15
 8007704:	d913      	bls.n	800772e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007706:	4a16      	ldr	r2, [pc, #88]	; (8007760 <vPortValidateInterruptPriority+0x6c>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007710:	4b14      	ldr	r3, [pc, #80]	; (8007764 <vPortValidateInterruptPriority+0x70>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	7afa      	ldrb	r2, [r7, #11]
 8007716:	429a      	cmp	r2, r3
 8007718:	d209      	bcs.n	800772e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e7fe      	b.n	800772c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800772e:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <vPortValidateInterruptPriority+0x74>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007736:	4b0d      	ldr	r3, [pc, #52]	; (800776c <vPortValidateInterruptPriority+0x78>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d909      	bls.n	8007752 <vPortValidateInterruptPriority+0x5e>
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	e7fe      	b.n	8007750 <vPortValidateInterruptPriority+0x5c>
	}
 8007752:	bf00      	nop
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e3f0 	.word	0xe000e3f0
 8007764:	2000078c 	.word	0x2000078c
 8007768:	e000ed0c 	.word	0xe000ed0c
 800776c:	20000790 	.word	0x20000790

08007770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800777c:	f7fe ffb2 	bl	80066e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007780:	4b57      	ldr	r3, [pc, #348]	; (80078e0 <pvPortMalloc+0x170>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007788:	f000 f90c 	bl	80079a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800778c:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <pvPortMalloc+0x174>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 808c 	bne.w	80078b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01c      	beq.n	80077da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80077a0:	2208      	movs	r2, #8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d013      	beq.n	80077da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f023 0307 	bic.w	r3, r3, #7
 80077b8:	3308      	adds	r3, #8
 80077ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d009      	beq.n	80077da <pvPortMalloc+0x6a>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e7fe      	b.n	80077d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d068      	beq.n	80078b2 <pvPortMalloc+0x142>
 80077e0:	4b41      	ldr	r3, [pc, #260]	; (80078e8 <pvPortMalloc+0x178>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d863      	bhi.n	80078b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077ea:	4b40      	ldr	r3, [pc, #256]	; (80078ec <pvPortMalloc+0x17c>)
 80077ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077ee:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <pvPortMalloc+0x17c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077f4:	e004      	b.n	8007800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <pvPortMalloc+0xa2>
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f1      	bne.n	80077f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007812:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <pvPortMalloc+0x170>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007818:	429a      	cmp	r2, r3
 800781a:	d04a      	beq.n	80078b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2208      	movs	r2, #8
 8007822:	4413      	add	r3, r2
 8007824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	1ad2      	subs	r2, r2, r3
 8007836:	2308      	movs	r3, #8
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	429a      	cmp	r2, r3
 800783c:	d91e      	bls.n	800787c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4413      	add	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <pvPortMalloc+0xf4>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e7fe      	b.n	8007862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f000 f8f6 	bl	8007a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800787c:	4b1a      	ldr	r3, [pc, #104]	; (80078e8 <pvPortMalloc+0x178>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <pvPortMalloc+0x178>)
 8007888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800788a:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <pvPortMalloc+0x178>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <pvPortMalloc+0x180>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d203      	bcs.n	800789e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <pvPortMalloc+0x178>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <pvPortMalloc+0x180>)
 800789c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <pvPortMalloc+0x174>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078b2:	f7fe ff25 	bl	8006700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <pvPortMalloc+0x164>
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	e7fe      	b.n	80078d2 <pvPortMalloc+0x162>
	return pvReturn;
 80078d4:	69fb      	ldr	r3, [r7, #28]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	2000879c 	.word	0x2000879c
 80078e4:	200087a8 	.word	0x200087a8
 80078e8:	200087a0 	.word	0x200087a0
 80078ec:	20008794 	.word	0x20008794
 80078f0:	200087a4 	.word	0x200087a4

080078f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d046      	beq.n	8007994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007906:	2308      	movs	r3, #8
 8007908:	425b      	negs	r3, r3
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4413      	add	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	4b20      	ldr	r3, [pc, #128]	; (800799c <vPortFree+0xa8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <vPortFree+0x42>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e7fe      	b.n	8007934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <vPortFree+0x5e>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	e7fe      	b.n	8007950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <vPortFree+0xa8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4013      	ands	r3, r2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d019      	beq.n	8007994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d115      	bne.n	8007994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <vPortFree+0xa8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007978:	f7fe feb4 	bl	80066e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <vPortFree+0xac>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4413      	add	r3, r2
 8007986:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <vPortFree+0xac>)
 8007988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 f86c 	bl	8007a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007990:	f7fe feb6 	bl	8006700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200087a8 	.word	0x200087a8
 80079a0:	200087a0 	.word	0x200087a0

080079a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079b0:	4b27      	ldr	r3, [pc, #156]	; (8007a50 <prvHeapInit+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00c      	beq.n	80079d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3307      	adds	r3, #7
 80079c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0307 	bic.w	r3, r3, #7
 80079ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <prvHeapInit+0xac>)
 80079d4:	4413      	add	r3, r2
 80079d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079dc:	4a1d      	ldr	r2, [pc, #116]	; (8007a54 <prvHeapInit+0xb0>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <prvHeapInit+0xb0>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079f0:	2208      	movs	r2, #8
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <prvHeapInit+0xb4>)
 8007a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <prvHeapInit+0xb4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a0e:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <prvHeapInit+0xb4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	1ad2      	subs	r2, r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvHeapInit+0xb4>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	4a0a      	ldr	r2, [pc, #40]	; (8007a5c <prvHeapInit+0xb8>)
 8007a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	4a09      	ldr	r2, [pc, #36]	; (8007a60 <prvHeapInit+0xbc>)
 8007a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a3c:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <prvHeapInit+0xc0>)
 8007a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000794 	.word	0x20000794
 8007a54:	20008794 	.word	0x20008794
 8007a58:	2000879c 	.word	0x2000879c
 8007a5c:	200087a4 	.word	0x200087a4
 8007a60:	200087a0 	.word	0x200087a0
 8007a64:	200087a8 	.word	0x200087a8

08007a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a70:	4b28      	ldr	r3, [pc, #160]	; (8007b14 <prvInsertBlockIntoFreeList+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e002      	b.n	8007a7c <prvInsertBlockIntoFreeList+0x14>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d8f7      	bhi.n	8007a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d108      	bne.n	8007aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	441a      	add	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d118      	bne.n	8007af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d00d      	beq.n	8007ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	441a      	add	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e008      	b.n	8007af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvInsertBlockIntoFreeList+0xb0>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e003      	b.n	8007af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d002      	beq.n	8007b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b06:	bf00      	nop
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	20008794 	.word	0x20008794
 8007b18:	2000879c 	.word	0x2000879c

08007b1c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f002 f96f 	bl	8009e14 <tcpip_send_msg_wait_sem>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007b48:	e001      	b.n	8007b4e <netconn_apimsg+0x32>
  }
  return err;
 8007b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	603a      	str	r2, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
 8007b64:	460b      	mov	r3, r1
 8007b66:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 ff83 	bl	8008a78 <netconn_alloc>
 8007b72:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d054      	beq.n	8007c24 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007b7a:	79bb      	ldrb	r3, [r7, #6]
 8007b7c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	4619      	mov	r1, r3
 8007b88:	4829      	ldr	r0, [pc, #164]	; (8007c30 <netconn_new_with_proto_and_callback+0xd8>)
 8007b8a:	f7ff ffc7 	bl	8007b1c <netconn_apimsg>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8007b94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d043      	beq.n	8007c24 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <netconn_new_with_proto_and_callback+0x58>
 8007ba4:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <netconn_new_with_proto_and_callback+0xdc>)
 8007ba6:	2289      	movs	r2, #137	; 0x89
 8007ba8:	4923      	ldr	r1, [pc, #140]	; (8007c38 <netconn_new_with_proto_and_callback+0xe0>)
 8007baa:	4824      	ldr	r0, [pc, #144]	; (8007c3c <netconn_new_with_proto_and_callback+0xe4>)
 8007bac:	f00e fe86 	bl	80168bc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	3310      	adds	r3, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f00e fd01 	bl	80165bc <sys_mbox_valid>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <netconn_new_with_proto_and_callback+0x74>
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <netconn_new_with_proto_and_callback+0xdc>)
 8007bc2:	228a      	movs	r2, #138	; 0x8a
 8007bc4:	491e      	ldr	r1, [pc, #120]	; (8007c40 <netconn_new_with_proto_and_callback+0xe8>)
 8007bc6:	481d      	ldr	r0, [pc, #116]	; (8007c3c <netconn_new_with_proto_and_callback+0xe4>)
 8007bc8:	f00e fe78 	bl	80168bc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3314      	adds	r3, #20
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f00e fcf3 	bl	80165bc <sys_mbox_valid>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <netconn_new_with_proto_and_callback+0x90>
 8007bdc:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <netconn_new_with_proto_and_callback+0xdc>)
 8007bde:	228c      	movs	r2, #140	; 0x8c
 8007be0:	4918      	ldr	r1, [pc, #96]	; (8007c44 <netconn_new_with_proto_and_callback+0xec>)
 8007be2:	4816      	ldr	r0, [pc, #88]	; (8007c3c <netconn_new_with_proto_and_callback+0xe4>)
 8007be4:	f00e fe6a 	bl	80168bc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	330c      	adds	r3, #12
 8007bec:	4618      	mov	r0, r3
 8007bee:	f00e fd76 	bl	80166de <sys_sem_valid>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <netconn_new_with_proto_and_callback+0xac>
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <netconn_new_with_proto_and_callback+0xdc>)
 8007bfa:	228f      	movs	r2, #143	; 0x8f
 8007bfc:	4912      	ldr	r1, [pc, #72]	; (8007c48 <netconn_new_with_proto_and_callback+0xf0>)
 8007bfe:	480f      	ldr	r0, [pc, #60]	; (8007c3c <netconn_new_with_proto_and_callback+0xe4>)
 8007c00:	f00e fe5c 	bl	80168bc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	330c      	adds	r3, #12
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f00e fd5b 	bl	80166c4 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c10:	3310      	adds	r3, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f00e fc36 	bl	8016484 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c1a:	2007      	movs	r0, #7
 8007c1c:	f003 fbdc 	bl	800b3d8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e000      	b.n	8007c26 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3728      	adds	r7, #40	; 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	08008a21 	.word	0x08008a21
 8007c34:	08017cf4 	.word	0x08017cf4
 8007c38:	08017d28 	.word	0x08017d28
 8007c3c:	08017d4c 	.word	0x08017d4c
 8007c40:	08017d74 	.word	0x08017d74
 8007c44:	08017d8c 	.word	0x08017d8c
 8007c48:	08017db0 	.word	0x08017db0

08007c4c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <netconn_delete+0x12>
    return ERR_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e016      	b.n	8007c8c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007c62:	2329      	movs	r3, #41	; 0x29
 8007c64:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4809      	ldr	r0, [pc, #36]	; (8007c94 <netconn_delete+0x48>)
 8007c6e:	f7ff ff55 	bl	8007b1c <netconn_apimsg>
 8007c72:	4603      	mov	r3, r0
 8007c74:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007c76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <netconn_delete+0x38>
    return err;
 8007c7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c82:	e003      	b.n	8007c8c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 ff67 	bl	8008b58 <netconn_free>

  return ERR_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	08008fdd 	.word	0x08008fdd

08007c98 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	; 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <netconn_bind+0x26>
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <netconn_bind+0x5c>)
 8007cae:	22ff      	movs	r2, #255	; 0xff
 8007cb0:	4911      	ldr	r1, [pc, #68]	; (8007cf8 <netconn_bind+0x60>)
 8007cb2:	4812      	ldr	r0, [pc, #72]	; (8007cfc <netconn_bind+0x64>)
 8007cb4:	f00e fe02 	bl	80168bc <iprintf>
 8007cb8:	f06f 030f 	mvn.w	r3, #15
 8007cbc:	e015      	b.n	8007cea <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <netconn_bind+0x68>)
 8007cc6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007cd0:	88fb      	ldrh	r3, [r7, #6]
 8007cd2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007cd4:	f107 0310 	add.w	r3, r7, #16
 8007cd8:	4619      	mov	r1, r3
 8007cda:	480a      	ldr	r0, [pc, #40]	; (8007d04 <netconn_bind+0x6c>)
 8007cdc:	f7ff ff1e 	bl	8007b1c <netconn_apimsg>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8007ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3728      	adds	r7, #40	; 0x28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08017cf4 	.word	0x08017cf4
 8007cf8:	08017e2c 	.word	0x08017e2c
 8007cfc:	08017d4c 	.word	0x08017d4c
 8007d00:	08025fb0 	.word	0x08025fb0
 8007d04:	080091e1 	.word	0x080091e1

08007d08 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <netconn_listen_with_backlog+0x26>
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <netconn_listen_with_backlog+0x48>)
 8007d1c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007d20:	490c      	ldr	r1, [pc, #48]	; (8007d54 <netconn_listen_with_backlog+0x4c>)
 8007d22:	480d      	ldr	r0, [pc, #52]	; (8007d58 <netconn_listen_with_backlog+0x50>)
 8007d24:	f00e fdca 	bl	80168bc <iprintf>
 8007d28:	f06f 030f 	mvn.w	r3, #15
 8007d2c:	e00b      	b.n	8007d46 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4619      	mov	r1, r3
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <netconn_listen_with_backlog+0x54>)
 8007d3a:	f7ff feef 	bl	8007b1c <netconn_apimsg>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	08017cf4 	.word	0x08017cf4
 8007d54:	08017e8c 	.word	0x08017e8c
 8007d58:	08017d4c 	.word	0x08017d4c
 8007d5c:	080092a1 	.word	0x080092a1

08007d60 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <netconn_accept+0x24>
 8007d70:	4b34      	ldr	r3, [pc, #208]	; (8007e44 <netconn_accept+0xe4>)
 8007d72:	f240 128d 	movw	r2, #397	; 0x18d
 8007d76:	4934      	ldr	r1, [pc, #208]	; (8007e48 <netconn_accept+0xe8>)
 8007d78:	4834      	ldr	r0, [pc, #208]	; (8007e4c <netconn_accept+0xec>)
 8007d7a:	f00e fd9f 	bl	80168bc <iprintf>
 8007d7e:	f06f 030f 	mvn.w	r3, #15
 8007d82:	e05b      	b.n	8007e3c <netconn_accept+0xdc>
  *new_conn = NULL;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <netconn_accept+0x44>
 8007d90:	4b2c      	ldr	r3, [pc, #176]	; (8007e44 <netconn_accept+0xe4>)
 8007d92:	f240 128f 	movw	r2, #399	; 0x18f
 8007d96:	492e      	ldr	r1, [pc, #184]	; (8007e50 <netconn_accept+0xf0>)
 8007d98:	482c      	ldr	r0, [pc, #176]	; (8007e4c <netconn_accept+0xec>)
 8007d9a:	f00e fd8f 	bl	80168bc <iprintf>
 8007d9e:	f06f 030f 	mvn.w	r3, #15
 8007da2:	e04b      	b.n	8007e3c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007daa:	f113 0f0c 	cmn.w	r3, #12
 8007dae:	da03      	bge.n	8007db8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007db6:	e041      	b.n	8007e3c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3314      	adds	r3, #20
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f00e fbfd 	bl	80165bc <sys_mbox_valid>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <netconn_accept+0x6e>
    return ERR_CLSD;
 8007dc8:	f06f 030e 	mvn.w	r3, #14
 8007dcc:	e036      	b.n	8007e3c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f107 010c 	add.w	r1, r7, #12
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f00e fb94 	bl	8016506 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <netconn_accept+0x96>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	2200      	movs	r2, #0
 8007df0:	2101      	movs	r1, #1
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <netconn_accept+0xf4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d102      	bne.n	8007e04 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8007dfe:	f06f 030c 	mvn.w	r3, #12
 8007e02:	e01b      	b.n	8007e3c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d114      	bne.n	8007e34 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <netconn_accept+0xce>
 8007e10:	f00e fcf0 	bl	80167f4 <sys_arch_protect>
 8007e14:	6138      	str	r0, [r7, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e1c:	f113 0f0c 	cmn.w	r3, #12
 8007e20:	db02      	blt.n	8007e28 <netconn_accept+0xc8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	22f1      	movs	r2, #241	; 0xf1
 8007e26:	721a      	strb	r2, [r3, #8]
 8007e28:	6938      	ldr	r0, [r7, #16]
 8007e2a:	f00e fcf1 	bl	8016810 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8007e2e:	f06f 030e 	mvn.w	r3, #14
 8007e32:	e003      	b.n	8007e3c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007e3a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	08017cf4 	.word	0x08017cf4
 8007e48:	08017eac 	.word	0x08017eac
 8007e4c:	08017d4c 	.word	0x08017d4c
 8007e50:	08017ecc 	.word	0x08017ecc
 8007e54:	2000c388 	.word	0x2000c388

08007e58 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <netconn_recv_data+0x28>
 8007e6c:	4b5c      	ldr	r3, [pc, #368]	; (8007fe0 <netconn_recv_data+0x188>)
 8007e6e:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007e72:	495c      	ldr	r1, [pc, #368]	; (8007fe4 <netconn_recv_data+0x18c>)
 8007e74:	485c      	ldr	r0, [pc, #368]	; (8007fe8 <netconn_recv_data+0x190>)
 8007e76:	f00e fd21 	bl	80168bc <iprintf>
 8007e7a:	f06f 030f 	mvn.w	r3, #15
 8007e7e:	e0aa      	b.n	8007fd6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <netconn_recv_data+0x48>
 8007e8c:	4b54      	ldr	r3, [pc, #336]	; (8007fe0 <netconn_recv_data+0x188>)
 8007e8e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007e92:	4956      	ldr	r1, [pc, #344]	; (8007fec <netconn_recv_data+0x194>)
 8007e94:	4854      	ldr	r0, [pc, #336]	; (8007fe8 <netconn_recv_data+0x190>)
 8007e96:	f00e fd11 	bl	80168bc <iprintf>
 8007e9a:	f06f 030f 	mvn.w	r3, #15
 8007e9e:	e09a      	b.n	8007fd6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d115      	bne.n	8007ed8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3310      	adds	r3, #16
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f00e fb83 	bl	80165bc <sys_mbox_valid>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10d      	bne.n	8007ed8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f00e fb7b 	bl	80165bc <sys_mbox_valid>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <netconn_recv_data+0x7a>
 8007ecc:	f06f 030a 	mvn.w	r3, #10
 8007ed0:	e081      	b.n	8007fd6 <netconn_recv_data+0x17e>
 8007ed2:	f06f 030e 	mvn.w	r3, #14
 8007ed6:	e07e      	b.n	8007fd6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3310      	adds	r3, #16
 8007edc:	4618      	mov	r0, r3
 8007ede:	f00e fb6d 	bl	80165bc <sys_mbox_valid>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <netconn_recv_data+0xa4>
 8007ee8:	4b3d      	ldr	r3, [pc, #244]	; (8007fe0 <netconn_recv_data+0x188>)
 8007eea:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007eee:	4940      	ldr	r1, [pc, #256]	; (8007ff0 <netconn_recv_data+0x198>)
 8007ef0:	483d      	ldr	r0, [pc, #244]	; (8007fe8 <netconn_recv_data+0x190>)
 8007ef2:	f00e fce3 	bl	80168bc <iprintf>
 8007ef6:	f06f 030a 	mvn.w	r3, #10
 8007efa:	e06c      	b.n	8007fd6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f02:	f113 0f0c 	cmn.w	r3, #12
 8007f06:	da03      	bge.n	8007f10 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f0e:	e062      	b.n	8007fd6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3310      	adds	r3, #16
 8007f14:	f107 0120 	add.w	r1, r7, #32
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f00e faf3 	bl	8016506 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d138      	bne.n	8007f9e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	891b      	ldrh	r3, [r3, #8]
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e001      	b.n	8007f42 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8007f42:	f107 030c 	add.w	r3, r7, #12
 8007f46:	4619      	mov	r1, r3
 8007f48:	482a      	ldr	r0, [pc, #168]	; (8007ff4 <netconn_recv_data+0x19c>)
 8007f4a:	f7ff fde7 	bl	8007b1c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d120      	bne.n	8007f96 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <netconn_recv_data+0x110>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	2200      	movs	r2, #0
 8007f62:	2101      	movs	r1, #1
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10b      	bne.n	8007f88 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <netconn_recv_data+0x12a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f80:	e029      	b.n	8007fd6 <netconn_recv_data+0x17e>
 8007f82:	f06f 030d 	mvn.w	r3, #13
 8007f86:	e026      	b.n	8007fd6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007f88:	2101      	movs	r1, #1
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f926 	bl	80081dc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007f90:	f06f 030e 	mvn.w	r3, #14
 8007f94:	e01f      	b.n	8007fd6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	891b      	ldrh	r3, [r3, #8]
 8007f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f9c:	e00d      	b.n	8007fba <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <netconn_recv_data+0x15a>
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <netconn_recv_data+0x188>)
 8007fa6:	f240 223e 	movw	r2, #574	; 0x23e
 8007faa:	4913      	ldr	r1, [pc, #76]	; (8007ff8 <netconn_recv_data+0x1a0>)
 8007fac:	480e      	ldr	r0, [pc, #56]	; (8007fe8 <netconn_recv_data+0x190>)
 8007fae:	f00e fc85 	bl	80168bc <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	891b      	ldrh	r3, [r3, #8]
 8007fb8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <netconn_recv_data+0x176>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007fc8:	2101      	movs	r1, #1
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007fce:	6a3a      	ldr	r2, [r7, #32]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3728      	adds	r7, #40	; 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	08017cf4 	.word	0x08017cf4
 8007fe4:	08017eec 	.word	0x08017eec
 8007fe8:	08017d4c 	.word	0x08017d4c
 8007fec:	08017f0c 	.word	0x08017f0c
 8007ff0:	08017f28 	.word	0x08017f28
 8007ff4:	08009425 	.word	0x08009425
 8007ff8:	08017f48 	.word	0x08017f48

08007ffc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <netconn_recv+0x28>
 8008010:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <netconn_recv+0xdc>)
 8008012:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008016:	4931      	ldr	r1, [pc, #196]	; (80080dc <netconn_recv+0xe0>)
 8008018:	4831      	ldr	r0, [pc, #196]	; (80080e0 <netconn_recv+0xe4>)
 800801a:	f00e fc4f 	bl	80168bc <iprintf>
 800801e:	f06f 030f 	mvn.w	r3, #15
 8008022:	e054      	b.n	80080ce <netconn_recv+0xd2>
  *new_buf = NULL;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <netconn_recv+0x48>
 8008030:	4b29      	ldr	r3, [pc, #164]	; (80080d8 <netconn_recv+0xdc>)
 8008032:	f240 2276 	movw	r2, #630	; 0x276
 8008036:	492b      	ldr	r1, [pc, #172]	; (80080e4 <netconn_recv+0xe8>)
 8008038:	4829      	ldr	r0, [pc, #164]	; (80080e0 <netconn_recv+0xe4>)
 800803a:	f00e fc3f 	bl	80168bc <iprintf>
 800803e:	f06f 030f 	mvn.w	r3, #15
 8008042:	e044      	b.n	80080ce <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800804c:	2b10      	cmp	r3, #16
 800804e:	d139      	bne.n	80080c4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008054:	2006      	movs	r0, #6
 8008056:	f003 f96d 	bl	800b334 <memp_malloc>
 800805a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <netconn_recv+0x6c>
      return ERR_MEM;
 8008062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008066:	e032      	b.n	80080ce <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008068:	f107 030c 	add.w	r3, r7, #12
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fef2 	bl	8007e58 <netconn_recv_data>
 8008074:	4603      	mov	r3, r0
 8008076:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008078:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8008080:	6979      	ldr	r1, [r7, #20]
 8008082:	2006      	movs	r0, #6
 8008084:	f003 f9a8 	bl	800b3d8 <memp_free>
      return err;
 8008088:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800808c:	e01f      	b.n	80080ce <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d106      	bne.n	80080a2 <netconn_recv+0xa6>
 8008094:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <netconn_recv+0xdc>)
 8008096:	f240 228a 	movw	r2, #650	; 0x28a
 800809a:	4913      	ldr	r1, [pc, #76]	; (80080e8 <netconn_recv+0xec>)
 800809c:	4810      	ldr	r0, [pc, #64]	; (80080e0 <netconn_recv+0xe4>)
 800809e:	f00e fc0d 	bl	80168bc <iprintf>

    buf->p = p;
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2200      	movs	r2, #0
 80080b2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e004      	b.n	80080ce <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff fec6 	bl	8007e58 <netconn_recv_data>
 80080cc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	08017cf4 	.word	0x08017cf4
 80080dc:	08017eec 	.word	0x08017eec
 80080e0:	08017d4c 	.word	0x08017d4c
 80080e4:	08017f0c 	.word	0x08017f0c
 80080e8:	08017f54 	.word	0x08017f54

080080ec <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <netconn_write_partly+0x28>
 8008100:	4b31      	ldr	r3, [pc, #196]	; (80081c8 <netconn_write_partly+0xdc>)
 8008102:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008106:	4931      	ldr	r1, [pc, #196]	; (80081cc <netconn_write_partly+0xe0>)
 8008108:	4831      	ldr	r0, [pc, #196]	; (80081d0 <netconn_write_partly+0xe4>)
 800810a:	f00e fbd7 	bl	80168bc <iprintf>
 800810e:	f06f 030f 	mvn.w	r3, #15
 8008112:	e054      	b.n	80081be <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800811c:	2b10      	cmp	r3, #16
 800811e:	d009      	beq.n	8008134 <netconn_write_partly+0x48>
 8008120:	4b29      	ldr	r3, [pc, #164]	; (80081c8 <netconn_write_partly+0xdc>)
 8008122:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008126:	492b      	ldr	r1, [pc, #172]	; (80081d4 <netconn_write_partly+0xe8>)
 8008128:	4829      	ldr	r0, [pc, #164]	; (80081d0 <netconn_write_partly+0xe4>)
 800812a:	f00e fbc7 	bl	80168bc <iprintf>
 800812e:	f06f 0305 	mvn.w	r3, #5
 8008132:	e044      	b.n	80081be <netconn_write_partly+0xd2>
  if (size == 0) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <netconn_write_partly+0x52>
    return ERR_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	e03f      	b.n	80081be <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	7f1b      	ldrb	r3, [r3, #28]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <netconn_write_partly+0x68>
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <netconn_write_partly+0x6c>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <netconn_write_partly+0x6e>
 8008158:	2300      	movs	r3, #0
 800815a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800815e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <netconn_write_partly+0x86>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800816c:	f06f 0305 	mvn.w	r3, #5
 8008170:	e025      	b.n	80081be <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008184:	f107 0310 	add.w	r3, r7, #16
 8008188:	4619      	mov	r1, r3
 800818a:	4813      	ldr	r0, [pc, #76]	; (80081d8 <netconn_write_partly+0xec>)
 800818c:	f7ff fcc6 	bl	8007b1c <netconn_apimsg>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008196:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10d      	bne.n	80081ba <netconn_write_partly+0xce>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <netconn_write_partly+0xce>
    if (dontblock) {
 80081a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e002      	b.n	80081ba <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80081ba:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3728      	adds	r7, #40	; 0x28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	08017cf4 	.word	0x08017cf4
 80081cc:	08017f7c 	.word	0x08017f7c
 80081d0:	08017d4c 	.word	0x08017d4c
 80081d4:	08017f98 	.word	0x08017f98
 80081d8:	08009805 	.word	0x08009805

080081dc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d109      	bne.n	8008202 <netconn_close_shutdown+0x26>
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <netconn_close_shutdown+0x50>)
 80081f0:	f44f 724a 	mov.w	r2, #808	; 0x328
 80081f4:	490e      	ldr	r1, [pc, #56]	; (8008230 <netconn_close_shutdown+0x54>)
 80081f6:	480f      	ldr	r0, [pc, #60]	; (8008234 <netconn_close_shutdown+0x58>)
 80081f8:	f00e fb60 	bl	80168bc <iprintf>
 80081fc:	f06f 030f 	mvn.w	r3, #15
 8008200:	e00f      	b.n	8008222 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800820a:	2329      	movs	r3, #41	; 0x29
 800820c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800820e:	f107 0308 	add.w	r3, r7, #8
 8008212:	4619      	mov	r1, r3
 8008214:	4808      	ldr	r0, [pc, #32]	; (8008238 <netconn_close_shutdown+0x5c>)
 8008216:	f7ff fc81 	bl	8007b1c <netconn_apimsg>
 800821a:	4603      	mov	r3, r0
 800821c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800821e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3720      	adds	r7, #32
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	08017cf4 	.word	0x08017cf4
 8008230:	08017fbc 	.word	0x08017fbc
 8008234:	08017d4c 	.word	0x08017d4c
 8008238:	08009965 	.word	0x08009965

0800823c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008244:	2103      	movs	r1, #3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ffc8 	bl	80081dc <netconn_close_shutdown>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <recv_udp+0x20>
 800826c:	4b34      	ldr	r3, [pc, #208]	; (8008340 <recv_udp+0xe8>)
 800826e:	22b1      	movs	r2, #177	; 0xb1
 8008270:	4934      	ldr	r1, [pc, #208]	; (8008344 <recv_udp+0xec>)
 8008272:	4835      	ldr	r0, [pc, #212]	; (8008348 <recv_udp+0xf0>)
 8008274:	f00e fb22 	bl	80168bc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <recv_udp+0x32>
 800827e:	4b30      	ldr	r3, [pc, #192]	; (8008340 <recv_udp+0xe8>)
 8008280:	22b2      	movs	r2, #178	; 0xb2
 8008282:	4932      	ldr	r1, [pc, #200]	; (800834c <recv_udp+0xf4>)
 8008284:	4830      	ldr	r0, [pc, #192]	; (8008348 <recv_udp+0xf0>)
 8008286:	f00e fb19 	bl	80168bc <iprintf>
  conn = (struct netconn *)arg;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d103      	bne.n	800829c <recv_udp+0x44>
    pbuf_free(p);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f003 fe01 	bl	800be9c <pbuf_free>
    return;
 800829a:	e04d      	b.n	8008338 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d005      	beq.n	80082b2 <recv_udp+0x5a>
 80082a6:	4b26      	ldr	r3, [pc, #152]	; (8008340 <recv_udp+0xe8>)
 80082a8:	22ba      	movs	r2, #186	; 0xba
 80082aa:	4929      	ldr	r1, [pc, #164]	; (8008350 <recv_udp+0xf8>)
 80082ac:	4826      	ldr	r0, [pc, #152]	; (8008348 <recv_udp+0xf0>)
 80082ae:	f00e fb05 	bl	80168bc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	3310      	adds	r3, #16
 80082b6:	4618      	mov	r0, r3
 80082b8:	f00e f980 	bl	80165bc <sys_mbox_valid>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d103      	bne.n	80082ca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f003 fdea 	bl	800be9c <pbuf_free>
    return;
 80082c8:	e036      	b.n	8008338 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80082ca:	2006      	movs	r0, #6
 80082cc:	f003 f832 	bl	800b334 <memp_malloc>
 80082d0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <recv_udp+0x88>
    pbuf_free(p);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f003 fddf 	bl	800be9c <pbuf_free>
    return;
 80082de:	e02b      	b.n	8008338 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <recv_udp+0xa0>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	e000      	b.n	80082fa <recv_udp+0xa2>
 80082f8:	2300      	movs	r3, #0
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008302:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	891b      	ldrh	r3, [r3, #8]
 8008308:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	3310      	adds	r3, #16
 800830e:	69b9      	ldr	r1, [r7, #24]
 8008310:	4618      	mov	r0, r3
 8008312:	f00e f8de 	bl	80164d2 <sys_mbox_trypost>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <recv_udp+0xcc>
    netbuf_delete(buf);
 800831c:	69b8      	ldr	r0, [r7, #24]
 800831e:	f001 fbc9 	bl	8009ab4 <netbuf_delete>
    return;
 8008322:	e009      	b.n	8008338 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <recv_udp+0xe0>
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	8afa      	ldrh	r2, [r7, #22]
 8008332:	2100      	movs	r1, #0
 8008334:	69f8      	ldr	r0, [r7, #28]
 8008336:	4798      	blx	r3
  }
}
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	08017fd8 	.word	0x08017fd8
 8008344:	0801800c 	.word	0x0801800c
 8008348:	08018030 	.word	0x08018030
 800834c:	08018058 	.word	0x08018058
 8008350:	08018078 	.word	0x08018078

08008354 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d105      	bne.n	8008374 <recv_tcp+0x20>
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <recv_tcp+0xfc>)
 800836a:	22f9      	movs	r2, #249	; 0xf9
 800836c:	4939      	ldr	r1, [pc, #228]	; (8008454 <recv_tcp+0x100>)
 800836e:	483a      	ldr	r0, [pc, #232]	; (8008458 <recv_tcp+0x104>)
 8008370:	f00e faa4 	bl	80168bc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <recv_tcp+0x32>
 800837a:	4b35      	ldr	r3, [pc, #212]	; (8008450 <recv_tcp+0xfc>)
 800837c:	22fa      	movs	r2, #250	; 0xfa
 800837e:	4937      	ldr	r1, [pc, #220]	; (800845c <recv_tcp+0x108>)
 8008380:	4835      	ldr	r0, [pc, #212]	; (8008458 <recv_tcp+0x104>)
 8008382:	f00e fa9b 	bl	80168bc <iprintf>
  conn = (struct netconn *)arg;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <recv_tcp+0x42>
    return ERR_VAL;
 8008390:	f06f 0305 	mvn.w	r3, #5
 8008394:	e057      	b.n	8008446 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	429a      	cmp	r2, r3
 800839e:	d006      	beq.n	80083ae <recv_tcp+0x5a>
 80083a0:	4b2b      	ldr	r3, [pc, #172]	; (8008450 <recv_tcp+0xfc>)
 80083a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083a6:	492e      	ldr	r1, [pc, #184]	; (8008460 <recv_tcp+0x10c>)
 80083a8:	482b      	ldr	r0, [pc, #172]	; (8008458 <recv_tcp+0x104>)
 80083aa:	f00e fa87 	bl	80168bc <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3310      	adds	r3, #16
 80083b2:	4618      	mov	r0, r3
 80083b4:	f00e f902 	bl	80165bc <sys_mbox_valid>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10d      	bne.n	80083da <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	891b      	ldrh	r3, [r3, #8]
 80083c8:	4619      	mov	r1, r3
 80083ca:	68b8      	ldr	r0, [r7, #8]
 80083cc:	f004 fc62 	bl	800cc94 <tcp_recved>
      pbuf_free(p);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f003 fd63 	bl	800be9c <pbuf_free>
    }
    return ERR_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e035      	b.n	8008446 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80083da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d011      	beq.n	8008406 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00e      	beq.n	8008406 <recv_tcp+0xb2>
 80083e8:	f00e fa04 	bl	80167f4 <sys_arch_protect>
 80083ec:	6178      	str	r0, [r7, #20]
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80083f4:	f113 0f0c 	cmn.w	r3, #12
 80083f8:	db02      	blt.n	8008400 <recv_tcp+0xac>
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	78fa      	ldrb	r2, [r7, #3]
 80083fe:	721a      	strb	r2, [r3, #8]
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f00e fa05 	bl	8016810 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <recv_tcp+0xc0>
    len = p->tot_len;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	891b      	ldrh	r3, [r3, #8]
 8008410:	83fb      	strh	r3, [r7, #30]
 8008412:	e001      	b.n	8008418 <recv_tcp+0xc4>
  } else {
    len = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	3310      	adds	r3, #16
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4618      	mov	r0, r3
 8008420:	f00e f857 	bl	80164d2 <sys_mbox_trypost>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800842e:	e00a      	b.n	8008446 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <recv_tcp+0xf0>
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	8bfa      	ldrh	r2, [r7, #30]
 800843e:	2100      	movs	r1, #0
 8008440:	69b8      	ldr	r0, [r7, #24]
 8008442:	4798      	blx	r3
  }

  return ERR_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	08017fd8 	.word	0x08017fd8
 8008454:	08018098 	.word	0x08018098
 8008458:	08018030 	.word	0x08018030
 800845c:	080180bc 	.word	0x080180bc
 8008460:	080180dc 	.word	0x080180dc

08008464 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <poll_tcp+0x22>
 8008478:	4b29      	ldr	r3, [pc, #164]	; (8008520 <poll_tcp+0xbc>)
 800847a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800847e:	4929      	ldr	r1, [pc, #164]	; (8008524 <poll_tcp+0xc0>)
 8008480:	4829      	ldr	r0, [pc, #164]	; (8008528 <poll_tcp+0xc4>)
 8008482:	f00e fa1b 	bl	80168bc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d104      	bne.n	8008498 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800848e:	2101      	movs	r1, #1
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f001 f813 	bl	80094bc <lwip_netconn_do_writemore>
 8008496:	e016      	b.n	80084c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d112      	bne.n	80084c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <poll_tcp+0x5a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	7a5b      	ldrb	r3, [r3, #9]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	7a5a      	ldrb	r2, [r3, #9]
 80084b8:	3a01      	subs	r2, #1
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80084be:	2101      	movs	r1, #1
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fc13 	bl	8008cec <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	7f1b      	ldrb	r3, [r3, #28]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d021      	beq.n	8008516 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01d      	beq.n	8008516 <poll_tcp+0xb2>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80084e6:	d316      	bcc.n	8008516 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d810      	bhi.n	8008516 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	7f1b      	ldrb	r3, [r3, #28]
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	2b00      	cmp	r3, #0
 8008508:	d005      	beq.n	8008516 <poll_tcp+0xb2>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	2200      	movs	r2, #0
 8008510:	2102      	movs	r1, #2
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	08017fd8 	.word	0x08017fd8
 8008524:	080180fc 	.word	0x080180fc
 8008528:	08018030 	.word	0x08018030

0800852c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <sent_tcp+0x26>
 8008544:	4b20      	ldr	r3, [pc, #128]	; (80085c8 <sent_tcp+0x9c>)
 8008546:	f240 1261 	movw	r2, #353	; 0x161
 800854a:	4920      	ldr	r1, [pc, #128]	; (80085cc <sent_tcp+0xa0>)
 800854c:	4820      	ldr	r0, [pc, #128]	; (80085d0 <sent_tcp+0xa4>)
 800854e:	f00e f9b5 	bl	80168bc <iprintf>

  if (conn) {
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d032      	beq.n	80085be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d104      	bne.n	800856a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008560:	2101      	movs	r1, #1
 8008562:	6978      	ldr	r0, [r7, #20]
 8008564:	f000 ffaa 	bl	80094bc <lwip_netconn_do_writemore>
 8008568:	e007      	b.n	800857a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b04      	cmp	r3, #4
 8008570:	d103      	bne.n	800857a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008572:	2101      	movs	r1, #1
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f000 fbb9 	bl	8008cec <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01d      	beq.n	80085be <sent_tcp+0x92>
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800858a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800858e:	d316      	bcc.n	80085be <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008598:	2b04      	cmp	r3, #4
 800859a:	d810      	bhi.n	80085be <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	7f1b      	ldrb	r3, [r3, #28]
 80085a0:	f023 0310 	bic.w	r3, r3, #16
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <sent_tcp+0x92>
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	88fa      	ldrh	r2, [r7, #6]
 80085b8:	2102      	movs	r1, #2
 80085ba:	6978      	ldr	r0, [r7, #20]
 80085bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3718      	adds	r7, #24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	08017fd8 	.word	0x08017fd8
 80085cc:	080180fc 	.word	0x080180fc
 80085d0:	08018030 	.word	0x08018030

080085d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	; 0x28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <err_tcp+0x24>
 80085ea:	4b6c      	ldr	r3, [pc, #432]	; (800879c <err_tcp+0x1c8>)
 80085ec:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80085f0:	496b      	ldr	r1, [pc, #428]	; (80087a0 <err_tcp+0x1cc>)
 80085f2:	486c      	ldr	r0, [pc, #432]	; (80087a4 <err_tcp+0x1d0>)
 80085f4:	f00e f962 	bl	80168bc <iprintf>

  conn->pcb.tcp = NULL;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2200      	movs	r2, #0
 800860a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800860c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008610:	2b04      	cmp	r3, #4
 8008612:	d114      	bne.n	800863e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	d018      	beq.n	8008650 <err_tcp+0x7c>
 800861e:	f00e f8e9 	bl	80167f4 <sys_arch_protect>
 8008622:	61b8      	str	r0, [r7, #24]
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800862a:	f113 0f0c 	cmn.w	r3, #12
 800862e:	db02      	blt.n	8008636 <err_tcp+0x62>
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2200      	movs	r2, #0
 8008634:	721a      	strb	r2, [r3, #8]
 8008636:	69b8      	ldr	r0, [r7, #24]
 8008638:	f00e f8ea 	bl	8016810 <sys_arch_unprotect>
 800863c:	e008      	b.n	8008650 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800863e:	f00e f8d9 	bl	80167f4 <sys_arch_protect>
 8008642:	61f8      	str	r0, [r7, #28]
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	721a      	strb	r2, [r3, #8]
 800864a:	69f8      	ldr	r0, [r7, #28]
 800864c:	f00e f8e0 	bl	8016810 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <err_tcp+0x90>
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865c:	2200      	movs	r2, #0
 800865e:	2104      	movs	r1, #4
 8008660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008662:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <err_tcp+0xa4>
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008676:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <err_tcp+0xb8>
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	2200      	movs	r2, #0
 8008686:	2102      	movs	r1, #2
 8008688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800868a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f00d ff93 	bl	80165bc <sys_mbox_valid>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	3310      	adds	r3, #16
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f00d ff15 	bl	80164d2 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	3314      	adds	r3, #20
 80086ac:	4618      	mov	r0, r3
 80086ae:	f00d ff85 	bl	80165bc <sys_mbox_valid>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	3314      	adds	r3, #20
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f00d ff07 	bl	80164d2 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80086c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d007      	beq.n	80086dc <err_tcp+0x108>
 80086cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d003      	beq.n	80086dc <err_tcp+0x108>
 80086d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d14d      	bne.n	8008778 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	7f1b      	ldrb	r3, [r3, #28]
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bf14      	ite	ne
 80086e8:	2301      	movne	r3, #1
 80086ea:	2300      	moveq	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	7f1b      	ldrb	r3, [r3, #28]
 80086f4:	f023 0304 	bic.w	r3, r3, #4
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d145      	bne.n	8008790 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <err_tcp+0x146>
 800870c:	4b23      	ldr	r3, [pc, #140]	; (800879c <err_tcp+0x1c8>)
 800870e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008712:	4925      	ldr	r1, [pc, #148]	; (80087a8 <err_tcp+0x1d4>)
 8008714:	4823      	ldr	r0, [pc, #140]	; (80087a4 <err_tcp+0x1d0>)
 8008716:	f00e f8d1 	bl	80168bc <iprintf>
      conn->current_msg->err = err;
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	330c      	adds	r3, #12
 800872a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800872c:	6938      	ldr	r0, [r7, #16]
 800872e:	f00d ffd6 	bl	80166de <sys_sem_valid>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <err_tcp+0x172>
 8008738:	4b18      	ldr	r3, [pc, #96]	; (800879c <err_tcp+0x1c8>)
 800873a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800873e:	491b      	ldr	r1, [pc, #108]	; (80087ac <err_tcp+0x1d8>)
 8008740:	4818      	ldr	r0, [pc, #96]	; (80087a4 <err_tcp+0x1d0>)
 8008742:	f00e f8bb 	bl	80168bc <iprintf>
      conn->current_msg = NULL;
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	2200      	movs	r2, #0
 800874a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <err_tcp+0x19c>
 8008752:	f00e f84f 	bl	80167f4 <sys_arch_protect>
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800875e:	f113 0f0c 	cmn.w	r3, #12
 8008762:	db02      	blt.n	800876a <err_tcp+0x196>
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	721a      	strb	r2, [r3, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f00e f850 	bl	8016810 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008770:	6938      	ldr	r0, [r7, #16]
 8008772:	f00d ff9a 	bl	80166aa <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008776:	e00b      	b.n	8008790 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <err_tcp+0x1be>
 8008780:	4b06      	ldr	r3, [pc, #24]	; (800879c <err_tcp+0x1c8>)
 8008782:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008786:	490a      	ldr	r1, [pc, #40]	; (80087b0 <err_tcp+0x1dc>)
 8008788:	4806      	ldr	r0, [pc, #24]	; (80087a4 <err_tcp+0x1d0>)
 800878a:	f00e f897 	bl	80168bc <iprintf>
  }
}
 800878e:	e000      	b.n	8008792 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8008790:	bf00      	nop
}
 8008792:	bf00      	nop
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	08017fd8 	.word	0x08017fd8
 80087a0:	080180fc 	.word	0x080180fc
 80087a4:	08018030 	.word	0x08018030
 80087a8:	0801810c 	.word	0x0801810c
 80087ac:	08018128 	.word	0x08018128
 80087b0:	08018144 	.word	0x08018144

080087b4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f005 f855 	bl	800d874 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80087ca:	490a      	ldr	r1, [pc, #40]	; (80087f4 <setup_tcp+0x40>)
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f005 f863 	bl	800d898 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80087d2:	4909      	ldr	r1, [pc, #36]	; (80087f8 <setup_tcp+0x44>)
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f005 f881 	bl	800d8dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80087da:	2202      	movs	r2, #2
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <setup_tcp+0x48>)
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f005 f8d6 	bl	800d990 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80087e4:	4906      	ldr	r1, [pc, #24]	; (8008800 <setup_tcp+0x4c>)
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f005 f898 	bl	800d91c <tcp_err>
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	08008355 	.word	0x08008355
 80087f8:	0800852d 	.word	0x0800852d
 80087fc:	08008465 	.word	0x08008465
 8008800:	080085d5 	.word	0x080085d5

08008804 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <accept_function+0x1e>
    return ERR_VAL;
 800881c:	f06f 0305 	mvn.w	r3, #5
 8008820:	e08d      	b.n	800893e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	3314      	adds	r3, #20
 8008826:	4618      	mov	r0, r3
 8008828:	f00d fec8 	bl	80165bc <sys_mbox_valid>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008832:	f06f 0305 	mvn.w	r3, #5
 8008836:	e082      	b.n	800893e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d115      	bne.n	800886a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	3314      	adds	r3, #20
 8008842:	4941      	ldr	r1, [pc, #260]	; (8008948 <accept_function+0x144>)
 8008844:	4618      	mov	r0, r3
 8008846:	f00d fe44 	bl	80164d2 <sys_mbox_trypost>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d109      	bne.n	8008864 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <accept_function+0x60>
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	2200      	movs	r2, #0
 800885e:	2100      	movs	r1, #0
 8008860:	69f8      	ldr	r0, [r7, #28]
 8008862:	4798      	blx	r3
    }
    return ERR_VAL;
 8008864:	f06f 0305 	mvn.w	r3, #5
 8008868:	e069      	b.n	800893e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	4619      	mov	r1, r3
 8008874:	4610      	mov	r0, r2
 8008876:	f000 f8ff 	bl	8008a78 <netconn_alloc>
 800887a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d115      	bne.n	80088ae <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3314      	adds	r3, #20
 8008886:	4930      	ldr	r1, [pc, #192]	; (8008948 <accept_function+0x144>)
 8008888:	4618      	mov	r0, r3
 800888a:	f00d fe22 	bl	80164d2 <sys_mbox_trypost>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d109      	bne.n	80088a8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d005      	beq.n	80088a8 <accept_function+0xa4>
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	2200      	movs	r2, #0
 80088a2:	2100      	movs	r1, #0
 80088a4:	69f8      	ldr	r0, [r7, #28]
 80088a6:	4798      	blx	r3
    }
    return ERR_MEM;
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088ac:	e047      	b.n	800893e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80088b4:	69b8      	ldr	r0, [r7, #24]
 80088b6:	f7ff ff7d 	bl	80087b4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	79fa      	ldrb	r2, [r7, #7]
 80088be:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	3314      	adds	r3, #20
 80088c4:	69b9      	ldr	r1, [r7, #24]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f00d fe03 	bl	80164d2 <sys_mbox_trypost>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d02a      	beq.n	8008928 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80088d8:	2100      	movs	r1, #0
 80088da:	6978      	ldr	r0, [r7, #20]
 80088dc:	f004 ffca 	bl	800d874 <tcp_arg>
    tcp_recv(pcb, NULL);
 80088e0:	2100      	movs	r1, #0
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f004 ffd8 	bl	800d898 <tcp_recv>
    tcp_sent(pcb, NULL);
 80088e8:	2100      	movs	r1, #0
 80088ea:	6978      	ldr	r0, [r7, #20]
 80088ec:	f004 fff6 	bl	800d8dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	6978      	ldr	r0, [r7, #20]
 80088f6:	f005 f84b 	bl	800d990 <tcp_poll>
    tcp_err(pcb, NULL);
 80088fa:	2100      	movs	r1, #0
 80088fc:	6978      	ldr	r0, [r7, #20]
 80088fe:	f005 f80d 	bl	800d91c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2200      	movs	r2, #0
 8008906:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	3310      	adds	r3, #16
 800890c:	4618      	mov	r0, r3
 800890e:	f00d fdb9 	bl	8016484 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	3310      	adds	r3, #16
 8008916:	4618      	mov	r0, r3
 8008918:	f00d fe61 	bl	80165de <sys_mbox_set_invalid>
    netconn_free(newconn);
 800891c:	69b8      	ldr	r0, [r7, #24]
 800891e:	f000 f91b 	bl	8008b58 <netconn_free>
    return ERR_MEM;
 8008922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008926:	e00a      	b.n	800893e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <accept_function+0x138>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	2200      	movs	r2, #0
 8008936:	2100      	movs	r1, #0
 8008938:	69f8      	ldr	r0, [r7, #28]
 800893a:	4798      	blx	r3
  }

  return ERR_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	2000c388 	.word	0x2000c388

0800894c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800894c:	b590      	push	{r4, r7, lr}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d006      	beq.n	8008970 <pcb_new+0x24>
 8008962:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <pcb_new+0xc4>)
 8008964:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008968:	492a      	ldr	r1, [pc, #168]	; (8008a14 <pcb_new+0xc8>)
 800896a:	482b      	ldr	r0, [pc, #172]	; (8008a18 <pcb_new+0xcc>)
 800896c:	f00d ffa6 	bl	80168bc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800897a:	2b10      	cmp	r3, #16
 800897c:	d022      	beq.n	80089c4 <pcb_new+0x78>
 800897e:	2b20      	cmp	r3, #32
 8008980:	d133      	bne.n	80089ea <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681c      	ldr	r4, [r3, #0]
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	4618      	mov	r0, r3
 800898a:	f009 fc3c 	bl	8012206 <udp_new_ip_type>
 800898e:	4603      	mov	r3, r0
 8008990:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02a      	beq.n	80089f2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	2b22      	cmp	r3, #34	; 0x22
 80089a4:	d104      	bne.n	80089b0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6858      	ldr	r0, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	4917      	ldr	r1, [pc, #92]	; (8008a1c <pcb_new+0xd0>)
 80089be:	f009 fbc7 	bl	8012150 <udp_recv>
    }
    break;
 80089c2:	e016      	b.n	80089f2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681c      	ldr	r4, [r3, #0]
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f004 ff44 	bl	800d858 <tcp_new_ip_type>
 80089d0:	4603      	mov	r3, r0
 80089d2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fee6 	bl	80087b4 <setup_tcp>
    }
    break;
 80089e8:	e005      	b.n	80089f6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	22fa      	movs	r2, #250	; 0xfa
 80089ee:	711a      	strb	r2, [r3, #4]
    return;
 80089f0:	e00a      	b.n	8008a08 <pcb_new+0xbc>
    break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <pcb_new+0xac>
    break;
 80089f6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d102      	bne.n	8008a08 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	711a      	strb	r2, [r3, #4]
  }
}
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	08017fd8 	.word	0x08017fd8
 8008a14:	08018160 	.word	0x08018160
 8008a18:	08018030 	.word	0x08018030
 8008a1c:	08008259 	.word	0x08008259

08008a20 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f7ff ff85 	bl	800894c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d012      	beq.n	8008a70 <lwip_netconn_do_newconn+0x50>
 8008a4a:	f00d fed3 	bl	80167f4 <sys_arch_protect>
 8008a4e:	60b8      	str	r0, [r7, #8]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a58:	f113 0f0c 	cmn.w	r3, #12
 8008a5c:	db05      	blt.n	8008a6a <lwip_netconn_do_newconn+0x4a>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a68:	721a      	strb	r2, [r3, #8]
 8008a6a:	68b8      	ldr	r0, [r7, #8]
 8008a6c:	f00d fed0 	bl	8016810 <sys_arch_unprotect>
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	6039      	str	r1, [r7, #0]
 8008a82:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008a84:	2007      	movs	r0, #7
 8008a86:	f002 fc55 	bl	800b334 <memp_malloc>
 8008a8a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <netconn_alloc+0x1e>
    return NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e055      	b.n	8008b42 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	79fa      	ldrb	r2, [r7, #7]
 8008aa0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d004      	beq.n	8008abc <netconn_alloc+0x44>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	d105      	bne.n	8008ac2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008ab6:	2306      	movs	r3, #6
 8008ab8:	60fb      	str	r3, [r7, #12]
    break;
 8008aba:	e00a      	b.n	8008ad2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008abc:	2306      	movs	r3, #6
 8008abe:	60fb      	str	r3, [r7, #12]
    break;
 8008ac0:	e007      	b.n	8008ad2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <netconn_alloc+0xd4>)
 8008ac4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008ac8:	4921      	ldr	r1, [pc, #132]	; (8008b50 <netconn_alloc+0xd8>)
 8008aca:	4822      	ldr	r0, [pc, #136]	; (8008b54 <netconn_alloc+0xdc>)
 8008acc:	f00d fef6 	bl	80168bc <iprintf>
    goto free_and_return;
 8008ad0:	e032      	b.n	8008b38 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3310      	adds	r3, #16
 8008ad6:	68f9      	ldr	r1, [r7, #12]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f00d fcb1 	bl	8016440 <sys_mbox_new>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d128      	bne.n	8008b36 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f00d fd84 	bl	80165f8 <sys_sem_new>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	3310      	adds	r3, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f00d fcc2 	bl	8016484 <sys_mbox_free>
    goto free_and_return;
 8008b00:	e01a      	b.n	8008b38 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	3314      	adds	r3, #20
 8008b06:	4618      	mov	r0, r3
 8008b08:	f00d fd69 	bl	80165de <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b18:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	771a      	strb	r2, [r3, #28]
  return conn;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	e005      	b.n	8008b42 <netconn_alloc+0xca>
    goto free_and_return;
 8008b36:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	2007      	movs	r0, #7
 8008b3c:	f002 fc4c 	bl	800b3d8 <memp_free>
  return NULL;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08017fd8 	.word	0x08017fd8
 8008b50:	08018180 	.word	0x08018180
 8008b54:	08018030 	.word	0x08018030

08008b58 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d006      	beq.n	8008b76 <netconn_free+0x1e>
 8008b68:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <netconn_free+0x80>)
 8008b6a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008b6e:	491b      	ldr	r1, [pc, #108]	; (8008bdc <netconn_free+0x84>)
 8008b70:	481b      	ldr	r0, [pc, #108]	; (8008be0 <netconn_free+0x88>)
 8008b72:	f00d fea3 	bl	80168bc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3310      	adds	r3, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f00d fd1e 	bl	80165bc <sys_mbox_valid>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <netconn_free+0x3c>
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <netconn_free+0x80>)
 8008b88:	f240 22e2 	movw	r2, #738	; 0x2e2
 8008b8c:	4915      	ldr	r1, [pc, #84]	; (8008be4 <netconn_free+0x8c>)
 8008b8e:	4814      	ldr	r0, [pc, #80]	; (8008be0 <netconn_free+0x88>)
 8008b90:	f00d fe94 	bl	80168bc <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3314      	adds	r3, #20
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f00d fd0f 	bl	80165bc <sys_mbox_valid>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d006      	beq.n	8008bb2 <netconn_free+0x5a>
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <netconn_free+0x80>)
 8008ba6:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008baa:	490f      	ldr	r1, [pc, #60]	; (8008be8 <netconn_free+0x90>)
 8008bac:	480c      	ldr	r0, [pc, #48]	; (8008be0 <netconn_free+0x88>)
 8008bae:	f00d fe85 	bl	80168bc <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f00d fd84 	bl	80166c4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f00d fd9d 	bl	8016700 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	2007      	movs	r0, #7
 8008bca:	f002 fc05 	bl	800b3d8 <memp_free>
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08017fd8 	.word	0x08017fd8
 8008bdc:	080181a8 	.word	0x080181a8
 8008be0:	08018030 	.word	0x08018030
 8008be4:	080181d8 	.word	0x080181d8
 8008be8:	08018214 	.word	0x08018214

08008bec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f00d fcdf 	bl	80165bc <sys_mbox_valid>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d035      	beq.n	8008c70 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c04:	e01e      	b.n	8008c44 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c0e:	2b10      	cmp	r3, #16
 8008c10:	d114      	bne.n	8008c3c <netconn_drain+0x50>
        if (mem != NULL) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	891b      	ldrh	r3, [r3, #8]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f004 f830 	bl	800cc94 <tcp_recved>
          }
          pbuf_free(p);
 8008c34:	6978      	ldr	r0, [r7, #20]
 8008c36:	f003 f931 	bl	800be9c <pbuf_free>
 8008c3a:	e003      	b.n	8008c44 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 ff38 	bl	8009ab4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3310      	adds	r3, #16
 8008c48:	f107 020c 	add.w	r2, r7, #12
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f00d fc98 	bl	8016584 <sys_arch_mbox_tryfetch>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c5a:	d1d4      	bne.n	8008c06 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3310      	adds	r3, #16
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00d fc0f 	bl	8016484 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3310      	adds	r3, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00d fcb7 	bl	80165de <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3314      	adds	r3, #20
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00d fca1 	bl	80165bc <sys_mbox_valid>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d02e      	beq.n	8008cde <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c80:	e017      	b.n	8008cb2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a18      	ldr	r2, [pc, #96]	; (8008ce8 <netconn_drain+0xfc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8008c8e:	6938      	ldr	r0, [r7, #16]
 8008c90:	f7ff ffac 	bl	8008bec <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f003 fe51 	bl	800c948 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8008cac:	6938      	ldr	r0, [r7, #16]
 8008cae:	f7ff ff53 	bl	8008b58 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	f107 020c 	add.w	r2, r7, #12
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f00d fc61 	bl	8016584 <sys_arch_mbox_tryfetch>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc8:	d1db      	bne.n	8008c82 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3314      	adds	r3, #20
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f00d fbd8 	bl	8016484 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3314      	adds	r3, #20
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f00d fc80 	bl	80165de <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000c388 	.word	0x2000c388

08008cec <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <lwip_netconn_do_close_internal+0x24>
 8008d02:	4baa      	ldr	r3, [pc, #680]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008d04:	f240 3243 	movw	r2, #835	; 0x343
 8008d08:	49a9      	ldr	r1, [pc, #676]	; (8008fb0 <lwip_netconn_do_close_internal+0x2c4>)
 8008d0a:	48aa      	ldr	r0, [pc, #680]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008d0c:	f00d fdd6 	bl	80168bc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d006      	beq.n	8008d2a <lwip_netconn_do_close_internal+0x3e>
 8008d1c:	4ba3      	ldr	r3, [pc, #652]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008d1e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8008d22:	49a5      	ldr	r1, [pc, #660]	; (8008fb8 <lwip_netconn_do_close_internal+0x2cc>)
 8008d24:	48a3      	ldr	r0, [pc, #652]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008d26:	f00d fdc9 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d006      	beq.n	8008d40 <lwip_netconn_do_close_internal+0x54>
 8008d32:	4b9e      	ldr	r3, [pc, #632]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008d34:	f240 3245 	movw	r2, #837	; 0x345
 8008d38:	49a0      	ldr	r1, [pc, #640]	; (8008fbc <lwip_netconn_do_close_internal+0x2d0>)
 8008d3a:	489e      	ldr	r0, [pc, #632]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008d3c:	f00d fdbe 	bl	80168bc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <lwip_netconn_do_close_internal+0x6a>
 8008d48:	4b98      	ldr	r3, [pc, #608]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008d4a:	f240 3246 	movw	r2, #838	; 0x346
 8008d4e:	499c      	ldr	r1, [pc, #624]	; (8008fc0 <lwip_netconn_do_close_internal+0x2d4>)
 8008d50:	4898      	ldr	r0, [pc, #608]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008d52:	f00d fdb3 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <lwip_netconn_do_close_internal+0x80>
 8008d5e:	4b93      	ldr	r3, [pc, #588]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008d60:	f240 3247 	movw	r2, #839	; 0x347
 8008d64:	4997      	ldr	r1, [pc, #604]	; (8008fc4 <lwip_netconn_do_close_internal+0x2d8>)
 8008d66:	4893      	ldr	r0, [pc, #588]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008d68:	f00d fda8 	bl	80168bc <iprintf>

  tpcb = conn->pcb.tcp;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	7a1b      	ldrb	r3, [r3, #8]
 8008d78:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d102      	bne.n	8008d96 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8008d90:	2301      	movs	r3, #1
 8008d92:	77bb      	strb	r3, [r7, #30]
 8008d94:	e01f      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00e      	beq.n	8008dba <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008da0:	2b05      	cmp	r3, #5
 8008da2:	d007      	beq.n	8008db4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008da8:	2b06      	cmp	r3, #6
 8008daa:	d003      	beq.n	8008db4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d102      	bne.n	8008dba <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8008db4:	2301      	movs	r3, #1
 8008db6:	77bb      	strb	r3, [r7, #30]
 8008db8:	e00d      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008dba:	7d7b      	ldrb	r3, [r7, #21]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d008      	beq.n	8008dd2 <lwip_netconn_do_close_internal+0xe6>
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	7e9b      	ldrb	r3, [r3, #26]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	77bb      	strb	r3, [r7, #30]
 8008dd0:	e001      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8008dd6:	7fbb      	ldrb	r3, [r7, #30]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008ddc:	2100      	movs	r1, #0
 8008dde:	69b8      	ldr	r0, [r7, #24]
 8008de0:	f004 fd48 	bl	800d874 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d104      	bne.n	8008df6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008dec:	2100      	movs	r1, #0
 8008dee:	69b8      	ldr	r0, [r7, #24]
 8008df0:	f004 fdb6 	bl	800d960 <tcp_accept>
 8008df4:	e01d      	b.n	8008e32 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008df6:	7dbb      	ldrb	r3, [r7, #22]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	69b8      	ldr	r0, [r7, #24]
 8008e00:	f004 fd4a 	bl	800d898 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008e04:	2100      	movs	r1, #0
 8008e06:	69b8      	ldr	r0, [r7, #24]
 8008e08:	f004 fdaa 	bl	800d960 <tcp_accept>
    }
    if (shut_tx) {
 8008e0c:	7d7b      	ldrb	r3, [r7, #21]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008e12:	2100      	movs	r1, #0
 8008e14:	69b8      	ldr	r0, [r7, #24]
 8008e16:	f004 fd61 	bl	800d8dc <tcp_sent>
    }
    if (close) {
 8008e1a:	7fbb      	ldrb	r3, [r7, #30]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d008      	beq.n	8008e32 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008e20:	2200      	movs	r2, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	69b8      	ldr	r0, [r7, #24]
 8008e26:	f004 fdb3 	bl	800d990 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	69b8      	ldr	r0, [r7, #24]
 8008e2e:	f004 fd75 	bl	800d91c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8008e32:	7fbb      	ldrb	r3, [r7, #30]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008e38:	69b8      	ldr	r0, [r7, #24]
 8008e3a:	f003 fc73 	bl	800c724 <tcp_close>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	77fb      	strb	r3, [r7, #31]
 8008e42:	e007      	b.n	8008e54 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008e44:	7dbb      	ldrb	r3, [r7, #22]
 8008e46:	7d7a      	ldrb	r2, [r7, #21]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	69b8      	ldr	r0, [r7, #24]
 8008e4c:	f003 fc82 	bl	800c754 <tcp_shutdown>
 8008e50:	4603      	mov	r3, r0
 8008e52:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8008e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	777b      	strb	r3, [r7, #29]
 8008e60:	e016      	b.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e6a:	d10f      	bne.n	8008e8c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	7a5b      	ldrb	r3, [r3, #9]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10c      	bne.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008e76:	2301      	movs	r3, #1
 8008e78:	777b      	strb	r3, [r7, #29]
        if (close) {
 8008e7a:	7fbb      	ldrb	r3, [r7, #30]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008e80:	69b8      	ldr	r0, [r7, #24]
 8008e82:	f003 fd61 	bl	800c948 <tcp_abort>
          err = ERR_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e001      	b.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8008e90:	7f7b      	ldrb	r3, [r7, #29]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d056      	beq.n	8008f44 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	7ffa      	ldrb	r2, [r7, #31]
 8008ea6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d129      	bne.n	8008f10 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008ebc:	7fbb      	ldrb	r3, [r7, #30]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00c      	beq.n	8008edc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <lwip_netconn_do_close_internal+0x1f0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
      }
      if (shut_rx) {
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <lwip_netconn_do_close_internal+0x20a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
      }
      if (shut_tx) {
 8008ef6:	7d7b      	ldrb	r3, [r7, #21]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d009      	beq.n	8008f10 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <lwip_netconn_do_close_internal+0x224>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00e      	beq.n	8008f34 <lwip_netconn_do_close_internal+0x248>
 8008f16:	f00d fc6d 	bl	80167f4 <sys_arch_protect>
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008f22:	f113 0f0c 	cmn.w	r3, #12
 8008f26:	db02      	blt.n	8008f2e <lwip_netconn_do_close_internal+0x242>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7ffa      	ldrb	r2, [r7, #31]
 8008f2c:	721a      	strb	r2, [r3, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f00d fc6e 	bl	8016810 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f00d fbb5 	bl	80166aa <sys_sem_signal>
    }
    return ERR_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e02e      	b.n	8008fa2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8008f44:	7f7b      	ldrb	r3, [r7, #29]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d11e      	bne.n	8008f88 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	7d1b      	ldrb	r3, [r3, #20]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d106      	bne.n	8008f60 <lwip_netconn_do_close_internal+0x274>
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008f54:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008f58:	491b      	ldr	r1, [pc, #108]	; (8008fc8 <lwip_netconn_do_close_internal+0x2dc>)
 8008f5a:	4816      	ldr	r0, [pc, #88]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008f5c:	f00d fcae 	bl	80168bc <iprintf>
    if (shut_tx) {
 8008f60:	7d7b      	ldrb	r3, [r7, #21]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8008f66:	4919      	ldr	r1, [pc, #100]	; (8008fcc <lwip_netconn_do_close_internal+0x2e0>)
 8008f68:	69b8      	ldr	r0, [r7, #24]
 8008f6a:	f004 fcb7 	bl	800d8dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4917      	ldr	r1, [pc, #92]	; (8008fd0 <lwip_netconn_do_close_internal+0x2e4>)
 8008f72:	69b8      	ldr	r0, [r7, #24]
 8008f74:	f004 fd0c 	bl	800d990 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008f78:	4916      	ldr	r1, [pc, #88]	; (8008fd4 <lwip_netconn_do_close_internal+0x2e8>)
 8008f7a:	69b8      	ldr	r0, [r7, #24]
 8008f7c:	f004 fcce 	bl	800d91c <tcp_err>
    tcp_arg(tpcb, conn);
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	69b8      	ldr	r0, [r7, #24]
 8008f84:	f004 fc76 	bl	800d874 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008f88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <lwip_netconn_do_close_internal+0x2b2>
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <lwip_netconn_do_close_internal+0x2c0>)
 8008f92:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008f96:	4910      	ldr	r1, [pc, #64]	; (8008fd8 <lwip_netconn_do_close_internal+0x2ec>)
 8008f98:	4806      	ldr	r0, [pc, #24]	; (8008fb4 <lwip_netconn_do_close_internal+0x2c8>)
 8008f9a:	f00d fc8f 	bl	80168bc <iprintf>
  return err;
 8008f9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	08017fd8 	.word	0x08017fd8
 8008fb0:	08018250 	.word	0x08018250
 8008fb4:	08018030 	.word	0x08018030
 8008fb8:	08018260 	.word	0x08018260
 8008fbc:	08018280 	.word	0x08018280
 8008fc0:	080182a4 	.word	0x080182a4
 8008fc4:	0801810c 	.word	0x0801810c
 8008fc8:	080182b8 	.word	0x080182b8
 8008fcc:	0800852d 	.word	0x0800852d
 8008fd0:	08008465 	.word	0x08008465
 8008fd4:	080085d5 	.word	0x080085d5
 8008fd8:	080182dc 	.word	0x080182dc

08008fdc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008ff0:	7cfb      	ldrb	r3, [r7, #19]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <lwip_netconn_do_delconn+0x36>
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009000:	2b10      	cmp	r3, #16
 8009002:	d006      	beq.n	8009012 <lwip_netconn_do_delconn+0x36>
 8009004:	4b6f      	ldr	r3, [pc, #444]	; (80091c4 <lwip_netconn_do_delconn+0x1e8>)
 8009006:	f240 4201 	movw	r2, #1025	; 0x401
 800900a:	496f      	ldr	r1, [pc, #444]	; (80091c8 <lwip_netconn_do_delconn+0x1ec>)
 800900c:	486f      	ldr	r0, [pc, #444]	; (80091cc <lwip_netconn_do_delconn+0x1f0>)
 800900e:	f00d fc55 	bl	80168bc <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009012:	7cfb      	ldrb	r3, [r7, #19]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <lwip_netconn_do_delconn+0x48>
 8009018:	7cfb      	ldrb	r3, [r7, #19]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d002      	beq.n	8009024 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800901e:	7cfb      	ldrb	r3, [r7, #19]
 8009020:	2b03      	cmp	r3, #3
 8009022:	d109      	bne.n	8009038 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009024:	7cfb      	ldrb	r3, [r7, #19]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d10a      	bne.n	8009040 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	7f1b      	ldrb	r3, [r3, #28]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	22fb      	movs	r2, #251	; 0xfb
 800903c:	711a      	strb	r2, [r3, #4]
 800903e:	e09c      	b.n	800917a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009040:	7cfb      	ldrb	r3, [r7, #19]
 8009042:	2b03      	cmp	r3, #3
 8009044:	d10d      	bne.n	8009062 <lwip_netconn_do_delconn+0x86>
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	7f1b      	ldrb	r3, [r3, #28]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <lwip_netconn_do_delconn+0x86>
 8009054:	4b5b      	ldr	r3, [pc, #364]	; (80091c4 <lwip_netconn_do_delconn+0x1e8>)
 8009056:	f240 421f 	movw	r2, #1055	; 0x41f
 800905a:	495d      	ldr	r1, [pc, #372]	; (80091d0 <lwip_netconn_do_delconn+0x1f4>)
 800905c:	485b      	ldr	r0, [pc, #364]	; (80091cc <lwip_netconn_do_delconn+0x1f0>)
 800905e:	f00d fc2d 	bl	80168bc <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2200      	movs	r2, #0
 8009066:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fdbd 	bl	8008bec <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d064      	beq.n	8009146 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009086:	2b10      	cmp	r3, #16
 8009088:	d00e      	beq.n	80090a8 <lwip_netconn_do_delconn+0xcc>
 800908a:	2b20      	cmp	r3, #32
 800908c:	d000      	beq.n	8009090 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800908e:	e056      	b.n	800913e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f009 f867 	bl	8012174 <udp_remove>
        break;
 80090a6:	e04a      	b.n	800913e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <lwip_netconn_do_delconn+0xe0>
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <lwip_netconn_do_delconn+0xee>
 80090bc:	4b41      	ldr	r3, [pc, #260]	; (80091c4 <lwip_netconn_do_delconn+0x1e8>)
 80090be:	f240 4235 	movw	r2, #1077	; 0x435
 80090c2:	4944      	ldr	r1, [pc, #272]	; (80091d4 <lwip_netconn_do_delconn+0x1f8>)
 80090c4:	4841      	ldr	r0, [pc, #260]	; (80091cc <lwip_netconn_do_delconn+0x1f0>)
 80090c6:	f00d fbf9 	bl	80168bc <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2204      	movs	r2, #4
 80090d0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2203      	movs	r2, #3
 80090d6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff fe00 	bl	8008cec <lwip_netconn_do_close_internal>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d064      	beq.n	80091bc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d006      	beq.n	800910a <lwip_netconn_do_delconn+0x12e>
 80090fc:	4b31      	ldr	r3, [pc, #196]	; (80091c4 <lwip_netconn_do_delconn+0x1e8>)
 80090fe:	f240 423b 	movw	r2, #1083	; 0x43b
 8009102:	4935      	ldr	r1, [pc, #212]	; (80091d8 <lwip_netconn_do_delconn+0x1fc>)
 8009104:	4831      	ldr	r0, [pc, #196]	; (80091cc <lwip_netconn_do_delconn+0x1f0>)
 8009106:	f00d fbd9 	bl	80168bc <iprintf>
          UNLOCK_TCPIP_CORE();
 800910a:	4834      	ldr	r0, [pc, #208]	; (80091dc <lwip_netconn_do_delconn+0x200>)
 800910c:	f00d fb3f 	bl	801678e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	2100      	movs	r1, #0
 8009118:	4618      	mov	r0, r3
 800911a:	f00d fa95 	bl	8016648 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800911e:	482f      	ldr	r0, [pc, #188]	; (80091dc <lwip_netconn_do_delconn+0x200>)
 8009120:	f00d fb26 	bl	8016770 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d046      	beq.n	80091bc <lwip_netconn_do_delconn+0x1e0>
 800912e:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <lwip_netconn_do_delconn+0x1e8>)
 8009130:	f240 423f 	movw	r2, #1087	; 0x43f
 8009134:	4928      	ldr	r1, [pc, #160]	; (80091d8 <lwip_netconn_do_delconn+0x1fc>)
 8009136:	4825      	ldr	r0, [pc, #148]	; (80091cc <lwip_netconn_do_delconn+0x1f0>)
 8009138:	f00d fbc0 	bl	80168bc <iprintf>
        return;
 800913c:	e03e      	b.n	80091bc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <lwip_netconn_do_delconn+0x184>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	6810      	ldr	r0, [r2, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	2100      	movs	r1, #0
 800915e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <lwip_netconn_do_delconn+0x19e>
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	6810      	ldr	r0, [r2, #0]
 8009174:	2200      	movs	r2, #0
 8009176:	2102      	movs	r1, #2
 8009178:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	330c      	adds	r3, #12
 8009180:	4618      	mov	r0, r3
 8009182:	f00d faac 	bl	80166de <sys_sem_valid>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d018      	beq.n	80091be <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d014      	beq.n	80091be <lwip_netconn_do_delconn+0x1e2>
 8009194:	f00d fb2e 	bl	80167f4 <sys_arch_protect>
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091a2:	f113 0f0c 	cmn.w	r3, #12
 80091a6:	db05      	blt.n	80091b4 <lwip_netconn_do_delconn+0x1d8>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80091b2:	721a      	strb	r2, [r3, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f00d fb2b 	bl	8016810 <sys_arch_unprotect>
 80091ba:	e000      	b.n	80091be <lwip_netconn_do_delconn+0x1e2>
        return;
 80091bc:	bf00      	nop
  }
}
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	08017fd8 	.word	0x08017fd8
 80091c8:	080182ec 	.word	0x080182ec
 80091cc:	08018030 	.word	0x08018030
 80091d0:	08018300 	.word	0x08018300
 80091d4:	08018320 	.word	0x08018320
 80091d8:	0801833c 	.word	0x0801833c
 80091dc:	2000c38c 	.word	0x2000c38c

080091e0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091f4:	f113 0f0c 	cmn.w	r3, #12
 80091f8:	da06      	bge.n	8009208 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	711a      	strb	r2, [r3, #4]
 8009206:	e030      	b.n	800926a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	22fa      	movs	r2, #250	; 0xfa
 800920c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d027      	beq.n	8009268 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009222:	2b10      	cmp	r3, #16
 8009224:	d011      	beq.n	800924a <lwip_netconn_do_bind+0x6a>
 8009226:	2b20      	cmp	r3, #32
 8009228:	d000      	beq.n	800922c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800922a:	e01e      	b.n	800926a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6858      	ldr	r0, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6899      	ldr	r1, [r3, #8]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	899b      	ldrh	r3, [r3, #12]
 800923a:	461a      	mov	r2, r3
 800923c:	f008 fec2 	bl	8011fc4 <udp_bind>
 8009240:	4603      	mov	r3, r0
 8009242:	461a      	mov	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	711a      	strb	r2, [r3, #4]
        break;
 8009248:	e00f      	b.n	800926a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6858      	ldr	r0, [r3, #4]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6899      	ldr	r1, [r3, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	899b      	ldrh	r3, [r3, #12]
 8009258:	461a      	mov	r2, r3
 800925a:	f003 fb81 	bl	800c960 <tcp_bind>
 800925e:	4603      	mov	r3, r0
 8009260:	461a      	mov	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	711a      	strb	r2, [r3, #4]
        break;
 8009266:	e000      	b.n	800926a <lwip_netconn_do_bind+0x8a>
      }
    }
 8009268:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d012      	beq.n	8009298 <lwip_netconn_do_bind+0xb8>
 8009272:	f00d fabf 	bl	80167f4 <sys_arch_protect>
 8009276:	60b8      	str	r0, [r7, #8]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009280:	f113 0f0c 	cmn.w	r3, #12
 8009284:	db05      	blt.n	8009292 <lwip_netconn_do_bind+0xb2>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009290:	721a      	strb	r2, [r3, #8]
 8009292:	68b8      	ldr	r0, [r7, #8]
 8009294:	f00d fabc 	bl	8016810 <sys_arch_unprotect>
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092b4:	f113 0f0c 	cmn.w	r3, #12
 80092b8:	da06      	bge.n	80092c8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	711a      	strb	r2, [r3, #4]
 80092c6:	e090      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	22f5      	movs	r2, #245	; 0xf5
 80092cc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8088 	beq.w	80093ea <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e4:	2b10      	cmp	r3, #16
 80092e6:	d17d      	bne.n	80093e4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	785b      	ldrb	r3, [r3, #1]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d16f      	bne.n	80093d2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	7d1b      	ldrb	r3, [r3, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	22fa      	movs	r2, #250	; 0xfa
 8009302:	711a      	strb	r2, [r3, #4]
 8009304:	e071      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009306:	23ff      	movs	r3, #255	; 0xff
 8009308:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f107 020f 	add.w	r2, r7, #15
 8009314:	7ef9      	ldrb	r1, [r7, #27]
 8009316:	4618      	mov	r0, r3
 8009318:	f003 fbd6 	bl	800cac8 <tcp_listen_with_backlog_and_err>
 800931c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8009324:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	711a      	strb	r2, [r3, #4]
 800932c:	e05d      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3310      	adds	r3, #16
 8009334:	4618      	mov	r0, r3
 8009336:	f00d f941 	bl	80165bc <sys_mbox_valid>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3310      	adds	r3, #16
 8009346:	4618      	mov	r0, r3
 8009348:	f00d f89c 	bl	8016484 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3310      	adds	r3, #16
 8009352:	4618      	mov	r0, r3
 8009354:	f00d f943 	bl	80165de <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	2200      	movs	r2, #0
 800935c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	4618      	mov	r0, r3
 8009366:	f00d f929 	bl	80165bc <sys_mbox_valid>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	2106      	movs	r1, #6
 8009378:	4618      	mov	r0, r3
 800937a:	f00d f861 	bl	8016440 <sys_mbox_new>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d118      	bne.n	80093c2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2202      	movs	r2, #2
 8009396:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f004 fa61 	bl	800d874 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	4919      	ldr	r1, [pc, #100]	; (8009420 <lwip_netconn_do_listen+0x180>)
 80093ba:	4618      	mov	r0, r3
 80093bc:	f004 fad0 	bl	800d960 <tcp_accept>
 80093c0:	e013      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f003 f9ae 	bl	800c724 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2200      	movs	r2, #0
 80093ce:	605a      	str	r2, [r3, #4]
 80093d0:	e00b      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d106      	bne.n	80093ea <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2200      	movs	r2, #0
 80093e0:	711a      	strb	r2, [r3, #4]
 80093e2:	e002      	b.n	80093ea <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	22f0      	movs	r2, #240	; 0xf0
 80093e8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d012      	beq.n	8009418 <lwip_netconn_do_listen+0x178>
 80093f2:	f00d f9ff 	bl	80167f4 <sys_arch_protect>
 80093f6:	6138      	str	r0, [r7, #16]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009400:	f113 0f0c 	cmn.w	r3, #12
 8009404:	db05      	blt.n	8009412 <lwip_netconn_do_listen+0x172>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009410:	721a      	strb	r2, [r3, #8]
 8009412:	6938      	ldr	r0, [r7, #16]
 8009414:	f00d f9fc 	bl	8016810 <sys_arch_unprotect>
}
 8009418:	bf00      	nop
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08008805 	.word	0x08008805

08009424 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	2200      	movs	r2, #0
 8009434:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d022      	beq.n	8009486 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800944a:	2b10      	cmp	r3, #16
 800944c:	d11b      	bne.n	8009486 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800945a:	d202      	bcs.n	8009462 <lwip_netconn_do_recv+0x3e>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	b29b      	uxth	r3, r3
 8009460:	e001      	b.n	8009466 <lwip_netconn_do_recv+0x42>
 8009462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009466:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	89fa      	ldrh	r2, [r7, #14]
 8009470:	4611      	mov	r1, r2
 8009472:	4618      	mov	r0, r3
 8009474:	f003 fc0e 	bl	800cc94 <tcp_recved>
        remaining -= recved;
 8009478:	89fb      	ldrh	r3, [r7, #14]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e6      	bne.n	8009454 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d012      	beq.n	80094b4 <lwip_netconn_do_recv+0x90>
 800948e:	f00d f9b1 	bl	80167f4 <sys_arch_protect>
 8009492:	60b8      	str	r0, [r7, #8]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800949c:	f113 0f0c 	cmn.w	r3, #12
 80094a0:	db05      	blt.n	80094ae <lwip_netconn_do_recv+0x8a>
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80094ac:	721a      	strb	r2, [r3, #8]
 80094ae:	68b8      	ldr	r0, [r7, #8]
 80094b0:	f00d f9ae 	bl	8016810 <sys_arch_unprotect>
}
 80094b4:	bf00      	nop
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08a      	sub	sp, #40	; 0x28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <lwip_netconn_do_writemore+0x26>
 80094d4:	4ba3      	ldr	r3, [pc, #652]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 80094d6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80094da:	49a3      	ldr	r1, [pc, #652]	; (8009768 <lwip_netconn_do_writemore+0x2ac>)
 80094dc:	48a3      	ldr	r0, [pc, #652]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 80094de:	f00d f9ed 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d006      	beq.n	80094f8 <lwip_netconn_do_writemore+0x3c>
 80094ea:	4b9e      	ldr	r3, [pc, #632]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 80094ec:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80094f0:	499f      	ldr	r1, [pc, #636]	; (8009770 <lwip_netconn_do_writemore+0x2b4>)
 80094f2:	489e      	ldr	r0, [pc, #632]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 80094f4:	f00d f9e2 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <lwip_netconn_do_writemore+0x52>
 8009500:	4b98      	ldr	r3, [pc, #608]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 8009502:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8009506:	499b      	ldr	r1, [pc, #620]	; (8009774 <lwip_netconn_do_writemore+0x2b8>)
 8009508:	4898      	ldr	r0, [pc, #608]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 800950a:	f00d f9d7 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <lwip_netconn_do_writemore+0x68>
 8009516:	4b93      	ldr	r3, [pc, #588]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 8009518:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800951c:	4996      	ldr	r1, [pc, #600]	; (8009778 <lwip_netconn_do_writemore+0x2bc>)
 800951e:	4893      	ldr	r0, [pc, #588]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 8009520:	f00d f9cc 	bl	80168bc <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	429a      	cmp	r2, r3
 8009530:	d306      	bcc.n	8009540 <lwip_netconn_do_writemore+0x84>
 8009532:	4b8c      	ldr	r3, [pc, #560]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 8009534:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8009538:	4990      	ldr	r1, [pc, #576]	; (800977c <lwip_netconn_do_writemore+0x2c0>)
 800953a:	488c      	ldr	r0, [pc, #560]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 800953c:	f00d f9be 	bl	80168bc <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	7c1b      	ldrb	r3, [r3, #16]
 8009546:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7f1b      	ldrb	r3, [r3, #28]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d105      	bne.n	8009562 <lwip_netconn_do_writemore+0xa6>
 8009556:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800955a:	f003 0304 	and.w	r3, r3, #4
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <lwip_netconn_do_writemore+0xaa>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <lwip_netconn_do_writemore+0xac>
 8009566:	2300      	movs	r3, #0
 8009568:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	4413      	add	r3, r2
 8009578:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800958e:	d309      	bcc.n	80095a4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8009590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009594:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8009596:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800959a:	f043 0302 	orr.w	r3, r3, #2
 800959e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80095a2:	e001      	b.n	80095a8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095b0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80095b2:	8afa      	ldrh	r2, [r7, #22]
 80095b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d212      	bcs.n	80095e0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 80095ba:	8afb      	ldrh	r3, [r7, #22]
 80095bc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80095be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 80095c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 80095cc:	23f9      	movs	r3, #249	; 0xf9
 80095ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 80095d2:	e02a      	b.n	800962a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80095d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80095d8:	f043 0302 	orr.w	r3, r3, #2
 80095dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1a      	ldr	r2, [r3, #32]
 80095e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e6:	441a      	add	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d906      	bls.n	8009600 <lwip_netconn_do_writemore+0x144>
 80095f2:	4b5c      	ldr	r3, [pc, #368]	; (8009764 <lwip_netconn_do_writemore+0x2a8>)
 80095f4:	f240 6213 	movw	r2, #1555	; 0x613
 80095f8:	4961      	ldr	r1, [pc, #388]	; (8009780 <lwip_netconn_do_writemore+0x2c4>)
 80095fa:	485c      	ldr	r0, [pc, #368]	; (800976c <lwip_netconn_do_writemore+0x2b0>)
 80095fc:	f00d f95e 	bl	80168bc <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6858      	ldr	r0, [r3, #4]
 8009604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800960a:	69f9      	ldr	r1, [r7, #28]
 800960c:	f006 ff74 	bl	80104f8 <tcp_write>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <lwip_netconn_do_writemore+0x16c>
 800961e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009626:	d133      	bne.n	8009690 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 8009628:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800962a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800962e:	2b00      	cmp	r3, #0
 8009630:	d017      	beq.n	8009662 <lwip_netconn_do_writemore+0x1a6>
 8009632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	429a      	cmp	r2, r3
 800963c:	d211      	bcs.n	8009662 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <lwip_netconn_do_writemore+0x196>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800964c:	2103      	movs	r1, #3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7f1b      	ldrb	r3, [r3, #28]
 8009656:	f043 0310 	orr.w	r3, r3, #16
 800965a:	b2da      	uxtb	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	771a      	strb	r2, [r3, #28]
 8009660:	e016      	b.n	8009690 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800966a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800966e:	d305      	bcc.n	800967c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009678:	2b04      	cmp	r3, #4
 800967a:	d909      	bls.n	8009690 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <lwip_netconn_do_writemore+0x1d4>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800968a:	2103      	movs	r1, #3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009690:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009694:	2b00      	cmp	r3, #0
 8009696:	d134      	bne.n	8009702 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1a      	ldr	r2, [r3, #32]
 800969c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800969e:	441a      	add	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a1a      	ldr	r2, [r3, #32]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d003      	beq.n	80096ba <lwip_netconn_do_writemore+0x1fe>
 80096b2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d007      	beq.n	80096ca <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6a12      	ldr	r2, [r2, #32]
 80096c2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f007 fbc4 	bl	8010e5c <tcp_output>
 80096d4:	4603      	mov	r3, r0
 80096d6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80096d8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80096dc:	f113 0f0c 	cmn.w	r3, #12
 80096e0:	db04      	blt.n	80096ec <lwip_netconn_do_writemore+0x230>
 80096e2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80096e6:	f113 0f04 	cmn.w	r3, #4
 80096ea:	d152      	bne.n	8009792 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80096ec:	7d3b      	ldrb	r3, [r7, #20]
 80096ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80096f2:	2301      	movs	r3, #1
 80096f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2200      	movs	r2, #0
 80096fe:	60da      	str	r2, [r3, #12]
 8009700:	e047      	b.n	8009792 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8009702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800970a:	d13b      	bne.n	8009784 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4618      	mov	r0, r3
 8009712:	f007 fba3 	bl	8010e5c <tcp_output>
 8009716:	4603      	mov	r3, r0
 8009718:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800971a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800971e:	f113 0f0c 	cmn.w	r3, #12
 8009722:	db04      	blt.n	800972e <lwip_netconn_do_writemore+0x272>
 8009724:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009728:	f113 0f04 	cmn.w	r3, #4
 800972c:	d10a      	bne.n	8009744 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800972e:	7d7b      	ldrb	r3, [r7, #21]
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2200      	movs	r2, #0
 8009740:	60da      	str	r2, [r3, #12]
 8009742:	e026      	b.n	8009792 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8009744:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009748:	2b00      	cmp	r3, #0
 800974a:	d022      	beq.n	8009792 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800974c:	23f9      	movs	r3, #249	; 0xf9
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	2200      	movs	r2, #0
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e017      	b.n	8009792 <lwip_netconn_do_writemore+0x2d6>
 8009762:	bf00      	nop
 8009764:	08017fd8 	.word	0x08017fd8
 8009768:	080180fc 	.word	0x080180fc
 800976c:	08018030 	.word	0x08018030
 8009770:	080183dc 	.word	0x080183dc
 8009774:	0801810c 	.word	0x0801810c
 8009778:	080183fc 	.word	0x080183fc
 800977c:	08018414 	.word	0x08018414
 8009780:	08018448 	.word	0x08018448
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009784:	2301      	movs	r3, #1
 8009786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	2200      	movs	r2, #0
 8009790:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8009792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009796:	2b00      	cmp	r3, #0
 8009798:	d02c      	beq.n	80097f4 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097ac:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00f      	beq.n	80097e6 <lwip_netconn_do_writemore+0x32a>
 80097c6:	f00d f815 	bl	80167f4 <sys_arch_protect>
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80097d2:	f113 0f0c 	cmn.w	r3, #12
 80097d6:	db03      	blt.n	80097e0 <lwip_netconn_do_writemore+0x324>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097de:	721a      	strb	r2, [r3, #8]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f00d f815 	bl	8016810 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80097ec:	6938      	ldr	r0, [r7, #16]
 80097ee:	f00c ff5c 	bl	80166aa <sys_sem_signal>
 80097f2:	e002      	b.n	80097fa <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80097f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097f8:	e000      	b.n	80097fc <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3728      	adds	r7, #40	; 0x28
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009818:	f113 0f0c 	cmn.w	r3, #12
 800981c:	da06      	bge.n	800982c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	711a      	strb	r2, [r3, #4]
 800982a:	e072      	b.n	8009912 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009836:	2b10      	cmp	r3, #16
 8009838:	d168      	bne.n	800990c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	22fb      	movs	r2, #251	; 0xfb
 8009848:	711a      	strb	r2, [r3, #4]
 800984a:	e062      	b.n	8009912 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d056      	beq.n	8009904 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2201      	movs	r2, #1
 800985c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <lwip_netconn_do_write+0x6e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d006      	beq.n	8009880 <lwip_netconn_do_write+0x7c>
 8009872:	4b36      	ldr	r3, [pc, #216]	; (800994c <lwip_netconn_do_write+0x148>)
 8009874:	f240 6283 	movw	r2, #1667	; 0x683
 8009878:	4935      	ldr	r1, [pc, #212]	; (8009950 <lwip_netconn_do_write+0x14c>)
 800987a:	4836      	ldr	r0, [pc, #216]	; (8009954 <lwip_netconn_do_write+0x150>)
 800987c:	f00d f81e 	bl	80168bc <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <lwip_netconn_do_write+0x92>
 8009888:	4b30      	ldr	r3, [pc, #192]	; (800994c <lwip_netconn_do_write+0x148>)
 800988a:	f240 6284 	movw	r2, #1668	; 0x684
 800988e:	4932      	ldr	r1, [pc, #200]	; (8009958 <lwip_netconn_do_write+0x154>)
 8009890:	4830      	ldr	r0, [pc, #192]	; (8009954 <lwip_netconn_do_write+0x150>)
 8009892:	f00d f813 	bl	80168bc <iprintf>
        msg->conn->current_msg = msg;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2200      	movs	r2, #0
 80098a4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fe05 	bl	80094bc <lwip_netconn_do_writemore>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d044      	beq.n	8009942 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	785b      	ldrb	r3, [r3, #1]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d006      	beq.n	80098d0 <lwip_netconn_do_write+0xcc>
 80098c2:	4b22      	ldr	r3, [pc, #136]	; (800994c <lwip_netconn_do_write+0x148>)
 80098c4:	f240 6289 	movw	r2, #1673	; 0x689
 80098c8:	4924      	ldr	r1, [pc, #144]	; (800995c <lwip_netconn_do_write+0x158>)
 80098ca:	4822      	ldr	r0, [pc, #136]	; (8009954 <lwip_netconn_do_write+0x150>)
 80098cc:	f00c fff6 	bl	80168bc <iprintf>
          UNLOCK_TCPIP_CORE();
 80098d0:	4823      	ldr	r0, [pc, #140]	; (8009960 <lwip_netconn_do_write+0x15c>)
 80098d2:	f00c ff5c 	bl	801678e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f00c feb2 	bl	8016648 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80098e4:	481e      	ldr	r0, [pc, #120]	; (8009960 <lwip_netconn_do_write+0x15c>)
 80098e6:	f00c ff43 	bl	8016770 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	785b      	ldrb	r3, [r3, #1]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d126      	bne.n	8009942 <lwip_netconn_do_write+0x13e>
 80098f4:	4b15      	ldr	r3, [pc, #84]	; (800994c <lwip_netconn_do_write+0x148>)
 80098f6:	f240 628d 	movw	r2, #1677	; 0x68d
 80098fa:	4918      	ldr	r1, [pc, #96]	; (800995c <lwip_netconn_do_write+0x158>)
 80098fc:	4815      	ldr	r0, [pc, #84]	; (8009954 <lwip_netconn_do_write+0x150>)
 80098fe:	f00c ffdd 	bl	80168bc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009902:	e01e      	b.n	8009942 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	22f5      	movs	r2, #245	; 0xf5
 8009908:	711a      	strb	r2, [r3, #4]
 800990a:	e002      	b.n	8009912 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	22fa      	movs	r2, #250	; 0xfa
 8009910:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d014      	beq.n	8009944 <lwip_netconn_do_write+0x140>
 800991a:	f00c ff6b 	bl	80167f4 <sys_arch_protect>
 800991e:	60b8      	str	r0, [r7, #8]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009928:	f113 0f0c 	cmn.w	r3, #12
 800992c:	db05      	blt.n	800993a <lwip_netconn_do_write+0x136>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009938:	721a      	strb	r2, [r3, #8]
 800993a:	68b8      	ldr	r0, [r7, #8]
 800993c:	f00c ff68 	bl	8016810 <sys_arch_unprotect>
 8009940:	e000      	b.n	8009944 <lwip_netconn_do_write+0x140>
        return;
 8009942:	bf00      	nop
}
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	08017fd8 	.word	0x08017fd8
 8009950:	08018320 	.word	0x08018320
 8009954:	08018030 	.word	0x08018030
 8009958:	08018474 	.word	0x08018474
 800995c:	0801833c 	.word	0x0801833c
 8009960:	2000c38c 	.word	0x2000c38c

08009964 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d06e      	beq.n	8009a60 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800998c:	2b10      	cmp	r3, #16
 800998e:	d167      	bne.n	8009a60 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009994:	2b03      	cmp	r3, #3
 8009996:	d002      	beq.n	800999e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009998:	7cfb      	ldrb	r3, [r7, #19]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d060      	beq.n	8009a60 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800999e:	7cfb      	ldrb	r3, [r7, #19]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d103      	bne.n	80099ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	22f5      	movs	r2, #245	; 0xf5
 80099a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80099aa:	e05c      	b.n	8009a66 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 80099ac:	7cfb      	ldrb	r3, [r7, #19]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d103      	bne.n	80099ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	22fb      	movs	r2, #251	; 0xfb
 80099b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80099b8:	e055      	b.n	8009a66 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	7a1b      	ldrb	r3, [r3, #8]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d004      	beq.n	80099d0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff f90e 	bl	8008bec <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <lwip_netconn_do_close+0x80>
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6a1b      	ldr	r3, [r3, #32]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <lwip_netconn_do_close+0x8e>
 80099e4:	4b2e      	ldr	r3, [pc, #184]	; (8009aa0 <lwip_netconn_do_close+0x13c>)
 80099e6:	f240 721c 	movw	r2, #1820	; 0x71c
 80099ea:	492e      	ldr	r1, [pc, #184]	; (8009aa4 <lwip_netconn_do_close+0x140>)
 80099ec:	482e      	ldr	r0, [pc, #184]	; (8009aa8 <lwip_netconn_do_close+0x144>)
 80099ee:	f00c ff65 	bl	80168bc <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2204      	movs	r2, #4
 80099f8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2100      	movs	r1, #0
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff f96f 	bl	8008cec <lwip_netconn_do_close_internal>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d040      	beq.n	8009a96 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d006      	beq.n	8009a2c <lwip_netconn_do_close+0xc8>
 8009a1e:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <lwip_netconn_do_close+0x13c>)
 8009a20:	f240 7221 	movw	r2, #1825	; 0x721
 8009a24:	4921      	ldr	r1, [pc, #132]	; (8009aac <lwip_netconn_do_close+0x148>)
 8009a26:	4820      	ldr	r0, [pc, #128]	; (8009aa8 <lwip_netconn_do_close+0x144>)
 8009a28:	f00c ff48 	bl	80168bc <iprintf>
        UNLOCK_TCPIP_CORE();
 8009a2c:	4820      	ldr	r0, [pc, #128]	; (8009ab0 <lwip_netconn_do_close+0x14c>)
 8009a2e:	f00c feae 	bl	801678e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f00c fe04 	bl	8016648 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009a40:	481b      	ldr	r0, [pc, #108]	; (8009ab0 <lwip_netconn_do_close+0x14c>)
 8009a42:	f00c fe95 	bl	8016770 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d022      	beq.n	8009a96 <lwip_netconn_do_close+0x132>
 8009a50:	4b13      	ldr	r3, [pc, #76]	; (8009aa0 <lwip_netconn_do_close+0x13c>)
 8009a52:	f240 7225 	movw	r2, #1829	; 0x725
 8009a56:	4915      	ldr	r1, [pc, #84]	; (8009aac <lwip_netconn_do_close+0x148>)
 8009a58:	4813      	ldr	r0, [pc, #76]	; (8009aa8 <lwip_netconn_do_close+0x144>)
 8009a5a:	f00c ff2f 	bl	80168bc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009a5e:	e01a      	b.n	8009a96 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	22f5      	movs	r2, #245	; 0xf5
 8009a64:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d014      	beq.n	8009a98 <lwip_netconn_do_close+0x134>
 8009a6e:	f00c fec1 	bl	80167f4 <sys_arch_protect>
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009a7c:	f113 0f0c 	cmn.w	r3, #12
 8009a80:	db05      	blt.n	8009a8e <lwip_netconn_do_close+0x12a>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009a8c:	721a      	strb	r2, [r3, #8]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f00c febe 	bl	8016810 <sys_arch_unprotect>
 8009a94:	e000      	b.n	8009a98 <lwip_netconn_do_close+0x134>
      return;
 8009a96:	bf00      	nop
}
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	08017fd8 	.word	0x08017fd8
 8009aa4:	08018320 	.word	0x08018320
 8009aa8:	08018030 	.word	0x08018030
 8009aac:	0801833c 	.word	0x0801833c
 8009ab0:	2000c38c 	.word	0x2000c38c

08009ab4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d013      	beq.n	8009aea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f002 f9e4 	bl	800be9c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	2006      	movs	r0, #6
 8009ae6:	f001 fc77 	bl	800b3d8 <memp_free>
  }
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <netbuf_data+0x24>
 8009b06:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <netbuf_data+0x80>)
 8009b08:	22c2      	movs	r2, #194	; 0xc2
 8009b0a:	491b      	ldr	r1, [pc, #108]	; (8009b78 <netbuf_data+0x84>)
 8009b0c:	481b      	ldr	r0, [pc, #108]	; (8009b7c <netbuf_data+0x88>)
 8009b0e:	f00c fed5 	bl	80168bc <iprintf>
 8009b12:	f06f 030f 	mvn.w	r3, #15
 8009b16:	e029      	b.n	8009b6c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <netbuf_data+0x3c>
 8009b1e:	4b15      	ldr	r3, [pc, #84]	; (8009b74 <netbuf_data+0x80>)
 8009b20:	22c3      	movs	r2, #195	; 0xc3
 8009b22:	4917      	ldr	r1, [pc, #92]	; (8009b80 <netbuf_data+0x8c>)
 8009b24:	4815      	ldr	r0, [pc, #84]	; (8009b7c <netbuf_data+0x88>)
 8009b26:	f00c fec9 	bl	80168bc <iprintf>
 8009b2a:	f06f 030f 	mvn.w	r3, #15
 8009b2e:	e01d      	b.n	8009b6c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d108      	bne.n	8009b48 <netbuf_data+0x54>
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <netbuf_data+0x80>)
 8009b38:	22c4      	movs	r2, #196	; 0xc4
 8009b3a:	4912      	ldr	r1, [pc, #72]	; (8009b84 <netbuf_data+0x90>)
 8009b3c:	480f      	ldr	r0, [pc, #60]	; (8009b7c <netbuf_data+0x88>)
 8009b3e:	f00c febd 	bl	80168bc <iprintf>
 8009b42:	f06f 030f 	mvn.w	r3, #15
 8009b46:	e011      	b.n	8009b6c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <netbuf_data+0x62>
    return ERR_BUF;
 8009b50:	f06f 0301 	mvn.w	r3, #1
 8009b54:	e00a      	b.n	8009b6c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	895a      	ldrh	r2, [r3, #10]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	080184a0 	.word	0x080184a0
 8009b78:	080185a8 	.word	0x080185a8
 8009b7c:	080184f0 	.word	0x080184f0
 8009b80:	080185c4 	.word	0x080185c4
 8009b84:	080185e4 	.word	0x080185e4

08009b88 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d108      	bne.n	8009ba8 <netbuf_next+0x20>
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <netbuf_next+0x54>)
 8009b98:	22dc      	movs	r2, #220	; 0xdc
 8009b9a:	4911      	ldr	r1, [pc, #68]	; (8009be0 <netbuf_next+0x58>)
 8009b9c:	4811      	ldr	r0, [pc, #68]	; (8009be4 <netbuf_next+0x5c>)
 8009b9e:	f00c fe8d 	bl	80168bc <iprintf>
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ba6:	e014      	b.n	8009bd2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <netbuf_next+0x30>
    return -1;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb6:	e00c      	b.n	8009bd2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <netbuf_next+0x48>
    return 1;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e000      	b.n	8009bd2 <netbuf_next+0x4a>
  }
  return 0;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	080184a0 	.word	0x080184a0
 8009be0:	08018600 	.word	0x08018600
 8009be4:	080184f0 	.word	0x080184f0

08009be8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009bf0:	4b29      	ldr	r3, [pc, #164]	; (8009c98 <tcpip_thread+0xb0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009bf8:	4b27      	ldr	r3, [pc, #156]	; (8009c98 <tcpip_thread+0xb0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a27      	ldr	r2, [pc, #156]	; (8009c9c <tcpip_thread+0xb4>)
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009c04:	4826      	ldr	r0, [pc, #152]	; (8009ca0 <tcpip_thread+0xb8>)
 8009c06:	f00c fdb3 	bl	8016770 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009c0a:	4825      	ldr	r0, [pc, #148]	; (8009ca0 <tcpip_thread+0xb8>)
 8009c0c:	f00c fdbf 	bl	801678e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	4619      	mov	r1, r3
 8009c16:	4823      	ldr	r0, [pc, #140]	; (8009ca4 <tcpip_thread+0xbc>)
 8009c18:	f007 ff74 	bl	8011b04 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009c1c:	4820      	ldr	r0, [pc, #128]	; (8009ca0 <tcpip_thread+0xb8>)
 8009c1e:	f00c fda7 	bl	8016770 <sys_mutex_lock>
    if (msg == NULL) {
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c28:	4b1f      	ldr	r3, [pc, #124]	; (8009ca8 <tcpip_thread+0xc0>)
 8009c2a:	2269      	movs	r2, #105	; 0x69
 8009c2c:	491f      	ldr	r1, [pc, #124]	; (8009cac <tcpip_thread+0xc4>)
 8009c2e:	4820      	ldr	r0, [pc, #128]	; (8009cb0 <tcpip_thread+0xc8>)
 8009c30:	f00c fe44 	bl	80168bc <iprintf>
      continue;
 8009c34:	e02f      	b.n	8009c96 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d011      	beq.n	8009c62 <tcpip_thread+0x7a>
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d01b      	beq.n	8009c7a <tcpip_thread+0x92>
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d120      	bne.n	8009c88 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	6850      	ldr	r0, [r2, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	6892      	ldr	r2, [r2, #8]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	2009      	movs	r0, #9
 8009c5c:	f001 fbbc 	bl	800b3d8 <memp_free>
      break;
 8009c60:	e019      	b.n	8009c96 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	6892      	ldr	r2, [r2, #8]
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4619      	mov	r1, r3
 8009c72:	2008      	movs	r0, #8
 8009c74:	f001 fbb0 	bl	800b3d8 <memp_free>
      break;
 8009c78:	e00d      	b.n	8009c96 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	6892      	ldr	r2, [r2, #8]
 8009c82:	4610      	mov	r0, r2
 8009c84:	4798      	blx	r3
      break;
 8009c86:	e006      	b.n	8009c96 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c88:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <tcpip_thread+0xc0>)
 8009c8a:	229b      	movs	r2, #155	; 0x9b
 8009c8c:	4907      	ldr	r1, [pc, #28]	; (8009cac <tcpip_thread+0xc4>)
 8009c8e:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <tcpip_thread+0xc8>)
 8009c90:	f00c fe14 	bl	80168bc <iprintf>
      break;
 8009c94:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009c96:	e7b8      	b.n	8009c0a <tcpip_thread+0x22>
 8009c98:	200087ac 	.word	0x200087ac
 8009c9c:	200087b0 	.word	0x200087b0
 8009ca0:	2000c38c 	.word	0x2000c38c
 8009ca4:	200087b4 	.word	0x200087b4
 8009ca8:	08018638 	.word	0x08018638
 8009cac:	08018668 	.word	0x08018668
 8009cb0:	08018688 	.word	0x08018688

08009cb4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009cc0:	481a      	ldr	r0, [pc, #104]	; (8009d2c <tcpip_inpkt+0x78>)
 8009cc2:	f00c fc7b 	bl	80165bc <sys_mbox_valid>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d105      	bne.n	8009cd8 <tcpip_inpkt+0x24>
 8009ccc:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <tcpip_inpkt+0x7c>)
 8009cce:	22b5      	movs	r2, #181	; 0xb5
 8009cd0:	4918      	ldr	r1, [pc, #96]	; (8009d34 <tcpip_inpkt+0x80>)
 8009cd2:	4819      	ldr	r0, [pc, #100]	; (8009d38 <tcpip_inpkt+0x84>)
 8009cd4:	f00c fdf2 	bl	80168bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009cd8:	2009      	movs	r0, #9
 8009cda:	f001 fb2b 	bl	800b334 <memp_malloc>
 8009cde:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d102      	bne.n	8009cec <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cea:	e01a      	b.n	8009d22 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	4809      	ldr	r0, [pc, #36]	; (8009d2c <tcpip_inpkt+0x78>)
 8009d08:	f00c fbe3 	bl	80164d2 <sys_mbox_trypost>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d12:	6979      	ldr	r1, [r7, #20]
 8009d14:	2009      	movs	r0, #9
 8009d16:	f001 fb5f 	bl	800b3d8 <memp_free>
    return ERR_MEM;
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1e:	e000      	b.n	8009d22 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d20:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200087b4 	.word	0x200087b4
 8009d30:	08018638 	.word	0x08018638
 8009d34:	080186b0 	.word	0x080186b0
 8009d38:	08018688 	.word	0x08018688

08009d3c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009d4c:	f003 0318 	and.w	r3, r3, #24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d006      	beq.n	8009d62 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <tcpip_input+0x3c>)
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ffab 	bl	8009cb4 <tcpip_inpkt>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	e005      	b.n	8009d6e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009d62:	4a06      	ldr	r2, [pc, #24]	; (8009d7c <tcpip_input+0x40>)
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff ffa4 	bl	8009cb4 <tcpip_inpkt>
 8009d6c:	4603      	mov	r3, r0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08016289 	.word	0x08016289
 8009d7c:	08015211 	.word	0x08015211

08009d80 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009d8e:	481d      	ldr	r0, [pc, #116]	; (8009e04 <tcpip_callback_with_block+0x84>)
 8009d90:	f00c fc14 	bl	80165bc <sys_mbox_valid>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d105      	bne.n	8009da6 <tcpip_callback_with_block+0x26>
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <tcpip_callback_with_block+0x88>)
 8009d9c:	22ee      	movs	r2, #238	; 0xee
 8009d9e:	491b      	ldr	r1, [pc, #108]	; (8009e0c <tcpip_callback_with_block+0x8c>)
 8009da0:	481b      	ldr	r0, [pc, #108]	; (8009e10 <tcpip_callback_with_block+0x90>)
 8009da2:	f00c fd8b 	bl	80168bc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009da6:	2008      	movs	r0, #8
 8009da8:	f001 fac4 	bl	800b334 <memp_malloc>
 8009dac:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d102      	bne.n	8009dba <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8009db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db8:	e01f      	b.n	8009dfa <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	609a      	str	r2, [r3, #8]
  if (block) {
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8009dd2:	6979      	ldr	r1, [r7, #20]
 8009dd4:	480b      	ldr	r0, [pc, #44]	; (8009e04 <tcpip_callback_with_block+0x84>)
 8009dd6:	f00c fb67 	bl	80164a8 <sys_mbox_post>
 8009dda:	e00d      	b.n	8009df8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009ddc:	6979      	ldr	r1, [r7, #20]
 8009dde:	4809      	ldr	r0, [pc, #36]	; (8009e04 <tcpip_callback_with_block+0x84>)
 8009de0:	f00c fb77 	bl	80164d2 <sys_mbox_trypost>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d006      	beq.n	8009df8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009dea:	6979      	ldr	r1, [r7, #20]
 8009dec:	2008      	movs	r0, #8
 8009dee:	f001 faf3 	bl	800b3d8 <memp_free>
      return ERR_MEM;
 8009df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009df6:	e000      	b.n	8009dfa <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	200087b4 	.word	0x200087b4
 8009e08:	08018638 	.word	0x08018638
 8009e0c:	080186b0 	.word	0x080186b0
 8009e10:	08018688 	.word	0x08018688

08009e14 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009e20:	4806      	ldr	r0, [pc, #24]	; (8009e3c <tcpip_send_msg_wait_sem+0x28>)
 8009e22:	f00c fca5 	bl	8016770 <sys_mutex_lock>
  fn(apimsg);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68b8      	ldr	r0, [r7, #8]
 8009e2a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009e2c:	4803      	ldr	r0, [pc, #12]	; (8009e3c <tcpip_send_msg_wait_sem+0x28>)
 8009e2e:	f00c fcae 	bl	801678e <sys_mutex_unlock>
  return ERR_OK;
 8009e32:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000c38c 	.word	0x2000c38c

08009e40 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e4a:	f000 feac 	bl	800aba6 <lwip_init>

  tcpip_init_done = initfunc;
 8009e4e:	4a17      	ldr	r2, [pc, #92]	; (8009eac <tcpip_init+0x6c>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e54:	4a16      	ldr	r2, [pc, #88]	; (8009eb0 <tcpip_init+0x70>)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e5a:	2106      	movs	r1, #6
 8009e5c:	4815      	ldr	r0, [pc, #84]	; (8009eb4 <tcpip_init+0x74>)
 8009e5e:	f00c faef 	bl	8016440 <sys_mbox_new>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d006      	beq.n	8009e76 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009e68:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <tcpip_init+0x78>)
 8009e6a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8009e6e:	4913      	ldr	r1, [pc, #76]	; (8009ebc <tcpip_init+0x7c>)
 8009e70:	4813      	ldr	r0, [pc, #76]	; (8009ec0 <tcpip_init+0x80>)
 8009e72:	f00c fd23 	bl	80168bc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009e76:	4813      	ldr	r0, [pc, #76]	; (8009ec4 <tcpip_init+0x84>)
 8009e78:	f00c fc5e 	bl	8016738 <sys_mutex_new>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d006      	beq.n	8009e90 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009e82:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <tcpip_init+0x78>)
 8009e84:	f240 12d9 	movw	r2, #473	; 0x1d9
 8009e88:	490f      	ldr	r1, [pc, #60]	; (8009ec8 <tcpip_init+0x88>)
 8009e8a:	480d      	ldr	r0, [pc, #52]	; (8009ec0 <tcpip_init+0x80>)
 8009e8c:	f00c fd16 	bl	80168bc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009e90:	2300      	movs	r3, #0
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e98:	2200      	movs	r2, #0
 8009e9a:	490c      	ldr	r1, [pc, #48]	; (8009ecc <tcpip_init+0x8c>)
 8009e9c:	480c      	ldr	r0, [pc, #48]	; (8009ed0 <tcpip_init+0x90>)
 8009e9e:	f00c fc83 	bl	80167a8 <sys_thread_new>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	200087ac 	.word	0x200087ac
 8009eb0:	200087b0 	.word	0x200087b0
 8009eb4:	200087b4 	.word	0x200087b4
 8009eb8:	08018638 	.word	0x08018638
 8009ebc:	080186c0 	.word	0x080186c0
 8009ec0:	08018688 	.word	0x08018688
 8009ec4:	2000c38c 	.word	0x2000c38c
 8009ec8:	080186e4 	.word	0x080186e4
 8009ecc:	08009be9 	.word	0x08009be9
 8009ed0:	08018708 	.word	0x08018708

08009ed4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <fs_open+0x16>
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <fs_open+0x1c>
     return ERR_ARG;
 8009eea:	f06f 030f 	mvn.w	r3, #15
 8009eee:	e028      	b.n	8009f42 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009ef0:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <fs_open+0x78>)
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	e020      	b.n	8009f38 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4619      	mov	r1, r3
 8009efc:	6838      	ldr	r0, [r7, #0]
 8009efe:	f7f6 f977 	bl	80001f0 <strcmp>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d114      	bne.n	8009f32 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68da      	ldr	r2, [r3, #12]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	7c1a      	ldrb	r2, [r3, #16]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e007      	b.n	8009f42 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1db      	bne.n	8009ef6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009f3e:	f06f 0305 	mvn.w	r3, #5
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	08025e54 	.word	0x08025e54

08009f50 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	1ad3      	subs	r3, r2, r3
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009f8a:	222c      	movs	r2, #44	; 0x2c
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f00c fc8c 	bl	80168ac <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009fa2:	202c      	movs	r0, #44	; 0x2c
 8009fa4:	f001 f856 	bl	800b054 <mem_malloc>
 8009fa8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ffe6 	bl	8009f82 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009fb6:	687b      	ldr	r3, [r7, #4]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d007      	beq.n	8009fe0 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff ffbb 	bl	8009f50 <fs_close>
    hs->handle = NULL;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d007      	beq.n	8009ff8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 ff55 	bl	800be9c <pbuf_free>
    hs->req = NULL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <http_state_free+0x1a>
    http_state_eof(hs);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff ffd6 	bl	8009fc0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fec5 	bl	800ada4 <mem_free>
  }
}
 800a01a:	bf00      	nop
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <http_write+0x22>
 800a038:	4b2c      	ldr	r3, [pc, #176]	; (800a0ec <http_write+0xc8>)
 800a03a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800a03e:	492c      	ldr	r1, [pc, #176]	; (800a0f0 <http_write+0xcc>)
 800a040:	482c      	ldr	r0, [pc, #176]	; (800a0f4 <http_write+0xd0>)
 800a042:	f00c fc3b 	bl	80168bc <iprintf>
  len = *length;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a04c:	8afb      	ldrh	r3, [r7, #22]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <http_write+0x32>
    return ERR_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	e045      	b.n	800a0e2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a05c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a05e:	8aba      	ldrh	r2, [r7, #20]
 800a060:	8afb      	ldrh	r3, [r7, #22]
 800a062:	429a      	cmp	r2, r3
 800a064:	d201      	bcs.n	800a06a <http_write+0x46>
    len = max_len;
 800a066:	8abb      	ldrh	r3, [r7, #20]
 800a068:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800a072:	8afa      	ldrh	r2, [r7, #22]
 800a074:	8abb      	ldrh	r3, [r7, #20]
 800a076:	429a      	cmp	r2, r3
 800a078:	d901      	bls.n	800a07e <http_write+0x5a>
    len = max_len;
 800a07a:	8abb      	ldrh	r3, [r7, #20]
 800a07c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	8afa      	ldrh	r2, [r7, #22]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f006 fa37 	bl	80104f8 <tcp_write>
 800a08a:	4603      	mov	r3, r0
 800a08c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a08e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a096:	d10f      	bne.n	800a0b8 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d902      	bls.n	800a0b2 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	82fb      	strh	r3, [r7, #22]
 800a0b0:	e002      	b.n	800a0b8 <http_write+0x94>
      } else {
        len /= 2;
 800a0b2:	8afb      	ldrh	r3, [r7, #22]
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a0b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0c0:	d102      	bne.n	800a0c8 <http_write+0xa4>
 800a0c2:	8afb      	ldrh	r3, [r7, #22]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d8da      	bhi.n	800a07e <http_write+0x5a>

  if (err == ERR_OK) {
 800a0c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d103      	bne.n	800a0d8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	8afa      	ldrh	r2, [r7, #22]
 800a0d4:	801a      	strh	r2, [r3, #0]
 800a0d6:	e002      	b.n	800a0de <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800a0de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	08018758 	.word	0x08018758
 800a0f0:	08018790 	.word	0x08018790
 800a0f4:	080187a0 	.word	0x080187a0

0800a0f8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800a106:	2100      	movs	r1, #0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f003 fbb3 	bl	800d874 <tcp_arg>
  tcp_recv(pcb, NULL);
 800a10e:	2100      	movs	r1, #0
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f003 fbc1 	bl	800d898 <tcp_recv>
  tcp_err(pcb, NULL);
 800a116:	2100      	movs	r1, #0
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f003 fbff 	bl	800d91c <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800a11e:	2200      	movs	r2, #0
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f003 fc34 	bl	800d990 <tcp_poll>
  tcp_sent(pcb, NULL);
 800a128:	2100      	movs	r1, #0
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f003 fbd6 	bl	800d8dc <tcp_sent>
  if (hs != NULL) {
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a136:	68b8      	ldr	r0, [r7, #8]
 800a138:	f7ff ff62 	bl	800a000 <http_state_free>
  }

  if (abort_conn) {
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f002 fc00 	bl	800c948 <tcp_abort>
    return ERR_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	e00f      	b.n	800a16c <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f002 fae9 	bl	800c724 <tcp_close>
 800a152:	4603      	mov	r3, r0
 800a154:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a15e:	2204      	movs	r2, #4
 800a160:	4904      	ldr	r1, [pc, #16]	; (800a174 <http_close_or_abort_conn+0x7c>)
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f003 fc14 	bl	800d990 <tcp_poll>
  }
  return err;
 800a168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	0800a84b 	.word	0x0800a84b

0800a178 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800a182:	2200      	movs	r2, #0
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ffb6 	bl	800a0f8 <http_close_or_abort_conn>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff ffe8 	bl	800a178 <http_close_conn>
  }
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d105      	bne.n	800a1ce <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff ffe6 	bl	800a196 <http_eof>
    return 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e016      	b.n	800a1fc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	695b      	ldr	r3, [r3, #20]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fec6 	bl	8009f64 <fs_bytes_left>
 800a1d8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dc05      	bgt.n	800a1ec <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff ffd7 	bl	800a196 <http_eof>
    return 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e007      	b.n	800a1fc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <http_check_eof+0x54>)
 800a1ee:	f240 4283 	movw	r2, #1155	; 0x483
 800a1f2:	4905      	ldr	r1, [pc, #20]	; (800a208 <http_check_eof+0x58>)
 800a1f4:	4805      	ldr	r0, [pc, #20]	; (800a20c <http_check_eof+0x5c>)
 800a1f6:	f00c fb61 	bl	80168bc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a1fa:	2301      	movs	r3, #1
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	08018758 	.word	0x08018758
 800a208:	080187c8 	.word	0x080187c8
 800a20c:	080187a0 	.word	0x080187a0

0800a210 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a210:	b590      	push	{r4, r7, lr}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a226:	4293      	cmp	r3, r2
 800a228:	d803      	bhi.n	800a232 <http_send_data_nonssi+0x22>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	b29b      	uxth	r3, r3
 800a230:	e001      	b.n	800a236 <http_send_data_nonssi+0x26>
 800a232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a236:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6998      	ldr	r0, [r3, #24]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d012      	beq.n	800a26a <http_send_data_nonssi+0x5a>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00e      	beq.n	800a26a <http_send_data_nonssi+0x5a>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	699a      	ldr	r2, [r3, #24]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	6819      	ldr	r1, [r3, #0]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	461c      	mov	r4, r3
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	1ae3      	subs	r3, r4, r3
 800a264:	440b      	add	r3, r1
 800a266:	429a      	cmp	r2, r3
 800a268:	d001      	beq.n	800a26e <http_send_data_nonssi+0x5e>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e000      	b.n	800a270 <http_send_data_nonssi+0x60>
 800a26e:	2300      	movs	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f107 020c 	add.w	r2, r7, #12
 800a276:	4601      	mov	r1, r0
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff fed3 	bl	800a024 <http_write>
 800a27e:	4603      	mov	r3, r0
 800a280:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a282:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10d      	bne.n	800a2a6 <http_send_data_nonssi+0x96>
    data_to_send = 1;
 800a28a:	2301      	movs	r3, #1
 800a28c:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	89ba      	ldrh	r2, [r7, #12]
 800a294:	441a      	add	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	89ba      	ldrh	r2, [r7, #12]
 800a2a0:	1a9a      	subs	r2, r3, r2
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd90      	pop	{r4, r7, pc}

0800a2b0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <http_send+0x18>
    return 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	e025      	b.n	800a314 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d108      	bne.n	800a2e2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff ff6c 	bl	800a1b0 <http_check_eof>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <http_send+0x32>
      return 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e018      	b.n	800a314 <http_send+0x64>
  if(hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a2e2:	6839      	ldr	r1, [r7, #0]
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f7ff ff93 	bl	800a210 <http_send_data_nonssi>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10d      	bne.n	800a312 <http_send+0x62>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fe32 	bl	8009f64 <fs_bytes_left>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	dc05      	bgt.n	800a312 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ff44 	bl	800a196 <http_eof>
    return 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	e000      	b.n	800a314 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	4a1c      	ldr	r2, [pc, #112]	; (800a39c <http_get_404_file+0x80>)
 800a32a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7ff fdcd 	bl	8009ed4 <fs_open>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d024      	beq.n	800a390 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	4a15      	ldr	r2, [pc, #84]	; (800a3a0 <http_get_404_file+0x84>)
 800a34a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4619      	mov	r1, r3
 800a354:	4610      	mov	r0, r2
 800a356:	f7ff fdbd 	bl	8009ed4 <fs_open>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d014      	beq.n	800a390 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <http_get_404_file+0x88>)
 800a36a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7ff fdad 	bl	8009ed4 <fs_open>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
        return NULL;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e000      	b.n	800a392 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a390:	687b      	ldr	r3, [r7, #4]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	08018800 	.word	0x08018800
 800a3a0:	0801880c 	.word	0x0801880c
 800a3a4:	08018818 	.word	0x08018818

0800a3a8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08e      	sub	sp, #56	; 0x38
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d106      	bne.n	800a3cc <http_parse_request+0x24>
 800a3be:	4b65      	ldr	r3, [pc, #404]	; (800a554 <http_parse_request+0x1ac>)
 800a3c0:	f240 727e 	movw	r2, #1918	; 0x77e
 800a3c4:	4964      	ldr	r1, [pc, #400]	; (800a558 <http_parse_request+0x1b0>)
 800a3c6:	4865      	ldr	r0, [pc, #404]	; (800a55c <http_parse_request+0x1b4>)
 800a3c8:	f00c fa78 	bl	80168bc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <http_parse_request+0x38>
 800a3d2:	4b60      	ldr	r3, [pc, #384]	; (800a554 <http_parse_request+0x1ac>)
 800a3d4:	f240 727f 	movw	r2, #1919	; 0x77f
 800a3d8:	4961      	ldr	r1, [pc, #388]	; (800a560 <http_parse_request+0x1b8>)
 800a3da:	4860      	ldr	r0, [pc, #384]	; (800a55c <http_parse_request+0x1b4>)
 800a3dc:	f00c fa6e 	bl	80168bc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d103      	bne.n	800a3f0 <http_parse_request+0x48>
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a3f0:	f06f 0307 	mvn.w	r3, #7
 800a3f4:	e0aa      	b.n	800a54c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	621a      	str	r2, [r3, #32]
 800a404:	e005      	b.n	800a412 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 fe1f 	bl	800c050 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a414:	f001 fdf4 	bl	800c000 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d012      	beq.n	800a448 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	891b      	ldrh	r3, [r3, #8]
 800a428:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a42c:	4293      	cmp	r3, r2
 800a42e:	bf28      	it	cs
 800a430:	4613      	movcs	r3, r2
 800a432:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	6a18      	ldr	r0, [r3, #32]
 800a438:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a43a:	2300      	movs	r3, #0
 800a43c:	4949      	ldr	r1, [pc, #292]	; (800a564 <http_parse_request+0x1bc>)
 800a43e:	f001 ff39 	bl	800c2b4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a442:	4b48      	ldr	r3, [pc, #288]	; (800a564 <http_parse_request+0x1bc>)
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
 800a446:	e005      	b.n	800a454 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a454:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a456:	2b06      	cmp	r3, #6
 800a458:	d963      	bls.n	800a522 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a45a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a45c:	461a      	mov	r2, r3
 800a45e:	4942      	ldr	r1, [pc, #264]	; (800a568 <http_parse_request+0x1c0>)
 800a460:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a462:	f000 fb6a 	bl	800ab3a <lwip_strnstr>
 800a466:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a468:	6a3b      	ldr	r3, [r7, #32]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d059      	beq.n	800a522 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a472:	2204      	movs	r2, #4
 800a474:	493d      	ldr	r1, [pc, #244]	; (800a56c <http_parse_request+0x1c4>)
 800a476:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a478:	f00c fab7 	bl	80169ea <strncmp>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d117      	bne.n	800a4b2 <http_parse_request+0x10a>
        sp1 = data + 3;
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	3303      	adds	r3, #3
 800a486:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	3301      	adds	r3, #1
 800a48c:	461a      	mov	r2, r3
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	b29b      	uxth	r3, r3
 800a494:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	3301      	adds	r3, #1
 800a49e:	8b7a      	ldrh	r2, [r7, #26]
 800a4a0:	4933      	ldr	r1, [pc, #204]	; (800a570 <http_parse_request+0x1c8>)
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fb49 	bl	800ab3a <lwip_strnstr>
 800a4a8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d111      	bne.n	800a4d4 <http_parse_request+0x12c>
 800a4b0:	e006      	b.n	800a4c0 <http_parse_request+0x118>
        data[4] = 0;
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a4ba:	f06f 030f 	mvn.w	r3, #15
 800a4be:	e045      	b.n	800a54c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	8b7a      	ldrh	r2, [r7, #26]
 800a4c6:	4928      	ldr	r1, [pc, #160]	; (800a568 <http_parse_request+0x1c0>)
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fb36 	bl	800ab3a <lwip_strnstr>
 800a4ce:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	3201      	adds	r2, #1
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01e      	beq.n	800a522 <http_parse_request+0x17a>
 800a4e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d91a      	bls.n	800a522 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a4ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4920      	ldr	r1, [pc, #128]	; (800a574 <http_parse_request+0x1cc>)
 800a4f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a4f4:	f000 fb21 	bl	800ab3a <lwip_strnstr>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d011      	beq.n	800a522 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	3301      	adds	r3, #1
 800a502:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a50a:	8b3b      	ldrh	r3, [r7, #24]
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4413      	add	r3, r2
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	68b8      	ldr	r0, [r7, #8]
 800a51a:	f000 f82d 	bl	800a578 <http_find_file>
 800a51e:	4603      	mov	r3, r0
 800a520:	e014      	b.n	800a54c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fd52 	bl	800bfd0 <pbuf_clen>
 800a52c:	4603      	mov	r3, r0
 800a52e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	891b      	ldrh	r3, [r3, #8]
 800a536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a53a:	d205      	bcs.n	800a548 <http_parse_request+0x1a0>
 800a53c:	8a7b      	ldrh	r3, [r7, #18]
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d802      	bhi.n	800a548 <http_parse_request+0x1a0>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a542:	f06f 0304 	mvn.w	r3, #4
 800a546:	e001      	b.n	800a54c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a548:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3738      	adds	r7, #56	; 0x38
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	08018758 	.word	0x08018758
 800a558:	08018824 	.word	0x08018824
 800a55c:	080187a0 	.word	0x080187a0
 800a560:	08018830 	.word	0x08018830
 800a564:	200087b8 	.word	0x200087b8
 800a568:	0801883c 	.word	0x0801883c
 800a56c:	08018840 	.word	0x08018840
 800a570:	08018848 	.word	0x08018848
 800a574:	0801884c 	.word	0x0801884c

0800a578 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b092      	sub	sp, #72	; 0x48
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4618      	mov	r0, r3
 800a596:	f7f5 fe35 	bl	8000204 <strlen>
 800a59a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d065      	beq.n	800a66e <http_find_file+0xf6>
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b2f      	cmp	r3, #47	; 0x2f
 800a5ae:	d15e      	bne.n	800a66e <http_find_file+0xf6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a5b0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800a5b2:	4a50      	ldr	r2, [pc, #320]	; (800a6f4 <http_find_file+0x17c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d102      	bne.n	800a5be <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d157      	bne.n	800a66e <http_find_file+0xf6>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	2b3f      	cmp	r3, #63	; 0x3f
 800a5c4:	bf28      	it	cs
 800a5c6:	233f      	movcs	r3, #63	; 0x3f
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4847      	ldr	r0, [pc, #284]	; (800a6f4 <http_find_file+0x17c>)
 800a5d8:	f00c f95d 	bl	8016896 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a5dc:	4a45      	ldr	r2, [pc, #276]	; (800a6f4 <http_find_file+0x17c>)
 800a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e0:	4413      	add	r3, r2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ea:	e03d      	b.n	800a668 <http_find_file+0xf0>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d022      	beq.n	800a638 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a5f8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d018      	beq.n	800a632 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800a600:	4a3d      	ldr	r2, [pc, #244]	; (800a6f8 <http_find_file+0x180>)
 800a602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f5 fdfb 	bl	8000204 <strlen>
 800a60e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	4293      	cmp	r3, r2
 800a616:	bf28      	it	cs
 800a618:	4613      	movcs	r3, r2
 800a61a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	4a35      	ldr	r2, [pc, #212]	; (800a6f4 <http_find_file+0x17c>)
 800a620:	1898      	adds	r0, r3, r2
 800a622:	4a35      	ldr	r2, [pc, #212]	; (800a6f8 <http_find_file+0x180>)
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	4619      	mov	r1, r3
 800a62e:	f00c f932 	bl	8016896 <memcpy>
        }
        file_name = http_uri_buf;
 800a632:	4b30      	ldr	r3, [pc, #192]	; (800a6f4 <http_find_file+0x17c>)
 800a634:	633b      	str	r3, [r7, #48]	; 0x30
 800a636:	e004      	b.n	800a642 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800a638:	4a2f      	ldr	r2, [pc, #188]	; (800a6f8 <http_find_file+0x180>)
 800a63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a640:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fc44 	bl	8009ed4 <fs_open>
 800a64c:	4603      	mov	r3, r0
 800a64e:	75fb      	strb	r3, [r7, #23]
      if(err == ERR_OK) {
 800a650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d104      	bne.n	800a662 <http_find_file+0xea>
        uri = file_name;
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a660:	e005      	b.n	800a66e <http_find_file+0xf6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a664:	3301      	adds	r3, #1
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d9be      	bls.n	800a5ec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a670:	2b00      	cmp	r3, #0
 800a672:	d124      	bne.n	800a6be <http_find_file+0x146>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	213f      	movs	r1, #63	; 0x3f
 800a678:	4618      	mov	r0, r3
 800a67a:	f00c f9a9 	bl	80169d0 <strchr>
 800a67e:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <http_find_file+0x11a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	2200      	movs	r2, #0
 800a68a:	701a      	strb	r2, [r3, #0]
      params++;
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	3301      	adds	r3, #1
 800a690:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fc1b 	bl	8009ed4 <fs_open>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a6a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <http_find_file+0x138>
       file = &hs->file_handle;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ae:	e006      	b.n	800a6be <http_find_file+0x146>
    } else {
      file = http_get_404_file(hs, &uri);
 800a6b0:	f107 0308 	add.w	r3, r7, #8
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fe30 	bl	800a31c <http_get_404_file>
 800a6bc:	63b8      	str	r0, [r7, #56]	; 0x38
         *param = '?';
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <http_find_file+0x15a>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a6c4:	f107 0308 	add.w	r3, r7, #8
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff fe26 	bl	800a31c <http_get_404_file>
 800a6d0:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 f809 	bl	800a6fc <http_init_file>
 800a6ea:	4603      	mov	r3, r0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3740      	adds	r7, #64	; 0x40
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20008bb8 	.word	0x20008bb8
 800a6f8:	08025e68 	.word	0x08025e68

0800a6fc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
 800a708:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d052      	beq.n	800a7b6 <http_init_file+0xba>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	da06      	bge.n	800a734 <http_init_file+0x38>
 800a726:	4b2d      	ldr	r3, [pc, #180]	; (800a7dc <http_init_file+0xe0>)
 800a728:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800a72c:	492c      	ldr	r1, [pc, #176]	; (800a7e0 <http_init_file+0xe4>)
 800a72e:	482d      	ldr	r0, [pc, #180]	; (800a7e4 <http_init_file+0xe8>)
 800a730:	f00c f8c4 	bl	80168bc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	461a      	mov	r2, r3
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	7c1b      	ldrb	r3, [r3, #16]
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <http_init_file+0x66>
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <http_init_file+0xe0>)
 800a756:	f640 02df 	movw	r2, #2271	; 0x8df
 800a75a:	4923      	ldr	r1, [pc, #140]	; (800a7e8 <http_init_file+0xec>)
 800a75c:	4821      	ldr	r0, [pc, #132]	; (800a7e4 <http_init_file+0xe8>)
 800a75e:	f00c f8ad 	bl	80168bc <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d033      	beq.n	800a7d0 <http_init_file+0xd4>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	7c1b      	ldrb	r3, [r3, #16]
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	2b00      	cmp	r3, #0
 800a774:	d02c      	beq.n	800a7d0 <http_init_file+0xd4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6998      	ldr	r0, [r3, #24]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	461a      	mov	r2, r3
 800a780:	491a      	ldr	r1, [pc, #104]	; (800a7ec <http_init_file+0xf0>)
 800a782:	f000 f9da 	bl	800ab3a <lwip_strnstr>
 800a786:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d020      	beq.n	800a7d0 <http_init_file+0xd4>
        size_t diff = file_start + 4 - hs->file;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	3304      	adds	r3, #4
 800a792:	461a      	mov	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	699a      	ldr	r2, [r3, #24]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	441a      	add	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	625a      	str	r2, [r3, #36]	; 0x24
 800a7b4:	e00c      	b.n	800a7d0 <http_init_file+0xd4>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	08018758 	.word	0x08018758
 800a7e0:	08018854 	.word	0x08018854
 800a7e4:	080187a0 	.word	0x080187a0
 800a7e8:	08018874 	.word	0x08018874
 800a7ec:	0801884c 	.word	0x0801884c

0800a7f0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <http_err+0x1c>
    http_state_free(hs);
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fbfa 	bl	800a000 <http_state_free>
  }
}
 800a80c:	bf00      	nop
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <http_sent+0x1c>
    return ERR_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e008      	b.n	800a842 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a838:	6979      	ldr	r1, [r7, #20]
 800a83a:	68b8      	ldr	r0, [r7, #8]
 800a83c:	f7ff fd38 	bl	800a2b0 <http_send>

  return ERR_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a85e:	2100      	movs	r1, #0
 800a860:	6838      	ldr	r0, [r7, #0]
 800a862:	f7ff fc89 	bl	800a178 <http_close_conn>
 800a866:	4603      	mov	r3, r0
 800a868:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e024      	b.n	800a8b8 <http_poll+0x6e>
  } else {
    hs->retries++;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a874:	3301      	adds	r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a884:	2b04      	cmp	r3, #4
 800a886:	d105      	bne.n	800a894 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a888:	68f9      	ldr	r1, [r7, #12]
 800a88a:	6838      	ldr	r0, [r7, #0]
 800a88c:	f7ff fc74 	bl	800a178 <http_close_conn>
      return ERR_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	e011      	b.n	800a8b8 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00d      	beq.n	800a8b6 <http_poll+0x6c>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	695b      	ldr	r3, [r3, #20]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800a8a2:	68f9      	ldr	r1, [r7, #12]
 800a8a4:	6838      	ldr	r0, [r7, #0]
 800a8a6:	f7ff fd03 	bl	800a2b0 <http_send>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800a8b0:	6838      	ldr	r0, [r7, #0]
 800a8b2:	f006 fad3 	bl	8010e5c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d105      	bne.n	800a8e6 <http_recv+0x26>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <http_recv+0x26>
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d111      	bne.n	800a90a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d008      	beq.n	800a8fe <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	891b      	ldrh	r3, [r3, #8]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	68b8      	ldr	r0, [r7, #8]
 800a8f4:	f002 f9ce 	bl	800cc94 <tcp_recved>
      pbuf_free(p);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f001 facf 	bl	800be9c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a8fe:	6979      	ldr	r1, [r7, #20]
 800a900:	68b8      	ldr	r0, [r7, #8]
 800a902:	f7ff fc39 	bl	800a178 <http_close_conn>
    return ERR_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	e055      	b.n	800a9b6 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	891b      	ldrh	r3, [r3, #8]
 800a90e:	4619      	mov	r1, r3
 800a910:	68b8      	ldr	r0, [r7, #8]
 800a912:	f002 f9bf 	bl	800cc94 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d147      	bne.n	800a9ae <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	6979      	ldr	r1, [r7, #20]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fd40 	bl	800a3a8 <http_parse_request>
 800a928:	4603      	mov	r3, r0
 800a92a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a92c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d015      	beq.n	800a960 <http_recv+0xa0>
 800a934:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a938:	f113 0f05 	cmn.w	r3, #5
 800a93c:	d010      	beq.n	800a960 <http_recv+0xa0>
 800a93e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a942:	f113 0f10 	cmn.w	r3, #16
 800a946:	d00b      	beq.n	800a960 <http_recv+0xa0>
 800a948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a94c:	f113 0f08 	cmn.w	r3, #8
 800a950:	d006      	beq.n	800a960 <http_recv+0xa0>
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <http_recv+0x100>)
 800a954:	f640 12b5 	movw	r2, #2485	; 0x9b5
 800a958:	491a      	ldr	r1, [pc, #104]	; (800a9c4 <http_recv+0x104>)
 800a95a:	481b      	ldr	r0, [pc, #108]	; (800a9c8 <http_recv+0x108>)
 800a95c:	f00b ffae 	bl	80168bc <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a960:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a964:	f113 0f05 	cmn.w	r3, #5
 800a968:	d00b      	beq.n	800a982 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fa90 	bl	800be9c <pbuf_free>
          hs->req = NULL;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2200      	movs	r2, #0
 800a980:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f001 fa8a 	bl	800be9c <pbuf_free>
      if (parsed == ERR_OK) {
 800a988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800a990:	6979      	ldr	r1, [r7, #20]
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	f7ff fc8c 	bl	800a2b0 <http_send>
 800a998:	e00c      	b.n	800a9b4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a99a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a99e:	f113 0f10 	cmn.w	r3, #16
 800a9a2:	d107      	bne.n	800a9b4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a9a4:	6979      	ldr	r1, [r7, #20]
 800a9a6:	68b8      	ldr	r0, [r7, #8]
 800a9a8:	f7ff fbe6 	bl	800a178 <http_close_conn>
 800a9ac:	e002      	b.n	800a9b4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 fa74 	bl	800be9c <pbuf_free>
    }
  }
  return ERR_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	08018758 	.word	0x08018758
 800a9c4:	080188a0 	.word	0x080188a0
 800a9c8:	080187a0 	.word	0x080187a0

0800a9cc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a9da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <http_accept+0x1c>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <http_accept+0x22>
    return ERR_VAL;
 800a9e8:	f06f 0305 	mvn.w	r3, #5
 800a9ec:	e025      	b.n	800aa3a <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f002 fda6 	bl	800d542 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a9f6:	f7ff fad1 	bl	8009f9c <http_state_alloc>
 800a9fa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa06:	e018      	b.n	800aa3a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800aa0e:	6979      	ldr	r1, [r7, #20]
 800aa10:	68b8      	ldr	r0, [r7, #8]
 800aa12:	f002 ff2f 	bl	800d874 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800aa16:	490b      	ldr	r1, [pc, #44]	; (800aa44 <http_accept+0x78>)
 800aa18:	68b8      	ldr	r0, [r7, #8]
 800aa1a:	f002 ff3d 	bl	800d898 <tcp_recv>
  tcp_err(pcb, http_err);
 800aa1e:	490a      	ldr	r1, [pc, #40]	; (800aa48 <http_accept+0x7c>)
 800aa20:	68b8      	ldr	r0, [r7, #8]
 800aa22:	f002 ff7b 	bl	800d91c <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800aa26:	2204      	movs	r2, #4
 800aa28:	4908      	ldr	r1, [pc, #32]	; (800aa4c <http_accept+0x80>)
 800aa2a:	68b8      	ldr	r0, [r7, #8]
 800aa2c:	f002 ffb0 	bl	800d990 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800aa30:	4907      	ldr	r1, [pc, #28]	; (800aa50 <http_accept+0x84>)
 800aa32:	68b8      	ldr	r0, [r7, #8]
 800aa34:	f002 ff52 	bl	800d8dc <tcp_sent>

  return ERR_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	0800a8c1 	.word	0x0800a8c1
 800aa48:	0800a7f1 	.word	0x0800a7f1
 800aa4c:	0800a84b 	.word	0x0800a84b
 800aa50:	0800a815 	.word	0x0800a815

0800aa54 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800aa5a:	202e      	movs	r0, #46	; 0x2e
 800aa5c:	f002 fefc 	bl	800d858 <tcp_new_ip_type>
 800aa60:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d106      	bne.n	800aa76 <httpd_init+0x22>
 800aa68:	4b19      	ldr	r3, [pc, #100]	; (800aad0 <httpd_init+0x7c>)
 800aa6a:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800aa6e:	4919      	ldr	r1, [pc, #100]	; (800aad4 <httpd_init+0x80>)
 800aa70:	4819      	ldr	r0, [pc, #100]	; (800aad8 <httpd_init+0x84>)
 800aa72:	f00b ff23 	bl	80168bc <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800aa76:	2101      	movs	r1, #1
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f002 fd62 	bl	800d542 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800aa7e:	2250      	movs	r2, #80	; 0x50
 800aa80:	4916      	ldr	r1, [pc, #88]	; (800aadc <httpd_init+0x88>)
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 ff6c 	bl	800c960 <tcp_bind>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800aa8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d006      	beq.n	800aaa2 <httpd_init+0x4e>
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <httpd_init+0x7c>)
 800aa96:	f640 2215 	movw	r2, #2581	; 0xa15
 800aa9a:	4911      	ldr	r1, [pc, #68]	; (800aae0 <httpd_init+0x8c>)
 800aa9c:	480e      	ldr	r0, [pc, #56]	; (800aad8 <httpd_init+0x84>)
 800aa9e:	f00b ff0d 	bl	80168bc <iprintf>
  pcb = tcp_listen(pcb);
 800aaa2:	21ff      	movs	r1, #255	; 0xff
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fffd 	bl	800caa4 <tcp_listen_with_backlog>
 800aaaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <httpd_init+0x6c>
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <httpd_init+0x7c>)
 800aab4:	f640 2217 	movw	r2, #2583	; 0xa17
 800aab8:	490a      	ldr	r1, [pc, #40]	; (800aae4 <httpd_init+0x90>)
 800aaba:	4807      	ldr	r0, [pc, #28]	; (800aad8 <httpd_init+0x84>)
 800aabc:	f00b fefe 	bl	80168bc <iprintf>
  tcp_accept(pcb, http_accept);
 800aac0:	4909      	ldr	r1, [pc, #36]	; (800aae8 <httpd_init+0x94>)
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f002 ff4c 	bl	800d960 <tcp_accept>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	08018758 	.word	0x08018758
 800aad4:	080188cc 	.word	0x080188cc
 800aad8:	080187a0 	.word	0x080187a0
 800aadc:	08025fb0 	.word	0x08025fb0
 800aae0:	080188e8 	.word	0x080188e8
 800aae4:	08018904 	.word	0x08018904
 800aae8:	0800a9cd 	.word	0x0800a9cd

0800aaec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	ba5b      	rev16	r3, r3
 800aafa:	b29b      	uxth	r3, r3
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	061a      	lsls	r2, r3, #24
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	0e1b      	lsrs	r3, r3, #24
 800ab2c:	4313      	orrs	r3, r2
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b086      	sub	sp, #24
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800ab46:	68b8      	ldr	r0, [r7, #8]
 800ab48:	f7f5 fb5c 	bl	8000204 <strlen>
 800ab4c:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	e022      	b.n	800ab9e <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	e012      	b.n	800ab84 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d109      	bne.n	800ab7e <lwip_strnstr+0x44>
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	6978      	ldr	r0, [r7, #20]
 800ab70:	f00b ff3b 	bl	80169ea <strncmp>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	e00f      	b.n	800ab9e <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	3301      	adds	r3, #1
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d007      	beq.n	800ab9c <lwip_strnstr+0x62>
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	441a      	add	r2, r3
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	440b      	add	r3, r1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d9e0      	bls.n	800ab5e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800abb0:	f00b fdb4 	bl	801671c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800abb4:	f000 f8a6 	bl	800ad04 <mem_init>
  memp_init();
 800abb8:	f000 fb70 	bl	800b29c <memp_init>
  pbuf_init();
  netif_init();
 800abbc:	f000 fc36 	bl	800b42c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800abc0:	f006 ffc6 	bl	8011b50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800abc4:	f001 fbf0 	bl	800c3a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800abc8:	f006 fe58 	bl	801187c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800abdc:	4b40      	ldr	r3, [pc, #256]	; (800ace0 <plug_holes+0x10c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d206      	bcs.n	800abf4 <plug_holes+0x20>
 800abe6:	4b3f      	ldr	r3, [pc, #252]	; (800ace4 <plug_holes+0x110>)
 800abe8:	f240 125d 	movw	r2, #349	; 0x15d
 800abec:	493e      	ldr	r1, [pc, #248]	; (800ace8 <plug_holes+0x114>)
 800abee:	483f      	ldr	r0, [pc, #252]	; (800acec <plug_holes+0x118>)
 800abf0:	f00b fe64 	bl	80168bc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800abf4:	4b3e      	ldr	r3, [pc, #248]	; (800acf0 <plug_holes+0x11c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d306      	bcc.n	800ac0c <plug_holes+0x38>
 800abfe:	4b39      	ldr	r3, [pc, #228]	; (800ace4 <plug_holes+0x110>)
 800ac00:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ac04:	493b      	ldr	r1, [pc, #236]	; (800acf4 <plug_holes+0x120>)
 800ac06:	4839      	ldr	r0, [pc, #228]	; (800acec <plug_holes+0x118>)
 800ac08:	f00b fe58 	bl	80168bc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	791b      	ldrb	r3, [r3, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d006      	beq.n	800ac22 <plug_holes+0x4e>
 800ac14:	4b33      	ldr	r3, [pc, #204]	; (800ace4 <plug_holes+0x110>)
 800ac16:	f240 125f 	movw	r2, #351	; 0x15f
 800ac1a:	4937      	ldr	r1, [pc, #220]	; (800acf8 <plug_holes+0x124>)
 800ac1c:	4833      	ldr	r0, [pc, #204]	; (800acec <plug_holes+0x118>)
 800ac1e:	f00b fe4d 	bl	80168bc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac2a:	d906      	bls.n	800ac3a <plug_holes+0x66>
 800ac2c:	4b2d      	ldr	r3, [pc, #180]	; (800ace4 <plug_holes+0x110>)
 800ac2e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ac32:	4932      	ldr	r1, [pc, #200]	; (800acfc <plug_holes+0x128>)
 800ac34:	482d      	ldr	r0, [pc, #180]	; (800acec <plug_holes+0x118>)
 800ac36:	f00b fe41 	bl	80168bc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800ac3a:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <plug_holes+0x10c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	8812      	ldrh	r2, [r2, #0]
 800ac42:	4413      	add	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d01f      	beq.n	800ac8e <plug_holes+0xba>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d11b      	bne.n	800ac8e <plug_holes+0xba>
 800ac56:	4b26      	ldr	r3, [pc, #152]	; (800acf0 <plug_holes+0x11c>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d016      	beq.n	800ac8e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ac60:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <plug_holes+0x12c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d102      	bne.n	800ac70 <plug_holes+0x9c>
      lfree = mem;
 800ac6a:	4a25      	ldr	r2, [pc, #148]	; (800ad00 <plug_holes+0x12c>)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	881a      	ldrh	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a19      	ldr	r2, [pc, #100]	; (800ace0 <plug_holes+0x10c>)
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	1a99      	subs	r1, r3, r2
 800ac80:	4b17      	ldr	r3, [pc, #92]	; (800ace0 <plug_holes+0x10c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	8812      	ldrh	r2, [r2, #0]
 800ac88:	4413      	add	r3, r2
 800ac8a:	b28a      	uxth	r2, r1
 800ac8c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800ac8e:	4b14      	ldr	r3, [pc, #80]	; (800ace0 <plug_holes+0x10c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	8852      	ldrh	r2, [r2, #2]
 800ac96:	4413      	add	r3, r2
 800ac98:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d01a      	beq.n	800acd8 <plug_holes+0x104>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	791b      	ldrb	r3, [r3, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d116      	bne.n	800acd8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800acaa:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <plug_holes+0x12c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d102      	bne.n	800acba <plug_holes+0xe6>
      lfree = pmem;
 800acb4:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <plug_holes+0x12c>)
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	881a      	ldrh	r2, [r3, #0]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4a06      	ldr	r2, [pc, #24]	; (800ace0 <plug_holes+0x10c>)
 800acc6:	6812      	ldr	r2, [r2, #0]
 800acc8:	1a99      	subs	r1, r3, r2
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <plug_holes+0x10c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	8812      	ldrh	r2, [r2, #0]
 800acd2:	4413      	add	r3, r2
 800acd4:	b28a      	uxth	r2, r1
 800acd6:	805a      	strh	r2, [r3, #2]
  }
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20008bf8 	.word	0x20008bf8
 800ace4:	08018924 	.word	0x08018924
 800ace8:	08018954 	.word	0x08018954
 800acec:	0801896c 	.word	0x0801896c
 800acf0:	20008bfc 	.word	0x20008bfc
 800acf4:	08018994 	.word	0x08018994
 800acf8:	080189b0 	.word	0x080189b0
 800acfc:	080189cc 	.word	0x080189cc
 800ad00:	20008c00 	.word	0x20008c00

0800ad04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ad0a:	4b1e      	ldr	r3, [pc, #120]	; (800ad84 <mem_init+0x80>)
 800ad0c:	3303      	adds	r3, #3
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	461a      	mov	r2, r3
 800ad14:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <mem_init+0x84>)
 800ad16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ad18:	4b1b      	ldr	r3, [pc, #108]	; (800ad88 <mem_init+0x84>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad24:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ad32:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <mem_init+0x84>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ad3a:	4a14      	ldr	r2, [pc, #80]	; (800ad8c <mem_init+0x88>)
 800ad3c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <mem_init+0x88>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2201      	movs	r2, #1
 800ad44:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ad46:	4b11      	ldr	r3, [pc, #68]	; (800ad8c <mem_init+0x88>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad4e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ad50:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <mem_init+0x88>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad58:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <mem_init+0x84>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a0c      	ldr	r2, [pc, #48]	; (800ad90 <mem_init+0x8c>)
 800ad60:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ad62:	480c      	ldr	r0, [pc, #48]	; (800ad94 <mem_init+0x90>)
 800ad64:	f00b fce8 	bl	8016738 <sys_mutex_new>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <mem_init+0x94>)
 800ad70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ad74:	4909      	ldr	r1, [pc, #36]	; (800ad9c <mem_init+0x98>)
 800ad76:	480a      	ldr	r0, [pc, #40]	; (800ada0 <mem_init+0x9c>)
 800ad78:	f00b fda0 	bl	80168bc <iprintf>
  }
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	2000c3a8 	.word	0x2000c3a8
 800ad88:	20008bf8 	.word	0x20008bf8
 800ad8c:	20008bfc 	.word	0x20008bfc
 800ad90:	20008c00 	.word	0x20008c00
 800ad94:	20008c04 	.word	0x20008c04
 800ad98:	08018924 	.word	0x08018924
 800ad9c:	080189f8 	.word	0x080189f8
 800ada0:	0801896c 	.word	0x0801896c

0800ada4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d050      	beq.n	800ae54 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f003 0303 	and.w	r3, r3, #3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d006      	beq.n	800adca <mem_free+0x26>
 800adbc:	4b27      	ldr	r3, [pc, #156]	; (800ae5c <mem_free+0xb8>)
 800adbe:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800adc2:	4927      	ldr	r1, [pc, #156]	; (800ae60 <mem_free+0xbc>)
 800adc4:	4827      	ldr	r0, [pc, #156]	; (800ae64 <mem_free+0xc0>)
 800adc6:	f00b fd79 	bl	80168bc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800adca:	4b27      	ldr	r3, [pc, #156]	; (800ae68 <mem_free+0xc4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	429a      	cmp	r2, r3
 800add2:	d304      	bcc.n	800adde <mem_free+0x3a>
 800add4:	4b25      	ldr	r3, [pc, #148]	; (800ae6c <mem_free+0xc8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	429a      	cmp	r2, r3
 800addc:	d306      	bcc.n	800adec <mem_free+0x48>
 800adde:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <mem_free+0xb8>)
 800ade0:	f240 12af 	movw	r2, #431	; 0x1af
 800ade4:	4922      	ldr	r1, [pc, #136]	; (800ae70 <mem_free+0xcc>)
 800ade6:	481f      	ldr	r0, [pc, #124]	; (800ae64 <mem_free+0xc0>)
 800ade8:	f00b fd68 	bl	80168bc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <mem_free+0xc4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d304      	bcc.n	800ae00 <mem_free+0x5c>
 800adf6:	4b1d      	ldr	r3, [pc, #116]	; (800ae6c <mem_free+0xc8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d306      	bcc.n	800ae0e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ae00:	f00b fcf8 	bl	80167f4 <sys_arch_protect>
 800ae04:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ae06:	68b8      	ldr	r0, [r7, #8]
 800ae08:	f00b fd02 	bl	8016810 <sys_arch_unprotect>
    return;
 800ae0c:	e023      	b.n	800ae56 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ae0e:	4819      	ldr	r0, [pc, #100]	; (800ae74 <mem_free+0xd0>)
 800ae10:	f00b fcae 	bl	8016770 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	3b08      	subs	r3, #8
 800ae18:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	791b      	ldrb	r3, [r3, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <mem_free+0x8c>
 800ae22:	4b0e      	ldr	r3, [pc, #56]	; (800ae5c <mem_free+0xb8>)
 800ae24:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ae28:	4913      	ldr	r1, [pc, #76]	; (800ae78 <mem_free+0xd4>)
 800ae2a:	480e      	ldr	r0, [pc, #56]	; (800ae64 <mem_free+0xc0>)
 800ae2c:	f00b fd46 	bl	80168bc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae36:	4b11      	ldr	r3, [pc, #68]	; (800ae7c <mem_free+0xd8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d202      	bcs.n	800ae46 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae40:	4a0e      	ldr	r2, [pc, #56]	; (800ae7c <mem_free+0xd8>)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff fec4 	bl	800abd4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae4c:	4809      	ldr	r0, [pc, #36]	; (800ae74 <mem_free+0xd0>)
 800ae4e:	f00b fc9e 	bl	801678e <sys_mutex_unlock>
 800ae52:	e000      	b.n	800ae56 <mem_free+0xb2>
    return;
 800ae54:	bf00      	nop
}
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	08018924 	.word	0x08018924
 800ae60:	08018a14 	.word	0x08018a14
 800ae64:	0801896c 	.word	0x0801896c
 800ae68:	20008bf8 	.word	0x20008bf8
 800ae6c:	20008bfc 	.word	0x20008bfc
 800ae70:	08018a38 	.word	0x08018a38
 800ae74:	20008c04 	.word	0x20008c04
 800ae78:	08018a50 	.word	0x08018a50
 800ae7c:	20008c00 	.word	0x20008c00

0800ae80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ae8c:	887b      	ldrh	r3, [r7, #2]
 800ae8e:	3303      	adds	r3, #3
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ae98:	887b      	ldrh	r3, [r7, #2]
 800ae9a:	2b0b      	cmp	r3, #11
 800ae9c:	d801      	bhi.n	800aea2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ae9e:	230c      	movs	r3, #12
 800aea0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800aea2:	887b      	ldrh	r3, [r7, #2]
 800aea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aea8:	d901      	bls.n	800aeae <mem_trim+0x2e>
    return NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e0bd      	b.n	800b02a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aeae:	4b61      	ldr	r3, [pc, #388]	; (800b034 <mem_trim+0x1b4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d304      	bcc.n	800aec2 <mem_trim+0x42>
 800aeb8:	4b5f      	ldr	r3, [pc, #380]	; (800b038 <mem_trim+0x1b8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d306      	bcc.n	800aed0 <mem_trim+0x50>
 800aec2:	4b5e      	ldr	r3, [pc, #376]	; (800b03c <mem_trim+0x1bc>)
 800aec4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aec8:	495d      	ldr	r1, [pc, #372]	; (800b040 <mem_trim+0x1c0>)
 800aeca:	485e      	ldr	r0, [pc, #376]	; (800b044 <mem_trim+0x1c4>)
 800aecc:	f00b fcf6 	bl	80168bc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aed0:	4b58      	ldr	r3, [pc, #352]	; (800b034 <mem_trim+0x1b4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d304      	bcc.n	800aee4 <mem_trim+0x64>
 800aeda:	4b57      	ldr	r3, [pc, #348]	; (800b038 <mem_trim+0x1b8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d307      	bcc.n	800aef4 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800aee4:	f00b fc86 	bl	80167f4 <sys_arch_protect>
 800aee8:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f00b fc90 	bl	8016810 <sys_arch_unprotect>
    return rmem;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	e09a      	b.n	800b02a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3b08      	subs	r3, #8
 800aef8:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	4a4d      	ldr	r2, [pc, #308]	; (800b034 <mem_trim+0x1b4>)
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	881a      	ldrh	r2, [r3, #0]
 800af08:	8b7b      	ldrh	r3, [r7, #26]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b08      	subs	r3, #8
 800af10:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af12:	887a      	ldrh	r2, [r7, #2]
 800af14:	8b3b      	ldrh	r3, [r7, #24]
 800af16:	429a      	cmp	r2, r3
 800af18:	d906      	bls.n	800af28 <mem_trim+0xa8>
 800af1a:	4b48      	ldr	r3, [pc, #288]	; (800b03c <mem_trim+0x1bc>)
 800af1c:	f240 2206 	movw	r2, #518	; 0x206
 800af20:	4949      	ldr	r1, [pc, #292]	; (800b048 <mem_trim+0x1c8>)
 800af22:	4848      	ldr	r0, [pc, #288]	; (800b044 <mem_trim+0x1c4>)
 800af24:	f00b fcca 	bl	80168bc <iprintf>
  if (newsize > size) {
 800af28:	887a      	ldrh	r2, [r7, #2]
 800af2a:	8b3b      	ldrh	r3, [r7, #24]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d901      	bls.n	800af34 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800af30:	2300      	movs	r3, #0
 800af32:	e07a      	b.n	800b02a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800af34:	887a      	ldrh	r2, [r7, #2]
 800af36:	8b3b      	ldrh	r3, [r7, #24]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d101      	bne.n	800af40 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	e074      	b.n	800b02a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af40:	4842      	ldr	r0, [pc, #264]	; (800b04c <mem_trim+0x1cc>)
 800af42:	f00b fc15 	bl	8016770 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800af46:	4b3b      	ldr	r3, [pc, #236]	; (800b034 <mem_trim+0x1b4>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	8812      	ldrh	r2, [r2, #0]
 800af4e:	4413      	add	r3, r2
 800af50:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	791b      	ldrb	r3, [r3, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d131      	bne.n	800afbe <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800af60:	8b7a      	ldrh	r2, [r7, #26]
 800af62:	887b      	ldrh	r3, [r7, #2]
 800af64:	4413      	add	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	3308      	adds	r3, #8
 800af6a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800af6c:	4b38      	ldr	r3, [pc, #224]	; (800b050 <mem_trim+0x1d0>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	429a      	cmp	r2, r3
 800af74:	d105      	bne.n	800af82 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800af76:	4b2f      	ldr	r3, [pc, #188]	; (800b034 <mem_trim+0x1b4>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	8a7b      	ldrh	r3, [r7, #18]
 800af7c:	4413      	add	r3, r2
 800af7e:	4a34      	ldr	r2, [pc, #208]	; (800b050 <mem_trim+0x1d0>)
 800af80:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800af82:	4b2c      	ldr	r3, [pc, #176]	; (800b034 <mem_trim+0x1b4>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	8a7b      	ldrh	r3, [r7, #18]
 800af88:	4413      	add	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2200      	movs	r2, #0
 800af90:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	8a3a      	ldrh	r2, [r7, #16]
 800af96:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	8b7a      	ldrh	r2, [r7, #26]
 800af9c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	8a7a      	ldrh	r2, [r7, #18]
 800afa2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afac:	d039      	beq.n	800b022 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800afae:	4b21      	ldr	r3, [pc, #132]	; (800b034 <mem_trim+0x1b4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	8812      	ldrh	r2, [r2, #0]
 800afb6:	4413      	add	r3, r2
 800afb8:	8a7a      	ldrh	r2, [r7, #18]
 800afba:	805a      	strh	r2, [r3, #2]
 800afbc:	e031      	b.n	800b022 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	f103 0214 	add.w	r2, r3, #20
 800afc4:	8b3b      	ldrh	r3, [r7, #24]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d82b      	bhi.n	800b022 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800afca:	8b7a      	ldrh	r2, [r7, #26]
 800afcc:	887b      	ldrh	r3, [r7, #2]
 800afce:	4413      	add	r3, r2
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3308      	adds	r3, #8
 800afd4:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800afd6:	4b17      	ldr	r3, [pc, #92]	; (800b034 <mem_trim+0x1b4>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	8a7b      	ldrh	r3, [r7, #18]
 800afdc:	4413      	add	r3, r2
 800afde:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800afe0:	4b1b      	ldr	r3, [pc, #108]	; (800b050 <mem_trim+0x1d0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d202      	bcs.n	800aff0 <mem_trim+0x170>
      lfree = mem2;
 800afea:	4a19      	ldr	r2, [pc, #100]	; (800b050 <mem_trim+0x1d0>)
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2200      	movs	r2, #0
 800aff4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	881a      	ldrh	r2, [r3, #0]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	8b7a      	ldrh	r2, [r7, #26]
 800b002:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	8a7a      	ldrh	r2, [r7, #18]
 800b008:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b012:	d006      	beq.n	800b022 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b014:	4b07      	ldr	r3, [pc, #28]	; (800b034 <mem_trim+0x1b4>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	8812      	ldrh	r2, [r2, #0]
 800b01c:	4413      	add	r3, r2
 800b01e:	8a7a      	ldrh	r2, [r7, #18]
 800b020:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b022:	480a      	ldr	r0, [pc, #40]	; (800b04c <mem_trim+0x1cc>)
 800b024:	f00b fbb3 	bl	801678e <sys_mutex_unlock>
  return rmem;
 800b028:	687b      	ldr	r3, [r7, #4]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3720      	adds	r7, #32
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20008bf8 	.word	0x20008bf8
 800b038:	20008bfc 	.word	0x20008bfc
 800b03c:	08018924 	.word	0x08018924
 800b040:	08018a64 	.word	0x08018a64
 800b044:	0801896c 	.word	0x0801896c
 800b048:	08018a7c 	.word	0x08018a7c
 800b04c:	20008c04 	.word	0x20008c04
 800b050:	20008c00 	.word	0x20008c00

0800b054 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <mem_malloc+0x14>
    return NULL;
 800b064:	2300      	movs	r3, #0
 800b066:	e0d1      	b.n	800b20c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	3303      	adds	r3, #3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	f023 0303 	bic.w	r3, r3, #3
 800b072:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	2b0b      	cmp	r3, #11
 800b078:	d801      	bhi.n	800b07e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b07a:	230c      	movs	r3, #12
 800b07c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b07e:	88fb      	ldrh	r3, [r7, #6]
 800b080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b084:	d901      	bls.n	800b08a <mem_malloc+0x36>
    return NULL;
 800b086:	2300      	movs	r3, #0
 800b088:	e0c0      	b.n	800b20c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b08a:	4862      	ldr	r0, [pc, #392]	; (800b214 <mem_malloc+0x1c0>)
 800b08c:	f00b fb70 	bl	8016770 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b090:	4b61      	ldr	r3, [pc, #388]	; (800b218 <mem_malloc+0x1c4>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	461a      	mov	r2, r3
 800b096:	4b61      	ldr	r3, [pc, #388]	; (800b21c <mem_malloc+0x1c8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	83fb      	strh	r3, [r7, #30]
 800b09e:	e0aa      	b.n	800b1f6 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b0a0:	4b5e      	ldr	r3, [pc, #376]	; (800b21c <mem_malloc+0x1c8>)
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	8bfb      	ldrh	r3, [r7, #30]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	791b      	ldrb	r3, [r3, #4]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 809b 	bne.w	800b1ea <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	8bfb      	ldrh	r3, [r7, #30]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	f1a3 0208 	sub.w	r2, r3, #8
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f0c0 8090 	bcc.w	800b1ea <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	8bfb      	ldrh	r3, [r7, #30]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	f1a3 0208 	sub.w	r2, r3, #8
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	3314      	adds	r3, #20
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d327      	bcc.n	800b130 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b0e0:	8bfa      	ldrh	r2, [r7, #30]
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b0ec:	4b4b      	ldr	r3, [pc, #300]	; (800b21c <mem_malloc+0x1c8>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	8a7b      	ldrh	r3, [r7, #18]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	881a      	ldrh	r2, [r3, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8bfa      	ldrh	r2, [r7, #30]
 800b108:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	8a7a      	ldrh	r2, [r7, #18]
 800b10e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2201      	movs	r2, #1
 800b114:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b11e:	d00a      	beq.n	800b136 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b120:	4b3e      	ldr	r3, [pc, #248]	; (800b21c <mem_malloc+0x1c8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	8812      	ldrh	r2, [r2, #0]
 800b128:	4413      	add	r3, r2
 800b12a:	8a7a      	ldrh	r2, [r7, #18]
 800b12c:	805a      	strh	r2, [r3, #2]
 800b12e:	e002      	b.n	800b136 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2201      	movs	r2, #1
 800b134:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b136:	4b38      	ldr	r3, [pc, #224]	; (800b218 <mem_malloc+0x1c4>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d127      	bne.n	800b190 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800b140:	4b35      	ldr	r3, [pc, #212]	; (800b218 <mem_malloc+0x1c4>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b146:	e005      	b.n	800b154 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b148:	4b34      	ldr	r3, [pc, #208]	; (800b21c <mem_malloc+0x1c8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	8812      	ldrh	r2, [r2, #0]
 800b150:	4413      	add	r3, r2
 800b152:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	791b      	ldrb	r3, [r3, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <mem_malloc+0x112>
 800b15c:	4b30      	ldr	r3, [pc, #192]	; (800b220 <mem_malloc+0x1cc>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	429a      	cmp	r2, r3
 800b164:	d1f0      	bne.n	800b148 <mem_malloc+0xf4>
          }
          lfree = cur;
 800b166:	4a2c      	ldr	r2, [pc, #176]	; (800b218 <mem_malloc+0x1c4>)
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b16c:	4b2a      	ldr	r3, [pc, #168]	; (800b218 <mem_malloc+0x1c4>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b2b      	ldr	r3, [pc, #172]	; (800b220 <mem_malloc+0x1cc>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	429a      	cmp	r2, r3
 800b176:	d00b      	beq.n	800b190 <mem_malloc+0x13c>
 800b178:	4b27      	ldr	r3, [pc, #156]	; (800b218 <mem_malloc+0x1c4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d006      	beq.n	800b190 <mem_malloc+0x13c>
 800b182:	4b28      	ldr	r3, [pc, #160]	; (800b224 <mem_malloc+0x1d0>)
 800b184:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b188:	4927      	ldr	r1, [pc, #156]	; (800b228 <mem_malloc+0x1d4>)
 800b18a:	4828      	ldr	r0, [pc, #160]	; (800b22c <mem_malloc+0x1d8>)
 800b18c:	f00b fb96 	bl	80168bc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b190:	4820      	ldr	r0, [pc, #128]	; (800b214 <mem_malloc+0x1c0>)
 800b192:	f00b fafc 	bl	801678e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b196:	88fa      	ldrh	r2, [r7, #6]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4413      	add	r3, r2
 800b19c:	3308      	adds	r3, #8
 800b19e:	4a20      	ldr	r2, [pc, #128]	; (800b220 <mem_malloc+0x1cc>)
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d906      	bls.n	800b1b4 <mem_malloc+0x160>
 800b1a6:	4b1f      	ldr	r3, [pc, #124]	; (800b224 <mem_malloc+0x1d0>)
 800b1a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b1ac:	4920      	ldr	r1, [pc, #128]	; (800b230 <mem_malloc+0x1dc>)
 800b1ae:	481f      	ldr	r0, [pc, #124]	; (800b22c <mem_malloc+0x1d8>)
 800b1b0:	f00b fb84 	bl	80168bc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d006      	beq.n	800b1cc <mem_malloc+0x178>
 800b1be:	4b19      	ldr	r3, [pc, #100]	; (800b224 <mem_malloc+0x1d0>)
 800b1c0:	f240 22d6 	movw	r2, #726	; 0x2d6
 800b1c4:	491b      	ldr	r1, [pc, #108]	; (800b234 <mem_malloc+0x1e0>)
 800b1c6:	4819      	ldr	r0, [pc, #100]	; (800b22c <mem_malloc+0x1d8>)
 800b1c8:	f00b fb78 	bl	80168bc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d006      	beq.n	800b1e4 <mem_malloc+0x190>
 800b1d6:	4b13      	ldr	r3, [pc, #76]	; (800b224 <mem_malloc+0x1d0>)
 800b1d8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800b1dc:	4916      	ldr	r1, [pc, #88]	; (800b238 <mem_malloc+0x1e4>)
 800b1de:	4813      	ldr	r0, [pc, #76]	; (800b22c <mem_malloc+0x1d8>)
 800b1e0:	f00b fb6c 	bl	80168bc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	e010      	b.n	800b20c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <mem_malloc+0x1c8>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	8bfb      	ldrh	r3, [r7, #30]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b1f6:	8bfa      	ldrh	r2, [r7, #30]
 800b1f8:	88fb      	ldrh	r3, [r7, #6]
 800b1fa:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b1fe:	429a      	cmp	r2, r3
 800b200:	f4ff af4e 	bcc.w	800b0a0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b204:	4803      	ldr	r0, [pc, #12]	; (800b214 <mem_malloc+0x1c0>)
 800b206:	f00b fac2 	bl	801678e <sys_mutex_unlock>
  return NULL;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3720      	adds	r7, #32
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20008c04 	.word	0x20008c04
 800b218:	20008c00 	.word	0x20008c00
 800b21c:	20008bf8 	.word	0x20008bf8
 800b220:	20008bfc 	.word	0x20008bfc
 800b224:	08018924 	.word	0x08018924
 800b228:	08018a9c 	.word	0x08018a9c
 800b22c:	0801896c 	.word	0x0801896c
 800b230:	08018ab8 	.word	0x08018ab8
 800b234:	08018ae8 	.word	0x08018ae8
 800b238:	08018b18 	.word	0x08018b18

0800b23c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	3303      	adds	r3, #3
 800b252:	f023 0303 	bic.w	r3, r3, #3
 800b256:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b258:	2300      	movs	r3, #0
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e011      	b.n	800b282 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	461a      	mov	r2, r3
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	885b      	ldrh	r3, [r3, #2]
 800b286:	461a      	mov	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4293      	cmp	r3, r2
 800b28c:	dbe7      	blt.n	800b25e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
	...

0800b29c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	80fb      	strh	r3, [r7, #6]
 800b2a6:	e009      	b.n	800b2bc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b2a8:	88fb      	ldrh	r3, [r7, #6]
 800b2aa:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <memp_init+0x30>)
 800b2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff ffc3 	bl	800b23c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	80fb      	strh	r3, [r7, #6]
 800b2bc:	88fb      	ldrh	r3, [r7, #6]
 800b2be:	2b0c      	cmp	r3, #12
 800b2c0:	d9f2      	bls.n	800b2a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	08025f2c 	.word	0x08025f2c

0800b2d0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b2d8:	f00b fa8c 	bl	80167f4 <sys_arch_protect>
 800b2dc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d015      	beq.n	800b318 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	6812      	ldr	r2, [r2, #0]
 800b2f4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <do_memp_malloc_pool+0x3e>
 800b300:	4b09      	ldr	r3, [pc, #36]	; (800b328 <do_memp_malloc_pool+0x58>)
 800b302:	f240 1249 	movw	r2, #329	; 0x149
 800b306:	4909      	ldr	r1, [pc, #36]	; (800b32c <do_memp_malloc_pool+0x5c>)
 800b308:	4809      	ldr	r0, [pc, #36]	; (800b330 <do_memp_malloc_pool+0x60>)
 800b30a:	f00b fad7 	bl	80168bc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f00b fa7e 	bl	8016810 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	e003      	b.n	800b320 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f00b fa79 	bl	8016810 <sys_arch_unprotect>
  return NULL;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	08018b3c 	.word	0x08018b3c
 800b32c:	08018b6c 	.word	0x08018b6c
 800b330:	08018b90 	.word	0x08018b90

0800b334 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	4603      	mov	r3, r0
 800b33c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	2b0c      	cmp	r3, #12
 800b342:	d908      	bls.n	800b356 <memp_malloc+0x22>
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <memp_malloc+0x3c>)
 800b346:	f240 1287 	movw	r2, #391	; 0x187
 800b34a:	490a      	ldr	r1, [pc, #40]	; (800b374 <memp_malloc+0x40>)
 800b34c:	480a      	ldr	r0, [pc, #40]	; (800b378 <memp_malloc+0x44>)
 800b34e:	f00b fab5 	bl	80168bc <iprintf>
 800b352:	2300      	movs	r3, #0
 800b354:	e008      	b.n	800b368 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	4a08      	ldr	r2, [pc, #32]	; (800b37c <memp_malloc+0x48>)
 800b35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff ffb6 	bl	800b2d0 <do_memp_malloc_pool>
 800b364:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b366:	68fb      	ldr	r3, [r7, #12]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	08018b3c 	.word	0x08018b3c
 800b374:	08018bcc 	.word	0x08018bcc
 800b378:	08018b90 	.word	0x08018b90
 800b37c:	08025f2c 	.word	0x08025f2c

0800b380 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	f003 0303 	and.w	r3, r3, #3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d006      	beq.n	800b3a2 <do_memp_free_pool+0x22>
 800b394:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <do_memp_free_pool+0x4c>)
 800b396:	f240 129d 	movw	r2, #413	; 0x19d
 800b39a:	490d      	ldr	r1, [pc, #52]	; (800b3d0 <do_memp_free_pool+0x50>)
 800b39c:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <do_memp_free_pool+0x54>)
 800b39e:	f00b fa8d 	bl	80168bc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b3a6:	f00b fa25 	bl	80167f4 <sys_arch_protect>
 800b3aa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b3be:	68b8      	ldr	r0, [r7, #8]
 800b3c0:	f00b fa26 	bl	8016810 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	08018b3c 	.word	0x08018b3c
 800b3d0:	08018bec 	.word	0x08018bec
 800b3d4:	08018b90 	.word	0x08018b90

0800b3d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	6039      	str	r1, [r7, #0]
 800b3e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	2b0c      	cmp	r3, #12
 800b3e8:	d907      	bls.n	800b3fa <memp_free+0x22>
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <memp_free+0x44>)
 800b3ec:	f240 12db 	movw	r2, #475	; 0x1db
 800b3f0:	490b      	ldr	r1, [pc, #44]	; (800b420 <memp_free+0x48>)
 800b3f2:	480c      	ldr	r0, [pc, #48]	; (800b424 <memp_free+0x4c>)
 800b3f4:	f00b fa62 	bl	80168bc <iprintf>
 800b3f8:	e00c      	b.n	800b414 <memp_free+0x3c>

  if (mem == NULL) {
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d008      	beq.n	800b412 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	4a09      	ldr	r2, [pc, #36]	; (800b428 <memp_free+0x50>)
 800b404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff ffb8 	bl	800b380 <do_memp_free_pool>
 800b410:	e000      	b.n	800b414 <memp_free+0x3c>
    return;
 800b412:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	08018b3c 	.word	0x08018b3c
 800b420:	08018c0c 	.word	0x08018c0c
 800b424:	08018b90 	.word	0x08018b90
 800b428:	08025f2c 	.word	0x08025f2c

0800b42c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b430:	bf00      	nop
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
	...

0800b43c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
 800b448:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d105      	bne.n	800b45c <netif_add+0x20>
 800b450:	4b23      	ldr	r3, [pc, #140]	; (800b4e0 <netif_add+0xa4>)
 800b452:	22fb      	movs	r2, #251	; 0xfb
 800b454:	4923      	ldr	r1, [pc, #140]	; (800b4e4 <netif_add+0xa8>)
 800b456:	4824      	ldr	r0, [pc, #144]	; (800b4e8 <netif_add+0xac>)
 800b458:	f00b fa30 	bl	80168bc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3320      	adds	r3, #32
 800b47a:	2204      	movs	r2, #4
 800b47c:	2100      	movs	r1, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f00b fa14 	bl	80168ac <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2203      	movs	r2, #3
 800b488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800b492:	4b16      	ldr	r3, [pc, #88]	; (800b4ec <netif_add+0xb0>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	b2d1      	uxtb	r1, r2
 800b49a:	4a14      	ldr	r2, [pc, #80]	; (800b4ec <netif_add+0xb0>)
 800b49c:	7011      	strb	r1, [r2, #0]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6a3a      	ldr	r2, [r7, #32]
 800b4a8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f81f 	bl	800b4f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	4798      	blx	r3
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <netif_add+0x8a>
    return NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e007      	b.n	800b4d6 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b4c6:	4b0a      	ldr	r3, [pc, #40]	; (800b4f0 <netif_add+0xb4>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b4ce:	4a08      	ldr	r2, [pc, #32]	; (800b4f0 <netif_add+0xb4>)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08018c28 	.word	0x08018c28
 800b4e4:	08018c5c 	.word	0x08018c5c
 800b4e8:	08018c74 	.word	0x08018c74
 800b4ec:	20008c3c 	.word	0x20008c3c
 800b4f0:	2000fab0 	.word	0x2000fab0

0800b4f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <netif_set_addr+0x1c>
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10c      	bne.n	800b52a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b510:	68b9      	ldr	r1, [r7, #8]
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 f81a 	bl	800b54c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f000 f862 	bl	800b5e4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f84a 	bl	800b5bc <netif_set_gw>
 800b528:	e00b      	b.n	800b542 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 f859 	bl	800b5e4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f841 	bl	800b5bc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 f805 	bl	800b54c <netif_set_ipaddr>
  }
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <netif_set_ipaddr+0x18>
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	e002      	b.n	800b56a <netif_set_ipaddr+0x1e>
 800b564:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <netif_set_ipaddr+0x6c>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3304      	adds	r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d01c      	beq.n	800b5b0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3304      	adds	r3, #4
 800b57a:	f107 020c 	add.w	r2, r7, #12
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f002 fb45 	bl	800dc10 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	3304      	adds	r3, #4
 800b58a:	f107 020c 	add.w	r2, r7, #12
 800b58e:	4611      	mov	r1, r2
 800b590:	4618      	mov	r0, r3
 800b592:	f006 fe45 	bl	8012220 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <netif_set_ipaddr+0x56>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	e000      	b.n	800b5a4 <netif_set_ipaddr+0x58>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f861 	bl	800b672 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	08025fb0 	.word	0x08025fb0

0800b5bc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <netif_set_gw+0x16>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	e000      	b.n	800b5d4 <netif_set_gw+0x18>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <netif_set_netmask+0x16>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	e000      	b.n	800b5fc <netif_set_netmask+0x18>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b614:	4a04      	ldr	r2, [pc, #16]	; (800b628 <netif_set_default+0x1c>)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	2000fab4 	.word	0x2000fab4

0800b62c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b63a:	f003 0301 	and.w	r3, r3, #1
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d113      	bne.n	800b66a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b648:	f043 0301 	orr.w	r3, r3, #1
 800b64c:	b2da      	uxtb	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b65a:	f003 0304 	and.w	r3, r3, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b662:	2103      	movs	r1, #3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f804 	bl	800b672 <netif_issue_reports>
    }
  }
}
 800b66a:	bf00      	nop
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b082      	sub	sp, #8
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b67e:	78fb      	ldrb	r3, [r7, #3]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	d011      	beq.n	800b6ac <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3304      	adds	r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00c      	beq.n	800b6ac <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f009 fba8 	bl	8014dfc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d012      	beq.n	800b6f0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6d0:	f023 0301 	bic.w	r3, r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f008 ff48 	bl	8014580 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b6fe:	f00b f879 	bl	80167f4 <sys_arch_protect>
 800b702:	6038      	str	r0, [r7, #0]
 800b704:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <pbuf_free_ooseq+0x4c>)
 800b706:	2200      	movs	r2, #0
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	6838      	ldr	r0, [r7, #0]
 800b70c:	f00b f880 	bl	8016810 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b710:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <pbuf_free_ooseq+0x50>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e00f      	b.n	800b738 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d008      	beq.n	800b732 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b724:	4618      	mov	r0, r3
 800b726:	f001 fee0 	bl	800d4ea <tcp_segs_free>
      pcb->ooseq = NULL;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800b730:	e005      	b.n	800b73e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	607b      	str	r3, [r7, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ec      	bne.n	800b718 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	2000fab8 	.word	0x2000fab8
 800b748:	2000fac0 	.word	0x2000fac0

0800b74c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b754:	f7ff ffd0 	bl	800b6f8 <pbuf_free_ooseq>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b766:	f00b f845 	bl	80167f4 <sys_arch_protect>
 800b76a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b76c:	4b10      	ldr	r3, [pc, #64]	; (800b7b0 <pbuf_pool_is_empty+0x50>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <pbuf_pool_is_empty+0x50>)
 800b774:	2201      	movs	r2, #1
 800b776:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f00b f849 	bl	8016810 <sys_arch_unprotect>

  if (!queued) {
 800b77e:	78fb      	ldrb	r3, [r7, #3]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d110      	bne.n	800b7a6 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b784:	2200      	movs	r2, #0
 800b786:	2100      	movs	r1, #0
 800b788:	480a      	ldr	r0, [pc, #40]	; (800b7b4 <pbuf_pool_is_empty+0x54>)
 800b78a:	f7fe faf9 	bl	8009d80 <tcpip_callback_with_block>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d008      	beq.n	800b7a6 <pbuf_pool_is_empty+0x46>
 800b794:	f00b f82e 	bl	80167f4 <sys_arch_protect>
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <pbuf_pool_is_empty+0x50>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f00b f835 	bl	8016810 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	2000fab8 	.word	0x2000fab8
 800b7b4:	0800b74d 	.word	0x0800b74d

0800b7b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b088      	sub	sp, #32
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	80bb      	strh	r3, [r7, #4]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	d81c      	bhi.n	800b80a <pbuf_alloc+0x52>
 800b7d0:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <pbuf_alloc+0x20>)
 800b7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d6:	bf00      	nop
 800b7d8:	0800b7ed 	.word	0x0800b7ed
 800b7dc:	0800b7f3 	.word	0x0800b7f3
 800b7e0:	0800b7f9 	.word	0x0800b7f9
 800b7e4:	0800b7ff 	.word	0x0800b7ff
 800b7e8:	0800b805 	.word	0x0800b805
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b7ec:	2336      	movs	r3, #54	; 0x36
 800b7ee:	82fb      	strh	r3, [r7, #22]
    break;
 800b7f0:	e014      	b.n	800b81c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b7f2:	2322      	movs	r3, #34	; 0x22
 800b7f4:	82fb      	strh	r3, [r7, #22]
    break;
 800b7f6:	e011      	b.n	800b81c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b7f8:	230e      	movs	r3, #14
 800b7fa:	82fb      	strh	r3, [r7, #22]
    break;
 800b7fc:	e00e      	b.n	800b81c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b7fe:	2300      	movs	r3, #0
 800b800:	82fb      	strh	r3, [r7, #22]
    break;
 800b802:	e00b      	b.n	800b81c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	82fb      	strh	r3, [r7, #22]
    break;
 800b808:	e008      	b.n	800b81c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800b80a:	4ba5      	ldr	r3, [pc, #660]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b80c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800b810:	49a4      	ldr	r1, [pc, #656]	; (800baa4 <pbuf_alloc+0x2ec>)
 800b812:	48a5      	ldr	r0, [pc, #660]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b814:	f00b f852 	bl	80168bc <iprintf>
    return NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	e15d      	b.n	800bad8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800b81c:	79bb      	ldrb	r3, [r7, #6]
 800b81e:	2b03      	cmp	r3, #3
 800b820:	f200 8134 	bhi.w	800ba8c <pbuf_alloc+0x2d4>
 800b824:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <pbuf_alloc+0x74>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b9cd 	.word	0x0800b9cd
 800b830:	0800ba59 	.word	0x0800ba59
 800b834:	0800ba59 	.word	0x0800ba59
 800b838:	0800b83d 	.word	0x0800b83d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b83c:	200c      	movs	r0, #12
 800b83e:	f7ff fd79 	bl	800b334 <memp_malloc>
 800b842:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d103      	bne.n	800b852 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800b84a:	f7ff ff89 	bl	800b760 <pbuf_pool_is_empty>
      return NULL;
 800b84e:	2300      	movs	r3, #0
 800b850:	e142      	b.n	800bad8 <pbuf_alloc+0x320>
    }
    p->type = type;
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	79ba      	ldrb	r2, [r7, #6]
 800b856:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b85e:	8afb      	ldrh	r3, [r7, #22]
 800b860:	3310      	adds	r3, #16
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	4413      	add	r3, r2
 800b866:	3303      	adds	r3, #3
 800b868:	f023 0303 	bic.w	r3, r3, #3
 800b86c:	461a      	mov	r2, r3
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f003 0303 	and.w	r3, r3, #3
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <pbuf_alloc+0xd4>
 800b87e:	4b88      	ldr	r3, [pc, #544]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b880:	f240 1229 	movw	r2, #297	; 0x129
 800b884:	4989      	ldr	r1, [pc, #548]	; (800baac <pbuf_alloc+0x2f4>)
 800b886:	4888      	ldr	r0, [pc, #544]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b888:	f00b f818 	bl	80168bc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	88ba      	ldrh	r2, [r7, #4]
 800b890:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b892:	8afb      	ldrh	r3, [r7, #22]
 800b894:	3303      	adds	r3, #3
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800b89e:	88bb      	ldrh	r3, [r7, #4]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	bf28      	it	cs
 800b8a4:	4613      	movcs	r3, r2
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	8952      	ldrh	r2, [r2, #10]
 800b8b4:	441a      	add	r2, r3
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d906      	bls.n	800b8ce <pbuf_alloc+0x116>
 800b8c0:	4b77      	ldr	r3, [pc, #476]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b8c2:	f44f 7298 	mov.w	r2, #304	; 0x130
 800b8c6:	497a      	ldr	r1, [pc, #488]	; (800bab0 <pbuf_alloc+0x2f8>)
 800b8c8:	4877      	ldr	r0, [pc, #476]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b8ca:	f00a fff7 	bl	80168bc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b8ce:	8afb      	ldrh	r3, [r7, #22]
 800b8d0:	3303      	adds	r3, #3
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b8da:	d106      	bne.n	800b8ea <pbuf_alloc+0x132>
 800b8dc:	4b70      	ldr	r3, [pc, #448]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b8de:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b8e2:	4974      	ldr	r1, [pc, #464]	; (800bab4 <pbuf_alloc+0x2fc>)
 800b8e4:	4870      	ldr	r0, [pc, #448]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b8e6:	f00a ffe9 	bl	80168bc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800b8f4:	88bb      	ldrh	r3, [r7, #4]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	8952      	ldrh	r2, [r2, #10]
 800b8fa:	1a9b      	subs	r3, r3, r2
 800b8fc:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b8fe:	e061      	b.n	800b9c4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b900:	200c      	movs	r0, #12
 800b902:	f7ff fd17 	bl	800b334 <memp_malloc>
 800b906:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800b90e:	f7ff ff27 	bl	800b760 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800b912:	69f8      	ldr	r0, [r7, #28]
 800b914:	f000 fac2 	bl	800be9c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	e0dd      	b.n	800bad8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	79ba      	ldrb	r2, [r7, #6]
 800b920:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b93a:	4293      	cmp	r3, r2
 800b93c:	dd06      	ble.n	800b94c <pbuf_alloc+0x194>
 800b93e:	4b58      	ldr	r3, [pc, #352]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b940:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800b944:	495c      	ldr	r1, [pc, #368]	; (800bab8 <pbuf_alloc+0x300>)
 800b946:	4858      	ldr	r0, [pc, #352]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b948:	f00a ffb8 	bl	80168bc <iprintf>
      q->tot_len = (u16_t)rem_len;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	b29a      	uxth	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	b29b      	uxth	r3, r3
 800b958:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b95c:	bf28      	it	cs
 800b95e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800b962:	b29a      	uxth	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f103 0210 	add.w	r2, r3, #16
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f003 0303 	and.w	r3, r3, #3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d006      	beq.n	800b98c <pbuf_alloc+0x1d4>
 800b97e:	4b48      	ldr	r3, [pc, #288]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b980:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800b984:	494d      	ldr	r1, [pc, #308]	; (800babc <pbuf_alloc+0x304>)
 800b986:	4848      	ldr	r0, [pc, #288]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b988:	f00a ff98 	bl	80168bc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	8952      	ldrh	r2, [r2, #10]
 800b994:	441a      	add	r2, r3
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d906      	bls.n	800b9ae <pbuf_alloc+0x1f6>
 800b9a0:	4b3f      	ldr	r3, [pc, #252]	; (800baa0 <pbuf_alloc+0x2e8>)
 800b9a2:	f240 1255 	movw	r2, #341	; 0x155
 800b9a6:	4942      	ldr	r1, [pc, #264]	; (800bab0 <pbuf_alloc+0x2f8>)
 800b9a8:	483f      	ldr	r0, [pc, #252]	; (800baa8 <pbuf_alloc+0x2f0>)
 800b9aa:	f00a ff87 	bl	80168bc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	895b      	ldrh	r3, [r3, #10]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1a9b      	subs	r3, r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dc9a      	bgt.n	800b900 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800b9ca:	e07e      	b.n	800baca <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800b9cc:	8afb      	ldrh	r3, [r7, #22]
 800b9ce:	3313      	adds	r3, #19
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f023 0303 	bic.w	r3, r3, #3
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	88bb      	ldrh	r3, [r7, #4]
 800b9da:	3303      	adds	r3, #3
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	f023 0303 	bic.w	r3, r3, #3
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4413      	add	r3, r2
 800b9e6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800b9e8:	897a      	ldrh	r2, [r7, #10]
 800b9ea:	88bb      	ldrh	r3, [r7, #4]
 800b9ec:	3303      	adds	r3, #3
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d201      	bcs.n	800b9fa <pbuf_alloc+0x242>
        return NULL;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e06e      	b.n	800bad8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800b9fa:	897b      	ldrh	r3, [r7, #10]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fb29 	bl	800b054 <mem_malloc>
 800ba02:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <pbuf_alloc+0x256>
      return NULL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e064      	b.n	800bad8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800ba0e:	8afb      	ldrh	r3, [r7, #22]
 800ba10:	3310      	adds	r3, #16
 800ba12:	69fa      	ldr	r2, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	3303      	adds	r3, #3
 800ba18:	f023 0303 	bic.w	r3, r3, #3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	88ba      	ldrh	r2, [r7, #4]
 800ba26:	811a      	strh	r2, [r3, #8]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	891a      	ldrh	r2, [r3, #8]
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	79ba      	ldrb	r2, [r7, #6]
 800ba3a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	f003 0303 	and.w	r3, r3, #3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d03f      	beq.n	800bac8 <pbuf_alloc+0x310>
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <pbuf_alloc+0x2e8>)
 800ba4a:	f240 1277 	movw	r2, #375	; 0x177
 800ba4e:	491c      	ldr	r1, [pc, #112]	; (800bac0 <pbuf_alloc+0x308>)
 800ba50:	4815      	ldr	r0, [pc, #84]	; (800baa8 <pbuf_alloc+0x2f0>)
 800ba52:	f00a ff33 	bl	80168bc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800ba56:	e037      	b.n	800bac8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ba58:	200b      	movs	r0, #11
 800ba5a:	f7ff fc6b 	bl	800b334 <memp_malloc>
 800ba5e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e036      	b.n	800bad8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	88ba      	ldrh	r2, [r7, #4]
 800ba74:	811a      	strh	r2, [r3, #8]
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	891a      	ldrh	r2, [r3, #8]
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	2200      	movs	r2, #0
 800ba82:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	79ba      	ldrb	r2, [r7, #6]
 800ba88:	731a      	strb	r2, [r3, #12]
    break;
 800ba8a:	e01e      	b.n	800baca <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ba8c:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <pbuf_alloc+0x2e8>)
 800ba8e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800ba92:	490c      	ldr	r1, [pc, #48]	; (800bac4 <pbuf_alloc+0x30c>)
 800ba94:	4804      	ldr	r0, [pc, #16]	; (800baa8 <pbuf_alloc+0x2f0>)
 800ba96:	f00a ff11 	bl	80168bc <iprintf>
    return NULL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e01c      	b.n	800bad8 <pbuf_alloc+0x320>
 800ba9e:	bf00      	nop
 800baa0:	08018c9c 	.word	0x08018c9c
 800baa4:	08018ccc 	.word	0x08018ccc
 800baa8:	08018ce8 	.word	0x08018ce8
 800baac:	08018d10 	.word	0x08018d10
 800bab0:	08018d40 	.word	0x08018d40
 800bab4:	08018d74 	.word	0x08018d74
 800bab8:	08018da8 	.word	0x08018da8
 800babc:	08018dbc 	.word	0x08018dbc
 800bac0:	08018dec 	.word	0x08018dec
 800bac4:	08018e18 	.word	0x08018e18
    break;
 800bac8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	2201      	movs	r2, #1
 800bace:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	2200      	movs	r2, #0
 800bad4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	4603      	mov	r3, r0
 800baea:	71fb      	strb	r3, [r7, #7]
 800baec:	460b      	mov	r3, r1
 800baee:	80bb      	strh	r3, [r7, #4]
 800baf0:	4613      	mov	r3, r2
 800baf2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d81b      	bhi.n	800bb32 <pbuf_alloced_custom+0x52>
 800bafa:	a201      	add	r2, pc, #4	; (adr r2, 800bb00 <pbuf_alloced_custom+0x20>)
 800bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb00:	0800bb15 	.word	0x0800bb15
 800bb04:	0800bb1b 	.word	0x0800bb1b
 800bb08:	0800bb21 	.word	0x0800bb21
 800bb0c:	0800bb27 	.word	0x0800bb27
 800bb10:	0800bb2d 	.word	0x0800bb2d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bb14:	2336      	movs	r3, #54	; 0x36
 800bb16:	81fb      	strh	r3, [r7, #14]
    break;
 800bb18:	e014      	b.n	800bb44 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bb1a:	2322      	movs	r3, #34	; 0x22
 800bb1c:	81fb      	strh	r3, [r7, #14]
    break;
 800bb1e:	e011      	b.n	800bb44 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bb20:	230e      	movs	r3, #14
 800bb22:	81fb      	strh	r3, [r7, #14]
    break;
 800bb24:	e00e      	b.n	800bb44 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bb26:	2300      	movs	r3, #0
 800bb28:	81fb      	strh	r3, [r7, #14]
    break;
 800bb2a:	e00b      	b.n	800bb44 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	81fb      	strh	r3, [r7, #14]
    break;
 800bb30:	e008      	b.n	800bb44 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800bb32:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <pbuf_alloced_custom+0xc8>)
 800bb34:	f240 12c5 	movw	r2, #453	; 0x1c5
 800bb38:	491c      	ldr	r1, [pc, #112]	; (800bbac <pbuf_alloced_custom+0xcc>)
 800bb3a:	481d      	ldr	r0, [pc, #116]	; (800bbb0 <pbuf_alloced_custom+0xd0>)
 800bb3c:	f00a febe 	bl	80168bc <iprintf>
    return NULL;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e02d      	b.n	800bba0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bb44:	89fb      	ldrh	r3, [r7, #14]
 800bb46:	3303      	adds	r3, #3
 800bb48:	f023 0203 	bic.w	r2, r3, #3
 800bb4c:	88bb      	ldrh	r3, [r7, #4]
 800bb4e:	441a      	add	r2, r3
 800bb50:	8bbb      	ldrh	r3, [r7, #28]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d901      	bls.n	800bb5a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e022      	b.n	800bba0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d008      	beq.n	800bb78 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bb66:	89fb      	ldrh	r3, [r7, #14]
 800bb68:	3303      	adds	r3, #3
 800bb6a:	f023 0303 	bic.w	r3, r3, #3
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	441a      	add	r2, r3
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	605a      	str	r2, [r3, #4]
 800bb76:	e002      	b.n	800bb7e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2202      	movs	r2, #2
 800bb82:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	88ba      	ldrh	r2, [r7, #4]
 800bb88:	811a      	strh	r2, [r3, #8]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	891a      	ldrh	r2, [r3, #8]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	79ba      	ldrb	r2, [r7, #6]
 800bb96:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800bb9e:	683b      	ldr	r3, [r7, #0]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	08018c9c 	.word	0x08018c9c
 800bbac:	08018e34 	.word	0x08018e34
 800bbb0:	08018ce8 	.word	0x08018ce8

0800bbb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <pbuf_realloc+0x20>
 800bbc6:	4b4b      	ldr	r3, [pc, #300]	; (800bcf4 <pbuf_realloc+0x140>)
 800bbc8:	f240 12f3 	movw	r2, #499	; 0x1f3
 800bbcc:	494a      	ldr	r1, [pc, #296]	; (800bcf8 <pbuf_realloc+0x144>)
 800bbce:	484b      	ldr	r0, [pc, #300]	; (800bcfc <pbuf_realloc+0x148>)
 800bbd0:	f00a fe74 	bl	80168bc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	7b1b      	ldrb	r3, [r3, #12]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d012      	beq.n	800bc02 <pbuf_realloc+0x4e>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7b1b      	ldrb	r3, [r3, #12]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d00e      	beq.n	800bc02 <pbuf_realloc+0x4e>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7b1b      	ldrb	r3, [r3, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00a      	beq.n	800bc02 <pbuf_realloc+0x4e>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7b1b      	ldrb	r3, [r3, #12]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d006      	beq.n	800bc02 <pbuf_realloc+0x4e>
 800bbf4:	4b3f      	ldr	r3, [pc, #252]	; (800bcf4 <pbuf_realloc+0x140>)
 800bbf6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800bbfa:	4941      	ldr	r1, [pc, #260]	; (800bd00 <pbuf_realloc+0x14c>)
 800bbfc:	483f      	ldr	r0, [pc, #252]	; (800bcfc <pbuf_realloc+0x148>)
 800bbfe:	f00a fe5d 	bl	80168bc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	891b      	ldrh	r3, [r3, #8]
 800bc06:	887a      	ldrh	r2, [r7, #2]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d26f      	bcs.n	800bcec <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800bc0c:	887b      	ldrh	r3, [r7, #2]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	8912      	ldrh	r2, [r2, #8]
 800bc12:	1a9b      	subs	r3, r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bc16:	887b      	ldrh	r3, [r7, #2]
 800bc18:	827b      	strh	r3, [r7, #18]
  q = p;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bc1e:	e025      	b.n	800bc6c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	895b      	ldrh	r3, [r3, #10]
 800bc24:	8a7a      	ldrh	r2, [r7, #18]
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc30:	4293      	cmp	r3, r2
 800bc32:	dd06      	ble.n	800bc42 <pbuf_realloc+0x8e>
 800bc34:	4b2f      	ldr	r3, [pc, #188]	; (800bcf4 <pbuf_realloc+0x140>)
 800bc36:	f240 220b 	movw	r2, #523	; 0x20b
 800bc3a:	4932      	ldr	r1, [pc, #200]	; (800bd04 <pbuf_realloc+0x150>)
 800bc3c:	482f      	ldr	r0, [pc, #188]	; (800bcfc <pbuf_realloc+0x148>)
 800bc3e:	f00a fe3d 	bl	80168bc <iprintf>
    q->tot_len += (u16_t)grow;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	891a      	ldrh	r2, [r3, #8]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	4413      	add	r3, r2
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <pbuf_realloc+0xb8>
 800bc5e:	4b25      	ldr	r3, [pc, #148]	; (800bcf4 <pbuf_realloc+0x140>)
 800bc60:	f240 220f 	movw	r2, #527	; 0x20f
 800bc64:	4928      	ldr	r1, [pc, #160]	; (800bd08 <pbuf_realloc+0x154>)
 800bc66:	4825      	ldr	r0, [pc, #148]	; (800bcfc <pbuf_realloc+0x148>)
 800bc68:	f00a fe28 	bl	80168bc <iprintf>
  while (rem_len > q->len) {
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	895b      	ldrh	r3, [r3, #10]
 800bc70:	8a7a      	ldrh	r2, [r7, #18]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d8d4      	bhi.n	800bc20 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	7b1b      	ldrb	r3, [r3, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d122      	bne.n	800bcc4 <pbuf_realloc+0x110>
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	895b      	ldrh	r3, [r3, #10]
 800bc82:	8a7a      	ldrh	r2, [r7, #18]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d01d      	beq.n	800bcc4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	7b5b      	ldrb	r3, [r3, #13]
 800bc8c:	f003 0302 	and.w	r3, r3, #2
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d117      	bne.n	800bcc4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	8a7b      	ldrh	r3, [r7, #18]
 800bca2:	4413      	add	r3, r2
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	4619      	mov	r1, r3
 800bca8:	6978      	ldr	r0, [r7, #20]
 800bcaa:	f7ff f8e9 	bl	800ae80 <mem_trim>
 800bcae:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <pbuf_realloc+0x110>
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <pbuf_realloc+0x140>)
 800bcb8:	f240 221d 	movw	r2, #541	; 0x21d
 800bcbc:	4913      	ldr	r1, [pc, #76]	; (800bd0c <pbuf_realloc+0x158>)
 800bcbe:	480f      	ldr	r0, [pc, #60]	; (800bcfc <pbuf_realloc+0x148>)
 800bcc0:	f00a fdfc 	bl	80168bc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	8a7a      	ldrh	r2, [r7, #18]
 800bcc8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	895a      	ldrh	r2, [r3, #10]
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f8dc 	bl	800be9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e000      	b.n	800bcee <pbuf_realloc+0x13a>
    return;
 800bcec:	bf00      	nop

}
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	08018c9c 	.word	0x08018c9c
 800bcf8:	08018e58 	.word	0x08018e58
 800bcfc:	08018ce8 	.word	0x08018ce8
 800bd00:	08018e70 	.word	0x08018e70
 800bd04:	08018e8c 	.word	0x08018e8c
 800bd08:	08018ea0 	.word	0x08018ea0
 800bd0c:	08018eb8 	.word	0x08018eb8

0800bd10 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	807b      	strh	r3, [r7, #2]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <pbuf_header_impl+0x24>
 800bd26:	4b46      	ldr	r3, [pc, #280]	; (800be40 <pbuf_header_impl+0x130>)
 800bd28:	f240 223f 	movw	r2, #575	; 0x23f
 800bd2c:	4945      	ldr	r1, [pc, #276]	; (800be44 <pbuf_header_impl+0x134>)
 800bd2e:	4846      	ldr	r0, [pc, #280]	; (800be48 <pbuf_header_impl+0x138>)
 800bd30:	f00a fdc4 	bl	80168bc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800bd34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <pbuf_header_impl+0x32>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <pbuf_header_impl+0x36>
    return 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e078      	b.n	800be38 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800bd46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da10      	bge.n	800bd70 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800bd4e:	887b      	ldrh	r3, [r7, #2]
 800bd50:	425b      	negs	r3, r3
 800bd52:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	895b      	ldrh	r3, [r3, #10]
 800bd58:	89fa      	ldrh	r2, [r7, #14]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d90a      	bls.n	800bd74 <pbuf_header_impl+0x64>
 800bd5e:	4b38      	ldr	r3, [pc, #224]	; (800be40 <pbuf_header_impl+0x130>)
 800bd60:	f240 2247 	movw	r2, #583	; 0x247
 800bd64:	4939      	ldr	r1, [pc, #228]	; (800be4c <pbuf_header_impl+0x13c>)
 800bd66:	4838      	ldr	r0, [pc, #224]	; (800be48 <pbuf_header_impl+0x138>)
 800bd68:	f00a fda8 	bl	80168bc <iprintf>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e063      	b.n	800be38 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800bd70:	887b      	ldrh	r3, [r7, #2]
 800bd72:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7b1b      	ldrb	r3, [r3, #12]
 800bd78:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800bd80:	89bb      	ldrh	r3, [r7, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <pbuf_header_impl+0x7c>
 800bd86:	89bb      	ldrh	r3, [r7, #12]
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d112      	bne.n	800bdb2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd94:	425b      	negs	r3, r3
 800bd96:	441a      	add	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3310      	adds	r3, #16
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d238      	bcs.n	800be1a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e042      	b.n	800be38 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800bdb2:	89bb      	ldrh	r3, [r7, #12]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d002      	beq.n	800bdbe <pbuf_header_impl+0xae>
 800bdb8:	89bb      	ldrh	r3, [r7, #12]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d124      	bne.n	800be08 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800bdbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da0d      	bge.n	800bde2 <pbuf_header_impl+0xd2>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	895b      	ldrh	r3, [r3, #10]
 800bdca:	89fa      	ldrh	r2, [r7, #14]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d808      	bhi.n	800bde2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdd8:	425b      	negs	r3, r3
 800bdda:	441a      	add	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]
 800bde0:	e011      	b.n	800be06 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800bde2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd0b      	ble.n	800be02 <pbuf_header_impl+0xf2>
 800bdea:	787b      	ldrb	r3, [r7, #1]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d008      	beq.n	800be02 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdf8:	425b      	negs	r3, r3
 800bdfa:	441a      	add	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	605a      	str	r2, [r3, #4]
 800be00:	e001      	b.n	800be06 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800be02:	2301      	movs	r3, #1
 800be04:	e018      	b.n	800be38 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800be06:	e008      	b.n	800be1a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800be08:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <pbuf_header_impl+0x130>)
 800be0a:	f240 2277 	movw	r2, #631	; 0x277
 800be0e:	4910      	ldr	r1, [pc, #64]	; (800be50 <pbuf_header_impl+0x140>)
 800be10:	480d      	ldr	r0, [pc, #52]	; (800be48 <pbuf_header_impl+0x138>)
 800be12:	f00a fd53 	bl	80168bc <iprintf>
    return 1;
 800be16:	2301      	movs	r3, #1
 800be18:	e00e      	b.n	800be38 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	895a      	ldrh	r2, [r3, #10]
 800be1e:	887b      	ldrh	r3, [r7, #2]
 800be20:	4413      	add	r3, r2
 800be22:	b29a      	uxth	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	891a      	ldrh	r2, [r3, #8]
 800be2c:	887b      	ldrh	r3, [r7, #2]
 800be2e:	4413      	add	r3, r2
 800be30:	b29a      	uxth	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	08018c9c 	.word	0x08018c9c
 800be44:	08018ed4 	.word	0x08018ed4
 800be48:	08018ce8 	.word	0x08018ce8
 800be4c:	08018ee0 	.word	0x08018ee0
 800be50:	08018f00 	.word	0x08018f00

0800be54 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800be60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be64:	2200      	movs	r2, #0
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff ff51 	bl	800bd10 <pbuf_header_impl>
 800be6e:	4603      	mov	r3, r0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	460b      	mov	r3, r1
 800be82:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800be84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be88:	2201      	movs	r2, #1
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff ff3f 	bl	800bd10 <pbuf_header_impl>
 800be92:	4603      	mov	r3, r0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <pbuf_free+0x22>
 800beb0:	4b41      	ldr	r3, [pc, #260]	; (800bfb8 <pbuf_free+0x11c>)
 800beb2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800beb6:	4941      	ldr	r1, [pc, #260]	; (800bfbc <pbuf_free+0x120>)
 800beb8:	4841      	ldr	r0, [pc, #260]	; (800bfc0 <pbuf_free+0x124>)
 800beba:	f00a fcff 	bl	80168bc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e076      	b.n	800bfb0 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	7b1b      	ldrb	r3, [r3, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d012      	beq.n	800bef0 <pbuf_free+0x54>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7b1b      	ldrb	r3, [r3, #12]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d00e      	beq.n	800bef0 <pbuf_free+0x54>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7b1b      	ldrb	r3, [r3, #12]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d00a      	beq.n	800bef0 <pbuf_free+0x54>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	7b1b      	ldrb	r3, [r3, #12]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d006      	beq.n	800bef0 <pbuf_free+0x54>
 800bee2:	4b35      	ldr	r3, [pc, #212]	; (800bfb8 <pbuf_free+0x11c>)
 800bee4:	f240 22de 	movw	r2, #734	; 0x2de
 800bee8:	4936      	ldr	r1, [pc, #216]	; (800bfc4 <pbuf_free+0x128>)
 800beea:	4835      	ldr	r0, [pc, #212]	; (800bfc0 <pbuf_free+0x124>)
 800beec:	f00a fce6 	bl	80168bc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bef4:	e058      	b.n	800bfa8 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bef6:	f00a fc7d 	bl	80167f4 <sys_arch_protect>
 800befa:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	89db      	ldrh	r3, [r3, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <pbuf_free+0x76>
 800bf04:	4b2c      	ldr	r3, [pc, #176]	; (800bfb8 <pbuf_free+0x11c>)
 800bf06:	f240 22eb 	movw	r2, #747	; 0x2eb
 800bf0a:	492f      	ldr	r1, [pc, #188]	; (800bfc8 <pbuf_free+0x12c>)
 800bf0c:	482c      	ldr	r0, [pc, #176]	; (800bfc0 <pbuf_free+0x124>)
 800bf0e:	f00a fcd5 	bl	80168bc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	89db      	ldrh	r3, [r3, #14]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	81da      	strh	r2, [r3, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	89db      	ldrh	r3, [r3, #14]
 800bf22:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800bf24:	69b8      	ldr	r0, [r7, #24]
 800bf26:	f00a fc73 	bl	8016810 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bf2a:	8afb      	ldrh	r3, [r7, #22]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d139      	bne.n	800bfa4 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	7b1b      	ldrb	r3, [r3, #12]
 800bf3a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7b5b      	ldrb	r3, [r3, #13]
 800bf40:	f003 0302 	and.w	r3, r3, #2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d011      	beq.n	800bf6c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d106      	bne.n	800bf62 <pbuf_free+0xc6>
 800bf54:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <pbuf_free+0x11c>)
 800bf56:	f240 22f9 	movw	r2, #761	; 0x2f9
 800bf5a:	491c      	ldr	r1, [pc, #112]	; (800bfcc <pbuf_free+0x130>)
 800bf5c:	4818      	ldr	r0, [pc, #96]	; (800bfc0 <pbuf_free+0x124>)
 800bf5e:	f00a fcad 	bl	80168bc <iprintf>
        pc->custom_free_function(p);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	4798      	blx	r3
 800bf6a:	e015      	b.n	800bf98 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800bf6c:	89fb      	ldrh	r3, [r7, #14]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d104      	bne.n	800bf7c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	200c      	movs	r0, #12
 800bf76:	f7ff fa2f 	bl	800b3d8 <memp_free>
 800bf7a:	e00d      	b.n	800bf98 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800bf7c:	89fb      	ldrh	r3, [r7, #14]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d002      	beq.n	800bf88 <pbuf_free+0xec>
 800bf82:	89fb      	ldrh	r3, [r7, #14]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d104      	bne.n	800bf92 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	200b      	movs	r0, #11
 800bf8c:	f7ff fa24 	bl	800b3d8 <memp_free>
 800bf90:	e002      	b.n	800bf98 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7fe ff06 	bl	800ada4 <mem_free>
        }
      }
      count++;
 800bf98:	7ffb      	ldrb	r3, [r7, #31]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	607b      	str	r3, [r7, #4]
 800bfa2:	e001      	b.n	800bfa8 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1a3      	bne.n	800bef6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bfae:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3720      	adds	r7, #32
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	08018c9c 	.word	0x08018c9c
 800bfbc:	08018ed4 	.word	0x08018ed4
 800bfc0:	08018ce8 	.word	0x08018ce8
 800bfc4:	08018f10 	.word	0x08018f10
 800bfc8:	08018f28 	.word	0x08018f28
 800bfcc:	08018f40 	.word	0x08018f40

0800bfd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bfdc:	e005      	b.n	800bfea <pbuf_clen+0x1a>
    ++len;
 800bfde:	89fb      	ldrh	r3, [r7, #14]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1f6      	bne.n	800bfde <pbuf_clen+0xe>
  }
  return len;
 800bff0:	89fb      	ldrh	r3, [r7, #14]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
	...

0800c000 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d016      	beq.n	800c03c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c00e:	f00a fbf1 	bl	80167f4 <sys_arch_protect>
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	89db      	ldrh	r3, [r3, #14]
 800c018:	3301      	adds	r3, #1
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	81da      	strh	r2, [r3, #14]
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f00a fbf5 	bl	8016810 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	89db      	ldrh	r3, [r3, #14]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d106      	bne.n	800c03c <pbuf_ref+0x3c>
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <pbuf_ref+0x44>)
 800c030:	f240 3239 	movw	r2, #825	; 0x339
 800c034:	4904      	ldr	r1, [pc, #16]	; (800c048 <pbuf_ref+0x48>)
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <pbuf_ref+0x4c>)
 800c038:	f00a fc40 	bl	80168bc <iprintf>
  }
}
 800c03c:	bf00      	nop
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	08018c9c 	.word	0x08018c9c
 800c048:	08018f64 	.word	0x08018f64
 800c04c:	08018ce8 	.word	0x08018ce8

0800c050 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <pbuf_cat+0x16>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d107      	bne.n	800c076 <pbuf_cat+0x26>
 800c066:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <pbuf_cat+0x98>)
 800c068:	f240 324d 	movw	r2, #845	; 0x34d
 800c06c:	491f      	ldr	r1, [pc, #124]	; (800c0ec <pbuf_cat+0x9c>)
 800c06e:	4820      	ldr	r0, [pc, #128]	; (800c0f0 <pbuf_cat+0xa0>)
 800c070:	f00a fc24 	bl	80168bc <iprintf>
 800c074:	e034      	b.n	800c0e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	e00a      	b.n	800c092 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	891a      	ldrh	r2, [r3, #8]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	891b      	ldrh	r3, [r3, #8]
 800c084:	4413      	add	r3, r2
 800c086:	b29a      	uxth	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	60fb      	str	r3, [r7, #12]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1f0      	bne.n	800c07c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	891a      	ldrh	r2, [r3, #8]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	895b      	ldrh	r3, [r3, #10]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d006      	beq.n	800c0b4 <pbuf_cat+0x64>
 800c0a6:	4b10      	ldr	r3, [pc, #64]	; (800c0e8 <pbuf_cat+0x98>)
 800c0a8:	f240 3255 	movw	r2, #853	; 0x355
 800c0ac:	4911      	ldr	r1, [pc, #68]	; (800c0f4 <pbuf_cat+0xa4>)
 800c0ae:	4810      	ldr	r0, [pc, #64]	; (800c0f0 <pbuf_cat+0xa0>)
 800c0b0:	f00a fc04 	bl	80168bc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d006      	beq.n	800c0ca <pbuf_cat+0x7a>
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <pbuf_cat+0x98>)
 800c0be:	f240 3256 	movw	r2, #854	; 0x356
 800c0c2:	490d      	ldr	r1, [pc, #52]	; (800c0f8 <pbuf_cat+0xa8>)
 800c0c4:	480a      	ldr	r0, [pc, #40]	; (800c0f0 <pbuf_cat+0xa0>)
 800c0c6:	f00a fbf9 	bl	80168bc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	891a      	ldrh	r2, [r3, #8]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	891b      	ldrh	r3, [r3, #8]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	08018c9c 	.word	0x08018c9c
 800c0ec:	08018f78 	.word	0x08018f78
 800c0f0:	08018ce8 	.word	0x08018ce8
 800c0f4:	08018fb0 	.word	0x08018fb0
 800c0f8:	08018fe0 	.word	0x08018fe0

0800c0fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ffa1 	bl	800c050 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c10e:	6838      	ldr	r0, [r7, #0]
 800c110:	f7ff ff76 	bl	800c000 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c126:	2300      	movs	r3, #0
 800c128:	81fb      	strh	r3, [r7, #14]
 800c12a:	2300      	movs	r3, #0
 800c12c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d008      	beq.n	800c146 <pbuf_copy+0x2a>
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <pbuf_copy+0x2a>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	891a      	ldrh	r2, [r3, #8]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	891b      	ldrh	r3, [r3, #8]
 800c142:	429a      	cmp	r2, r3
 800c144:	d209      	bcs.n	800c15a <pbuf_copy+0x3e>
 800c146:	4b54      	ldr	r3, [pc, #336]	; (800c298 <pbuf_copy+0x17c>)
 800c148:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c14c:	4953      	ldr	r1, [pc, #332]	; (800c29c <pbuf_copy+0x180>)
 800c14e:	4854      	ldr	r0, [pc, #336]	; (800c2a0 <pbuf_copy+0x184>)
 800c150:	f00a fbb4 	bl	80168bc <iprintf>
 800c154:	f06f 030f 	mvn.w	r3, #15
 800c158:	e099      	b.n	800c28e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	895b      	ldrh	r3, [r3, #10]
 800c15e:	461a      	mov	r2, r3
 800c160:	89fb      	ldrh	r3, [r7, #14]
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	895b      	ldrh	r3, [r3, #10]
 800c168:	4619      	mov	r1, r3
 800c16a:	89bb      	ldrh	r3, [r7, #12]
 800c16c:	1acb      	subs	r3, r1, r3
 800c16e:	429a      	cmp	r2, r3
 800c170:	db05      	blt.n	800c17e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	895a      	ldrh	r2, [r3, #10]
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	1ad3      	subs	r3, r2, r3
 800c17a:	817b      	strh	r3, [r7, #10]
 800c17c:	e004      	b.n	800c188 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	895a      	ldrh	r2, [r3, #10]
 800c182:	89fb      	ldrh	r3, [r7, #14]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	89fb      	ldrh	r3, [r7, #14]
 800c18e:	18d0      	adds	r0, r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	89bb      	ldrh	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	897a      	ldrh	r2, [r7, #10]
 800c19a:	4619      	mov	r1, r3
 800c19c:	f00a fb7b 	bl	8016896 <memcpy>
    offset_to += len;
 800c1a0:	89fa      	ldrh	r2, [r7, #14]
 800c1a2:	897b      	ldrh	r3, [r7, #10]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c1a8:	89ba      	ldrh	r2, [r7, #12]
 800c1aa:	897b      	ldrh	r3, [r7, #10]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	895b      	ldrh	r3, [r3, #10]
 800c1b4:	89fa      	ldrh	r2, [r7, #14]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d906      	bls.n	800c1c8 <pbuf_copy+0xac>
 800c1ba:	4b37      	ldr	r3, [pc, #220]	; (800c298 <pbuf_copy+0x17c>)
 800c1bc:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c1c0:	4938      	ldr	r1, [pc, #224]	; (800c2a4 <pbuf_copy+0x188>)
 800c1c2:	4837      	ldr	r0, [pc, #220]	; (800c2a0 <pbuf_copy+0x184>)
 800c1c4:	f00a fb7a 	bl	80168bc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	895b      	ldrh	r3, [r3, #10]
 800c1cc:	89ba      	ldrh	r2, [r7, #12]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d906      	bls.n	800c1e0 <pbuf_copy+0xc4>
 800c1d2:	4b31      	ldr	r3, [pc, #196]	; (800c298 <pbuf_copy+0x17c>)
 800c1d4:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c1d8:	4933      	ldr	r1, [pc, #204]	; (800c2a8 <pbuf_copy+0x18c>)
 800c1da:	4831      	ldr	r0, [pc, #196]	; (800c2a0 <pbuf_copy+0x184>)
 800c1dc:	f00a fb6e 	bl	80168bc <iprintf>
    if (offset_from >= p_from->len) {
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	895b      	ldrh	r3, [r3, #10]
 800c1e4:	89ba      	ldrh	r2, [r7, #12]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d304      	bcc.n	800c1f4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	895b      	ldrh	r3, [r3, #10]
 800c1f8:	89fa      	ldrh	r2, [r7, #14]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d114      	bne.n	800c228 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10c      	bne.n	800c228 <pbuf_copy+0x10c>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <pbuf_copy+0x10c>
 800c214:	4b20      	ldr	r3, [pc, #128]	; (800c298 <pbuf_copy+0x17c>)
 800c216:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c21a:	4924      	ldr	r1, [pc, #144]	; (800c2ac <pbuf_copy+0x190>)
 800c21c:	4820      	ldr	r0, [pc, #128]	; (800c2a0 <pbuf_copy+0x184>)
 800c21e:	f00a fb4d 	bl	80168bc <iprintf>
 800c222:	f06f 030f 	mvn.w	r3, #15
 800c226:	e032      	b.n	800c28e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d013      	beq.n	800c256 <pbuf_copy+0x13a>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	895a      	ldrh	r2, [r3, #10]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	891b      	ldrh	r3, [r3, #8]
 800c236:	429a      	cmp	r2, r3
 800c238:	d10d      	bne.n	800c256 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <pbuf_copy+0x13a>
 800c242:	4b15      	ldr	r3, [pc, #84]	; (800c298 <pbuf_copy+0x17c>)
 800c244:	f240 32de 	movw	r2, #990	; 0x3de
 800c248:	4919      	ldr	r1, [pc, #100]	; (800c2b0 <pbuf_copy+0x194>)
 800c24a:	4815      	ldr	r0, [pc, #84]	; (800c2a0 <pbuf_copy+0x184>)
 800c24c:	f00a fb36 	bl	80168bc <iprintf>
 800c250:	f06f 0305 	mvn.w	r3, #5
 800c254:	e01b      	b.n	800c28e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d013      	beq.n	800c284 <pbuf_copy+0x168>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	895a      	ldrh	r2, [r3, #10]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	891b      	ldrh	r3, [r3, #8]
 800c264:	429a      	cmp	r2, r3
 800c266:	d10d      	bne.n	800c284 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d009      	beq.n	800c284 <pbuf_copy+0x168>
 800c270:	4b09      	ldr	r3, [pc, #36]	; (800c298 <pbuf_copy+0x17c>)
 800c272:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c276:	490e      	ldr	r1, [pc, #56]	; (800c2b0 <pbuf_copy+0x194>)
 800c278:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <pbuf_copy+0x184>)
 800c27a:	f00a fb1f 	bl	80168bc <iprintf>
 800c27e:	f06f 0305 	mvn.w	r3, #5
 800c282:	e004      	b.n	800c28e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f47f af67 	bne.w	800c15a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	08018c9c 	.word	0x08018c9c
 800c29c:	0801902c 	.word	0x0801902c
 800c2a0:	08018ce8 	.word	0x08018ce8
 800c2a4:	0801905c 	.word	0x0801905c
 800c2a8:	08019074 	.word	0x08019074
 800c2ac:	08019090 	.word	0x08019090
 800c2b0:	080190a0 	.word	0x080190a0

0800c2b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	80fb      	strh	r3, [r7, #6]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d108      	bne.n	800c2e6 <pbuf_copy_partial+0x32>
 800c2d4:	4b30      	ldr	r3, [pc, #192]	; (800c398 <pbuf_copy_partial+0xe4>)
 800c2d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c2da:	4930      	ldr	r1, [pc, #192]	; (800c39c <pbuf_copy_partial+0xe8>)
 800c2dc:	4830      	ldr	r0, [pc, #192]	; (800c3a0 <pbuf_copy_partial+0xec>)
 800c2de:	f00a faed 	bl	80168bc <iprintf>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e054      	b.n	800c390 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d108      	bne.n	800c2fe <pbuf_copy_partial+0x4a>
 800c2ec:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <pbuf_copy_partial+0xe4>)
 800c2ee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c2f2:	492c      	ldr	r1, [pc, #176]	; (800c3a4 <pbuf_copy_partial+0xf0>)
 800c2f4:	482a      	ldr	r0, [pc, #168]	; (800c3a0 <pbuf_copy_partial+0xec>)
 800c2f6:	f00a fae1 	bl	80168bc <iprintf>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e048      	b.n	800c390 <pbuf_copy_partial+0xdc>

  left = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <pbuf_copy_partial+0x5a>
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <pbuf_copy_partial+0x5e>
    return 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	e03e      	b.n	800c390 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	61fb      	str	r3, [r7, #28]
 800c316:	e034      	b.n	800c382 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c318:	88bb      	ldrh	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00a      	beq.n	800c334 <pbuf_copy_partial+0x80>
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	895b      	ldrh	r3, [r3, #10]
 800c322:	88ba      	ldrh	r2, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	d305      	bcc.n	800c334 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	895b      	ldrh	r3, [r3, #10]
 800c32c:	88ba      	ldrh	r2, [r7, #4]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	80bb      	strh	r3, [r7, #4]
 800c332:	e023      	b.n	800c37c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c334:	69fb      	ldr	r3, [r7, #28]
 800c336:	895a      	ldrh	r2, [r3, #10]
 800c338:	88bb      	ldrh	r3, [r7, #4]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c33e:	8b3a      	ldrh	r2, [r7, #24]
 800c340:	88fb      	ldrh	r3, [r7, #6]
 800c342:	429a      	cmp	r2, r3
 800c344:	d901      	bls.n	800c34a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c346:	88fb      	ldrh	r3, [r7, #6]
 800c348:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c34a:	8b7b      	ldrh	r3, [r7, #26]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	18d0      	adds	r0, r2, r3
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	88bb      	ldrh	r3, [r7, #4]
 800c356:	4413      	add	r3, r2
 800c358:	8b3a      	ldrh	r2, [r7, #24]
 800c35a:	4619      	mov	r1, r3
 800c35c:	f00a fa9b 	bl	8016896 <memcpy>
      copied_total += buf_copy_len;
 800c360:	8afa      	ldrh	r2, [r7, #22]
 800c362:	8b3b      	ldrh	r3, [r7, #24]
 800c364:	4413      	add	r3, r2
 800c366:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c368:	8b7a      	ldrh	r2, [r7, #26]
 800c36a:	8b3b      	ldrh	r3, [r7, #24]
 800c36c:	4413      	add	r3, r2
 800c36e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	8b3b      	ldrh	r3, [r7, #24]
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	61fb      	str	r3, [r7, #28]
 800c382:	88fb      	ldrh	r3, [r7, #6]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <pbuf_copy_partial+0xda>
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1c4      	bne.n	800c318 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c38e:	8afb      	ldrh	r3, [r7, #22]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3720      	adds	r7, #32
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	08018c9c 	.word	0x08018c9c
 800c39c:	080190cc 	.word	0x080190cc
 800c3a0:	08018ce8 	.word	0x08018ce8
 800c3a4:	080190ec 	.word	0x080190ec

0800c3a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c3ac:	bf00      	nop
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c3bc:	f000 ffc8 	bl	800d350 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <tcp_tmr+0x28>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <tcp_tmr+0x28>)
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	4b04      	ldr	r3, [pc, #16]	; (800c3e0 <tcp_tmr+0x28>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 0301 	and.w	r3, r3, #1
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c3d8:	f000 fcfa 	bl	800cdd0 <tcp_slowtmr>
  }
}
 800c3dc:	bf00      	nop
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20008c3d 	.word	0x20008c3d

0800c3e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	e00a      	b.n	800c40a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d102      	bne.n	800c404 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1f1      	bne.n	800c3f4 <tcp_remove_listener+0x10>
      }
   }
}
 800c410:	bf00      	nop
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d105      	bne.n	800c436 <tcp_listen_closed+0x1a>
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <tcp_listen_closed+0x5c>)
 800c42c:	22c0      	movs	r2, #192	; 0xc0
 800c42e:	4913      	ldr	r1, [pc, #76]	; (800c47c <tcp_listen_closed+0x60>)
 800c430:	4813      	ldr	r0, [pc, #76]	; (800c480 <tcp_listen_closed+0x64>)
 800c432:	f00a fa43 	bl	80168bc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	7d1b      	ldrb	r3, [r3, #20]
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d005      	beq.n	800c44a <tcp_listen_closed+0x2e>
 800c43e:	4b0e      	ldr	r3, [pc, #56]	; (800c478 <tcp_listen_closed+0x5c>)
 800c440:	22c1      	movs	r2, #193	; 0xc1
 800c442:	4910      	ldr	r1, [pc, #64]	; (800c484 <tcp_listen_closed+0x68>)
 800c444:	480e      	ldr	r0, [pc, #56]	; (800c480 <tcp_listen_closed+0x64>)
 800c446:	f00a fa39 	bl	80168bc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c44a:	2301      	movs	r3, #1
 800c44c:	60fb      	str	r3, [r7, #12]
 800c44e:	e00b      	b.n	800c468 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c450:	4a0d      	ldr	r2, [pc, #52]	; (800c488 <tcp_listen_closed+0x6c>)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	6879      	ldr	r1, [r7, #4]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff ffc1 	bl	800c3e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d9f0      	bls.n	800c450 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c46e:	bf00      	nop
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	08019220 	.word	0x08019220
 800c47c:	08019250 	.word	0x08019250
 800c480:	0801925c 	.word	0x0801925c
 800c484:	08019284 	.word	0x08019284
 800c488:	08025f78 	.word	0x08025f78

0800c48c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c48c:	b5b0      	push	{r4, r5, r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af02      	add	r7, sp, #8
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d075      	beq.n	800c58a <tcp_close_shutdown+0xfe>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7d1b      	ldrb	r3, [r3, #20]
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d003      	beq.n	800c4ae <tcp_close_shutdown+0x22>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7d1b      	ldrb	r3, [r3, #20]
 800c4aa:	2b07      	cmp	r3, #7
 800c4ac:	d16d      	bne.n	800c58a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d104      	bne.n	800c4c0 <tcp_close_shutdown+0x34>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4be:	d064      	beq.n	800c58a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7e9b      	ldrb	r3, [r3, #26]
 800c4c4:	f003 0310 	and.w	r3, r3, #16
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <tcp_close_shutdown+0x4e>
 800c4cc:	4b59      	ldr	r3, [pc, #356]	; (800c634 <tcp_close_shutdown+0x1a8>)
 800c4ce:	f240 120f 	movw	r2, #271	; 0x10f
 800c4d2:	4959      	ldr	r1, [pc, #356]	; (800c638 <tcp_close_shutdown+0x1ac>)
 800c4d4:	4859      	ldr	r0, [pc, #356]	; (800c63c <tcp_close_shutdown+0x1b0>)
 800c4d6:	f00a f9f1 	bl	80168bc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c4e2:	687c      	ldr	r4, [r7, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	1d1d      	adds	r5, r3, #4
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	8adb      	ldrh	r3, [r3, #22]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	8b12      	ldrh	r2, [r2, #24]
 800c4f0:	9201      	str	r2, [sp, #4]
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	4622      	mov	r2, r4
 800c4f8:	f004 ff3a 	bl	8011370 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f001 fa6b 	bl	800d9d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c502:	4b4f      	ldr	r3, [pc, #316]	; (800c640 <tcp_close_shutdown+0x1b4>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d105      	bne.n	800c518 <tcp_close_shutdown+0x8c>
 800c50c:	4b4c      	ldr	r3, [pc, #304]	; (800c640 <tcp_close_shutdown+0x1b4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	4a4b      	ldr	r2, [pc, #300]	; (800c640 <tcp_close_shutdown+0x1b4>)
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	e013      	b.n	800c540 <tcp_close_shutdown+0xb4>
 800c518:	4b49      	ldr	r3, [pc, #292]	; (800c640 <tcp_close_shutdown+0x1b4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	e00c      	b.n	800c53a <tcp_close_shutdown+0xae>
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	429a      	cmp	r2, r3
 800c528:	d104      	bne.n	800c534 <tcp_close_shutdown+0xa8>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68da      	ldr	r2, [r3, #12]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	60da      	str	r2, [r3, #12]
 800c532:	e005      	b.n	800c540 <tcp_close_shutdown+0xb4>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ef      	bne.n	800c520 <tcp_close_shutdown+0x94>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	60da      	str	r2, [r3, #12]
 800c546:	4b3f      	ldr	r3, [pc, #252]	; (800c644 <tcp_close_shutdown+0x1b8>)
 800c548:	2201      	movs	r2, #1
 800c54a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	7d1b      	ldrb	r3, [r3, #20]
 800c550:	2b04      	cmp	r3, #4
 800c552:	d10c      	bne.n	800c56e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	220a      	movs	r2, #10
 800c558:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c55a:	4b3b      	ldr	r3, [pc, #236]	; (800c648 <tcp_close_shutdown+0x1bc>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]
 800c562:	4a39      	ldr	r2, [pc, #228]	; (800c648 <tcp_close_shutdown+0x1bc>)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	f005 f952 	bl	8011810 <tcp_timer_needed>
 800c56c:	e00b      	b.n	800c586 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800c56e:	4b37      	ldr	r3, [pc, #220]	; (800c64c <tcp_close_shutdown+0x1c0>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	429a      	cmp	r2, r3
 800c576:	d102      	bne.n	800c57e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800c578:	f003 fd92 	bl	80100a0 <tcp_trigger_input_pcb_close>
 800c57c:	e003      	b.n	800c586 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	2001      	movs	r0, #1
 800c582:	f7fe ff29 	bl	800b3d8 <memp_free>
        }
      }
      return ERR_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	e050      	b.n	800c62c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7d1b      	ldrb	r3, [r3, #20]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d02e      	beq.n	800c5f0 <tcp_close_shutdown+0x164>
 800c592:	2b02      	cmp	r3, #2
 800c594:	d038      	beq.n	800c608 <tcp_close_shutdown+0x17c>
 800c596:	2b00      	cmp	r3, #0
 800c598:	d142      	bne.n	800c620 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8adb      	ldrh	r3, [r3, #22]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d021      	beq.n	800c5e6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5a2:	4b2b      	ldr	r3, [pc, #172]	; (800c650 <tcp_close_shutdown+0x1c4>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d105      	bne.n	800c5b8 <tcp_close_shutdown+0x12c>
 800c5ac:	4b28      	ldr	r3, [pc, #160]	; (800c650 <tcp_close_shutdown+0x1c4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	4a27      	ldr	r2, [pc, #156]	; (800c650 <tcp_close_shutdown+0x1c4>)
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	e013      	b.n	800c5e0 <tcp_close_shutdown+0x154>
 800c5b8:	4b25      	ldr	r3, [pc, #148]	; (800c650 <tcp_close_shutdown+0x1c4>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	60bb      	str	r3, [r7, #8]
 800c5be:	e00c      	b.n	800c5da <tcp_close_shutdown+0x14e>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d104      	bne.n	800c5d4 <tcp_close_shutdown+0x148>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	68da      	ldr	r2, [r3, #12]
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	60da      	str	r2, [r3, #12]
 800c5d2:	e005      	b.n	800c5e0 <tcp_close_shutdown+0x154>
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	60bb      	str	r3, [r7, #8]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1ef      	bne.n	800c5c0 <tcp_close_shutdown+0x134>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	f7fe fef5 	bl	800b3d8 <memp_free>
    break;
 800c5ee:	e01c      	b.n	800c62a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7ff ff13 	bl	800c41c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c5f6:	6879      	ldr	r1, [r7, #4]
 800c5f8:	4816      	ldr	r0, [pc, #88]	; (800c654 <tcp_close_shutdown+0x1c8>)
 800c5fa:	f001 fa2f 	bl	800da5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	2002      	movs	r0, #2
 800c602:	f7fe fee9 	bl	800b3d8 <memp_free>
    break;
 800c606:	e010      	b.n	800c62a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800c608:	6879      	ldr	r1, [r7, #4]
 800c60a:	480d      	ldr	r0, [pc, #52]	; (800c640 <tcp_close_shutdown+0x1b4>)
 800c60c:	f001 fa26 	bl	800da5c <tcp_pcb_remove>
 800c610:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <tcp_close_shutdown+0x1b8>)
 800c612:	2201      	movs	r2, #1
 800c614:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800c616:	6879      	ldr	r1, [r7, #4]
 800c618:	2001      	movs	r0, #1
 800c61a:	f7fe fedd 	bl	800b3d8 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800c61e:	e004      	b.n	800c62a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f819 	bl	800c658 <tcp_close_shutdown_fin>
 800c626:	4603      	mov	r3, r0
 800c628:	e000      	b.n	800c62c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bdb0      	pop	{r4, r5, r7, pc}
 800c634:	08019220 	.word	0x08019220
 800c638:	0801929c 	.word	0x0801929c
 800c63c:	0801925c 	.word	0x0801925c
 800c640:	2000fac0 	.word	0x2000fac0
 800c644:	2000fabc 	.word	0x2000fabc
 800c648:	2000fad0 	.word	0x2000fad0
 800c64c:	2000fad4 	.word	0x2000fad4
 800c650:	2000facc 	.word	0x2000facc
 800c654:	2000fac8 	.word	0x2000fac8

0800c658 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d106      	bne.n	800c674 <tcp_close_shutdown_fin+0x1c>
 800c666:	4b2c      	ldr	r3, [pc, #176]	; (800c718 <tcp_close_shutdown_fin+0xc0>)
 800c668:	f240 124d 	movw	r2, #333	; 0x14d
 800c66c:	492b      	ldr	r1, [pc, #172]	; (800c71c <tcp_close_shutdown_fin+0xc4>)
 800c66e:	482c      	ldr	r0, [pc, #176]	; (800c720 <tcp_close_shutdown_fin+0xc8>)
 800c670:	f00a f924 	bl	80168bc <iprintf>

  switch (pcb->state) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d010      	beq.n	800c69e <tcp_close_shutdown_fin+0x46>
 800c67c:	2b07      	cmp	r3, #7
 800c67e:	d01b      	beq.n	800c6b8 <tcp_close_shutdown_fin+0x60>
 800c680:	2b03      	cmp	r3, #3
 800c682:	d126      	bne.n	800c6d2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f003 fd97 	bl	80101b8 <tcp_send_fin>
 800c68a:	4603      	mov	r3, r0
 800c68c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d11f      	bne.n	800c6d6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2205      	movs	r2, #5
 800c69a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c69c:	e01b      	b.n	800c6d6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f003 fd8a 	bl	80101b8 <tcp_send_fin>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d114      	bne.n	800c6da <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2205      	movs	r2, #5
 800c6b4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c6b6:	e010      	b.n	800c6da <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f003 fd7d 	bl	80101b8 <tcp_send_fin>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d109      	bne.n	800c6de <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2209      	movs	r2, #9
 800c6ce:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c6d0:	e005      	b.n	800c6de <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e01c      	b.n	800c710 <tcp_close_shutdown_fin+0xb8>
    break;
 800c6d6:	bf00      	nop
 800c6d8:	e002      	b.n	800c6e0 <tcp_close_shutdown_fin+0x88>
    break;
 800c6da:	bf00      	nop
 800c6dc:	e000      	b.n	800c6e0 <tcp_close_shutdown_fin+0x88>
    break;
 800c6de:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d103      	bne.n	800c6f0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f004 fbb7 	bl	8010e5c <tcp_output>
 800c6ee:	e00d      	b.n	800c70c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c6f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f8:	d108      	bne.n	800c70c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	7e9b      	ldrb	r3, [r3, #26]
 800c6fe:	f043 0308 	orr.w	r3, r3, #8
 800c702:	b2da      	uxtb	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	e001      	b.n	800c710 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	08019220 	.word	0x08019220
 800c71c:	08019250 	.word	0x08019250
 800c720:	0801925c 	.word	0x0801925c

0800c724 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7d1b      	ldrb	r3, [r3, #20]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d006      	beq.n	800c742 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7e9b      	ldrb	r3, [r3, #26]
 800c738:	f043 0310 	orr.w	r3, r3, #16
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c742:	2101      	movs	r1, #1
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff fea1 	bl	800c48c <tcp_close_shutdown>
 800c74a:	4603      	mov	r3, r0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	7d1b      	ldrb	r3, [r3, #20]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d102      	bne.n	800c76e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800c768:	f06f 030a 	mvn.w	r3, #10
 800c76c:	e035      	b.n	800c7da <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01b      	beq.n	800c7ac <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	7e9b      	ldrb	r3, [r3, #26]
 800c778:	f043 0310 	orr.w	r3, r3, #16
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d005      	beq.n	800c794 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c788:	2101      	movs	r1, #1
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7ff fe7e 	bl	800c48c <tcp_close_shutdown>
 800c790:	4603      	mov	r3, r0
 800c792:	e022      	b.n	800c7da <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d007      	beq.n	800c7ac <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7ff fb7b 	bl	800be9c <pbuf_free>
      pcb->refused_data = NULL;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d012      	beq.n	800c7d8 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	7d1b      	ldrb	r3, [r3, #20]
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	db0b      	blt.n	800c7d2 <tcp_shutdown+0x7e>
 800c7ba:	2b04      	cmp	r3, #4
 800c7bc:	dd01      	ble.n	800c7c2 <tcp_shutdown+0x6e>
 800c7be:	2b07      	cmp	r3, #7
 800c7c0:	d107      	bne.n	800c7d2 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff fe5f 	bl	800c48c <tcp_close_shutdown>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	e003      	b.n	800c7da <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800c7d2:	f06f 030a 	mvn.w	r3, #10
 800c7d6:	e000      	b.n	800c7da <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08c      	sub	sp, #48	; 0x30
 800c7e8:	af02      	add	r7, sp, #8
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	7d1b      	ldrb	r3, [r3, #20]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d106      	bne.n	800c804 <tcp_abandon+0x20>
 800c7f6:	4b4d      	ldr	r3, [pc, #308]	; (800c92c <tcp_abandon+0x148>)
 800c7f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c7fc:	494c      	ldr	r1, [pc, #304]	; (800c930 <tcp_abandon+0x14c>)
 800c7fe:	484d      	ldr	r0, [pc, #308]	; (800c934 <tcp_abandon+0x150>)
 800c800:	f00a f85c 	bl	80168bc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7d1b      	ldrb	r3, [r3, #20]
 800c808:	2b0a      	cmp	r3, #10
 800c80a:	d108      	bne.n	800c81e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c80c:	6879      	ldr	r1, [r7, #4]
 800c80e:	484a      	ldr	r0, [pc, #296]	; (800c938 <tcp_abandon+0x154>)
 800c810:	f001 f924 	bl	800da5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	2001      	movs	r0, #1
 800c818:	f7fe fdde 	bl	800b3d8 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800c81c:	e081      	b.n	800c922 <tcp_abandon+0x13e>
    int send_rst = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c82a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c838:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	7d1b      	ldrb	r3, [r3, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d126      	bne.n	800c896 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8adb      	ldrh	r3, [r3, #22]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d02e      	beq.n	800c8ae <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c850:	4b3a      	ldr	r3, [pc, #232]	; (800c93c <tcp_abandon+0x158>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	429a      	cmp	r2, r3
 800c858:	d105      	bne.n	800c866 <tcp_abandon+0x82>
 800c85a:	4b38      	ldr	r3, [pc, #224]	; (800c93c <tcp_abandon+0x158>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	4a36      	ldr	r2, [pc, #216]	; (800c93c <tcp_abandon+0x158>)
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	e013      	b.n	800c88e <tcp_abandon+0xaa>
 800c866:	4b35      	ldr	r3, [pc, #212]	; (800c93c <tcp_abandon+0x158>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	61fb      	str	r3, [r7, #28]
 800c86c:	e00c      	b.n	800c888 <tcp_abandon+0xa4>
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	429a      	cmp	r2, r3
 800c876:	d104      	bne.n	800c882 <tcp_abandon+0x9e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68da      	ldr	r2, [r3, #12]
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	60da      	str	r2, [r3, #12]
 800c880:	e005      	b.n	800c88e <tcp_abandon+0xaa>
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1ef      	bne.n	800c86e <tcp_abandon+0x8a>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	60da      	str	r2, [r3, #12]
 800c894:	e00b      	b.n	800c8ae <tcp_abandon+0xca>
      send_rst = reset;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8adb      	ldrh	r3, [r3, #22]
 800c89e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c8a0:	6879      	ldr	r1, [r7, #4]
 800c8a2:	4827      	ldr	r0, [pc, #156]	; (800c940 <tcp_abandon+0x15c>)
 800c8a4:	f001 f8da 	bl	800da5c <tcp_pcb_remove>
 800c8a8:	4b26      	ldr	r3, [pc, #152]	; (800c944 <tcp_abandon+0x160>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d004      	beq.n	800c8c0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 fe15 	bl	800d4ea <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fe0c 	bl	800d4ea <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d004      	beq.n	800c8e4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 fe03 	bl	800d4ea <tcp_segs_free>
    if (send_rst) {
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00c      	beq.n	800c904 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	1d19      	adds	r1, r3, #4
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	8b1b      	ldrh	r3, [r3, #24]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	6979      	ldr	r1, [r7, #20]
 800c8fe:	69b8      	ldr	r0, [r7, #24]
 800c900:	f004 fd36 	bl	8011370 <tcp_rst>
    last_state = pcb->state;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7d1b      	ldrb	r3, [r3, #20]
 800c908:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800c90a:	6879      	ldr	r1, [r7, #4]
 800c90c:	2001      	movs	r0, #1
 800c90e:	f7fe fd63 	bl	800b3d8 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d004      	beq.n	800c922 <tcp_abandon+0x13e>
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f06f 010c 	mvn.w	r1, #12
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	4798      	blx	r3
}
 800c922:	bf00      	nop
 800c924:	3728      	adds	r7, #40	; 0x28
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	08019220 	.word	0x08019220
 800c930:	080192b8 	.word	0x080192b8
 800c934:	0801925c 	.word	0x0801925c
 800c938:	2000fad0 	.word	0x2000fad0
 800c93c:	2000facc 	.word	0x2000facc
 800c940:	2000fac0 	.word	0x2000fac0
 800c944:	2000fabc 	.word	0x2000fabc

0800c948 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff ff46 	bl	800c7e4 <tcp_abandon>
}
 800c958:	bf00      	nop
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b088      	sub	sp, #32
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4613      	mov	r3, r2
 800c96c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c96e:	2304      	movs	r3, #4
 800c970:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d101      	bne.n	800c97c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c978:	4b3c      	ldr	r3, [pc, #240]	; (800ca6c <tcp_bind+0x10c>)
 800c97a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <tcp_bind+0x28>
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d102      	bne.n	800c98e <tcp_bind+0x2e>
    return ERR_VAL;
 800c988:	f06f 0305 	mvn.w	r3, #5
 800c98c:	e06a      	b.n	800ca64 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	7d1b      	ldrb	r3, [r3, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d009      	beq.n	800c9aa <tcp_bind+0x4a>
 800c996:	4b36      	ldr	r3, [pc, #216]	; (800ca70 <tcp_bind+0x110>)
 800c998:	f44f 7211 	mov.w	r2, #580	; 0x244
 800c99c:	4935      	ldr	r1, [pc, #212]	; (800ca74 <tcp_bind+0x114>)
 800c99e:	4836      	ldr	r0, [pc, #216]	; (800ca78 <tcp_bind+0x118>)
 800c9a0:	f009 ff8c 	bl	80168bc <iprintf>
 800c9a4:	f06f 0305 	mvn.w	r3, #5
 800c9a8:	e05c      	b.n	800ca64 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d109      	bne.n	800c9c4 <tcp_bind+0x64>
    port = tcp_new_port();
 800c9b0:	f000 f9ca 	bl	800cd48 <tcp_new_port>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c9b8:	88fb      	ldrh	r3, [r7, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d135      	bne.n	800ca2a <tcp_bind+0xca>
      return ERR_BUF;
 800c9be:	f06f 0301 	mvn.w	r3, #1
 800c9c2:	e04f      	b.n	800ca64 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	61fb      	str	r3, [r7, #28]
 800c9c8:	e02b      	b.n	800ca22 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c9ca:	4a2c      	ldr	r2, [pc, #176]	; (800ca7c <tcp_bind+0x11c>)
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	61bb      	str	r3, [r7, #24]
 800c9d6:	e01e      	b.n	800ca16 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	8adb      	ldrh	r3, [r3, #22]
 800c9dc:	88fa      	ldrh	r2, [r7, #6]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d116      	bne.n	800ca10 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c9e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d010      	beq.n	800ca0a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00c      	beq.n	800ca0a <tcp_bind+0xaa>
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d005      	beq.n	800ca0a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d102      	bne.n	800ca10 <tcp_bind+0xb0>
              return ERR_USE;
 800ca0a:	f06f 0307 	mvn.w	r3, #7
 800ca0e:	e029      	b.n	800ca64 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	61bb      	str	r3, [r7, #24]
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1dd      	bne.n	800c9d8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	dbcf      	blt.n	800c9ca <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d00c      	beq.n	800ca4a <tcp_bind+0xea>
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d008      	beq.n	800ca4a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d002      	beq.n	800ca44 <tcp_bind+0xe4>
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	e000      	b.n	800ca46 <tcp_bind+0xe6>
 800ca44:	2300      	movs	r3, #0
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	88fa      	ldrh	r2, [r7, #6]
 800ca4e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ca50:	4b0b      	ldr	r3, [pc, #44]	; (800ca80 <tcp_bind+0x120>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	60da      	str	r2, [r3, #12]
 800ca58:	4a09      	ldr	r2, [pc, #36]	; (800ca80 <tcp_bind+0x120>)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	f004 fed7 	bl	8011810 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3720      	adds	r7, #32
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	08025fb0 	.word	0x08025fb0
 800ca70:	08019220 	.word	0x08019220
 800ca74:	080192ec 	.word	0x080192ec
 800ca78:	0801925c 	.word	0x0801925c
 800ca7c:	08025f78 	.word	0x08025f78
 800ca80:	2000facc 	.word	0x2000facc

0800ca84 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800ca92:	68b8      	ldr	r0, [r7, #8]
 800ca94:	f7ff ff58 	bl	800c948 <tcp_abort>

  return ERR_ABRT;
 800ca98:	f06f 030c 	mvn.w	r3, #12
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	2200      	movs	r2, #0
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f806 	bl	800cac8 <tcp_listen_with_backlog_and_err>
 800cabc:	4603      	mov	r3, r0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	460b      	mov	r3, r1
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d009      	beq.n	800caf6 <tcp_listen_with_backlog_and_err+0x2e>
 800cae2:	4b3f      	ldr	r3, [pc, #252]	; (800cbe0 <tcp_listen_with_backlog_and_err+0x118>)
 800cae4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800cae8:	493e      	ldr	r1, [pc, #248]	; (800cbe4 <tcp_listen_with_backlog_and_err+0x11c>)
 800caea:	483f      	ldr	r0, [pc, #252]	; (800cbe8 <tcp_listen_with_backlog_and_err+0x120>)
 800caec:	f009 fee6 	bl	80168bc <iprintf>
 800caf0:	23f1      	movs	r3, #241	; 0xf1
 800caf2:	76fb      	strb	r3, [r7, #27]
 800caf4:	e069      	b.n	800cbca <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7d1b      	ldrb	r3, [r3, #20]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d104      	bne.n	800cb08 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cb02:	23f7      	movs	r3, #247	; 0xf7
 800cb04:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cb06:	e060      	b.n	800cbca <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cb08:	2002      	movs	r0, #2
 800cb0a:	f7fe fc13 	bl	800b334 <memp_malloc>
 800cb0e:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800cb16:	23ff      	movs	r3, #255	; 0xff
 800cb18:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cb1a:	e056      	b.n	800cbca <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	691a      	ldr	r2, [r3, #16]
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8ada      	ldrh	r2, [r3, #22]
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	7d5a      	ldrb	r2, [r3, #21]
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	7a1a      	ldrb	r2, [r3, #8]
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	7a9a      	ldrb	r2, [r3, #10]
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	7a5a      	ldrb	r2, [r3, #9]
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	8adb      	ldrh	r3, [r3, #22]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d021      	beq.n	800cba6 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb62:	4b22      	ldr	r3, [pc, #136]	; (800cbec <tcp_listen_with_backlog_and_err+0x124>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d105      	bne.n	800cb78 <tcp_listen_with_backlog_and_err+0xb0>
 800cb6c:	4b1f      	ldr	r3, [pc, #124]	; (800cbec <tcp_listen_with_backlog_and_err+0x124>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	4a1e      	ldr	r2, [pc, #120]	; (800cbec <tcp_listen_with_backlog_and_err+0x124>)
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	e013      	b.n	800cba0 <tcp_listen_with_backlog_and_err+0xd8>
 800cb78:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <tcp_listen_with_backlog_and_err+0x124>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	617b      	str	r3, [r7, #20]
 800cb7e:	e00c      	b.n	800cb9a <tcp_listen_with_backlog_and_err+0xd2>
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d104      	bne.n	800cb94 <tcp_listen_with_backlog_and_err+0xcc>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	60da      	str	r2, [r3, #12]
 800cb92:	e005      	b.n	800cba0 <tcp_listen_with_backlog_and_err+0xd8>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	617b      	str	r3, [r7, #20]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1ef      	bne.n	800cb80 <tcp_listen_with_backlog_and_err+0xb8>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	2001      	movs	r0, #1
 800cbaa:	f7fe fc15 	bl	800b3d8 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	4a0f      	ldr	r2, [pc, #60]	; (800cbf0 <tcp_listen_with_backlog_and_err+0x128>)
 800cbb2:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cbb4:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <tcp_listen_with_backlog_and_err+0x12c>)
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	60da      	str	r2, [r3, #12]
 800cbbc:	4a0d      	ldr	r2, [pc, #52]	; (800cbf4 <tcp_listen_with_backlog_and_err+0x12c>)
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	f004 fe25 	bl	8011810 <tcp_timer_needed>
  res = ERR_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7efa      	ldrb	r2, [r7, #27]
 800cbd4:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cbd6:	69fb      	ldr	r3, [r7, #28]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3720      	adds	r7, #32
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	08019220 	.word	0x08019220
 800cbe4:	08019314 	.word	0x08019314
 800cbe8:	0801925c 	.word	0x0801925c
 800cbec:	2000facc 	.word	0x2000facc
 800cbf0:	0800ca85 	.word	0x0800ca85
 800cbf4:	2000fac8 	.word	0x2000fac8

0800cbf8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cc08:	4413      	add	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cc14:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cc18:	bf28      	it	cs
 800cc1a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cc1e:	b292      	uxth	r2, r2
 800cc20:	4413      	add	r3, r2
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	db08      	blt.n	800cc3c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	e020      	b.n	800cc7e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dd03      	ble.n	800cc52 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc50:	e014      	b.n	800cc7c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc64:	d306      	bcc.n	800cc74 <tcp_update_rcv_ann_wnd+0x7c>
 800cc66:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <tcp_update_rcv_ann_wnd+0x90>)
 800cc68:	f44f 7242 	mov.w	r2, #776	; 0x308
 800cc6c:	4907      	ldr	r1, [pc, #28]	; (800cc8c <tcp_update_rcv_ann_wnd+0x94>)
 800cc6e:	4808      	ldr	r0, [pc, #32]	; (800cc90 <tcp_update_rcv_ann_wnd+0x98>)
 800cc70:	f009 fe24 	bl	80168bc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cc7c:	2300      	movs	r3, #0
  }
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	08019220 	.word	0x08019220
 800cc8c:	08019338 	.word	0x08019338
 800cc90:	0801925c 	.word	0x0801925c

0800cc94 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7d1b      	ldrb	r3, [r3, #20]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d106      	bne.n	800ccb6 <tcp_recved+0x22>
 800cca8:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <tcp_recved+0xa4>)
 800ccaa:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ccae:	4923      	ldr	r1, [pc, #140]	; (800cd3c <tcp_recved+0xa8>)
 800ccb0:	4823      	ldr	r0, [pc, #140]	; (800cd40 <tcp_recved+0xac>)
 800ccb2:	f009 fe03 	bl	80168bc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccba:	887b      	ldrh	r3, [r7, #2]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccc8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cccc:	d904      	bls.n	800ccd8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ccd4:	851a      	strh	r2, [r3, #40]	; 0x28
 800ccd6:	e017      	b.n	800cd08 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d113      	bne.n	800cd08 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7d1b      	ldrb	r3, [r3, #20]
 800cce4:	2b07      	cmp	r3, #7
 800cce6:	d003      	beq.n	800ccf0 <tcp_recved+0x5c>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	7d1b      	ldrb	r3, [r3, #20]
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d104      	bne.n	800ccfa <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ccf6:	851a      	strh	r2, [r3, #40]	; 0x28
 800ccf8:	e006      	b.n	800cd08 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <tcp_recved+0xa4>)
 800ccfc:	f240 322d 	movw	r2, #813	; 0x32d
 800cd00:	4910      	ldr	r1, [pc, #64]	; (800cd44 <tcp_recved+0xb0>)
 800cd02:	480f      	ldr	r0, [pc, #60]	; (800cd40 <tcp_recved+0xac>)
 800cd04:	f009 fdda 	bl	80168bc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ff75 	bl	800cbf8 <tcp_update_rcv_ann_wnd>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cd18:	db09      	blt.n	800cd2e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7e9b      	ldrb	r3, [r3, #26]
 800cd1e:	f043 0302 	orr.w	r3, r3, #2
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f004 f897 	bl	8010e5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cd2e:	bf00      	nop
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	08019220 	.word	0x08019220
 800cd3c:	08019354 	.word	0x08019354
 800cd40:	0801925c 	.word	0x0801925c
 800cd44:	0801937c 	.word	0x0801937c

0800cd48 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800cd52:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <tcp_new_port+0x80>)
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	b291      	uxth	r1, r2
 800cd5a:	4a1b      	ldr	r2, [pc, #108]	; (800cdc8 <tcp_new_port+0x80>)
 800cd5c:	8011      	strh	r1, [r2, #0]
 800cd5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d103      	bne.n	800cd6e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cd66:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <tcp_new_port+0x80>)
 800cd68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cd6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cd6e:	2300      	movs	r3, #0
 800cd70:	71fb      	strb	r3, [r7, #7]
 800cd72:	e01e      	b.n	800cdb2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	4a15      	ldr	r2, [pc, #84]	; (800cdcc <tcp_new_port+0x84>)
 800cd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	603b      	str	r3, [r7, #0]
 800cd80:	e011      	b.n	800cda6 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	8ada      	ldrh	r2, [r3, #22]
 800cd86:	4b10      	ldr	r3, [pc, #64]	; (800cdc8 <tcp_new_port+0x80>)
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d108      	bne.n	800cda0 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cd8e:	88bb      	ldrh	r3, [r7, #4]
 800cd90:	3301      	adds	r3, #1
 800cd92:	80bb      	strh	r3, [r7, #4]
 800cd94:	88bb      	ldrh	r3, [r7, #4]
 800cd96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd9a:	d3da      	bcc.n	800cd52 <tcp_new_port+0xa>
          return 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e00d      	b.n	800cdbc <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	603b      	str	r3, [r7, #0]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1ea      	bne.n	800cd82 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	71fb      	strb	r3, [r7, #7]
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d9dd      	bls.n	800cd74 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cdb8:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <tcp_new_port+0x80>)
 800cdba:	881b      	ldrh	r3, [r3, #0]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	20000010 	.word	0x20000010
 800cdcc:	08025f78 	.word	0x08025f78

0800cdd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cdd0:	b5b0      	push	{r4, r5, r7, lr}
 800cdd2:	b08c      	sub	sp, #48	; 0x30
 800cdd4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800cdda:	4b97      	ldr	r3, [pc, #604]	; (800d038 <tcp_slowtmr+0x268>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	4a95      	ldr	r2, [pc, #596]	; (800d038 <tcp_slowtmr+0x268>)
 800cde2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cde4:	4b95      	ldr	r3, [pc, #596]	; (800d03c <tcp_slowtmr+0x26c>)
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	b2da      	uxtb	r2, r3
 800cdec:	4b93      	ldr	r3, [pc, #588]	; (800d03c <tcp_slowtmr+0x26c>)
 800cdee:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800cdf4:	4b92      	ldr	r3, [pc, #584]	; (800d040 <tcp_slowtmr+0x270>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cdfa:	e227      	b.n	800d24c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	7d1b      	ldrb	r3, [r3, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d106      	bne.n	800ce12 <tcp_slowtmr+0x42>
 800ce04:	4b8f      	ldr	r3, [pc, #572]	; (800d044 <tcp_slowtmr+0x274>)
 800ce06:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800ce0a:	498f      	ldr	r1, [pc, #572]	; (800d048 <tcp_slowtmr+0x278>)
 800ce0c:	488f      	ldr	r0, [pc, #572]	; (800d04c <tcp_slowtmr+0x27c>)
 800ce0e:	f009 fd55 	bl	80168bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	7d1b      	ldrb	r3, [r3, #20]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d106      	bne.n	800ce28 <tcp_slowtmr+0x58>
 800ce1a:	4b8a      	ldr	r3, [pc, #552]	; (800d044 <tcp_slowtmr+0x274>)
 800ce1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ce20:	498b      	ldr	r1, [pc, #556]	; (800d050 <tcp_slowtmr+0x280>)
 800ce22:	488a      	ldr	r0, [pc, #552]	; (800d04c <tcp_slowtmr+0x27c>)
 800ce24:	f009 fd4a 	bl	80168bc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	2b0a      	cmp	r3, #10
 800ce2e:	d106      	bne.n	800ce3e <tcp_slowtmr+0x6e>
 800ce30:	4b84      	ldr	r3, [pc, #528]	; (800d044 <tcp_slowtmr+0x274>)
 800ce32:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800ce36:	4987      	ldr	r1, [pc, #540]	; (800d054 <tcp_slowtmr+0x284>)
 800ce38:	4884      	ldr	r0, [pc, #528]	; (800d04c <tcp_slowtmr+0x27c>)
 800ce3a:	f009 fd3f 	bl	80168bc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	7f5a      	ldrb	r2, [r3, #29]
 800ce42:	4b7e      	ldr	r3, [pc, #504]	; (800d03c <tcp_slowtmr+0x26c>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d103      	bne.n	800ce52 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800ce50:	e1fc      	b.n	800d24c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ce52:	4b7a      	ldr	r3, [pc, #488]	; (800d03c <tcp_slowtmr+0x26c>)
 800ce54:	781a      	ldrb	r2, [r3, #0]
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	7d1b      	ldrb	r3, [r3, #20]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d108      	bne.n	800ce7c <tcp_slowtmr+0xac>
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce70:	2b05      	cmp	r3, #5
 800ce72:	d903      	bls.n	800ce7c <tcp_slowtmr+0xac>
      ++pcb_remove;
 800ce74:	7ffb      	ldrb	r3, [r7, #31]
 800ce76:	3301      	adds	r3, #1
 800ce78:	77fb      	strb	r3, [r7, #31]
 800ce7a:	e0a2      	b.n	800cfc2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce82:	2b0b      	cmp	r3, #11
 800ce84:	d903      	bls.n	800ce8e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ce86:	7ffb      	ldrb	r3, [r7, #31]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	77fb      	strb	r3, [r7, #31]
 800ce8c:	e099      	b.n	800cfc2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d032      	beq.n	800cefe <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	4a6d      	ldr	r2, [pc, #436]	; (800d058 <tcp_slowtmr+0x288>)
 800cea2:	5cd3      	ldrb	r3, [r2, r3]
 800cea4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800cea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ceac:	7cfa      	ldrb	r2, [r7, #19]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d907      	bls.n	800cec2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ceb8:	3301      	adds	r3, #1
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800cec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800cec8:	7cfa      	ldrb	r2, [r7, #19]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d879      	bhi.n	800cfc2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800cece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ced0:	f004 fbde 	bl	8011690 <tcp_zero_window_probe>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d173      	bne.n	800cfc2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cee8:	2b06      	cmp	r3, #6
 800ceea:	d86a      	bhi.n	800cfc2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cef2:	3301      	adds	r3, #1
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800cefc:	e061      	b.n	800cfc2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	db08      	blt.n	800cf1a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	3301      	adds	r3, #1
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	b21a      	sxth	r2, r3
 800cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf18:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d04f      	beq.n	800cfc2 <tcp_slowtmr+0x1f2>
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	db47      	blt.n	800cfc2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	7d1b      	ldrb	r3, [r3, #20]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d018      	beq.n	800cf6c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf40:	2b0c      	cmp	r3, #12
 800cf42:	bf28      	it	cs
 800cf44:	230c      	movcs	r3, #12
 800cf46:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf4e:	10db      	asrs	r3, r3, #3
 800cf50:	b21b      	sxth	r3, r3
 800cf52:	461a      	mov	r2, r3
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf5a:	4413      	add	r3, r2
 800cf5c:	7dfa      	ldrb	r2, [r7, #23]
 800cf5e:	493f      	ldr	r1, [pc, #252]	; (800d05c <tcp_slowtmr+0x28c>)
 800cf60:	5c8a      	ldrb	r2, [r1, r2]
 800cf62:	4093      	lsls	r3, r2
 800cf64:	b21a      	sxth	r2, r3
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	2200      	movs	r2, #0
 800cf70:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	bf28      	it	cs
 800cf82:	4613      	movcs	r3, r2
 800cf84:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800cf86:	8abb      	ldrh	r3, [r7, #20]
 800cf88:	085b      	lsrs	r3, r3, #1
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf9c:	005b      	lsls	r3, r3, #1
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d206      	bcs.n	800cfb2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800cfbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfbe:	f004 fa4d 	bl	801145c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc4:	7d1b      	ldrb	r3, [r3, #20]
 800cfc6:	2b06      	cmp	r3, #6
 800cfc8:	d10f      	bne.n	800cfea <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfcc:	7e9b      	ldrb	r3, [r3, #26]
 800cfce:	f003 0310 	and.w	r3, r3, #16
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d009      	beq.n	800cfea <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cfd6:	4b18      	ldr	r3, [pc, #96]	; (800d038 <tcp_slowtmr+0x268>)
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	2b28      	cmp	r3, #40	; 0x28
 800cfe2:	d902      	bls.n	800cfea <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cfe4:	7ffb      	ldrb	r3, [r7, #31]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	7a1b      	ldrb	r3, [r3, #8]
 800cfee:	f003 0308 	and.w	r3, r3, #8
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d05d      	beq.n	800d0b2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cffa:	2b04      	cmp	r3, #4
 800cffc:	d003      	beq.n	800d006 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d002:	2b07      	cmp	r3, #7
 800d004:	d155      	bne.n	800d0b2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d006:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <tcp_slowtmr+0x268>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d016:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d01a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d01e:	4910      	ldr	r1, [pc, #64]	; (800d060 <tcp_slowtmr+0x290>)
 800d020:	fba1 1303 	umull	r1, r3, r1, r3
 800d024:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d026:	429a      	cmp	r2, r3
 800d028:	d91c      	bls.n	800d064 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d02a:	7ffb      	ldrb	r3, [r7, #31]
 800d02c:	3301      	adds	r3, #1
 800d02e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d030:	7fbb      	ldrb	r3, [r7, #30]
 800d032:	3301      	adds	r3, #1
 800d034:	77bb      	strb	r3, [r7, #30]
 800d036:	e03c      	b.n	800d0b2 <tcp_slowtmr+0x2e2>
 800d038:	2000fac4 	.word	0x2000fac4
 800d03c:	20008c3e 	.word	0x20008c3e
 800d040:	2000fac0 	.word	0x2000fac0
 800d044:	08019220 	.word	0x08019220
 800d048:	080193d0 	.word	0x080193d0
 800d04c:	0801925c 	.word	0x0801925c
 800d050:	080193fc 	.word	0x080193fc
 800d054:	08019428 	.word	0x08019428
 800d058:	08025f70 	.word	0x08025f70
 800d05c:	08025f60 	.word	0x08025f60
 800d060:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d064:	4b97      	ldr	r3, [pc, #604]	; (800d2c4 <tcp_slowtmr+0x4f4>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d07a:	4618      	mov	r0, r3
 800d07c:	4b92      	ldr	r3, [pc, #584]	; (800d2c8 <tcp_slowtmr+0x4f8>)
 800d07e:	fb03 f300 	mul.w	r3, r3, r0
 800d082:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d084:	4991      	ldr	r1, [pc, #580]	; (800d2cc <tcp_slowtmr+0x4fc>)
 800d086:	fba1 1303 	umull	r1, r3, r1, r3
 800d08a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d910      	bls.n	800d0b2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d092:	f004 fac0 	bl	8011616 <tcp_keepalive>
 800d096:	4603      	mov	r3, r0
 800d098:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d09a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d016      	beq.n	800d0e8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d0ba:	4b82      	ldr	r3, [pc, #520]	; (800d2c4 <tcp_slowtmr+0x4f4>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	1ad2      	subs	r2, r2, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	440b      	add	r3, r1
 800d0d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d307      	bcc.n	800d0e8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 fa04 	bl	800d4ea <tcp_segs_free>
      pcb->ooseq = NULL;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	7d1b      	ldrb	r3, [r3, #20]
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d109      	bne.n	800d104 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0f0:	4b74      	ldr	r3, [pc, #464]	; (800d2c4 <tcp_slowtmr+0x4f4>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b28      	cmp	r3, #40	; 0x28
 800d0fc:	d902      	bls.n	800d104 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d0fe:	7ffb      	ldrb	r3, [r7, #31]
 800d100:	3301      	adds	r3, #1
 800d102:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	7d1b      	ldrb	r3, [r3, #20]
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d109      	bne.n	800d120 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d10c:	4b6d      	ldr	r3, [pc, #436]	; (800d2c4 <tcp_slowtmr+0x4f4>)
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	2bf0      	cmp	r3, #240	; 0xf0
 800d118:	d902      	bls.n	800d120 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d11a:	7ffb      	ldrb	r3, [r7, #31]
 800d11c:	3301      	adds	r3, #1
 800d11e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d120:	7ffb      	ldrb	r3, [r7, #31]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d05d      	beq.n	800d1e2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d12c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d12e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d130:	f000 fc52 	bl	800d9d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d134:	6a3b      	ldr	r3, [r7, #32]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d010      	beq.n	800d15c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d13a:	4b65      	ldr	r3, [pc, #404]	; (800d2d0 <tcp_slowtmr+0x500>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d140:	429a      	cmp	r2, r3
 800d142:	d106      	bne.n	800d152 <tcp_slowtmr+0x382>
 800d144:	4b63      	ldr	r3, [pc, #396]	; (800d2d4 <tcp_slowtmr+0x504>)
 800d146:	f240 4289 	movw	r2, #1161	; 0x489
 800d14a:	4963      	ldr	r1, [pc, #396]	; (800d2d8 <tcp_slowtmr+0x508>)
 800d14c:	4863      	ldr	r0, [pc, #396]	; (800d2dc <tcp_slowtmr+0x50c>)
 800d14e:	f009 fbb5 	bl	80168bc <iprintf>
        prev->next = pcb->next;
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	68da      	ldr	r2, [r3, #12]
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	60da      	str	r2, [r3, #12]
 800d15a:	e00f      	b.n	800d17c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d15c:	4b5c      	ldr	r3, [pc, #368]	; (800d2d0 <tcp_slowtmr+0x500>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d162:	429a      	cmp	r2, r3
 800d164:	d006      	beq.n	800d174 <tcp_slowtmr+0x3a4>
 800d166:	4b5b      	ldr	r3, [pc, #364]	; (800d2d4 <tcp_slowtmr+0x504>)
 800d168:	f240 428d 	movw	r2, #1165	; 0x48d
 800d16c:	495c      	ldr	r1, [pc, #368]	; (800d2e0 <tcp_slowtmr+0x510>)
 800d16e:	485b      	ldr	r0, [pc, #364]	; (800d2dc <tcp_slowtmr+0x50c>)
 800d170:	f009 fba4 	bl	80168bc <iprintf>
        tcp_active_pcbs = pcb->next;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	4a55      	ldr	r2, [pc, #340]	; (800d2d0 <tcp_slowtmr+0x500>)
 800d17a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d17c:	7fbb      	ldrb	r3, [r7, #30]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d010      	beq.n	800d1a4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d18a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	1d1d      	adds	r5, r3, #4
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	8adb      	ldrh	r3, [r3, #22]
 800d194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d196:	8b12      	ldrh	r2, [r2, #24]
 800d198:	9201      	str	r2, [sp, #4]
 800d19a:	9300      	str	r3, [sp, #0]
 800d19c:	462b      	mov	r3, r5
 800d19e:	4622      	mov	r2, r4
 800d1a0:	f004 f8e6 	bl	8011370 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	2001      	movs	r0, #1
 800d1be:	f7fe f90b 	bl	800b3d8 <memp_free>

      tcp_active_pcbs_changed = 0;
 800d1c2:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <tcp_slowtmr+0x514>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d004      	beq.n	800d1d8 <tcp_slowtmr+0x408>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f06f 010c 	mvn.w	r1, #12
 800d1d4:	68b8      	ldr	r0, [r7, #8]
 800d1d6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d1d8:	4b42      	ldr	r3, [pc, #264]	; (800d2e4 <tcp_slowtmr+0x514>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d035      	beq.n	800d24c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800d1e0:	e606      	b.n	800cdf0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	7edb      	ldrb	r3, [r3, #27]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	7eda      	ldrb	r2, [r3, #27]
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	7f1b      	ldrb	r3, [r3, #28]
 800d200:	429a      	cmp	r2, r3
 800d202:	d323      	bcc.n	800d24c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2200      	movs	r2, #0
 800d208:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d20a:	4b36      	ldr	r3, [pc, #216]	; (800d2e4 <tcp_slowtmr+0x514>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <tcp_slowtmr+0x460>
 800d21a:	6a3b      	ldr	r3, [r7, #32]
 800d21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d220:	6a3a      	ldr	r2, [r7, #32]
 800d222:	6912      	ldr	r2, [r2, #16]
 800d224:	6a39      	ldr	r1, [r7, #32]
 800d226:	4610      	mov	r0, r2
 800d228:	4798      	blx	r3
 800d22a:	4603      	mov	r3, r0
 800d22c:	777b      	strb	r3, [r7, #29]
 800d22e:	e001      	b.n	800d234 <tcp_slowtmr+0x464>
 800d230:	2300      	movs	r3, #0
 800d232:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d234:	4b2b      	ldr	r3, [pc, #172]	; (800d2e4 <tcp_slowtmr+0x514>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d000      	beq.n	800d23e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800d23c:	e5d8      	b.n	800cdf0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d23e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800d246:	6a38      	ldr	r0, [r7, #32]
 800d248:	f003 fe08 	bl	8010e5c <tcp_output>
  while (pcb != NULL) {
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f47f add4 	bne.w	800cdfc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d258:	4b23      	ldr	r3, [pc, #140]	; (800d2e8 <tcp_slowtmr+0x518>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d25e:	e068      	b.n	800d332 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	7d1b      	ldrb	r3, [r3, #20]
 800d264:	2b0a      	cmp	r3, #10
 800d266:	d006      	beq.n	800d276 <tcp_slowtmr+0x4a6>
 800d268:	4b1a      	ldr	r3, [pc, #104]	; (800d2d4 <tcp_slowtmr+0x504>)
 800d26a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d26e:	491f      	ldr	r1, [pc, #124]	; (800d2ec <tcp_slowtmr+0x51c>)
 800d270:	481a      	ldr	r0, [pc, #104]	; (800d2dc <tcp_slowtmr+0x50c>)
 800d272:	f009 fb23 	bl	80168bc <iprintf>
    pcb_remove = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <tcp_slowtmr+0x4f4>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	2bf0      	cmp	r3, #240	; 0xf0
 800d286:	d902      	bls.n	800d28e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800d288:	7ffb      	ldrb	r3, [r7, #31]
 800d28a:	3301      	adds	r3, #1
 800d28c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d28e:	7ffb      	ldrb	r3, [r7, #31]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d049      	beq.n	800d328 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d296:	f000 fb9f 	bl	800d9d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d029      	beq.n	800d2f4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d2a0:	4b11      	ldr	r3, [pc, #68]	; (800d2e8 <tcp_slowtmr+0x518>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d106      	bne.n	800d2b8 <tcp_slowtmr+0x4e8>
 800d2aa:	4b0a      	ldr	r3, [pc, #40]	; (800d2d4 <tcp_slowtmr+0x504>)
 800d2ac:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d2b0:	490f      	ldr	r1, [pc, #60]	; (800d2f0 <tcp_slowtmr+0x520>)
 800d2b2:	480a      	ldr	r0, [pc, #40]	; (800d2dc <tcp_slowtmr+0x50c>)
 800d2b4:	f009 fb02 	bl	80168bc <iprintf>
        prev->next = pcb->next;
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	60da      	str	r2, [r3, #12]
 800d2c0:	e028      	b.n	800d314 <tcp_slowtmr+0x544>
 800d2c2:	bf00      	nop
 800d2c4:	2000fac4 	.word	0x2000fac4
 800d2c8:	000124f8 	.word	0x000124f8
 800d2cc:	10624dd3 	.word	0x10624dd3
 800d2d0:	2000fac0 	.word	0x2000fac0
 800d2d4:	08019220 	.word	0x08019220
 800d2d8:	08019458 	.word	0x08019458
 800d2dc:	0801925c 	.word	0x0801925c
 800d2e0:	08019484 	.word	0x08019484
 800d2e4:	2000fabc 	.word	0x2000fabc
 800d2e8:	2000fad0 	.word	0x2000fad0
 800d2ec:	080194b0 	.word	0x080194b0
 800d2f0:	080194e0 	.word	0x080194e0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d2f4:	4b12      	ldr	r3, [pc, #72]	; (800d340 <tcp_slowtmr+0x570>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d006      	beq.n	800d30c <tcp_slowtmr+0x53c>
 800d2fe:	4b11      	ldr	r3, [pc, #68]	; (800d344 <tcp_slowtmr+0x574>)
 800d300:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800d304:	4910      	ldr	r1, [pc, #64]	; (800d348 <tcp_slowtmr+0x578>)
 800d306:	4811      	ldr	r0, [pc, #68]	; (800d34c <tcp_slowtmr+0x57c>)
 800d308:	f009 fad8 	bl	80168bc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	4a0b      	ldr	r2, [pc, #44]	; (800d340 <tcp_slowtmr+0x570>)
 800d312:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d31e:	69b9      	ldr	r1, [r7, #24]
 800d320:	2001      	movs	r0, #1
 800d322:	f7fe f859 	bl	800b3d8 <memp_free>
 800d326:	e004      	b.n	800d332 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	d193      	bne.n	800d260 <tcp_slowtmr+0x490>
    }
  }
}
 800d338:	bf00      	nop
 800d33a:	3728      	adds	r7, #40	; 0x28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bdb0      	pop	{r4, r5, r7, pc}
 800d340:	2000fad0 	.word	0x2000fad0
 800d344:	08019220 	.word	0x08019220
 800d348:	08019508 	.word	0x08019508
 800d34c:	0801925c 	.word	0x0801925c

0800d350 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d356:	4b2d      	ldr	r3, [pc, #180]	; (800d40c <tcp_fasttmr+0xbc>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <tcp_fasttmr+0xbc>)
 800d360:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d362:	4b2b      	ldr	r3, [pc, #172]	; (800d410 <tcp_fasttmr+0xc0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d368:	e048      	b.n	800d3fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7f5a      	ldrb	r2, [r3, #29]
 800d36e:	4b27      	ldr	r3, [pc, #156]	; (800d40c <tcp_fasttmr+0xbc>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	429a      	cmp	r2, r3
 800d374:	d03f      	beq.n	800d3f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d376:	4b25      	ldr	r3, [pc, #148]	; (800d40c <tcp_fasttmr+0xbc>)
 800d378:	781a      	ldrb	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7e9b      	ldrb	r3, [r3, #26]
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d010      	beq.n	800d3ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	7e9b      	ldrb	r3, [r3, #26]
 800d38e:	f043 0302 	orr.w	r3, r3, #2
 800d392:	b2da      	uxtb	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f003 fd5f 	bl	8010e5c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	7e9b      	ldrb	r3, [r3, #26]
 800d3a2:	f023 0303 	bic.w	r3, r3, #3
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	7e9b      	ldrb	r3, [r3, #26]
 800d3b0:	f003 0308 	and.w	r3, r3, #8
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d009      	beq.n	800d3cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7e9b      	ldrb	r3, [r3, #26]
 800d3bc:	f023 0308 	bic.w	r3, r3, #8
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff f946 	bl	800c658 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d3da:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <tcp_fasttmr+0xc4>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f819 	bl	800d418 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d3e6:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <tcp_fasttmr+0xc4>)
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d000      	beq.n	800d3f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d3ee:	e7b8      	b.n	800d362 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	607b      	str	r3, [r7, #4]
 800d3f4:	e002      	b.n	800d3fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1b3      	bne.n	800d36a <tcp_fasttmr+0x1a>
    }
  }
}
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20008c3e 	.word	0x20008c3e
 800d410:	2000fac0 	.word	0x2000fac0
 800d414:	2000fabc 	.word	0x2000fabc

0800d418 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d418:	b590      	push	{r4, r7, lr}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d424:	7b5b      	ldrb	r3, [r3, #13]
 800d426:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00b      	beq.n	800d456 <tcp_process_refused_data+0x3e>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6918      	ldr	r0, [r3, #16]
 800d448:	2300      	movs	r3, #0
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	47a0      	blx	r4
 800d450:	4603      	mov	r3, r0
 800d452:	73fb      	strb	r3, [r7, #15]
 800d454:	e007      	b.n	800d466 <tcp_process_refused_data+0x4e>
 800d456:	2300      	movs	r3, #0
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	6879      	ldr	r1, [r7, #4]
 800d45c:	2000      	movs	r0, #0
 800d45e:	f000 f89b 	bl	800d598 <tcp_recv_null>
 800d462:	4603      	mov	r3, r0
 800d464:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d12a      	bne.n	800d4c4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	f003 0320 	and.w	r3, r3, #32
 800d474:	2b00      	cmp	r3, #0
 800d476:	d033      	beq.n	800d4e0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d47c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d480:	d005      	beq.n	800d48e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d486:	3301      	adds	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d494:	2b00      	cmp	r3, #0
 800d496:	d00b      	beq.n	800d4b0 <tcp_process_refused_data+0x98>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6918      	ldr	r0, [r3, #16]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	6879      	ldr	r1, [r7, #4]
 800d4a8:	47a0      	blx	r4
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	73fb      	strb	r3, [r7, #15]
 800d4ae:	e001      	b.n	800d4b4 <tcp_process_refused_data+0x9c>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4b8:	f113 0f0d 	cmn.w	r3, #13
 800d4bc:	d110      	bne.n	800d4e0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d4be:	f06f 030c 	mvn.w	r3, #12
 800d4c2:	e00e      	b.n	800d4e2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4c8:	f113 0f0d 	cmn.w	r3, #13
 800d4cc:	d102      	bne.n	800d4d4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d4ce:	f06f 030c 	mvn.w	r3, #12
 800d4d2:	e006      	b.n	800d4e2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800d4da:	f06f 0304 	mvn.w	r3, #4
 800d4de:	e000      	b.n	800d4e2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd90      	pop	{r4, r7, pc}

0800d4ea <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b084      	sub	sp, #16
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d4f2:	e007      	b.n	800d504 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f809 	bl	800d512 <tcp_seg_free>
    seg = next;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1f4      	bne.n	800d4f4 <tcp_segs_free+0xa>
  }
}
 800d50a:	bf00      	nop
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b082      	sub	sp, #8
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00c      	beq.n	800d53a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d004      	beq.n	800d532 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fe fcb5 	bl	800be9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	2003      	movs	r0, #3
 800d536:	f7fd ff4f 	bl	800b3d8 <memp_free>
  }
}
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	78fa      	ldrb	r2, [r7, #3]
 800d552:	755a      	strb	r2, [r3, #21]
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d568:	2003      	movs	r0, #3
 800d56a:	f7fd fee3 	bl	800b334 <memp_malloc>
 800d56e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d101      	bne.n	800d57a <tcp_seg_copy+0x1a>
    return NULL;
 800d576:	2300      	movs	r3, #0
 800d578:	e00a      	b.n	800d590 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d57a:	2210      	movs	r2, #16
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f009 f989 	bl	8016896 <memcpy>
  pbuf_ref(cseg->p);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fe fd39 	bl	800c000 <pbuf_ref>
  return cseg;
 800d58e:	68fb      	ldr	r3, [r7, #12]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
 800d5a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d009      	beq.n	800d5c0 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	891b      	ldrh	r3, [r3, #8]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	68b8      	ldr	r0, [r7, #8]
 800d5b4:	f7ff fb6e 	bl	800cc94 <tcp_recved>
    pbuf_free(p);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7fe fc6f 	bl	800be9c <pbuf_free>
 800d5be:	e008      	b.n	800d5d2 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800d5c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d104      	bne.n	800d5d2 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800d5c8:	68b8      	ldr	r0, [r7, #8]
 800d5ca:	f7ff f8ab 	bl	800c724 <tcp_close>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	e000      	b.n	800d5d4 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	db01      	blt.n	800d5f2 <tcp_kill_prio+0x16>
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	e000      	b.n	800d5f4 <tcp_kill_prio+0x18>
 800d5f2:	237f      	movs	r3, #127	; 0x7f
 800d5f4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5fe:	4b16      	ldr	r3, [pc, #88]	; (800d658 <tcp_kill_prio+0x7c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	617b      	str	r3, [r7, #20]
 800d604:	e01a      	b.n	800d63c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	7d5b      	ldrb	r3, [r3, #21]
 800d60a:	7afa      	ldrb	r2, [r7, #11]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d312      	bcc.n	800d636 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d610:	4b12      	ldr	r3, [pc, #72]	; (800d65c <tcp_kill_prio+0x80>)
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d80a      	bhi.n	800d636 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800d620:	4b0e      	ldr	r3, [pc, #56]	; (800d65c <tcp_kill_prio+0x80>)
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	6a1b      	ldr	r3, [r3, #32]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	7d5b      	ldrb	r3, [r3, #21]
 800d634:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1e1      	bne.n	800d606 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d648:	6938      	ldr	r0, [r7, #16]
 800d64a:	f7ff f97d 	bl	800c948 <tcp_abort>
  }
}
 800d64e:	bf00      	nop
 800d650:	3718      	adds	r7, #24
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	2000fac0 	.word	0x2000fac0
 800d65c:	2000fac4 	.word	0x2000fac4

0800d660 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	4603      	mov	r3, r0
 800d668:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	2b08      	cmp	r3, #8
 800d66e:	d009      	beq.n	800d684 <tcp_kill_state+0x24>
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	2b09      	cmp	r3, #9
 800d674:	d006      	beq.n	800d684 <tcp_kill_state+0x24>
 800d676:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <tcp_kill_state+0x80>)
 800d678:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d67c:	4919      	ldr	r1, [pc, #100]	; (800d6e4 <tcp_kill_state+0x84>)
 800d67e:	481a      	ldr	r0, [pc, #104]	; (800d6e8 <tcp_kill_state+0x88>)
 800d680:	f009 f91c 	bl	80168bc <iprintf>

  inactivity = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d688:	2300      	movs	r3, #0
 800d68a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <tcp_kill_state+0x8c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	617b      	str	r3, [r7, #20]
 800d692:	e017      	b.n	800d6c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	79fa      	ldrb	r2, [r7, #7]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d10f      	bne.n	800d6be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d69e:	4b14      	ldr	r3, [pc, #80]	; (800d6f0 <tcp_kill_state+0x90>)
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d807      	bhi.n	800d6be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <tcp_kill_state+0x90>)
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1e4      	bne.n	800d694 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d003      	beq.n	800d6d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	6938      	ldr	r0, [r7, #16]
 800d6d4:	f7ff f886 	bl	800c7e4 <tcp_abandon>
  }
}
 800d6d8:	bf00      	nop
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	08019220 	.word	0x08019220
 800d6e4:	08019530 	.word	0x08019530
 800d6e8:	0801925c 	.word	0x0801925c
 800d6ec:	2000fac0 	.word	0x2000fac0
 800d6f0:	2000fac4 	.word	0x2000fac4

0800d6f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d702:	4b12      	ldr	r3, [pc, #72]	; (800d74c <tcp_kill_timewait+0x58>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	e012      	b.n	800d730 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d70a:	4b11      	ldr	r3, [pc, #68]	; (800d750 <tcp_kill_timewait+0x5c>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6a1b      	ldr	r3, [r3, #32]
 800d712:	1ad3      	subs	r3, r2, r3
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d807      	bhi.n	800d72a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <tcp_kill_timewait+0x5c>)
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e9      	bne.n	800d70a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d73c:	68b8      	ldr	r0, [r7, #8]
 800d73e:	f7ff f903 	bl	800c948 <tcp_abort>
  }
}
 800d742:	bf00      	nop
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	2000fad0 	.word	0x2000fad0
 800d750:	2000fac4 	.word	0x2000fac4

0800d754 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d75e:	2001      	movs	r0, #1
 800d760:	f7fd fde8 	bl	800b334 <memp_malloc>
 800d764:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d124      	bne.n	800d7b6 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d76c:	f7ff ffc2 	bl	800d6f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d770:	2001      	movs	r0, #1
 800d772:	f7fd fddf 	bl	800b334 <memp_malloc>
 800d776:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d11b      	bne.n	800d7b6 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d77e:	2009      	movs	r0, #9
 800d780:	f7ff ff6e 	bl	800d660 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d784:	2001      	movs	r0, #1
 800d786:	f7fd fdd5 	bl	800b334 <memp_malloc>
 800d78a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d111      	bne.n	800d7b6 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d792:	2008      	movs	r0, #8
 800d794:	f7ff ff64 	bl	800d660 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d798:	2001      	movs	r0, #1
 800d79a:	f7fd fdcb 	bl	800b334 <memp_malloc>
 800d79e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d107      	bne.n	800d7b6 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff ff17 	bl	800d5dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d7ae:	2001      	movs	r0, #1
 800d7b0:	f7fd fdc0 	bl	800b334 <memp_malloc>
 800d7b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d03f      	beq.n	800d83c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d7bc:	2298      	movs	r2, #152	; 0x98
 800d7be:	2100      	movs	r1, #0
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f009 f873 	bl	80168ac <memset>
    pcb->prio = prio;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	79fa      	ldrb	r2, [r7, #7]
 800d7ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	22ff      	movs	r2, #255	; 0xff
 800d7ea:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d7f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2206      	movs	r2, #6
 800d7f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2206      	movs	r2, #6
 800d800:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d808:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d812:	4b0d      	ldr	r3, [pc, #52]	; (800d848 <tcp_alloc+0xf4>)
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d81a:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <tcp_alloc+0xf8>)
 800d81c:	781a      	ldrb	r2, [r3, #0]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4a08      	ldr	r2, [pc, #32]	; (800d850 <tcp_alloc+0xfc>)
 800d830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a07      	ldr	r2, [pc, #28]	; (800d854 <tcp_alloc+0x100>)
 800d838:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d83c:	68fb      	ldr	r3, [r7, #12]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	2000fac4 	.word	0x2000fac4
 800d84c:	20008c3e 	.word	0x20008c3e
 800d850:	0800d599 	.word	0x0800d599
 800d854:	006ddd00 	.word	0x006ddd00

0800d858 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d862:	2040      	movs	r0, #64	; 0x40
 800d864:	f7ff ff76 	bl	800d754 <tcp_alloc>
 800d868:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d86a:	68fb      	ldr	r3, [r7, #12]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	611a      	str	r2, [r3, #16]
  }
}
 800d88a:	bf00      	nop
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
	...

0800d898 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00e      	beq.n	800d8c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d106      	bne.n	800d8be <tcp_recv+0x26>
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <tcp_recv+0x38>)
 800d8b2:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800d8b6:	4907      	ldr	r1, [pc, #28]	; (800d8d4 <tcp_recv+0x3c>)
 800d8b8:	4807      	ldr	r0, [pc, #28]	; (800d8d8 <tcp_recv+0x40>)
 800d8ba:	f008 ffff 	bl	80168bc <iprintf>
    pcb->recv = recv;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d8c6:	bf00      	nop
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	08019220 	.word	0x08019220
 800d8d4:	08019540 	.word	0x08019540
 800d8d8:	0801925c 	.word	0x0801925c

0800d8dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00d      	beq.n	800d908 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	7d1b      	ldrb	r3, [r3, #20]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d106      	bne.n	800d902 <tcp_sent+0x26>
 800d8f4:	4b06      	ldr	r3, [pc, #24]	; (800d910 <tcp_sent+0x34>)
 800d8f6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800d8fa:	4906      	ldr	r1, [pc, #24]	; (800d914 <tcp_sent+0x38>)
 800d8fc:	4806      	ldr	r0, [pc, #24]	; (800d918 <tcp_sent+0x3c>)
 800d8fe:	f008 ffdd 	bl	80168bc <iprintf>
    pcb->sent = sent;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	683a      	ldr	r2, [r7, #0]
 800d906:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800d908:	bf00      	nop
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	08019220 	.word	0x08019220
 800d914:	08019568 	.word	0x08019568
 800d918:	0801925c 	.word	0x0801925c

0800d91c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00e      	beq.n	800d94a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7d1b      	ldrb	r3, [r3, #20]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d106      	bne.n	800d942 <tcp_err+0x26>
 800d934:	4b07      	ldr	r3, [pc, #28]	; (800d954 <tcp_err+0x38>)
 800d936:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800d93a:	4907      	ldr	r1, [pc, #28]	; (800d958 <tcp_err+0x3c>)
 800d93c:	4807      	ldr	r0, [pc, #28]	; (800d95c <tcp_err+0x40>)
 800d93e:	f008 ffbd 	bl	80168bc <iprintf>
    pcb->errf = err;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800d94a:	bf00      	nop
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	08019220 	.word	0x08019220
 800d958:	08019590 	.word	0x08019590
 800d95c:	0801925c 	.word	0x0801925c

0800d960 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d008      	beq.n	800d982 <tcp_accept+0x22>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	7d1b      	ldrb	r3, [r3, #20]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d104      	bne.n	800d982 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	619a      	str	r2, [r3, #24]
  }
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
	...

0800d990 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	4613      	mov	r3, r2
 800d99c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d106      	bne.n	800d9b4 <tcp_poll+0x24>
 800d9a6:	4b09      	ldr	r3, [pc, #36]	; (800d9cc <tcp_poll+0x3c>)
 800d9a8:	f240 7203 	movw	r2, #1795	; 0x703
 800d9ac:	4908      	ldr	r1, [pc, #32]	; (800d9d0 <tcp_poll+0x40>)
 800d9ae:	4809      	ldr	r0, [pc, #36]	; (800d9d4 <tcp_poll+0x44>)
 800d9b0:	f008 ff84 	bl	80168bc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	79fa      	ldrb	r2, [r7, #7]
 800d9c0:	771a      	strb	r2, [r3, #28]
}
 800d9c2:	bf00      	nop
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08019220 	.word	0x08019220
 800d9d0:	080195b8 	.word	0x080195b8
 800d9d4:	0801925c 	.word	0x0801925c

0800d9d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d034      	beq.n	800da52 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d9ec:	2b0a      	cmp	r3, #10
 800d9ee:	d030      	beq.n	800da52 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d02c      	beq.n	800da52 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da04:	4618      	mov	r0, r3
 800da06:	f7fe fa49 	bl	800be9c <pbuf_free>
      pcb->refused_data = NULL;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da14:	4618      	mov	r0, r3
 800da16:	f7ff fd68 	bl	800d4ea <tcp_segs_free>
    pcb->ooseq = NULL;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fd5c 	bl	800d4ea <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff fd57 	bl	800d4ea <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	669a      	str	r2, [r3, #104]	; 0x68
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d105      	bne.n	800da7c <tcp_pcb_remove+0x20>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	e013      	b.n	800daa4 <tcp_pcb_remove+0x48>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e00c      	b.n	800da9e <tcp_pcb_remove+0x42>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	68db      	ldr	r3, [r3, #12]
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d104      	bne.n	800da98 <tcp_pcb_remove+0x3c>
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	68da      	ldr	r2, [r3, #12]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	60da      	str	r2, [r3, #12]
 800da96:	e005      	b.n	800daa4 <tcp_pcb_remove+0x48>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ef      	bne.n	800da84 <tcp_pcb_remove+0x28>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2200      	movs	r2, #0
 800daa8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f7ff ff94 	bl	800d9d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	7d1b      	ldrb	r3, [r3, #20]
 800dab4:	2b0a      	cmp	r3, #10
 800dab6:	d013      	beq.n	800dae0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d00f      	beq.n	800dae0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	7e9b      	ldrb	r3, [r3, #26]
 800dac4:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d009      	beq.n	800dae0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	7e9b      	ldrb	r3, [r3, #26]
 800dad0:	f043 0302 	orr.w	r3, r3, #2
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dada:	6838      	ldr	r0, [r7, #0]
 800dadc:	f003 f9be 	bl	8010e5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	7d1b      	ldrb	r3, [r3, #20]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d020      	beq.n	800db2a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daec:	2b00      	cmp	r3, #0
 800daee:	d006      	beq.n	800dafe <tcp_pcb_remove+0xa2>
 800daf0:	4b13      	ldr	r3, [pc, #76]	; (800db40 <tcp_pcb_remove+0xe4>)
 800daf2:	f240 7253 	movw	r2, #1875	; 0x753
 800daf6:	4913      	ldr	r1, [pc, #76]	; (800db44 <tcp_pcb_remove+0xe8>)
 800daf8:	4813      	ldr	r0, [pc, #76]	; (800db48 <tcp_pcb_remove+0xec>)
 800dafa:	f008 fedf 	bl	80168bc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db02:	2b00      	cmp	r3, #0
 800db04:	d006      	beq.n	800db14 <tcp_pcb_remove+0xb8>
 800db06:	4b0e      	ldr	r3, [pc, #56]	; (800db40 <tcp_pcb_remove+0xe4>)
 800db08:	f240 7254 	movw	r2, #1876	; 0x754
 800db0c:	490f      	ldr	r1, [pc, #60]	; (800db4c <tcp_pcb_remove+0xf0>)
 800db0e:	480e      	ldr	r0, [pc, #56]	; (800db48 <tcp_pcb_remove+0xec>)
 800db10:	f008 fed4 	bl	80168bc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d006      	beq.n	800db2a <tcp_pcb_remove+0xce>
 800db1c:	4b08      	ldr	r3, [pc, #32]	; (800db40 <tcp_pcb_remove+0xe4>)
 800db1e:	f240 7256 	movw	r2, #1878	; 0x756
 800db22:	490b      	ldr	r1, [pc, #44]	; (800db50 <tcp_pcb_remove+0xf4>)
 800db24:	4808      	ldr	r0, [pc, #32]	; (800db48 <tcp_pcb_remove+0xec>)
 800db26:	f008 fec9 	bl	80168bc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2200      	movs	r2, #0
 800db2e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2200      	movs	r2, #0
 800db34:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800db36:	bf00      	nop
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	08019220 	.word	0x08019220
 800db44:	080195d8 	.word	0x080195d8
 800db48:	0801925c 	.word	0x0801925c
 800db4c:	080195f0 	.word	0x080195f0
 800db50:	0801960c 	.word	0x0801960c

0800db54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db5c:	4b07      	ldr	r3, [pc, #28]	; (800db7c <tcp_next_iss+0x28>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4b07      	ldr	r3, [pc, #28]	; (800db80 <tcp_next_iss+0x2c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	4a05      	ldr	r2, [pc, #20]	; (800db7c <tcp_next_iss+0x28>)
 800db68:	6013      	str	r3, [r2, #0]
  return iss;
 800db6a:	4b04      	ldr	r3, [pc, #16]	; (800db7c <tcp_next_iss+0x28>)
 800db6c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	20000014 	.word	0x20000014
 800db80:	2000fac4 	.word	0x2000fac4

0800db84 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800db90:	6838      	ldr	r0, [r7, #0]
 800db92:	f007 fad3 	bl	801513c <ip4_route>
 800db96:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800db9e:	88fb      	ldrh	r3, [r7, #6]
 800dba0:	e010      	b.n	800dbc4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dba6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dba8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d008      	beq.n	800dbc2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800dbb0:	897b      	ldrh	r3, [r7, #10]
 800dbb2:	3b28      	subs	r3, #40	; 0x28
 800dbb4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dbb6:	893a      	ldrh	r2, [r7, #8]
 800dbb8:	88fb      	ldrh	r3, [r7, #6]
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	bf28      	it	cs
 800dbbe:	4613      	movcs	r3, r2
 800dbc0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800dbc2:	88fb      	ldrh	r3, [r7, #6]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dbda:	e011      	b.n	800dc00 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d108      	bne.n	800dbfa <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7fe feaa 	bl	800c948 <tcp_abort>
      pcb = next;
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	60fb      	str	r3, [r7, #12]
 800dbf8:	e002      	b.n	800dc00 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1ea      	bne.n	800dbdc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800dc06:	bf00      	nop
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
	...

0800dc10 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d02c      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x6a>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d028      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc28:	4b16      	ldr	r3, [pc, #88]	; (800dc84 <tcp_netif_ip_addr_changed+0x74>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff ffcc 	bl	800dbcc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc34:	4b14      	ldr	r3, [pc, #80]	; (800dc88 <tcp_netif_ip_addr_changed+0x78>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff ffc6 	bl	800dbcc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d019      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x6a>
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d015      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <tcp_netif_ip_addr_changed+0x7c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e00e      	b.n	800dc74 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d103      	bne.n	800dc70 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1ed      	bne.n	800dc56 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2000fac0 	.word	0x2000fac0
 800dc88:	2000facc 	.word	0x2000facc
 800dc8c:	2000fac8 	.word	0x2000fac8

0800dc90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dc90:	b590      	push	{r4, r7, lr}
 800dc92:	b08b      	sub	sp, #44	; 0x2c
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	4a82      	ldr	r2, [pc, #520]	; (800dea8 <tcp_input+0x218>)
 800dca0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	895b      	ldrh	r3, [r3, #10]
 800dca6:	2b13      	cmp	r3, #19
 800dca8:	f240 838a 	bls.w	800e3c0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dcac:	4b7f      	ldr	r3, [pc, #508]	; (800deac <tcp_input+0x21c>)
 800dcae:	695a      	ldr	r2, [r3, #20]
 800dcb0:	4b7e      	ldr	r3, [pc, #504]	; (800deac <tcp_input+0x21c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	f007 fcd8 	bl	801566c <ip4_addr_isbroadcast_u32>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f040 8380 	bne.w	800e3c4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dcc4:	4b79      	ldr	r3, [pc, #484]	; (800deac <tcp_input+0x21c>)
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dccc:	2be0      	cmp	r3, #224	; 0xe0
 800dcce:	f000 8379 	beq.w	800e3c4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800dcd2:	4b75      	ldr	r3, [pc, #468]	; (800dea8 <tcp_input+0x218>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	899b      	ldrh	r3, [r3, #12]
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fc ff06 	bl	800aaec <lwip_htons>
 800dce0:	4603      	mov	r3, r0
 800dce2:	0b1b      	lsrs	r3, r3, #12
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dcec:	7cbb      	ldrb	r3, [r7, #18]
 800dcee:	2b13      	cmp	r3, #19
 800dcf0:	f240 8368 	bls.w	800e3c4 <tcp_input+0x734>
 800dcf4:	7cbb      	ldrb	r3, [r7, #18]
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	f200 8361 	bhi.w	800e3c4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800dd02:	7cbb      	ldrb	r3, [r7, #18]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	3b14      	subs	r3, #20
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	4b69      	ldr	r3, [pc, #420]	; (800deb0 <tcp_input+0x220>)
 800dd0c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd0e:	4b69      	ldr	r3, [pc, #420]	; (800deb4 <tcp_input+0x224>)
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	895a      	ldrh	r2, [r3, #10]
 800dd18:	7cbb      	ldrb	r3, [r7, #18]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d30d      	bcc.n	800dd3c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dd20:	4b63      	ldr	r3, [pc, #396]	; (800deb0 <tcp_input+0x220>)
 800dd22:	881a      	ldrh	r2, [r3, #0]
 800dd24:	4b64      	ldr	r3, [pc, #400]	; (800deb8 <tcp_input+0x228>)
 800dd26:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800dd28:	7cbb      	ldrb	r3, [r7, #18]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	425b      	negs	r3, r3
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	b21b      	sxth	r3, r3
 800dd32:	4619      	mov	r1, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7fe f88d 	bl	800be54 <pbuf_header>
 800dd3a:	e055      	b.n	800dde8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d105      	bne.n	800dd50 <tcp_input+0xc0>
 800dd44:	4b5d      	ldr	r3, [pc, #372]	; (800debc <tcp_input+0x22c>)
 800dd46:	22b2      	movs	r2, #178	; 0xb2
 800dd48:	495d      	ldr	r1, [pc, #372]	; (800dec0 <tcp_input+0x230>)
 800dd4a:	485e      	ldr	r0, [pc, #376]	; (800dec4 <tcp_input+0x234>)
 800dd4c:	f008 fdb6 	bl	80168bc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800dd50:	f06f 0113 	mvn.w	r1, #19
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7fe f87d 	bl	800be54 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	895a      	ldrh	r2, [r3, #10]
 800dd5e:	4b56      	ldr	r3, [pc, #344]	; (800deb8 <tcp_input+0x228>)
 800dd60:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800dd62:	4b53      	ldr	r3, [pc, #332]	; (800deb0 <tcp_input+0x220>)
 800dd64:	881a      	ldrh	r2, [r3, #0]
 800dd66:	4b54      	ldr	r3, [pc, #336]	; (800deb8 <tcp_input+0x228>)
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800dd6e:	4b52      	ldr	r3, [pc, #328]	; (800deb8 <tcp_input+0x228>)
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	425b      	negs	r3, r3
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	b21b      	sxth	r3, r3
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7fe f86a 	bl	800be54 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	895b      	ldrh	r3, [r3, #10]
 800dd86:	8a3a      	ldrh	r2, [r7, #16]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	f200 831d 	bhi.w	800e3c8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	4a47      	ldr	r2, [pc, #284]	; (800deb4 <tcp_input+0x224>)
 800dd96:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	8a3b      	ldrh	r3, [r7, #16]
 800dd9e:	425b      	negs	r3, r3
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	4619      	mov	r1, r3
 800dda6:	4610      	mov	r0, r2
 800dda8:	f7fe f854 	bl	800be54 <pbuf_header>
    p->tot_len -= opt2len;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	891a      	ldrh	r2, [r3, #8]
 800ddb0:	8a3b      	ldrh	r3, [r7, #16]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	895b      	ldrh	r3, [r3, #10]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d005      	beq.n	800ddce <tcp_input+0x13e>
 800ddc2:	4b3e      	ldr	r3, [pc, #248]	; (800debc <tcp_input+0x22c>)
 800ddc4:	22cf      	movs	r2, #207	; 0xcf
 800ddc6:	4940      	ldr	r1, [pc, #256]	; (800dec8 <tcp_input+0x238>)
 800ddc8:	483e      	ldr	r0, [pc, #248]	; (800dec4 <tcp_input+0x234>)
 800ddca:	f008 fd77 	bl	80168bc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	891a      	ldrh	r2, [r3, #8]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	891b      	ldrh	r3, [r3, #8]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d005      	beq.n	800dde8 <tcp_input+0x158>
 800dddc:	4b37      	ldr	r3, [pc, #220]	; (800debc <tcp_input+0x22c>)
 800ddde:	22d0      	movs	r2, #208	; 0xd0
 800dde0:	493a      	ldr	r1, [pc, #232]	; (800decc <tcp_input+0x23c>)
 800dde2:	4838      	ldr	r0, [pc, #224]	; (800dec4 <tcp_input+0x234>)
 800dde4:	f008 fd6a 	bl	80168bc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dde8:	4b2f      	ldr	r3, [pc, #188]	; (800dea8 <tcp_input+0x218>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	b29a      	uxth	r2, r3
 800ddf0:	4b2d      	ldr	r3, [pc, #180]	; (800dea8 <tcp_input+0x218>)
 800ddf2:	681c      	ldr	r4, [r3, #0]
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	f7fc fe79 	bl	800aaec <lwip_htons>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ddfe:	4b2a      	ldr	r3, [pc, #168]	; (800dea8 <tcp_input+0x218>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	885b      	ldrh	r3, [r3, #2]
 800de04:	b29a      	uxth	r2, r3
 800de06:	4b28      	ldr	r3, [pc, #160]	; (800dea8 <tcp_input+0x218>)
 800de08:	681c      	ldr	r4, [r3, #0]
 800de0a:	4610      	mov	r0, r2
 800de0c:	f7fc fe6e 	bl	800aaec <lwip_htons>
 800de10:	4603      	mov	r3, r0
 800de12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de14:	4b24      	ldr	r3, [pc, #144]	; (800dea8 <tcp_input+0x218>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	4b23      	ldr	r3, [pc, #140]	; (800dea8 <tcp_input+0x218>)
 800de1c:	681c      	ldr	r4, [r3, #0]
 800de1e:	4610      	mov	r0, r2
 800de20:	f7fc fe72 	bl	800ab08 <lwip_htonl>
 800de24:	4603      	mov	r3, r0
 800de26:	6063      	str	r3, [r4, #4]
 800de28:	6863      	ldr	r3, [r4, #4]
 800de2a:	4a29      	ldr	r2, [pc, #164]	; (800ded0 <tcp_input+0x240>)
 800de2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800de2e:	4b1e      	ldr	r3, [pc, #120]	; (800dea8 <tcp_input+0x218>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	689a      	ldr	r2, [r3, #8]
 800de34:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <tcp_input+0x218>)
 800de36:	681c      	ldr	r4, [r3, #0]
 800de38:	4610      	mov	r0, r2
 800de3a:	f7fc fe65 	bl	800ab08 <lwip_htonl>
 800de3e:	4603      	mov	r3, r0
 800de40:	60a3      	str	r3, [r4, #8]
 800de42:	68a3      	ldr	r3, [r4, #8]
 800de44:	4a23      	ldr	r2, [pc, #140]	; (800ded4 <tcp_input+0x244>)
 800de46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800de48:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <tcp_input+0x218>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	89db      	ldrh	r3, [r3, #14]
 800de4e:	b29a      	uxth	r2, r3
 800de50:	4b15      	ldr	r3, [pc, #84]	; (800dea8 <tcp_input+0x218>)
 800de52:	681c      	ldr	r4, [r3, #0]
 800de54:	4610      	mov	r0, r2
 800de56:	f7fc fe49 	bl	800aaec <lwip_htons>
 800de5a:	4603      	mov	r3, r0
 800de5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800de5e:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <tcp_input+0x218>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	899b      	ldrh	r3, [r3, #12]
 800de64:	b29b      	uxth	r3, r3
 800de66:	4618      	mov	r0, r3
 800de68:	f7fc fe40 	bl	800aaec <lwip_htons>
 800de6c:	4603      	mov	r3, r0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de74:	b2da      	uxtb	r2, r3
 800de76:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <tcp_input+0x248>)
 800de78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	891a      	ldrh	r2, [r3, #8]
 800de7e:	4b16      	ldr	r3, [pc, #88]	; (800ded8 <tcp_input+0x248>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	f003 0303 	and.w	r3, r3, #3
 800de86:	2b00      	cmp	r3, #0
 800de88:	bf14      	ite	ne
 800de8a:	2301      	movne	r3, #1
 800de8c:	2300      	moveq	r3, #0
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	b29b      	uxth	r3, r3
 800de92:	4413      	add	r3, r2
 800de94:	b29a      	uxth	r2, r3
 800de96:	4b11      	ldr	r3, [pc, #68]	; (800dedc <tcp_input+0x24c>)
 800de98:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800de9e:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <tcp_input+0x250>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	61fb      	str	r3, [r7, #28]
 800dea4:	e082      	b.n	800dfac <tcp_input+0x31c>
 800dea6:	bf00      	nop
 800dea8:	20008c50 	.word	0x20008c50
 800deac:	2000c390 	.word	0x2000c390
 800deb0:	20008c54 	.word	0x20008c54
 800deb4:	20008c58 	.word	0x20008c58
 800deb8:	20008c56 	.word	0x20008c56
 800debc:	08019624 	.word	0x08019624
 800dec0:	08019658 	.word	0x08019658
 800dec4:	08019668 	.word	0x08019668
 800dec8:	08019690 	.word	0x08019690
 800decc:	0801969c 	.word	0x0801969c
 800ded0:	20008c60 	.word	0x20008c60
 800ded4:	20008c64 	.word	0x20008c64
 800ded8:	20008c6c 	.word	0x20008c6c
 800dedc:	20008c6a 	.word	0x20008c6a
 800dee0:	2000fac0 	.word	0x2000fac0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d105      	bne.n	800def8 <tcp_input+0x268>
 800deec:	4b8f      	ldr	r3, [pc, #572]	; (800e12c <tcp_input+0x49c>)
 800deee:	22e2      	movs	r2, #226	; 0xe2
 800def0:	498f      	ldr	r1, [pc, #572]	; (800e130 <tcp_input+0x4a0>)
 800def2:	4890      	ldr	r0, [pc, #576]	; (800e134 <tcp_input+0x4a4>)
 800def4:	f008 fce2 	bl	80168bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	7d1b      	ldrb	r3, [r3, #20]
 800defc:	2b0a      	cmp	r3, #10
 800defe:	d105      	bne.n	800df0c <tcp_input+0x27c>
 800df00:	4b8a      	ldr	r3, [pc, #552]	; (800e12c <tcp_input+0x49c>)
 800df02:	22e3      	movs	r2, #227	; 0xe3
 800df04:	498c      	ldr	r1, [pc, #560]	; (800e138 <tcp_input+0x4a8>)
 800df06:	488b      	ldr	r0, [pc, #556]	; (800e134 <tcp_input+0x4a4>)
 800df08:	f008 fcd8 	bl	80168bc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d105      	bne.n	800df20 <tcp_input+0x290>
 800df14:	4b85      	ldr	r3, [pc, #532]	; (800e12c <tcp_input+0x49c>)
 800df16:	22e4      	movs	r2, #228	; 0xe4
 800df18:	4988      	ldr	r1, [pc, #544]	; (800e13c <tcp_input+0x4ac>)
 800df1a:	4886      	ldr	r0, [pc, #536]	; (800e134 <tcp_input+0x4a4>)
 800df1c:	f008 fcce 	bl	80168bc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	8b1a      	ldrh	r2, [r3, #24]
 800df24:	4b86      	ldr	r3, [pc, #536]	; (800e140 <tcp_input+0x4b0>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	881b      	ldrh	r3, [r3, #0]
 800df2a:	b29b      	uxth	r3, r3
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d138      	bne.n	800dfa2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	8ada      	ldrh	r2, [r3, #22]
 800df34:	4b82      	ldr	r3, [pc, #520]	; (800e140 <tcp_input+0x4b0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d130      	bne.n	800dfa2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	685a      	ldr	r2, [r3, #4]
 800df44:	4b7f      	ldr	r3, [pc, #508]	; (800e144 <tcp_input+0x4b4>)
 800df46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800df48:	429a      	cmp	r2, r3
 800df4a:	d12a      	bne.n	800dfa2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	4b7c      	ldr	r3, [pc, #496]	; (800e144 <tcp_input+0x4b4>)
 800df52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800df54:	429a      	cmp	r2, r3
 800df56:	d124      	bne.n	800dfa2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d105      	bne.n	800df6e <tcp_input+0x2de>
 800df62:	4b72      	ldr	r3, [pc, #456]	; (800e12c <tcp_input+0x49c>)
 800df64:	22ec      	movs	r2, #236	; 0xec
 800df66:	4978      	ldr	r1, [pc, #480]	; (800e148 <tcp_input+0x4b8>)
 800df68:	4872      	ldr	r0, [pc, #456]	; (800e134 <tcp_input+0x4a4>)
 800df6a:	f008 fca7 	bl	80168bc <iprintf>
      if (prev != NULL) {
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00a      	beq.n	800df8a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	68da      	ldr	r2, [r3, #12]
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800df7c:	4b73      	ldr	r3, [pc, #460]	; (800e14c <tcp_input+0x4bc>)
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800df84:	4a71      	ldr	r2, [pc, #452]	; (800e14c <tcp_input+0x4bc>)
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	69fa      	ldr	r2, [r7, #28]
 800df90:	429a      	cmp	r2, r3
 800df92:	d10f      	bne.n	800dfb4 <tcp_input+0x324>
 800df94:	4b65      	ldr	r3, [pc, #404]	; (800e12c <tcp_input+0x49c>)
 800df96:	22f4      	movs	r2, #244	; 0xf4
 800df98:	496d      	ldr	r1, [pc, #436]	; (800e150 <tcp_input+0x4c0>)
 800df9a:	4866      	ldr	r0, [pc, #408]	; (800e134 <tcp_input+0x4a4>)
 800df9c:	f008 fc8e 	bl	80168bc <iprintf>
      break;
 800dfa0:	e008      	b.n	800dfb4 <tcp_input+0x324>
    }
    prev = pcb;
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	61fb      	str	r3, [r7, #28]
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d198      	bne.n	800dee4 <tcp_input+0x254>
 800dfb2:	e000      	b.n	800dfb6 <tcp_input+0x326>
      break;
 800dfb4:	bf00      	nop
  }

  if (pcb == NULL) {
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d173      	bne.n	800e0a4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfbc:	4b65      	ldr	r3, [pc, #404]	; (800e154 <tcp_input+0x4c4>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	61fb      	str	r3, [r7, #28]
 800dfc2:	e02f      	b.n	800e024 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	2b0a      	cmp	r3, #10
 800dfca:	d005      	beq.n	800dfd8 <tcp_input+0x348>
 800dfcc:	4b57      	ldr	r3, [pc, #348]	; (800e12c <tcp_input+0x49c>)
 800dfce:	22fe      	movs	r2, #254	; 0xfe
 800dfd0:	4961      	ldr	r1, [pc, #388]	; (800e158 <tcp_input+0x4c8>)
 800dfd2:	4858      	ldr	r0, [pc, #352]	; (800e134 <tcp_input+0x4a4>)
 800dfd4:	f008 fc72 	bl	80168bc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	8b1a      	ldrh	r2, [r3, #24]
 800dfdc:	4b58      	ldr	r3, [pc, #352]	; (800e140 <tcp_input+0x4b0>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d11a      	bne.n	800e01e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	8ada      	ldrh	r2, [r3, #22]
 800dfec:	4b54      	ldr	r3, [pc, #336]	; (800e140 <tcp_input+0x4b0>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	885b      	ldrh	r3, [r3, #2]
 800dff2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d112      	bne.n	800e01e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	4b51      	ldr	r3, [pc, #324]	; (800e144 <tcp_input+0x4b4>)
 800dffe:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e000:	429a      	cmp	r2, r3
 800e002:	d10c      	bne.n	800e01e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	4b4e      	ldr	r3, [pc, #312]	; (800e144 <tcp_input+0x4b4>)
 800e00a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d106      	bne.n	800e01e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e010:	69f8      	ldr	r0, [r7, #28]
 800e012:	f000 fb15 	bl	800e640 <tcp_timewait_input>
        pbuf_free(p);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7fd ff40 	bl	800be9c <pbuf_free>
        return;
 800e01c:	e1da      	b.n	800e3d4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	61fb      	str	r3, [r7, #28]
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1cc      	bne.n	800dfc4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e02e:	4b4b      	ldr	r3, [pc, #300]	; (800e15c <tcp_input+0x4cc>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e019      	b.n	800e06a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	8ada      	ldrh	r2, [r3, #22]
 800e03a:	4b41      	ldr	r3, [pc, #260]	; (800e140 <tcp_input+0x4b0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	885b      	ldrh	r3, [r3, #2]
 800e040:	b29b      	uxth	r3, r3
 800e042:	429a      	cmp	r2, r3
 800e044:	d10c      	bne.n	800e060 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	4b3e      	ldr	r3, [pc, #248]	; (800e144 <tcp_input+0x4b4>)
 800e04c:	695b      	ldr	r3, [r3, #20]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d00f      	beq.n	800e072 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00d      	beq.n	800e074 <tcp_input+0x3e4>
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	617b      	str	r3, [r7, #20]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d1e2      	bne.n	800e036 <tcp_input+0x3a6>
 800e070:	e000      	b.n	800e074 <tcp_input+0x3e4>
            break;
 800e072:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d014      	beq.n	800e0a4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00a      	beq.n	800e096 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	68da      	ldr	r2, [r3, #12]
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e088:	4b34      	ldr	r3, [pc, #208]	; (800e15c <tcp_input+0x4cc>)
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e090:	4a32      	ldr	r2, [pc, #200]	; (800e15c <tcp_input+0x4cc>)
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e096:	6978      	ldr	r0, [r7, #20]
 800e098:	f000 f9f0 	bl	800e47c <tcp_listen_input>
      pbuf_free(p);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7fd fefd 	bl	800be9c <pbuf_free>
      return;
 800e0a2:	e197      	b.n	800e3d4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 8164 	beq.w	800e374 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e0ac:	4b2c      	ldr	r3, [pc, #176]	; (800e160 <tcp_input+0x4d0>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	891a      	ldrh	r2, [r3, #8]
 800e0b6:	4b2a      	ldr	r3, [pc, #168]	; (800e160 <tcp_input+0x4d0>)
 800e0b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e0ba:	4a29      	ldr	r2, [pc, #164]	; (800e160 <tcp_input+0x4d0>)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e0c0:	4b1f      	ldr	r3, [pc, #124]	; (800e140 <tcp_input+0x4b0>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a26      	ldr	r2, [pc, #152]	; (800e160 <tcp_input+0x4d0>)
 800e0c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e0c8:	4b26      	ldr	r3, [pc, #152]	; (800e164 <tcp_input+0x4d4>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <tcp_input+0x4d8>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e0d4:	4b25      	ldr	r3, [pc, #148]	; (800e16c <tcp_input+0x4dc>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e0da:	4b25      	ldr	r3, [pc, #148]	; (800e170 <tcp_input+0x4e0>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	f003 0308 	and.w	r3, r3, #8
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d006      	beq.n	800e0f4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	7b5b      	ldrb	r3, [r3, #13]
 800e0ea:	f043 0301 	orr.w	r3, r3, #1
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d03d      	beq.n	800e178 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e0fc:	69f8      	ldr	r0, [r7, #28]
 800e0fe:	f7ff f98b 	bl	800d418 <tcp_process_refused_data>
 800e102:	4603      	mov	r3, r0
 800e104:	f113 0f0d 	cmn.w	r3, #13
 800e108:	d007      	beq.n	800e11a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d032      	beq.n	800e178 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e112:	4b18      	ldr	r3, [pc, #96]	; (800e174 <tcp_input+0x4e4>)
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d02e      	beq.n	800e178 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f040 8108 	bne.w	800e334 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e124:	69f8      	ldr	r0, [r7, #28]
 800e126:	f002 fe3d 	bl	8010da4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e12a:	e103      	b.n	800e334 <tcp_input+0x6a4>
 800e12c:	08019624 	.word	0x08019624
 800e130:	080196bc 	.word	0x080196bc
 800e134:	08019668 	.word	0x08019668
 800e138:	080196e4 	.word	0x080196e4
 800e13c:	08019710 	.word	0x08019710
 800e140:	20008c50 	.word	0x20008c50
 800e144:	2000c390 	.word	0x2000c390
 800e148:	08019738 	.word	0x08019738
 800e14c:	2000fac0 	.word	0x2000fac0
 800e150:	08019764 	.word	0x08019764
 800e154:	2000fad0 	.word	0x2000fad0
 800e158:	08019790 	.word	0x08019790
 800e15c:	2000fac8 	.word	0x2000fac8
 800e160:	20008c40 	.word	0x20008c40
 800e164:	20008c70 	.word	0x20008c70
 800e168:	20008c6d 	.word	0x20008c6d
 800e16c:	20008c68 	.word	0x20008c68
 800e170:	20008c6c 	.word	0x20008c6c
 800e174:	20008c6a 	.word	0x20008c6a
      }
    }
    tcp_input_pcb = pcb;
 800e178:	4a98      	ldr	r2, [pc, #608]	; (800e3dc <tcp_input+0x74c>)
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e17e:	69f8      	ldr	r0, [r7, #28]
 800e180:	f000 fac6 	bl	800e710 <tcp_process>
 800e184:	4603      	mov	r3, r0
 800e186:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e18c:	f113 0f0d 	cmn.w	r3, #13
 800e190:	f000 80d2 	beq.w	800e338 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800e194:	4b92      	ldr	r3, [pc, #584]	; (800e3e0 <tcp_input+0x750>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0308 	and.w	r3, r3, #8
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d016      	beq.n	800e1ce <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d008      	beq.n	800e1bc <tcp_input+0x52c>
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1b0:	69fa      	ldr	r2, [r7, #28]
 800e1b2:	6912      	ldr	r2, [r2, #16]
 800e1b4:	f06f 010d 	mvn.w	r1, #13
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e1bc:	69f9      	ldr	r1, [r7, #28]
 800e1be:	4889      	ldr	r0, [pc, #548]	; (800e3e4 <tcp_input+0x754>)
 800e1c0:	f7ff fc4c 	bl	800da5c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e1c4:	69f9      	ldr	r1, [r7, #28]
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	f7fd f906 	bl	800b3d8 <memp_free>
 800e1cc:	e0bf      	b.n	800e34e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e1d2:	4b85      	ldr	r3, [pc, #532]	; (800e3e8 <tcp_input+0x758>)
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d01b      	beq.n	800e212 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e1da:	4b83      	ldr	r3, [pc, #524]	; (800e3e8 <tcp_input+0x758>)
 800e1dc:	881b      	ldrh	r3, [r3, #0]
 800e1de:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d009      	beq.n	800e1fc <tcp_input+0x56c>
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ec:	69fa      	ldr	r2, [r7, #28]
 800e1ee:	6910      	ldr	r0, [r2, #16]
 800e1f0:	89fa      	ldrh	r2, [r7, #14]
 800e1f2:	69f9      	ldr	r1, [r7, #28]
 800e1f4:	4798      	blx	r3
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	74fb      	strb	r3, [r7, #19]
 800e1fa:	e001      	b.n	800e200 <tcp_input+0x570>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e204:	f113 0f0d 	cmn.w	r3, #13
 800e208:	f000 8098 	beq.w	800e33c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e20c:	4b76      	ldr	r3, [pc, #472]	; (800e3e8 <tcp_input+0x758>)
 800e20e:	2200      	movs	r2, #0
 800e210:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e212:	69f8      	ldr	r0, [r7, #28]
 800e214:	f000 f900 	bl	800e418 <tcp_input_delayed_close>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f040 8090 	bne.w	800e340 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e220:	4b72      	ldr	r3, [pc, #456]	; (800e3ec <tcp_input+0x75c>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d041      	beq.n	800e2ac <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d006      	beq.n	800e23e <tcp_input+0x5ae>
 800e230:	4b6f      	ldr	r3, [pc, #444]	; (800e3f0 <tcp_input+0x760>)
 800e232:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e236:	496f      	ldr	r1, [pc, #444]	; (800e3f4 <tcp_input+0x764>)
 800e238:	486f      	ldr	r0, [pc, #444]	; (800e3f8 <tcp_input+0x768>)
 800e23a:	f008 fb3f 	bl	80168bc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	7e9b      	ldrb	r3, [r3, #26]
 800e242:	f003 0310 	and.w	r3, r3, #16
 800e246:	2b00      	cmp	r3, #0
 800e248:	d008      	beq.n	800e25c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e24a:	4b68      	ldr	r3, [pc, #416]	; (800e3ec <tcp_input+0x75c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fd fe24 	bl	800be9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f7fe fb77 	bl	800c948 <tcp_abort>
            goto aborted;
 800e25a:	e078      	b.n	800e34e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00c      	beq.n	800e280 <tcp_input+0x5f0>
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	6918      	ldr	r0, [r3, #16]
 800e270:	4b5e      	ldr	r3, [pc, #376]	; (800e3ec <tcp_input+0x75c>)
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	2300      	movs	r3, #0
 800e276:	69f9      	ldr	r1, [r7, #28]
 800e278:	47a0      	blx	r4
 800e27a:	4603      	mov	r3, r0
 800e27c:	74fb      	strb	r3, [r7, #19]
 800e27e:	e008      	b.n	800e292 <tcp_input+0x602>
 800e280:	4b5a      	ldr	r3, [pc, #360]	; (800e3ec <tcp_input+0x75c>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	2300      	movs	r3, #0
 800e286:	69f9      	ldr	r1, [r7, #28]
 800e288:	2000      	movs	r0, #0
 800e28a:	f7ff f985 	bl	800d598 <tcp_recv_null>
 800e28e:	4603      	mov	r3, r0
 800e290:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e296:	f113 0f0d 	cmn.w	r3, #13
 800e29a:	d053      	beq.n	800e344 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e29c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d003      	beq.n	800e2ac <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e2a4:	4b51      	ldr	r3, [pc, #324]	; (800e3ec <tcp_input+0x75c>)
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e2ac:	4b4c      	ldr	r3, [pc, #304]	; (800e3e0 <tcp_input+0x750>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	f003 0320 	and.w	r3, r3, #32
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d030      	beq.n	800e31a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d009      	beq.n	800e2d4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c4:	7b5a      	ldrb	r2, [r3, #13]
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ca:	f042 0220 	orr.w	r2, r2, #32
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	735a      	strb	r2, [r3, #13]
 800e2d2:	e022      	b.n	800e31a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e2dc:	d005      	beq.n	800e2ea <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <tcp_input+0x67c>
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	6918      	ldr	r0, [r3, #16]
 800e2fe:	2300      	movs	r3, #0
 800e300:	2200      	movs	r2, #0
 800e302:	69f9      	ldr	r1, [r7, #28]
 800e304:	47a0      	blx	r4
 800e306:	4603      	mov	r3, r0
 800e308:	74fb      	strb	r3, [r7, #19]
 800e30a:	e001      	b.n	800e310 <tcp_input+0x680>
 800e30c:	2300      	movs	r3, #0
 800e30e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e314:	f113 0f0d 	cmn.w	r3, #13
 800e318:	d016      	beq.n	800e348 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e31a:	4b30      	ldr	r3, [pc, #192]	; (800e3dc <tcp_input+0x74c>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e320:	69f8      	ldr	r0, [r7, #28]
 800e322:	f000 f879 	bl	800e418 <tcp_input_delayed_close>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10f      	bne.n	800e34c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e32c:	69f8      	ldr	r0, [r7, #28]
 800e32e:	f002 fd95 	bl	8010e5c <tcp_output>
 800e332:	e00c      	b.n	800e34e <tcp_input+0x6be>
        goto aborted;
 800e334:	bf00      	nop
 800e336:	e00a      	b.n	800e34e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e338:	bf00      	nop
 800e33a:	e008      	b.n	800e34e <tcp_input+0x6be>
              goto aborted;
 800e33c:	bf00      	nop
 800e33e:	e006      	b.n	800e34e <tcp_input+0x6be>
          goto aborted;
 800e340:	bf00      	nop
 800e342:	e004      	b.n	800e34e <tcp_input+0x6be>
            goto aborted;
 800e344:	bf00      	nop
 800e346:	e002      	b.n	800e34e <tcp_input+0x6be>
              goto aborted;
 800e348:	bf00      	nop
 800e34a:	e000      	b.n	800e34e <tcp_input+0x6be>
          goto aborted;
 800e34c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e34e:	4b23      	ldr	r3, [pc, #140]	; (800e3dc <tcp_input+0x74c>)
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e354:	4b25      	ldr	r3, [pc, #148]	; (800e3ec <tcp_input+0x75c>)
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e35a:	4b28      	ldr	r3, [pc, #160]	; (800e3fc <tcp_input+0x76c>)
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d037      	beq.n	800e3d2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800e362:	4b26      	ldr	r3, [pc, #152]	; (800e3fc <tcp_input+0x76c>)
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	4618      	mov	r0, r3
 800e368:	f7fd fd98 	bl	800be9c <pbuf_free>
      inseg.p = NULL;
 800e36c:	4b23      	ldr	r3, [pc, #140]	; (800e3fc <tcp_input+0x76c>)
 800e36e:	2200      	movs	r2, #0
 800e370:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e372:	e02e      	b.n	800e3d2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e374:	4b22      	ldr	r3, [pc, #136]	; (800e400 <tcp_input+0x770>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	899b      	ldrh	r3, [r3, #12]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7fc fbb5 	bl	800aaec <lwip_htons>
 800e382:	4603      	mov	r3, r0
 800e384:	f003 0304 	and.w	r3, r3, #4
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d115      	bne.n	800e3b8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e38c:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <tcp_input+0x774>)
 800e38e:	6818      	ldr	r0, [r3, #0]
 800e390:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <tcp_input+0x778>)
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	461a      	mov	r2, r3
 800e396:	4b1d      	ldr	r3, [pc, #116]	; (800e40c <tcp_input+0x77c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e39c:	4b18      	ldr	r3, [pc, #96]	; (800e400 <tcp_input+0x770>)
 800e39e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3a0:	885b      	ldrh	r3, [r3, #2]
 800e3a2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3a4:	4a16      	ldr	r2, [pc, #88]	; (800e400 <tcp_input+0x770>)
 800e3a6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3a8:	8812      	ldrh	r2, [r2, #0]
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	9201      	str	r2, [sp, #4]
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	4b17      	ldr	r3, [pc, #92]	; (800e410 <tcp_input+0x780>)
 800e3b2:	4a18      	ldr	r2, [pc, #96]	; (800e414 <tcp_input+0x784>)
 800e3b4:	f002 ffdc 	bl	8011370 <tcp_rst>
    pbuf_free(p);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7fd fd6f 	bl	800be9c <pbuf_free>
  return;
 800e3be:	e008      	b.n	800e3d2 <tcp_input+0x742>
    goto dropped;
 800e3c0:	bf00      	nop
 800e3c2:	e002      	b.n	800e3ca <tcp_input+0x73a>
dropped:
 800e3c4:	bf00      	nop
 800e3c6:	e000      	b.n	800e3ca <tcp_input+0x73a>
      goto dropped;
 800e3c8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7fd fd66 	bl	800be9c <pbuf_free>
 800e3d0:	e000      	b.n	800e3d4 <tcp_input+0x744>
  return;
 800e3d2:	bf00      	nop
}
 800e3d4:	3724      	adds	r7, #36	; 0x24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd90      	pop	{r4, r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	2000fad4 	.word	0x2000fad4
 800e3e0:	20008c6d 	.word	0x20008c6d
 800e3e4:	2000fac0 	.word	0x2000fac0
 800e3e8:	20008c68 	.word	0x20008c68
 800e3ec:	20008c70 	.word	0x20008c70
 800e3f0:	08019624 	.word	0x08019624
 800e3f4:	080197c0 	.word	0x080197c0
 800e3f8:	08019668 	.word	0x08019668
 800e3fc:	20008c40 	.word	0x20008c40
 800e400:	20008c50 	.word	0x20008c50
 800e404:	20008c64 	.word	0x20008c64
 800e408:	20008c6a 	.word	0x20008c6a
 800e40c:	20008c60 	.word	0x20008c60
 800e410:	2000c3a0 	.word	0x2000c3a0
 800e414:	2000c3a4 	.word	0x2000c3a4

0800e418 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e420:	4b14      	ldr	r3, [pc, #80]	; (800e474 <tcp_input_delayed_close+0x5c>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d01d      	beq.n	800e468 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	7e9b      	ldrb	r3, [r3, #26]
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10d      	bne.n	800e454 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d008      	beq.n	800e454 <tcp_input_delayed_close+0x3c>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	6912      	ldr	r2, [r2, #16]
 800e44c:	f06f 010e 	mvn.w	r1, #14
 800e450:	4610      	mov	r0, r2
 800e452:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4808      	ldr	r0, [pc, #32]	; (800e478 <tcp_input_delayed_close+0x60>)
 800e458:	f7ff fb00 	bl	800da5c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	2001      	movs	r0, #1
 800e460:	f7fc ffba 	bl	800b3d8 <memp_free>
    return 1;
 800e464:	2301      	movs	r3, #1
 800e466:	e000      	b.n	800e46a <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	20008c6d 	.word	0x20008c6d
 800e478:	2000fac0 	.word	0x2000fac0

0800e47c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af02      	add	r7, sp, #8
 800e482:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e484:	4b64      	ldr	r3, [pc, #400]	; (800e618 <tcp_listen_input+0x19c>)
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	f003 0304 	and.w	r3, r3, #4
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f040 80bc 	bne.w	800e60a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e492:	4b61      	ldr	r3, [pc, #388]	; (800e618 <tcp_listen_input+0x19c>)
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	f003 0310 	and.w	r3, r3, #16
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d016      	beq.n	800e4cc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e49e:	4b5f      	ldr	r3, [pc, #380]	; (800e61c <tcp_listen_input+0x1a0>)
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	4b5f      	ldr	r3, [pc, #380]	; (800e620 <tcp_listen_input+0x1a4>)
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	4b5e      	ldr	r3, [pc, #376]	; (800e624 <tcp_listen_input+0x1a8>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4ae:	4b5e      	ldr	r3, [pc, #376]	; (800e628 <tcp_listen_input+0x1ac>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4b2:	885b      	ldrh	r3, [r3, #2]
 800e4b4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4b6:	4a5c      	ldr	r2, [pc, #368]	; (800e628 <tcp_listen_input+0x1ac>)
 800e4b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4ba:	8812      	ldrh	r2, [r2, #0]
 800e4bc:	b292      	uxth	r2, r2
 800e4be:	9201      	str	r2, [sp, #4]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	4b5a      	ldr	r3, [pc, #360]	; (800e62c <tcp_listen_input+0x1b0>)
 800e4c4:	4a5a      	ldr	r2, [pc, #360]	; (800e630 <tcp_listen_input+0x1b4>)
 800e4c6:	f002 ff53 	bl	8011370 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e4ca:	e0a0      	b.n	800e60e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800e4cc:	4b52      	ldr	r3, [pc, #328]	; (800e618 <tcp_listen_input+0x19c>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 809a 	beq.w	800e60e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7d5b      	ldrb	r3, [r3, #21]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff f938 	bl	800d754 <tcp_alloc>
 800e4e4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d111      	bne.n	800e510 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d00a      	beq.n	800e50a <tcp_listen_input+0x8e>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	699b      	ldr	r3, [r3, #24]
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	6910      	ldr	r0, [r2, #16]
 800e4fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e500:	2100      	movs	r1, #0
 800e502:	4798      	blx	r3
 800e504:	4603      	mov	r3, r0
 800e506:	73bb      	strb	r3, [r7, #14]
      return;
 800e508:	e082      	b.n	800e610 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e50a:	23f0      	movs	r3, #240	; 0xf0
 800e50c:	73bb      	strb	r3, [r7, #14]
      return;
 800e50e:	e07f      	b.n	800e610 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e510:	4b48      	ldr	r3, [pc, #288]	; (800e634 <tcp_listen_input+0x1b8>)
 800e512:	695a      	ldr	r2, [r3, #20]
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e518:	4b46      	ldr	r3, [pc, #280]	; (800e634 <tcp_listen_input+0x1b8>)
 800e51a:	691a      	ldr	r2, [r3, #16]
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	8ada      	ldrh	r2, [r3, #22]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e528:	4b3f      	ldr	r3, [pc, #252]	; (800e628 <tcp_listen_input+0x1ac>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	881b      	ldrh	r3, [r3, #0]
 800e52e:	b29a      	uxth	r2, r3
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	2203      	movs	r2, #3
 800e538:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e53a:	4b3a      	ldr	r3, [pc, #232]	; (800e624 <tcp_listen_input+0x1a8>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	1c5a      	adds	r2, r3, #1
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e54c:	6978      	ldr	r0, [r7, #20]
 800e54e:	f7ff fb01 	bl	800db54 <tcp_next_iss>
 800e552:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	693a      	ldr	r2, [r7, #16]
 800e564:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e56c:	4b2d      	ldr	r3, [pc, #180]	; (800e624 <tcp_listen_input+0x1a8>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	1e5a      	subs	r2, r3, #1
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	691a      	ldr	r2, [r3, #16]
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7a1b      	ldrb	r3, [r3, #8]
 800e588:	f003 030c 	and.w	r3, r3, #12
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e592:	4b29      	ldr	r3, [pc, #164]	; (800e638 <tcp_listen_input+0x1bc>)
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	60da      	str	r2, [r3, #12]
 800e59a:	4a27      	ldr	r2, [pc, #156]	; (800e638 <tcp_listen_input+0x1bc>)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	f003 f936 	bl	8011810 <tcp_timer_needed>
 800e5a4:	4b25      	ldr	r3, [pc, #148]	; (800e63c <tcp_listen_input+0x1c0>)
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e5aa:	6978      	ldr	r0, [r7, #20]
 800e5ac:	f001 fd14 	bl	800ffd8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e5b0:	4b1d      	ldr	r3, [pc, #116]	; (800e628 <tcp_listen_input+0x1ac>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	89db      	ldrh	r3, [r3, #14]
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f7ff fad5 	bl	800db84 <tcp_eff_send_mss_impl>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	461a      	mov	r2, r3
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e5e2:	2112      	movs	r1, #18
 800e5e4:	6978      	ldr	r0, [r7, #20]
 800e5e6:	f002 fae1 	bl	8010bac <tcp_enqueue_flags>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e5ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	6978      	ldr	r0, [r7, #20]
 800e5fa:	f7fe f8f3 	bl	800c7e4 <tcp_abandon>
      return;
 800e5fe:	e007      	b.n	800e610 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800e600:	6978      	ldr	r0, [r7, #20]
 800e602:	f002 fc2b 	bl	8010e5c <tcp_output>
  return;
 800e606:	bf00      	nop
 800e608:	e001      	b.n	800e60e <tcp_listen_input+0x192>
    return;
 800e60a:	bf00      	nop
 800e60c:	e000      	b.n	800e610 <tcp_listen_input+0x194>
  return;
 800e60e:	bf00      	nop
}
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20008c6c 	.word	0x20008c6c
 800e61c:	20008c64 	.word	0x20008c64
 800e620:	20008c6a 	.word	0x20008c6a
 800e624:	20008c60 	.word	0x20008c60
 800e628:	20008c50 	.word	0x20008c50
 800e62c:	2000c3a0 	.word	0x2000c3a0
 800e630:	2000c3a4 	.word	0x2000c3a4
 800e634:	2000c390 	.word	0x2000c390
 800e638:	2000fac0 	.word	0x2000fac0
 800e63c:	2000fabc 	.word	0x2000fabc

0800e640 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af02      	add	r7, sp, #8
 800e646:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e648:	4b29      	ldr	r3, [pc, #164]	; (800e6f0 <tcp_timewait_input+0xb0>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 0304 	and.w	r3, r3, #4
 800e650:	2b00      	cmp	r3, #0
 800e652:	d147      	bne.n	800e6e4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e654:	4b26      	ldr	r3, [pc, #152]	; (800e6f0 <tcp_timewait_input+0xb0>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	f003 0302 	and.w	r3, r3, #2
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d027      	beq.n	800e6b0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e660:	4b24      	ldr	r3, [pc, #144]	; (800e6f4 <tcp_timewait_input+0xb4>)
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	db2a      	blt.n	800e6c4 <tcp_timewait_input+0x84>
 800e66e:	4b21      	ldr	r3, [pc, #132]	; (800e6f4 <tcp_timewait_input+0xb4>)
 800e670:	681a      	ldr	r2, [r3, #0]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e67a:	440b      	add	r3, r1
 800e67c:	1ad3      	subs	r3, r2, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	dc20      	bgt.n	800e6c4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e682:	4b1d      	ldr	r3, [pc, #116]	; (800e6f8 <tcp_timewait_input+0xb8>)
 800e684:	6818      	ldr	r0, [r3, #0]
 800e686:	4b1d      	ldr	r3, [pc, #116]	; (800e6fc <tcp_timewait_input+0xbc>)
 800e688:	881b      	ldrh	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	4b19      	ldr	r3, [pc, #100]	; (800e6f4 <tcp_timewait_input+0xb4>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e692:	4b1b      	ldr	r3, [pc, #108]	; (800e700 <tcp_timewait_input+0xc0>)
 800e694:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e696:	885b      	ldrh	r3, [r3, #2]
 800e698:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e69a:	4a19      	ldr	r2, [pc, #100]	; (800e700 <tcp_timewait_input+0xc0>)
 800e69c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e69e:	8812      	ldrh	r2, [r2, #0]
 800e6a0:	b292      	uxth	r2, r2
 800e6a2:	9201      	str	r2, [sp, #4]
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	4b17      	ldr	r3, [pc, #92]	; (800e704 <tcp_timewait_input+0xc4>)
 800e6a8:	4a17      	ldr	r2, [pc, #92]	; (800e708 <tcp_timewait_input+0xc8>)
 800e6aa:	f002 fe61 	bl	8011370 <tcp_rst>
      return;
 800e6ae:	e01c      	b.n	800e6ea <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800e6b0:	4b0f      	ldr	r3, [pc, #60]	; (800e6f0 <tcp_timewait_input+0xb0>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d003      	beq.n	800e6c4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e6bc:	4b13      	ldr	r3, [pc, #76]	; (800e70c <tcp_timewait_input+0xcc>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e6c4:	4b0d      	ldr	r3, [pc, #52]	; (800e6fc <tcp_timewait_input+0xbc>)
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00d      	beq.n	800e6e8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7e9b      	ldrb	r3, [r3, #26]
 800e6d0:	f043 0302 	orr.w	r3, r3, #2
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f002 fbbe 	bl	8010e5c <tcp_output>
  }
  return;
 800e6e0:	bf00      	nop
 800e6e2:	e001      	b.n	800e6e8 <tcp_timewait_input+0xa8>
    return;
 800e6e4:	bf00      	nop
 800e6e6:	e000      	b.n	800e6ea <tcp_timewait_input+0xaa>
  return;
 800e6e8:	bf00      	nop
}
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	20008c6c 	.word	0x20008c6c
 800e6f4:	20008c60 	.word	0x20008c60
 800e6f8:	20008c64 	.word	0x20008c64
 800e6fc:	20008c6a 	.word	0x20008c6a
 800e700:	20008c50 	.word	0x20008c50
 800e704:	2000c3a0 	.word	0x2000c3a0
 800e708:	2000c3a4 	.word	0x2000c3a4
 800e70c:	2000fac4 	.word	0x2000fac4

0800e710 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08a      	sub	sp, #40	; 0x28
 800e714:	af02      	add	r7, sp, #8
 800e716:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e71c:	2300      	movs	r3, #0
 800e71e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e720:	4ba4      	ldr	r3, [pc, #656]	; (800e9b4 <tcp_process+0x2a4>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d04e      	beq.n	800e7ca <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d108      	bne.n	800e746 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e738:	4b9f      	ldr	r3, [pc, #636]	; (800e9b8 <tcp_process+0x2a8>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d123      	bne.n	800e788 <tcp_process+0x78>
        acceptable = 1;
 800e740:	2301      	movs	r3, #1
 800e742:	76fb      	strb	r3, [r7, #27]
 800e744:	e020      	b.n	800e788 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e74a:	4b9c      	ldr	r3, [pc, #624]	; (800e9bc <tcp_process+0x2ac>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d102      	bne.n	800e758 <tcp_process+0x48>
        acceptable = 1;
 800e752:	2301      	movs	r3, #1
 800e754:	76fb      	strb	r3, [r7, #27]
 800e756:	e017      	b.n	800e788 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e758:	4b98      	ldr	r3, [pc, #608]	; (800e9bc <tcp_process+0x2ac>)
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	db10      	blt.n	800e788 <tcp_process+0x78>
 800e766:	4b95      	ldr	r3, [pc, #596]	; (800e9bc <tcp_process+0x2ac>)
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e772:	440b      	add	r3, r1
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	dc06      	bgt.n	800e788 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7e9b      	ldrb	r3, [r3, #26]
 800e77e:	f043 0302 	orr.w	r3, r3, #2
 800e782:	b2da      	uxtb	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e788:	7efb      	ldrb	r3, [r7, #27]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d01b      	beq.n	800e7c6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d106      	bne.n	800e7a4 <tcp_process+0x94>
 800e796:	4b8a      	ldr	r3, [pc, #552]	; (800e9c0 <tcp_process+0x2b0>)
 800e798:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e79c:	4989      	ldr	r1, [pc, #548]	; (800e9c4 <tcp_process+0x2b4>)
 800e79e:	488a      	ldr	r0, [pc, #552]	; (800e9c8 <tcp_process+0x2b8>)
 800e7a0:	f008 f88c 	bl	80168bc <iprintf>
      recv_flags |= TF_RESET;
 800e7a4:	4b89      	ldr	r3, [pc, #548]	; (800e9cc <tcp_process+0x2bc>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	f043 0308 	orr.w	r3, r3, #8
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	4b87      	ldr	r3, [pc, #540]	; (800e9cc <tcp_process+0x2bc>)
 800e7b0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7e9b      	ldrb	r3, [r3, #26]
 800e7b6:	f023 0301 	bic.w	r3, r3, #1
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800e7c0:	f06f 030d 	mvn.w	r3, #13
 800e7c4:	e34d      	b.n	800ee62 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e34b      	b.n	800ee62 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e7ca:	4b7a      	ldr	r3, [pc, #488]	; (800e9b4 <tcp_process+0x2a4>)
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	f003 0302 	and.w	r3, r3, #2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d010      	beq.n	800e7f8 <tcp_process+0xe8>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	7d1b      	ldrb	r3, [r3, #20]
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d00c      	beq.n	800e7f8 <tcp_process+0xe8>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7d1b      	ldrb	r3, [r3, #20]
 800e7e2:	2b03      	cmp	r3, #3
 800e7e4:	d008      	beq.n	800e7f8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	7e9b      	ldrb	r3, [r3, #26]
 800e7ea:	f043 0302 	orr.w	r3, r3, #2
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	e334      	b.n	800ee62 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7e9b      	ldrb	r3, [r3, #26]
 800e7fc:	f003 0310 	and.w	r3, r3, #16
 800e800:	2b00      	cmp	r3, #0
 800e802:	d103      	bne.n	800e80c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e804:	4b72      	ldr	r3, [pc, #456]	; (800e9d0 <tcp_process+0x2c0>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f001 fbdf 	bl	800ffd8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	7d1b      	ldrb	r3, [r3, #20]
 800e81e:	3b02      	subs	r3, #2
 800e820:	2b07      	cmp	r3, #7
 800e822:	f200 830e 	bhi.w	800ee42 <tcp_process+0x732>
 800e826:	a201      	add	r2, pc, #4	; (adr r2, 800e82c <tcp_process+0x11c>)
 800e828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e82c:	0800e84d 	.word	0x0800e84d
 800e830:	0800ea45 	.word	0x0800ea45
 800e834:	0800eb9d 	.word	0x0800eb9d
 800e838:	0800ebc7 	.word	0x0800ebc7
 800e83c:	0800ecf1 	.word	0x0800ecf1
 800e840:	0800eb9d 	.word	0x0800eb9d
 800e844:	0800ed7d 	.word	0x0800ed7d
 800e848:	0800ee0d 	.word	0x0800ee0d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e84c:	4b59      	ldr	r3, [pc, #356]	; (800e9b4 <tcp_process+0x2a4>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	f003 0310 	and.w	r3, r3, #16
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80cb 	beq.w	800e9f0 <tcp_process+0x2e0>
 800e85a:	4b56      	ldr	r3, [pc, #344]	; (800e9b4 <tcp_process+0x2a4>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f003 0302 	and.w	r3, r3, #2
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 80c4 	beq.w	800e9f0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	4b52      	ldr	r3, [pc, #328]	; (800e9b8 <tcp_process+0x2a8>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	429a      	cmp	r2, r3
 800e874:	f040 80bc 	bne.w	800e9f0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800e878:	4b50      	ldr	r3, [pc, #320]	; (800e9bc <tcp_process+0x2ac>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800e88a:	4b4b      	ldr	r3, [pc, #300]	; (800e9b8 <tcp_process+0x2a8>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800e892:	4b50      	ldr	r3, [pc, #320]	; (800e9d4 <tcp_process+0x2c4>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	89db      	ldrh	r3, [r3, #14]
 800e898:	b29a      	uxth	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e8ac:	4b43      	ldr	r3, [pc, #268]	; (800e9bc <tcp_process+0x2ac>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	1e5a      	subs	r2, r3, #1
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2204      	movs	r2, #4
 800e8ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f7ff f95c 	bl	800db84 <tcp_eff_send_mss_impl>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	bf38      	it	cc
 800e8e2:	461a      	movcc	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	bf28      	it	cs
 800e8ee:	4613      	movcs	r3, r2
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_process+0x200>
 800e902:	4b2f      	ldr	r3, [pc, #188]	; (800e9c0 <tcp_process+0x2b0>)
 800e904:	f240 321a 	movw	r2, #794	; 0x31a
 800e908:	4933      	ldr	r1, [pc, #204]	; (800e9d8 <tcp_process+0x2c8>)
 800e90a:	482f      	ldr	r0, [pc, #188]	; (800e9c8 <tcp_process+0x2b8>)
 800e90c:	f007 ffd6 	bl	80168bc <iprintf>
      --pcb->snd_queuelen;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e916:	3b01      	subs	r3, #1
 800e918:	b29a      	uxth	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e924:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d111      	bne.n	800e950 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e930:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d106      	bne.n	800e946 <tcp_process+0x236>
 800e938:	4b21      	ldr	r3, [pc, #132]	; (800e9c0 <tcp_process+0x2b0>)
 800e93a:	f240 3222 	movw	r2, #802	; 0x322
 800e93e:	4927      	ldr	r1, [pc, #156]	; (800e9dc <tcp_process+0x2cc>)
 800e940:	4821      	ldr	r0, [pc, #132]	; (800e9c8 <tcp_process+0x2b8>)
 800e942:	f007 ffbb 	bl	80168bc <iprintf>
        pcb->unsent = rseg->next;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	669a      	str	r2, [r3, #104]	; 0x68
 800e94e:	e003      	b.n	800e958 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800e958:	69f8      	ldr	r0, [r7, #28]
 800e95a:	f7fe fdda 	bl	800d512 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e962:	2b00      	cmp	r3, #0
 800e964:	d104      	bne.n	800e970 <tcp_process+0x260>
        pcb->rtime = -1;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e96c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e96e:	e006      	b.n	800e97e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00a      	beq.n	800e99e <tcp_process+0x28e>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	6910      	ldr	r0, [r2, #16]
 800e992:	2200      	movs	r2, #0
 800e994:	6879      	ldr	r1, [r7, #4]
 800e996:	4798      	blx	r3
 800e998:	4603      	mov	r3, r0
 800e99a:	76bb      	strb	r3, [r7, #26]
 800e99c:	e001      	b.n	800e9a2 <tcp_process+0x292>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800e9a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9a6:	f113 0f0d 	cmn.w	r3, #13
 800e9aa:	d119      	bne.n	800e9e0 <tcp_process+0x2d0>
        return ERR_ABRT;
 800e9ac:	f06f 030c 	mvn.w	r3, #12
 800e9b0:	e257      	b.n	800ee62 <tcp_process+0x752>
 800e9b2:	bf00      	nop
 800e9b4:	20008c6c 	.word	0x20008c6c
 800e9b8:	20008c64 	.word	0x20008c64
 800e9bc:	20008c60 	.word	0x20008c60
 800e9c0:	08019624 	.word	0x08019624
 800e9c4:	080197dc 	.word	0x080197dc
 800e9c8:	08019668 	.word	0x08019668
 800e9cc:	20008c6d 	.word	0x20008c6d
 800e9d0:	2000fac4 	.word	0x2000fac4
 800e9d4:	20008c50 	.word	0x20008c50
 800e9d8:	080197fc 	.word	0x080197fc
 800e9dc:	08019814 	.word	0x08019814
      }
      tcp_ack_now(pcb);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	7e9b      	ldrb	r3, [r3, #26]
 800e9e4:	f043 0302 	orr.w	r3, r3, #2
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800e9ee:	e22a      	b.n	800ee46 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800e9f0:	4b9f      	ldr	r3, [pc, #636]	; (800ec70 <tcp_process+0x560>)
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	f003 0310 	and.w	r3, r3, #16
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 8224 	beq.w	800ee46 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9fe:	4b9d      	ldr	r3, [pc, #628]	; (800ec74 <tcp_process+0x564>)
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	4b9d      	ldr	r3, [pc, #628]	; (800ec78 <tcp_process+0x568>)
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	4b9c      	ldr	r3, [pc, #624]	; (800ec7c <tcp_process+0x56c>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea0e:	4b9c      	ldr	r3, [pc, #624]	; (800ec80 <tcp_process+0x570>)
 800ea10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea12:	885b      	ldrh	r3, [r3, #2]
 800ea14:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea16:	4a9a      	ldr	r2, [pc, #616]	; (800ec80 <tcp_process+0x570>)
 800ea18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea1a:	8812      	ldrh	r2, [r2, #0]
 800ea1c:	b292      	uxth	r2, r2
 800ea1e:	9201      	str	r2, [sp, #4]
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	4b98      	ldr	r3, [pc, #608]	; (800ec84 <tcp_process+0x574>)
 800ea24:	4a98      	ldr	r2, [pc, #608]	; (800ec88 <tcp_process+0x578>)
 800ea26:	f002 fca3 	bl	8011370 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea30:	2b05      	cmp	r3, #5
 800ea32:	f200 8208 	bhi.w	800ee46 <tcp_process+0x736>
        pcb->rtime = 0;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f002 fd0d 	bl	801145c <tcp_rexmit_rto>
    break;
 800ea42:	e200      	b.n	800ee46 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ea44:	4b8a      	ldr	r3, [pc, #552]	; (800ec70 <tcp_process+0x560>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	f003 0310 	and.w	r3, r3, #16
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 8091 	beq.w	800eb74 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800ea52:	4b88      	ldr	r3, [pc, #544]	; (800ec74 <tcp_process+0x564>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db71      	blt.n	800eb46 <tcp_process+0x436>
 800ea62:	4b84      	ldr	r3, [pc, #528]	; (800ec74 <tcp_process+0x564>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	dc6a      	bgt.n	800eb46 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2204      	movs	r2, #4
 800ea74:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00b      	beq.n	800ea96 <tcp_process+0x386>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea82:	699b      	ldr	r3, [r3, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <tcp_process+0x386>
 800ea88:	4b80      	ldr	r3, [pc, #512]	; (800ec8c <tcp_process+0x57c>)
 800ea8a:	f240 3251 	movw	r2, #849	; 0x351
 800ea8e:	4980      	ldr	r1, [pc, #512]	; (800ec90 <tcp_process+0x580>)
 800ea90:	4880      	ldr	r0, [pc, #512]	; (800ec94 <tcp_process+0x584>)
 800ea92:	f007 ff13 	bl	80168bc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d102      	bne.n	800eaa4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ea9e:	23fa      	movs	r3, #250	; 0xfa
 800eaa0:	76bb      	strb	r3, [r7, #26]
 800eaa2:	e011      	b.n	800eac8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaa8:	699b      	ldr	r3, [r3, #24]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <tcp_process+0x3b4>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eab2:	699b      	ldr	r3, [r3, #24]
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	6910      	ldr	r0, [r2, #16]
 800eab8:	2200      	movs	r2, #0
 800eaba:	6879      	ldr	r1, [r7, #4]
 800eabc:	4798      	blx	r3
 800eabe:	4603      	mov	r3, r0
 800eac0:	76bb      	strb	r3, [r7, #26]
 800eac2:	e001      	b.n	800eac8 <tcp_process+0x3b8>
 800eac4:	23f0      	movs	r3, #240	; 0xf0
 800eac6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800eac8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00a      	beq.n	800eae6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ead0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ead4:	f113 0f0d 	cmn.w	r3, #13
 800ead8:	d002      	beq.n	800eae0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7fd ff34 	bl	800c948 <tcp_abort>
          }
          return ERR_ABRT;
 800eae0:	f06f 030c 	mvn.w	r3, #12
 800eae4:	e1bd      	b.n	800ee62 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa42 	bl	800ef70 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800eaec:	4b6a      	ldr	r3, [pc, #424]	; (800ec98 <tcp_process+0x588>)
 800eaee:	881b      	ldrh	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <tcp_process+0x3f0>
          recv_acked--;
 800eaf4:	4b68      	ldr	r3, [pc, #416]	; (800ec98 <tcp_process+0x588>)
 800eaf6:	881b      	ldrh	r3, [r3, #0]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	4b66      	ldr	r3, [pc, #408]	; (800ec98 <tcp_process+0x588>)
 800eafe:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	bf38      	it	cc
 800eb0e:	461a      	movcc	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4293      	cmp	r3, r2
 800eb18:	bf28      	it	cs
 800eb1a:	4613      	movcs	r3, r2
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800eb24:	4b5d      	ldr	r3, [pc, #372]	; (800ec9c <tcp_process+0x58c>)
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	f003 0320 	and.w	r3, r3, #32
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d034      	beq.n	800eb9a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	7e9b      	ldrb	r3, [r3, #26]
 800eb34:	f043 0302 	orr.w	r3, r3, #2
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2207      	movs	r2, #7
 800eb42:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800eb44:	e029      	b.n	800eb9a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb46:	4b4b      	ldr	r3, [pc, #300]	; (800ec74 <tcp_process+0x564>)
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	4b4b      	ldr	r3, [pc, #300]	; (800ec78 <tcp_process+0x568>)
 800eb4c:	881b      	ldrh	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	4b4a      	ldr	r3, [pc, #296]	; (800ec7c <tcp_process+0x56c>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb56:	4b4a      	ldr	r3, [pc, #296]	; (800ec80 <tcp_process+0x570>)
 800eb58:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb5a:	885b      	ldrh	r3, [r3, #2]
 800eb5c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb5e:	4a48      	ldr	r2, [pc, #288]	; (800ec80 <tcp_process+0x570>)
 800eb60:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb62:	8812      	ldrh	r2, [r2, #0]
 800eb64:	b292      	uxth	r2, r2
 800eb66:	9201      	str	r2, [sp, #4]
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	4b46      	ldr	r3, [pc, #280]	; (800ec84 <tcp_process+0x574>)
 800eb6c:	4a46      	ldr	r2, [pc, #280]	; (800ec88 <tcp_process+0x578>)
 800eb6e:	f002 fbff 	bl	8011370 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800eb72:	e16a      	b.n	800ee4a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eb74:	4b3e      	ldr	r3, [pc, #248]	; (800ec70 <tcp_process+0x560>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 8164 	beq.w	800ee4a <tcp_process+0x73a>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb86:	1e5a      	subs	r2, r3, #1
 800eb88:	4b3c      	ldr	r3, [pc, #240]	; (800ec7c <tcp_process+0x56c>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	f040 815c 	bne.w	800ee4a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f002 fc98 	bl	80114c8 <tcp_rexmit>
    break;
 800eb98:	e157      	b.n	800ee4a <tcp_process+0x73a>
 800eb9a:	e156      	b.n	800ee4a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 f9e7 	bl	800ef70 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eba2:	4b3e      	ldr	r3, [pc, #248]	; (800ec9c <tcp_process+0x58c>)
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 0320 	and.w	r3, r3, #32
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f000 814f 	beq.w	800ee4e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7e9b      	ldrb	r3, [r3, #26]
 800ebb4:	f043 0302 	orr.w	r3, r3, #2
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2207      	movs	r2, #7
 800ebc2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ebc4:	e143      	b.n	800ee4e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 f9d2 	bl	800ef70 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ebcc:	4b33      	ldr	r3, [pc, #204]	; (800ec9c <tcp_process+0x58c>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	f003 0320 	and.w	r3, r3, #32
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d074      	beq.n	800ecc2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebd8:	4b25      	ldr	r3, [pc, #148]	; (800ec70 <tcp_process+0x560>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	f003 0310 	and.w	r3, r3, #16
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d063      	beq.n	800ecac <tcp_process+0x59c>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebe8:	4b22      	ldr	r3, [pc, #136]	; (800ec74 <tcp_process+0x564>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d15d      	bne.n	800ecac <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d159      	bne.n	800ecac <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	7e9b      	ldrb	r3, [r3, #26]
 800ebfc:	f043 0302 	orr.w	r3, r3, #2
 800ec00:	b2da      	uxtb	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7fe fee6 	bl	800d9d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec0c:	4b24      	ldr	r3, [pc, #144]	; (800eca0 <tcp_process+0x590>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d105      	bne.n	800ec22 <tcp_process+0x512>
 800ec16:	4b22      	ldr	r3, [pc, #136]	; (800eca0 <tcp_process+0x590>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	4a20      	ldr	r2, [pc, #128]	; (800eca0 <tcp_process+0x590>)
 800ec1e:	6013      	str	r3, [r2, #0]
 800ec20:	e013      	b.n	800ec4a <tcp_process+0x53a>
 800ec22:	4b1f      	ldr	r3, [pc, #124]	; (800eca0 <tcp_process+0x590>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	e00c      	b.n	800ec44 <tcp_process+0x534>
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d104      	bne.n	800ec3e <tcp_process+0x52e>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	60da      	str	r2, [r3, #12]
 800ec3c:	e005      	b.n	800ec4a <tcp_process+0x53a>
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1ef      	bne.n	800ec2a <tcp_process+0x51a>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	60da      	str	r2, [r3, #12]
 800ec50:	4b14      	ldr	r3, [pc, #80]	; (800eca4 <tcp_process+0x594>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	220a      	movs	r2, #10
 800ec5a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec5c:	4b12      	ldr	r3, [pc, #72]	; (800eca8 <tcp_process+0x598>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	60da      	str	r2, [r3, #12]
 800ec64:	4a10      	ldr	r2, [pc, #64]	; (800eca8 <tcp_process+0x598>)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6013      	str	r3, [r2, #0]
 800ec6a:	f002 fdd1 	bl	8011810 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800ec6e:	e0f0      	b.n	800ee52 <tcp_process+0x742>
 800ec70:	20008c6c 	.word	0x20008c6c
 800ec74:	20008c64 	.word	0x20008c64
 800ec78:	20008c6a 	.word	0x20008c6a
 800ec7c:	20008c60 	.word	0x20008c60
 800ec80:	20008c50 	.word	0x20008c50
 800ec84:	2000c3a0 	.word	0x2000c3a0
 800ec88:	2000c3a4 	.word	0x2000c3a4
 800ec8c:	08019624 	.word	0x08019624
 800ec90:	08019828 	.word	0x08019828
 800ec94:	08019668 	.word	0x08019668
 800ec98:	20008c68 	.word	0x20008c68
 800ec9c:	20008c6d 	.word	0x20008c6d
 800eca0:	2000fac0 	.word	0x2000fac0
 800eca4:	2000fabc 	.word	0x2000fabc
 800eca8:	2000fad0 	.word	0x2000fad0
        tcp_ack_now(pcb);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	7e9b      	ldrb	r3, [r3, #26]
 800ecb0:	f043 0302 	orr.w	r3, r3, #2
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2208      	movs	r2, #8
 800ecbe:	751a      	strb	r2, [r3, #20]
    break;
 800ecc0:	e0c7      	b.n	800ee52 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ecc2:	4b6a      	ldr	r3, [pc, #424]	; (800ee6c <tcp_process+0x75c>)
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f003 0310 	and.w	r3, r3, #16
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 80c1 	beq.w	800ee52 <tcp_process+0x742>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecd4:	4b66      	ldr	r3, [pc, #408]	; (800ee70 <tcp_process+0x760>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	f040 80ba 	bne.w	800ee52 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f040 80b5 	bne.w	800ee52 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2206      	movs	r2, #6
 800ecec:	751a      	strb	r2, [r3, #20]
    break;
 800ecee:	e0b0      	b.n	800ee52 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 f93d 	bl	800ef70 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ecf6:	4b5f      	ldr	r3, [pc, #380]	; (800ee74 <tcp_process+0x764>)
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	f003 0320 	and.w	r3, r3, #32
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f000 80a9 	beq.w	800ee56 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	7e9b      	ldrb	r3, [r3, #26]
 800ed08:	f043 0302 	orr.w	r3, r3, #2
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7fe fe60 	bl	800d9d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ed18:	4b57      	ldr	r3, [pc, #348]	; (800ee78 <tcp_process+0x768>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d105      	bne.n	800ed2e <tcp_process+0x61e>
 800ed22:	4b55      	ldr	r3, [pc, #340]	; (800ee78 <tcp_process+0x768>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	4a53      	ldr	r2, [pc, #332]	; (800ee78 <tcp_process+0x768>)
 800ed2a:	6013      	str	r3, [r2, #0]
 800ed2c:	e013      	b.n	800ed56 <tcp_process+0x646>
 800ed2e:	4b52      	ldr	r3, [pc, #328]	; (800ee78 <tcp_process+0x768>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	e00c      	b.n	800ed50 <tcp_process+0x640>
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d104      	bne.n	800ed4a <tcp_process+0x63a>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	68da      	ldr	r2, [r3, #12]
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	60da      	str	r2, [r3, #12]
 800ed48:	e005      	b.n	800ed56 <tcp_process+0x646>
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	613b      	str	r3, [r7, #16]
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1ef      	bne.n	800ed36 <tcp_process+0x626>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	60da      	str	r2, [r3, #12]
 800ed5c:	4b47      	ldr	r3, [pc, #284]	; (800ee7c <tcp_process+0x76c>)
 800ed5e:	2201      	movs	r2, #1
 800ed60:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	220a      	movs	r2, #10
 800ed66:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800ed68:	4b45      	ldr	r3, [pc, #276]	; (800ee80 <tcp_process+0x770>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60da      	str	r2, [r3, #12]
 800ed70:	4a43      	ldr	r2, [pc, #268]	; (800ee80 <tcp_process+0x770>)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	f002 fd4b 	bl	8011810 <tcp_timer_needed>
    }
    break;
 800ed7a:	e06c      	b.n	800ee56 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 f8f7 	bl	800ef70 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed82:	4b3a      	ldr	r3, [pc, #232]	; (800ee6c <tcp_process+0x75c>)
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	f003 0310 	and.w	r3, r3, #16
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d065      	beq.n	800ee5a <tcp_process+0x74a>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed92:	4b37      	ldr	r3, [pc, #220]	; (800ee70 <tcp_process+0x760>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d15f      	bne.n	800ee5a <tcp_process+0x74a>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d15b      	bne.n	800ee5a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7fe fe18 	bl	800d9d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eda8:	4b33      	ldr	r3, [pc, #204]	; (800ee78 <tcp_process+0x768>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d105      	bne.n	800edbe <tcp_process+0x6ae>
 800edb2:	4b31      	ldr	r3, [pc, #196]	; (800ee78 <tcp_process+0x768>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	4a2f      	ldr	r2, [pc, #188]	; (800ee78 <tcp_process+0x768>)
 800edba:	6013      	str	r3, [r2, #0]
 800edbc:	e013      	b.n	800ede6 <tcp_process+0x6d6>
 800edbe:	4b2e      	ldr	r3, [pc, #184]	; (800ee78 <tcp_process+0x768>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e00c      	b.n	800ede0 <tcp_process+0x6d0>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d104      	bne.n	800edda <tcp_process+0x6ca>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	68da      	ldr	r2, [r3, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	60da      	str	r2, [r3, #12]
 800edd8:	e005      	b.n	800ede6 <tcp_process+0x6d6>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ef      	bne.n	800edc6 <tcp_process+0x6b6>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	60da      	str	r2, [r3, #12]
 800edec:	4b23      	ldr	r3, [pc, #140]	; (800ee7c <tcp_process+0x76c>)
 800edee:	2201      	movs	r2, #1
 800edf0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	220a      	movs	r2, #10
 800edf6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800edf8:	4b21      	ldr	r3, [pc, #132]	; (800ee80 <tcp_process+0x770>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	60da      	str	r2, [r3, #12]
 800ee00:	4a1f      	ldr	r2, [pc, #124]	; (800ee80 <tcp_process+0x770>)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6013      	str	r3, [r2, #0]
 800ee06:	f002 fd03 	bl	8011810 <tcp_timer_needed>
    }
    break;
 800ee0a:	e026      	b.n	800ee5a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f000 f8af 	bl	800ef70 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ee12:	4b16      	ldr	r3, [pc, #88]	; (800ee6c <tcp_process+0x75c>)
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	f003 0310 	and.w	r3, r3, #16
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d01f      	beq.n	800ee5e <tcp_process+0x74e>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee22:	4b13      	ldr	r3, [pc, #76]	; (800ee70 <tcp_process+0x760>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d119      	bne.n	800ee5e <tcp_process+0x74e>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d115      	bne.n	800ee5e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800ee32:	4b10      	ldr	r3, [pc, #64]	; (800ee74 <tcp_process+0x764>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f043 0310 	orr.w	r3, r3, #16
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <tcp_process+0x764>)
 800ee3e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ee40:	e00d      	b.n	800ee5e <tcp_process+0x74e>
  default:
    break;
 800ee42:	bf00      	nop
 800ee44:	e00c      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee46:	bf00      	nop
 800ee48:	e00a      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee4a:	bf00      	nop
 800ee4c:	e008      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee4e:	bf00      	nop
 800ee50:	e006      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee52:	bf00      	nop
 800ee54:	e004      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee56:	bf00      	nop
 800ee58:	e002      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee5a:	bf00      	nop
 800ee5c:	e000      	b.n	800ee60 <tcp_process+0x750>
    break;
 800ee5e:	bf00      	nop
  }
  return ERR_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3720      	adds	r7, #32
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20008c6c 	.word	0x20008c6c
 800ee70:	20008c64 	.word	0x20008c64
 800ee74:	20008c6d 	.word	0x20008c6d
 800ee78:	2000fac0 	.word	0x2000fac0
 800ee7c:	2000fabc 	.word	0x2000fabc
 800ee80:	2000fad0 	.word	0x2000fad0

0800ee84 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ee84:	b590      	push	{r4, r7, lr}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68db      	ldr	r3, [r3, #12]
 800ee92:	899b      	ldrh	r3, [r3, #12]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fb fe28 	bl	800aaec <lwip_htons>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d027      	beq.n	800eef6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eea6:	6838      	ldr	r0, [r7, #0]
 800eea8:	f7fe fb1f 	bl	800d4ea <tcp_segs_free>
    next = NULL;
 800eeac:	2300      	movs	r3, #0
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	e055      	b.n	800ef5e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	899b      	ldrh	r3, [r3, #12]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fb fe16 	bl	800aaec <lwip_htons>
 800eec0:	4603      	mov	r3, r0
 800eec2:	f003 0301 	and.w	r3, r3, #1
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00d      	beq.n	800eee6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	899b      	ldrh	r3, [r3, #12]
 800eed0:	b29c      	uxth	r4, r3
 800eed2:	2001      	movs	r0, #1
 800eed4:	f7fb fe0a 	bl	800aaec <lwip_htons>
 800eed8:	4603      	mov	r3, r0
 800eeda:	461a      	mov	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	4322      	orrs	r2, r4
 800eee2:	b292      	uxth	r2, r2
 800eee4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f7fe fb0e 	bl	800d512 <tcp_seg_free>
    while (next &&
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00e      	beq.n	800ef1a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	891b      	ldrh	r3, [r3, #8]
 800ef00:	461a      	mov	r2, r3
 800ef02:	4b1a      	ldr	r3, [pc, #104]	; (800ef6c <tcp_oos_insert_segment+0xe8>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	441a      	add	r2, r3
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	8909      	ldrh	r1, [r1, #8]
 800ef12:	440b      	add	r3, r1
 800ef14:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dacb      	bge.n	800eeb2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d01e      	beq.n	800ef5e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	891b      	ldrh	r3, [r3, #8]
 800ef24:	461a      	mov	r2, r3
 800ef26:	4b11      	ldr	r3, [pc, #68]	; (800ef6c <tcp_oos_insert_segment+0xe8>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	441a      	add	r2, r3
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	dd12      	ble.n	800ef5e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <tcp_oos_insert_segment+0xe8>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	1ad3      	subs	r3, r2, r3
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	891b      	ldrh	r3, [r3, #8]
 800ef56:	4619      	mov	r1, r3
 800ef58:	4610      	mov	r0, r2
 800ef5a:	f7fc fe2b 	bl	800bbb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	683a      	ldr	r2, [r7, #0]
 800ef62:	601a      	str	r2, [r3, #0]
}
 800ef64:	bf00      	nop
 800ef66:	3714      	adds	r7, #20
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd90      	pop	{r4, r7, pc}
 800ef6c:	20008c60 	.word	0x20008c60

0800ef70 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ef70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef72:	b08d      	sub	sp, #52	; 0x34
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b03      	cmp	r3, #3
 800ef82:	d806      	bhi.n	800ef92 <tcp_receive+0x22>
 800ef84:	4ba6      	ldr	r3, [pc, #664]	; (800f220 <tcp_receive+0x2b0>)
 800ef86:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ef8a:	49a6      	ldr	r1, [pc, #664]	; (800f224 <tcp_receive+0x2b4>)
 800ef8c:	48a6      	ldr	r0, [pc, #664]	; (800f228 <tcp_receive+0x2b8>)
 800ef8e:	f007 fc95 	bl	80168bc <iprintf>

  if (flags & TCP_ACK) {
 800ef92:	4ba6      	ldr	r3, [pc, #664]	; (800f22c <tcp_receive+0x2bc>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 0310 	and.w	r3, r3, #16
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 82bf 	beq.w	800f51e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efac:	4413      	add	r3, r2
 800efae:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efb4:	4b9e      	ldr	r3, [pc, #632]	; (800f230 <tcp_receive+0x2c0>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	db1b      	blt.n	800eff6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efc2:	4b9b      	ldr	r3, [pc, #620]	; (800f230 <tcp_receive+0x2c0>)
 800efc4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d106      	bne.n	800efd8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efce:	4b99      	ldr	r3, [pc, #612]	; (800f234 <tcp_receive+0x2c4>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	1ad3      	subs	r3, r2, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	db0e      	blt.n	800eff6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800efdc:	4b95      	ldr	r3, [pc, #596]	; (800f234 <tcp_receive+0x2c4>)
 800efde:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d141      	bne.n	800f068 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800efe4:	4b94      	ldr	r3, [pc, #592]	; (800f238 <tcp_receive+0x2c8>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	89db      	ldrh	r3, [r3, #14]
 800efea:	b29a      	uxth	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d938      	bls.n	800f068 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eff6:	4b90      	ldr	r3, [pc, #576]	; (800f238 <tcp_receive+0x2c8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	89db      	ldrh	r3, [r3, #14]
 800effc:	b29a      	uxth	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f010:	429a      	cmp	r2, r3
 800f012:	d205      	bcs.n	800f020 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f020:	4b83      	ldr	r3, [pc, #524]	; (800f230 <tcp_receive+0x2c0>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f028:	4b82      	ldr	r3, [pc, #520]	; (800f234 <tcp_receive+0x2c4>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10d      	bne.n	800f056 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f040:	2b00      	cmp	r3, #0
 800f042:	d111      	bne.n	800f068 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f054:	e008      	b.n	800f068 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f068:	4b72      	ldr	r3, [pc, #456]	; (800f234 <tcp_receive+0x2c4>)
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	dc53      	bgt.n	800f11e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f076:	4b71      	ldr	r3, [pc, #452]	; (800f23c <tcp_receive+0x2cc>)
 800f078:	881b      	ldrh	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d146      	bne.n	800f10c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f088:	4413      	add	r3, r2
 800f08a:	697a      	ldr	r2, [r7, #20]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d13d      	bne.n	800f10c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f096:	2b00      	cmp	r3, #0
 800f098:	db38      	blt.n	800f10c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f09e:	4b65      	ldr	r3, [pc, #404]	; (800f234 <tcp_receive+0x2c4>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d132      	bne.n	800f10c <tcp_receive+0x19c>
              found_dupack = 1;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0b0:	2bff      	cmp	r3, #255	; 0xff
 800f0b2:	d007      	beq.n	800f0c4 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	b2da      	uxtb	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d916      	bls.n	800f0fc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0d8:	4413      	add	r3, r2
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d912      	bls.n	800f10c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0f0:	4413      	add	r3, r2
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f0fa:	e007      	b.n	800f10c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f102:	2b03      	cmp	r3, #3
 800f104:	d102      	bne.n	800f10c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f002 fa2e 	bl	8011568 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f040 8169 	bne.w	800f3e6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f11c:	e163      	b.n	800f3e6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f11e:	4b45      	ldr	r3, [pc, #276]	; (800f234 <tcp_receive+0x2c4>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	3b01      	subs	r3, #1
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f2c0 8107 	blt.w	800f33e <tcp_receive+0x3ce>
 800f130:	4b40      	ldr	r3, [pc, #256]	; (800f234 <tcp_receive+0x2c4>)
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f300 80ff 	bgt.w	800f33e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7e9b      	ldrb	r3, [r3, #26]
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00c      	beq.n	800f166 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	7e9b      	ldrb	r3, [r3, #26]
 800f150:	f023 0304 	bic.w	r3, r3, #4
 800f154:	b2da      	uxtb	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f174:	10db      	asrs	r3, r3, #3
 800f176:	b21b      	sxth	r3, r3
 800f178:	b29a      	uxth	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f180:	b29b      	uxth	r3, r3
 800f182:	4413      	add	r3, r2
 800f184:	b29b      	uxth	r3, r3
 800f186:	b21a      	sxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f196:	4b27      	ldr	r3, [pc, #156]	; (800f234 <tcp_receive+0x2c4>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	7d1b      	ldrb	r3, [r3, #20]
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	f240 8094 	bls.w	800f2d0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d216      	bcs.n	800f1e6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d97f      	bls.n	800f2d0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1da:	4413      	add	r3, r2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1e4:	e074      	b.n	800f2d0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1f6:	fb03 f301 	mul.w	r3, r3, r1
 800f1fa:	6879      	ldr	r1, [r7, #4]
 800f1fc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f200:	fb93 f3f1 	sdiv	r3, r3, r1
 800f204:	b29b      	uxth	r3, r3
 800f206:	4413      	add	r3, r2
 800f208:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f210:	8a7a      	ldrh	r2, [r7, #18]
 800f212:	429a      	cmp	r2, r3
 800f214:	d95c      	bls.n	800f2d0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	8a7a      	ldrh	r2, [r7, #18]
 800f21a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f21e:	e057      	b.n	800f2d0 <tcp_receive+0x360>
 800f220:	08019624 	.word	0x08019624
 800f224:	08019848 	.word	0x08019848
 800f228:	08019668 	.word	0x08019668
 800f22c:	20008c6c 	.word	0x20008c6c
 800f230:	20008c60 	.word	0x20008c60
 800f234:	20008c64 	.word	0x20008c64
 800f238:	20008c50 	.word	0x20008c50
 800f23c:	20008c6a 	.word	0x20008c6a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f244:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fc feb8 	bl	800bfd0 <pbuf_clen>
 800f260:	4603      	mov	r3, r0
 800f262:	429c      	cmp	r4, r3
 800f264:	d206      	bcs.n	800f274 <tcp_receive+0x304>
 800f266:	4b70      	ldr	r3, [pc, #448]	; (800f428 <tcp_receive+0x4b8>)
 800f268:	f240 429e 	movw	r2, #1182	; 0x49e
 800f26c:	496f      	ldr	r1, [pc, #444]	; (800f42c <tcp_receive+0x4bc>)
 800f26e:	4870      	ldr	r0, [pc, #448]	; (800f430 <tcp_receive+0x4c0>)
 800f270:	f007 fb24 	bl	80168bc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fc fea9 	bl	800bfd0 <pbuf_clen>
 800f27e:	4603      	mov	r3, r0
 800f280:	461a      	mov	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f288:	1a9b      	subs	r3, r3, r2
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	891a      	ldrh	r2, [r3, #8]
 800f296:	4b67      	ldr	r3, [pc, #412]	; (800f434 <tcp_receive+0x4c4>)
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	4413      	add	r3, r2
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	4b65      	ldr	r3, [pc, #404]	; (800f434 <tcp_receive+0x4c4>)
 800f2a0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f2a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2a4:	f7fe f935 	bl	800d512 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00e      	beq.n	800f2d0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d10a      	bne.n	800f2d0 <tcp_receive+0x360>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_receive+0x360>
 800f2c2:	4b59      	ldr	r3, [pc, #356]	; (800f428 <tcp_receive+0x4b8>)
 800f2c4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800f2c8:	495b      	ldr	r1, [pc, #364]	; (800f438 <tcp_receive+0x4c8>)
 800f2ca:	4859      	ldr	r0, [pc, #356]	; (800f430 <tcp_receive+0x4c0>)
 800f2cc:	f007 faf6 	bl	80168bc <iprintf>
      while (pcb->unacked != NULL &&
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d022      	beq.n	800f31e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fb fc11 	bl	800ab08 <lwip_htonl>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	461d      	mov	r5, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	899b      	ldrh	r3, [r3, #12]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fb fbf6 	bl	800aaec <lwip_htons>
 800f300:	4603      	mov	r3, r0
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <tcp_receive+0x39e>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e000      	b.n	800f310 <tcp_receive+0x3a0>
 800f30e:	2300      	movs	r3, #0
 800f310:	442b      	add	r3, r5
 800f312:	18e2      	adds	r2, r4, r3
 800f314:	4b49      	ldr	r3, [pc, #292]	; (800f43c <tcp_receive+0x4cc>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	dd90      	ble.n	800f240 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f322:	2b00      	cmp	r3, #0
 800f324:	d104      	bne.n	800f330 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f32c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f32e:	e002      	b.n	800f336 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	76da      	strb	r2, [r3, #27]
 800f33c:	e002      	b.n	800f344 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f001 fd30 	bl	8010da4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f344:	e04f      	b.n	800f3e6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f34a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	4618      	mov	r0, r3
 800f372:	f7fc fe2d 	bl	800bfd0 <pbuf_clen>
 800f376:	4603      	mov	r3, r0
 800f378:	429c      	cmp	r4, r3
 800f37a:	d206      	bcs.n	800f38a <tcp_receive+0x41a>
 800f37c:	4b2a      	ldr	r3, [pc, #168]	; (800f428 <tcp_receive+0x4b8>)
 800f37e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f382:	492a      	ldr	r1, [pc, #168]	; (800f42c <tcp_receive+0x4bc>)
 800f384:	482a      	ldr	r0, [pc, #168]	; (800f430 <tcp_receive+0x4c0>)
 800f386:	f007 fa99 	bl	80168bc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fc fe1e 	bl	800bfd0 <pbuf_clen>
 800f394:	4603      	mov	r3, r0
 800f396:	461a      	mov	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f39e:	1a9b      	subs	r3, r3, r2
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800f3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3aa:	891a      	ldrh	r2, [r3, #8]
 800f3ac:	4b21      	ldr	r3, [pc, #132]	; (800f434 <tcp_receive+0x4c4>)
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	4b1f      	ldr	r3, [pc, #124]	; (800f434 <tcp_receive+0x4c4>)
 800f3b6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f3b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3ba:	f7fe f8aa 	bl	800d512 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00e      	beq.n	800f3e6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10a      	bne.n	800f3e6 <tcp_receive+0x476>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <tcp_receive+0x476>
 800f3d8:	4b13      	ldr	r3, [pc, #76]	; (800f428 <tcp_receive+0x4b8>)
 800f3da:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800f3de:	4916      	ldr	r1, [pc, #88]	; (800f438 <tcp_receive+0x4c8>)
 800f3e0:	4813      	ldr	r0, [pc, #76]	; (800f430 <tcp_receive+0x4c0>)
 800f3e2:	f007 fa6b 	bl	80168bc <iprintf>
    while (pcb->unsent != NULL &&
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d036      	beq.n	800f45c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f3ee:	4b13      	ldr	r3, [pc, #76]	; (800f43c <tcp_receive+0x4cc>)
 800f3f0:	681c      	ldr	r4, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fb fb84 	bl	800ab08 <lwip_htonl>
 800f400:	4605      	mov	r5, r0
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f406:	891b      	ldrh	r3, [r3, #8]
 800f408:	461e      	mov	r6, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	899b      	ldrh	r3, [r3, #12]
 800f412:	b29b      	uxth	r3, r3
 800f414:	4618      	mov	r0, r3
 800f416:	f7fb fb69 	bl	800aaec <lwip_htons>
 800f41a:	4603      	mov	r3, r0
 800f41c:	f003 0303 	and.w	r3, r3, #3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00d      	beq.n	800f440 <tcp_receive+0x4d0>
 800f424:	2301      	movs	r3, #1
 800f426:	e00c      	b.n	800f442 <tcp_receive+0x4d2>
 800f428:	08019624 	.word	0x08019624
 800f42c:	08019864 	.word	0x08019864
 800f430:	08019668 	.word	0x08019668
 800f434:	20008c68 	.word	0x20008c68
 800f438:	0801988c 	.word	0x0801988c
 800f43c:	20008c64 	.word	0x20008c64
 800f440:	2300      	movs	r3, #0
 800f442:	4433      	add	r3, r6
 800f444:	442b      	add	r3, r5
 800f446:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f448:	2b00      	cmp	r3, #0
 800f44a:	db07      	blt.n	800f45c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f44c:	4b8d      	ldr	r3, [pc, #564]	; (800f684 <tcp_receive+0x714>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	f77f af75 	ble.w	800f346 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f462:	4b89      	ldr	r3, [pc, #548]	; (800f688 <tcp_receive+0x718>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	4413      	add	r3, r2
 800f468:	b29a      	uxth	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f474:	2b00      	cmp	r3, #0
 800f476:	d052      	beq.n	800f51e <tcp_receive+0x5ae>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f47c:	4b81      	ldr	r3, [pc, #516]	; (800f684 <tcp_receive+0x714>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	da4b      	bge.n	800f51e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f486:	4b81      	ldr	r3, [pc, #516]	; (800f68c <tcp_receive+0x71c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f490:	b29b      	uxth	r3, r3
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	b29b      	uxth	r3, r3
 800f496:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f498:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4a0:	10db      	asrs	r3, r3, #3
 800f4a2:	b21b      	sxth	r3, r3
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4b6:	4413      	add	r3, r2
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	b21a      	sxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f4c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	da03      	bge.n	800f4d0 <tcp_receive+0x560>
        m = -m;
 800f4c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4ca:	425b      	negs	r3, r3
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800f4d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4d8:	109b      	asrs	r3, r3, #2
 800f4da:	b21b      	sxth	r3, r3
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4ee:	4413      	add	r3, r2
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	b21a      	sxth	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4fe:	10db      	asrs	r3, r3, #3
 800f500:	b21b      	sxth	r3, r3
 800f502:	b29a      	uxth	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4413      	add	r3, r2
 800f50e:	b29b      	uxth	r3, r3
 800f510:	b21a      	sxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2200      	movs	r2, #0
 800f51c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f51e:	4b5c      	ldr	r3, [pc, #368]	; (800f690 <tcp_receive+0x720>)
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	f000 84f1 	beq.w	800ff0a <tcp_receive+0xf9a>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	7d1b      	ldrb	r3, [r3, #20]
 800f52c:	2b06      	cmp	r3, #6
 800f52e:	f200 84ec 	bhi.w	800ff0a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f536:	4b57      	ldr	r3, [pc, #348]	; (800f694 <tcp_receive+0x724>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	3b01      	subs	r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f2c0 80b8 	blt.w	800f6b4 <tcp_receive+0x744>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f548:	4b51      	ldr	r3, [pc, #324]	; (800f690 <tcp_receive+0x720>)
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	4619      	mov	r1, r3
 800f54e:	4b51      	ldr	r3, [pc, #324]	; (800f694 <tcp_receive+0x724>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	440b      	add	r3, r1
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	3301      	adds	r3, #1
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f300 80ab 	bgt.w	800f6b4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f55e:	4b4e      	ldr	r3, [pc, #312]	; (800f698 <tcp_receive+0x728>)
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f568:	4b4a      	ldr	r3, [pc, #296]	; (800f694 <tcp_receive+0x724>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f570:	4b49      	ldr	r3, [pc, #292]	; (800f698 <tcp_receive+0x728>)
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d106      	bne.n	800f586 <tcp_receive+0x616>
 800f578:	4b48      	ldr	r3, [pc, #288]	; (800f69c <tcp_receive+0x72c>)
 800f57a:	f240 523c 	movw	r2, #1340	; 0x53c
 800f57e:	4948      	ldr	r1, [pc, #288]	; (800f6a0 <tcp_receive+0x730>)
 800f580:	4848      	ldr	r0, [pc, #288]	; (800f6a4 <tcp_receive+0x734>)
 800f582:	f007 f99b 	bl	80168bc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f588:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f58c:	4293      	cmp	r3, r2
 800f58e:	dd06      	ble.n	800f59e <tcp_receive+0x62e>
 800f590:	4b42      	ldr	r3, [pc, #264]	; (800f69c <tcp_receive+0x72c>)
 800f592:	f240 523d 	movw	r2, #1341	; 0x53d
 800f596:	4944      	ldr	r1, [pc, #272]	; (800f6a8 <tcp_receive+0x738>)
 800f598:	4842      	ldr	r0, [pc, #264]	; (800f6a4 <tcp_receive+0x734>)
 800f59a:	f007 f98f 	bl	80168bc <iprintf>
      if (inseg.p->len < off) {
 800f59e:	4b3e      	ldr	r3, [pc, #248]	; (800f698 <tcp_receive+0x728>)
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	895b      	ldrh	r3, [r3, #10]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	dd3e      	ble.n	800f62a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f5ac:	4b3a      	ldr	r3, [pc, #232]	; (800f698 <tcp_receive+0x728>)
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	891b      	ldrh	r3, [r3, #8]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	dd06      	ble.n	800f5c8 <tcp_receive+0x658>
 800f5ba:	4b38      	ldr	r3, [pc, #224]	; (800f69c <tcp_receive+0x72c>)
 800f5bc:	f240 523f 	movw	r2, #1343	; 0x53f
 800f5c0:	493a      	ldr	r1, [pc, #232]	; (800f6ac <tcp_receive+0x73c>)
 800f5c2:	4838      	ldr	r0, [pc, #224]	; (800f6a4 <tcp_receive+0x734>)
 800f5c4:	f007 f97a 	bl	80168bc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f5c8:	4b33      	ldr	r3, [pc, #204]	; (800f698 <tcp_receive+0x728>)
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	891a      	ldrh	r2, [r3, #8]
 800f5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800f5d6:	e00e      	b.n	800f5f6 <tcp_receive+0x686>
          off -= p->len;
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	895b      	ldrh	r3, [r3, #10]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	1a9b      	subs	r3, r3, r2
 800f5e2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	8a3a      	ldrh	r2, [r7, #16]
 800f5e8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800f5ea:	69bb      	ldr	r3, [r7, #24]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	895b      	ldrh	r3, [r3, #10]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	4293      	cmp	r3, r2
 800f600:	dcea      	bgt.n	800f5d8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	b29b      	uxth	r3, r3
 800f606:	425b      	negs	r3, r3
 800f608:	b29b      	uxth	r3, r3
 800f60a:	b21b      	sxth	r3, r3
 800f60c:	4619      	mov	r1, r3
 800f60e:	69b8      	ldr	r0, [r7, #24]
 800f610:	f7fc fc20 	bl	800be54 <pbuf_header>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d01c      	beq.n	800f654 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f61a:	4b20      	ldr	r3, [pc, #128]	; (800f69c <tcp_receive+0x72c>)
 800f61c:	f240 524c 	movw	r2, #1356	; 0x54c
 800f620:	4923      	ldr	r1, [pc, #140]	; (800f6b0 <tcp_receive+0x740>)
 800f622:	4820      	ldr	r0, [pc, #128]	; (800f6a4 <tcp_receive+0x734>)
 800f624:	f007 f94a 	bl	80168bc <iprintf>
 800f628:	e014      	b.n	800f654 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800f62a:	4b1b      	ldr	r3, [pc, #108]	; (800f698 <tcp_receive+0x728>)
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f630:	b292      	uxth	r2, r2
 800f632:	4252      	negs	r2, r2
 800f634:	b292      	uxth	r2, r2
 800f636:	b212      	sxth	r2, r2
 800f638:	4611      	mov	r1, r2
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fc fc0a 	bl	800be54 <pbuf_header>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d006      	beq.n	800f654 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800f646:	4b15      	ldr	r3, [pc, #84]	; (800f69c <tcp_receive+0x72c>)
 800f648:	f240 5251 	movw	r2, #1361	; 0x551
 800f64c:	4918      	ldr	r1, [pc, #96]	; (800f6b0 <tcp_receive+0x740>)
 800f64e:	4815      	ldr	r0, [pc, #84]	; (800f6a4 <tcp_receive+0x734>)
 800f650:	f007 f934 	bl	80168bc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800f654:	4b10      	ldr	r3, [pc, #64]	; (800f698 <tcp_receive+0x728>)
 800f656:	891a      	ldrh	r2, [r3, #8]
 800f658:	4b0e      	ldr	r3, [pc, #56]	; (800f694 <tcp_receive+0x724>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	b299      	uxth	r1, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f662:	b29b      	uxth	r3, r3
 800f664:	1acb      	subs	r3, r1, r3
 800f666:	b29b      	uxth	r3, r3
 800f668:	4413      	add	r3, r2
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <tcp_receive+0x728>)
 800f66e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f674:	4a07      	ldr	r2, [pc, #28]	; (800f694 <tcp_receive+0x724>)
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	4b07      	ldr	r3, [pc, #28]	; (800f698 <tcp_receive+0x728>)
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	4a05      	ldr	r2, [pc, #20]	; (800f694 <tcp_receive+0x724>)
 800f67e:	6812      	ldr	r2, [r2, #0]
 800f680:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f682:	e025      	b.n	800f6d0 <tcp_receive+0x760>
 800f684:	20008c64 	.word	0x20008c64
 800f688:	20008c68 	.word	0x20008c68
 800f68c:	2000fac4 	.word	0x2000fac4
 800f690:	20008c6a 	.word	0x20008c6a
 800f694:	20008c60 	.word	0x20008c60
 800f698:	20008c40 	.word	0x20008c40
 800f69c:	08019624 	.word	0x08019624
 800f6a0:	080198ac 	.word	0x080198ac
 800f6a4:	08019668 	.word	0x08019668
 800f6a8:	080198bc 	.word	0x080198bc
 800f6ac:	080198cc 	.word	0x080198cc
 800f6b0:	080198dc 	.word	0x080198dc
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f6b4:	4b87      	ldr	r3, [pc, #540]	; (800f8d4 <tcp_receive+0x964>)
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	da06      	bge.n	800f6d0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	7e9b      	ldrb	r3, [r3, #26]
 800f6c6:	f043 0302 	orr.w	r3, r3, #2
 800f6ca:	b2da      	uxtb	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6d0:	4b80      	ldr	r3, [pc, #512]	; (800f8d4 <tcp_receive+0x964>)
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f2c0 8410 	blt.w	800ff00 <tcp_receive+0xf90>
 800f6e0:	4b7c      	ldr	r3, [pc, #496]	; (800f8d4 <tcp_receive+0x964>)
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e8:	6879      	ldr	r1, [r7, #4]
 800f6ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6ec:	440b      	add	r3, r1
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f300 8404 	bgt.w	800ff00 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6fc:	4b75      	ldr	r3, [pc, #468]	; (800f8d4 <tcp_receive+0x964>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	429a      	cmp	r2, r3
 800f702:	f040 8287 	bne.w	800fc14 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f706:	4b74      	ldr	r3, [pc, #464]	; (800f8d8 <tcp_receive+0x968>)
 800f708:	891c      	ldrh	r4, [r3, #8]
 800f70a:	4b73      	ldr	r3, [pc, #460]	; (800f8d8 <tcp_receive+0x968>)
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	b29b      	uxth	r3, r3
 800f712:	4618      	mov	r0, r3
 800f714:	f7fb f9ea 	bl	800aaec <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d001      	beq.n	800f726 <tcp_receive+0x7b6>
 800f722:	2301      	movs	r3, #1
 800f724:	e000      	b.n	800f728 <tcp_receive+0x7b8>
 800f726:	2300      	movs	r3, #0
 800f728:	4423      	add	r3, r4
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	4b6b      	ldr	r3, [pc, #428]	; (800f8dc <tcp_receive+0x96c>)
 800f72e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f734:	4b69      	ldr	r3, [pc, #420]	; (800f8dc <tcp_receive+0x96c>)
 800f736:	881b      	ldrh	r3, [r3, #0]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d26e      	bcs.n	800f81a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f73c:	4b66      	ldr	r3, [pc, #408]	; (800f8d8 <tcp_receive+0x968>)
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	899b      	ldrh	r3, [r3, #12]
 800f742:	b29b      	uxth	r3, r3
 800f744:	4618      	mov	r0, r3
 800f746:	f7fb f9d1 	bl	800aaec <lwip_htons>
 800f74a:	4603      	mov	r3, r0
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	d01b      	beq.n	800f78c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f754:	4b60      	ldr	r3, [pc, #384]	; (800f8d8 <tcp_receive+0x968>)
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	899b      	ldrh	r3, [r3, #12]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f760:	b29c      	uxth	r4, r3
 800f762:	4b5d      	ldr	r3, [pc, #372]	; (800f8d8 <tcp_receive+0x968>)
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	899b      	ldrh	r3, [r3, #12]
 800f768:	b29b      	uxth	r3, r3
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fb f9be 	bl	800aaec <lwip_htons>
 800f770:	4603      	mov	r3, r0
 800f772:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fb f9b7 	bl	800aaec <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	461a      	mov	r2, r3
 800f782:	4b55      	ldr	r3, [pc, #340]	; (800f8d8 <tcp_receive+0x968>)
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	4322      	orrs	r2, r4
 800f788:	b292      	uxth	r2, r2
 800f78a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f790:	4b51      	ldr	r3, [pc, #324]	; (800f8d8 <tcp_receive+0x968>)
 800f792:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f794:	4b50      	ldr	r3, [pc, #320]	; (800f8d8 <tcp_receive+0x968>)
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	899b      	ldrh	r3, [r3, #12]
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fb f9a5 	bl	800aaec <lwip_htons>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	f003 0302 	and.w	r3, r3, #2
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d005      	beq.n	800f7b8 <tcp_receive+0x848>
            inseg.len -= 1;
 800f7ac:	4b4a      	ldr	r3, [pc, #296]	; (800f8d8 <tcp_receive+0x968>)
 800f7ae:	891b      	ldrh	r3, [r3, #8]
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	4b48      	ldr	r3, [pc, #288]	; (800f8d8 <tcp_receive+0x968>)
 800f7b6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f7b8:	4b47      	ldr	r3, [pc, #284]	; (800f8d8 <tcp_receive+0x968>)
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	4b46      	ldr	r3, [pc, #280]	; (800f8d8 <tcp_receive+0x968>)
 800f7be:	891b      	ldrh	r3, [r3, #8]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	f7fc f9f6 	bl	800bbb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f7c8:	4b43      	ldr	r3, [pc, #268]	; (800f8d8 <tcp_receive+0x968>)
 800f7ca:	891c      	ldrh	r4, [r3, #8]
 800f7cc:	4b42      	ldr	r3, [pc, #264]	; (800f8d8 <tcp_receive+0x968>)
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	899b      	ldrh	r3, [r3, #12]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fb f989 	bl	800aaec <lwip_htons>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	f003 0303 	and.w	r3, r3, #3
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <tcp_receive+0x878>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e000      	b.n	800f7ea <tcp_receive+0x87a>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4423      	add	r3, r4
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	4b3b      	ldr	r3, [pc, #236]	; (800f8dc <tcp_receive+0x96c>)
 800f7f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f7f2:	4b3a      	ldr	r3, [pc, #232]	; (800f8dc <tcp_receive+0x96c>)
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	4b36      	ldr	r3, [pc, #216]	; (800f8d4 <tcp_receive+0x964>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	441a      	add	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f806:	440b      	add	r3, r1
 800f808:	429a      	cmp	r2, r3
 800f80a:	d006      	beq.n	800f81a <tcp_receive+0x8aa>
 800f80c:	4b34      	ldr	r3, [pc, #208]	; (800f8e0 <tcp_receive+0x970>)
 800f80e:	f240 527f 	movw	r2, #1407	; 0x57f
 800f812:	4934      	ldr	r1, [pc, #208]	; (800f8e4 <tcp_receive+0x974>)
 800f814:	4834      	ldr	r0, [pc, #208]	; (800f8e8 <tcp_receive+0x978>)
 800f816:	f007 f851 	bl	80168bc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f000 80e1 	beq.w	800f9e6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f824:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <tcp_receive+0x968>)
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	899b      	ldrh	r3, [r3, #12]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fb f95d 	bl	800aaec <lwip_htons>
 800f832:	4603      	mov	r3, r0
 800f834:	f003 0301 	and.w	r3, r3, #1
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d010      	beq.n	800f85e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f83c:	e00a      	b.n	800f854 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f842:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800f84e:	68b8      	ldr	r0, [r7, #8]
 800f850:	f7fd fe5f 	bl	800d512 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1f0      	bne.n	800f83e <tcp_receive+0x8ce>
 800f85c:	e0c3      	b.n	800f9e6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f862:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f864:	e04f      	b.n	800f906 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	899b      	ldrh	r3, [r3, #12]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fb f93c 	bl	800aaec <lwip_htons>
 800f874:	4603      	mov	r3, r0
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d03b      	beq.n	800f8f6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f87e:	4b16      	ldr	r3, [pc, #88]	; (800f8d8 <tcp_receive+0x968>)
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	899b      	ldrh	r3, [r3, #12]
 800f884:	b29b      	uxth	r3, r3
 800f886:	4618      	mov	r0, r3
 800f888:	f7fb f930 	bl	800aaec <lwip_htons>
 800f88c:	4603      	mov	r3, r0
 800f88e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f892:	2b00      	cmp	r3, #0
 800f894:	d12f      	bne.n	800f8f6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f896:	4b10      	ldr	r3, [pc, #64]	; (800f8d8 <tcp_receive+0x968>)
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	899b      	ldrh	r3, [r3, #12]
 800f89c:	b29c      	uxth	r4, r3
 800f89e:	2001      	movs	r0, #1
 800f8a0:	f7fb f924 	bl	800aaec <lwip_htons>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <tcp_receive+0x968>)
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	4322      	orrs	r2, r4
 800f8ae:	b292      	uxth	r2, r2
 800f8b0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f8b2:	4b09      	ldr	r3, [pc, #36]	; (800f8d8 <tcp_receive+0x968>)
 800f8b4:	891c      	ldrh	r4, [r3, #8]
 800f8b6:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <tcp_receive+0x968>)
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	899b      	ldrh	r3, [r3, #12]
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fb f914 	bl	800aaec <lwip_htons>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	f003 0303 	and.w	r3, r3, #3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00e      	beq.n	800f8ec <tcp_receive+0x97c>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e00d      	b.n	800f8ee <tcp_receive+0x97e>
 800f8d2:	bf00      	nop
 800f8d4:	20008c60 	.word	0x20008c60
 800f8d8:	20008c40 	.word	0x20008c40
 800f8dc:	20008c6a 	.word	0x20008c6a
 800f8e0:	08019624 	.word	0x08019624
 800f8e4:	080198f0 	.word	0x080198f0
 800f8e8:	08019668 	.word	0x08019668
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4423      	add	r3, r4
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	4b95      	ldr	r3, [pc, #596]	; (800fb48 <tcp_receive+0xbd8>)
 800f8f4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800f900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f902:	f7fd fe06 	bl	800d512 <tcp_seg_free>
            while (next &&
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f90c:	4b8e      	ldr	r3, [pc, #568]	; (800fb48 <tcp_receive+0xbd8>)
 800f90e:	881b      	ldrh	r3, [r3, #0]
 800f910:	461a      	mov	r2, r3
 800f912:	4b8e      	ldr	r3, [pc, #568]	; (800fb4c <tcp_receive+0xbdc>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	441a      	add	r2, r3
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f920:	8909      	ldrh	r1, [r1, #8]
 800f922:	440b      	add	r3, r1
 800f924:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f926:	2b00      	cmp	r3, #0
 800f928:	da9d      	bge.n	800f866 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d057      	beq.n	800f9e0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800f930:	4b85      	ldr	r3, [pc, #532]	; (800fb48 <tcp_receive+0xbd8>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	461a      	mov	r2, r3
 800f936:	4b85      	ldr	r3, [pc, #532]	; (800fb4c <tcp_receive+0xbdc>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	441a      	add	r2, r3
 800f93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f944:	2b00      	cmp	r3, #0
 800f946:	dd4b      	ble.n	800f9e0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	b29a      	uxth	r2, r3
 800f950:	4b7e      	ldr	r3, [pc, #504]	; (800fb4c <tcp_receive+0xbdc>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	b29b      	uxth	r3, r3
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	b29a      	uxth	r2, r3
 800f95a:	4b7d      	ldr	r3, [pc, #500]	; (800fb50 <tcp_receive+0xbe0>)
 800f95c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f95e:	4b7c      	ldr	r3, [pc, #496]	; (800fb50 <tcp_receive+0xbe0>)
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	899b      	ldrh	r3, [r3, #12]
 800f964:	b29b      	uxth	r3, r3
 800f966:	4618      	mov	r0, r3
 800f968:	f7fb f8c0 	bl	800aaec <lwip_htons>
 800f96c:	4603      	mov	r3, r0
 800f96e:	f003 0302 	and.w	r3, r3, #2
 800f972:	2b00      	cmp	r3, #0
 800f974:	d005      	beq.n	800f982 <tcp_receive+0xa12>
                inseg.len -= 1;
 800f976:	4b76      	ldr	r3, [pc, #472]	; (800fb50 <tcp_receive+0xbe0>)
 800f978:	891b      	ldrh	r3, [r3, #8]
 800f97a:	3b01      	subs	r3, #1
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	4b74      	ldr	r3, [pc, #464]	; (800fb50 <tcp_receive+0xbe0>)
 800f980:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f982:	4b73      	ldr	r3, [pc, #460]	; (800fb50 <tcp_receive+0xbe0>)
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	4b72      	ldr	r3, [pc, #456]	; (800fb50 <tcp_receive+0xbe0>)
 800f988:	891b      	ldrh	r3, [r3, #8]
 800f98a:	4619      	mov	r1, r3
 800f98c:	4610      	mov	r0, r2
 800f98e:	f7fc f911 	bl	800bbb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f992:	4b6f      	ldr	r3, [pc, #444]	; (800fb50 <tcp_receive+0xbe0>)
 800f994:	891c      	ldrh	r4, [r3, #8]
 800f996:	4b6e      	ldr	r3, [pc, #440]	; (800fb50 <tcp_receive+0xbe0>)
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	899b      	ldrh	r3, [r3, #12]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fb f8a4 	bl	800aaec <lwip_htons>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	f003 0303 	and.w	r3, r3, #3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <tcp_receive+0xa42>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e000      	b.n	800f9b4 <tcp_receive+0xa44>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4423      	add	r3, r4
 800f9b6:	b29a      	uxth	r2, r3
 800f9b8:	4b63      	ldr	r3, [pc, #396]	; (800fb48 <tcp_receive+0xbd8>)
 800f9ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f9bc:	4b62      	ldr	r3, [pc, #392]	; (800fb48 <tcp_receive+0xbd8>)
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4b62      	ldr	r3, [pc, #392]	; (800fb4c <tcp_receive+0xbdc>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	441a      	add	r2, r3
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d006      	beq.n	800f9e0 <tcp_receive+0xa70>
 800f9d2:	4b60      	ldr	r3, [pc, #384]	; (800fb54 <tcp_receive+0xbe4>)
 800f9d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f9d8:	495f      	ldr	r1, [pc, #380]	; (800fb58 <tcp_receive+0xbe8>)
 800f9da:	4860      	ldr	r0, [pc, #384]	; (800fb5c <tcp_receive+0xbec>)
 800f9dc:	f006 ff6e 	bl	80168bc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9e4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f9e6:	4b58      	ldr	r3, [pc, #352]	; (800fb48 <tcp_receive+0xbd8>)
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	4b57      	ldr	r3, [pc, #348]	; (800fb4c <tcp_receive+0xbdc>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	441a      	add	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9fa:	4b53      	ldr	r3, [pc, #332]	; (800fb48 <tcp_receive+0xbd8>)
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d206      	bcs.n	800fa10 <tcp_receive+0xaa0>
 800fa02:	4b54      	ldr	r3, [pc, #336]	; (800fb54 <tcp_receive+0xbe4>)
 800fa04:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fa08:	4955      	ldr	r1, [pc, #340]	; (800fb60 <tcp_receive+0xbf0>)
 800fa0a:	4854      	ldr	r0, [pc, #336]	; (800fb5c <tcp_receive+0xbec>)
 800fa0c:	f006 ff56 	bl	80168bc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa14:	4b4c      	ldr	r3, [pc, #304]	; (800fb48 <tcp_receive+0xbd8>)
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7fd f8e9 	bl	800cbf8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fa26:	4b4a      	ldr	r3, [pc, #296]	; (800fb50 <tcp_receive+0xbe0>)
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	891b      	ldrh	r3, [r3, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d006      	beq.n	800fa3e <tcp_receive+0xace>
          recv_data = inseg.p;
 800fa30:	4b47      	ldr	r3, [pc, #284]	; (800fb50 <tcp_receive+0xbe0>)
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	4a4b      	ldr	r2, [pc, #300]	; (800fb64 <tcp_receive+0xbf4>)
 800fa36:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fa38:	4b45      	ldr	r3, [pc, #276]	; (800fb50 <tcp_receive+0xbe0>)
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa3e:	4b44      	ldr	r3, [pc, #272]	; (800fb50 <tcp_receive+0xbe0>)
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	899b      	ldrh	r3, [r3, #12]
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fb f850 	bl	800aaec <lwip_htons>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f003 0301 	and.w	r3, r3, #1
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 80b4 	beq.w	800fbc0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fa58:	4b43      	ldr	r3, [pc, #268]	; (800fb68 <tcp_receive+0xbf8>)
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	f043 0320 	orr.w	r3, r3, #32
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	4b41      	ldr	r3, [pc, #260]	; (800fb68 <tcp_receive+0xbf8>)
 800fa64:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fa66:	e0ab      	b.n	800fbc0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	4a35      	ldr	r2, [pc, #212]	; (800fb4c <tcp_receive+0xbdc>)
 800fa78:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	891b      	ldrh	r3, [r3, #8]
 800fa7e:	461c      	mov	r4, r3
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	899b      	ldrh	r3, [r3, #12]
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fb f82f 	bl	800aaec <lwip_htons>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	f003 0303 	and.w	r3, r3, #3
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <tcp_receive+0xb2c>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e000      	b.n	800fa9e <tcp_receive+0xb2e>
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	191a      	adds	r2, r3, r4
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa4:	441a      	add	r2, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faae:	461c      	mov	r4, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	891b      	ldrh	r3, [r3, #8]
 800fab4:	461d      	mov	r5, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	899b      	ldrh	r3, [r3, #12]
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fb f814 	bl	800aaec <lwip_htons>
 800fac4:	4603      	mov	r3, r0
 800fac6:	f003 0303 	and.w	r3, r3, #3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <tcp_receive+0xb62>
 800face:	2301      	movs	r3, #1
 800fad0:	e000      	b.n	800fad4 <tcp_receive+0xb64>
 800fad2:	2300      	movs	r3, #0
 800fad4:	442b      	add	r3, r5
 800fad6:	429c      	cmp	r4, r3
 800fad8:	d206      	bcs.n	800fae8 <tcp_receive+0xb78>
 800fada:	4b1e      	ldr	r3, [pc, #120]	; (800fb54 <tcp_receive+0xbe4>)
 800fadc:	f240 52de 	movw	r2, #1502	; 0x5de
 800fae0:	4922      	ldr	r1, [pc, #136]	; (800fb6c <tcp_receive+0xbfc>)
 800fae2:	481e      	ldr	r0, [pc, #120]	; (800fb5c <tcp_receive+0xbec>)
 800fae4:	f006 feea 	bl	80168bc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	891b      	ldrh	r3, [r3, #8]
 800faec:	461c      	mov	r4, r3
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	899b      	ldrh	r3, [r3, #12]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fa fff8 	bl	800aaec <lwip_htons>
 800fafc:	4603      	mov	r3, r0
 800fafe:	f003 0303 	and.w	r3, r3, #3
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d001      	beq.n	800fb0a <tcp_receive+0xb9a>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e000      	b.n	800fb0c <tcp_receive+0xb9c>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	1919      	adds	r1, r3, r4
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb12:	b28b      	uxth	r3, r1
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fd f86b 	bl	800cbf8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	891b      	ldrh	r3, [r3, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d028      	beq.n	800fb7e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fb2c:	4b0d      	ldr	r3, [pc, #52]	; (800fb64 <tcp_receive+0xbf4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01d      	beq.n	800fb70 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800fb34:	4b0b      	ldr	r3, [pc, #44]	; (800fb64 <tcp_receive+0xbf4>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	4610      	mov	r0, r2
 800fb40:	f7fc fa86 	bl	800c050 <pbuf_cat>
 800fb44:	e018      	b.n	800fb78 <tcp_receive+0xc08>
 800fb46:	bf00      	nop
 800fb48:	20008c6a 	.word	0x20008c6a
 800fb4c:	20008c60 	.word	0x20008c60
 800fb50:	20008c40 	.word	0x20008c40
 800fb54:	08019624 	.word	0x08019624
 800fb58:	08019928 	.word	0x08019928
 800fb5c:	08019668 	.word	0x08019668
 800fb60:	08019964 	.word	0x08019964
 800fb64:	20008c70 	.word	0x20008c70
 800fb68:	20008c6d 	.word	0x20008c6d
 800fb6c:	08019984 	.word	0x08019984
            } else {
              recv_data = cseg->p;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	4a71      	ldr	r2, [pc, #452]	; (800fd3c <tcp_receive+0xdcc>)
 800fb76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	899b      	ldrh	r3, [r3, #12]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fa ffb0 	bl	800aaec <lwip_htons>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00d      	beq.n	800fbb2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fb96:	4b6a      	ldr	r3, [pc, #424]	; (800fd40 <tcp_receive+0xdd0>)
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	f043 0320 	orr.w	r3, r3, #32
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	4b67      	ldr	r3, [pc, #412]	; (800fd40 <tcp_receive+0xdd0>)
 800fba2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	7d1b      	ldrb	r3, [r3, #20]
 800fba8:	2b04      	cmp	r3, #4
 800fbaa:	d102      	bne.n	800fbb2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2207      	movs	r2, #7
 800fbb0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7fd fca9 	bl	800d512 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d008      	beq.n	800fbda <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	f43f af47 	beq.w	800fa68 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7e9b      	ldrb	r3, [r3, #26]
 800fbde:	f003 0301 	and.w	r3, r3, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <tcp_receive+0xc94>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	7e9b      	ldrb	r3, [r3, #26]
 800fbea:	f023 0301 	bic.w	r3, r3, #1
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	769a      	strb	r2, [r3, #26]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	7e9b      	ldrb	r3, [r3, #26]
 800fbf8:	f043 0302 	orr.w	r3, r3, #2
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc02:	e181      	b.n	800ff08 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	7e9b      	ldrb	r3, [r3, #26]
 800fc08:	f043 0301 	orr.w	r3, r3, #1
 800fc0c:	b2da      	uxtb	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fc12:	e179      	b.n	800ff08 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f001 f8c5 	bl	8010da4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fc22:	4848      	ldr	r0, [pc, #288]	; (800fd44 <tcp_receive+0xdd4>)
 800fc24:	f7fd fc9c 	bl	800d560 <tcp_seg_copy>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800fc2e:	e16b      	b.n	800ff08 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800fc30:	2300      	movs	r3, #0
 800fc32:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc3a:	e150      	b.n	800fede <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800fc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	4b41      	ldr	r3, [pc, #260]	; (800fd48 <tcp_receive+0xdd8>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d11d      	bne.n	800fc86 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fc4a:	4b3e      	ldr	r3, [pc, #248]	; (800fd44 <tcp_receive+0xdd4>)
 800fc4c:	891a      	ldrh	r2, [r3, #8]
 800fc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc50:	891b      	ldrh	r3, [r3, #8]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	f240 8148 	bls.w	800fee8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800fc58:	483a      	ldr	r0, [pc, #232]	; (800fd44 <tcp_receive+0xdd4>)
 800fc5a:	f7fd fc81 	bl	800d560 <tcp_seg_copy>
 800fc5e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f000 8142 	beq.w	800feec <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <tcp_receive+0xd06>
                    prev->next = cseg;
 800fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	601a      	str	r2, [r3, #0]
 800fc74:	e002      	b.n	800fc7c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fc7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f7ff f900 	bl	800ee84 <tcp_oos_insert_segment>
                }
                break;
 800fc84:	e132      	b.n	800feec <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d117      	bne.n	800fcbc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fc8c:	4b2e      	ldr	r3, [pc, #184]	; (800fd48 <tcp_receive+0xdd8>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	da57      	bge.n	800fd4c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800fc9c:	4829      	ldr	r0, [pc, #164]	; (800fd44 <tcp_receive+0xdd4>)
 800fc9e:	f7fd fc5f 	bl	800d560 <tcp_seg_copy>
 800fca2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f000 8122 	beq.w	800fef0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800fcb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f7ff f8e5 	bl	800ee84 <tcp_oos_insert_segment>
                  }
                  break;
 800fcba:	e119      	b.n	800fef0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800fcbc:	4b22      	ldr	r3, [pc, #136]	; (800fd48 <tcp_receive+0xdd8>)
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	db3e      	blt.n	800fd4c <tcp_receive+0xddc>
 800fcce:	4b1e      	ldr	r3, [pc, #120]	; (800fd48 <tcp_receive+0xdd8>)
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	3301      	adds	r3, #1
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	dc35      	bgt.n	800fd4c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800fce0:	4818      	ldr	r0, [pc, #96]	; (800fd44 <tcp_receive+0xdd4>)
 800fce2:	f7fd fc3d 	bl	800d560 <tcp_seg_copy>
 800fce6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f000 8102 	beq.w	800fef4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	685b      	ldr	r3, [r3, #4]
 800fcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcf8:	8912      	ldrh	r2, [r2, #8]
 800fcfa:	441a      	add	r2, r3
 800fcfc:	4b12      	ldr	r3, [pc, #72]	; (800fd48 <tcp_receive+0xdd8>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	dd12      	ble.n	800fd2c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <tcp_receive+0xdd8>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	b29b      	uxth	r3, r3
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd22:	891b      	ldrh	r3, [r3, #8]
 800fd24:	4619      	mov	r1, r3
 800fd26:	4610      	mov	r0, r2
 800fd28:	f7fb ff44 	bl	800bbb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2e:	68fa      	ldr	r2, [r7, #12]
 800fd30:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fd32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f7ff f8a5 	bl	800ee84 <tcp_oos_insert_segment>
                  }
                  break;
 800fd3a:	e0db      	b.n	800fef4 <tcp_receive+0xf84>
 800fd3c:	20008c70 	.word	0x20008c70
 800fd40:	20008c6d 	.word	0x20008c6d
 800fd44:	20008c40 	.word	0x20008c40
 800fd48:	20008c60 	.word	0x20008c60
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f040 80bf 	bne.w	800fed4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fd56:	4b7c      	ldr	r3, [pc, #496]	; (800ff48 <tcp_receive+0xfd8>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f340 80b6 	ble.w	800fed4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	899b      	ldrh	r3, [r3, #12]
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fa febb 	bl	800aaec <lwip_htons>
 800fd76:	4603      	mov	r3, r0
 800fd78:	f003 0301 	and.w	r3, r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f040 80bb 	bne.w	800fef8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fd82:	4872      	ldr	r0, [pc, #456]	; (800ff4c <tcp_receive+0xfdc>)
 800fd84:	f7fd fbec 	bl	800d560 <tcp_seg_copy>
 800fd88:	4602      	mov	r2, r0
 800fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f000 80b2 	beq.w	800fefc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda0:	8912      	ldrh	r2, [r2, #8]
 800fda2:	441a      	add	r2, r3
 800fda4:	4b68      	ldr	r3, [pc, #416]	; (800ff48 <tcp_receive+0xfd8>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	1ad3      	subs	r3, r2, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	dd12      	ble.n	800fdd4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fdae:	4b66      	ldr	r3, [pc, #408]	; (800ff48 <tcp_receive+0xfd8>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b29a      	uxth	r2, r3
 800fdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	685a      	ldr	r2, [r3, #4]
 800fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdca:	891b      	ldrh	r3, [r3, #8]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	f7fb fef0 	bl	800bbb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fdd4:	4b5e      	ldr	r3, [pc, #376]	; (800ff50 <tcp_receive+0xfe0>)
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	4b5b      	ldr	r3, [pc, #364]	; (800ff48 <tcp_receive+0xfd8>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	441a      	add	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fde8:	440b      	add	r3, r1
 800fdea:	1ad3      	subs	r3, r2, r3
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f340 8085 	ble.w	800fefc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	899b      	ldrh	r3, [r3, #12]
 800fdfa:	b29b      	uxth	r3, r3
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fa fe75 	bl	800aaec <lwip_htons>
 800fe02:	4603      	mov	r3, r0
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d01e      	beq.n	800fe4a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	899b      	ldrh	r3, [r3, #12]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe1a:	b29c      	uxth	r4, r3
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	899b      	ldrh	r3, [r3, #12]
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fa fe60 	bl	800aaec <lwip_htons>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fa fe59 	bl	800aaec <lwip_htons>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	4322      	orrs	r2, r4
 800fe46:	b292      	uxth	r2, r2
 800fe48:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe54:	4413      	add	r3, r2
 800fe56:	b299      	uxth	r1, r3
 800fe58:	4b3b      	ldr	r3, [pc, #236]	; (800ff48 <tcp_receive+0xfd8>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	1a8a      	subs	r2, r1, r2
 800fe64:	b292      	uxth	r2, r2
 800fe66:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	891b      	ldrh	r3, [r3, #8]
 800fe74:	4619      	mov	r1, r3
 800fe76:	4610      	mov	r0, r2
 800fe78:	f7fb fe9c 	bl	800bbb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	891c      	ldrh	r4, [r3, #8]
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	899b      	ldrh	r3, [r3, #12]
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fa fe2d 	bl	800aaec <lwip_htons>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f003 0303 	and.w	r3, r3, #3
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d001      	beq.n	800fea0 <tcp_receive+0xf30>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e000      	b.n	800fea2 <tcp_receive+0xf32>
 800fea0:	2300      	movs	r3, #0
 800fea2:	4423      	add	r3, r4
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	4b2a      	ldr	r3, [pc, #168]	; (800ff50 <tcp_receive+0xfe0>)
 800fea8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800feaa:	4b29      	ldr	r3, [pc, #164]	; (800ff50 <tcp_receive+0xfe0>)
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	461a      	mov	r2, r3
 800feb0:	4b25      	ldr	r3, [pc, #148]	; (800ff48 <tcp_receive+0xfd8>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	441a      	add	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800febe:	440b      	add	r3, r1
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d01b      	beq.n	800fefc <tcp_receive+0xf8c>
 800fec4:	4b23      	ldr	r3, [pc, #140]	; (800ff54 <tcp_receive+0xfe4>)
 800fec6:	f240 627b 	movw	r2, #1659	; 0x67b
 800feca:	4923      	ldr	r1, [pc, #140]	; (800ff58 <tcp_receive+0xfe8>)
 800fecc:	4823      	ldr	r0, [pc, #140]	; (800ff5c <tcp_receive+0xfec>)
 800fece:	f006 fcf5 	bl	80168bc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fed2:	e013      	b.n	800fefc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f47f aeab 	bne.w	800fc3c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800fee6:	e00f      	b.n	800ff08 <tcp_receive+0xf98>
                break;
 800fee8:	bf00      	nop
 800feea:	e00d      	b.n	800ff08 <tcp_receive+0xf98>
                break;
 800feec:	bf00      	nop
 800feee:	e00b      	b.n	800ff08 <tcp_receive+0xf98>
                  break;
 800fef0:	bf00      	nop
 800fef2:	e009      	b.n	800ff08 <tcp_receive+0xf98>
                  break;
 800fef4:	bf00      	nop
 800fef6:	e007      	b.n	800ff08 <tcp_receive+0xf98>
                  break;
 800fef8:	bf00      	nop
 800fefa:	e005      	b.n	800ff08 <tcp_receive+0xf98>
                break;
 800fefc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800fefe:	e003      	b.n	800ff08 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 ff4f 	bl	8010da4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff06:	e01a      	b.n	800ff3e <tcp_receive+0xfce>
 800ff08:	e019      	b.n	800ff3e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <tcp_receive+0xfd8>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	db0a      	blt.n	800ff2e <tcp_receive+0xfbe>
 800ff18:	4b0b      	ldr	r3, [pc, #44]	; (800ff48 <tcp_receive+0xfd8>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff20:	6879      	ldr	r1, [r7, #4]
 800ff22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff24:	440b      	add	r3, r1
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	3301      	adds	r3, #1
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	dd07      	ble.n	800ff3e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	7e9b      	ldrb	r3, [r3, #26]
 800ff32:	f043 0302 	orr.w	r3, r3, #2
 800ff36:	b2da      	uxtb	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800ff3c:	e7ff      	b.n	800ff3e <tcp_receive+0xfce>
 800ff3e:	bf00      	nop
 800ff40:	3734      	adds	r7, #52	; 0x34
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff46:	bf00      	nop
 800ff48:	20008c60 	.word	0x20008c60
 800ff4c:	20008c40 	.word	0x20008c40
 800ff50:	20008c6a 	.word	0x20008c6a
 800ff54:	08019624 	.word	0x08019624
 800ff58:	080198f0 	.word	0x080198f0
 800ff5c:	08019668 	.word	0x08019668

0800ff60 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ff66:	4b18      	ldr	r3, [pc, #96]	; (800ffc8 <tcp_getoptbyte+0x68>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d005      	beq.n	800ff7a <tcp_getoptbyte+0x1a>
 800ff6e:	4b17      	ldr	r3, [pc, #92]	; (800ffcc <tcp_getoptbyte+0x6c>)
 800ff70:	881a      	ldrh	r2, [r3, #0]
 800ff72:	4b17      	ldr	r3, [pc, #92]	; (800ffd0 <tcp_getoptbyte+0x70>)
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d20e      	bcs.n	800ff98 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ff7a:	4b16      	ldr	r3, [pc, #88]	; (800ffd4 <tcp_getoptbyte+0x74>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	3314      	adds	r3, #20
 800ff80:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800ff82:	4b12      	ldr	r3, [pc, #72]	; (800ffcc <tcp_getoptbyte+0x6c>)
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	1c5a      	adds	r2, r3, #1
 800ff88:	b291      	uxth	r1, r2
 800ff8a:	4a10      	ldr	r2, [pc, #64]	; (800ffcc <tcp_getoptbyte+0x6c>)
 800ff8c:	8011      	strh	r1, [r2, #0]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	4413      	add	r3, r2
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	e010      	b.n	800ffba <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ff98:	4b0c      	ldr	r3, [pc, #48]	; (800ffcc <tcp_getoptbyte+0x6c>)
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	b291      	uxth	r1, r2
 800ffa0:	4a0a      	ldr	r2, [pc, #40]	; (800ffcc <tcp_getoptbyte+0x6c>)
 800ffa2:	8011      	strh	r1, [r2, #0]
 800ffa4:	b2da      	uxtb	r2, r3
 800ffa6:	4b0a      	ldr	r3, [pc, #40]	; (800ffd0 <tcp_getoptbyte+0x70>)
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <tcp_getoptbyte+0x68>)
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	370c      	adds	r7, #12
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	20008c58 	.word	0x20008c58
 800ffcc:	20008c5c 	.word	0x20008c5c
 800ffd0:	20008c56 	.word	0x20008c56
 800ffd4:	20008c50 	.word	0x20008c50

0800ffd8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ffe0:	4b2d      	ldr	r3, [pc, #180]	; (8010098 <tcp_parseopt+0xc0>)
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d053      	beq.n	8010090 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ffe8:	4b2c      	ldr	r3, [pc, #176]	; (801009c <tcp_parseopt+0xc4>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	801a      	strh	r2, [r3, #0]
 800ffee:	e043      	b.n	8010078 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800fff0:	f7ff ffb6 	bl	800ff60 <tcp_getoptbyte>
 800fff4:	4603      	mov	r3, r0
 800fff6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d03c      	beq.n	8010078 <tcp_parseopt+0xa0>
 800fffe:	2b02      	cmp	r3, #2
 8010000:	d002      	beq.n	8010008 <tcp_parseopt+0x30>
 8010002:	2b00      	cmp	r3, #0
 8010004:	d03f      	beq.n	8010086 <tcp_parseopt+0xae>
 8010006:	e026      	b.n	8010056 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010008:	f7ff ffaa 	bl	800ff60 <tcp_getoptbyte>
 801000c:	4603      	mov	r3, r0
 801000e:	2b04      	cmp	r3, #4
 8010010:	d13b      	bne.n	801008a <tcp_parseopt+0xb2>
 8010012:	4b22      	ldr	r3, [pc, #136]	; (801009c <tcp_parseopt+0xc4>)
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	3302      	adds	r3, #2
 8010018:	4a1f      	ldr	r2, [pc, #124]	; (8010098 <tcp_parseopt+0xc0>)
 801001a:	8812      	ldrh	r2, [r2, #0]
 801001c:	4293      	cmp	r3, r2
 801001e:	dc34      	bgt.n	801008a <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010020:	f7ff ff9e 	bl	800ff60 <tcp_getoptbyte>
 8010024:	4603      	mov	r3, r0
 8010026:	b29b      	uxth	r3, r3
 8010028:	021b      	lsls	r3, r3, #8
 801002a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801002c:	f7ff ff98 	bl	800ff60 <tcp_getoptbyte>
 8010030:	4603      	mov	r3, r0
 8010032:	b29a      	uxth	r2, r3
 8010034:	89bb      	ldrh	r3, [r7, #12]
 8010036:	4313      	orrs	r3, r2
 8010038:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801003a:	89bb      	ldrh	r3, [r7, #12]
 801003c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010040:	d804      	bhi.n	801004c <tcp_parseopt+0x74>
 8010042:	89bb      	ldrh	r3, [r7, #12]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <tcp_parseopt+0x74>
 8010048:	89ba      	ldrh	r2, [r7, #12]
 801004a:	e001      	b.n	8010050 <tcp_parseopt+0x78>
 801004c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010054:	e010      	b.n	8010078 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010056:	f7ff ff83 	bl	800ff60 <tcp_getoptbyte>
 801005a:	4603      	mov	r3, r0
 801005c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801005e:	7afb      	ldrb	r3, [r7, #11]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d914      	bls.n	801008e <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010064:	7afb      	ldrb	r3, [r7, #11]
 8010066:	b29a      	uxth	r2, r3
 8010068:	4b0c      	ldr	r3, [pc, #48]	; (801009c <tcp_parseopt+0xc4>)
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	4413      	add	r3, r2
 801006e:	b29b      	uxth	r3, r3
 8010070:	3b02      	subs	r3, #2
 8010072:	b29a      	uxth	r2, r3
 8010074:	4b09      	ldr	r3, [pc, #36]	; (801009c <tcp_parseopt+0xc4>)
 8010076:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010078:	4b08      	ldr	r3, [pc, #32]	; (801009c <tcp_parseopt+0xc4>)
 801007a:	881a      	ldrh	r2, [r3, #0]
 801007c:	4b06      	ldr	r3, [pc, #24]	; (8010098 <tcp_parseopt+0xc0>)
 801007e:	881b      	ldrh	r3, [r3, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d3b5      	bcc.n	800fff0 <tcp_parseopt+0x18>
 8010084:	e004      	b.n	8010090 <tcp_parseopt+0xb8>
        return;
 8010086:	bf00      	nop
 8010088:	e002      	b.n	8010090 <tcp_parseopt+0xb8>
          return;
 801008a:	bf00      	nop
 801008c:	e000      	b.n	8010090 <tcp_parseopt+0xb8>
          return;
 801008e:	bf00      	nop
      }
    }
  }
}
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20008c54 	.word	0x20008c54
 801009c:	20008c5c 	.word	0x20008c5c

080100a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80100a0:	b480      	push	{r7}
 80100a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80100a4:	4b05      	ldr	r3, [pc, #20]	; (80100bc <tcp_trigger_input_pcb_close+0x1c>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	f043 0310 	orr.w	r3, r3, #16
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	4b03      	ldr	r3, [pc, #12]	; (80100bc <tcp_trigger_input_pcb_close+0x1c>)
 80100b0:	701a      	strb	r2, [r3, #0]
}
 80100b2:	bf00      	nop
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	20008c6d 	.word	0x20008c6d

080100c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	607b      	str	r3, [r7, #4]
 80100ca:	460b      	mov	r3, r1
 80100cc:	817b      	strh	r3, [r7, #10]
 80100ce:	4613      	mov	r3, r2
 80100d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80100d2:	897a      	ldrh	r2, [r7, #10]
 80100d4:	893b      	ldrh	r3, [r7, #8]
 80100d6:	4413      	add	r3, r2
 80100d8:	b29b      	uxth	r3, r3
 80100da:	3314      	adds	r3, #20
 80100dc:	b29b      	uxth	r3, r3
 80100de:	2200      	movs	r2, #0
 80100e0:	4619      	mov	r1, r3
 80100e2:	2001      	movs	r0, #1
 80100e4:	f7fb fb68 	bl	800b7b8 <pbuf_alloc>
 80100e8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d057      	beq.n	80101a0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	895b      	ldrh	r3, [r3, #10]
 80100f4:	461a      	mov	r2, r3
 80100f6:	897b      	ldrh	r3, [r7, #10]
 80100f8:	3314      	adds	r3, #20
 80100fa:	429a      	cmp	r2, r3
 80100fc:	da05      	bge.n	801010a <tcp_output_alloc_header+0x4a>
 80100fe:	4b2b      	ldr	r3, [pc, #172]	; (80101ac <tcp_output_alloc_header+0xec>)
 8010100:	2273      	movs	r2, #115	; 0x73
 8010102:	492b      	ldr	r1, [pc, #172]	; (80101b0 <tcp_output_alloc_header+0xf0>)
 8010104:	482b      	ldr	r0, [pc, #172]	; (80101b4 <tcp_output_alloc_header+0xf4>)
 8010106:	f006 fbd9 	bl	80168bc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	8adb      	ldrh	r3, [r3, #22]
 8010114:	4618      	mov	r0, r3
 8010116:	f7fa fce9 	bl	800aaec <lwip_htons>
 801011a:	4603      	mov	r3, r0
 801011c:	461a      	mov	r2, r3
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	8b1b      	ldrh	r3, [r3, #24]
 8010126:	4618      	mov	r0, r3
 8010128:	f7fa fce0 	bl	800aaec <lwip_htons>
 801012c:	4603      	mov	r3, r0
 801012e:	461a      	mov	r2, r3
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013e:	4618      	mov	r0, r3
 8010140:	f7fa fce2 	bl	800ab08 <lwip_htonl>
 8010144:	4602      	mov	r2, r0
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801014a:	897b      	ldrh	r3, [r7, #10]
 801014c:	089b      	lsrs	r3, r3, #2
 801014e:	b29b      	uxth	r3, r3
 8010150:	3305      	adds	r3, #5
 8010152:	b29b      	uxth	r3, r3
 8010154:	031b      	lsls	r3, r3, #12
 8010156:	b29b      	uxth	r3, r3
 8010158:	f043 0310 	orr.w	r3, r3, #16
 801015c:	b29b      	uxth	r3, r3
 801015e:	4618      	mov	r0, r3
 8010160:	f7fa fcc4 	bl	800aaec <lwip_htons>
 8010164:	4603      	mov	r3, r0
 8010166:	461a      	mov	r2, r3
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010170:	4618      	mov	r0, r3
 8010172:	f7fa fcbb 	bl	800aaec <lwip_htons>
 8010176:	4603      	mov	r3, r0
 8010178:	461a      	mov	r2, r3
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	2200      	movs	r2, #0
 8010182:	741a      	strb	r2, [r3, #16]
 8010184:	2200      	movs	r2, #0
 8010186:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	2200      	movs	r2, #0
 801018c:	749a      	strb	r2, [r3, #18]
 801018e:	2200      	movs	r2, #0
 8010190:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801019a:	441a      	add	r2, r3
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80101a0:	697b      	ldr	r3, [r7, #20]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3718      	adds	r7, #24
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	080199ac 	.word	0x080199ac
 80101b0:	080199e0 	.word	0x080199e0
 80101b4:	08019a10 	.word	0x08019a10

080101b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80101b8:	b590      	push	{r4, r7, lr}
 80101ba:	b085      	sub	sp, #20
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d02d      	beq.n	8010224 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	e002      	b.n	80101d6 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1f8      	bne.n	80101d0 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	899b      	ldrh	r3, [r3, #12]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7fa fc80 	bl	800aaec <lwip_htons>
 80101ec:	4603      	mov	r3, r0
 80101ee:	f003 0307 	and.w	r3, r3, #7
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d116      	bne.n	8010224 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	899b      	ldrh	r3, [r3, #12]
 80101fc:	b29c      	uxth	r4, r3
 80101fe:	2001      	movs	r0, #1
 8010200:	f7fa fc74 	bl	800aaec <lwip_htons>
 8010204:	4603      	mov	r3, r0
 8010206:	461a      	mov	r2, r3
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	4322      	orrs	r2, r4
 801020e:	b292      	uxth	r2, r2
 8010210:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	7e9b      	ldrb	r3, [r3, #26]
 8010216:	f043 0320 	orr.w	r3, r3, #32
 801021a:	b2da      	uxtb	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010220:	2300      	movs	r3, #0
 8010222:	e004      	b.n	801022e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010224:	2101      	movs	r1, #1
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f000 fcc0 	bl	8010bac <tcp_enqueue_flags>
 801022c:	4603      	mov	r3, r0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3714      	adds	r7, #20
 8010232:	46bd      	mov	sp, r7
 8010234:	bd90      	pop	{r4, r7, pc}
	...

08010238 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010238:	b590      	push	{r4, r7, lr}
 801023a:	b087      	sub	sp, #28
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	603b      	str	r3, [r7, #0]
 8010244:	4613      	mov	r3, r2
 8010246:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010248:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	b2db      	uxtb	r3, r3
 8010250:	f003 0304 	and.w	r3, r3, #4
 8010254:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010256:	2003      	movs	r0, #3
 8010258:	f7fb f86c 	bl	800b334 <memp_malloc>
 801025c:	6138      	str	r0, [r7, #16]
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d104      	bne.n	801026e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010264:	68b8      	ldr	r0, [r7, #8]
 8010266:	f7fb fe19 	bl	800be9c <pbuf_free>
    return NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	e061      	b.n	8010332 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010274:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	2200      	movs	r2, #0
 801027a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801027c:	693b      	ldr	r3, [r7, #16]
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	891a      	ldrh	r2, [r3, #8]
 8010286:	7dfb      	ldrb	r3, [r7, #23]
 8010288:	b29b      	uxth	r3, r3
 801028a:	429a      	cmp	r2, r3
 801028c:	d205      	bcs.n	801029a <tcp_create_segment+0x62>
 801028e:	4b2b      	ldr	r3, [pc, #172]	; (801033c <tcp_create_segment+0x104>)
 8010290:	22ba      	movs	r2, #186	; 0xba
 8010292:	492b      	ldr	r1, [pc, #172]	; (8010340 <tcp_create_segment+0x108>)
 8010294:	482b      	ldr	r0, [pc, #172]	; (8010344 <tcp_create_segment+0x10c>)
 8010296:	f006 fb11 	bl	80168bc <iprintf>
  seg->len = p->tot_len - optlen;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	891a      	ldrh	r2, [r3, #8]
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80102aa:	2114      	movs	r1, #20
 80102ac:	68b8      	ldr	r0, [r7, #8]
 80102ae:	f7fb fdd1 	bl	800be54 <pbuf_header>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80102b8:	6938      	ldr	r0, [r7, #16]
 80102ba:	f7fd f92a 	bl	800d512 <tcp_seg_free>
    return NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	e037      	b.n	8010332 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	8ada      	ldrh	r2, [r3, #22]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	68dc      	ldr	r4, [r3, #12]
 80102d4:	4610      	mov	r0, r2
 80102d6:	f7fa fc09 	bl	800aaec <lwip_htons>
 80102da:	4603      	mov	r3, r0
 80102dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	8b1a      	ldrh	r2, [r3, #24]
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	68dc      	ldr	r4, [r3, #12]
 80102e6:	4610      	mov	r0, r2
 80102e8:	f7fa fc00 	bl	800aaec <lwip_htons>
 80102ec:	4603      	mov	r3, r0
 80102ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	68dc      	ldr	r4, [r3, #12]
 80102f4:	6838      	ldr	r0, [r7, #0]
 80102f6:	f7fa fc07 	bl	800ab08 <lwip_htonl>
 80102fa:	4603      	mov	r3, r0
 80102fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	089b      	lsrs	r3, r3, #2
 8010302:	b2db      	uxtb	r3, r3
 8010304:	b29b      	uxth	r3, r3
 8010306:	3305      	adds	r3, #5
 8010308:	b29b      	uxth	r3, r3
 801030a:	031b      	lsls	r3, r3, #12
 801030c:	b29a      	uxth	r2, r3
 801030e:	79fb      	ldrb	r3, [r7, #7]
 8010310:	b29b      	uxth	r3, r3
 8010312:	4313      	orrs	r3, r2
 8010314:	b29a      	uxth	r2, r3
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	68dc      	ldr	r4, [r3, #12]
 801031a:	4610      	mov	r0, r2
 801031c:	f7fa fbe6 	bl	800aaec <lwip_htons>
 8010320:	4603      	mov	r3, r0
 8010322:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	749a      	strb	r2, [r3, #18]
 801032c:	2200      	movs	r2, #0
 801032e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010330:	693b      	ldr	r3, [r7, #16]
}
 8010332:	4618      	mov	r0, r3
 8010334:	371c      	adds	r7, #28
 8010336:	46bd      	mov	sp, r7
 8010338:	bd90      	pop	{r4, r7, pc}
 801033a:	bf00      	nop
 801033c:	080199ac 	.word	0x080199ac
 8010340:	08019a38 	.word	0x08019a38
 8010344:	08019a10 	.word	0x08019a10

08010348 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	607b      	str	r3, [r7, #4]
 8010350:	4603      	mov	r3, r0
 8010352:	73fb      	strb	r3, [r7, #15]
 8010354:	460b      	mov	r3, r1
 8010356:	81bb      	strh	r3, [r7, #12]
 8010358:	4613      	mov	r3, r2
 801035a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801035c:	89bb      	ldrh	r3, [r7, #12]
 801035e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010360:	89ba      	ldrh	r2, [r7, #12]
 8010362:	897b      	ldrh	r3, [r7, #10]
 8010364:	429a      	cmp	r2, r3
 8010366:	d221      	bcs.n	80103ac <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801036c:	f003 0302 	and.w	r3, r3, #2
 8010370:	2b00      	cmp	r3, #0
 8010372:	d111      	bne.n	8010398 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	7e9b      	ldrb	r3, [r3, #26]
 8010378:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801037c:	2b00      	cmp	r3, #0
 801037e:	d115      	bne.n	80103ac <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8010380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010384:	2b00      	cmp	r3, #0
 8010386:	d007      	beq.n	8010398 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010388:	6a3b      	ldr	r3, [r7, #32]
 801038a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 801038c:	2b00      	cmp	r3, #0
 801038e:	d103      	bne.n	8010398 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8010390:	6a3b      	ldr	r3, [r7, #32]
 8010392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010394:	2b00      	cmp	r3, #0
 8010396:	d009      	beq.n	80103ac <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010398:	89bb      	ldrh	r3, [r7, #12]
 801039a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801039e:	f023 0203 	bic.w	r2, r3, #3
 80103a2:	897b      	ldrh	r3, [r7, #10]
 80103a4:	4293      	cmp	r3, r2
 80103a6:	bf28      	it	cs
 80103a8:	4613      	movcs	r3, r2
 80103aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80103ac:	8af9      	ldrh	r1, [r7, #22]
 80103ae:	7bfb      	ldrb	r3, [r7, #15]
 80103b0:	2200      	movs	r2, #0
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fb fa00 	bl	800b7b8 <pbuf_alloc>
 80103b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80103c0:	2300      	movs	r3, #0
 80103c2:	e019      	b.n	80103f8 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d006      	beq.n	80103da <tcp_pbuf_prealloc+0x92>
 80103cc:	4b0c      	ldr	r3, [pc, #48]	; (8010400 <tcp_pbuf_prealloc+0xb8>)
 80103ce:	f44f 7288 	mov.w	r2, #272	; 0x110
 80103d2:	490c      	ldr	r1, [pc, #48]	; (8010404 <tcp_pbuf_prealloc+0xbc>)
 80103d4:	480c      	ldr	r0, [pc, #48]	; (8010408 <tcp_pbuf_prealloc+0xc0>)
 80103d6:	f006 fa71 	bl	80168bc <iprintf>
  *oversize = p->len - length;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	895a      	ldrh	r2, [r3, #10]
 80103de:	89bb      	ldrh	r3, [r7, #12]
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	89ba      	ldrh	r2, [r7, #12]
 80103ec:	811a      	strh	r2, [r3, #8]
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	891a      	ldrh	r2, [r3, #8]
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	815a      	strh	r2, [r3, #10]
  return p;
 80103f6:	693b      	ldr	r3, [r7, #16]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3718      	adds	r7, #24
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	080199ac 	.word	0x080199ac
 8010404:	08019a50 	.word	0x08019a50
 8010408:	08019a10 	.word	0x08019a10

0801040c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	7d1b      	ldrb	r3, [r3, #20]
 801041c:	2b04      	cmp	r3, #4
 801041e:	d00e      	beq.n	801043e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010424:	2b07      	cmp	r3, #7
 8010426:	d00a      	beq.n	801043e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801042c:	2b02      	cmp	r3, #2
 801042e:	d006      	beq.n	801043e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010434:	2b03      	cmp	r3, #3
 8010436:	d002      	beq.n	801043e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010438:	f06f 030a 	mvn.w	r3, #10
 801043c:	e04f      	b.n	80104de <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801043e:	887b      	ldrh	r3, [r7, #2]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	e04a      	b.n	80104de <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801044e:	887a      	ldrh	r2, [r7, #2]
 8010450:	429a      	cmp	r2, r3
 8010452:	d909      	bls.n	8010468 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	7e9b      	ldrb	r3, [r3, #26]
 8010458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801045c:	b2da      	uxtb	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010466:	e03a      	b.n	80104de <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801046e:	2b08      	cmp	r3, #8
 8010470:	d806      	bhi.n	8010480 <tcp_write_checks+0x74>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010478:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801047c:	4293      	cmp	r3, r2
 801047e:	d909      	bls.n	8010494 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	7e9b      	ldrb	r3, [r3, #26]
 8010484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010488:	b2da      	uxtb	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801048e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010492:	e024      	b.n	80104de <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00f      	beq.n	80104be <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d11a      	bne.n	80104dc <tcp_write_checks+0xd0>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d116      	bne.n	80104dc <tcp_write_checks+0xd0>
 80104ae:	4b0e      	ldr	r3, [pc, #56]	; (80104e8 <tcp_write_checks+0xdc>)
 80104b0:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80104b4:	490d      	ldr	r1, [pc, #52]	; (80104ec <tcp_write_checks+0xe0>)
 80104b6:	480e      	ldr	r0, [pc, #56]	; (80104f0 <tcp_write_checks+0xe4>)
 80104b8:	f006 fa00 	bl	80168bc <iprintf>
 80104bc:	e00e      	b.n	80104dc <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d103      	bne.n	80104ce <tcp_write_checks+0xc2>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d006      	beq.n	80104dc <tcp_write_checks+0xd0>
 80104ce:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <tcp_write_checks+0xdc>)
 80104d0:	f240 1259 	movw	r2, #345	; 0x159
 80104d4:	4907      	ldr	r1, [pc, #28]	; (80104f4 <tcp_write_checks+0xe8>)
 80104d6:	4806      	ldr	r0, [pc, #24]	; (80104f0 <tcp_write_checks+0xe4>)
 80104d8:	f006 f9f0 	bl	80168bc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	080199ac 	.word	0x080199ac
 80104ec:	08019a64 	.word	0x08019a64
 80104f0:	08019a10 	.word	0x08019a10
 80104f4:	08019aa0 	.word	0x08019aa0

080104f8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80104f8:	b590      	push	{r4, r7, lr}
 80104fa:	b09b      	sub	sp, #108	; 0x6c
 80104fc:	af04      	add	r7, sp, #16
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4611      	mov	r1, r2
 8010504:	461a      	mov	r2, r3
 8010506:	460b      	mov	r3, r1
 8010508:	80fb      	strh	r3, [r7, #6]
 801050a:	4613      	mov	r3, r2
 801050c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801050e:	2300      	movs	r3, #0
 8010510:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010512:	2300      	movs	r3, #0
 8010514:	653b      	str	r3, [r7, #80]	; 0x50
 8010516:	2300      	movs	r3, #0
 8010518:	64fb      	str	r3, [r7, #76]	; 0x4c
 801051a:	2300      	movs	r3, #0
 801051c:	64bb      	str	r3, [r7, #72]	; 0x48
 801051e:	2300      	movs	r3, #0
 8010520:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010522:	2300      	movs	r3, #0
 8010524:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010528:	2300      	movs	r3, #0
 801052a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801052e:	2300      	movs	r3, #0
 8010530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010534:	2300      	movs	r3, #0
 8010536:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010546:	085b      	lsrs	r3, r3, #1
 8010548:	b29a      	uxth	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054e:	4293      	cmp	r3, r2
 8010550:	bf28      	it	cs
 8010552:	4613      	movcs	r3, r2
 8010554:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <tcp_write+0x6a>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010560:	e000      	b.n	8010564 <tcp_write+0x6c>
 8010562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010564:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d109      	bne.n	8010580 <tcp_write+0x88>
 801056c:	4b92      	ldr	r3, [pc, #584]	; (80107b8 <tcp_write+0x2c0>)
 801056e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8010572:	4992      	ldr	r1, [pc, #584]	; (80107bc <tcp_write+0x2c4>)
 8010574:	4892      	ldr	r0, [pc, #584]	; (80107c0 <tcp_write+0x2c8>)
 8010576:	f006 f9a1 	bl	80168bc <iprintf>
 801057a:	f06f 030f 	mvn.w	r3, #15
 801057e:	e30a      	b.n	8010b96 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010580:	88fb      	ldrh	r3, [r7, #6]
 8010582:	4619      	mov	r1, r3
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f7ff ff41 	bl	801040c <tcp_write_checks>
 801058a:	4603      	mov	r3, r0
 801058c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010590:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <tcp_write+0xa6>
    return err;
 8010598:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801059c:	e2fb      	b.n	8010b96 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 80f5 	beq.w	801079c <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105b6:	653b      	str	r3, [r7, #80]	; 0x50
 80105b8:	e002      	b.n	80105c0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80105ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80105c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1f8      	bne.n	80105ba <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80105c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ca:	7a9b      	ldrb	r3, [r3, #10]
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	f003 0304 	and.w	r3, r3, #4
 80105d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80105d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105da:	891b      	ldrh	r3, [r3, #8]
 80105dc:	4619      	mov	r1, r3
 80105de:	8c3b      	ldrh	r3, [r7, #32]
 80105e0:	440b      	add	r3, r1
 80105e2:	429a      	cmp	r2, r3
 80105e4:	da06      	bge.n	80105f4 <tcp_write+0xfc>
 80105e6:	4b74      	ldr	r3, [pc, #464]	; (80107b8 <tcp_write+0x2c0>)
 80105e8:	f240 12c7 	movw	r2, #455	; 0x1c7
 80105ec:	4975      	ldr	r1, [pc, #468]	; (80107c4 <tcp_write+0x2cc>)
 80105ee:	4874      	ldr	r0, [pc, #464]	; (80107c0 <tcp_write+0x2c8>)
 80105f0:	f006 f964 	bl	80168bc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80105f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105f6:	891a      	ldrh	r2, [r3, #8]
 80105f8:	8c3b      	ldrh	r3, [r7, #32]
 80105fa:	4413      	add	r3, r2
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801060a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801060c:	8a7b      	ldrh	r3, [r7, #18]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d027      	beq.n	8010662 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010612:	8a7b      	ldrh	r3, [r7, #18]
 8010614:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010616:	429a      	cmp	r2, r3
 8010618:	d206      	bcs.n	8010628 <tcp_write+0x130>
 801061a:	4b67      	ldr	r3, [pc, #412]	; (80107b8 <tcp_write+0x2c0>)
 801061c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010620:	4969      	ldr	r1, [pc, #420]	; (80107c8 <tcp_write+0x2d0>)
 8010622:	4867      	ldr	r0, [pc, #412]	; (80107c0 <tcp_write+0x2c8>)
 8010624:	f006 f94a 	bl	80168bc <iprintf>
      seg = last_unsent;
 8010628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801062c:	8a7b      	ldrh	r3, [r7, #18]
 801062e:	88fa      	ldrh	r2, [r7, #6]
 8010630:	429a      	cmp	r2, r3
 8010632:	d901      	bls.n	8010638 <tcp_write+0x140>
 8010634:	8a7b      	ldrh	r3, [r7, #18]
 8010636:	e000      	b.n	801063a <tcp_write+0x142>
 8010638:	88fb      	ldrh	r3, [r7, #6]
 801063a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801063c:	4293      	cmp	r3, r2
 801063e:	bfa8      	it	ge
 8010640:	4613      	movge	r3, r2
 8010642:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010648:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801064a:	4413      	add	r3, r2
 801064c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010650:	8a7a      	ldrh	r2, [r7, #18]
 8010652:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	b29b      	uxth	r3, r3
 8010658:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801065a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801065c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010662:	8a7b      	ldrh	r3, [r7, #18]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00b      	beq.n	8010680 <tcp_write+0x188>
 8010668:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801066c:	88fb      	ldrh	r3, [r7, #6]
 801066e:	429a      	cmp	r2, r3
 8010670:	d006      	beq.n	8010680 <tcp_write+0x188>
 8010672:	4b51      	ldr	r3, [pc, #324]	; (80107b8 <tcp_write+0x2c0>)
 8010674:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010678:	4954      	ldr	r1, [pc, #336]	; (80107cc <tcp_write+0x2d4>)
 801067a:	4851      	ldr	r0, [pc, #324]	; (80107c0 <tcp_write+0x2c8>)
 801067c:	f006 f91e 	bl	80168bc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010684:	88fb      	ldrh	r3, [r7, #6]
 8010686:	429a      	cmp	r2, r3
 8010688:	f080 8168 	bcs.w	801095c <tcp_write+0x464>
 801068c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 8164 	beq.w	801095c <tcp_write+0x464>
 8010694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010696:	891b      	ldrh	r3, [r3, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	f000 815f 	beq.w	801095c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801069e:	88fa      	ldrh	r2, [r7, #6]
 80106a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106a4:	1ad2      	subs	r2, r2, r3
 80106a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106a8:	4293      	cmp	r3, r2
 80106aa:	bfa8      	it	ge
 80106ac:	4613      	movge	r3, r2
 80106ae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80106b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80106b4:	797b      	ldrb	r3, [r7, #5]
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d027      	beq.n	801070e <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80106be:	f107 0012 	add.w	r0, r7, #18
 80106c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80106c4:	8bf9      	ldrh	r1, [r7, #30]
 80106c6:	2301      	movs	r3, #1
 80106c8:	9302      	str	r3, [sp, #8]
 80106ca:	797b      	ldrb	r3, [r7, #5]
 80106cc:	9301      	str	r3, [sp, #4]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	4603      	mov	r3, r0
 80106d4:	2004      	movs	r0, #4
 80106d6:	f7ff fe37 	bl	8010348 <tcp_pbuf_prealloc>
 80106da:	6578      	str	r0, [r7, #84]	; 0x54
 80106dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 8227 	beq.w	8010b32 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80106e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106e6:	6858      	ldr	r0, [r3, #4]
 80106e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	4413      	add	r3, r2
 80106f0:	8bfa      	ldrh	r2, [r7, #30]
 80106f2:	4619      	mov	r1, r3
 80106f4:	f006 f8cf 	bl	8016896 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80106f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80106fa:	f7fb fc69 	bl	800bfd0 <pbuf_clen>
 80106fe:	4603      	mov	r3, r0
 8010700:	461a      	mov	r2, r3
 8010702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010706:	4413      	add	r3, r2
 8010708:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801070c:	e03f      	b.n	801078e <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801070e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	637b      	str	r3, [r7, #52]	; 0x34
 8010714:	e002      	b.n	801071c <tcp_write+0x224>
 8010716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	637b      	str	r3, [r7, #52]	; 0x34
 801071c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1f8      	bne.n	8010716 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010726:	7b1b      	ldrb	r3, [r3, #12]
 8010728:	2b01      	cmp	r3, #1
 801072a:	d115      	bne.n	8010758 <tcp_write+0x260>
 801072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010732:	8952      	ldrh	r2, [r2, #10]
 8010734:	4413      	add	r3, r2
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	429a      	cmp	r2, r3
 801073a:	d10d      	bne.n	8010758 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801073c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010740:	2b00      	cmp	r3, #0
 8010742:	d006      	beq.n	8010752 <tcp_write+0x25a>
 8010744:	4b1c      	ldr	r3, [pc, #112]	; (80107b8 <tcp_write+0x2c0>)
 8010746:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801074a:	4921      	ldr	r1, [pc, #132]	; (80107d0 <tcp_write+0x2d8>)
 801074c:	481c      	ldr	r0, [pc, #112]	; (80107c0 <tcp_write+0x2c8>)
 801074e:	f006 f8b5 	bl	80168bc <iprintf>
          extendlen = seglen;
 8010752:	8bfb      	ldrh	r3, [r7, #30]
 8010754:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010756:	e01a      	b.n	801078e <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010758:	8bfb      	ldrh	r3, [r7, #30]
 801075a:	2201      	movs	r2, #1
 801075c:	4619      	mov	r1, r3
 801075e:	2004      	movs	r0, #4
 8010760:	f7fb f82a 	bl	800b7b8 <pbuf_alloc>
 8010764:	6578      	str	r0, [r7, #84]	; 0x54
 8010766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010768:	2b00      	cmp	r3, #0
 801076a:	f000 81e4 	beq.w	8010b36 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801076e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010772:	68ba      	ldr	r2, [r7, #8]
 8010774:	441a      	add	r2, r3
 8010776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010778:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801077a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801077c:	f7fb fc28 	bl	800bfd0 <pbuf_clen>
 8010780:	4603      	mov	r3, r0
 8010782:	461a      	mov	r2, r3
 8010784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010788:	4413      	add	r3, r2
 801078a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801078e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010792:	8bfb      	ldrh	r3, [r7, #30]
 8010794:	4413      	add	r3, r2
 8010796:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801079a:	e0df      	b.n	801095c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	f000 80da 	beq.w	801095c <tcp_write+0x464>
 80107a8:	4b03      	ldr	r3, [pc, #12]	; (80107b8 <tcp_write+0x2c0>)
 80107aa:	f240 2225 	movw	r2, #549	; 0x225
 80107ae:	4909      	ldr	r1, [pc, #36]	; (80107d4 <tcp_write+0x2dc>)
 80107b0:	4803      	ldr	r0, [pc, #12]	; (80107c0 <tcp_write+0x2c8>)
 80107b2:	f006 f883 	bl	80168bc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80107b6:	e0d1      	b.n	801095c <tcp_write+0x464>
 80107b8:	080199ac 	.word	0x080199ac
 80107bc:	08019ad4 	.word	0x08019ad4
 80107c0:	08019a10 	.word	0x08019a10
 80107c4:	08019b08 	.word	0x08019b08
 80107c8:	08019b20 	.word	0x08019b20
 80107cc:	08019b40 	.word	0x08019b40
 80107d0:	08019b60 	.word	0x08019b60
 80107d4:	08019b8c 	.word	0x08019b8c
    struct pbuf *p;
    u16_t left = len - pos;
 80107d8:	88fa      	ldrh	r2, [r7, #6]
 80107da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107de:	1ad3      	subs	r3, r2, r3
 80107e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80107e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80107ea:	1ad3      	subs	r3, r2, r3
 80107ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80107ee:	8b7a      	ldrh	r2, [r7, #26]
 80107f0:	8bbb      	ldrh	r3, [r7, #28]
 80107f2:	4293      	cmp	r3, r2
 80107f4:	bf28      	it	cs
 80107f6:	4613      	movcs	r3, r2
 80107f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80107fa:	797b      	ldrb	r3, [r7, #5]
 80107fc:	f003 0301 	and.w	r3, r3, #1
 8010800:	2b00      	cmp	r3, #0
 8010802:	d036      	beq.n	8010872 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010808:	b29a      	uxth	r2, r3
 801080a:	8b3b      	ldrh	r3, [r7, #24]
 801080c:	4413      	add	r3, r2
 801080e:	b299      	uxth	r1, r3
 8010810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010812:	2b00      	cmp	r3, #0
 8010814:	bf0c      	ite	eq
 8010816:	2301      	moveq	r3, #1
 8010818:	2300      	movne	r3, #0
 801081a:	b2db      	uxtb	r3, r3
 801081c:	f107 0012 	add.w	r0, r7, #18
 8010820:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010822:	9302      	str	r3, [sp, #8]
 8010824:	797b      	ldrb	r3, [r7, #5]
 8010826:	9301      	str	r3, [sp, #4]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	4603      	mov	r3, r0
 801082e:	2000      	movs	r0, #0
 8010830:	f7ff fd8a 	bl	8010348 <tcp_pbuf_prealloc>
 8010834:	6338      	str	r0, [r7, #48]	; 0x30
 8010836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 817e 	beq.w	8010b3a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	895b      	ldrh	r3, [r3, #10]
 8010842:	8b3a      	ldrh	r2, [r7, #24]
 8010844:	429a      	cmp	r2, r3
 8010846:	d906      	bls.n	8010856 <tcp_write+0x35e>
 8010848:	4b8f      	ldr	r3, [pc, #572]	; (8010a88 <tcp_write+0x590>)
 801084a:	f240 2241 	movw	r2, #577	; 0x241
 801084e:	498f      	ldr	r1, [pc, #572]	; (8010a8c <tcp_write+0x594>)
 8010850:	488f      	ldr	r0, [pc, #572]	; (8010a90 <tcp_write+0x598>)
 8010852:	f006 f833 	bl	80168bc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	685a      	ldr	r2, [r3, #4]
 801085a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801085e:	18d0      	adds	r0, r2, r3
 8010860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	4413      	add	r3, r2
 8010868:	8b3a      	ldrh	r2, [r7, #24]
 801086a:	4619      	mov	r1, r3
 801086c:	f006 f813 	bl	8016896 <memcpy>
 8010870:	e02e      	b.n	80108d0 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010872:	8a7b      	ldrh	r3, [r7, #18]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d006      	beq.n	8010886 <tcp_write+0x38e>
 8010878:	4b83      	ldr	r3, [pc, #524]	; (8010a88 <tcp_write+0x590>)
 801087a:	f240 224b 	movw	r2, #587	; 0x24b
 801087e:	4985      	ldr	r1, [pc, #532]	; (8010a94 <tcp_write+0x59c>)
 8010880:	4883      	ldr	r0, [pc, #524]	; (8010a90 <tcp_write+0x598>)
 8010882:	f006 f81b 	bl	80168bc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010886:	8b3b      	ldrh	r3, [r7, #24]
 8010888:	2201      	movs	r2, #1
 801088a:	4619      	mov	r1, r3
 801088c:	2000      	movs	r0, #0
 801088e:	f7fa ff93 	bl	800b7b8 <pbuf_alloc>
 8010892:	6178      	str	r0, [r7, #20]
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2b00      	cmp	r3, #0
 8010898:	f000 8151 	beq.w	8010b3e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801089c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	441a      	add	r2, r3
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	2200      	movs	r2, #0
 80108b0:	4619      	mov	r1, r3
 80108b2:	2000      	movs	r0, #0
 80108b4:	f7fa ff80 	bl	800b7b8 <pbuf_alloc>
 80108b8:	6338      	str	r0, [r7, #48]	; 0x30
 80108ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d103      	bne.n	80108c8 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80108c0:	6978      	ldr	r0, [r7, #20]
 80108c2:	f7fb faeb 	bl	800be9c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80108c6:	e13d      	b.n	8010b44 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80108c8:	6979      	ldr	r1, [r7, #20]
 80108ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108cc:	f7fb fbc0 	bl	800c050 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80108d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108d2:	f7fb fb7d 	bl	800bfd0 <pbuf_clen>
 80108d6:	4603      	mov	r3, r0
 80108d8:	461a      	mov	r2, r3
 80108da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108de:	4413      	add	r3, r2
 80108e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80108e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108e8:	2b09      	cmp	r3, #9
 80108ea:	d805      	bhi.n	80108f8 <tcp_write+0x400>
 80108ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d903      	bls.n	8010900 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80108f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108fa:	f7fb facf 	bl	800be9c <pbuf_free>
      goto memerr;
 80108fe:	e121      	b.n	8010b44 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010908:	441a      	add	r2, r3
 801090a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	4613      	mov	r3, r2
 8010912:	2200      	movs	r2, #0
 8010914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010916:	68f8      	ldr	r0, [r7, #12]
 8010918:	f7ff fc8e 	bl	8010238 <tcp_create_segment>
 801091c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801091e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 810e 	beq.w	8010b42 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010928:	2b00      	cmp	r3, #0
 801092a:	d102      	bne.n	8010932 <tcp_write+0x43a>
      queue = seg;
 801092c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092e:	647b      	str	r3, [r7, #68]	; 0x44
 8010930:	e00c      	b.n	801094c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010934:	2b00      	cmp	r3, #0
 8010936:	d106      	bne.n	8010946 <tcp_write+0x44e>
 8010938:	4b53      	ldr	r3, [pc, #332]	; (8010a88 <tcp_write+0x590>)
 801093a:	f240 2285 	movw	r2, #645	; 0x285
 801093e:	4956      	ldr	r1, [pc, #344]	; (8010a98 <tcp_write+0x5a0>)
 8010940:	4853      	ldr	r0, [pc, #332]	; (8010a90 <tcp_write+0x598>)
 8010942:	f005 ffbb 	bl	80168bc <iprintf>
      prev_seg->next = seg;
 8010946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801094a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801094c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801094e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010954:	8b3b      	ldrh	r3, [r7, #24]
 8010956:	4413      	add	r3, r2
 8010958:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801095c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010960:	88fb      	ldrh	r3, [r7, #6]
 8010962:	429a      	cmp	r2, r3
 8010964:	f4ff af38 	bcc.w	80107d8 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010968:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801096a:	2b00      	cmp	r3, #0
 801096c:	d02c      	beq.n	80109c8 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801096e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010974:	e01e      	b.n	80109b4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801097c:	4413      	add	r3, r2
 801097e:	b29a      	uxth	r2, r3
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d110      	bne.n	80109ae <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801098c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010992:	8952      	ldrh	r2, [r2, #10]
 8010994:	4413      	add	r3, r2
 8010996:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010998:	68b9      	ldr	r1, [r7, #8]
 801099a:	4618      	mov	r0, r3
 801099c:	f005 ff7b 	bl	8016896 <memcpy>
        p->len += oversize_used;
 80109a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a2:	895a      	ldrh	r2, [r3, #10]
 80109a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109a6:	4413      	add	r3, r2
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ac:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80109ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1dd      	bne.n	8010976 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80109ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109bc:	891a      	ldrh	r2, [r3, #8]
 80109be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80109c0:	4413      	add	r3, r2
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109c6:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80109c8:	8a7a      	ldrh	r2, [r7, #18]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80109d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d018      	beq.n	8010a08 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80109d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d106      	bne.n	80109ea <tcp_write+0x4f2>
 80109dc:	4b2a      	ldr	r3, [pc, #168]	; (8010a88 <tcp_write+0x590>)
 80109de:	f240 22bb 	movw	r2, #699	; 0x2bb
 80109e2:	492e      	ldr	r1, [pc, #184]	; (8010a9c <tcp_write+0x5a4>)
 80109e4:	482a      	ldr	r0, [pc, #168]	; (8010a90 <tcp_write+0x598>)
 80109e6:	f005 ff69 	bl	80168bc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80109ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fb fb2d 	bl	800c050 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80109f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f8:	891a      	ldrh	r2, [r3, #8]
 80109fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109fc:	891b      	ldrh	r3, [r3, #8]
 80109fe:	4413      	add	r3, r2
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a04:	811a      	strh	r2, [r3, #8]
 8010a06:	e037      	b.n	8010a78 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010a08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d034      	beq.n	8010a78 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d003      	beq.n	8010a1c <tcp_write+0x524>
 8010a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d106      	bne.n	8010a2a <tcp_write+0x532>
 8010a1c:	4b1a      	ldr	r3, [pc, #104]	; (8010a88 <tcp_write+0x590>)
 8010a1e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8010a22:	491f      	ldr	r1, [pc, #124]	; (8010aa0 <tcp_write+0x5a8>)
 8010a24:	481a      	ldr	r0, [pc, #104]	; (8010a90 <tcp_write+0x598>)
 8010a26:	f005 ff49 	bl	80168bc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a30:	e009      	b.n	8010a46 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	891a      	ldrh	r2, [r3, #8]
 8010a36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a38:	4413      	add	r3, r2
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1f1      	bne.n	8010a32 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a50:	891a      	ldrh	r2, [r3, #8]
 8010a52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a54:	4413      	add	r3, r2
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	895a      	ldrh	r2, [r3, #10]
 8010a60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a62:	4413      	add	r3, r2
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a6c:	891a      	ldrh	r2, [r3, #8]
 8010a6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010a70:	4413      	add	r3, r2
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a76:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d112      	bne.n	8010aa4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a82:	669a      	str	r2, [r3, #104]	; 0x68
 8010a84:	e011      	b.n	8010aaa <tcp_write+0x5b2>
 8010a86:	bf00      	nop
 8010a88:	080199ac 	.word	0x080199ac
 8010a8c:	08019bbc 	.word	0x08019bbc
 8010a90:	08019a10 	.word	0x08019a10
 8010a94:	08019bfc 	.word	0x08019bfc
 8010a98:	08019c0c 	.word	0x08019c0c
 8010a9c:	08019c20 	.word	0x08019c20
 8010aa0:	08019c58 	.word	0x08019c58
  } else {
    last_unsent->next = queue;
 8010aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010aa8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010aae:	88fb      	ldrh	r3, [r7, #6]
 8010ab0:	441a      	add	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	1ad3      	subs	r3, r2, r3
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ace:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00e      	beq.n	8010afa <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d10a      	bne.n	8010afa <tcp_write+0x602>
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d106      	bne.n	8010afa <tcp_write+0x602>
 8010aec:	4b2c      	ldr	r3, [pc, #176]	; (8010ba0 <tcp_write+0x6a8>)
 8010aee:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010af2:	492c      	ldr	r1, [pc, #176]	; (8010ba4 <tcp_write+0x6ac>)
 8010af4:	482c      	ldr	r0, [pc, #176]	; (8010ba8 <tcp_write+0x6b0>)
 8010af6:	f005 fee1 	bl	80168bc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8010afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d016      	beq.n	8010b2e <tcp_write+0x636>
 8010b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d012      	beq.n	8010b2e <tcp_write+0x636>
 8010b08:	797b      	ldrb	r3, [r7, #5]
 8010b0a:	f003 0302 	and.w	r3, r3, #2
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10d      	bne.n	8010b2e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b14:	68db      	ldr	r3, [r3, #12]
 8010b16:	899b      	ldrh	r3, [r3, #12]
 8010b18:	b29c      	uxth	r4, r3
 8010b1a:	2008      	movs	r0, #8
 8010b1c:	f7f9 ffe6 	bl	800aaec <lwip_htons>
 8010b20:	4603      	mov	r3, r0
 8010b22:	461a      	mov	r2, r3
 8010b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	4322      	orrs	r2, r4
 8010b2a:	b292      	uxth	r2, r2
 8010b2c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e031      	b.n	8010b96 <tcp_write+0x69e>
          goto memerr;
 8010b32:	bf00      	nop
 8010b34:	e006      	b.n	8010b44 <tcp_write+0x64c>
            goto memerr;
 8010b36:	bf00      	nop
 8010b38:	e004      	b.n	8010b44 <tcp_write+0x64c>
        goto memerr;
 8010b3a:	bf00      	nop
 8010b3c:	e002      	b.n	8010b44 <tcp_write+0x64c>
        goto memerr;
 8010b3e:	bf00      	nop
 8010b40:	e000      	b.n	8010b44 <tcp_write+0x64c>
      goto memerr;
 8010b42:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	7e9b      	ldrb	r3, [r3, #26]
 8010b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b4c:	b2da      	uxtb	r2, r3
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d002      	beq.n	8010b5e <tcp_write+0x666>
    pbuf_free(concat_p);
 8010b58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b5a:	f7fb f99f 	bl	800be9c <pbuf_free>
  }
  if (queue != NULL) {
 8010b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <tcp_write+0x672>
    tcp_segs_free(queue);
 8010b64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b66:	f7fc fcc0 	bl	800d4ea <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00e      	beq.n	8010b92 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d10a      	bne.n	8010b92 <tcp_write+0x69a>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d106      	bne.n	8010b92 <tcp_write+0x69a>
 8010b84:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <tcp_write+0x6a8>)
 8010b86:	f240 3202 	movw	r2, #770	; 0x302
 8010b8a:	4906      	ldr	r1, [pc, #24]	; (8010ba4 <tcp_write+0x6ac>)
 8010b8c:	4806      	ldr	r0, [pc, #24]	; (8010ba8 <tcp_write+0x6b0>)
 8010b8e:	f005 fe95 	bl	80168bc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	375c      	adds	r7, #92	; 0x5c
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd90      	pop	{r4, r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	080199ac 	.word	0x080199ac
 8010ba4:	08019c90 	.word	0x08019c90
 8010ba8:	08019a10 	.word	0x08019a10

08010bac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08a      	sub	sp, #40	; 0x28
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010bc0:	78fb      	ldrb	r3, [r7, #3]
 8010bc2:	f003 0303 	and.w	r3, r3, #3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <tcp_enqueue_flags+0x2c>
 8010bca:	4b6f      	ldr	r3, [pc, #444]	; (8010d88 <tcp_enqueue_flags+0x1dc>)
 8010bcc:	f240 321b 	movw	r2, #795	; 0x31b
 8010bd0:	496e      	ldr	r1, [pc, #440]	; (8010d8c <tcp_enqueue_flags+0x1e0>)
 8010bd2:	486f      	ldr	r0, [pc, #444]	; (8010d90 <tcp_enqueue_flags+0x1e4>)
 8010bd4:	f005 fe72 	bl	80168bc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bde:	2b08      	cmp	r3, #8
 8010be0:	d806      	bhi.n	8010bf0 <tcp_enqueue_flags+0x44>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010be8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d90e      	bls.n	8010c0e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d109      	bne.n	8010c0e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	7e9b      	ldrb	r3, [r3, #26]
 8010bfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c02:	b2da      	uxtb	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c0c:	e0b7      	b.n	8010d7e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8010c0e:	78fb      	ldrb	r3, [r7, #3]
 8010c10:	f003 0302 	and.w	r3, r3, #2
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d001      	beq.n	8010c1c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8010c18:	2301      	movs	r3, #1
 8010c1a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010c1c:	7ffb      	ldrb	r3, [r7, #31]
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	f003 0304 	and.w	r3, r3, #4
 8010c26:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010c28:	7dfb      	ldrb	r3, [r7, #23]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4619      	mov	r1, r3
 8010c30:	2000      	movs	r0, #0
 8010c32:	f7fa fdc1 	bl	800b7b8 <pbuf_alloc>
 8010c36:	6138      	str	r0, [r7, #16]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d109      	bne.n	8010c52 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	7e9b      	ldrb	r3, [r3, #26]
 8010c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c50:	e095      	b.n	8010d7e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	895a      	ldrh	r2, [r3, #10]
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d206      	bcs.n	8010c6c <tcp_enqueue_flags+0xc0>
 8010c5e:	4b4a      	ldr	r3, [pc, #296]	; (8010d88 <tcp_enqueue_flags+0x1dc>)
 8010c60:	f240 3241 	movw	r2, #833	; 0x341
 8010c64:	494b      	ldr	r1, [pc, #300]	; (8010d94 <tcp_enqueue_flags+0x1e8>)
 8010c66:	484a      	ldr	r0, [pc, #296]	; (8010d90 <tcp_enqueue_flags+0x1e4>)
 8010c68:	f005 fe28 	bl	80168bc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010c70:	78fa      	ldrb	r2, [r7, #3]
 8010c72:	7ffb      	ldrb	r3, [r7, #31]
 8010c74:	9300      	str	r3, [sp, #0]
 8010c76:	460b      	mov	r3, r1
 8010c78:	6939      	ldr	r1, [r7, #16]
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff fadc 	bl	8010238 <tcp_create_segment>
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	7e9b      	ldrb	r3, [r3, #26]
 8010c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c9a:	e070      	b.n	8010d7e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f003 0303 	and.w	r3, r3, #3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d006      	beq.n	8010cb6 <tcp_enqueue_flags+0x10a>
 8010ca8:	4b37      	ldr	r3, [pc, #220]	; (8010d88 <tcp_enqueue_flags+0x1dc>)
 8010caa:	f240 3249 	movw	r2, #841	; 0x349
 8010cae:	493a      	ldr	r1, [pc, #232]	; (8010d98 <tcp_enqueue_flags+0x1ec>)
 8010cb0:	4837      	ldr	r0, [pc, #220]	; (8010d90 <tcp_enqueue_flags+0x1e4>)
 8010cb2:	f005 fe03 	bl	80168bc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	891b      	ldrh	r3, [r3, #8]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d006      	beq.n	8010ccc <tcp_enqueue_flags+0x120>
 8010cbe:	4b32      	ldr	r3, [pc, #200]	; (8010d88 <tcp_enqueue_flags+0x1dc>)
 8010cc0:	f240 324a 	movw	r2, #842	; 0x34a
 8010cc4:	4935      	ldr	r1, [pc, #212]	; (8010d9c <tcp_enqueue_flags+0x1f0>)
 8010cc6:	4832      	ldr	r0, [pc, #200]	; (8010d90 <tcp_enqueue_flags+0x1e4>)
 8010cc8:	f005 fdf8 	bl	80168bc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d103      	bne.n	8010cdc <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	669a      	str	r2, [r3, #104]	; 0x68
 8010cda:	e00d      	b.n	8010cf8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ce0:	61bb      	str	r3, [r7, #24]
 8010ce2:	e002      	b.n	8010cea <tcp_enqueue_flags+0x13e>
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	61bb      	str	r3, [r7, #24]
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d1f8      	bne.n	8010ce4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	68fa      	ldr	r2, [r7, #12]
 8010cf6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010d00:	78fb      	ldrb	r3, [r7, #3]
 8010d02:	f003 0302 	and.w	r3, r3, #2
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d104      	bne.n	8010d14 <tcp_enqueue_flags+0x168>
 8010d0a:	78fb      	ldrb	r3, [r7, #3]
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d004      	beq.n	8010d1e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d18:	1c5a      	adds	r2, r3, #1
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010d1e:	78fb      	ldrb	r3, [r7, #3]
 8010d20:	f003 0301 	and.w	r3, r3, #1
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d006      	beq.n	8010d36 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	7e9b      	ldrb	r3, [r3, #26]
 8010d2c:	f043 0320 	orr.w	r3, r3, #32
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fb f948 	bl	800bfd0 <pbuf_clen>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d4a:	4413      	add	r3, r2
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00e      	beq.n	8010d7c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10a      	bne.n	8010d7c <tcp_enqueue_flags+0x1d0>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d106      	bne.n	8010d7c <tcp_enqueue_flags+0x1d0>
 8010d6e:	4b06      	ldr	r3, [pc, #24]	; (8010d88 <tcp_enqueue_flags+0x1dc>)
 8010d70:	f240 326d 	movw	r2, #877	; 0x36d
 8010d74:	490a      	ldr	r1, [pc, #40]	; (8010da0 <tcp_enqueue_flags+0x1f4>)
 8010d76:	4806      	ldr	r0, [pc, #24]	; (8010d90 <tcp_enqueue_flags+0x1e4>)
 8010d78:	f005 fda0 	bl	80168bc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3720      	adds	r7, #32
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	080199ac 	.word	0x080199ac
 8010d8c:	08019cb0 	.word	0x08019cb0
 8010d90:	08019a10 	.word	0x08019a10
 8010d94:	08019d08 	.word	0x08019d08
 8010d98:	08019d44 	.word	0x08019d44
 8010d9c:	08019d5c 	.word	0x08019d5c
 8010da0:	08019d88 	.word	0x08019d88

08010da4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010da4:	b590      	push	{r4, r7, lr}
 8010da6:	b08b      	sub	sp, #44	; 0x2c
 8010da8:	af04      	add	r7, sp, #16
 8010daa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8010dac:	2300      	movs	r3, #0
 8010dae:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010db0:	7dbb      	ldrb	r3, [r7, #22]
 8010db2:	b29c      	uxth	r4, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f9 fea5 	bl	800ab08 <lwip_htonl>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f7ff f97b 	bl	80100c0 <tcp_output_alloc_header>
 8010dca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d109      	bne.n	8010de6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	7e9b      	ldrb	r3, [r3, #26]
 8010dd6:	f043 0303 	orr.w	r3, r3, #3
 8010dda:	b2da      	uxtb	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010de0:	f06f 0301 	mvn.w	r3, #1
 8010de4:	e036      	b.n	8010e54 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	3304      	adds	r3, #4
 8010dea:	4618      	mov	r0, r3
 8010dec:	f004 f9a6 	bl	801513c <ip4_route>
 8010df0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d102      	bne.n	8010dfe <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8010df8:	23fc      	movs	r3, #252	; 0xfc
 8010dfa:	75fb      	strb	r3, [r7, #23]
 8010dfc:	e012      	b.n	8010e24 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8010dfe:	6879      	ldr	r1, [r7, #4]
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	1d18      	adds	r0, r3, #4
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7a9c      	ldrb	r4, [r3, #10]
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	7a5b      	ldrb	r3, [r3, #9]
 8010e0c:	68fa      	ldr	r2, [r7, #12]
 8010e0e:	9202      	str	r2, [sp, #8]
 8010e10:	2206      	movs	r2, #6
 8010e12:	9201      	str	r2, [sp, #4]
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	4623      	mov	r3, r4
 8010e18:	4602      	mov	r2, r0
 8010e1a:	6938      	ldr	r0, [r7, #16]
 8010e1c:	f004 fb54 	bl	80154c8 <ip4_output_if>
 8010e20:	4603      	mov	r3, r0
 8010e22:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010e24:	6938      	ldr	r0, [r7, #16]
 8010e26:	f7fb f839 	bl	800be9c <pbuf_free>

  if (err != ERR_OK) {
 8010e2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d007      	beq.n	8010e42 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	7e9b      	ldrb	r3, [r3, #26]
 8010e36:	f043 0303 	orr.w	r3, r3, #3
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	769a      	strb	r2, [r3, #26]
 8010e40:	e006      	b.n	8010e50 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	7e9b      	ldrb	r3, [r3, #26]
 8010e46:	f023 0303 	bic.w	r3, r3, #3
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	371c      	adds	r7, #28
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd90      	pop	{r4, r7, pc}

08010e5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e5c:	b5b0      	push	{r4, r5, r7, lr}
 8010e5e:	b08a      	sub	sp, #40	; 0x28
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	7d1b      	ldrb	r3, [r3, #20]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d106      	bne.n	8010e7a <tcp_output+0x1e>
 8010e6c:	4b9b      	ldr	r3, [pc, #620]	; (80110dc <tcp_output+0x280>)
 8010e6e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010e72:	499b      	ldr	r1, [pc, #620]	; (80110e0 <tcp_output+0x284>)
 8010e74:	489b      	ldr	r0, [pc, #620]	; (80110e4 <tcp_output+0x288>)
 8010e76:	f005 fd21 	bl	80168bc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010e7a:	4b9b      	ldr	r3, [pc, #620]	; (80110e8 <tcp_output+0x28c>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d101      	bne.n	8010e88 <tcp_output+0x2c>
    return ERR_OK;
 8010e84:	2300      	movs	r3, #0
 8010e86:	e1cf      	b.n	8011228 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d203      	bcs.n	8010ea0 <tcp_output+0x44>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e9e:	e002      	b.n	8010ea6 <tcp_output+0x4a>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ea6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010eac:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	7e9b      	ldrb	r3, [r3, #26]
 8010eb2:	f003 0302 	and.w	r3, r3, #2
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d017      	beq.n	8010eea <tcp_output+0x8e>
 8010eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00f      	beq.n	8010ee0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7f9 fe1e 	bl	800ab08 <lwip_htonl>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ed6:	8912      	ldrh	r2, [r2, #8]
 8010ed8:	4413      	add	r3, r2
     (seg == NULL ||
 8010eda:	69ba      	ldr	r2, [r7, #24]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d204      	bcs.n	8010eea <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7ff ff5f 	bl	8010da4 <tcp_send_empty_ack>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	e19e      	b.n	8011228 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eee:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010ef0:	6a3b      	ldr	r3, [r7, #32]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d007      	beq.n	8010f06 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8010ef6:	e002      	b.n	8010efe <tcp_output+0xa2>
 8010ef8:	6a3b      	ldr	r3, [r7, #32]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	623b      	str	r3, [r7, #32]
 8010efe:	6a3b      	ldr	r3, [r7, #32]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1f8      	bne.n	8010ef8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	3304      	adds	r3, #4
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f004 f916 	bl	801513c <ip4_route>
 8010f10:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d102      	bne.n	8010f1e <tcp_output+0xc2>
    return ERR_RTE;
 8010f18:	f06f 0303 	mvn.w	r3, #3
 8010f1c:	e184      	b.n	8011228 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d003      	beq.n	8010f2c <tcp_output+0xd0>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d111      	bne.n	8010f50 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <tcp_output+0xdc>
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	3304      	adds	r3, #4
 8010f36:	e000      	b.n	8010f3a <tcp_output+0xde>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d102      	bne.n	8010f48 <tcp_output+0xec>
      return ERR_RTE;
 8010f42:	f06f 0303 	mvn.w	r3, #3
 8010f46:	e16f      	b.n	8011228 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8010f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 813e 	beq.w	80111d4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7f9 fdd2 	bl	800ab08 <lwip_htonl>
 8010f64:	4602      	mov	r2, r0
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f6e:	8912      	ldrh	r2, [r2, #8]
 8010f70:	4413      	add	r3, r2
  if (seg != NULL &&
 8010f72:	69ba      	ldr	r2, [r7, #24]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	f080 812d 	bcs.w	80111d4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8010f7a:	69bb      	ldr	r3, [r7, #24]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 8129 	beq.w	80111d4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f88:	461a      	mov	r2, r3
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	f040 8121 	bne.w	80111d4 <tcp_output+0x378>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	f040 811c 	bne.w	80111d4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f040 812b 	bne.w	80111fe <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8010fb8:	e121      	b.n	80111fe <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	899b      	ldrh	r3, [r3, #12]
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7f9 fd92 	bl	800aaec <lwip_htons>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	f003 0304 	and.w	r3, r3, #4
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d006      	beq.n	8010fe0 <tcp_output+0x184>
 8010fd2:	4b42      	ldr	r3, [pc, #264]	; (80110dc <tcp_output+0x280>)
 8010fd4:	f240 4246 	movw	r2, #1094	; 0x446
 8010fd8:	4944      	ldr	r1, [pc, #272]	; (80110ec <tcp_output+0x290>)
 8010fda:	4842      	ldr	r0, [pc, #264]	; (80110e4 <tcp_output+0x288>)
 8010fdc:	f005 fc6e 	bl	80168bc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d01f      	beq.n	8011028 <tcp_output+0x1cc>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7e9b      	ldrb	r3, [r3, #26]
 8010fec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d119      	bne.n	8011028 <tcp_output+0x1cc>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00b      	beq.n	8011014 <tcp_output+0x1b8>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d110      	bne.n	8011028 <tcp_output+0x1cc>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801100a:	891a      	ldrh	r2, [r3, #8]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011010:	429a      	cmp	r2, r3
 8011012:	d209      	bcs.n	8011028 <tcp_output+0x1cc>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801101a:	2b00      	cmp	r3, #0
 801101c:	d004      	beq.n	8011028 <tcp_output+0x1cc>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011024:	2b08      	cmp	r3, #8
 8011026:	d901      	bls.n	801102c <tcp_output+0x1d0>
 8011028:	2301      	movs	r3, #1
 801102a:	e000      	b.n	801102e <tcp_output+0x1d2>
 801102c:	2300      	movs	r3, #0
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	7e9b      	ldrb	r3, [r3, #26]
 8011036:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 80e1 	beq.w	8011202 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7d1b      	ldrb	r3, [r3, #20]
 8011044:	2b02      	cmp	r3, #2
 8011046:	d00d      	beq.n	8011064 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	899b      	ldrh	r3, [r3, #12]
 801104e:	b29c      	uxth	r4, r3
 8011050:	2010      	movs	r0, #16
 8011052:	f7f9 fd4b 	bl	800aaec <lwip_htons>
 8011056:	4603      	mov	r3, r0
 8011058:	461a      	mov	r2, r3
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	4322      	orrs	r2, r4
 8011060:	b292      	uxth	r2, r2
 8011062:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011064:	697a      	ldr	r2, [r7, #20]
 8011066:	6879      	ldr	r1, [r7, #4]
 8011068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801106a:	f000 f8e1 	bl	8011230 <tcp_output_segment>
 801106e:	4603      	mov	r3, r0
 8011070:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d009      	beq.n	801108e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7e9b      	ldrb	r3, [r3, #26]
 801107e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011082:	b2da      	uxtb	r2, r3
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	769a      	strb	r2, [r3, #26]
      return err;
 8011088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801108c:	e0cc      	b.n	8011228 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	7d1b      	ldrb	r3, [r3, #20]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d006      	beq.n	80110ac <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7e9b      	ldrb	r3, [r3, #26]
 80110a2:	f023 0303 	bic.w	r3, r3, #3
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7f9 fd28 	bl	800ab08 <lwip_htonl>
 80110b8:	4604      	mov	r4, r0
 80110ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110bc:	891b      	ldrh	r3, [r3, #8]
 80110be:	461d      	mov	r5, r3
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	899b      	ldrh	r3, [r3, #12]
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7f9 fd0f 	bl	800aaec <lwip_htons>
 80110ce:	4603      	mov	r3, r0
 80110d0:	f003 0303 	and.w	r3, r3, #3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d00b      	beq.n	80110f0 <tcp_output+0x294>
 80110d8:	2301      	movs	r3, #1
 80110da:	e00a      	b.n	80110f2 <tcp_output+0x296>
 80110dc:	080199ac 	.word	0x080199ac
 80110e0:	08019db0 	.word	0x08019db0
 80110e4:	08019a10 	.word	0x08019a10
 80110e8:	2000fad4 	.word	0x2000fad4
 80110ec:	08019dd8 	.word	0x08019dd8
 80110f0:	2300      	movs	r3, #0
 80110f2:	442b      	add	r3, r5
 80110f4:	4423      	add	r3, r4
 80110f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	da02      	bge.n	801110a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68ba      	ldr	r2, [r7, #8]
 8011108:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110c:	891b      	ldrh	r3, [r3, #8]
 801110e:	461c      	mov	r4, r3
 8011110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	899b      	ldrh	r3, [r3, #12]
 8011116:	b29b      	uxth	r3, r3
 8011118:	4618      	mov	r0, r3
 801111a:	f7f9 fce7 	bl	800aaec <lwip_htons>
 801111e:	4603      	mov	r3, r0
 8011120:	f003 0303 	and.w	r3, r3, #3
 8011124:	2b00      	cmp	r3, #0
 8011126:	d001      	beq.n	801112c <tcp_output+0x2d0>
 8011128:	2301      	movs	r3, #1
 801112a:	e000      	b.n	801112e <tcp_output+0x2d2>
 801112c:	2300      	movs	r3, #0
 801112e:	4423      	add	r3, r4
 8011130:	2b00      	cmp	r3, #0
 8011132:	d049      	beq.n	80111c8 <tcp_output+0x36c>
      seg->next = NULL;
 8011134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011136:	2200      	movs	r2, #0
 8011138:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801113e:	2b00      	cmp	r3, #0
 8011140:	d105      	bne.n	801114e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011146:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	623b      	str	r3, [r7, #32]
 801114c:	e03f      	b.n	80111ce <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	f7f9 fcd7 	bl	800ab08 <lwip_htonl>
 801115a:	4604      	mov	r4, r0
 801115c:	6a3b      	ldr	r3, [r7, #32]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	f7f9 fcd0 	bl	800ab08 <lwip_htonl>
 8011168:	4603      	mov	r3, r0
 801116a:	1ae3      	subs	r3, r4, r3
 801116c:	2b00      	cmp	r3, #0
 801116e:	da24      	bge.n	80111ba <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	336c      	adds	r3, #108	; 0x6c
 8011174:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011176:	e002      	b.n	801117e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d011      	beq.n	80111aa <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	4618      	mov	r0, r3
 8011190:	f7f9 fcba 	bl	800ab08 <lwip_htonl>
 8011194:	4604      	mov	r4, r0
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	f7f9 fcb3 	bl	800ab08 <lwip_htonl>
 80111a2:	4603      	mov	r3, r0
 80111a4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	dbe6      	blt.n	8011178 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80111aa:	69fb      	ldr	r3, [r7, #28]
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	e009      	b.n	80111ce <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111be:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80111c0:	6a3b      	ldr	r3, [r7, #32]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	623b      	str	r3, [r7, #32]
 80111c6:	e002      	b.n	80111ce <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80111c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111ca:	f7fc f9a2 	bl	800d512 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80111d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d015      	beq.n	8011206 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80111da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f9 fc91 	bl	800ab08 <lwip_htonl>
 80111e6:	4602      	mov	r2, r0
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111ec:	1ad3      	subs	r3, r2, r3
 80111ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111f0:	8912      	ldrh	r2, [r2, #8]
 80111f2:	4413      	add	r3, r2
  while (seg != NULL &&
 80111f4:	69ba      	ldr	r2, [r7, #24]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	f4bf aedf 	bcs.w	8010fba <tcp_output+0x15e>
  }
output_done:
 80111fc:	e003      	b.n	8011206 <tcp_output+0x3aa>
    goto output_done;
 80111fe:	bf00      	nop
 8011200:	e002      	b.n	8011208 <tcp_output+0x3ac>
      break;
 8011202:	bf00      	nop
 8011204:	e000      	b.n	8011208 <tcp_output+0x3ac>
output_done:
 8011206:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801120c:	2b00      	cmp	r3, #0
 801120e:	d103      	bne.n	8011218 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	7e9b      	ldrb	r3, [r3, #26]
 801121c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011220:	b2da      	uxtb	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011226:	2300      	movs	r3, #0
}
 8011228:	4618      	mov	r0, r3
 801122a:	3728      	adds	r7, #40	; 0x28
 801122c:	46bd      	mov	sp, r7
 801122e:	bdb0      	pop	{r4, r5, r7, pc}

08011230 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011230:	b5b0      	push	{r4, r5, r7, lr}
 8011232:	b08c      	sub	sp, #48	; 0x30
 8011234:	af04      	add	r7, sp, #16
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	89db      	ldrh	r3, [r3, #14]
 8011242:	2b01      	cmp	r3, #1
 8011244:	d001      	beq.n	801124a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	e08b      	b.n	8011362 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	68dc      	ldr	r4, [r3, #12]
 8011252:	4610      	mov	r0, r2
 8011254:	f7f9 fc58 	bl	800ab08 <lwip_htonl>
 8011258:	4603      	mov	r3, r0
 801125a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	68dc      	ldr	r4, [r3, #12]
 8011264:	4610      	mov	r0, r2
 8011266:	f7f9 fc41 	bl	800aaec <lwip_htons>
 801126a:	4603      	mov	r3, r0
 801126c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011272:	68ba      	ldr	r2, [r7, #8]
 8011274:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011276:	441a      	add	r2, r3
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	3314      	adds	r3, #20
 8011282:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	7a9b      	ldrb	r3, [r3, #10]
 8011288:	f003 0301 	and.w	r3, r3, #1
 801128c:	2b00      	cmp	r3, #0
 801128e:	d014      	beq.n	80112ba <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	3304      	adds	r3, #4
 8011294:	4619      	mov	r1, r3
 8011296:	f44f 7006 	mov.w	r0, #536	; 0x218
 801129a:	f7fc fc73 	bl	800db84 <tcp_eff_send_mss_impl>
 801129e:	4603      	mov	r3, r0
 80112a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80112a2:	8b7b      	ldrh	r3, [r7, #26]
 80112a4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f9 fc2d 	bl	800ab08 <lwip_htonl>
 80112ae:	4602      	mov	r2, r0
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80112b4:	69fb      	ldr	r3, [r7, #28]
 80112b6:	3304      	adds	r3, #4
 80112b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	da02      	bge.n	80112ca <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2200      	movs	r2, #0
 80112c8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d10c      	bne.n	80112ec <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80112d2:	4b26      	ldr	r3, [pc, #152]	; (801136c <tcp_output_segment+0x13c>)
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f9 fc11 	bl	800ab08 <lwip_htonl>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	68db      	ldr	r3, [r3, #12]
 80112f0:	461a      	mov	r2, r3
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	8959      	ldrh	r1, [r3, #10]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	8b3a      	ldrh	r2, [r7, #24]
 8011308:	1a8a      	subs	r2, r1, r2
 801130a:	b292      	uxth	r2, r2
 801130c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	8919      	ldrh	r1, [r3, #8]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	8b3a      	ldrh	r2, [r7, #24]
 801131a:	1a8a      	subs	r2, r1, r2
 801131c:	b292      	uxth	r2, r2
 801131e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	68fa      	ldr	r2, [r7, #12]
 8011326:	68d2      	ldr	r2, [r2, #12]
 8011328:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	2200      	movs	r2, #0
 8011330:	741a      	strb	r2, [r3, #16]
 8011332:	2200      	movs	r2, #0
 8011334:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	6858      	ldr	r0, [r3, #4]
 801133a:	68b9      	ldr	r1, [r7, #8]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	1d1c      	adds	r4, r3, #4
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	7a9d      	ldrb	r5, [r3, #10]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	7a5b      	ldrb	r3, [r3, #9]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	9202      	str	r2, [sp, #8]
 801134c:	2206      	movs	r2, #6
 801134e:	9201      	str	r2, [sp, #4]
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	462b      	mov	r3, r5
 8011354:	4622      	mov	r2, r4
 8011356:	f004 f8b7 	bl	80154c8 <ip4_output_if>
 801135a:	4603      	mov	r3, r0
 801135c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801135e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3720      	adds	r7, #32
 8011366:	46bd      	mov	sp, r7
 8011368:	bdb0      	pop	{r4, r5, r7, pc}
 801136a:	bf00      	nop
 801136c:	2000fac4 	.word	0x2000fac4

08011370 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b08c      	sub	sp, #48	; 0x30
 8011374:	af04      	add	r7, sp, #16
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801137e:	2200      	movs	r2, #0
 8011380:	2114      	movs	r1, #20
 8011382:	2001      	movs	r0, #1
 8011384:	f7fa fa18 	bl	800b7b8 <pbuf_alloc>
 8011388:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d05b      	beq.n	8011448 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	895b      	ldrh	r3, [r3, #10]
 8011394:	2b13      	cmp	r3, #19
 8011396:	d806      	bhi.n	80113a6 <tcp_rst+0x36>
 8011398:	4b2d      	ldr	r3, [pc, #180]	; (8011450 <tcp_rst+0xe0>)
 801139a:	f240 524d 	movw	r2, #1357	; 0x54d
 801139e:	492d      	ldr	r1, [pc, #180]	; (8011454 <tcp_rst+0xe4>)
 80113a0:	482d      	ldr	r0, [pc, #180]	; (8011458 <tcp_rst+0xe8>)
 80113a2:	f005 fa8b 	bl	80168bc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80113ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7f9 fb9c 	bl	800aaec <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80113bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113be:	4618      	mov	r0, r3
 80113c0:	f7f9 fb94 	bl	800aaec <lwip_htons>
 80113c4:	4603      	mov	r3, r0
 80113c6:	461a      	mov	r2, r3
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80113cc:	68f8      	ldr	r0, [r7, #12]
 80113ce:	f7f9 fb9b 	bl	800ab08 <lwip_htonl>
 80113d2:	4602      	mov	r2, r0
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80113d8:	68b8      	ldr	r0, [r7, #8]
 80113da:	f7f9 fb95 	bl	800ab08 <lwip_htonl>
 80113de:	4602      	mov	r2, r0
 80113e0:	69bb      	ldr	r3, [r7, #24]
 80113e2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80113e4:	f245 0014 	movw	r0, #20500	; 0x5014
 80113e8:	f7f9 fb80 	bl	800aaec <lwip_htons>
 80113ec:	4603      	mov	r3, r0
 80113ee:	461a      	mov	r2, r3
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f042 0208 	orr.w	r2, r2, #8
 80113fc:	739a      	strb	r2, [r3, #14]
 80113fe:	2200      	movs	r2, #0
 8011400:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011404:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	2200      	movs	r2, #0
 801140a:	741a      	strb	r2, [r3, #16]
 801140c:	2200      	movs	r2, #0
 801140e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	2200      	movs	r2, #0
 8011414:	749a      	strb	r2, [r3, #18]
 8011416:	2200      	movs	r2, #0
 8011418:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801141a:	6838      	ldr	r0, [r7, #0]
 801141c:	f003 fe8e 	bl	801513c <ip4_route>
 8011420:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00b      	beq.n	8011440 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	9302      	str	r3, [sp, #8]
 801142c:	2306      	movs	r3, #6
 801142e:	9301      	str	r3, [sp, #4]
 8011430:	2300      	movs	r3, #0
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	23ff      	movs	r3, #255	; 0xff
 8011436:	683a      	ldr	r2, [r7, #0]
 8011438:	6879      	ldr	r1, [r7, #4]
 801143a:	69f8      	ldr	r0, [r7, #28]
 801143c:	f004 f844 	bl	80154c8 <ip4_output_if>
  }
  pbuf_free(p);
 8011440:	69f8      	ldr	r0, [r7, #28]
 8011442:	f7fa fd2b 	bl	800be9c <pbuf_free>
 8011446:	e000      	b.n	801144a <tcp_rst+0xda>
    return;
 8011448:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801144a:	3720      	adds	r7, #32
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	080199ac 	.word	0x080199ac
 8011454:	080199e0 	.word	0x080199e0
 8011458:	08019a10 	.word	0x08019a10

0801145c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011468:	2b00      	cmp	r3, #0
 801146a:	d029      	beq.n	80114c0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011470:	60fb      	str	r3, [r7, #12]
 8011472:	e002      	b.n	801147a <tcp_rexmit_rto+0x1e>
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	60fb      	str	r3, [r7, #12]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f8      	bne.n	8011474 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801149e:	2bff      	cmp	r3, #255	; 0xff
 80114a0:	d007      	beq.n	80114b2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114a8:	3301      	adds	r3, #1
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2200      	movs	r2, #0
 80114b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f7ff fccf 	bl	8010e5c <tcp_output>
 80114be:	e000      	b.n	80114c2 <tcp_rexmit_rto+0x66>
    return;
 80114c0:	bf00      	nop
}
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d043      	beq.n	8011560 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114dc:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	3368      	adds	r3, #104	; 0x68
 80114ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80114ec:	e002      	b.n	80114f4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d011      	beq.n	8011520 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f9 faff 	bl	800ab08 <lwip_htonl>
 801150a:	4604      	mov	r4, r0
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	4618      	mov	r0, r3
 8011514:	f7f9 faf8 	bl	800ab08 <lwip_htonl>
 8011518:	4603      	mov	r3, r0
 801151a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801151c:	2b00      	cmp	r3, #0
 801151e:	dbe6      	blt.n	80114ee <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2200      	movs	r2, #0
 801153a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011544:	2bff      	cmp	r3, #255	; 0xff
 8011546:	d007      	beq.n	8011558 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801154e:	3301      	adds	r3, #1
 8011550:	b2da      	uxtb	r2, r3
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	635a      	str	r2, [r3, #52]	; 0x34
 801155e:	e000      	b.n	8011562 <tcp_rexmit+0x9a>
    return;
 8011560:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011562:	3714      	adds	r7, #20
 8011564:	46bd      	mov	sp, r7
 8011566:	bd90      	pop	{r4, r7, pc}

08011568 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011574:	2b00      	cmp	r3, #0
 8011576:	d04a      	beq.n	801160e <tcp_rexmit_fast+0xa6>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7e9b      	ldrb	r3, [r3, #26]
 801157c:	f003 0304 	and.w	r3, r3, #4
 8011580:	2b00      	cmp	r3, #0
 8011582:	d144      	bne.n	801160e <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff ff9f 	bl	80114c8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011596:	429a      	cmp	r2, r3
 8011598:	d207      	bcs.n	80115aa <tcp_rexmit_fast+0x42>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115a0:	0fda      	lsrs	r2, r3, #31
 80115a2:	4413      	add	r3, r2
 80115a4:	105b      	asrs	r3, r3, #1
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	e006      	b.n	80115b8 <tcp_rexmit_fast+0x50>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115b0:	0fda      	lsrs	r2, r3, #31
 80115b2:	4413      	add	r3, r2
 80115b4:	105b      	asrs	r3, r3, #1
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80115c4:	461a      	mov	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d206      	bcs.n	80115de <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115d4:	005b      	lsls	r3, r3, #1
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115e8:	4619      	mov	r1, r3
 80115ea:	0049      	lsls	r1, r1, #1
 80115ec:	440b      	add	r3, r1
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	4413      	add	r3, r2
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	7e9b      	ldrb	r3, [r3, #26]
 80115fe:	f043 0304 	orr.w	r3, r3, #4
 8011602:	b2da      	uxtb	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801160e:	bf00      	nop
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b08a      	sub	sp, #40	; 0x28
 801161a:	af04      	add	r7, sp, #16
 801161c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011622:	3b01      	subs	r3, #1
 8011624:	4618      	mov	r0, r3
 8011626:	f7f9 fa6f 	bl	800ab08 <lwip_htonl>
 801162a:	4603      	mov	r3, r0
 801162c:	2200      	movs	r2, #0
 801162e:	2100      	movs	r1, #0
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f7fe fd45 	bl	80100c0 <tcp_output_alloc_header>
 8011636:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d102      	bne.n	8011644 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011642:	e021      	b.n	8011688 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	3304      	adds	r3, #4
 8011648:	4618      	mov	r0, r3
 801164a:	f003 fd77 	bl	801513c <ip4_route>
 801164e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d102      	bne.n	801165c <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011656:	23fc      	movs	r3, #252	; 0xfc
 8011658:	75fb      	strb	r3, [r7, #23]
 801165a:	e010      	b.n	801167e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801165c:	6879      	ldr	r1, [r7, #4]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	1d1a      	adds	r2, r3, #4
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	7a98      	ldrb	r0, [r3, #10]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	9302      	str	r3, [sp, #8]
 801166a:	2306      	movs	r3, #6
 801166c:	9301      	str	r3, [sp, #4]
 801166e:	2300      	movs	r3, #0
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	4603      	mov	r3, r0
 8011674:	6938      	ldr	r0, [r7, #16]
 8011676:	f003 ff27 	bl	80154c8 <ip4_output_if>
 801167a:	4603      	mov	r3, r0
 801167c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801167e:	6938      	ldr	r0, [r7, #16]
 8011680:	f7fa fc0c 	bl	800be9c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}

08011690 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011690:	b590      	push	{r4, r7, lr}
 8011692:	b08f      	sub	sp, #60	; 0x3c
 8011694:	af04      	add	r7, sp, #16
 8011696:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801169c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d102      	bne.n	80116aa <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80116a8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d101      	bne.n	80116b4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80116b0:	2300      	movs	r3, #0
 80116b2:	e085      	b.n	80117c0 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80116b4:	6a3b      	ldr	r3, [r7, #32]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	899b      	ldrh	r3, [r3, #12]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f9 fa15 	bl	800aaec <lwip_htons>
 80116c2:	4603      	mov	r3, r0
 80116c4:	f003 0301 	and.w	r3, r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d005      	beq.n	80116d8 <tcp_zero_window_probe+0x48>
 80116cc:	6a3b      	ldr	r3, [r7, #32]
 80116ce:	891b      	ldrh	r3, [r3, #8]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d101      	bne.n	80116d8 <tcp_zero_window_probe+0x48>
 80116d4:	2301      	movs	r3, #1
 80116d6:	e000      	b.n	80116da <tcp_zero_window_probe+0x4a>
 80116d8:	2300      	movs	r3, #0
 80116da:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80116dc:	7ffb      	ldrb	r3, [r7, #31]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	bf0c      	ite	eq
 80116e2:	2301      	moveq	r3, #1
 80116e4:	2300      	movne	r3, #0
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80116ea:	6a3b      	ldr	r3, [r7, #32]
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	8bba      	ldrh	r2, [r7, #28]
 80116f2:	2100      	movs	r1, #0
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7fe fce3 	bl	80100c0 <tcp_output_alloc_header>
 80116fa:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d102      	bne.n	8011708 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011706:	e05b      	b.n	80117c0 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801170e:	7ffb      	ldrb	r3, [r7, #31]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00e      	beq.n	8011732 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	899b      	ldrh	r3, [r3, #12]
 8011718:	b29b      	uxth	r3, r3
 801171a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801171e:	b29c      	uxth	r4, r3
 8011720:	2011      	movs	r0, #17
 8011722:	f7f9 f9e3 	bl	800aaec <lwip_htons>
 8011726:	4603      	mov	r3, r0
 8011728:	4323      	orrs	r3, r4
 801172a:	b29a      	uxth	r2, r3
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	819a      	strh	r2, [r3, #12]
 8011730:	e010      	b.n	8011754 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	3314      	adds	r3, #20
 8011738:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	6858      	ldr	r0, [r3, #4]
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	891a      	ldrh	r2, [r3, #8]
 8011744:	6a3b      	ldr	r3, [r7, #32]
 8011746:	891b      	ldrh	r3, [r3, #8]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	b29b      	uxth	r3, r3
 801174c:	2201      	movs	r2, #1
 801174e:	6939      	ldr	r1, [r7, #16]
 8011750:	f7fa fdb0 	bl	800c2b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011754:	6a3b      	ldr	r3, [r7, #32]
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	4618      	mov	r0, r3
 801175c:	f7f9 f9d4 	bl	800ab08 <lwip_htonl>
 8011760:	4603      	mov	r3, r0
 8011762:	3301      	adds	r3, #1
 8011764:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	2b00      	cmp	r3, #0
 8011770:	da02      	bge.n	8011778 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3304      	adds	r3, #4
 801177c:	4618      	mov	r0, r3
 801177e:	f003 fcdd 	bl	801513c <ip4_route>
 8011782:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d103      	bne.n	8011792 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801178a:	23fc      	movs	r3, #252	; 0xfc
 801178c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011790:	e011      	b.n	80117b6 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	1d1a      	adds	r2, r3, #4
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7a98      	ldrb	r0, [r3, #10]
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	9302      	str	r3, [sp, #8]
 80117a0:	2306      	movs	r3, #6
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	2300      	movs	r3, #0
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4603      	mov	r3, r0
 80117aa:	69b8      	ldr	r0, [r7, #24]
 80117ac:	f003 fe8c 	bl	80154c8 <ip4_output_if>
 80117b0:	4603      	mov	r3, r0
 80117b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80117b6:	69b8      	ldr	r0, [r7, #24]
 80117b8:	f7fa fb70 	bl	800be9c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80117bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	372c      	adds	r7, #44	; 0x2c
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd90      	pop	{r4, r7, pc}

080117c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80117d0:	f7fa fdf2 	bl	800c3b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80117d4:	4b0a      	ldr	r3, [pc, #40]	; (8011800 <tcpip_tcp_timer+0x38>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d103      	bne.n	80117e4 <tcpip_tcp_timer+0x1c>
 80117dc:	4b09      	ldr	r3, [pc, #36]	; (8011804 <tcpip_tcp_timer+0x3c>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d005      	beq.n	80117f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80117e4:	2200      	movs	r2, #0
 80117e6:	4908      	ldr	r1, [pc, #32]	; (8011808 <tcpip_tcp_timer+0x40>)
 80117e8:	20fa      	movs	r0, #250	; 0xfa
 80117ea:	f000 f86f 	bl	80118cc <sys_timeout>
 80117ee:	e002      	b.n	80117f6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80117f0:	4b06      	ldr	r3, [pc, #24]	; (801180c <tcpip_tcp_timer+0x44>)
 80117f2:	2200      	movs	r2, #0
 80117f4:	601a      	str	r2, [r3, #0]
  }
}
 80117f6:	bf00      	nop
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	2000fac0 	.word	0x2000fac0
 8011804:	2000fad0 	.word	0x2000fad0
 8011808:	080117c9 	.word	0x080117c9
 801180c:	20008c7c 	.word	0x20008c7c

08011810 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011814:	4b0a      	ldr	r3, [pc, #40]	; (8011840 <tcp_timer_needed+0x30>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10f      	bne.n	801183c <tcp_timer_needed+0x2c>
 801181c:	4b09      	ldr	r3, [pc, #36]	; (8011844 <tcp_timer_needed+0x34>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d103      	bne.n	801182c <tcp_timer_needed+0x1c>
 8011824:	4b08      	ldr	r3, [pc, #32]	; (8011848 <tcp_timer_needed+0x38>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d007      	beq.n	801183c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801182c:	4b04      	ldr	r3, [pc, #16]	; (8011840 <tcp_timer_needed+0x30>)
 801182e:	2201      	movs	r2, #1
 8011830:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011832:	2200      	movs	r2, #0
 8011834:	4905      	ldr	r1, [pc, #20]	; (801184c <tcp_timer_needed+0x3c>)
 8011836:	20fa      	movs	r0, #250	; 0xfa
 8011838:	f000 f848 	bl	80118cc <sys_timeout>
  }
}
 801183c:	bf00      	nop
 801183e:	bd80      	pop	{r7, pc}
 8011840:	20008c7c 	.word	0x20008c7c
 8011844:	2000fac0 	.word	0x2000fac0
 8011848:	2000fad0 	.word	0x2000fad0
 801184c:	080117c9 	.word	0x080117c9

08011850 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	4903      	ldr	r1, [pc, #12]	; (8011878 <cyclic_timer+0x28>)
 801186a:	4618      	mov	r0, r3
 801186c:	f000 f82e 	bl	80118cc <sys_timeout>
}
 8011870:	bf00      	nop
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	08011851 	.word	0x08011851

0801187c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011882:	2301      	movs	r3, #1
 8011884:	607b      	str	r3, [r7, #4]
 8011886:	e00e      	b.n	80118a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011888:	4a0d      	ldr	r2, [pc, #52]	; (80118c0 <sys_timeouts_init+0x44>)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	00db      	lsls	r3, r3, #3
 8011894:	4a0a      	ldr	r2, [pc, #40]	; (80118c0 <sys_timeouts_init+0x44>)
 8011896:	4413      	add	r3, r2
 8011898:	461a      	mov	r2, r3
 801189a:	490a      	ldr	r1, [pc, #40]	; (80118c4 <sys_timeouts_init+0x48>)
 801189c:	f000 f816 	bl	80118cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	3301      	adds	r3, #1
 80118a4:	607b      	str	r3, [r7, #4]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2b04      	cmp	r3, #4
 80118aa:	d9ed      	bls.n	8011888 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80118ac:	f7f3 f98e 	bl	8004bcc <sys_now>
 80118b0:	4602      	mov	r2, r0
 80118b2:	4b05      	ldr	r3, [pc, #20]	; (80118c8 <sys_timeouts_init+0x4c>)
 80118b4:	601a      	str	r2, [r3, #0]
}
 80118b6:	bf00      	nop
 80118b8:	3708      	adds	r7, #8
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	08025f88 	.word	0x08025f88
 80118c4:	08011851 	.word	0x08011851
 80118c8:	20008c78 	.word	0x20008c78

080118cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b088      	sub	sp, #32
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80118d8:	200a      	movs	r0, #10
 80118da:	f7f9 fd2b 	bl	800b334 <memp_malloc>
 80118de:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10a      	bne.n	80118fc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	f040 8084 	bne.w	80119f6 <sys_timeout+0x12a>
 80118ee:	4b44      	ldr	r3, [pc, #272]	; (8011a00 <sys_timeout+0x134>)
 80118f0:	22d4      	movs	r2, #212	; 0xd4
 80118f2:	4944      	ldr	r1, [pc, #272]	; (8011a04 <sys_timeout+0x138>)
 80118f4:	4844      	ldr	r0, [pc, #272]	; (8011a08 <sys_timeout+0x13c>)
 80118f6:	f004 ffe1 	bl	80168bc <iprintf>
    return;
 80118fa:	e07c      	b.n	80119f6 <sys_timeout+0x12a>
  }

  now = sys_now();
 80118fc:	f7f3 f966 	bl	8004bcc <sys_now>
 8011900:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011902:	4b42      	ldr	r3, [pc, #264]	; (8011a0c <sys_timeout+0x140>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d105      	bne.n	8011916 <sys_timeout+0x4a>
    diff = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801190e:	4a40      	ldr	r2, [pc, #256]	; (8011a10 <sys_timeout+0x144>)
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	6013      	str	r3, [r2, #0]
 8011914:	e004      	b.n	8011920 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011916:	4b3e      	ldr	r3, [pc, #248]	; (8011a10 <sys_timeout+0x144>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	693a      	ldr	r2, [r7, #16]
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2200      	movs	r2, #0
 8011924:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	68ba      	ldr	r2, [r7, #8]
 801192a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011932:	68fa      	ldr	r2, [r7, #12]
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	441a      	add	r2, r3
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801193c:	4b33      	ldr	r3, [pc, #204]	; (8011a0c <sys_timeout+0x140>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d103      	bne.n	801194c <sys_timeout+0x80>
    next_timeout = timeout;
 8011944:	4a31      	ldr	r2, [pc, #196]	; (8011a0c <sys_timeout+0x140>)
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	6013      	str	r3, [r2, #0]
    return;
 801194a:	e055      	b.n	80119f8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801194c:	4b2f      	ldr	r3, [pc, #188]	; (8011a0c <sys_timeout+0x140>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	429a      	cmp	r2, r3
 8011956:	d20f      	bcs.n	8011978 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011958:	4b2c      	ldr	r3, [pc, #176]	; (8011a0c <sys_timeout+0x140>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	6859      	ldr	r1, [r3, #4]
 801195e:	4b2b      	ldr	r3, [pc, #172]	; (8011a0c <sys_timeout+0x140>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	1a8a      	subs	r2, r1, r2
 8011966:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011968:	4b28      	ldr	r3, [pc, #160]	; (8011a0c <sys_timeout+0x140>)
 801196a:	681a      	ldr	r2, [r3, #0]
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011970:	4a26      	ldr	r2, [pc, #152]	; (8011a0c <sys_timeout+0x140>)
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	6013      	str	r3, [r2, #0]
 8011976:	e03f      	b.n	80119f8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011978:	4b24      	ldr	r3, [pc, #144]	; (8011a0c <sys_timeout+0x140>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	61fb      	str	r3, [r7, #28]
 801197e:	e036      	b.n	80119ee <sys_timeout+0x122>
      timeout->time -= t->time;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	685a      	ldr	r2, [r3, #4]
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	1ad2      	subs	r2, r2, r3
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d006      	beq.n	80119a4 <sys_timeout+0xd8>
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	685a      	ldr	r2, [r3, #4]
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d921      	bls.n	80119e8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d009      	beq.n	80119c0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	6859      	ldr	r1, [r3, #4]
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	685a      	ldr	r2, [r3, #4]
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	1a8a      	subs	r2, r1, r2
 80119bc:	605a      	str	r2, [r3, #4]
 80119be:	e00b      	b.n	80119d8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d206      	bcs.n	80119d8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80119ca:	4b10      	ldr	r3, [pc, #64]	; (8011a0c <sys_timeout+0x140>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	685a      	ldr	r2, [r3, #4]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	441a      	add	r2, r3
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	697a      	ldr	r2, [r7, #20]
 80119e4:	601a      	str	r2, [r3, #0]
        break;
 80119e6:	e007      	b.n	80119f8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80119e8:	69fb      	ldr	r3, [r7, #28]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	61fb      	str	r3, [r7, #28]
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1c5      	bne.n	8011980 <sys_timeout+0xb4>
 80119f4:	e000      	b.n	80119f8 <sys_timeout+0x12c>
    return;
 80119f6:	bf00      	nop
      }
    }
  }
}
 80119f8:	3720      	adds	r7, #32
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	08019df0 	.word	0x08019df0
 8011a04:	08019e24 	.word	0x08019e24
 8011a08:	08019e64 	.word	0x08019e64
 8011a0c:	20008c74 	.word	0x20008c74
 8011a10:	20008c78 	.word	0x20008c78

08011a14 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011a1a:	4b24      	ldr	r3, [pc, #144]	; (8011aac <sys_check_timeouts+0x98>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d03f      	beq.n	8011aa2 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011a22:	f7f3 f8d3 	bl	8004bcc <sys_now>
 8011a26:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011a28:	4b21      	ldr	r3, [pc, #132]	; (8011ab0 <sys_check_timeouts+0x9c>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	68fa      	ldr	r2, [r7, #12]
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011a32:	2300      	movs	r3, #0
 8011a34:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011a36:	4b1d      	ldr	r3, [pc, #116]	; (8011aac <sys_check_timeouts+0x98>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d02c      	beq.n	8011a9c <sys_check_timeouts+0x88>
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	697a      	ldr	r2, [r7, #20]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d327      	bcc.n	8011a9c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	685a      	ldr	r2, [r3, #4]
 8011a54:	4b16      	ldr	r3, [pc, #88]	; (8011ab0 <sys_check_timeouts+0x9c>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4413      	add	r3, r2
 8011a5a:	4a15      	ldr	r2, [pc, #84]	; (8011ab0 <sys_check_timeouts+0x9c>)
 8011a5c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	697a      	ldr	r2, [r7, #20]
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a0f      	ldr	r2, [pc, #60]	; (8011aac <sys_check_timeouts+0x98>)
 8011a6e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	689b      	ldr	r3, [r3, #8]
 8011a74:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011a76:	68bb      	ldr	r3, [r7, #8]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011a7c:	68b9      	ldr	r1, [r7, #8]
 8011a7e:	200a      	movs	r0, #10
 8011a80:	f7f9 fcaa 	bl	800b3d8 <memp_free>
        if (handler != NULL) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d008      	beq.n	8011a9c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011a8a:	480a      	ldr	r0, [pc, #40]	; (8011ab4 <sys_check_timeouts+0xa0>)
 8011a8c:	f004 fe70 	bl	8016770 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6838      	ldr	r0, [r7, #0]
 8011a94:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011a96:	4807      	ldr	r0, [pc, #28]	; (8011ab4 <sys_check_timeouts+0xa0>)
 8011a98:	f004 fe79 	bl	801678e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011a9c:	7cfb      	ldrb	r3, [r7, #19]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1c7      	bne.n	8011a32 <sys_check_timeouts+0x1e>
  }
}
 8011aa2:	bf00      	nop
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	20008c74 	.word	0x20008c74
 8011ab0:	20008c78 	.word	0x20008c78
 8011ab4:	2000c38c 	.word	0x2000c38c

08011ab8 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011abe:	4b0f      	ldr	r3, [pc, #60]	; (8011afc <sys_timeouts_sleeptime+0x44>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011aca:	e013      	b.n	8011af4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011acc:	f7f3 f87e 	bl	8004bcc <sys_now>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	4b0b      	ldr	r3, [pc, #44]	; (8011b00 <sys_timeouts_sleeptime+0x48>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011ada:	4b08      	ldr	r3, [pc, #32]	; (8011afc <sys_timeouts_sleeptime+0x44>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d901      	bls.n	8011aea <sys_timeouts_sleeptime+0x32>
    return 0;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e004      	b.n	8011af4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011aea:	4b04      	ldr	r3, [pc, #16]	; (8011afc <sys_timeouts_sleeptime+0x44>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	1ad3      	subs	r3, r2, r3
  }
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3708      	adds	r7, #8
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}
 8011afc:	20008c74 	.word	0x20008c74
 8011b00:	20008c78 	.word	0x20008c78

08011b04 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011b0e:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <sys_timeouts_mbox_fetch+0x48>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d105      	bne.n	8011b22 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011b16:	2200      	movs	r2, #0
 8011b18:	6839      	ldr	r1, [r7, #0]
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f004 fcf3 	bl	8016506 <sys_arch_mbox_fetch>
    return;
 8011b20:	e011      	b.n	8011b46 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011b22:	f7ff ffc9 	bl	8011ab8 <sys_timeouts_sleeptime>
 8011b26:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d008      	beq.n	8011b40 <sys_timeouts_mbox_fetch+0x3c>
 8011b2e:	68fa      	ldr	r2, [r7, #12]
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f004 fce7 	bl	8016506 <sys_arch_mbox_fetch>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b3e:	d102      	bne.n	8011b46 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011b40:	f7ff ff68 	bl	8011a14 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011b44:	e7e3      	b.n	8011b0e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	20008c74 	.word	0x20008c74

08011b50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011b50:	b480      	push	{r7}
 8011b52:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011b54:	bf00      	nop
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
	...

08011b60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011b6a:	4b17      	ldr	r3, [pc, #92]	; (8011bc8 <udp_new_port+0x68>)
 8011b6c:	881b      	ldrh	r3, [r3, #0]
 8011b6e:	1c5a      	adds	r2, r3, #1
 8011b70:	b291      	uxth	r1, r2
 8011b72:	4a15      	ldr	r2, [pc, #84]	; (8011bc8 <udp_new_port+0x68>)
 8011b74:	8011      	strh	r1, [r2, #0]
 8011b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d103      	bne.n	8011b86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011b7e:	4b12      	ldr	r3, [pc, #72]	; (8011bc8 <udp_new_port+0x68>)
 8011b80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011b84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b86:	4b11      	ldr	r3, [pc, #68]	; (8011bcc <udp_new_port+0x6c>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	603b      	str	r3, [r7, #0]
 8011b8c:	e011      	b.n	8011bb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	8a5a      	ldrh	r2, [r3, #18]
 8011b92:	4b0d      	ldr	r3, [pc, #52]	; (8011bc8 <udp_new_port+0x68>)
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d108      	bne.n	8011bac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011b9a:	88fb      	ldrh	r3, [r7, #6]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	80fb      	strh	r3, [r7, #6]
 8011ba0:	88fb      	ldrh	r3, [r7, #6]
 8011ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ba6:	d3e0      	bcc.n	8011b6a <udp_new_port+0xa>
        return 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	e007      	b.n	8011bbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	603b      	str	r3, [r7, #0]
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d1ea      	bne.n	8011b8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011bb8:	4b03      	ldr	r3, [pc, #12]	; (8011bc8 <udp_new_port+0x68>)
 8011bba:	881b      	ldrh	r3, [r3, #0]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	370c      	adds	r7, #12
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	20000018 	.word	0x20000018
 8011bcc:	2000fad8 	.word	0x2000fad8

08011bd0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b085      	sub	sp, #20
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011bde:	79fb      	ldrb	r3, [r7, #7]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d018      	beq.n	8011c16 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d013      	beq.n	8011c12 <udp_input_local_match+0x42>
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00f      	beq.n	8011c12 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011bf2:	4b14      	ldr	r3, [pc, #80]	; (8011c44 <udp_input_local_match+0x74>)
 8011bf4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bfa:	d00a      	beq.n	8011c12 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	4b10      	ldr	r3, [pc, #64]	; (8011c44 <udp_input_local_match+0x74>)
 8011c02:	695b      	ldr	r3, [r3, #20]
 8011c04:	405a      	eors	r2, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	3308      	adds	r3, #8
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d110      	bne.n	8011c34 <udp_input_local_match+0x64>
          return 1;
 8011c12:	2301      	movs	r3, #1
 8011c14:	e00f      	b.n	8011c36 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d009      	beq.n	8011c30 <udp_input_local_match+0x60>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d005      	beq.n	8011c30 <udp_input_local_match+0x60>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	4b06      	ldr	r3, [pc, #24]	; (8011c44 <udp_input_local_match+0x74>)
 8011c2a:	695b      	ldr	r3, [r3, #20]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d101      	bne.n	8011c34 <udp_input_local_match+0x64>
      return 1;
 8011c30:	2301      	movs	r3, #1
 8011c32:	e000      	b.n	8011c36 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8011c34:	2300      	movs	r3, #0
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3714      	adds	r7, #20
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop
 8011c44:	2000c390 	.word	0x2000c390

08011c48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b08d      	sub	sp, #52	; 0x34
 8011c4c:	af02      	add	r7, sp, #8
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	895b      	ldrh	r3, [r3, #10]
 8011c5a:	2b07      	cmp	r3, #7
 8011c5c:	d803      	bhi.n	8011c66 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7fa f91c 	bl	800be9c <pbuf_free>
    goto end;
 8011c64:	e0c6      	b.n	8011df4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011c6c:	4b63      	ldr	r3, [pc, #396]	; (8011dfc <udp_input+0x1b4>)
 8011c6e:	695a      	ldr	r2, [r3, #20]
 8011c70:	4b62      	ldr	r3, [pc, #392]	; (8011dfc <udp_input+0x1b4>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4619      	mov	r1, r3
 8011c76:	4610      	mov	r0, r2
 8011c78:	f003 fcf8 	bl	801566c <ip4_addr_isbroadcast_u32>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	b29b      	uxth	r3, r3
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7f8 ff30 	bl	800aaec <lwip_htons>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	885b      	ldrh	r3, [r3, #2]
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f8 ff28 	bl	800aaec <lwip_htons>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cac:	4b54      	ldr	r3, [pc, #336]	; (8011e00 <udp_input+0x1b8>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8011cb2:	e03b      	b.n	8011d2c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb6:	8a5b      	ldrh	r3, [r3, #18]
 8011cb8:	89fa      	ldrh	r2, [r7, #14]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d131      	bne.n	8011d22 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011cbe:	7cfb      	ldrb	r3, [r7, #19]
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cc6:	f7ff ff83 	bl	8011bd0 <udp_input_local_match>
 8011cca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d028      	beq.n	8011d22 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	7c1b      	ldrb	r3, [r3, #16]
 8011cd4:	f003 0304 	and.w	r3, r3, #4
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d104      	bne.n	8011ce6 <udp_input+0x9e>
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce8:	8a9b      	ldrh	r3, [r3, #20]
 8011cea:	8a3a      	ldrh	r2, [r7, #16]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d118      	bne.n	8011d22 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d005      	beq.n	8011d04 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	685a      	ldr	r2, [r3, #4]
 8011cfc:	4b3f      	ldr	r3, [pc, #252]	; (8011dfc <udp_input+0x1b4>)
 8011cfe:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d10e      	bne.n	8011d22 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011d04:	6a3b      	ldr	r3, [r7, #32]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d014      	beq.n	8011d34 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	68da      	ldr	r2, [r3, #12]
 8011d0e:	6a3b      	ldr	r3, [r7, #32]
 8011d10:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011d12:	4b3b      	ldr	r3, [pc, #236]	; (8011e00 <udp_input+0x1b8>)
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d18:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011d1a:	4a39      	ldr	r2, [pc, #228]	; (8011e00 <udp_input+0x1b8>)
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011d20:	e008      	b.n	8011d34 <udp_input+0xec>
      }
    }

    prev = pcb;
 8011d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d24:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1c0      	bne.n	8011cb4 <udp_input+0x6c>
 8011d32:	e000      	b.n	8011d36 <udp_input+0xee>
        break;
 8011d34:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d101      	bne.n	8011d40 <udp_input+0xf8>
    pcb = uncon_pcb;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d002      	beq.n	8011d4c <udp_input+0x104>
    for_us = 1;
 8011d46:	2301      	movs	r3, #1
 8011d48:	76fb      	strb	r3, [r7, #27]
 8011d4a:	e00a      	b.n	8011d62 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	3304      	adds	r3, #4
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	4b2a      	ldr	r3, [pc, #168]	; (8011dfc <udp_input+0x1b4>)
 8011d54:	695b      	ldr	r3, [r3, #20]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	bf0c      	ite	eq
 8011d5a:	2301      	moveq	r3, #1
 8011d5c:	2300      	movne	r3, #0
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011d62:	7efb      	ldrb	r3, [r7, #27]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d042      	beq.n	8011dee <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8011d68:	f06f 0107 	mvn.w	r1, #7
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7fa f871 	bl	800be54 <pbuf_header>
 8011d72:	4603      	mov	r3, r0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00a      	beq.n	8011d8e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8011d78:	4b22      	ldr	r3, [pc, #136]	; (8011e04 <udp_input+0x1bc>)
 8011d7a:	f240 1255 	movw	r2, #341	; 0x155
 8011d7e:	4922      	ldr	r1, [pc, #136]	; (8011e08 <udp_input+0x1c0>)
 8011d80:	4822      	ldr	r0, [pc, #136]	; (8011e0c <udp_input+0x1c4>)
 8011d82:	f004 fd9b 	bl	80168bc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7fa f888 	bl	800be9c <pbuf_free>
      goto end;
 8011d8c:	e032      	b.n	8011df4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d012      	beq.n	8011dba <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	699b      	ldr	r3, [r3, #24]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00a      	beq.n	8011db2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	699c      	ldr	r4, [r3, #24]
 8011da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da2:	69d8      	ldr	r0, [r3, #28]
 8011da4:	8a3b      	ldrh	r3, [r7, #16]
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	4b19      	ldr	r3, [pc, #100]	; (8011e10 <udp_input+0x1c8>)
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011db0:	e021      	b.n	8011df6 <udp_input+0x1ae>
        pbuf_free(p);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7fa f872 	bl	800be9c <pbuf_free>
        goto end;
 8011db8:	e01c      	b.n	8011df4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011dba:	7cfb      	ldrb	r3, [r7, #19]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d112      	bne.n	8011de6 <udp_input+0x19e>
 8011dc0:	4b0e      	ldr	r3, [pc, #56]	; (8011dfc <udp_input+0x1b4>)
 8011dc2:	695b      	ldr	r3, [r3, #20]
 8011dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dc8:	2be0      	cmp	r3, #224	; 0xe0
 8011dca:	d00c      	beq.n	8011de6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011dcc:	4b0b      	ldr	r3, [pc, #44]	; (8011dfc <udp_input+0x1b4>)
 8011dce:	899b      	ldrh	r3, [r3, #12]
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	b29b      	uxth	r3, r3
 8011dd4:	b21b      	sxth	r3, r3
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7fa f84d 	bl	800be78 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011dde:	2103      	movs	r1, #3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f003 f923 	bl	801502c <icmp_dest_unreach>
      pbuf_free(p);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7fa f858 	bl	800be9c <pbuf_free>
  return;
 8011dec:	e003      	b.n	8011df6 <udp_input+0x1ae>
    pbuf_free(p);
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7fa f854 	bl	800be9c <pbuf_free>
  return;
 8011df4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011df6:	372c      	adds	r7, #44	; 0x2c
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd90      	pop	{r4, r7, pc}
 8011dfc:	2000c390 	.word	0x2000c390
 8011e00:	2000fad8 	.word	0x2000fad8
 8011e04:	08019e8c 	.word	0x08019e8c
 8011e08:	08019ebc 	.word	0x08019ebc
 8011e0c:	08019ed0 	.word	0x08019ed0
 8011e10:	2000c3a0 	.word	0x2000c3a0

08011e14 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b088      	sub	sp, #32
 8011e18:	af02      	add	r7, sp, #8
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
 8011e20:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d002      	beq.n	8011e2e <udp_sendto_if+0x1a>
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <udp_sendto_if+0x20>
    return ERR_VAL;
 8011e2e:	f06f 0305 	mvn.w	r3, #5
 8011e32:	e028      	b.n	8011e86 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d009      	beq.n	8011e4e <udp_sendto_if+0x3a>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d005      	beq.n	8011e4e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e4a:	2be0      	cmp	r3, #224	; 0xe0
 8011e4c:	d103      	bne.n	8011e56 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8011e4e:	6a3b      	ldr	r3, [r7, #32]
 8011e50:	3304      	adds	r3, #4
 8011e52:	617b      	str	r3, [r7, #20]
 8011e54:	e00b      	b.n	8011e6e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	6a3b      	ldr	r3, [r7, #32]
 8011e5c:	3304      	adds	r3, #4
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d002      	beq.n	8011e6a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8011e64:	f06f 0303 	mvn.w	r3, #3
 8011e68:	e00d      	b.n	8011e86 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011e6e:	887a      	ldrh	r2, [r7, #2]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	9300      	str	r3, [sp, #0]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	68b9      	ldr	r1, [r7, #8]
 8011e7e:	68f8      	ldr	r0, [r7, #12]
 8011e80:	f000 f806 	bl	8011e90 <udp_sendto_if_src>
 8011e84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3718      	adds	r7, #24
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
	...

08011e90 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b08c      	sub	sp, #48	; 0x30
 8011e94:	af04      	add	r7, sp, #16
 8011e96:	60f8      	str	r0, [r7, #12]
 8011e98:	60b9      	str	r1, [r7, #8]
 8011e9a:	607a      	str	r2, [r7, #4]
 8011e9c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d002      	beq.n	8011eaa <udp_sendto_if_src+0x1a>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d102      	bne.n	8011eb0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8011eaa:	f06f 0305 	mvn.w	r3, #5
 8011eae:	e07e      	b.n	8011fae <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	8a5b      	ldrh	r3, [r3, #18]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d10f      	bne.n	8011ed8 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011eb8:	68f9      	ldr	r1, [r7, #12]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	8a5b      	ldrh	r3, [r3, #18]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f000 f87f 	bl	8011fc4 <udp_bind>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011eca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d002      	beq.n	8011ed8 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011ed2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ed6:	e06a      	b.n	8011fae <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8011ed8:	2108      	movs	r1, #8
 8011eda:	68b8      	ldr	r0, [r7, #8]
 8011edc:	f7f9 ffba 	bl	800be54 <pbuf_header>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d014      	beq.n	8011f10 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	2108      	movs	r1, #8
 8011eea:	2001      	movs	r0, #1
 8011eec:	f7f9 fc64 	bl	800b7b8 <pbuf_alloc>
 8011ef0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d102      	bne.n	8011efe <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011efc:	e057      	b.n	8011fae <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	891b      	ldrh	r3, [r3, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d006      	beq.n	8011f14 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011f06:	68b9      	ldr	r1, [r7, #8]
 8011f08:	69f8      	ldr	r0, [r7, #28]
 8011f0a:	f7fa f8f7 	bl	800c0fc <pbuf_chain>
 8011f0e:	e001      	b.n	8011f14 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	895b      	ldrh	r3, [r3, #10]
 8011f18:	2b07      	cmp	r3, #7
 8011f1a:	d806      	bhi.n	8011f2a <udp_sendto_if_src+0x9a>
 8011f1c:	4b26      	ldr	r3, [pc, #152]	; (8011fb8 <udp_sendto_if_src+0x128>)
 8011f1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011f22:	4926      	ldr	r1, [pc, #152]	; (8011fbc <udp_sendto_if_src+0x12c>)
 8011f24:	4826      	ldr	r0, [pc, #152]	; (8011fc0 <udp_sendto_if_src+0x130>)
 8011f26:	f004 fcc9 	bl	80168bc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	8a5b      	ldrh	r3, [r3, #18]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7f8 fdd9 	bl	800aaec <lwip_htons>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011f42:	887b      	ldrh	r3, [r7, #2]
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7f8 fdd1 	bl	800aaec <lwip_htons>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	2200      	movs	r2, #0
 8011f56:	719a      	strb	r2, [r3, #6]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	891b      	ldrh	r3, [r3, #8]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7f8 fdc3 	bl	800aaec <lwip_htons>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461a      	mov	r2, r3
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011f6e:	2311      	movs	r3, #17
 8011f70:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	7a9b      	ldrb	r3, [r3, #10]
 8011f76:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	7a5b      	ldrb	r3, [r3, #9]
 8011f7c:	7cb9      	ldrb	r1, [r7, #18]
 8011f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f80:	9202      	str	r2, [sp, #8]
 8011f82:	7cfa      	ldrb	r2, [r7, #19]
 8011f84:	9201      	str	r2, [sp, #4]
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f8e:	69f8      	ldr	r0, [r7, #28]
 8011f90:	f003 fac4 	bl	801551c <ip4_output_if_src>
 8011f94:	4603      	mov	r3, r0
 8011f96:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011f98:	69fa      	ldr	r2, [r7, #28]
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d004      	beq.n	8011faa <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8011fa0:	69f8      	ldr	r0, [r7, #28]
 8011fa2:	f7f9 ff7b 	bl	800be9c <pbuf_free>
    q = NULL;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011faa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3720      	adds	r7, #32
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	08019e8c 	.word	0x08019e8c
 8011fbc:	08019ef8 	.word	0x08019ef8
 8011fc0:	08019ed0 	.word	0x08019ed0

08011fc4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011fd8:	4b30      	ldr	r3, [pc, #192]	; (801209c <udp_bind+0xd8>)
 8011fda:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d002      	beq.n	8011fe8 <udp_bind+0x24>
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d102      	bne.n	8011fee <udp_bind+0x2a>
    return ERR_VAL;
 8011fe8:	f06f 0305 	mvn.w	r3, #5
 8011fec:	e052      	b.n	8012094 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ff2:	4b2b      	ldr	r3, [pc, #172]	; (80120a0 <udp_bind+0xdc>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	617b      	str	r3, [r7, #20]
 8011ff8:	e009      	b.n	801200e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d102      	bne.n	8012008 <udp_bind+0x44>
      rebind = 1;
 8012002:	2301      	movs	r3, #1
 8012004:	74fb      	strb	r3, [r7, #19]
      break;
 8012006:	e005      	b.n	8012014 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	617b      	str	r3, [r7, #20]
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1f2      	bne.n	8011ffa <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012014:	88fb      	ldrh	r3, [r7, #6]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d109      	bne.n	801202e <udp_bind+0x6a>
    port = udp_new_port();
 801201a:	f7ff fda1 	bl	8011b60 <udp_new_port>
 801201e:	4603      	mov	r3, r0
 8012020:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012022:	88fb      	ldrh	r3, [r7, #6]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d11e      	bne.n	8012066 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012028:	f06f 0307 	mvn.w	r3, #7
 801202c:	e032      	b.n	8012094 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801202e:	4b1c      	ldr	r3, [pc, #112]	; (80120a0 <udp_bind+0xdc>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	617b      	str	r3, [r7, #20]
 8012034:	e014      	b.n	8012060 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	429a      	cmp	r2, r3
 801203c:	d00d      	beq.n	801205a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	8a5b      	ldrh	r3, [r3, #18]
 8012042:	88fa      	ldrh	r2, [r7, #6]
 8012044:	429a      	cmp	r2, r3
 8012046:	d108      	bne.n	801205a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012050:	429a      	cmp	r2, r3
 8012052:	d102      	bne.n	801205a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012054:	f06f 0307 	mvn.w	r3, #7
 8012058:	e01c      	b.n	8012094 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	617b      	str	r3, [r7, #20]
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1e7      	bne.n	8012036 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <udp_bind+0xae>
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	e000      	b.n	8012074 <udp_bind+0xb0>
 8012072:	2300      	movs	r3, #0
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	88fa      	ldrh	r2, [r7, #6]
 801207c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801207e:	7cfb      	ldrb	r3, [r7, #19]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d106      	bne.n	8012092 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012084:	4b06      	ldr	r3, [pc, #24]	; (80120a0 <udp_bind+0xdc>)
 8012086:	681a      	ldr	r2, [r3, #0]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801208c:	4a04      	ldr	r2, [pc, #16]	; (80120a0 <udp_bind+0xdc>)
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012092:	2300      	movs	r3, #0
}
 8012094:	4618      	mov	r0, r3
 8012096:	3718      	adds	r7, #24
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	08025fb0 	.word	0x08025fb0
 80120a0:	2000fad8 	.word	0x2000fad8

080120a4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	4613      	mov	r3, r2
 80120b0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <udp_connect+0x1a>
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d102      	bne.n	80120c4 <udp_connect+0x20>
    return ERR_VAL;
 80120be:	f06f 0305 	mvn.w	r3, #5
 80120c2:	e03e      	b.n	8012142 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	8a5b      	ldrh	r3, [r3, #18]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10f      	bne.n	80120ec <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80120cc:	68f9      	ldr	r1, [r7, #12]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	8a5b      	ldrh	r3, [r3, #18]
 80120d2:	461a      	mov	r2, r3
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f7ff ff75 	bl	8011fc4 <udp_bind>
 80120da:	4603      	mov	r3, r0
 80120dc:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80120de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d002      	beq.n	80120ec <udp_connect+0x48>
      return err;
 80120e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120ea:	e02a      	b.n	8012142 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <udp_connect+0x54>
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	e000      	b.n	80120fa <udp_connect+0x56>
 80120f8:	2300      	movs	r3, #0
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	88fa      	ldrh	r2, [r7, #6]
 8012102:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	7c1b      	ldrb	r3, [r3, #16]
 8012108:	f043 0304 	orr.w	r3, r3, #4
 801210c:	b2da      	uxtb	r2, r3
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012112:	4b0e      	ldr	r3, [pc, #56]	; (801214c <udp_connect+0xa8>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	617b      	str	r3, [r7, #20]
 8012118:	e008      	b.n	801212c <udp_connect+0x88>
    if (pcb == ipcb) {
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	429a      	cmp	r2, r3
 8012120:	d101      	bne.n	8012126 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012122:	2300      	movs	r3, #0
 8012124:	e00d      	b.n	8012142 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	617b      	str	r3, [r7, #20]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1f3      	bne.n	801211a <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012132:	4b06      	ldr	r3, [pc, #24]	; (801214c <udp_connect+0xa8>)
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801213a:	4a04      	ldr	r2, [pc, #16]	; (801214c <udp_connect+0xa8>)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012140:	2300      	movs	r3, #0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	2000fad8 	.word	0x2000fad8

08012150 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	61da      	str	r2, [r3, #28]
}
 8012168:	bf00      	nop
 801216a:	3714      	adds	r7, #20
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr

08012174 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801217c:	4b15      	ldr	r3, [pc, #84]	; (80121d4 <udp_remove+0x60>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d105      	bne.n	8012192 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012186:	4b13      	ldr	r3, [pc, #76]	; (80121d4 <udp_remove+0x60>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	4a11      	ldr	r2, [pc, #68]	; (80121d4 <udp_remove+0x60>)
 801218e:	6013      	str	r3, [r2, #0]
 8012190:	e017      	b.n	80121c2 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012192:	4b10      	ldr	r3, [pc, #64]	; (80121d4 <udp_remove+0x60>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	60fb      	str	r3, [r7, #12]
 8012198:	e010      	b.n	80121bc <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d009      	beq.n	80121b6 <udp_remove+0x42>
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d104      	bne.n	80121b6 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	68da      	ldr	r2, [r3, #12]
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	60da      	str	r2, [r3, #12]
        break;
 80121b4:	e005      	b.n	80121c2 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	60fb      	str	r3, [r7, #12]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1eb      	bne.n	801219a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80121c2:	6879      	ldr	r1, [r7, #4]
 80121c4:	2000      	movs	r0, #0
 80121c6:	f7f9 f907 	bl	800b3d8 <memp_free>
}
 80121ca:	bf00      	nop
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}
 80121d2:	bf00      	nop
 80121d4:	2000fad8 	.word	0x2000fad8

080121d8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80121de:	2000      	movs	r0, #0
 80121e0:	f7f9 f8a8 	bl	800b334 <memp_malloc>
 80121e4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d007      	beq.n	80121fc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80121ec:	2220      	movs	r2, #32
 80121ee:	2100      	movs	r1, #0
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f004 fb5b 	bl	80168ac <memset>
    pcb->ttl = UDP_TTL;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	22ff      	movs	r2, #255	; 0xff
 80121fa:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80121fc:	687b      	ldr	r3, [r7, #4]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012206:	b580      	push	{r7, lr}
 8012208:	b084      	sub	sp, #16
 801220a:	af00      	add	r7, sp, #0
 801220c:	4603      	mov	r3, r0
 801220e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012210:	f7ff ffe2 	bl	80121d8 <udp_new>
 8012214:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012216:	68fb      	ldr	r3, [r7, #12]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012220:	b480      	push	{r7}
 8012222:	b085      	sub	sp, #20
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d01e      	beq.n	801226e <udp_netif_ip_addr_changed+0x4e>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d01a      	beq.n	801226e <udp_netif_ip_addr_changed+0x4e>
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d017      	beq.n	801226e <udp_netif_ip_addr_changed+0x4e>
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d013      	beq.n	801226e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012246:	4b0d      	ldr	r3, [pc, #52]	; (801227c <udp_netif_ip_addr_changed+0x5c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	60fb      	str	r3, [r7, #12]
 801224c:	e00c      	b.n	8012268 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	429a      	cmp	r2, r3
 8012258:	d103      	bne.n	8012262 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	60fb      	str	r3, [r7, #12]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d1ef      	bne.n	801224e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801226e:	bf00      	nop
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	2000fad8 	.word	0x2000fad8

08012280 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012284:	4b20      	ldr	r3, [pc, #128]	; (8012308 <dhcp_inc_pcb_refcount+0x88>)
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d133      	bne.n	80122f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801228c:	4b1f      	ldr	r3, [pc, #124]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d005      	beq.n	80122a0 <dhcp_inc_pcb_refcount+0x20>
 8012294:	4b1e      	ldr	r3, [pc, #120]	; (8012310 <dhcp_inc_pcb_refcount+0x90>)
 8012296:	22d9      	movs	r2, #217	; 0xd9
 8012298:	491e      	ldr	r1, [pc, #120]	; (8012314 <dhcp_inc_pcb_refcount+0x94>)
 801229a:	481f      	ldr	r0, [pc, #124]	; (8012318 <dhcp_inc_pcb_refcount+0x98>)
 801229c:	f004 fb0e 	bl	80168bc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80122a0:	f7ff ff9a 	bl	80121d8 <udp_new>
 80122a4:	4602      	mov	r2, r0
 80122a6:	4b19      	ldr	r3, [pc, #100]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122a8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80122aa:	4b18      	ldr	r3, [pc, #96]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d102      	bne.n	80122b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80122b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122b6:	e024      	b.n	8012302 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80122b8:	4b14      	ldr	r3, [pc, #80]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	7a1a      	ldrb	r2, [r3, #8]
 80122be:	4b13      	ldr	r3, [pc, #76]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f042 0220 	orr.w	r2, r2, #32
 80122c6:	b2d2      	uxtb	r2, r2
 80122c8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80122ca:	4b10      	ldr	r3, [pc, #64]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2244      	movs	r2, #68	; 0x44
 80122d0:	4912      	ldr	r1, [pc, #72]	; (801231c <dhcp_inc_pcb_refcount+0x9c>)
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff fe76 	bl	8011fc4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80122d8:	4b0c      	ldr	r3, [pc, #48]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2243      	movs	r2, #67	; 0x43
 80122de:	490f      	ldr	r1, [pc, #60]	; (801231c <dhcp_inc_pcb_refcount+0x9c>)
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7ff fedf 	bl	80120a4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80122e6:	4b09      	ldr	r3, [pc, #36]	; (801230c <dhcp_inc_pcb_refcount+0x8c>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2200      	movs	r2, #0
 80122ec:	490c      	ldr	r1, [pc, #48]	; (8012320 <dhcp_inc_pcb_refcount+0xa0>)
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7ff ff2e 	bl	8012150 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80122f4:	4b04      	ldr	r3, [pc, #16]	; (8012308 <dhcp_inc_pcb_refcount+0x88>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	3301      	adds	r3, #1
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	4b02      	ldr	r3, [pc, #8]	; (8012308 <dhcp_inc_pcb_refcount+0x88>)
 80122fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012300:	2300      	movs	r3, #0
}
 8012302:	4618      	mov	r0, r3
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	20008c84 	.word	0x20008c84
 801230c:	20008c80 	.word	0x20008c80
 8012310:	08019f28 	.word	0x08019f28
 8012314:	08019f60 	.word	0x08019f60
 8012318:	08019f88 	.word	0x08019f88
 801231c:	08025fb0 	.word	0x08025fb0
 8012320:	080139dd 	.word	0x080139dd

08012324 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012328:	4b0e      	ldr	r3, [pc, #56]	; (8012364 <dhcp_dec_pcb_refcount+0x40>)
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d105      	bne.n	801233c <dhcp_dec_pcb_refcount+0x18>
 8012330:	4b0d      	ldr	r3, [pc, #52]	; (8012368 <dhcp_dec_pcb_refcount+0x44>)
 8012332:	22f3      	movs	r2, #243	; 0xf3
 8012334:	490d      	ldr	r1, [pc, #52]	; (801236c <dhcp_dec_pcb_refcount+0x48>)
 8012336:	480e      	ldr	r0, [pc, #56]	; (8012370 <dhcp_dec_pcb_refcount+0x4c>)
 8012338:	f004 fac0 	bl	80168bc <iprintf>
  dhcp_pcb_refcount--;
 801233c:	4b09      	ldr	r3, [pc, #36]	; (8012364 <dhcp_dec_pcb_refcount+0x40>)
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	3b01      	subs	r3, #1
 8012342:	b2da      	uxtb	r2, r3
 8012344:	4b07      	ldr	r3, [pc, #28]	; (8012364 <dhcp_dec_pcb_refcount+0x40>)
 8012346:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012348:	4b06      	ldr	r3, [pc, #24]	; (8012364 <dhcp_dec_pcb_refcount+0x40>)
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d107      	bne.n	8012360 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012350:	4b08      	ldr	r3, [pc, #32]	; (8012374 <dhcp_dec_pcb_refcount+0x50>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4618      	mov	r0, r3
 8012356:	f7ff ff0d 	bl	8012174 <udp_remove>
    dhcp_pcb = NULL;
 801235a:	4b06      	ldr	r3, [pc, #24]	; (8012374 <dhcp_dec_pcb_refcount+0x50>)
 801235c:	2200      	movs	r2, #0
 801235e:	601a      	str	r2, [r3, #0]
  }
}
 8012360:	bf00      	nop
 8012362:	bd80      	pop	{r7, pc}
 8012364:	20008c84 	.word	0x20008c84
 8012368:	08019f28 	.word	0x08019f28
 801236c:	08019fb0 	.word	0x08019fb0
 8012370:	08019f88 	.word	0x08019f88
 8012374:	20008c80 	.word	0x20008c80

08012378 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012386:	210c      	movs	r1, #12
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f000 ff85 	bl	8013298 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801238e:	4b06      	ldr	r3, [pc, #24]	; (80123a8 <dhcp_handle_nak+0x30>)
 8012390:	4a05      	ldr	r2, [pc, #20]	; (80123a8 <dhcp_handle_nak+0x30>)
 8012392:	4905      	ldr	r1, [pc, #20]	; (80123a8 <dhcp_handle_nak+0x30>)
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7f9 f8ad 	bl	800b4f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 fbb6 	bl	8012b0c <dhcp_discover>
}
 80123a0:	bf00      	nop
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	08025fb0 	.word	0x08025fb0

080123ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a1b      	ldr	r3, [r3, #32]
 80123b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80123ba:	2108      	movs	r1, #8
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 ff6b 	bl	8013298 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	3328      	adds	r3, #40	; 0x28
 80123c6:	2200      	movs	r2, #0
 80123c8:	4619      	mov	r1, r3
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f002 fb1e 	bl	8014a0c <etharp_query>
 80123d0:	4603      	mov	r3, r0
 80123d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	7a9b      	ldrb	r3, [r3, #10]
 80123d8:	2bff      	cmp	r3, #255	; 0xff
 80123da:	d005      	beq.n	80123e8 <dhcp_check+0x3c>
    dhcp->tries++;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	7a9b      	ldrb	r3, [r3, #10]
 80123e0:	3301      	adds	r3, #1
 80123e2:	b2da      	uxtb	r2, r3
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80123e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80123ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80123ee:	893b      	ldrh	r3, [r7, #8]
 80123f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80123f4:	4a06      	ldr	r2, [pc, #24]	; (8012410 <dhcp_check+0x64>)
 80123f6:	fb82 1203 	smull	r1, r2, r2, r3
 80123fa:	1152      	asrs	r2, r2, #5
 80123fc:	17db      	asrs	r3, r3, #31
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	b29a      	uxth	r2, r3
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012406:	bf00      	nop
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	10624dd3 	.word	0x10624dd3

08012414 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6a1b      	ldr	r3, [r3, #32]
 8012420:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012422:	4b0c      	ldr	r3, [pc, #48]	; (8012454 <dhcp_handle_offer+0x40>)
 8012424:	789b      	ldrb	r3, [r3, #2]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00f      	beq.n	801244a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801242a:	4b0b      	ldr	r3, [pc, #44]	; (8012458 <dhcp_handle_offer+0x44>)
 801242c:	689b      	ldr	r3, [r3, #8]
 801242e:	4618      	mov	r0, r3
 8012430:	f7f8 fb6a 	bl	800ab08 <lwip_htonl>
 8012434:	4602      	mov	r2, r0
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	691a      	ldr	r2, [r3, #16]
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f809 	bl	801245c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801244a:	bf00      	nop
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	2000fadc 	.word	0x2000fadc
 8012458:	2000fae4 	.word	0x2000fae4

0801245c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b088      	sub	sp, #32
 8012460:	af02      	add	r7, sp, #8
 8012462:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801246a:	2101      	movs	r1, #1
 801246c:	6938      	ldr	r0, [r7, #16]
 801246e:	f000 ff13 	bl	8013298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012472:	2203      	movs	r2, #3
 8012474:	6939      	ldr	r1, [r7, #16]
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f001 fb94 	bl	8013ba4 <dhcp_create_msg>
 801247c:	4603      	mov	r3, r0
 801247e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d159      	bne.n	801253c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012488:	2202      	movs	r2, #2
 801248a:	2139      	movs	r1, #57	; 0x39
 801248c:	6938      	ldr	r0, [r7, #16]
 801248e:	f000 ff1d 	bl	80132cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012496:	4619      	mov	r1, r3
 8012498:	6938      	ldr	r0, [r7, #16]
 801249a:	f000 ff79 	bl	8013390 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801249e:	2204      	movs	r2, #4
 80124a0:	2132      	movs	r1, #50	; 0x32
 80124a2:	6938      	ldr	r0, [r7, #16]
 80124a4:	f000 ff12 	bl	80132cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7f8 fb2b 	bl	800ab08 <lwip_htonl>
 80124b2:	4603      	mov	r3, r0
 80124b4:	4619      	mov	r1, r3
 80124b6:	6938      	ldr	r0, [r7, #16]
 80124b8:	f000 ffa4 	bl	8013404 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80124bc:	2204      	movs	r2, #4
 80124be:	2136      	movs	r1, #54	; 0x36
 80124c0:	6938      	ldr	r0, [r7, #16]
 80124c2:	f000 ff03 	bl	80132cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7f8 fb1c 	bl	800ab08 <lwip_htonl>
 80124d0:	4603      	mov	r3, r0
 80124d2:	4619      	mov	r1, r3
 80124d4:	6938      	ldr	r0, [r7, #16]
 80124d6:	f000 ff95 	bl	8013404 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80124da:	2203      	movs	r2, #3
 80124dc:	2137      	movs	r1, #55	; 0x37
 80124de:	6938      	ldr	r0, [r7, #16]
 80124e0:	f000 fef4 	bl	80132cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80124e4:	2300      	movs	r3, #0
 80124e6:	75fb      	strb	r3, [r7, #23]
 80124e8:	e009      	b.n	80124fe <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80124ea:	7dfb      	ldrb	r3, [r7, #23]
 80124ec:	4a29      	ldr	r2, [pc, #164]	; (8012594 <dhcp_select+0x138>)
 80124ee:	5cd3      	ldrb	r3, [r2, r3]
 80124f0:	4619      	mov	r1, r3
 80124f2:	6938      	ldr	r0, [r7, #16]
 80124f4:	f000 ff24 	bl	8013340 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80124f8:	7dfb      	ldrb	r3, [r7, #23]
 80124fa:	3301      	adds	r3, #1
 80124fc:	75fb      	strb	r3, [r7, #23]
 80124fe:	7dfb      	ldrb	r3, [r7, #23]
 8012500:	2b02      	cmp	r3, #2
 8012502:	d9f2      	bls.n	80124ea <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8012504:	6938      	ldr	r0, [r7, #16]
 8012506:	f001 fcf1 	bl	8013eec <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	68da      	ldr	r2, [r3, #12]
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	8a9b      	ldrh	r3, [r3, #20]
 8012512:	33f0      	adds	r3, #240	; 0xf0
 8012514:	b29b      	uxth	r3, r3
 8012516:	4619      	mov	r1, r3
 8012518:	4610      	mov	r0, r2
 801251a:	f7f9 fb4b 	bl	800bbb4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801251e:	4b1e      	ldr	r3, [pc, #120]	; (8012598 <dhcp_select+0x13c>)
 8012520:	6818      	ldr	r0, [r3, #0]
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	68d9      	ldr	r1, [r3, #12]
 8012526:	4b1d      	ldr	r3, [pc, #116]	; (801259c <dhcp_select+0x140>)
 8012528:	9301      	str	r3, [sp, #4]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	9300      	str	r3, [sp, #0]
 801252e:	2343      	movs	r3, #67	; 0x43
 8012530:	4a1b      	ldr	r2, [pc, #108]	; (80125a0 <dhcp_select+0x144>)
 8012532:	f7ff fcad 	bl	8011e90 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012536:	6938      	ldr	r0, [r7, #16]
 8012538:	f001 fc96 	bl	8013e68 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	7a9b      	ldrb	r3, [r3, #10]
 8012540:	2bff      	cmp	r3, #255	; 0xff
 8012542:	d005      	beq.n	8012550 <dhcp_select+0xf4>
    dhcp->tries++;
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	7a9b      	ldrb	r3, [r3, #10]
 8012548:	3301      	adds	r3, #1
 801254a:	b2da      	uxtb	r2, r3
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	7a9b      	ldrb	r3, [r3, #10]
 8012554:	2b05      	cmp	r3, #5
 8012556:	d807      	bhi.n	8012568 <dhcp_select+0x10c>
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	7a9b      	ldrb	r3, [r3, #10]
 801255c:	461a      	mov	r2, r3
 801255e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012562:	4093      	lsls	r3, r2
 8012564:	b29b      	uxth	r3, r3
 8012566:	e001      	b.n	801256c <dhcp_select+0x110>
 8012568:	f64e 2360 	movw	r3, #60000	; 0xea60
 801256c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801256e:	89bb      	ldrh	r3, [r7, #12]
 8012570:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012574:	4a0b      	ldr	r2, [pc, #44]	; (80125a4 <dhcp_select+0x148>)
 8012576:	fb82 1203 	smull	r1, r2, r2, r3
 801257a:	1152      	asrs	r2, r2, #5
 801257c:	17db      	asrs	r3, r3, #31
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	b29a      	uxth	r2, r3
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801258a:	4618      	mov	r0, r3
 801258c:	3718      	adds	r7, #24
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	2000001c 	.word	0x2000001c
 8012598:	20008c80 	.word	0x20008c80
 801259c:	08025fb0 	.word	0x08025fb0
 80125a0:	08025fb4 	.word	0x08025fb4
 80125a4:	10624dd3 	.word	0x10624dd3

080125a8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80125ae:	4b27      	ldr	r3, [pc, #156]	; (801264c <dhcp_coarse_tmr+0xa4>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 80125b4:	e042      	b.n	801263c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6a1b      	ldr	r3, [r3, #32]
 80125ba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d039      	beq.n	8012636 <dhcp_coarse_tmr+0x8e>
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	7a5b      	ldrb	r3, [r3, #9]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d035      	beq.n	8012636 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d012      	beq.n	80125f8 <dhcp_coarse_tmr+0x50>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	8c1b      	ldrh	r3, [r3, #32]
 80125d6:	3301      	adds	r3, #1
 80125d8:	b29a      	uxth	r2, r3
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	841a      	strh	r2, [r3, #32]
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	8c1a      	ldrh	r2, [r3, #32]
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d106      	bne.n	80125f8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 fd94 	bl	8013118 <dhcp_release>
        dhcp_discover(netif);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f000 fa8b 	bl	8012b0c <dhcp_discover>
 80125f6:	e01e      	b.n	8012636 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	8bdb      	ldrh	r3, [r3, #30]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d00b      	beq.n	8012618 <dhcp_coarse_tmr+0x70>
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	8bdb      	ldrh	r3, [r3, #30]
 8012604:	1e5a      	subs	r2, r3, #1
 8012606:	b291      	uxth	r1, r2
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	83d1      	strh	r1, [r2, #30]
 801260c:	2b01      	cmp	r3, #1
 801260e:	d103      	bne.n	8012618 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 f8c6 	bl	80127a2 <dhcp_t2_timeout>
 8012616:	e00e      	b.n	8012636 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	8b9b      	ldrh	r3, [r3, #28]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d00a      	beq.n	8012636 <dhcp_coarse_tmr+0x8e>
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	8b9b      	ldrh	r3, [r3, #28]
 8012624:	1e5a      	subs	r2, r3, #1
 8012626:	b291      	uxth	r1, r2
 8012628:	683a      	ldr	r2, [r7, #0]
 801262a:	8391      	strh	r1, [r2, #28]
 801262c:	2b01      	cmp	r3, #1
 801262e:	d102      	bne.n	8012636 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f000 f888 	bl	8012746 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d1b9      	bne.n	80125b6 <dhcp_coarse_tmr+0xe>
  }
}
 8012642:	bf00      	nop
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	2000fab0 	.word	0x2000fab0

08012650 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8012656:	4b16      	ldr	r3, [pc, #88]	; (80126b0 <dhcp_fine_tmr+0x60>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801265c:	e020      	b.n	80126a0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d017      	beq.n	801269a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	8adb      	ldrh	r3, [r3, #22]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d906      	bls.n	8012680 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	8adb      	ldrh	r3, [r3, #22]
 8012676:	3b01      	subs	r3, #1
 8012678:	b29a      	uxth	r2, r3
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	82da      	strh	r2, [r3, #22]
 801267e:	e00c      	b.n	801269a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	8adb      	ldrh	r3, [r3, #22]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d108      	bne.n	801269a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	8adb      	ldrh	r3, [r3, #22]
 801268c:	3b01      	subs	r3, #1
 801268e:	b29a      	uxth	r2, r3
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f80d 	bl	80126b4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d1db      	bne.n	801265e <dhcp_fine_tmr+0xe>
  }
}
 80126a6:	bf00      	nop
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	2000fab0 	.word	0x2000fab0

080126b4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6a1b      	ldr	r3, [r3, #32]
 80126c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	7a5b      	ldrb	r3, [r3, #9]
 80126c6:	2b0c      	cmp	r3, #12
 80126c8:	d003      	beq.n	80126d2 <dhcp_timeout+0x1e>
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	7a5b      	ldrb	r3, [r3, #9]
 80126ce:	2b06      	cmp	r3, #6
 80126d0:	d103      	bne.n	80126da <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 fa1a 	bl	8012b0c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80126d8:	e031      	b.n	801273e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	7a5b      	ldrb	r3, [r3, #9]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d10e      	bne.n	8012700 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	7a9b      	ldrb	r3, [r3, #10]
 80126e6:	2b05      	cmp	r3, #5
 80126e8:	d803      	bhi.n	80126f2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7ff feb6 	bl	801245c <dhcp_select>
}
 80126f0:	e025      	b.n	801273e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 fd10 	bl	8013118 <dhcp_release>
      dhcp_discover(netif);
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f000 fa07 	bl	8012b0c <dhcp_discover>
}
 80126fe:	e01e      	b.n	801273e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	7a5b      	ldrb	r3, [r3, #9]
 8012704:	2b08      	cmp	r3, #8
 8012706:	d10b      	bne.n	8012720 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	7a9b      	ldrb	r3, [r3, #10]
 801270c:	2b01      	cmp	r3, #1
 801270e:	d803      	bhi.n	8012718 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff fe4b 	bl	80123ac <dhcp_check>
}
 8012716:	e012      	b.n	801273e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fa83 	bl	8012c24 <dhcp_bind>
}
 801271e:	e00e      	b.n	801273e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	7a5b      	ldrb	r3, [r3, #9]
 8012724:	2b03      	cmp	r3, #3
 8012726:	d10a      	bne.n	801273e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	7a9b      	ldrb	r3, [r3, #10]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d803      	bhi.n	8012738 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 fc5d 	bl	8012ff0 <dhcp_reboot>
}
 8012736:	e002      	b.n	801273e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 f9e7 	bl	8012b0c <dhcp_discover>
}
 801273e:	bf00      	nop
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}

08012746 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012746:	b580      	push	{r7, lr}
 8012748:	b084      	sub	sp, #16
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6a1b      	ldr	r3, [r3, #32]
 8012752:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	7a5b      	ldrb	r3, [r3, #9]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d007      	beq.n	801276c <dhcp_t1_timeout+0x26>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	7a5b      	ldrb	r3, [r3, #9]
 8012760:	2b0a      	cmp	r3, #10
 8012762:	d003      	beq.n	801276c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012768:	2b05      	cmp	r3, #5
 801276a:	d116      	bne.n	801279a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 fb33 	bl	8012dd8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	8b5b      	ldrh	r3, [r3, #26]
 8012776:	461a      	mov	r2, r3
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	8c1b      	ldrh	r3, [r3, #32]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	2b01      	cmp	r3, #1
 8012780:	dd0b      	ble.n	801279a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	8b5b      	ldrh	r3, [r3, #26]
 8012786:	461a      	mov	r2, r3
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	8c1b      	ldrh	r3, [r3, #32]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	0fda      	lsrs	r2, r3, #31
 8012790:	4413      	add	r3, r2
 8012792:	105b      	asrs	r3, r3, #1
 8012794:	b29a      	uxth	r2, r3
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801279a:	bf00      	nop
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b084      	sub	sp, #16
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	7a5b      	ldrb	r3, [r3, #9]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d00b      	beq.n	80127d0 <dhcp_t2_timeout+0x2e>
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	7a5b      	ldrb	r3, [r3, #9]
 80127bc:	2b0a      	cmp	r3, #10
 80127be:	d007      	beq.n	80127d0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80127c4:	2b05      	cmp	r3, #5
 80127c6:	d003      	beq.n	80127d0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	7a5b      	ldrb	r3, [r3, #9]
 80127cc:	2b04      	cmp	r3, #4
 80127ce:	d116      	bne.n	80127fe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f000 fb87 	bl	8012ee4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80127da:	461a      	mov	r2, r3
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	8c1b      	ldrh	r3, [r3, #32]
 80127e0:	1ad3      	subs	r3, r2, r3
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	dd0b      	ble.n	80127fe <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80127ea:	461a      	mov	r2, r3
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	8c1b      	ldrh	r3, [r3, #32]
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	0fda      	lsrs	r2, r3, #31
 80127f4:	4413      	add	r3, r2
 80127f6:	105b      	asrs	r3, r3, #1
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	83da      	strh	r2, [r3, #30]
    }
  }
}
 80127fe:	bf00      	nop
 8012800:	3710      	adds	r7, #16
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
	...

08012808 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6a1b      	ldr	r3, [r3, #32]
 8012814:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2200      	movs	r2, #0
 801281a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	2200      	movs	r2, #0
 8012820:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012822:	4b27      	ldr	r3, [pc, #156]	; (80128c0 <dhcp_handle_ack+0xb8>)
 8012824:	78db      	ldrb	r3, [r3, #3]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d003      	beq.n	8012832 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801282a:	4b26      	ldr	r3, [pc, #152]	; (80128c4 <dhcp_handle_ack+0xbc>)
 801282c:	68da      	ldr	r2, [r3, #12]
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012832:	4b23      	ldr	r3, [pc, #140]	; (80128c0 <dhcp_handle_ack+0xb8>)
 8012834:	791b      	ldrb	r3, [r3, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d004      	beq.n	8012844 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801283a:	4b22      	ldr	r3, [pc, #136]	; (80128c4 <dhcp_handle_ack+0xbc>)
 801283c:	691a      	ldr	r2, [r3, #16]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	639a      	str	r2, [r3, #56]	; 0x38
 8012842:	e004      	b.n	801284e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012848:	085a      	lsrs	r2, r3, #1
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801284e:	4b1c      	ldr	r3, [pc, #112]	; (80128c0 <dhcp_handle_ack+0xb8>)
 8012850:	795b      	ldrb	r3, [r3, #5]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d004      	beq.n	8012860 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012856:	4b1b      	ldr	r3, [pc, #108]	; (80128c4 <dhcp_handle_ack+0xbc>)
 8012858:	695a      	ldr	r2, [r3, #20]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	63da      	str	r2, [r3, #60]	; 0x3c
 801285e:	e007      	b.n	8012870 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012864:	4613      	mov	r3, r2
 8012866:	00db      	lsls	r3, r3, #3
 8012868:	1a9b      	subs	r3, r3, r2
 801286a:	08da      	lsrs	r2, r3, #3
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	691a      	ldr	r2, [r3, #16]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801287a:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <dhcp_handle_ack+0xb8>)
 801287c:	799b      	ldrb	r3, [r3, #6]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00b      	beq.n	801289a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012882:	4b10      	ldr	r3, [pc, #64]	; (80128c4 <dhcp_handle_ack+0xbc>)
 8012884:	699b      	ldr	r3, [r3, #24]
 8012886:	4618      	mov	r0, r3
 8012888:	f7f8 f93e 	bl	800ab08 <lwip_htonl>
 801288c:	4602      	mov	r2, r0
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2201      	movs	r2, #1
 8012896:	72da      	strb	r2, [r3, #11]
 8012898:	e002      	b.n	80128a0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2200      	movs	r2, #0
 801289e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80128a0:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <dhcp_handle_ack+0xb8>)
 80128a2:	79db      	ldrb	r3, [r3, #7]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d007      	beq.n	80128b8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80128a8:	4b06      	ldr	r3, [pc, #24]	; (80128c4 <dhcp_handle_ack+0xbc>)
 80128aa:	69db      	ldr	r3, [r3, #28]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f8 f92b 	bl	800ab08 <lwip_htonl>
 80128b2:	4602      	mov	r2, r0
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80128b8:	bf00      	nop
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	2000fadc 	.word	0x2000fadc
 80128c4:	2000fae4 	.word	0x2000fae4

080128c8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d109      	bne.n	80128ea <dhcp_start+0x22>
 80128d6:	4b3c      	ldr	r3, [pc, #240]	; (80129c8 <dhcp_start+0x100>)
 80128d8:	f240 22d6 	movw	r2, #726	; 0x2d6
 80128dc:	493b      	ldr	r1, [pc, #236]	; (80129cc <dhcp_start+0x104>)
 80128de:	483c      	ldr	r0, [pc, #240]	; (80129d0 <dhcp_start+0x108>)
 80128e0:	f003 ffec 	bl	80168bc <iprintf>
 80128e4:	f06f 030f 	mvn.w	r3, #15
 80128e8:	e069      	b.n	80129be <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80128f0:	f003 0301 	and.w	r3, r3, #1
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d109      	bne.n	801290c <dhcp_start+0x44>
 80128f8:	4b33      	ldr	r3, [pc, #204]	; (80129c8 <dhcp_start+0x100>)
 80128fa:	f240 22d7 	movw	r2, #727	; 0x2d7
 80128fe:	4935      	ldr	r1, [pc, #212]	; (80129d4 <dhcp_start+0x10c>)
 8012900:	4833      	ldr	r0, [pc, #204]	; (80129d0 <dhcp_start+0x108>)
 8012902:	f003 ffdb 	bl	80168bc <iprintf>
 8012906:	f06f 030f 	mvn.w	r3, #15
 801290a:	e058      	b.n	80129be <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6a1b      	ldr	r3, [r3, #32]
 8012910:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012916:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801291a:	d202      	bcs.n	8012922 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012920:	e04d      	b.n	80129be <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10d      	bne.n	8012944 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012928:	2040      	movs	r0, #64	; 0x40
 801292a:	f7f8 fb93 	bl	800b054 <mem_malloc>
 801292e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d102      	bne.n	801293c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801293a:	e040      	b.n	80129be <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	621a      	str	r2, [r3, #32]
 8012942:	e01b      	b.n	801297c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d006      	beq.n	801295a <dhcp_start+0x92>
 801294c:	4b1e      	ldr	r3, [pc, #120]	; (80129c8 <dhcp_start+0x100>)
 801294e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8012952:	4921      	ldr	r1, [pc, #132]	; (80129d8 <dhcp_start+0x110>)
 8012954:	481e      	ldr	r0, [pc, #120]	; (80129d0 <dhcp_start+0x108>)
 8012956:	f003 ffb1 	bl	80168bc <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d006      	beq.n	8012970 <dhcp_start+0xa8>
 8012962:	4b19      	ldr	r3, [pc, #100]	; (80129c8 <dhcp_start+0x100>)
 8012964:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012968:	491c      	ldr	r1, [pc, #112]	; (80129dc <dhcp_start+0x114>)
 801296a:	4819      	ldr	r0, [pc, #100]	; (80129d0 <dhcp_start+0x108>)
 801296c:	f003 ffa6 	bl	80168bc <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	7a1b      	ldrb	r3, [r3, #8]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d001      	beq.n	801297c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012978:	f7ff fcd4 	bl	8012324 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801297c:	2240      	movs	r2, #64	; 0x40
 801297e:	2100      	movs	r1, #0
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f003 ff93 	bl	80168ac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012986:	f7ff fc7b 	bl	8012280 <dhcp_inc_pcb_refcount>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <dhcp_start+0xce>
    return ERR_MEM;
 8012990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012994:	e013      	b.n	80129be <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2201      	movs	r2, #1
 801299a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f8b5 	bl	8012b0c <dhcp_discover>
 80129a2:	4603      	mov	r3, r0
 80129a4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80129a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d005      	beq.n	80129ba <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fc3a 	bl	8013228 <dhcp_stop>
    return ERR_MEM;
 80129b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129b8:	e001      	b.n	80129be <dhcp_start+0xf6>
  }
  return result;
 80129ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	08019f28 	.word	0x08019f28
 80129cc:	08019fd4 	.word	0x08019fd4
 80129d0:	08019f88 	.word	0x08019f88
 80129d4:	0801a018 	.word	0x0801a018
 80129d8:	0801a03c 	.word	0x0801a03c
 80129dc:	0801a054 	.word	0x0801a054

080129e0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d107      	bne.n	8012a00 <dhcp_arp_reply+0x20>
 80129f0:	4b0e      	ldr	r3, [pc, #56]	; (8012a2c <dhcp_arp_reply+0x4c>)
 80129f2:	f240 327b 	movw	r2, #891	; 0x37b
 80129f6:	490e      	ldr	r1, [pc, #56]	; (8012a30 <dhcp_arp_reply+0x50>)
 80129f8:	480e      	ldr	r0, [pc, #56]	; (8012a34 <dhcp_arp_reply+0x54>)
 80129fa:	f003 ff5f 	bl	80168bc <iprintf>
 80129fe:	e012      	b.n	8012a26 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6a1b      	ldr	r3, [r3, #32]
 8012a04:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d00c      	beq.n	8012a26 <dhcp_arp_reply+0x46>
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	7a5b      	ldrb	r3, [r3, #9]
 8012a10:	2b08      	cmp	r3, #8
 8012a12:	d108      	bne.n	8012a26 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a1c:	429a      	cmp	r2, r3
 8012a1e:	d102      	bne.n	8012a26 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f809 	bl	8012a38 <dhcp_decline>
    }
  }
}
 8012a26:	3710      	adds	r7, #16
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	08019f28 	.word	0x08019f28
 8012a30:	08019fd4 	.word	0x08019fd4
 8012a34:	08019f88 	.word	0x08019f88

08012a38 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b086      	sub	sp, #24
 8012a3c:	af02      	add	r7, sp, #8
 8012a3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a1b      	ldr	r3, [r3, #32]
 8012a44:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012a4a:	210c      	movs	r1, #12
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	f000 fc23 	bl	8013298 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8012a52:	2204      	movs	r2, #4
 8012a54:	68f9      	ldr	r1, [r7, #12]
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f001 f8a4 	bl	8013ba4 <dhcp_create_msg>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8012a60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d12a      	bne.n	8012abe <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012a68:	2204      	movs	r2, #4
 8012a6a:	2132      	movs	r1, #50	; 0x32
 8012a6c:	68f8      	ldr	r0, [r7, #12]
 8012a6e:	f000 fc2d 	bl	80132cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f8 f846 	bl	800ab08 <lwip_htonl>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	4619      	mov	r1, r3
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 fcbf 	bl	8013404 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f001 fa30 	bl	8013eec <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	68da      	ldr	r2, [r3, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	8a9b      	ldrh	r3, [r3, #20]
 8012a94:	33f0      	adds	r3, #240	; 0xf0
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4619      	mov	r1, r3
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	f7f9 f88a 	bl	800bbb4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012aa0:	4b16      	ldr	r3, [pc, #88]	; (8012afc <dhcp_decline+0xc4>)
 8012aa2:	6818      	ldr	r0, [r3, #0]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	68d9      	ldr	r1, [r3, #12]
 8012aa8:	4b15      	ldr	r3, [pc, #84]	; (8012b00 <dhcp_decline+0xc8>)
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	2343      	movs	r3, #67	; 0x43
 8012ab2:	4a14      	ldr	r2, [pc, #80]	; (8012b04 <dhcp_decline+0xcc>)
 8012ab4:	f7ff f9ec 	bl	8011e90 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f001 f9d5 	bl	8013e68 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	7a9b      	ldrb	r3, [r3, #10]
 8012ac2:	2bff      	cmp	r3, #255	; 0xff
 8012ac4:	d005      	beq.n	8012ad2 <dhcp_decline+0x9a>
    dhcp->tries++;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	7a9b      	ldrb	r3, [r3, #10]
 8012aca:	3301      	adds	r3, #1
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8012ad2:	f242 7310 	movw	r3, #10000	; 0x2710
 8012ad6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012ad8:	893b      	ldrh	r3, [r7, #8]
 8012ada:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ade:	4a0a      	ldr	r2, [pc, #40]	; (8012b08 <dhcp_decline+0xd0>)
 8012ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8012ae4:	1152      	asrs	r2, r2, #5
 8012ae6:	17db      	asrs	r3, r3, #31
 8012ae8:	1ad3      	subs	r3, r2, r3
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012af0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3710      	adds	r7, #16
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	20008c80 	.word	0x20008c80
 8012b00:	08025fb0 	.word	0x08025fb0
 8012b04:	08025fb4 	.word	0x08025fb4
 8012b08:	10624dd3 	.word	0x10624dd3

08012b0c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b088      	sub	sp, #32
 8012b10:	af02      	add	r7, sp, #8
 8012b12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6a1b      	ldr	r3, [r3, #32]
 8012b18:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	2200      	movs	r2, #0
 8012b22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012b24:	2106      	movs	r1, #6
 8012b26:	6938      	ldr	r0, [r7, #16]
 8012b28:	f000 fbb6 	bl	8013298 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	6939      	ldr	r1, [r7, #16]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f001 f837 	bl	8013ba4 <dhcp_create_msg>
 8012b36:	4603      	mov	r3, r0
 8012b38:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d13b      	bne.n	8012bba <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b42:	2202      	movs	r2, #2
 8012b44:	2139      	movs	r1, #57	; 0x39
 8012b46:	6938      	ldr	r0, [r7, #16]
 8012b48:	f000 fbc0 	bl	80132cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012b50:	4619      	mov	r1, r3
 8012b52:	6938      	ldr	r0, [r7, #16]
 8012b54:	f000 fc1c 	bl	8013390 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b58:	2203      	movs	r2, #3
 8012b5a:	2137      	movs	r1, #55	; 0x37
 8012b5c:	6938      	ldr	r0, [r7, #16]
 8012b5e:	f000 fbb5 	bl	80132cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b62:	2300      	movs	r3, #0
 8012b64:	75fb      	strb	r3, [r7, #23]
 8012b66:	e009      	b.n	8012b7c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012b68:	7dfb      	ldrb	r3, [r7, #23]
 8012b6a:	4a29      	ldr	r2, [pc, #164]	; (8012c10 <dhcp_discover+0x104>)
 8012b6c:	5cd3      	ldrb	r3, [r2, r3]
 8012b6e:	4619      	mov	r1, r3
 8012b70:	6938      	ldr	r0, [r7, #16]
 8012b72:	f000 fbe5 	bl	8013340 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b76:	7dfb      	ldrb	r3, [r7, #23]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	75fb      	strb	r3, [r7, #23]
 8012b7c:	7dfb      	ldrb	r3, [r7, #23]
 8012b7e:	2b02      	cmp	r3, #2
 8012b80:	d9f2      	bls.n	8012b68 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8012b82:	6938      	ldr	r0, [r7, #16]
 8012b84:	f001 f9b2 	bl	8013eec <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	68da      	ldr	r2, [r3, #12]
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	8a9b      	ldrh	r3, [r3, #20]
 8012b90:	33f0      	adds	r3, #240	; 0xf0
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	4619      	mov	r1, r3
 8012b96:	4610      	mov	r0, r2
 8012b98:	f7f9 f80c 	bl	800bbb4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8012b9c:	4b1d      	ldr	r3, [pc, #116]	; (8012c14 <dhcp_discover+0x108>)
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	68d9      	ldr	r1, [r3, #12]
 8012ba4:	4b1c      	ldr	r3, [pc, #112]	; (8012c18 <dhcp_discover+0x10c>)
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	2343      	movs	r3, #67	; 0x43
 8012bae:	4a1b      	ldr	r2, [pc, #108]	; (8012c1c <dhcp_discover+0x110>)
 8012bb0:	f7ff f96e 	bl	8011e90 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8012bb4:	6938      	ldr	r0, [r7, #16]
 8012bb6:	f001 f957 	bl	8013e68 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	7a9b      	ldrb	r3, [r3, #10]
 8012bbe:	2bff      	cmp	r3, #255	; 0xff
 8012bc0:	d005      	beq.n	8012bce <dhcp_discover+0xc2>
    dhcp->tries++;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	7a9b      	ldrb	r3, [r3, #10]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	b2da      	uxtb	r2, r3
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	7a9b      	ldrb	r3, [r3, #10]
 8012bd2:	2b05      	cmp	r3, #5
 8012bd4:	d807      	bhi.n	8012be6 <dhcp_discover+0xda>
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	7a9b      	ldrb	r3, [r3, #10]
 8012bda:	461a      	mov	r2, r3
 8012bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012be0:	4093      	lsls	r3, r2
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	e001      	b.n	8012bea <dhcp_discover+0xde>
 8012be6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012bea:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012bec:	89bb      	ldrh	r3, [r7, #12]
 8012bee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bf2:	4a0b      	ldr	r2, [pc, #44]	; (8012c20 <dhcp_discover+0x114>)
 8012bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8012bf8:	1152      	asrs	r2, r2, #5
 8012bfa:	17db      	asrs	r3, r3, #31
 8012bfc:	1ad3      	subs	r3, r2, r3
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3718      	adds	r7, #24
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	2000001c 	.word	0x2000001c
 8012c14:	20008c80 	.word	0x20008c80
 8012c18:	08025fb0 	.word	0x08025fb0
 8012c1c:	08025fb4 	.word	0x08025fb4
 8012c20:	10624dd3 	.word	0x10624dd3

08012c24 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b088      	sub	sp, #32
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d107      	bne.n	8012c42 <dhcp_bind+0x1e>
 8012c32:	4b64      	ldr	r3, [pc, #400]	; (8012dc4 <dhcp_bind+0x1a0>)
 8012c34:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8012c38:	4963      	ldr	r1, [pc, #396]	; (8012dc8 <dhcp_bind+0x1a4>)
 8012c3a:	4864      	ldr	r0, [pc, #400]	; (8012dcc <dhcp_bind+0x1a8>)
 8012c3c:	f003 fe3e 	bl	80168bc <iprintf>
 8012c40:	e0bc      	b.n	8012dbc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6a1b      	ldr	r3, [r3, #32]
 8012c46:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d107      	bne.n	8012c5e <dhcp_bind+0x3a>
 8012c4e:	4b5d      	ldr	r3, [pc, #372]	; (8012dc4 <dhcp_bind+0x1a0>)
 8012c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012c54:	495e      	ldr	r1, [pc, #376]	; (8012dd0 <dhcp_bind+0x1ac>)
 8012c56:	485d      	ldr	r0, [pc, #372]	; (8012dcc <dhcp_bind+0x1a8>)
 8012c58:	f003 fe30 	bl	80168bc <iprintf>
 8012c5c:	e0ae      	b.n	8012dbc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	2200      	movs	r2, #0
 8012c62:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c6c:	d019      	beq.n	8012ca2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c72:	331e      	adds	r3, #30
 8012c74:	4a57      	ldr	r2, [pc, #348]	; (8012dd4 <dhcp_bind+0x1b0>)
 8012c76:	fba2 2303 	umull	r2, r3, r2, r3
 8012c7a:	095b      	lsrs	r3, r3, #5
 8012c7c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c84:	d302      	bcc.n	8012c8c <dhcp_bind+0x68>
       timeout = 0xffff;
 8012c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c8a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	b29a      	uxth	r2, r3
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d102      	bne.n	8012ca2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012ca2:	69bb      	ldr	r3, [r7, #24]
 8012ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012caa:	d01d      	beq.n	8012ce8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cb0:	331e      	adds	r3, #30
 8012cb2:	4a48      	ldr	r2, [pc, #288]	; (8012dd4 <dhcp_bind+0x1b0>)
 8012cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8012cb8:	095b      	lsrs	r3, r3, #5
 8012cba:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cc2:	d302      	bcc.n	8012cca <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cc8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	8b1b      	ldrh	r3, [r3, #24]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d102      	bne.n	8012ce0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012cda:	69bb      	ldr	r3, [r7, #24]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	8b1a      	ldrh	r2, [r3, #24]
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012ce8:	69bb      	ldr	r3, [r7, #24]
 8012cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cf0:	d01d      	beq.n	8012d2e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012cf2:	69bb      	ldr	r3, [r7, #24]
 8012cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cf6:	331e      	adds	r3, #30
 8012cf8:	4a36      	ldr	r2, [pc, #216]	; (8012dd4 <dhcp_bind+0x1b0>)
 8012cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8012cfe:	095b      	lsrs	r3, r3, #5
 8012d00:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d08:	d302      	bcc.n	8012d10 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d0e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8012d18:	69bb      	ldr	r3, [r7, #24]
 8012d1a:	8b5b      	ldrh	r3, [r3, #26]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d102      	bne.n	8012d26 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	2201      	movs	r2, #1
 8012d24:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	8b5a      	ldrh	r2, [r3, #26]
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	8b1a      	ldrh	r2, [r3, #24]
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	8b5b      	ldrh	r3, [r3, #26]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d306      	bcc.n	8012d48 <dhcp_bind+0x124>
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	8b5b      	ldrh	r3, [r3, #26]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d002      	beq.n	8012d48 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	2200      	movs	r2, #0
 8012d46:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	7adb      	ldrb	r3, [r3, #11]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d003      	beq.n	8012d58 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d54:	613b      	str	r3, [r7, #16]
 8012d56:	e014      	b.n	8012d82 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	3328      	adds	r3, #40	; 0x28
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	db02      	blt.n	8012d6e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012d68:	23ff      	movs	r3, #255	; 0xff
 8012d6a:	613b      	str	r3, [r7, #16]
 8012d6c:	e009      	b.n	8012d82 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012d6e:	7dfb      	ldrb	r3, [r7, #23]
 8012d70:	2bbf      	cmp	r3, #191	; 0xbf
 8012d72:	d903      	bls.n	8012d7c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012d74:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012d78:	613b      	str	r3, [r7, #16]
 8012d7a:	e002      	b.n	8012d82 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d80:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d86:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d108      	bne.n	8012da0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	4013      	ands	r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012d9e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012da0:	210a      	movs	r1, #10
 8012da2:	69b8      	ldr	r0, [r7, #24]
 8012da4:	f000 fa78 	bl	8013298 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012dae:	f107 030c 	add.w	r3, r7, #12
 8012db2:	f107 0210 	add.w	r2, r7, #16
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7f8 fb9c 	bl	800b4f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012dbc:	3720      	adds	r7, #32
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}
 8012dc2:	bf00      	nop
 8012dc4:	08019f28 	.word	0x08019f28
 8012dc8:	0801a068 	.word	0x0801a068
 8012dcc:	08019f88 	.word	0x08019f88
 8012dd0:	0801a084 	.word	0x0801a084
 8012dd4:	88888889 	.word	0x88888889

08012dd8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	af02      	add	r7, sp, #8
 8012dde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6a1b      	ldr	r3, [r3, #32]
 8012de4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012de6:	2105      	movs	r1, #5
 8012de8:	6938      	ldr	r0, [r7, #16]
 8012dea:	f000 fa55 	bl	8013298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012dee:	2203      	movs	r2, #3
 8012df0:	6939      	ldr	r1, [r7, #16]
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 fed6 	bl	8013ba4 <dhcp_create_msg>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d13b      	bne.n	8012e7c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012e04:	2202      	movs	r2, #2
 8012e06:	2139      	movs	r1, #57	; 0x39
 8012e08:	6938      	ldr	r0, [r7, #16]
 8012e0a:	f000 fa5f 	bl	80132cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012e12:	4619      	mov	r1, r3
 8012e14:	6938      	ldr	r0, [r7, #16]
 8012e16:	f000 fabb 	bl	8013390 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e1a:	2203      	movs	r2, #3
 8012e1c:	2137      	movs	r1, #55	; 0x37
 8012e1e:	6938      	ldr	r0, [r7, #16]
 8012e20:	f000 fa54 	bl	80132cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e24:	2300      	movs	r3, #0
 8012e26:	75fb      	strb	r3, [r7, #23]
 8012e28:	e009      	b.n	8012e3e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	4a2a      	ldr	r2, [pc, #168]	; (8012ed8 <dhcp_renew+0x100>)
 8012e2e:	5cd3      	ldrb	r3, [r2, r3]
 8012e30:	4619      	mov	r1, r3
 8012e32:	6938      	ldr	r0, [r7, #16]
 8012e34:	f000 fa84 	bl	8013340 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e38:	7dfb      	ldrb	r3, [r7, #23]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	75fb      	strb	r3, [r7, #23]
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	2b02      	cmp	r3, #2
 8012e42:	d9f2      	bls.n	8012e2a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8012e44:	6938      	ldr	r0, [r7, #16]
 8012e46:	f001 f851 	bl	8013eec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	8a9b      	ldrh	r3, [r3, #20]
 8012e52:	33f0      	adds	r3, #240	; 0xf0
 8012e54:	b29b      	uxth	r3, r3
 8012e56:	4619      	mov	r1, r3
 8012e58:	4610      	mov	r0, r2
 8012e5a:	f7f8 feab 	bl	800bbb4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8012e5e:	4b1f      	ldr	r3, [pc, #124]	; (8012edc <dhcp_renew+0x104>)
 8012e60:	6818      	ldr	r0, [r3, #0]
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	68d9      	ldr	r1, [r3, #12]
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	2343      	movs	r3, #67	; 0x43
 8012e72:	f7fe ffcf 	bl	8011e14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012e76:	6938      	ldr	r0, [r7, #16]
 8012e78:	f000 fff6 	bl	8013e68 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	7a9b      	ldrb	r3, [r3, #10]
 8012e80:	2bff      	cmp	r3, #255	; 0xff
 8012e82:	d005      	beq.n	8012e90 <dhcp_renew+0xb8>
    dhcp->tries++;
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	7a9b      	ldrb	r3, [r3, #10]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	7a9b      	ldrb	r3, [r3, #10]
 8012e94:	2b09      	cmp	r3, #9
 8012e96:	d80a      	bhi.n	8012eae <dhcp_renew+0xd6>
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	7a9b      	ldrb	r3, [r3, #10]
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	0152      	lsls	r2, r2, #5
 8012ea2:	1ad2      	subs	r2, r2, r3
 8012ea4:	0092      	lsls	r2, r2, #2
 8012ea6:	4413      	add	r3, r2
 8012ea8:	011b      	lsls	r3, r3, #4
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	e001      	b.n	8012eb2 <dhcp_renew+0xda>
 8012eae:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012eb2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012eb4:	89bb      	ldrh	r3, [r7, #12]
 8012eb6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012eba:	4a09      	ldr	r2, [pc, #36]	; (8012ee0 <dhcp_renew+0x108>)
 8012ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8012ec0:	1152      	asrs	r2, r2, #5
 8012ec2:	17db      	asrs	r3, r3, #31
 8012ec4:	1ad3      	subs	r3, r2, r3
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3718      	adds	r7, #24
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	2000001c 	.word	0x2000001c
 8012edc:	20008c80 	.word	0x20008c80
 8012ee0:	10624dd3 	.word	0x10624dd3

08012ee4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b088      	sub	sp, #32
 8012ee8:	af02      	add	r7, sp, #8
 8012eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6a1b      	ldr	r3, [r3, #32]
 8012ef0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012ef2:	2104      	movs	r1, #4
 8012ef4:	6938      	ldr	r0, [r7, #16]
 8012ef6:	f000 f9cf 	bl	8013298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012efa:	2203      	movs	r2, #3
 8012efc:	6939      	ldr	r1, [r7, #16]
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 fe50 	bl	8013ba4 <dhcp_create_msg>
 8012f04:	4603      	mov	r3, r0
 8012f06:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d139      	bne.n	8012f84 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f10:	2202      	movs	r2, #2
 8012f12:	2139      	movs	r1, #57	; 0x39
 8012f14:	6938      	ldr	r0, [r7, #16]
 8012f16:	f000 f9d9 	bl	80132cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012f1e:	4619      	mov	r1, r3
 8012f20:	6938      	ldr	r0, [r7, #16]
 8012f22:	f000 fa35 	bl	8013390 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f26:	2203      	movs	r2, #3
 8012f28:	2137      	movs	r1, #55	; 0x37
 8012f2a:	6938      	ldr	r0, [r7, #16]
 8012f2c:	f000 f9ce 	bl	80132cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f30:	2300      	movs	r3, #0
 8012f32:	75fb      	strb	r3, [r7, #23]
 8012f34:	e009      	b.n	8012f4a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012f36:	7dfb      	ldrb	r3, [r7, #23]
 8012f38:	4a29      	ldr	r2, [pc, #164]	; (8012fe0 <dhcp_rebind+0xfc>)
 8012f3a:	5cd3      	ldrb	r3, [r2, r3]
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6938      	ldr	r0, [r7, #16]
 8012f40:	f000 f9fe 	bl	8013340 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	3301      	adds	r3, #1
 8012f48:	75fb      	strb	r3, [r7, #23]
 8012f4a:	7dfb      	ldrb	r3, [r7, #23]
 8012f4c:	2b02      	cmp	r3, #2
 8012f4e:	d9f2      	bls.n	8012f36 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8012f50:	6938      	ldr	r0, [r7, #16]
 8012f52:	f000 ffcb 	bl	8013eec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	68da      	ldr	r2, [r3, #12]
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	8a9b      	ldrh	r3, [r3, #20]
 8012f5e:	33f0      	adds	r3, #240	; 0xf0
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	4619      	mov	r1, r3
 8012f64:	4610      	mov	r0, r2
 8012f66:	f7f8 fe25 	bl	800bbb4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8012f6a:	4b1e      	ldr	r3, [pc, #120]	; (8012fe4 <dhcp_rebind+0x100>)
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	68d9      	ldr	r1, [r3, #12]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	2343      	movs	r3, #67	; 0x43
 8012f78:	4a1b      	ldr	r2, [pc, #108]	; (8012fe8 <dhcp_rebind+0x104>)
 8012f7a:	f7fe ff4b 	bl	8011e14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8012f7e:	6938      	ldr	r0, [r7, #16]
 8012f80:	f000 ff72 	bl	8013e68 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	7a9b      	ldrb	r3, [r3, #10]
 8012f88:	2bff      	cmp	r3, #255	; 0xff
 8012f8a:	d005      	beq.n	8012f98 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	7a9b      	ldrb	r3, [r3, #10]
 8012f90:	3301      	adds	r3, #1
 8012f92:	b2da      	uxtb	r2, r3
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	7a9b      	ldrb	r3, [r3, #10]
 8012f9c:	2b09      	cmp	r3, #9
 8012f9e:	d80a      	bhi.n	8012fb6 <dhcp_rebind+0xd2>
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	7a9b      	ldrb	r3, [r3, #10]
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	0152      	lsls	r2, r2, #5
 8012faa:	1ad2      	subs	r2, r2, r3
 8012fac:	0092      	lsls	r2, r2, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	00db      	lsls	r3, r3, #3
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	e001      	b.n	8012fba <dhcp_rebind+0xd6>
 8012fb6:	f242 7310 	movw	r3, #10000	; 0x2710
 8012fba:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012fbc:	89bb      	ldrh	r3, [r7, #12]
 8012fbe:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012fc2:	4a0a      	ldr	r2, [pc, #40]	; (8012fec <dhcp_rebind+0x108>)
 8012fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8012fc8:	1152      	asrs	r2, r2, #5
 8012fca:	17db      	asrs	r3, r3, #31
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3718      	adds	r7, #24
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	2000001c 	.word	0x2000001c
 8012fe4:	20008c80 	.word	0x20008c80
 8012fe8:	08025fb4 	.word	0x08025fb4
 8012fec:	10624dd3 	.word	0x10624dd3

08012ff0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b088      	sub	sp, #32
 8012ff4:	af02      	add	r7, sp, #8
 8012ff6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6a1b      	ldr	r3, [r3, #32]
 8012ffc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012ffe:	2103      	movs	r1, #3
 8013000:	6938      	ldr	r0, [r7, #16]
 8013002:	f000 f949 	bl	8013298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013006:	2203      	movs	r2, #3
 8013008:	6939      	ldr	r1, [r7, #16]
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 fdca 	bl	8013ba4 <dhcp_create_msg>
 8013010:	4603      	mov	r3, r0
 8013012:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d147      	bne.n	80130ac <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801301c:	2202      	movs	r2, #2
 801301e:	2139      	movs	r1, #57	; 0x39
 8013020:	6938      	ldr	r0, [r7, #16]
 8013022:	f000 f953 	bl	80132cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013026:	f44f 7110 	mov.w	r1, #576	; 0x240
 801302a:	6938      	ldr	r0, [r7, #16]
 801302c:	f000 f9b0 	bl	8013390 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013030:	2204      	movs	r2, #4
 8013032:	2132      	movs	r1, #50	; 0x32
 8013034:	6938      	ldr	r0, [r7, #16]
 8013036:	f000 f949 	bl	80132cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801303e:	4618      	mov	r0, r3
 8013040:	f7f7 fd62 	bl	800ab08 <lwip_htonl>
 8013044:	4603      	mov	r3, r0
 8013046:	4619      	mov	r1, r3
 8013048:	6938      	ldr	r0, [r7, #16]
 801304a:	f000 f9db 	bl	8013404 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801304e:	2203      	movs	r2, #3
 8013050:	2137      	movs	r1, #55	; 0x37
 8013052:	6938      	ldr	r0, [r7, #16]
 8013054:	f000 f93a 	bl	80132cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013058:	2300      	movs	r3, #0
 801305a:	75fb      	strb	r3, [r7, #23]
 801305c:	e009      	b.n	8013072 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	4a29      	ldr	r2, [pc, #164]	; (8013108 <dhcp_reboot+0x118>)
 8013062:	5cd3      	ldrb	r3, [r2, r3]
 8013064:	4619      	mov	r1, r3
 8013066:	6938      	ldr	r0, [r7, #16]
 8013068:	f000 f96a 	bl	8013340 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801306c:	7dfb      	ldrb	r3, [r7, #23]
 801306e:	3301      	adds	r3, #1
 8013070:	75fb      	strb	r3, [r7, #23]
 8013072:	7dfb      	ldrb	r3, [r7, #23]
 8013074:	2b02      	cmp	r3, #2
 8013076:	d9f2      	bls.n	801305e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8013078:	6938      	ldr	r0, [r7, #16]
 801307a:	f000 ff37 	bl	8013eec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	68da      	ldr	r2, [r3, #12]
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	8a9b      	ldrh	r3, [r3, #20]
 8013086:	33f0      	adds	r3, #240	; 0xf0
 8013088:	b29b      	uxth	r3, r3
 801308a:	4619      	mov	r1, r3
 801308c:	4610      	mov	r0, r2
 801308e:	f7f8 fd91 	bl	800bbb4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013092:	4b1e      	ldr	r3, [pc, #120]	; (801310c <dhcp_reboot+0x11c>)
 8013094:	6818      	ldr	r0, [r3, #0]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	68d9      	ldr	r1, [r3, #12]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	2343      	movs	r3, #67	; 0x43
 80130a0:	4a1b      	ldr	r2, [pc, #108]	; (8013110 <dhcp_reboot+0x120>)
 80130a2:	f7fe feb7 	bl	8011e14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80130a6:	6938      	ldr	r0, [r7, #16]
 80130a8:	f000 fede 	bl	8013e68 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	7a9b      	ldrb	r3, [r3, #10]
 80130b0:	2bff      	cmp	r3, #255	; 0xff
 80130b2:	d005      	beq.n	80130c0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	7a9b      	ldrb	r3, [r3, #10]
 80130b8:	3301      	adds	r3, #1
 80130ba:	b2da      	uxtb	r2, r3
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	7a9b      	ldrb	r3, [r3, #10]
 80130c4:	2b09      	cmp	r3, #9
 80130c6:	d80a      	bhi.n	80130de <dhcp_reboot+0xee>
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	7a9b      	ldrb	r3, [r3, #10]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	461a      	mov	r2, r3
 80130d0:	0152      	lsls	r2, r2, #5
 80130d2:	1ad2      	subs	r2, r2, r3
 80130d4:	0092      	lsls	r2, r2, #2
 80130d6:	4413      	add	r3, r2
 80130d8:	00db      	lsls	r3, r3, #3
 80130da:	b29b      	uxth	r3, r3
 80130dc:	e001      	b.n	80130e2 <dhcp_reboot+0xf2>
 80130de:	f242 7310 	movw	r3, #10000	; 0x2710
 80130e2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80130e4:	89bb      	ldrh	r3, [r7, #12]
 80130e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80130ea:	4a0a      	ldr	r2, [pc, #40]	; (8013114 <dhcp_reboot+0x124>)
 80130ec:	fb82 1203 	smull	r1, r2, r2, r3
 80130f0:	1152      	asrs	r2, r2, #5
 80130f2:	17db      	asrs	r3, r3, #31
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	b29a      	uxth	r2, r3
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80130fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013100:	4618      	mov	r0, r3
 8013102:	3718      	adds	r7, #24
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}
 8013108:	2000001c 	.word	0x2000001c
 801310c:	20008c80 	.word	0x20008c80
 8013110:	08025fb4 	.word	0x08025fb4
 8013114:	10624dd3 	.word	0x10624dd3

08013118 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b088      	sub	sp, #32
 801311c:	af02      	add	r7, sp, #8
 801311e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a1b      	ldr	r3, [r3, #32]
 8013124:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d102      	bne.n	8013132 <dhcp_release+0x1a>
    return ERR_ARG;
 801312c:	f06f 030f 	mvn.w	r3, #15
 8013130:	e072      	b.n	8013218 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013136:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f000 ff31 	bl	8013fa0 <dhcp_supplied_address>
 801313e:	4603      	mov	r3, r0
 8013140:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013142:	2100      	movs	r1, #0
 8013144:	6978      	ldr	r0, [r7, #20]
 8013146:	f000 f8a7 	bl	8013298 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	2200      	movs	r2, #0
 801314e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	2200      	movs	r2, #0
 8013154:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	2200      	movs	r2, #0
 801315a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	2200      	movs	r2, #0
 8013160:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	2200      	movs	r2, #0
 8013166:	63da      	str	r2, [r3, #60]	; 0x3c
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	639a      	str	r2, [r3, #56]	; 0x38
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	2200      	movs	r2, #0
 801317c:	845a      	strh	r2, [r3, #34]	; 0x22
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	841a      	strh	r2, [r3, #32]
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	8c1a      	ldrh	r2, [r3, #32]
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	83da      	strh	r2, [r3, #30]
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	8bda      	ldrh	r2, [r3, #30]
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8013196:	7cfb      	ldrb	r3, [r7, #19]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d101      	bne.n	80131a0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801319c:	2300      	movs	r3, #0
 801319e:	e03b      	b.n	8013218 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 80131a0:	2207      	movs	r2, #7
 80131a2:	6979      	ldr	r1, [r7, #20]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 fcfd 	bl	8013ba4 <dhcp_create_msg>
 80131aa:	4603      	mov	r3, r0
 80131ac:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 80131ae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d128      	bne.n	8013208 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80131b6:	2204      	movs	r2, #4
 80131b8:	2136      	movs	r1, #54	; 0x36
 80131ba:	6978      	ldr	r0, [r7, #20]
 80131bc:	f000 f886 	bl	80132cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7f7 fca0 	bl	800ab08 <lwip_htonl>
 80131c8:	4603      	mov	r3, r0
 80131ca:	4619      	mov	r1, r3
 80131cc:	6978      	ldr	r0, [r7, #20]
 80131ce:	f000 f919 	bl	8013404 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 80131d2:	6978      	ldr	r0, [r7, #20]
 80131d4:	f000 fe8a 	bl	8013eec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	68da      	ldr	r2, [r3, #12]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	8a9b      	ldrh	r3, [r3, #20]
 80131e0:	33f0      	adds	r3, #240	; 0xf0
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	4619      	mov	r1, r3
 80131e6:	4610      	mov	r0, r2
 80131e8:	f7f8 fce4 	bl	800bbb4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80131ec:	4b0c      	ldr	r3, [pc, #48]	; (8013220 <dhcp_release+0x108>)
 80131ee:	6818      	ldr	r0, [r3, #0]
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	68d9      	ldr	r1, [r3, #12]
 80131f4:	f107 020c 	add.w	r2, r7, #12
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	9300      	str	r3, [sp, #0]
 80131fc:	2343      	movs	r3, #67	; 0x43
 80131fe:	f7fe fe09 	bl	8011e14 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013202:	6978      	ldr	r0, [r7, #20]
 8013204:	f000 fe30 	bl	8013e68 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013208:	4b06      	ldr	r3, [pc, #24]	; (8013224 <dhcp_release+0x10c>)
 801320a:	4a06      	ldr	r2, [pc, #24]	; (8013224 <dhcp_release+0x10c>)
 801320c:	4905      	ldr	r1, [pc, #20]	; (8013224 <dhcp_release+0x10c>)
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7f8 f970 	bl	800b4f4 <netif_set_addr>

  return result;
 8013214:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8013218:	4618      	mov	r0, r3
 801321a:	3718      	adds	r7, #24
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	20008c80 	.word	0x20008c80
 8013224:	08025fb0 	.word	0x08025fb0

08013228 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d107      	bne.n	8013246 <dhcp_stop+0x1e>
 8013236:	4b14      	ldr	r3, [pc, #80]	; (8013288 <dhcp_stop+0x60>)
 8013238:	f240 5242 	movw	r2, #1346	; 0x542
 801323c:	4913      	ldr	r1, [pc, #76]	; (801328c <dhcp_stop+0x64>)
 801323e:	4814      	ldr	r0, [pc, #80]	; (8013290 <dhcp_stop+0x68>)
 8013240:	f003 fb3c 	bl	80168bc <iprintf>
 8013244:	e01d      	b.n	8013282 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6a1b      	ldr	r3, [r3, #32]
 801324a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d017      	beq.n	8013282 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d006      	beq.n	8013268 <dhcp_stop+0x40>
 801325a:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <dhcp_stop+0x60>)
 801325c:	f240 524f 	movw	r2, #1359	; 0x54f
 8013260:	490c      	ldr	r1, [pc, #48]	; (8013294 <dhcp_stop+0x6c>)
 8013262:	480b      	ldr	r0, [pc, #44]	; (8013290 <dhcp_stop+0x68>)
 8013264:	f003 fb2a 	bl	80168bc <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013268:	2100      	movs	r1, #0
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f000 f814 	bl	8013298 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	7a1b      	ldrb	r3, [r3, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d004      	beq.n	8013282 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013278:	f7ff f854 	bl	8012324 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2200      	movs	r2, #0
 8013280:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8013282:	3710      	adds	r7, #16
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	08019f28 	.word	0x08019f28
 801328c:	0801a09c 	.word	0x0801a09c
 8013290:	08019f88 	.word	0x08019f88
 8013294:	0801a054 	.word	0x0801a054

08013298 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
 80132a0:	460b      	mov	r3, r1
 80132a2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7a5b      	ldrb	r3, [r3, #9]
 80132a8:	78fa      	ldrb	r2, [r7, #3]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d008      	beq.n	80132c0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	78fa      	ldrb	r2, [r7, #3]
 80132b2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2200      	movs	r2, #0
 80132b8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	82da      	strh	r2, [r3, #22]
  }
}
 80132c0:	bf00      	nop
 80132c2:	370c      	adds	r7, #12
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr

080132cc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	460b      	mov	r3, r1
 80132d6:	70fb      	strb	r3, [r7, #3]
 80132d8:	4613      	mov	r3, r2
 80132da:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	8a9b      	ldrh	r3, [r3, #20]
 80132e0:	461a      	mov	r2, r3
 80132e2:	78bb      	ldrb	r3, [r7, #2]
 80132e4:	4413      	add	r3, r2
 80132e6:	3302      	adds	r3, #2
 80132e8:	2b44      	cmp	r3, #68	; 0x44
 80132ea:	d906      	bls.n	80132fa <dhcp_option+0x2e>
 80132ec:	4b11      	ldr	r3, [pc, #68]	; (8013334 <dhcp_option+0x68>)
 80132ee:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80132f2:	4911      	ldr	r1, [pc, #68]	; (8013338 <dhcp_option+0x6c>)
 80132f4:	4811      	ldr	r0, [pc, #68]	; (801333c <dhcp_option+0x70>)
 80132f6:	f003 fae1 	bl	80168bc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	691a      	ldr	r2, [r3, #16]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	8a9b      	ldrh	r3, [r3, #20]
 8013302:	1c59      	adds	r1, r3, #1
 8013304:	b288      	uxth	r0, r1
 8013306:	6879      	ldr	r1, [r7, #4]
 8013308:	8288      	strh	r0, [r1, #20]
 801330a:	4413      	add	r3, r2
 801330c:	78fa      	ldrb	r2, [r7, #3]
 801330e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	691a      	ldr	r2, [r3, #16]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	8a9b      	ldrh	r3, [r3, #20]
 801331a:	1c59      	adds	r1, r3, #1
 801331c:	b288      	uxth	r0, r1
 801331e:	6879      	ldr	r1, [r7, #4]
 8013320:	8288      	strh	r0, [r1, #20]
 8013322:	4413      	add	r3, r2
 8013324:	78ba      	ldrb	r2, [r7, #2]
 8013326:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801332a:	bf00      	nop
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	08019f28 	.word	0x08019f28
 8013338:	0801a0b8 	.word	0x0801a0b8
 801333c:	08019f88 	.word	0x08019f88

08013340 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	460b      	mov	r3, r1
 801334a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	8a9b      	ldrh	r3, [r3, #20]
 8013350:	2b43      	cmp	r3, #67	; 0x43
 8013352:	d906      	bls.n	8013362 <dhcp_option_byte+0x22>
 8013354:	4b0b      	ldr	r3, [pc, #44]	; (8013384 <dhcp_option_byte+0x44>)
 8013356:	f240 527b 	movw	r2, #1403	; 0x57b
 801335a:	490b      	ldr	r1, [pc, #44]	; (8013388 <dhcp_option_byte+0x48>)
 801335c:	480b      	ldr	r0, [pc, #44]	; (801338c <dhcp_option_byte+0x4c>)
 801335e:	f003 faad 	bl	80168bc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	691a      	ldr	r2, [r3, #16]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	8a9b      	ldrh	r3, [r3, #20]
 801336a:	1c59      	adds	r1, r3, #1
 801336c:	b288      	uxth	r0, r1
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	8288      	strh	r0, [r1, #20]
 8013372:	4413      	add	r3, r2
 8013374:	78fa      	ldrb	r2, [r7, #3]
 8013376:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801337a:	bf00      	nop
 801337c:	3708      	adds	r7, #8
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	08019f28 	.word	0x08019f28
 8013388:	0801a100 	.word	0x0801a100
 801338c:	08019f88 	.word	0x08019f88

08013390 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8013390:	b590      	push	{r4, r7, lr}
 8013392:	b083      	sub	sp, #12
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	460b      	mov	r3, r1
 801339a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	8a9b      	ldrh	r3, [r3, #20]
 80133a0:	3302      	adds	r3, #2
 80133a2:	2b44      	cmp	r3, #68	; 0x44
 80133a4:	d906      	bls.n	80133b4 <dhcp_option_short+0x24>
 80133a6:	4b14      	ldr	r3, [pc, #80]	; (80133f8 <dhcp_option_short+0x68>)
 80133a8:	f240 5282 	movw	r2, #1410	; 0x582
 80133ac:	4913      	ldr	r1, [pc, #76]	; (80133fc <dhcp_option_short+0x6c>)
 80133ae:	4814      	ldr	r0, [pc, #80]	; (8013400 <dhcp_option_short+0x70>)
 80133b0:	f003 fa84 	bl	80168bc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80133b4:	887b      	ldrh	r3, [r7, #2]
 80133b6:	0a1b      	lsrs	r3, r3, #8
 80133b8:	b298      	uxth	r0, r3
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	691a      	ldr	r2, [r3, #16]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	8a9b      	ldrh	r3, [r3, #20]
 80133c2:	1c59      	adds	r1, r3, #1
 80133c4:	b28c      	uxth	r4, r1
 80133c6:	6879      	ldr	r1, [r7, #4]
 80133c8:	828c      	strh	r4, [r1, #20]
 80133ca:	b2c1      	uxtb	r1, r0
 80133cc:	4413      	add	r3, r2
 80133ce:	460a      	mov	r2, r1
 80133d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	691a      	ldr	r2, [r3, #16]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	8a9b      	ldrh	r3, [r3, #20]
 80133dc:	1c59      	adds	r1, r3, #1
 80133de:	b288      	uxth	r0, r1
 80133e0:	6879      	ldr	r1, [r7, #4]
 80133e2:	8288      	strh	r0, [r1, #20]
 80133e4:	8879      	ldrh	r1, [r7, #2]
 80133e6:	b2c9      	uxtb	r1, r1
 80133e8:	4413      	add	r3, r2
 80133ea:	460a      	mov	r2, r1
 80133ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80133f0:	bf00      	nop
 80133f2:	370c      	adds	r7, #12
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd90      	pop	{r4, r7, pc}
 80133f8:	08019f28 	.word	0x08019f28
 80133fc:	0801a13c 	.word	0x0801a13c
 8013400:	08019f88 	.word	0x08019f88

08013404 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8013404:	b590      	push	{r4, r7, lr}
 8013406:	b083      	sub	sp, #12
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	8a9b      	ldrh	r3, [r3, #20]
 8013412:	3304      	adds	r3, #4
 8013414:	2b44      	cmp	r3, #68	; 0x44
 8013416:	d906      	bls.n	8013426 <dhcp_option_long+0x22>
 8013418:	4b22      	ldr	r3, [pc, #136]	; (80134a4 <dhcp_option_long+0xa0>)
 801341a:	f240 528a 	movw	r2, #1418	; 0x58a
 801341e:	4922      	ldr	r1, [pc, #136]	; (80134a8 <dhcp_option_long+0xa4>)
 8013420:	4822      	ldr	r0, [pc, #136]	; (80134ac <dhcp_option_long+0xa8>)
 8013422:	f003 fa4b 	bl	80168bc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	0e18      	lsrs	r0, r3, #24
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	691a      	ldr	r2, [r3, #16]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	8a9b      	ldrh	r3, [r3, #20]
 8013432:	1c59      	adds	r1, r3, #1
 8013434:	b28c      	uxth	r4, r1
 8013436:	6879      	ldr	r1, [r7, #4]
 8013438:	828c      	strh	r4, [r1, #20]
 801343a:	b2c1      	uxtb	r1, r0
 801343c:	4413      	add	r3, r2
 801343e:	460a      	mov	r2, r1
 8013440:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	0c18      	lsrs	r0, r3, #16
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	691a      	ldr	r2, [r3, #16]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	8a9b      	ldrh	r3, [r3, #20]
 8013450:	1c59      	adds	r1, r3, #1
 8013452:	b28c      	uxth	r4, r1
 8013454:	6879      	ldr	r1, [r7, #4]
 8013456:	828c      	strh	r4, [r1, #20]
 8013458:	b2c1      	uxtb	r1, r0
 801345a:	4413      	add	r3, r2
 801345c:	460a      	mov	r2, r1
 801345e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	0a18      	lsrs	r0, r3, #8
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	691a      	ldr	r2, [r3, #16]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	8a9b      	ldrh	r3, [r3, #20]
 801346e:	1c59      	adds	r1, r3, #1
 8013470:	b28c      	uxth	r4, r1
 8013472:	6879      	ldr	r1, [r7, #4]
 8013474:	828c      	strh	r4, [r1, #20]
 8013476:	b2c1      	uxtb	r1, r0
 8013478:	4413      	add	r3, r2
 801347a:	460a      	mov	r2, r1
 801347c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	691a      	ldr	r2, [r3, #16]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	8a9b      	ldrh	r3, [r3, #20]
 8013488:	1c59      	adds	r1, r3, #1
 801348a:	b288      	uxth	r0, r1
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	8288      	strh	r0, [r1, #20]
 8013490:	6839      	ldr	r1, [r7, #0]
 8013492:	b2c9      	uxtb	r1, r1
 8013494:	4413      	add	r3, r2
 8013496:	460a      	mov	r2, r1
 8013498:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801349c:	bf00      	nop
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd90      	pop	{r4, r7, pc}
 80134a4:	08019f28 	.word	0x08019f28
 80134a8:	0801a180 	.word	0x0801a180
 80134ac:	08019f88 	.word	0x08019f88

080134b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b08e      	sub	sp, #56	; 0x38
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 80134be:	2300      	movs	r3, #0
 80134c0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80134c2:	2208      	movs	r2, #8
 80134c4:	2100      	movs	r1, #0
 80134c6:	48b3      	ldr	r0, [pc, #716]	; (8013794 <dhcp_parse_reply+0x2e4>)
 80134c8:	f003 f9f0 	bl	80168ac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	895b      	ldrh	r3, [r3, #10]
 80134d0:	2b2b      	cmp	r3, #43	; 0x2b
 80134d2:	d802      	bhi.n	80134da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80134d4:	f06f 0301 	mvn.w	r3, #1
 80134d8:	e26a      	b.n	80139b0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	685a      	ldr	r2, [r3, #4]
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80134e2:	23f0      	movs	r3, #240	; 0xf0
 80134e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	891b      	ldrh	r3, [r3, #8]
 80134ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80134f0:	e00c      	b.n	801350c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	895b      	ldrh	r3, [r3, #10]
 80134f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80134f8:	1ad3      	subs	r3, r2, r3
 80134fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80134fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fe:	895b      	ldrh	r3, [r3, #10]
 8013500:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8013506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350e:	2b00      	cmp	r3, #0
 8013510:	d004      	beq.n	801351c <dhcp_parse_reply+0x6c>
 8013512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013514:	895b      	ldrh	r3, [r3, #10]
 8013516:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013518:	429a      	cmp	r2, r3
 801351a:	d2ea      	bcs.n	80134f2 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351e:	2b00      	cmp	r3, #0
 8013520:	d102      	bne.n	8013528 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8013522:	f06f 0301 	mvn.w	r3, #1
 8013526:	e243      	b.n	80139b0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 8013528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801352a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 801352c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801352e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8013530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013536:	e1fb      	b.n	8013930 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8013538:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801353a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801353c:	4413      	add	r3, r2
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8013542:	2300      	movs	r3, #0
 8013544:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8013546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801354a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801354c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801354e:	3302      	adds	r3, #2
 8013550:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013552:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013554:	3301      	adds	r3, #1
 8013556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013558:	8952      	ldrh	r2, [r2, #10]
 801355a:	4293      	cmp	r3, r2
 801355c:	da06      	bge.n	801356c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801355e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013560:	3301      	adds	r3, #1
 8013562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013564:	4413      	add	r3, r2
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	77fb      	strb	r3, [r7, #31]
 801356a:	e00a      	b.n	8013582 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d004      	beq.n	801357e <dhcp_parse_reply+0xce>
 8013574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	e000      	b.n	8013580 <dhcp_parse_reply+0xd0>
 801357e:	2300      	movs	r3, #0
 8013580:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013582:	7ffb      	ldrb	r3, [r7, #31]
 8013584:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8013586:	7d7b      	ldrb	r3, [r7, #21]
 8013588:	2b3b      	cmp	r3, #59	; 0x3b
 801358a:	f200 8121 	bhi.w	80137d0 <dhcp_parse_reply+0x320>
 801358e:	a201      	add	r2, pc, #4	; (adr r2, 8013594 <dhcp_parse_reply+0xe4>)
 8013590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013594:	08013685 	.word	0x08013685
 8013598:	08013695 	.word	0x08013695
 801359c:	080137d1 	.word	0x080137d1
 80135a0:	080136b5 	.word	0x080136b5
 80135a4:	080137d1 	.word	0x080137d1
 80135a8:	080137d1 	.word	0x080137d1
 80135ac:	080137d1 	.word	0x080137d1
 80135b0:	080137d1 	.word	0x080137d1
 80135b4:	080137d1 	.word	0x080137d1
 80135b8:	080137d1 	.word	0x080137d1
 80135bc:	080137d1 	.word	0x080137d1
 80135c0:	080137d1 	.word	0x080137d1
 80135c4:	080137d1 	.word	0x080137d1
 80135c8:	080137d1 	.word	0x080137d1
 80135cc:	080137d1 	.word	0x080137d1
 80135d0:	080137d1 	.word	0x080137d1
 80135d4:	080137d1 	.word	0x080137d1
 80135d8:	080137d1 	.word	0x080137d1
 80135dc:	080137d1 	.word	0x080137d1
 80135e0:	080137d1 	.word	0x080137d1
 80135e4:	080137d1 	.word	0x080137d1
 80135e8:	080137d1 	.word	0x080137d1
 80135ec:	080137d1 	.word	0x080137d1
 80135f0:	080137d1 	.word	0x080137d1
 80135f4:	080137d1 	.word	0x080137d1
 80135f8:	080137d1 	.word	0x080137d1
 80135fc:	080137d1 	.word	0x080137d1
 8013600:	080137d1 	.word	0x080137d1
 8013604:	080137d1 	.word	0x080137d1
 8013608:	080137d1 	.word	0x080137d1
 801360c:	080137d1 	.word	0x080137d1
 8013610:	080137d1 	.word	0x080137d1
 8013614:	080137d1 	.word	0x080137d1
 8013618:	080137d1 	.word	0x080137d1
 801361c:	080137d1 	.word	0x080137d1
 8013620:	080137d1 	.word	0x080137d1
 8013624:	080137d1 	.word	0x080137d1
 8013628:	080137d1 	.word	0x080137d1
 801362c:	080137d1 	.word	0x080137d1
 8013630:	080137d1 	.word	0x080137d1
 8013634:	080137d1 	.word	0x080137d1
 8013638:	080137d1 	.word	0x080137d1
 801363c:	080137d1 	.word	0x080137d1
 8013640:	080137d1 	.word	0x080137d1
 8013644:	080137d1 	.word	0x080137d1
 8013648:	080137d1 	.word	0x080137d1
 801364c:	080137d1 	.word	0x080137d1
 8013650:	080137d1 	.word	0x080137d1
 8013654:	080137d1 	.word	0x080137d1
 8013658:	080137d1 	.word	0x080137d1
 801365c:	080137d1 	.word	0x080137d1
 8013660:	080136db 	.word	0x080136db
 8013664:	080136fb 	.word	0x080136fb
 8013668:	08013735 	.word	0x08013735
 801366c:	08013755 	.word	0x08013755
 8013670:	080137d1 	.word	0x080137d1
 8013674:	080137d1 	.word	0x080137d1
 8013678:	080137d1 	.word	0x080137d1
 801367c:	08013775 	.word	0x08013775
 8013680:	080137b1 	.word	0x080137b1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013684:	2300      	movs	r3, #0
 8013686:	77fb      	strb	r3, [r7, #31]
 8013688:	7ffb      	ldrb	r3, [r7, #31]
 801368a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801368c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801368e:	3b01      	subs	r3, #1
 8013690:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8013692:	e0a0      	b.n	80137d6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013694:	7ffb      	ldrb	r3, [r7, #31]
 8013696:	2b04      	cmp	r3, #4
 8013698:	d009      	beq.n	80136ae <dhcp_parse_reply+0x1fe>
 801369a:	4b3f      	ldr	r3, [pc, #252]	; (8013798 <dhcp_parse_reply+0x2e8>)
 801369c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80136a0:	493e      	ldr	r1, [pc, #248]	; (801379c <dhcp_parse_reply+0x2ec>)
 80136a2:	483f      	ldr	r0, [pc, #252]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 80136a4:	f003 f90a 	bl	80168bc <iprintf>
 80136a8:	f06f 0305 	mvn.w	r3, #5
 80136ac:	e180      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80136ae:	2306      	movs	r3, #6
 80136b0:	61bb      	str	r3, [r7, #24]
        break;
 80136b2:	e090      	b.n	80137d6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80136b4:	2304      	movs	r3, #4
 80136b6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80136b8:	7ffa      	ldrb	r2, [r7, #31]
 80136ba:	7fbb      	ldrb	r3, [r7, #30]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d209      	bcs.n	80136d4 <dhcp_parse_reply+0x224>
 80136c0:	4b35      	ldr	r3, [pc, #212]	; (8013798 <dhcp_parse_reply+0x2e8>)
 80136c2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80136c6:	4937      	ldr	r1, [pc, #220]	; (80137a4 <dhcp_parse_reply+0x2f4>)
 80136c8:	4835      	ldr	r0, [pc, #212]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 80136ca:	f003 f8f7 	bl	80168bc <iprintf>
 80136ce:	f06f 0305 	mvn.w	r3, #5
 80136d2:	e16d      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80136d4:	2307      	movs	r3, #7
 80136d6:	61bb      	str	r3, [r7, #24]
        break;
 80136d8:	e07d      	b.n	80137d6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80136da:	7ffb      	ldrb	r3, [r7, #31]
 80136dc:	2b04      	cmp	r3, #4
 80136de:	d009      	beq.n	80136f4 <dhcp_parse_reply+0x244>
 80136e0:	4b2d      	ldr	r3, [pc, #180]	; (8013798 <dhcp_parse_reply+0x2e8>)
 80136e2:	f240 6209 	movw	r2, #1545	; 0x609
 80136e6:	492d      	ldr	r1, [pc, #180]	; (801379c <dhcp_parse_reply+0x2ec>)
 80136e8:	482d      	ldr	r0, [pc, #180]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 80136ea:	f003 f8e7 	bl	80168bc <iprintf>
 80136ee:	f06f 0305 	mvn.w	r3, #5
 80136f2:	e15d      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80136f4:	2303      	movs	r3, #3
 80136f6:	61bb      	str	r3, [r7, #24]
        break;
 80136f8:	e06d      	b.n	80137d6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80136fa:	7ffb      	ldrb	r3, [r7, #31]
 80136fc:	2b01      	cmp	r3, #1
 80136fe:	d009      	beq.n	8013714 <dhcp_parse_reply+0x264>
 8013700:	4b25      	ldr	r3, [pc, #148]	; (8013798 <dhcp_parse_reply+0x2e8>)
 8013702:	f240 6217 	movw	r2, #1559	; 0x617
 8013706:	4928      	ldr	r1, [pc, #160]	; (80137a8 <dhcp_parse_reply+0x2f8>)
 8013708:	4825      	ldr	r0, [pc, #148]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 801370a:	f003 f8d7 	bl	80168bc <iprintf>
 801370e:	f06f 0305 	mvn.w	r3, #5
 8013712:	e14d      	b.n	80139b0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013714:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013716:	2bf0      	cmp	r3, #240	; 0xf0
 8013718:	d009      	beq.n	801372e <dhcp_parse_reply+0x27e>
 801371a:	4b1f      	ldr	r3, [pc, #124]	; (8013798 <dhcp_parse_reply+0x2e8>)
 801371c:	f240 6219 	movw	r2, #1561	; 0x619
 8013720:	4922      	ldr	r1, [pc, #136]	; (80137ac <dhcp_parse_reply+0x2fc>)
 8013722:	481f      	ldr	r0, [pc, #124]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 8013724:	f003 f8ca 	bl	80168bc <iprintf>
 8013728:	f06f 0305 	mvn.w	r3, #5
 801372c:	e140      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801372e:	2300      	movs	r3, #0
 8013730:	61bb      	str	r3, [r7, #24]
        break;
 8013732:	e050      	b.n	80137d6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013734:	7ffb      	ldrb	r3, [r7, #31]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d009      	beq.n	801374e <dhcp_parse_reply+0x29e>
 801373a:	4b17      	ldr	r3, [pc, #92]	; (8013798 <dhcp_parse_reply+0x2e8>)
 801373c:	f240 621d 	movw	r2, #1565	; 0x61d
 8013740:	4919      	ldr	r1, [pc, #100]	; (80137a8 <dhcp_parse_reply+0x2f8>)
 8013742:	4817      	ldr	r0, [pc, #92]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 8013744:	f003 f8ba 	bl	80168bc <iprintf>
 8013748:	f06f 0305 	mvn.w	r3, #5
 801374c:	e130      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801374e:	2301      	movs	r3, #1
 8013750:	61bb      	str	r3, [r7, #24]
        break;
 8013752:	e040      	b.n	80137d6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013754:	7ffb      	ldrb	r3, [r7, #31]
 8013756:	2b04      	cmp	r3, #4
 8013758:	d009      	beq.n	801376e <dhcp_parse_reply+0x2be>
 801375a:	4b0f      	ldr	r3, [pc, #60]	; (8013798 <dhcp_parse_reply+0x2e8>)
 801375c:	f240 6221 	movw	r2, #1569	; 0x621
 8013760:	490e      	ldr	r1, [pc, #56]	; (801379c <dhcp_parse_reply+0x2ec>)
 8013762:	480f      	ldr	r0, [pc, #60]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 8013764:	f003 f8aa 	bl	80168bc <iprintf>
 8013768:	f06f 0305 	mvn.w	r3, #5
 801376c:	e120      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801376e:	2302      	movs	r3, #2
 8013770:	61bb      	str	r3, [r7, #24]
        break;
 8013772:	e030      	b.n	80137d6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013774:	7ffb      	ldrb	r3, [r7, #31]
 8013776:	2b04      	cmp	r3, #4
 8013778:	d009      	beq.n	801378e <dhcp_parse_reply+0x2de>
 801377a:	4b07      	ldr	r3, [pc, #28]	; (8013798 <dhcp_parse_reply+0x2e8>)
 801377c:	f240 6225 	movw	r2, #1573	; 0x625
 8013780:	4906      	ldr	r1, [pc, #24]	; (801379c <dhcp_parse_reply+0x2ec>)
 8013782:	4807      	ldr	r0, [pc, #28]	; (80137a0 <dhcp_parse_reply+0x2f0>)
 8013784:	f003 f89a 	bl	80168bc <iprintf>
 8013788:	f06f 0305 	mvn.w	r3, #5
 801378c:	e110      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801378e:	2304      	movs	r3, #4
 8013790:	61bb      	str	r3, [r7, #24]
        break;
 8013792:	e020      	b.n	80137d6 <dhcp_parse_reply+0x326>
 8013794:	2000fadc 	.word	0x2000fadc
 8013798:	08019f28 	.word	0x08019f28
 801379c:	0801a1c0 	.word	0x0801a1c0
 80137a0:	08019f88 	.word	0x08019f88
 80137a4:	0801a1cc 	.word	0x0801a1cc
 80137a8:	0801a1e0 	.word	0x0801a1e0
 80137ac:	0801a1ec 	.word	0x0801a1ec
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137b0:	7ffb      	ldrb	r3, [r7, #31]
 80137b2:	2b04      	cmp	r3, #4
 80137b4:	d009      	beq.n	80137ca <dhcp_parse_reply+0x31a>
 80137b6:	4b80      	ldr	r3, [pc, #512]	; (80139b8 <dhcp_parse_reply+0x508>)
 80137b8:	f240 6229 	movw	r2, #1577	; 0x629
 80137bc:	497f      	ldr	r1, [pc, #508]	; (80139bc <dhcp_parse_reply+0x50c>)
 80137be:	4880      	ldr	r0, [pc, #512]	; (80139c0 <dhcp_parse_reply+0x510>)
 80137c0:	f003 f87c 	bl	80168bc <iprintf>
 80137c4:	f06f 0305 	mvn.w	r3, #5
 80137c8:	e0f2      	b.n	80139b0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 80137ca:	2305      	movs	r3, #5
 80137cc:	61bb      	str	r3, [r7, #24]
        break;
 80137ce:	e002      	b.n	80137d6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80137d4:	bf00      	nop
    }
    offset += len + 2;
 80137d6:	7ffb      	ldrb	r3, [r7, #31]
 80137d8:	b29a      	uxth	r2, r3
 80137da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80137dc:	4413      	add	r3, r2
 80137de:	b29b      	uxth	r3, r3
 80137e0:	3302      	adds	r3, #2
 80137e2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80137e4:	7fbb      	ldrb	r3, [r7, #30]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d079      	beq.n	80138de <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 80137ea:	2300      	movs	r3, #0
 80137ec:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	db02      	blt.n	80137fa <dhcp_parse_reply+0x34a>
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	2b07      	cmp	r3, #7
 80137f8:	dd06      	ble.n	8013808 <dhcp_parse_reply+0x358>
 80137fa:	4b6f      	ldr	r3, [pc, #444]	; (80139b8 <dhcp_parse_reply+0x508>)
 80137fc:	f240 6236 	movw	r2, #1590	; 0x636
 8013800:	4970      	ldr	r1, [pc, #448]	; (80139c4 <dhcp_parse_reply+0x514>)
 8013802:	486f      	ldr	r0, [pc, #444]	; (80139c0 <dhcp_parse_reply+0x510>)
 8013804:	f003 f85a 	bl	80168bc <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8013808:	4a6f      	ldr	r2, [pc, #444]	; (80139c8 <dhcp_parse_reply+0x518>)
 801380a:	69bb      	ldr	r3, [r7, #24]
 801380c:	4413      	add	r3, r2
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d164      	bne.n	80138de <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8013814:	7fbb      	ldrb	r3, [r7, #30]
 8013816:	2b04      	cmp	r3, #4
 8013818:	bf28      	it	cs
 801381a:	2304      	movcs	r3, #4
 801381c:	b2db      	uxtb	r3, r3
 801381e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013820:	8afb      	ldrh	r3, [r7, #22]
 8013822:	8a7a      	ldrh	r2, [r7, #18]
 8013824:	f107 0108 	add.w	r1, r7, #8
 8013828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801382a:	f7f8 fd43 	bl	800c2b4 <pbuf_copy_partial>
 801382e:	4603      	mov	r3, r0
 8013830:	461a      	mov	r2, r3
 8013832:	8a7b      	ldrh	r3, [r7, #18]
 8013834:	4293      	cmp	r3, r2
 8013836:	d002      	beq.n	801383e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8013838:	f06f 0301 	mvn.w	r3, #1
 801383c:	e0b8      	b.n	80139b0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801383e:	7fbb      	ldrb	r3, [r7, #30]
 8013840:	2b04      	cmp	r3, #4
 8013842:	d927      	bls.n	8013894 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013844:	7fbb      	ldrb	r3, [r7, #30]
 8013846:	f003 0303 	and.w	r3, r3, #3
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b00      	cmp	r3, #0
 801384e:	d009      	beq.n	8013864 <dhcp_parse_reply+0x3b4>
 8013850:	4b59      	ldr	r3, [pc, #356]	; (80139b8 <dhcp_parse_reply+0x508>)
 8013852:	f240 623e 	movw	r2, #1598	; 0x63e
 8013856:	495d      	ldr	r1, [pc, #372]	; (80139cc <dhcp_parse_reply+0x51c>)
 8013858:	4859      	ldr	r0, [pc, #356]	; (80139c0 <dhcp_parse_reply+0x510>)
 801385a:	f003 f82f 	bl	80168bc <iprintf>
 801385e:	f06f 0305 	mvn.w	r3, #5
 8013862:	e0a5      	b.n	80139b0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8013864:	4a58      	ldr	r2, [pc, #352]	; (80139c8 <dhcp_parse_reply+0x518>)
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	4413      	add	r3, r2
 801386a:	2201      	movs	r2, #1
 801386c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	4618      	mov	r0, r3
 8013872:	f7f7 f949 	bl	800ab08 <lwip_htonl>
 8013876:	4601      	mov	r1, r0
 8013878:	4a55      	ldr	r2, [pc, #340]	; (80139d0 <dhcp_parse_reply+0x520>)
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8013880:	7fbb      	ldrb	r3, [r7, #30]
 8013882:	3b04      	subs	r3, #4
 8013884:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8013886:	8afb      	ldrh	r3, [r7, #22]
 8013888:	3304      	adds	r3, #4
 801388a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	3301      	adds	r3, #1
 8013890:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8013892:	e7ac      	b.n	80137ee <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8013894:	7fbb      	ldrb	r3, [r7, #30]
 8013896:	2b04      	cmp	r3, #4
 8013898:	d106      	bne.n	80138a8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	4618      	mov	r0, r3
 801389e:	f7f7 f933 	bl	800ab08 <lwip_htonl>
 80138a2:	4603      	mov	r3, r0
 80138a4:	60bb      	str	r3, [r7, #8]
 80138a6:	e010      	b.n	80138ca <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80138a8:	7fbb      	ldrb	r3, [r7, #30]
 80138aa:	2b01      	cmp	r3, #1
 80138ac:	d009      	beq.n	80138c2 <dhcp_parse_reply+0x412>
 80138ae:	4b42      	ldr	r3, [pc, #264]	; (80139b8 <dhcp_parse_reply+0x508>)
 80138b0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80138b4:	4947      	ldr	r1, [pc, #284]	; (80139d4 <dhcp_parse_reply+0x524>)
 80138b6:	4842      	ldr	r0, [pc, #264]	; (80139c0 <dhcp_parse_reply+0x510>)
 80138b8:	f003 f800 	bl	80168bc <iprintf>
 80138bc:	f06f 0305 	mvn.w	r3, #5
 80138c0:	e076      	b.n	80139b0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 80138c2:	f107 0308 	add.w	r3, r7, #8
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80138ca:	4a3f      	ldr	r2, [pc, #252]	; (80139c8 <dhcp_parse_reply+0x518>)
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	4413      	add	r3, r2
 80138d0:	2201      	movs	r2, #1
 80138d2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	493e      	ldr	r1, [pc, #248]	; (80139d0 <dhcp_parse_reply+0x520>)
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80138de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e0:	895b      	ldrh	r3, [r3, #10]
 80138e2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d323      	bcc.n	8013930 <dhcp_parse_reply+0x480>
      offset -= q->len;
 80138e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ea:	895b      	ldrh	r3, [r3, #10]
 80138ec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80138ee:	1ad3      	subs	r3, r2, r3
 80138f0:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 80138f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138f4:	895b      	ldrh	r3, [r3, #10]
 80138f6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80138f8:	1ad3      	subs	r3, r2, r3
 80138fa:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 80138fc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80138fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013900:	429a      	cmp	r2, r3
 8013902:	d223      	bcs.n	801394c <dhcp_parse_reply+0x49c>
 8013904:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013906:	2b00      	cmp	r3, #0
 8013908:	d020      	beq.n	801394c <dhcp_parse_reply+0x49c>
        q = q->next;
 801390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013912:	2b00      	cmp	r3, #0
 8013914:	d109      	bne.n	801392a <dhcp_parse_reply+0x47a>
 8013916:	4b28      	ldr	r3, [pc, #160]	; (80139b8 <dhcp_parse_reply+0x508>)
 8013918:	f240 6254 	movw	r2, #1620	; 0x654
 801391c:	492e      	ldr	r1, [pc, #184]	; (80139d8 <dhcp_parse_reply+0x528>)
 801391e:	4828      	ldr	r0, [pc, #160]	; (80139c0 <dhcp_parse_reply+0x510>)
 8013920:	f002 ffcc 	bl	80168bc <iprintf>
 8013924:	f06f 0305 	mvn.w	r3, #5
 8013928:	e042      	b.n	80139b0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013932:	2b00      	cmp	r3, #0
 8013934:	d00a      	beq.n	801394c <dhcp_parse_reply+0x49c>
 8013936:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8013938:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801393a:	429a      	cmp	r2, r3
 801393c:	d206      	bcs.n	801394c <dhcp_parse_reply+0x49c>
 801393e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013942:	4413      	add	r3, r2
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2bff      	cmp	r3, #255	; 0xff
 8013948:	f47f adf6 	bne.w	8013538 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801394c:	4b1e      	ldr	r3, [pc, #120]	; (80139c8 <dhcp_parse_reply+0x518>)
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d018      	beq.n	8013986 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013954:	4b1e      	ldr	r3, [pc, #120]	; (80139d0 <dhcp_parse_reply+0x520>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801395a:	4b1b      	ldr	r3, [pc, #108]	; (80139c8 <dhcp_parse_reply+0x518>)
 801395c:	2200      	movs	r2, #0
 801395e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d102      	bne.n	801396c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8013966:	2301      	movs	r3, #1
 8013968:	627b      	str	r3, [r7, #36]	; 0x24
 801396a:	e00c      	b.n	8013986 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	2b02      	cmp	r3, #2
 8013970:	d102      	bne.n	8013978 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8013972:	2301      	movs	r3, #1
 8013974:	623b      	str	r3, [r7, #32]
 8013976:	e006      	b.n	8013986 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	2b03      	cmp	r3, #3
 801397c:	d103      	bne.n	8013986 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801397e:	2301      	movs	r3, #1
 8013980:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8013982:	2301      	movs	r3, #1
 8013984:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8013986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013988:	2b00      	cmp	r3, #0
 801398a:	d006      	beq.n	801399a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801398c:	2300      	movs	r3, #0
 801398e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8013990:	236c      	movs	r3, #108	; 0x6c
 8013992:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013994:	23ec      	movs	r3, #236	; 0xec
 8013996:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8013998:	e5a8      	b.n	80134ec <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801399a:	6a3b      	ldr	r3, [r7, #32]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d006      	beq.n	80139ae <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80139a4:	232c      	movs	r3, #44	; 0x2c
 80139a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80139a8:	236c      	movs	r3, #108	; 0x6c
 80139aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80139ac:	e59e      	b.n	80134ec <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80139ae:	2300      	movs	r3, #0
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3738      	adds	r7, #56	; 0x38
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	08019f28 	.word	0x08019f28
 80139bc:	0801a1c0 	.word	0x0801a1c0
 80139c0:	08019f88 	.word	0x08019f88
 80139c4:	0801a204 	.word	0x0801a204
 80139c8:	2000fadc 	.word	0x2000fadc
 80139cc:	0801a218 	.word	0x0801a218
 80139d0:	2000fae4 	.word	0x2000fae4
 80139d4:	0801a230 	.word	0x0801a230
 80139d8:	0801a244 	.word	0x0801a244

080139dc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08a      	sub	sp, #40	; 0x28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80139ea:	4b68      	ldr	r3, [pc, #416]	; (8013b8c <dhcp_recv+0x1b0>)
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139f0:	6a3b      	ldr	r3, [r7, #32]
 80139f2:	6a1b      	ldr	r3, [r3, #32]
 80139f4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f000 80a9 	beq.w	8013b56 <dhcp_recv+0x17a>
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	7a1b      	ldrb	r3, [r3, #8]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f000 80a4 	beq.w	8013b56 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d006      	beq.n	8013a24 <dhcp_recv+0x48>
 8013a16:	4b5e      	ldr	r3, [pc, #376]	; (8013b90 <dhcp_recv+0x1b4>)
 8013a18:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8013a1c:	495d      	ldr	r1, [pc, #372]	; (8013b94 <dhcp_recv+0x1b8>)
 8013a1e:	485e      	ldr	r0, [pc, #376]	; (8013b98 <dhcp_recv+0x1bc>)
 8013a20:	f002 ff4c 	bl	80168bc <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	895b      	ldrh	r3, [r3, #10]
 8013a28:	2b2b      	cmp	r3, #43	; 0x2b
 8013a2a:	f240 8096 	bls.w	8013b5a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	2b02      	cmp	r3, #2
 8013a34:	f040 8093 	bne.w	8013b5e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013a38:	2300      	movs	r3, #0
 8013a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a3e:	e012      	b.n	8013a66 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a44:	6a3a      	ldr	r2, [r7, #32]
 8013a46:	4413      	add	r3, r2
 8013a48:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a50:	69b9      	ldr	r1, [r7, #24]
 8013a52:	440b      	add	r3, r1
 8013a54:	7f1b      	ldrb	r3, [r3, #28]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	f040 8083 	bne.w	8013b62 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8013a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a60:	3301      	adds	r3, #1
 8013a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d207      	bcs.n	8013a84 <dhcp_recv+0xa8>
 8013a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a78:	2b05      	cmp	r3, #5
 8013a7a:	d803      	bhi.n	8013a84 <dhcp_recv+0xa8>
 8013a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a80:	2b0f      	cmp	r3, #15
 8013a82:	d9dd      	bls.n	8013a40 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f7f7 f83d 	bl	800ab08 <lwip_htonl>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d166      	bne.n	8013b66 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8013a98:	6879      	ldr	r1, [r7, #4]
 8013a9a:	69f8      	ldr	r0, [r7, #28]
 8013a9c:	f7ff fd08 	bl	80134b0 <dhcp_parse_reply>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d161      	bne.n	8013b6a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013aa6:	4b3d      	ldr	r3, [pc, #244]	; (8013b9c <dhcp_recv+0x1c0>)
 8013aa8:	785b      	ldrb	r3, [r3, #1]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d05f      	beq.n	8013b6e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013aae:	4b3c      	ldr	r3, [pc, #240]	; (8013ba0 <dhcp_recv+0x1c4>)
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013ab4:	7dfb      	ldrb	r3, [r7, #23]
 8013ab6:	2b05      	cmp	r3, #5
 8013ab8:	d128      	bne.n	8013b0c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	7a5b      	ldrb	r3, [r3, #9]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d111      	bne.n	8013ae6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8013ac2:	6a38      	ldr	r0, [r7, #32]
 8013ac4:	f7fe fea0 	bl	8012808 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013ac8:	6a3b      	ldr	r3, [r7, #32]
 8013aca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013ace:	f003 0308 	and.w	r3, r3, #8
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d003      	beq.n	8013ade <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013ad6:	6a38      	ldr	r0, [r7, #32]
 8013ad8:	f7fe fc68 	bl	80123ac <dhcp_check>
 8013adc:	e048      	b.n	8013b70 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013ade:	6a38      	ldr	r0, [r7, #32]
 8013ae0:	f7ff f8a0 	bl	8012c24 <dhcp_bind>
 8013ae4:	e044      	b.n	8013b70 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013ae6:	69fb      	ldr	r3, [r7, #28]
 8013ae8:	7a5b      	ldrb	r3, [r3, #9]
 8013aea:	2b03      	cmp	r3, #3
 8013aec:	d007      	beq.n	8013afe <dhcp_recv+0x122>
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	7a5b      	ldrb	r3, [r3, #9]
 8013af2:	2b04      	cmp	r3, #4
 8013af4:	d003      	beq.n	8013afe <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013afa:	2b05      	cmp	r3, #5
 8013afc:	d138      	bne.n	8013b70 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8013afe:	6a38      	ldr	r0, [r7, #32]
 8013b00:	f7fe fe82 	bl	8012808 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013b04:	6a38      	ldr	r0, [r7, #32]
 8013b06:	f7ff f88d 	bl	8012c24 <dhcp_bind>
 8013b0a:	e031      	b.n	8013b70 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013b0c:	7dfb      	ldrb	r3, [r7, #23]
 8013b0e:	2b06      	cmp	r3, #6
 8013b10:	d113      	bne.n	8013b3a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8013b16:	2b03      	cmp	r3, #3
 8013b18:	d00b      	beq.n	8013b32 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	7a5b      	ldrb	r3, [r3, #9]
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d007      	beq.n	8013b32 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013b22:	69fb      	ldr	r3, [r7, #28]
 8013b24:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b26:	2b04      	cmp	r3, #4
 8013b28:	d003      	beq.n	8013b32 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	7a5b      	ldrb	r3, [r3, #9]
 8013b2e:	2b05      	cmp	r3, #5
 8013b30:	d103      	bne.n	8013b3a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013b32:	6a38      	ldr	r0, [r7, #32]
 8013b34:	f7fe fc20 	bl	8012378 <dhcp_handle_nak>
 8013b38:	e01a      	b.n	8013b70 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013b3a:	7dfb      	ldrb	r3, [r7, #23]
 8013b3c:	2b02      	cmp	r3, #2
 8013b3e:	d10a      	bne.n	8013b56 <dhcp_recv+0x17a>
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	7a5b      	ldrb	r3, [r3, #9]
 8013b44:	2b06      	cmp	r3, #6
 8013b46:	d106      	bne.n	8013b56 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8013b4e:	6a38      	ldr	r0, [r7, #32]
 8013b50:	f7fe fc60 	bl	8012414 <dhcp_handle_offer>
 8013b54:	e00c      	b.n	8013b70 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8013b56:	bf00      	nop
 8013b58:	e00a      	b.n	8013b70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013b5a:	bf00      	nop
 8013b5c:	e008      	b.n	8013b70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013b5e:	bf00      	nop
 8013b60:	e006      	b.n	8013b70 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8013b62:	bf00      	nop
 8013b64:	e004      	b.n	8013b70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013b66:	bf00      	nop
 8013b68:	e002      	b.n	8013b70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013b6a:	bf00      	nop
 8013b6c:	e000      	b.n	8013b70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8013b6e:	bf00      	nop
  if (dhcp != NULL) {
 8013b70:	69fb      	ldr	r3, [r7, #28]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d002      	beq.n	8013b7c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f7f8 f98d 	bl	800be9c <pbuf_free>
}
 8013b82:	bf00      	nop
 8013b84:	3728      	adds	r7, #40	; 0x28
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	2000c390 	.word	0x2000c390
 8013b90:	08019f28 	.word	0x08019f28
 8013b94:	0801a054 	.word	0x0801a054
 8013b98:	08019f88 	.word	0x08019f88
 8013b9c:	2000fadc 	.word	0x2000fadc
 8013ba0:	2000fae4 	.word	0x2000fae4

08013ba4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8013ba4:	b590      	push	{r4, r7, lr}
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d109      	bne.n	8013bcc <dhcp_create_msg+0x28>
 8013bb8:	4ba3      	ldr	r3, [pc, #652]	; (8013e48 <dhcp_create_msg+0x2a4>)
 8013bba:	f240 721d 	movw	r2, #1821	; 0x71d
 8013bbe:	49a3      	ldr	r1, [pc, #652]	; (8013e4c <dhcp_create_msg+0x2a8>)
 8013bc0:	48a3      	ldr	r0, [pc, #652]	; (8013e50 <dhcp_create_msg+0x2ac>)
 8013bc2:	f002 fe7b 	bl	80168bc <iprintf>
 8013bc6:	f06f 030f 	mvn.w	r3, #15
 8013bca:	e138      	b.n	8013e3e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d109      	bne.n	8013be6 <dhcp_create_msg+0x42>
 8013bd2:	4b9d      	ldr	r3, [pc, #628]	; (8013e48 <dhcp_create_msg+0x2a4>)
 8013bd4:	f240 721e 	movw	r2, #1822	; 0x71e
 8013bd8:	499e      	ldr	r1, [pc, #632]	; (8013e54 <dhcp_create_msg+0x2b0>)
 8013bda:	489d      	ldr	r0, [pc, #628]	; (8013e50 <dhcp_create_msg+0x2ac>)
 8013bdc:	f002 fe6e 	bl	80168bc <iprintf>
 8013be0:	f06f 0305 	mvn.w	r3, #5
 8013be4:	e12b      	b.n	8013e3e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d006      	beq.n	8013bfc <dhcp_create_msg+0x58>
 8013bee:	4b96      	ldr	r3, [pc, #600]	; (8013e48 <dhcp_create_msg+0x2a4>)
 8013bf0:	f240 721f 	movw	r2, #1823	; 0x71f
 8013bf4:	4998      	ldr	r1, [pc, #608]	; (8013e58 <dhcp_create_msg+0x2b4>)
 8013bf6:	4896      	ldr	r0, [pc, #600]	; (8013e50 <dhcp_create_msg+0x2ac>)
 8013bf8:	f002 fe60 	bl	80168bc <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	691b      	ldr	r3, [r3, #16]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d006      	beq.n	8013c12 <dhcp_create_msg+0x6e>
 8013c04:	4b90      	ldr	r3, [pc, #576]	; (8013e48 <dhcp_create_msg+0x2a4>)
 8013c06:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8013c0a:	4994      	ldr	r1, [pc, #592]	; (8013e5c <dhcp_create_msg+0x2b8>)
 8013c0c:	4890      	ldr	r0, [pc, #576]	; (8013e50 <dhcp_create_msg+0x2ac>)
 8013c0e:	f002 fe55 	bl	80168bc <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013c12:	2200      	movs	r2, #0
 8013c14:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013c18:	2000      	movs	r0, #0
 8013c1a:	f7f7 fdcd 	bl	800b7b8 <pbuf_alloc>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d102      	bne.n	8013c32 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8013c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c30:	e105      	b.n	8013e3e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	895b      	ldrh	r3, [r3, #10]
 8013c38:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013c3c:	d206      	bcs.n	8013c4c <dhcp_create_msg+0xa8>
 8013c3e:	4b82      	ldr	r3, [pc, #520]	; (8013e48 <dhcp_create_msg+0x2a4>)
 8013c40:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013c44:	4986      	ldr	r1, [pc, #536]	; (8013e60 <dhcp_create_msg+0x2bc>)
 8013c46:	4882      	ldr	r0, [pc, #520]	; (8013e50 <dhcp_create_msg+0x2ac>)
 8013c48:	f002 fe38 	bl	80168bc <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013c4c:	79fb      	ldrb	r3, [r7, #7]
 8013c4e:	2b03      	cmp	r3, #3
 8013c50:	d103      	bne.n	8013c5a <dhcp_create_msg+0xb6>
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	7a5b      	ldrb	r3, [r3, #9]
 8013c56:	2b03      	cmp	r3, #3
 8013c58:	d10d      	bne.n	8013c76 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	7a9b      	ldrb	r3, [r3, #10]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d105      	bne.n	8013c6e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013c62:	f002 fe43 	bl	80168ec <rand>
 8013c66:	4603      	mov	r3, r0
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4b7e      	ldr	r3, [pc, #504]	; (8013e64 <dhcp_create_msg+0x2c0>)
 8013c6c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013c6e:	4b7d      	ldr	r3, [pc, #500]	; (8013e64 <dhcp_create_msg+0x2c0>)
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	2201      	movs	r2, #1
 8013c86:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	691b      	ldr	r3, [r3, #16]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	691b      	ldr	r3, [r3, #16]
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8013c9a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	691b      	ldr	r3, [r3, #16]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	691c      	ldr	r4, [r3, #16]
 8013cac:	4610      	mov	r0, r2
 8013cae:	f7f6 ff2b 	bl	800ab08 <lwip_htonl>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	721a      	strb	r2, [r3, #8]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	691b      	ldr	r3, [r3, #16]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	729a      	strb	r2, [r3, #10]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	731a      	strb	r2, [r3, #12]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	735a      	strb	r2, [r3, #13]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	739a      	strb	r2, [r3, #14]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013ce2:	79fb      	ldrb	r3, [r7, #7]
 8013ce4:	2b08      	cmp	r3, #8
 8013ce6:	d010      	beq.n	8013d0a <dhcp_create_msg+0x166>
 8013ce8:	79fb      	ldrb	r3, [r7, #7]
 8013cea:	2b04      	cmp	r3, #4
 8013cec:	d00d      	beq.n	8013d0a <dhcp_create_msg+0x166>
 8013cee:	79fb      	ldrb	r3, [r7, #7]
 8013cf0:	2b07      	cmp	r3, #7
 8013cf2:	d00a      	beq.n	8013d0a <dhcp_create_msg+0x166>
 8013cf4:	79fb      	ldrb	r3, [r7, #7]
 8013cf6:	2b03      	cmp	r3, #3
 8013cf8:	d10d      	bne.n	8013d16 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013cfe:	2b05      	cmp	r3, #5
 8013d00:	d003      	beq.n	8013d0a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	7a5b      	ldrb	r3, [r3, #9]
 8013d06:	2b04      	cmp	r3, #4
 8013d08:	d105      	bne.n	8013d16 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	1d1a      	adds	r2, r3, #4
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	691b      	ldr	r3, [r3, #16]
 8013d12:	6812      	ldr	r2, [r2, #0]
 8013d14:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	691b      	ldr	r3, [r3, #16]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	741a      	strb	r2, [r3, #16]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	745a      	strb	r2, [r3, #17]
 8013d22:	2200      	movs	r2, #0
 8013d24:	749a      	strb	r2, [r3, #18]
 8013d26:	2200      	movs	r2, #0
 8013d28:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	691b      	ldr	r3, [r3, #16]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	751a      	strb	r2, [r3, #20]
 8013d32:	2200      	movs	r2, #0
 8013d34:	755a      	strb	r2, [r3, #21]
 8013d36:	2200      	movs	r2, #0
 8013d38:	759a      	strb	r2, [r3, #22]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	691b      	ldr	r3, [r3, #16]
 8013d42:	2200      	movs	r2, #0
 8013d44:	761a      	strb	r2, [r3, #24]
 8013d46:	2200      	movs	r2, #0
 8013d48:	765a      	strb	r2, [r3, #25]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	769a      	strb	r2, [r3, #26]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8013d52:	2300      	movs	r3, #0
 8013d54:	82fb      	strh	r3, [r7, #22]
 8013d56:	e019      	b.n	8013d8c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	8afa      	ldrh	r2, [r7, #22]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d208      	bcs.n	8013d78 <dhcp_create_msg+0x1d4>
 8013d66:	8afb      	ldrh	r3, [r7, #22]
 8013d68:	2b05      	cmp	r3, #5
 8013d6a:	d805      	bhi.n	8013d78 <dhcp_create_msg+0x1d4>
 8013d6c:	8afb      	ldrh	r3, [r7, #22]
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	4413      	add	r3, r2
 8013d72:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8013d76:	e000      	b.n	8013d7a <dhcp_create_msg+0x1d6>
 8013d78:	2100      	movs	r1, #0
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	691a      	ldr	r2, [r3, #16]
 8013d7e:	8afb      	ldrh	r3, [r7, #22]
 8013d80:	4413      	add	r3, r2
 8013d82:	460a      	mov	r2, r1
 8013d84:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8013d86:	8afb      	ldrh	r3, [r7, #22]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	82fb      	strh	r3, [r7, #22]
 8013d8c:	8afb      	ldrh	r3, [r7, #22]
 8013d8e:	2b0f      	cmp	r3, #15
 8013d90:	d9e2      	bls.n	8013d58 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8013d92:	2300      	movs	r3, #0
 8013d94:	82fb      	strh	r3, [r7, #22]
 8013d96:	e009      	b.n	8013dac <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	691a      	ldr	r2, [r3, #16]
 8013d9c:	8afb      	ldrh	r3, [r7, #22]
 8013d9e:	4413      	add	r3, r2
 8013da0:	2200      	movs	r2, #0
 8013da2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8013da6:	8afb      	ldrh	r3, [r7, #22]
 8013da8:	3301      	adds	r3, #1
 8013daa:	82fb      	strh	r3, [r7, #22]
 8013dac:	8afb      	ldrh	r3, [r7, #22]
 8013dae:	2b3f      	cmp	r3, #63	; 0x3f
 8013db0:	d9f2      	bls.n	8013d98 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8013db2:	2300      	movs	r3, #0
 8013db4:	82fb      	strh	r3, [r7, #22]
 8013db6:	e009      	b.n	8013dcc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	691a      	ldr	r2, [r3, #16]
 8013dbc:	8afb      	ldrh	r3, [r7, #22]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8013dc6:	8afb      	ldrh	r3, [r7, #22]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	82fb      	strh	r3, [r7, #22]
 8013dcc:	8afb      	ldrh	r3, [r7, #22]
 8013dce:	2b7f      	cmp	r3, #127	; 0x7f
 8013dd0:	d9f2      	bls.n	8013db8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013ddc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013de0:	2200      	movs	r2, #0
 8013de2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013de6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013dea:	2200      	movs	r2, #0
 8013dec:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013df0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013df4:	2200      	movs	r2, #0
 8013df6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013dfa:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	2200      	movs	r2, #0
 8013e02:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8013e04:	2300      	movs	r3, #0
 8013e06:	82fb      	strh	r3, [r7, #22]
 8013e08:	e00b      	b.n	8013e22 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	691a      	ldr	r2, [r3, #16]
 8013e0e:	8afb      	ldrh	r3, [r7, #22]
 8013e10:	8af9      	ldrh	r1, [r7, #22]
 8013e12:	b2c9      	uxtb	r1, r1
 8013e14:	4413      	add	r3, r2
 8013e16:	460a      	mov	r2, r1
 8013e18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8013e1c:	8afb      	ldrh	r3, [r7, #22]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	82fb      	strh	r3, [r7, #22]
 8013e22:	8afb      	ldrh	r3, [r7, #22]
 8013e24:	2b43      	cmp	r3, #67	; 0x43
 8013e26:	d9f0      	bls.n	8013e0a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013e28:	2201      	movs	r2, #1
 8013e2a:	2135      	movs	r1, #53	; 0x35
 8013e2c:	68b8      	ldr	r0, [r7, #8]
 8013e2e:	f7ff fa4d 	bl	80132cc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8013e32:	79fb      	ldrb	r3, [r7, #7]
 8013e34:	4619      	mov	r1, r3
 8013e36:	68b8      	ldr	r0, [r7, #8]
 8013e38:	f7ff fa82 	bl	8013340 <dhcp_option_byte>
  return ERR_OK;
 8013e3c:	2300      	movs	r3, #0
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	371c      	adds	r7, #28
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd90      	pop	{r4, r7, pc}
 8013e46:	bf00      	nop
 8013e48:	08019f28 	.word	0x08019f28
 8013e4c:	0801a258 	.word	0x0801a258
 8013e50:	08019f88 	.word	0x08019f88
 8013e54:	0801a278 	.word	0x0801a278
 8013e58:	0801a298 	.word	0x0801a298
 8013e5c:	0801a2c0 	.word	0x0801a2c0
 8013e60:	0801a2e8 	.word	0x0801a2e8
 8013e64:	20008c88 	.word	0x20008c88

08013e68 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d107      	bne.n	8013e86 <dhcp_delete_msg+0x1e>
 8013e76:	4b18      	ldr	r3, [pc, #96]	; (8013ed8 <dhcp_delete_msg+0x70>)
 8013e78:	f240 726d 	movw	r2, #1901	; 0x76d
 8013e7c:	4917      	ldr	r1, [pc, #92]	; (8013edc <dhcp_delete_msg+0x74>)
 8013e7e:	4818      	ldr	r0, [pc, #96]	; (8013ee0 <dhcp_delete_msg+0x78>)
 8013e80:	f002 fd1c 	bl	80168bc <iprintf>
 8013e84:	e024      	b.n	8013ed0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d106      	bne.n	8013e9c <dhcp_delete_msg+0x34>
 8013e8e:	4b12      	ldr	r3, [pc, #72]	; (8013ed8 <dhcp_delete_msg+0x70>)
 8013e90:	f240 726e 	movw	r2, #1902	; 0x76e
 8013e94:	4913      	ldr	r1, [pc, #76]	; (8013ee4 <dhcp_delete_msg+0x7c>)
 8013e96:	4812      	ldr	r0, [pc, #72]	; (8013ee0 <dhcp_delete_msg+0x78>)
 8013e98:	f002 fd10 	bl	80168bc <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d106      	bne.n	8013eb2 <dhcp_delete_msg+0x4a>
 8013ea4:	4b0c      	ldr	r3, [pc, #48]	; (8013ed8 <dhcp_delete_msg+0x70>)
 8013ea6:	f240 726f 	movw	r2, #1903	; 0x76f
 8013eaa:	490f      	ldr	r1, [pc, #60]	; (8013ee8 <dhcp_delete_msg+0x80>)
 8013eac:	480c      	ldr	r0, [pc, #48]	; (8013ee0 <dhcp_delete_msg+0x78>)
 8013eae:	f002 fd05 	bl	80168bc <iprintf>
  if (dhcp->p_out != NULL) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	68db      	ldr	r3, [r3, #12]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d004      	beq.n	8013ec4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7f7 ffec 	bl	800be9c <pbuf_free>
  }
  dhcp->p_out = NULL;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	611a      	str	r2, [r3, #16]
}
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	08019f28 	.word	0x08019f28
 8013edc:	0801a328 	.word	0x0801a328
 8013ee0:	08019f88 	.word	0x08019f88
 8013ee4:	0801a348 	.word	0x0801a348
 8013ee8:	0801a370 	.word	0x0801a370

08013eec <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d107      	bne.n	8013f0a <dhcp_option_trailer+0x1e>
 8013efa:	4b24      	ldr	r3, [pc, #144]	; (8013f8c <dhcp_option_trailer+0xa0>)
 8013efc:	f240 7282 	movw	r2, #1922	; 0x782
 8013f00:	4923      	ldr	r1, [pc, #140]	; (8013f90 <dhcp_option_trailer+0xa4>)
 8013f02:	4824      	ldr	r0, [pc, #144]	; (8013f94 <dhcp_option_trailer+0xa8>)
 8013f04:	f002 fcda 	bl	80168bc <iprintf>
 8013f08:	e03c      	b.n	8013f84 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	691b      	ldr	r3, [r3, #16]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d106      	bne.n	8013f20 <dhcp_option_trailer+0x34>
 8013f12:	4b1e      	ldr	r3, [pc, #120]	; (8013f8c <dhcp_option_trailer+0xa0>)
 8013f14:	f240 7283 	movw	r2, #1923	; 0x783
 8013f18:	491f      	ldr	r1, [pc, #124]	; (8013f98 <dhcp_option_trailer+0xac>)
 8013f1a:	481e      	ldr	r0, [pc, #120]	; (8013f94 <dhcp_option_trailer+0xa8>)
 8013f1c:	f002 fcce 	bl	80168bc <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	8a9b      	ldrh	r3, [r3, #20]
 8013f24:	2b43      	cmp	r3, #67	; 0x43
 8013f26:	d906      	bls.n	8013f36 <dhcp_option_trailer+0x4a>
 8013f28:	4b18      	ldr	r3, [pc, #96]	; (8013f8c <dhcp_option_trailer+0xa0>)
 8013f2a:	f240 7284 	movw	r2, #1924	; 0x784
 8013f2e:	491b      	ldr	r1, [pc, #108]	; (8013f9c <dhcp_option_trailer+0xb0>)
 8013f30:	4818      	ldr	r0, [pc, #96]	; (8013f94 <dhcp_option_trailer+0xa8>)
 8013f32:	f002 fcc3 	bl	80168bc <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	691a      	ldr	r2, [r3, #16]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	8a9b      	ldrh	r3, [r3, #20]
 8013f3e:	1c59      	adds	r1, r3, #1
 8013f40:	b288      	uxth	r0, r1
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	8288      	strh	r0, [r1, #20]
 8013f46:	4413      	add	r3, r2
 8013f48:	22ff      	movs	r2, #255	; 0xff
 8013f4a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013f4e:	e00b      	b.n	8013f68 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	691a      	ldr	r2, [r3, #16]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	8a9b      	ldrh	r3, [r3, #20]
 8013f58:	1c59      	adds	r1, r3, #1
 8013f5a:	b288      	uxth	r0, r1
 8013f5c:	6879      	ldr	r1, [r7, #4]
 8013f5e:	8288      	strh	r0, [r1, #20]
 8013f60:	4413      	add	r3, r2
 8013f62:	2200      	movs	r2, #0
 8013f64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	8a9b      	ldrh	r3, [r3, #20]
 8013f6c:	2b43      	cmp	r3, #67	; 0x43
 8013f6e:	d905      	bls.n	8013f7c <dhcp_option_trailer+0x90>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	8a9b      	ldrh	r3, [r3, #20]
 8013f74:	f003 0303 	and.w	r3, r3, #3
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d003      	beq.n	8013f84 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8013f80:	2b43      	cmp	r3, #67	; 0x43
 8013f82:	d9e5      	bls.n	8013f50 <dhcp_option_trailer+0x64>
  }
}
 8013f84:	3708      	adds	r7, #8
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	08019f28 	.word	0x08019f28
 8013f90:	0801a398 	.word	0x0801a398
 8013f94:	08019f88 	.word	0x08019f88
 8013f98:	0801a3bc 	.word	0x0801a3bc
 8013f9c:	0801a3e8 	.word	0x0801a3e8

08013fa0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b085      	sub	sp, #20
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d017      	beq.n	8013fde <dhcp_supplied_address+0x3e>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6a1b      	ldr	r3, [r3, #32]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d013      	beq.n	8013fde <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6a1b      	ldr	r3, [r3, #32]
 8013fba:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	7a5b      	ldrb	r3, [r3, #9]
 8013fc0:	2b0a      	cmp	r3, #10
 8013fc2:	d007      	beq.n	8013fd4 <dhcp_supplied_address+0x34>
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	7a5b      	ldrb	r3, [r3, #9]
 8013fc8:	2b05      	cmp	r3, #5
 8013fca:	d003      	beq.n	8013fd4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013fd0:	2b04      	cmp	r3, #4
 8013fd2:	d101      	bne.n	8013fd8 <dhcp_supplied_address+0x38>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	e000      	b.n	8013fda <dhcp_supplied_address+0x3a>
 8013fd8:	2300      	movs	r3, #0
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	e000      	b.n	8013fe0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3714      	adds	r7, #20
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013fec:	b580      	push	{r7, lr}
 8013fee:	b082      	sub	sp, #8
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ff4:	4915      	ldr	r1, [pc, #84]	; (801404c <etharp_free_entry+0x60>)
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	440b      	add	r3, r1
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d013      	beq.n	8014030 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014008:	4910      	ldr	r1, [pc, #64]	; (801404c <etharp_free_entry+0x60>)
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	4613      	mov	r3, r2
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
 8014014:	440b      	add	r3, r1
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	4618      	mov	r0, r3
 801401a:	f7f7 ff3f 	bl	800be9c <pbuf_free>
    arp_table[i].q = NULL;
 801401e:	490b      	ldr	r1, [pc, #44]	; (801404c <etharp_free_entry+0x60>)
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	4613      	mov	r3, r2
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	4413      	add	r3, r2
 8014028:	00db      	lsls	r3, r3, #3
 801402a:	440b      	add	r3, r1
 801402c:	2200      	movs	r2, #0
 801402e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014030:	4906      	ldr	r1, [pc, #24]	; (801404c <etharp_free_entry+0x60>)
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	4613      	mov	r3, r2
 8014036:	005b      	lsls	r3, r3, #1
 8014038:	4413      	add	r3, r2
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	440b      	add	r3, r1
 801403e:	3314      	adds	r3, #20
 8014040:	2200      	movs	r2, #0
 8014042:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014044:	bf00      	nop
 8014046:	3708      	adds	r7, #8
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}
 801404c:	20008c8c 	.word	0x20008c8c

08014050 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014056:	2300      	movs	r3, #0
 8014058:	71fb      	strb	r3, [r7, #7]
 801405a:	e096      	b.n	801418a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801405c:	79fa      	ldrb	r2, [r7, #7]
 801405e:	494f      	ldr	r1, [pc, #316]	; (801419c <etharp_tmr+0x14c>)
 8014060:	4613      	mov	r3, r2
 8014062:	005b      	lsls	r3, r3, #1
 8014064:	4413      	add	r3, r2
 8014066:	00db      	lsls	r3, r3, #3
 8014068:	440b      	add	r3, r1
 801406a:	3314      	adds	r3, #20
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8014070:	79bb      	ldrb	r3, [r7, #6]
 8014072:	2b00      	cmp	r3, #0
 8014074:	f000 8086 	beq.w	8014184 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014078:	79fa      	ldrb	r2, [r7, #7]
 801407a:	4948      	ldr	r1, [pc, #288]	; (801419c <etharp_tmr+0x14c>)
 801407c:	4613      	mov	r3, r2
 801407e:	005b      	lsls	r3, r3, #1
 8014080:	4413      	add	r3, r2
 8014082:	00db      	lsls	r3, r3, #3
 8014084:	440b      	add	r3, r1
 8014086:	3312      	adds	r3, #18
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	3301      	adds	r3, #1
 801408c:	b298      	uxth	r0, r3
 801408e:	4943      	ldr	r1, [pc, #268]	; (801419c <etharp_tmr+0x14c>)
 8014090:	4613      	mov	r3, r2
 8014092:	005b      	lsls	r3, r3, #1
 8014094:	4413      	add	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	440b      	add	r3, r1
 801409a:	3312      	adds	r3, #18
 801409c:	4602      	mov	r2, r0
 801409e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140a0:	79fa      	ldrb	r2, [r7, #7]
 80140a2:	493e      	ldr	r1, [pc, #248]	; (801419c <etharp_tmr+0x14c>)
 80140a4:	4613      	mov	r3, r2
 80140a6:	005b      	lsls	r3, r3, #1
 80140a8:	4413      	add	r3, r2
 80140aa:	00db      	lsls	r3, r3, #3
 80140ac:	440b      	add	r3, r1
 80140ae:	3312      	adds	r3, #18
 80140b0:	881b      	ldrh	r3, [r3, #0]
 80140b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80140b6:	d215      	bcs.n	80140e4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80140b8:	79fa      	ldrb	r2, [r7, #7]
 80140ba:	4938      	ldr	r1, [pc, #224]	; (801419c <etharp_tmr+0x14c>)
 80140bc:	4613      	mov	r3, r2
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	4413      	add	r3, r2
 80140c2:	00db      	lsls	r3, r3, #3
 80140c4:	440b      	add	r3, r1
 80140c6:	3314      	adds	r3, #20
 80140c8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140ca:	2b01      	cmp	r3, #1
 80140cc:	d10f      	bne.n	80140ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80140ce:	79fa      	ldrb	r2, [r7, #7]
 80140d0:	4932      	ldr	r1, [pc, #200]	; (801419c <etharp_tmr+0x14c>)
 80140d2:	4613      	mov	r3, r2
 80140d4:	005b      	lsls	r3, r3, #1
 80140d6:	4413      	add	r3, r2
 80140d8:	00db      	lsls	r3, r3, #3
 80140da:	440b      	add	r3, r1
 80140dc:	3312      	adds	r3, #18
 80140de:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80140e0:	2b04      	cmp	r3, #4
 80140e2:	d904      	bls.n	80140ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80140e4:	79fb      	ldrb	r3, [r7, #7]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7ff ff80 	bl	8013fec <etharp_free_entry>
 80140ec:	e04a      	b.n	8014184 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80140ee:	79fa      	ldrb	r2, [r7, #7]
 80140f0:	492a      	ldr	r1, [pc, #168]	; (801419c <etharp_tmr+0x14c>)
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	3314      	adds	r3, #20
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	2b03      	cmp	r3, #3
 8014102:	d10a      	bne.n	801411a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014104:	79fa      	ldrb	r2, [r7, #7]
 8014106:	4925      	ldr	r1, [pc, #148]	; (801419c <etharp_tmr+0x14c>)
 8014108:	4613      	mov	r3, r2
 801410a:	005b      	lsls	r3, r3, #1
 801410c:	4413      	add	r3, r2
 801410e:	00db      	lsls	r3, r3, #3
 8014110:	440b      	add	r3, r1
 8014112:	3314      	adds	r3, #20
 8014114:	2204      	movs	r2, #4
 8014116:	701a      	strb	r2, [r3, #0]
 8014118:	e034      	b.n	8014184 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801411a:	79fa      	ldrb	r2, [r7, #7]
 801411c:	491f      	ldr	r1, [pc, #124]	; (801419c <etharp_tmr+0x14c>)
 801411e:	4613      	mov	r3, r2
 8014120:	005b      	lsls	r3, r3, #1
 8014122:	4413      	add	r3, r2
 8014124:	00db      	lsls	r3, r3, #3
 8014126:	440b      	add	r3, r1
 8014128:	3314      	adds	r3, #20
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b04      	cmp	r3, #4
 801412e:	d10a      	bne.n	8014146 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014130:	79fa      	ldrb	r2, [r7, #7]
 8014132:	491a      	ldr	r1, [pc, #104]	; (801419c <etharp_tmr+0x14c>)
 8014134:	4613      	mov	r3, r2
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	4413      	add	r3, r2
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	440b      	add	r3, r1
 801413e:	3314      	adds	r3, #20
 8014140:	2202      	movs	r2, #2
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	e01e      	b.n	8014184 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014146:	79fa      	ldrb	r2, [r7, #7]
 8014148:	4914      	ldr	r1, [pc, #80]	; (801419c <etharp_tmr+0x14c>)
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	3314      	adds	r3, #20
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d113      	bne.n	8014184 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801415c:	79fa      	ldrb	r2, [r7, #7]
 801415e:	490f      	ldr	r1, [pc, #60]	; (801419c <etharp_tmr+0x14c>)
 8014160:	4613      	mov	r3, r2
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	4413      	add	r3, r2
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	440b      	add	r3, r1
 801416a:	3308      	adds	r3, #8
 801416c:	6818      	ldr	r0, [r3, #0]
 801416e:	79fa      	ldrb	r2, [r7, #7]
 8014170:	4613      	mov	r3, r2
 8014172:	005b      	lsls	r3, r3, #1
 8014174:	4413      	add	r3, r2
 8014176:	00db      	lsls	r3, r3, #3
 8014178:	4a08      	ldr	r2, [pc, #32]	; (801419c <etharp_tmr+0x14c>)
 801417a:	4413      	add	r3, r2
 801417c:	3304      	adds	r3, #4
 801417e:	4619      	mov	r1, r3
 8014180:	f000 fe3c 	bl	8014dfc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014184:	79fb      	ldrb	r3, [r7, #7]
 8014186:	3301      	adds	r3, #1
 8014188:	71fb      	strb	r3, [r7, #7]
 801418a:	79fb      	ldrb	r3, [r7, #7]
 801418c:	2b09      	cmp	r3, #9
 801418e:	f67f af65 	bls.w	801405c <etharp_tmr+0xc>
      }
    }
  }
}
 8014192:	bf00      	nop
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	20008c8c 	.word	0x20008c8c

080141a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b088      	sub	sp, #32
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	460b      	mov	r3, r1
 80141aa:	607a      	str	r2, [r7, #4]
 80141ac:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80141ae:	230a      	movs	r3, #10
 80141b0:	77fb      	strb	r3, [r7, #31]
 80141b2:	230a      	movs	r3, #10
 80141b4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80141b6:	230a      	movs	r3, #10
 80141b8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80141be:	230a      	movs	r3, #10
 80141c0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80141c2:	2300      	movs	r3, #0
 80141c4:	833b      	strh	r3, [r7, #24]
 80141c6:	2300      	movs	r3, #0
 80141c8:	82fb      	strh	r3, [r7, #22]
 80141ca:	2300      	movs	r3, #0
 80141cc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141ce:	2300      	movs	r3, #0
 80141d0:	773b      	strb	r3, [r7, #28]
 80141d2:	e093      	b.n	80142fc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80141d4:	7f3a      	ldrb	r2, [r7, #28]
 80141d6:	4990      	ldr	r1, [pc, #576]	; (8014418 <etharp_find_entry+0x278>)
 80141d8:	4613      	mov	r3, r2
 80141da:	005b      	lsls	r3, r3, #1
 80141dc:	4413      	add	r3, r2
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	440b      	add	r3, r1
 80141e2:	3314      	adds	r3, #20
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80141e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80141ec:	2b0a      	cmp	r3, #10
 80141ee:	d105      	bne.n	80141fc <etharp_find_entry+0x5c>
 80141f0:	7cfb      	ldrb	r3, [r7, #19]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d102      	bne.n	80141fc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80141f6:	7f3b      	ldrb	r3, [r7, #28]
 80141f8:	777b      	strb	r3, [r7, #29]
 80141fa:	e07c      	b.n	80142f6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80141fc:	7cfb      	ldrb	r3, [r7, #19]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d079      	beq.n	80142f6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014202:	7cfb      	ldrb	r3, [r7, #19]
 8014204:	2b01      	cmp	r3, #1
 8014206:	d009      	beq.n	801421c <etharp_find_entry+0x7c>
 8014208:	7cfb      	ldrb	r3, [r7, #19]
 801420a:	2b01      	cmp	r3, #1
 801420c:	d806      	bhi.n	801421c <etharp_find_entry+0x7c>
 801420e:	4b83      	ldr	r3, [pc, #524]	; (801441c <etharp_find_entry+0x27c>)
 8014210:	f44f 7293 	mov.w	r2, #294	; 0x126
 8014214:	4982      	ldr	r1, [pc, #520]	; (8014420 <etharp_find_entry+0x280>)
 8014216:	4883      	ldr	r0, [pc, #524]	; (8014424 <etharp_find_entry+0x284>)
 8014218:	f002 fb50 	bl	80168bc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00f      	beq.n	8014242 <etharp_find_entry+0xa2>
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6819      	ldr	r1, [r3, #0]
 8014226:	7f3a      	ldrb	r2, [r7, #28]
 8014228:	487b      	ldr	r0, [pc, #492]	; (8014418 <etharp_find_entry+0x278>)
 801422a:	4613      	mov	r3, r2
 801422c:	005b      	lsls	r3, r3, #1
 801422e:	4413      	add	r3, r2
 8014230:	00db      	lsls	r3, r3, #3
 8014232:	4403      	add	r3, r0
 8014234:	3304      	adds	r3, #4
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4299      	cmp	r1, r3
 801423a:	d102      	bne.n	8014242 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801423c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014240:	e0e5      	b.n	801440e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014242:	7cfb      	ldrb	r3, [r7, #19]
 8014244:	2b01      	cmp	r3, #1
 8014246:	d13b      	bne.n	80142c0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014248:	7f3a      	ldrb	r2, [r7, #28]
 801424a:	4973      	ldr	r1, [pc, #460]	; (8014418 <etharp_find_entry+0x278>)
 801424c:	4613      	mov	r3, r2
 801424e:	005b      	lsls	r3, r3, #1
 8014250:	4413      	add	r3, r2
 8014252:	00db      	lsls	r3, r3, #3
 8014254:	440b      	add	r3, r1
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d018      	beq.n	801428e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801425c:	7f3a      	ldrb	r2, [r7, #28]
 801425e:	496e      	ldr	r1, [pc, #440]	; (8014418 <etharp_find_entry+0x278>)
 8014260:	4613      	mov	r3, r2
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	4413      	add	r3, r2
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	440b      	add	r3, r1
 801426a:	3312      	adds	r3, #18
 801426c:	881b      	ldrh	r3, [r3, #0]
 801426e:	8b3a      	ldrh	r2, [r7, #24]
 8014270:	429a      	cmp	r2, r3
 8014272:	d840      	bhi.n	80142f6 <etharp_find_entry+0x156>
            old_queue = i;
 8014274:	7f3b      	ldrb	r3, [r7, #28]
 8014276:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8014278:	7f3a      	ldrb	r2, [r7, #28]
 801427a:	4967      	ldr	r1, [pc, #412]	; (8014418 <etharp_find_entry+0x278>)
 801427c:	4613      	mov	r3, r2
 801427e:	005b      	lsls	r3, r3, #1
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	3312      	adds	r3, #18
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	833b      	strh	r3, [r7, #24]
 801428c:	e033      	b.n	80142f6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801428e:	7f3a      	ldrb	r2, [r7, #28]
 8014290:	4961      	ldr	r1, [pc, #388]	; (8014418 <etharp_find_entry+0x278>)
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3312      	adds	r3, #18
 801429e:	881b      	ldrh	r3, [r3, #0]
 80142a0:	8afa      	ldrh	r2, [r7, #22]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d827      	bhi.n	80142f6 <etharp_find_entry+0x156>
            old_pending = i;
 80142a6:	7f3b      	ldrb	r3, [r7, #28]
 80142a8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80142aa:	7f3a      	ldrb	r2, [r7, #28]
 80142ac:	495a      	ldr	r1, [pc, #360]	; (8014418 <etharp_find_entry+0x278>)
 80142ae:	4613      	mov	r3, r2
 80142b0:	005b      	lsls	r3, r3, #1
 80142b2:	4413      	add	r3, r2
 80142b4:	00db      	lsls	r3, r3, #3
 80142b6:	440b      	add	r3, r1
 80142b8:	3312      	adds	r3, #18
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	82fb      	strh	r3, [r7, #22]
 80142be:	e01a      	b.n	80142f6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80142c0:	7cfb      	ldrb	r3, [r7, #19]
 80142c2:	2b01      	cmp	r3, #1
 80142c4:	d917      	bls.n	80142f6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80142c6:	7f3a      	ldrb	r2, [r7, #28]
 80142c8:	4953      	ldr	r1, [pc, #332]	; (8014418 <etharp_find_entry+0x278>)
 80142ca:	4613      	mov	r3, r2
 80142cc:	005b      	lsls	r3, r3, #1
 80142ce:	4413      	add	r3, r2
 80142d0:	00db      	lsls	r3, r3, #3
 80142d2:	440b      	add	r3, r1
 80142d4:	3312      	adds	r3, #18
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	8aba      	ldrh	r2, [r7, #20]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d80b      	bhi.n	80142f6 <etharp_find_entry+0x156>
            old_stable = i;
 80142de:	7f3b      	ldrb	r3, [r7, #28]
 80142e0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80142e2:	7f3a      	ldrb	r2, [r7, #28]
 80142e4:	494c      	ldr	r1, [pc, #304]	; (8014418 <etharp_find_entry+0x278>)
 80142e6:	4613      	mov	r3, r2
 80142e8:	005b      	lsls	r3, r3, #1
 80142ea:	4413      	add	r3, r2
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	440b      	add	r3, r1
 80142f0:	3312      	adds	r3, #18
 80142f2:	881b      	ldrh	r3, [r3, #0]
 80142f4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142f6:	7f3b      	ldrb	r3, [r7, #28]
 80142f8:	3301      	adds	r3, #1
 80142fa:	773b      	strb	r3, [r7, #28]
 80142fc:	7f3b      	ldrb	r3, [r7, #28]
 80142fe:	2b09      	cmp	r3, #9
 8014300:	f67f af68 	bls.w	80141d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014304:	7afb      	ldrb	r3, [r7, #11]
 8014306:	f003 0302 	and.w	r3, r3, #2
 801430a:	2b00      	cmp	r3, #0
 801430c:	d108      	bne.n	8014320 <etharp_find_entry+0x180>
 801430e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014312:	2b0a      	cmp	r3, #10
 8014314:	d107      	bne.n	8014326 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014316:	7afb      	ldrb	r3, [r7, #11]
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	2b00      	cmp	r3, #0
 801431e:	d102      	bne.n	8014326 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8014320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014324:	e073      	b.n	801440e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014326:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801432a:	2b09      	cmp	r3, #9
 801432c:	dc02      	bgt.n	8014334 <etharp_find_entry+0x194>
    i = empty;
 801432e:	7f7b      	ldrb	r3, [r7, #29]
 8014330:	773b      	strb	r3, [r7, #28]
 8014332:	e036      	b.n	80143a2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014334:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014338:	2b09      	cmp	r3, #9
 801433a:	dc13      	bgt.n	8014364 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801433c:	7fbb      	ldrb	r3, [r7, #30]
 801433e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014340:	7f3a      	ldrb	r2, [r7, #28]
 8014342:	4935      	ldr	r1, [pc, #212]	; (8014418 <etharp_find_entry+0x278>)
 8014344:	4613      	mov	r3, r2
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	4413      	add	r3, r2
 801434a:	00db      	lsls	r3, r3, #3
 801434c:	440b      	add	r3, r1
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d018      	beq.n	8014386 <etharp_find_entry+0x1e6>
 8014354:	4b31      	ldr	r3, [pc, #196]	; (801441c <etharp_find_entry+0x27c>)
 8014356:	f240 126f 	movw	r2, #367	; 0x16f
 801435a:	4933      	ldr	r1, [pc, #204]	; (8014428 <etharp_find_entry+0x288>)
 801435c:	4831      	ldr	r0, [pc, #196]	; (8014424 <etharp_find_entry+0x284>)
 801435e:	f002 faad 	bl	80168bc <iprintf>
 8014362:	e010      	b.n	8014386 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014364:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014368:	2b09      	cmp	r3, #9
 801436a:	dc02      	bgt.n	8014372 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801436c:	7ffb      	ldrb	r3, [r7, #31]
 801436e:	773b      	strb	r3, [r7, #28]
 8014370:	e009      	b.n	8014386 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014372:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014376:	2b09      	cmp	r3, #9
 8014378:	dc02      	bgt.n	8014380 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801437a:	7efb      	ldrb	r3, [r7, #27]
 801437c:	773b      	strb	r3, [r7, #28]
 801437e:	e002      	b.n	8014386 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8014380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014384:	e043      	b.n	801440e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014386:	7f3b      	ldrb	r3, [r7, #28]
 8014388:	2b09      	cmp	r3, #9
 801438a:	d906      	bls.n	801439a <etharp_find_entry+0x1fa>
 801438c:	4b23      	ldr	r3, [pc, #140]	; (801441c <etharp_find_entry+0x27c>)
 801438e:	f240 1281 	movw	r2, #385	; 0x181
 8014392:	4926      	ldr	r1, [pc, #152]	; (801442c <etharp_find_entry+0x28c>)
 8014394:	4823      	ldr	r0, [pc, #140]	; (8014424 <etharp_find_entry+0x284>)
 8014396:	f002 fa91 	bl	80168bc <iprintf>
    etharp_free_entry(i);
 801439a:	7f3b      	ldrb	r3, [r7, #28]
 801439c:	4618      	mov	r0, r3
 801439e:	f7ff fe25 	bl	8013fec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80143a2:	7f3b      	ldrb	r3, [r7, #28]
 80143a4:	2b09      	cmp	r3, #9
 80143a6:	d906      	bls.n	80143b6 <etharp_find_entry+0x216>
 80143a8:	4b1c      	ldr	r3, [pc, #112]	; (801441c <etharp_find_entry+0x27c>)
 80143aa:	f240 1285 	movw	r2, #389	; 0x185
 80143ae:	491f      	ldr	r1, [pc, #124]	; (801442c <etharp_find_entry+0x28c>)
 80143b0:	481c      	ldr	r0, [pc, #112]	; (8014424 <etharp_find_entry+0x284>)
 80143b2:	f002 fa83 	bl	80168bc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80143b6:	7f3a      	ldrb	r2, [r7, #28]
 80143b8:	4917      	ldr	r1, [pc, #92]	; (8014418 <etharp_find_entry+0x278>)
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	440b      	add	r3, r1
 80143c4:	3314      	adds	r3, #20
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d006      	beq.n	80143da <etharp_find_entry+0x23a>
 80143cc:	4b13      	ldr	r3, [pc, #76]	; (801441c <etharp_find_entry+0x27c>)
 80143ce:	f240 1287 	movw	r2, #391	; 0x187
 80143d2:	4917      	ldr	r1, [pc, #92]	; (8014430 <etharp_find_entry+0x290>)
 80143d4:	4813      	ldr	r0, [pc, #76]	; (8014424 <etharp_find_entry+0x284>)
 80143d6:	f002 fa71 	bl	80168bc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00a      	beq.n	80143f6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80143e0:	7f3a      	ldrb	r2, [r7, #28]
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	6819      	ldr	r1, [r3, #0]
 80143e6:	480c      	ldr	r0, [pc, #48]	; (8014418 <etharp_find_entry+0x278>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	4403      	add	r3, r0
 80143f2:	3304      	adds	r3, #4
 80143f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80143f6:	7f3a      	ldrb	r2, [r7, #28]
 80143f8:	4907      	ldr	r1, [pc, #28]	; (8014418 <etharp_find_entry+0x278>)
 80143fa:	4613      	mov	r3, r2
 80143fc:	005b      	lsls	r3, r3, #1
 80143fe:	4413      	add	r3, r2
 8014400:	00db      	lsls	r3, r3, #3
 8014402:	440b      	add	r3, r1
 8014404:	3312      	adds	r3, #18
 8014406:	2200      	movs	r2, #0
 8014408:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801440a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3720      	adds	r7, #32
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20008c8c 	.word	0x20008c8c
 801441c:	0801a428 	.word	0x0801a428
 8014420:	0801a460 	.word	0x0801a460
 8014424:	0801a4a0 	.word	0x0801a4a0
 8014428:	0801a4c8 	.word	0x0801a4c8
 801442c:	0801a4e0 	.word	0x0801a4e0
 8014430:	0801a4f4 	.word	0x0801a4f4

08014434 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b088      	sub	sp, #32
 8014438:	af02      	add	r7, sp, #8
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
 8014440:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014448:	2b06      	cmp	r3, #6
 801444a:	d006      	beq.n	801445a <etharp_update_arp_entry+0x26>
 801444c:	4b48      	ldr	r3, [pc, #288]	; (8014570 <etharp_update_arp_entry+0x13c>)
 801444e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014452:	4948      	ldr	r1, [pc, #288]	; (8014574 <etharp_update_arp_entry+0x140>)
 8014454:	4848      	ldr	r0, [pc, #288]	; (8014578 <etharp_update_arp_entry+0x144>)
 8014456:	f002 fa31 	bl	80168bc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d012      	beq.n	8014486 <etharp_update_arp_entry+0x52>
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d00e      	beq.n	8014486 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	68f9      	ldr	r1, [r7, #12]
 801446e:	4618      	mov	r0, r3
 8014470:	f001 f8fc 	bl	801566c <ip4_addr_isbroadcast_u32>
 8014474:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014476:	2b00      	cmp	r3, #0
 8014478:	d105      	bne.n	8014486 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014482:	2be0      	cmp	r3, #224	; 0xe0
 8014484:	d102      	bne.n	801448c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014486:	f06f 030f 	mvn.w	r3, #15
 801448a:	e06c      	b.n	8014566 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801448c:	78fb      	ldrb	r3, [r7, #3]
 801448e:	68fa      	ldr	r2, [r7, #12]
 8014490:	4619      	mov	r1, r3
 8014492:	68b8      	ldr	r0, [r7, #8]
 8014494:	f7ff fe84 	bl	80141a0 <etharp_find_entry>
 8014498:	4603      	mov	r3, r0
 801449a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801449c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	da02      	bge.n	80144aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80144a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144a8:	e05d      	b.n	8014566 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80144aa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80144ae:	4933      	ldr	r1, [pc, #204]	; (801457c <etharp_update_arp_entry+0x148>)
 80144b0:	4613      	mov	r3, r2
 80144b2:	005b      	lsls	r3, r3, #1
 80144b4:	4413      	add	r3, r2
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	440b      	add	r3, r1
 80144ba:	3314      	adds	r3, #20
 80144bc:	2202      	movs	r2, #2
 80144be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80144c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80144c4:	492d      	ldr	r1, [pc, #180]	; (801457c <etharp_update_arp_entry+0x148>)
 80144c6:	4613      	mov	r3, r2
 80144c8:	005b      	lsls	r3, r3, #1
 80144ca:	4413      	add	r3, r2
 80144cc:	00db      	lsls	r3, r3, #3
 80144ce:	440b      	add	r3, r1
 80144d0:	3308      	adds	r3, #8
 80144d2:	68fa      	ldr	r2, [r7, #12]
 80144d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80144d6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80144da:	4613      	mov	r3, r2
 80144dc:	005b      	lsls	r3, r3, #1
 80144de:	4413      	add	r3, r2
 80144e0:	00db      	lsls	r3, r3, #3
 80144e2:	3308      	adds	r3, #8
 80144e4:	4a25      	ldr	r2, [pc, #148]	; (801457c <etharp_update_arp_entry+0x148>)
 80144e6:	4413      	add	r3, r2
 80144e8:	3304      	adds	r3, #4
 80144ea:	2206      	movs	r2, #6
 80144ec:	6879      	ldr	r1, [r7, #4]
 80144ee:	4618      	mov	r0, r3
 80144f0:	f002 f9d1 	bl	8016896 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80144f8:	4920      	ldr	r1, [pc, #128]	; (801457c <etharp_update_arp_entry+0x148>)
 80144fa:	4613      	mov	r3, r2
 80144fc:	005b      	lsls	r3, r3, #1
 80144fe:	4413      	add	r3, r2
 8014500:	00db      	lsls	r3, r3, #3
 8014502:	440b      	add	r3, r1
 8014504:	3312      	adds	r3, #18
 8014506:	2200      	movs	r2, #0
 8014508:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801450a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801450e:	491b      	ldr	r1, [pc, #108]	; (801457c <etharp_update_arp_entry+0x148>)
 8014510:	4613      	mov	r3, r2
 8014512:	005b      	lsls	r3, r3, #1
 8014514:	4413      	add	r3, r2
 8014516:	00db      	lsls	r3, r3, #3
 8014518:	440b      	add	r3, r1
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d021      	beq.n	8014564 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014520:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014524:	4915      	ldr	r1, [pc, #84]	; (801457c <etharp_update_arp_entry+0x148>)
 8014526:	4613      	mov	r3, r2
 8014528:	005b      	lsls	r3, r3, #1
 801452a:	4413      	add	r3, r2
 801452c:	00db      	lsls	r3, r3, #3
 801452e:	440b      	add	r3, r1
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014534:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014538:	4910      	ldr	r1, [pc, #64]	; (801457c <etharp_update_arp_entry+0x148>)
 801453a:	4613      	mov	r3, r2
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	4413      	add	r3, r2
 8014540:	00db      	lsls	r3, r3, #3
 8014542:	440b      	add	r3, r1
 8014544:	2200      	movs	r2, #0
 8014546:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801454e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014552:	9300      	str	r3, [sp, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6939      	ldr	r1, [r7, #16]
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f001 ff29 	bl	80163b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801455e:	6938      	ldr	r0, [r7, #16]
 8014560:	f7f7 fc9c 	bl	800be9c <pbuf_free>
  }
  return ERR_OK;
 8014564:	2300      	movs	r3, #0
}
 8014566:	4618      	mov	r0, r3
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	0801a428 	.word	0x0801a428
 8014574:	0801a520 	.word	0x0801a520
 8014578:	0801a4a0 	.word	0x0801a4a0
 801457c:	20008c8c 	.word	0x20008c8c

08014580 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014588:	2300      	movs	r3, #0
 801458a:	73fb      	strb	r3, [r7, #15]
 801458c:	e01f      	b.n	80145ce <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801458e:	7bfa      	ldrb	r2, [r7, #15]
 8014590:	4912      	ldr	r1, [pc, #72]	; (80145dc <etharp_cleanup_netif+0x5c>)
 8014592:	4613      	mov	r3, r2
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	4413      	add	r3, r2
 8014598:	00db      	lsls	r3, r3, #3
 801459a:	440b      	add	r3, r1
 801459c:	3314      	adds	r3, #20
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80145a2:	7bbb      	ldrb	r3, [r7, #14]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d00f      	beq.n	80145c8 <etharp_cleanup_netif+0x48>
 80145a8:	7bfa      	ldrb	r2, [r7, #15]
 80145aa:	490c      	ldr	r1, [pc, #48]	; (80145dc <etharp_cleanup_netif+0x5c>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	3308      	adds	r3, #8
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d103      	bne.n	80145c8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80145c0:	7bfb      	ldrb	r3, [r7, #15]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7ff fd12 	bl	8013fec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145c8:	7bfb      	ldrb	r3, [r7, #15]
 80145ca:	3301      	adds	r3, #1
 80145cc:	73fb      	strb	r3, [r7, #15]
 80145ce:	7bfb      	ldrb	r3, [r7, #15]
 80145d0:	2b09      	cmp	r3, #9
 80145d2:	d9dc      	bls.n	801458e <etharp_cleanup_netif+0xe>
    }
  }
}
 80145d4:	bf00      	nop
 80145d6:	3710      	adds	r7, #16
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	20008c8c 	.word	0x20008c8c

080145e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80145e0:	b5b0      	push	{r4, r5, r7, lr}
 80145e2:	b08a      	sub	sp, #40	; 0x28
 80145e4:	af04      	add	r7, sp, #16
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d107      	bne.n	8014600 <etharp_input+0x20>
 80145f0:	4b3f      	ldr	r3, [pc, #252]	; (80146f0 <etharp_input+0x110>)
 80145f2:	f44f 7222 	mov.w	r2, #648	; 0x288
 80145f6:	493f      	ldr	r1, [pc, #252]	; (80146f4 <etharp_input+0x114>)
 80145f8:	483f      	ldr	r0, [pc, #252]	; (80146f8 <etharp_input+0x118>)
 80145fa:	f002 f95f 	bl	80168bc <iprintf>
 80145fe:	e074      	b.n	80146ea <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	b29b      	uxth	r3, r3
 801460c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014610:	d10c      	bne.n	801462c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8014616:	2b06      	cmp	r3, #6
 8014618:	d108      	bne.n	801462c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801461e:	2b04      	cmp	r3, #4
 8014620:	d104      	bne.n	801462c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	885b      	ldrh	r3, [r3, #2]
 8014626:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014628:	2b08      	cmp	r3, #8
 801462a:	d003      	beq.n	8014634 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7f7 fc35 	bl	800be9c <pbuf_free>
    return;
 8014632:	e05a      	b.n	80146ea <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	330e      	adds	r3, #14
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	3318      	adds	r3, #24
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	3304      	adds	r3, #4
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d102      	bne.n	8014654 <etharp_input+0x74>
    for_us = 0;
 801464e:	2300      	movs	r3, #0
 8014650:	75fb      	strb	r3, [r7, #23]
 8014652:	e009      	b.n	8014668 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014654:	68ba      	ldr	r2, [r7, #8]
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	3304      	adds	r3, #4
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	429a      	cmp	r2, r3
 801465e:	bf0c      	ite	eq
 8014660:	2301      	moveq	r3, #1
 8014662:	2300      	movne	r3, #0
 8014664:	b2db      	uxtb	r3, r3
 8014666:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014668:	693b      	ldr	r3, [r7, #16]
 801466a:	f103 0208 	add.w	r2, r3, #8
 801466e:	7dfb      	ldrb	r3, [r7, #23]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d001      	beq.n	8014678 <etharp_input+0x98>
 8014674:	2301      	movs	r3, #1
 8014676:	e000      	b.n	801467a <etharp_input+0x9a>
 8014678:	2302      	movs	r3, #2
 801467a:	f107 010c 	add.w	r1, r7, #12
 801467e:	6838      	ldr	r0, [r7, #0]
 8014680:	f7ff fed8 	bl	8014434 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014684:	693b      	ldr	r3, [r7, #16]
 8014686:	88db      	ldrh	r3, [r3, #6]
 8014688:	b29b      	uxth	r3, r3
 801468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801468e:	d003      	beq.n	8014698 <etharp_input+0xb8>
 8014690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014694:	d01e      	beq.n	80146d4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8014696:	e025      	b.n	80146e4 <etharp_input+0x104>
    if (for_us) {
 8014698:	7dfb      	ldrb	r3, [r7, #23]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d021      	beq.n	80146e2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80146b4:	693a      	ldr	r2, [r7, #16]
 80146b6:	3208      	adds	r2, #8
      etharp_raw(netif,
 80146b8:	2102      	movs	r1, #2
 80146ba:	9103      	str	r1, [sp, #12]
 80146bc:	f107 010c 	add.w	r1, r7, #12
 80146c0:	9102      	str	r1, [sp, #8]
 80146c2:	9201      	str	r2, [sp, #4]
 80146c4:	9300      	str	r3, [sp, #0]
 80146c6:	462b      	mov	r3, r5
 80146c8:	4622      	mov	r2, r4
 80146ca:	4601      	mov	r1, r0
 80146cc:	6838      	ldr	r0, [r7, #0]
 80146ce:	f000 fae7 	bl	8014ca0 <etharp_raw>
    break;
 80146d2:	e006      	b.n	80146e2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80146d4:	f107 030c 	add.w	r3, r7, #12
 80146d8:	4619      	mov	r1, r3
 80146da:	6838      	ldr	r0, [r7, #0]
 80146dc:	f7fe f980 	bl	80129e0 <dhcp_arp_reply>
    break;
 80146e0:	e000      	b.n	80146e4 <etharp_input+0x104>
    break;
 80146e2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7f7 fbd9 	bl	800be9c <pbuf_free>
}
 80146ea:	3718      	adds	r7, #24
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bdb0      	pop	{r4, r5, r7, pc}
 80146f0:	0801a428 	.word	0x0801a428
 80146f4:	0801a578 	.word	0x0801a578
 80146f8:	0801a4a0 	.word	0x0801a4a0

080146fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af02      	add	r7, sp, #8
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	4613      	mov	r3, r2
 8014708:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801470a:	79fa      	ldrb	r2, [r7, #7]
 801470c:	4944      	ldr	r1, [pc, #272]	; (8014820 <etharp_output_to_arp_index+0x124>)
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	00db      	lsls	r3, r3, #3
 8014716:	440b      	add	r3, r1
 8014718:	3314      	adds	r3, #20
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	2b01      	cmp	r3, #1
 801471e:	d806      	bhi.n	801472e <etharp_output_to_arp_index+0x32>
 8014720:	4b40      	ldr	r3, [pc, #256]	; (8014824 <etharp_output_to_arp_index+0x128>)
 8014722:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014726:	4940      	ldr	r1, [pc, #256]	; (8014828 <etharp_output_to_arp_index+0x12c>)
 8014728:	4840      	ldr	r0, [pc, #256]	; (801482c <etharp_output_to_arp_index+0x130>)
 801472a:	f002 f8c7 	bl	80168bc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801472e:	79fa      	ldrb	r2, [r7, #7]
 8014730:	493b      	ldr	r1, [pc, #236]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	440b      	add	r3, r1
 801473c:	3314      	adds	r3, #20
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	2b02      	cmp	r3, #2
 8014742:	d153      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014744:	79fa      	ldrb	r2, [r7, #7]
 8014746:	4936      	ldr	r1, [pc, #216]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014748:	4613      	mov	r3, r2
 801474a:	005b      	lsls	r3, r3, #1
 801474c:	4413      	add	r3, r2
 801474e:	00db      	lsls	r3, r3, #3
 8014750:	440b      	add	r3, r1
 8014752:	3312      	adds	r3, #18
 8014754:	881b      	ldrh	r3, [r3, #0]
 8014756:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801475a:	d919      	bls.n	8014790 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801475c:	79fa      	ldrb	r2, [r7, #7]
 801475e:	4613      	mov	r3, r2
 8014760:	005b      	lsls	r3, r3, #1
 8014762:	4413      	add	r3, r2
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	4a2e      	ldr	r2, [pc, #184]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014768:	4413      	add	r3, r2
 801476a:	3304      	adds	r3, #4
 801476c:	4619      	mov	r1, r3
 801476e:	68f8      	ldr	r0, [r7, #12]
 8014770:	f000 fb44 	bl	8014dfc <etharp_request>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d138      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801477a:	79fa      	ldrb	r2, [r7, #7]
 801477c:	4928      	ldr	r1, [pc, #160]	; (8014820 <etharp_output_to_arp_index+0x124>)
 801477e:	4613      	mov	r3, r2
 8014780:	005b      	lsls	r3, r3, #1
 8014782:	4413      	add	r3, r2
 8014784:	00db      	lsls	r3, r3, #3
 8014786:	440b      	add	r3, r1
 8014788:	3314      	adds	r3, #20
 801478a:	2203      	movs	r2, #3
 801478c:	701a      	strb	r2, [r3, #0]
 801478e:	e02d      	b.n	80147ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014790:	79fa      	ldrb	r2, [r7, #7]
 8014792:	4923      	ldr	r1, [pc, #140]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	440b      	add	r3, r1
 801479e:	3312      	adds	r3, #18
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80147a6:	d321      	bcc.n	80147ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80147a8:	79fa      	ldrb	r2, [r7, #7]
 80147aa:	4613      	mov	r3, r2
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4413      	add	r3, r2
 80147b0:	00db      	lsls	r3, r3, #3
 80147b2:	4a1b      	ldr	r2, [pc, #108]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147b4:	4413      	add	r3, r2
 80147b6:	1d19      	adds	r1, r3, #4
 80147b8:	79fa      	ldrb	r2, [r7, #7]
 80147ba:	4613      	mov	r3, r2
 80147bc:	005b      	lsls	r3, r3, #1
 80147be:	4413      	add	r3, r2
 80147c0:	00db      	lsls	r3, r3, #3
 80147c2:	3308      	adds	r3, #8
 80147c4:	4a16      	ldr	r2, [pc, #88]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147c6:	4413      	add	r3, r2
 80147c8:	3304      	adds	r3, #4
 80147ca:	461a      	mov	r2, r3
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f000 faf3 	bl	8014db8 <etharp_request_dst>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d109      	bne.n	80147ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147d8:	79fa      	ldrb	r2, [r7, #7]
 80147da:	4911      	ldr	r1, [pc, #68]	; (8014820 <etharp_output_to_arp_index+0x124>)
 80147dc:	4613      	mov	r3, r2
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	4413      	add	r3, r2
 80147e2:	00db      	lsls	r3, r3, #3
 80147e4:	440b      	add	r3, r1
 80147e6:	3314      	adds	r3, #20
 80147e8:	2203      	movs	r2, #3
 80147ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80147f2:	79fa      	ldrb	r2, [r7, #7]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	3308      	adds	r3, #8
 80147fe:	4a08      	ldr	r2, [pc, #32]	; (8014820 <etharp_output_to_arp_index+0x124>)
 8014800:	4413      	add	r3, r2
 8014802:	1d1a      	adds	r2, r3, #4
 8014804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014808:	9300      	str	r3, [sp, #0]
 801480a:	4613      	mov	r3, r2
 801480c:	460a      	mov	r2, r1
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f001 fdcd 	bl	80163b0 <ethernet_output>
 8014816:	4603      	mov	r3, r0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3710      	adds	r7, #16
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	20008c8c 	.word	0x20008c8c
 8014824:	0801a428 	.word	0x0801a428
 8014828:	0801a598 	.word	0x0801a598
 801482c:	0801a4a0 	.word	0x0801a4a0

08014830 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b08a      	sub	sp, #40	; 0x28
 8014834:	af02      	add	r7, sp, #8
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <etharp_output+0x24>
 8014846:	4b69      	ldr	r3, [pc, #420]	; (80149ec <etharp_output+0x1bc>)
 8014848:	f240 321b 	movw	r2, #795	; 0x31b
 801484c:	4968      	ldr	r1, [pc, #416]	; (80149f0 <etharp_output+0x1c0>)
 801484e:	4869      	ldr	r0, [pc, #420]	; (80149f4 <etharp_output+0x1c4>)
 8014850:	f002 f834 	bl	80168bc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <etharp_output+0x38>
 801485a:	4b64      	ldr	r3, [pc, #400]	; (80149ec <etharp_output+0x1bc>)
 801485c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014860:	4965      	ldr	r1, [pc, #404]	; (80149f8 <etharp_output+0x1c8>)
 8014862:	4864      	ldr	r0, [pc, #400]	; (80149f4 <etharp_output+0x1c4>)
 8014864:	f002 f82a 	bl	80168bc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <etharp_output+0x4c>
 801486e:	4b5f      	ldr	r3, [pc, #380]	; (80149ec <etharp_output+0x1bc>)
 8014870:	f240 321d 	movw	r2, #797	; 0x31d
 8014874:	4961      	ldr	r1, [pc, #388]	; (80149fc <etharp_output+0x1cc>)
 8014876:	485f      	ldr	r0, [pc, #380]	; (80149f4 <etharp_output+0x1c4>)
 8014878:	f002 f820 	bl	80168bc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	68f9      	ldr	r1, [r7, #12]
 8014882:	4618      	mov	r0, r3
 8014884:	f000 fef2 	bl	801566c <ip4_addr_isbroadcast_u32>
 8014888:	4603      	mov	r3, r0
 801488a:	2b00      	cmp	r3, #0
 801488c:	d002      	beq.n	8014894 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801488e:	4b5c      	ldr	r3, [pc, #368]	; (8014a00 <etharp_output+0x1d0>)
 8014890:	61fb      	str	r3, [r7, #28]
 8014892:	e09b      	b.n	80149cc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801489c:	2be0      	cmp	r3, #224	; 0xe0
 801489e:	d118      	bne.n	80148d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80148a0:	2301      	movs	r3, #1
 80148a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80148a4:	2300      	movs	r3, #0
 80148a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80148a8:	235e      	movs	r3, #94	; 0x5e
 80148aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3301      	adds	r3, #1
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	3302      	adds	r3, #2
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	3303      	adds	r3, #3
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80148ca:	f107 0310 	add.w	r3, r7, #16
 80148ce:	61fb      	str	r3, [r7, #28]
 80148d0:	e07c      	b.n	80149cc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	3304      	adds	r3, #4
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	405a      	eors	r2, r3
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	3308      	adds	r3, #8
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4013      	ands	r3, r2
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d012      	beq.n	8014910 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80148f4:	4293      	cmp	r3, r2
 80148f6:	d00b      	beq.n	8014910 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	330c      	adds	r3, #12
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d003      	beq.n	801490a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	330c      	adds	r3, #12
 8014906:	61bb      	str	r3, [r7, #24]
 8014908:	e002      	b.n	8014910 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801490a:	f06f 0303 	mvn.w	r3, #3
 801490e:	e069      	b.n	80149e4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014910:	4b3c      	ldr	r3, [pc, #240]	; (8014a04 <etharp_output+0x1d4>)
 8014912:	781b      	ldrb	r3, [r3, #0]
 8014914:	4619      	mov	r1, r3
 8014916:	4a3c      	ldr	r2, [pc, #240]	; (8014a08 <etharp_output+0x1d8>)
 8014918:	460b      	mov	r3, r1
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	440b      	add	r3, r1
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	4413      	add	r3, r2
 8014922:	3314      	adds	r3, #20
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d917      	bls.n	801495a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801492a:	69bb      	ldr	r3, [r7, #24]
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	4b35      	ldr	r3, [pc, #212]	; (8014a04 <etharp_output+0x1d4>)
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	4618      	mov	r0, r3
 8014934:	4934      	ldr	r1, [pc, #208]	; (8014a08 <etharp_output+0x1d8>)
 8014936:	4603      	mov	r3, r0
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4403      	add	r3, r0
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	440b      	add	r3, r1
 8014940:	3304      	adds	r3, #4
 8014942:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014944:	429a      	cmp	r2, r3
 8014946:	d108      	bne.n	801495a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014948:	4b2e      	ldr	r3, [pc, #184]	; (8014a04 <etharp_output+0x1d4>)
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	461a      	mov	r2, r3
 801494e:	68b9      	ldr	r1, [r7, #8]
 8014950:	68f8      	ldr	r0, [r7, #12]
 8014952:	f7ff fed3 	bl	80146fc <etharp_output_to_arp_index>
 8014956:	4603      	mov	r3, r0
 8014958:	e044      	b.n	80149e4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801495a:	2300      	movs	r3, #0
 801495c:	75fb      	strb	r3, [r7, #23]
 801495e:	e02a      	b.n	80149b6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014960:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014964:	4928      	ldr	r1, [pc, #160]	; (8014a08 <etharp_output+0x1d8>)
 8014966:	4613      	mov	r3, r2
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	4413      	add	r3, r2
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	440b      	add	r3, r1
 8014970:	3314      	adds	r3, #20
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	2b01      	cmp	r3, #1
 8014976:	d918      	bls.n	80149aa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	6819      	ldr	r1, [r3, #0]
 801497c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014980:	4821      	ldr	r0, [pc, #132]	; (8014a08 <etharp_output+0x1d8>)
 8014982:	4613      	mov	r3, r2
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	4413      	add	r3, r2
 8014988:	00db      	lsls	r3, r3, #3
 801498a:	4403      	add	r3, r0
 801498c:	3304      	adds	r3, #4
 801498e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014990:	4299      	cmp	r1, r3
 8014992:	d10a      	bne.n	80149aa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8014994:	7dfa      	ldrb	r2, [r7, #23]
 8014996:	4b1b      	ldr	r3, [pc, #108]	; (8014a04 <etharp_output+0x1d4>)
 8014998:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801499a:	7dfb      	ldrb	r3, [r7, #23]
 801499c:	461a      	mov	r2, r3
 801499e:	68b9      	ldr	r1, [r7, #8]
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7ff feab 	bl	80146fc <etharp_output_to_arp_index>
 80149a6:	4603      	mov	r3, r0
 80149a8:	e01c      	b.n	80149e4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80149ae:	b2db      	uxtb	r3, r3
 80149b0:	3301      	adds	r3, #1
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	75fb      	strb	r3, [r7, #23]
 80149b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80149ba:	2b09      	cmp	r3, #9
 80149bc:	ddd0      	ble.n	8014960 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80149be:	68ba      	ldr	r2, [r7, #8]
 80149c0:	69b9      	ldr	r1, [r7, #24]
 80149c2:	68f8      	ldr	r0, [r7, #12]
 80149c4:	f000 f822 	bl	8014a0c <etharp_query>
 80149c8:	4603      	mov	r3, r0
 80149ca:	e00b      	b.n	80149e4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80149d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149d6:	9300      	str	r3, [sp, #0]
 80149d8:	69fb      	ldr	r3, [r7, #28]
 80149da:	68b9      	ldr	r1, [r7, #8]
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f001 fce7 	bl	80163b0 <ethernet_output>
 80149e2:	4603      	mov	r3, r0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3720      	adds	r7, #32
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}
 80149ec:	0801a428 	.word	0x0801a428
 80149f0:	0801a578 	.word	0x0801a578
 80149f4:	0801a4a0 	.word	0x0801a4a0
 80149f8:	0801a5c8 	.word	0x0801a5c8
 80149fc:	0801a568 	.word	0x0801a568
 8014a00:	08025fb8 	.word	0x08025fb8
 8014a04:	20008d7c 	.word	0x20008d7c
 8014a08:	20008c8c 	.word	0x20008c8c

08014a0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b08c      	sub	sp, #48	; 0x30
 8014a10:	af02      	add	r7, sp, #8
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	3329      	adds	r3, #41	; 0x29
 8014a1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014a1e:	23ff      	movs	r3, #255	; 0xff
 8014a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	68f9      	ldr	r1, [r7, #12]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f000 fe1c 	bl	801566c <ip4_addr_isbroadcast_u32>
 8014a34:	4603      	mov	r3, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d10c      	bne.n	8014a54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a42:	2be0      	cmp	r3, #224	; 0xe0
 8014a44:	d006      	beq.n	8014a54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d003      	beq.n	8014a54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d102      	bne.n	8014a5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a54:	f06f 030f 	mvn.w	r3, #15
 8014a58:	e10f      	b.n	8014c7a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a5a:	68fa      	ldr	r2, [r7, #12]
 8014a5c:	2101      	movs	r1, #1
 8014a5e:	68b8      	ldr	r0, [r7, #8]
 8014a60:	f7ff fb9e 	bl	80141a0 <etharp_find_entry>
 8014a64:	4603      	mov	r3, r0
 8014a66:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8014a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	da02      	bge.n	8014a76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8014a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a74:	e101      	b.n	8014c7a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014a7a:	4982      	ldr	r1, [pc, #520]	; (8014c84 <etharp_query+0x278>)
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	005b      	lsls	r3, r3, #1
 8014a80:	4413      	add	r3, r2
 8014a82:	00db      	lsls	r3, r3, #3
 8014a84:	440b      	add	r3, r1
 8014a86:	3314      	adds	r3, #20
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d117      	bne.n	8014abe <etharp_query+0xb2>
    is_new_entry = 1;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014a96:	497b      	ldr	r1, [pc, #492]	; (8014c84 <etharp_query+0x278>)
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	3314      	adds	r3, #20
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014aa8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014aac:	4975      	ldr	r1, [pc, #468]	; (8014c84 <etharp_query+0x278>)
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3308      	adds	r3, #8
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014abe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014ac2:	4970      	ldr	r1, [pc, #448]	; (8014c84 <etharp_query+0x278>)
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	440b      	add	r3, r1
 8014ace:	3314      	adds	r3, #20
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d012      	beq.n	8014afc <etharp_query+0xf0>
 8014ad6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014ada:	496a      	ldr	r1, [pc, #424]	; (8014c84 <etharp_query+0x278>)
 8014adc:	4613      	mov	r3, r2
 8014ade:	005b      	lsls	r3, r3, #1
 8014ae0:	4413      	add	r3, r2
 8014ae2:	00db      	lsls	r3, r3, #3
 8014ae4:	440b      	add	r3, r1
 8014ae6:	3314      	adds	r3, #20
 8014ae8:	781b      	ldrb	r3, [r3, #0]
 8014aea:	2b01      	cmp	r3, #1
 8014aec:	d806      	bhi.n	8014afc <etharp_query+0xf0>
 8014aee:	4b66      	ldr	r3, [pc, #408]	; (8014c88 <etharp_query+0x27c>)
 8014af0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014af4:	4965      	ldr	r1, [pc, #404]	; (8014c8c <etharp_query+0x280>)
 8014af6:	4866      	ldr	r0, [pc, #408]	; (8014c90 <etharp_query+0x284>)
 8014af8:	f001 fee0 	bl	80168bc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014afc:	6a3b      	ldr	r3, [r7, #32]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d102      	bne.n	8014b08 <etharp_query+0xfc>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d10c      	bne.n	8014b22 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b08:	68b9      	ldr	r1, [r7, #8]
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f000 f976 	bl	8014dfc <etharp_request>
 8014b10:	4603      	mov	r3, r0
 8014b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <etharp_query+0x116>
      return result;
 8014b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b20:	e0ab      	b.n	8014c7a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d106      	bne.n	8014b36 <etharp_query+0x12a>
 8014b28:	4b57      	ldr	r3, [pc, #348]	; (8014c88 <etharp_query+0x27c>)
 8014b2a:	f240 32db 	movw	r2, #987	; 0x3db
 8014b2e:	4959      	ldr	r1, [pc, #356]	; (8014c94 <etharp_query+0x288>)
 8014b30:	4857      	ldr	r0, [pc, #348]	; (8014c90 <etharp_query+0x284>)
 8014b32:	f001 fec3 	bl	80168bc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014b3a:	4952      	ldr	r1, [pc, #328]	; (8014c84 <etharp_query+0x278>)
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	4413      	add	r3, r2
 8014b42:	00db      	lsls	r3, r3, #3
 8014b44:	440b      	add	r3, r1
 8014b46:	3314      	adds	r3, #20
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d919      	bls.n	8014b82 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8014b4e:	7cfa      	ldrb	r2, [r7, #19]
 8014b50:	4b51      	ldr	r3, [pc, #324]	; (8014c98 <etharp_query+0x28c>)
 8014b52:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b54:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014b58:	4613      	mov	r3, r2
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	4413      	add	r3, r2
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	3308      	adds	r3, #8
 8014b62:	4a48      	ldr	r2, [pc, #288]	; (8014c84 <etharp_query+0x278>)
 8014b64:	4413      	add	r3, r2
 8014b66:	1d1a      	adds	r2, r3, #4
 8014b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	4613      	mov	r3, r2
 8014b70:	697a      	ldr	r2, [r7, #20]
 8014b72:	6879      	ldr	r1, [r7, #4]
 8014b74:	68f8      	ldr	r0, [r7, #12]
 8014b76:	f001 fc1b 	bl	80163b0 <ethernet_output>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b80:	e079      	b.n	8014c76 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014b86:	493f      	ldr	r1, [pc, #252]	; (8014c84 <etharp_query+0x278>)
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	440b      	add	r3, r1
 8014b92:	3314      	adds	r3, #20
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	2b01      	cmp	r3, #1
 8014b98:	d16d      	bne.n	8014c76 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ba2:	e01a      	b.n	8014bda <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	895a      	ldrh	r2, [r3, #10]
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	891b      	ldrh	r3, [r3, #8]
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d10a      	bne.n	8014bc6 <etharp_query+0x1ba>
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d006      	beq.n	8014bc6 <etharp_query+0x1ba>
 8014bb8:	4b33      	ldr	r3, [pc, #204]	; (8014c88 <etharp_query+0x27c>)
 8014bba:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8014bbe:	4937      	ldr	r1, [pc, #220]	; (8014c9c <etharp_query+0x290>)
 8014bc0:	4833      	ldr	r0, [pc, #204]	; (8014c90 <etharp_query+0x284>)
 8014bc2:	f001 fe7b 	bl	80168bc <iprintf>
      if (p->type != PBUF_ROM) {
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	7b1b      	ldrb	r3, [r3, #12]
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d002      	beq.n	8014bd4 <etharp_query+0x1c8>
        copy_needed = 1;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	61bb      	str	r3, [r7, #24]
        break;
 8014bd2:	e005      	b.n	8014be0 <etharp_query+0x1d4>
      }
      p = p->next;
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d1e1      	bne.n	8014ba4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8014be0:	69bb      	ldr	r3, [r7, #24]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d017      	beq.n	8014c16 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	891b      	ldrh	r3, [r3, #8]
 8014bea:	2200      	movs	r2, #0
 8014bec:	4619      	mov	r1, r3
 8014bee:	2002      	movs	r0, #2
 8014bf0:	f7f6 fde2 	bl	800b7b8 <pbuf_alloc>
 8014bf4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d011      	beq.n	8014c20 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8014bfc:	6879      	ldr	r1, [r7, #4]
 8014bfe:	69f8      	ldr	r0, [r7, #28]
 8014c00:	f7f7 fa8c 	bl	800c11c <pbuf_copy>
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00a      	beq.n	8014c20 <etharp_query+0x214>
          pbuf_free(p);
 8014c0a:	69f8      	ldr	r0, [r7, #28]
 8014c0c:	f7f7 f946 	bl	800be9c <pbuf_free>
          p = NULL;
 8014c10:	2300      	movs	r3, #0
 8014c12:	61fb      	str	r3, [r7, #28]
 8014c14:	e004      	b.n	8014c20 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014c1a:	69f8      	ldr	r0, [r7, #28]
 8014c1c:	f7f7 f9f0 	bl	800c000 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d024      	beq.n	8014c70 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c26:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014c2a:	4916      	ldr	r1, [pc, #88]	; (8014c84 <etharp_query+0x278>)
 8014c2c:	4613      	mov	r3, r2
 8014c2e:	005b      	lsls	r3, r3, #1
 8014c30:	4413      	add	r3, r2
 8014c32:	00db      	lsls	r3, r3, #3
 8014c34:	440b      	add	r3, r1
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d00b      	beq.n	8014c54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8014c3c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014c40:	4910      	ldr	r1, [pc, #64]	; (8014c84 <etharp_query+0x278>)
 8014c42:	4613      	mov	r3, r2
 8014c44:	005b      	lsls	r3, r3, #1
 8014c46:	4413      	add	r3, r2
 8014c48:	00db      	lsls	r3, r3, #3
 8014c4a:	440b      	add	r3, r1
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f7 f924 	bl	800be9c <pbuf_free>
      }
      arp_table[i].q = p;
 8014c54:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014c58:	490a      	ldr	r1, [pc, #40]	; (8014c84 <etharp_query+0x278>)
 8014c5a:	4613      	mov	r3, r2
 8014c5c:	005b      	lsls	r3, r3, #1
 8014c5e:	4413      	add	r3, r2
 8014c60:	00db      	lsls	r3, r3, #3
 8014c62:	440b      	add	r3, r1
 8014c64:	69fa      	ldr	r2, [r7, #28]
 8014c66:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c6e:	e002      	b.n	8014c76 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c70:	23ff      	movs	r3, #255	; 0xff
 8014c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	3728      	adds	r7, #40	; 0x28
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	20008c8c 	.word	0x20008c8c
 8014c88:	0801a428 	.word	0x0801a428
 8014c8c:	0801a5d4 	.word	0x0801a5d4
 8014c90:	0801a4a0 	.word	0x0801a4a0
 8014c94:	0801a5c8 	.word	0x0801a5c8
 8014c98:	20008d7c 	.word	0x20008d7c
 8014c9c:	0801a5fc 	.word	0x0801a5fc

08014ca0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b08a      	sub	sp, #40	; 0x28
 8014ca4:	af02      	add	r7, sp, #8
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	607a      	str	r2, [r7, #4]
 8014cac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d106      	bne.n	8014cc6 <etharp_raw+0x26>
 8014cb8:	4b3a      	ldr	r3, [pc, #232]	; (8014da4 <etharp_raw+0x104>)
 8014cba:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8014cbe:	493a      	ldr	r1, [pc, #232]	; (8014da8 <etharp_raw+0x108>)
 8014cc0:	483a      	ldr	r0, [pc, #232]	; (8014dac <etharp_raw+0x10c>)
 8014cc2:	f001 fdfb 	bl	80168bc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	211c      	movs	r1, #28
 8014cca:	2002      	movs	r0, #2
 8014ccc:	f7f6 fd74 	bl	800b7b8 <pbuf_alloc>
 8014cd0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d102      	bne.n	8014cde <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cdc:	e05d      	b.n	8014d9a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	895b      	ldrh	r3, [r3, #10]
 8014ce2:	2b1b      	cmp	r3, #27
 8014ce4:	d806      	bhi.n	8014cf4 <etharp_raw+0x54>
 8014ce6:	4b2f      	ldr	r3, [pc, #188]	; (8014da4 <etharp_raw+0x104>)
 8014ce8:	f240 4264 	movw	r2, #1124	; 0x464
 8014cec:	4930      	ldr	r1, [pc, #192]	; (8014db0 <etharp_raw+0x110>)
 8014cee:	482f      	ldr	r0, [pc, #188]	; (8014dac <etharp_raw+0x10c>)
 8014cf0:	f001 fde4 	bl	80168bc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014cfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f5 fef5 	bl	800aaec <lwip_htons>
 8014d02:	4603      	mov	r3, r0
 8014d04:	461a      	mov	r2, r3
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d10:	2b06      	cmp	r3, #6
 8014d12:	d006      	beq.n	8014d22 <etharp_raw+0x82>
 8014d14:	4b23      	ldr	r3, [pc, #140]	; (8014da4 <etharp_raw+0x104>)
 8014d16:	f240 426b 	movw	r2, #1131	; 0x46b
 8014d1a:	4926      	ldr	r1, [pc, #152]	; (8014db4 <etharp_raw+0x114>)
 8014d1c:	4823      	ldr	r0, [pc, #140]	; (8014dac <etharp_raw+0x10c>)
 8014d1e:	f001 fdcd 	bl	80168bc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	3308      	adds	r3, #8
 8014d26:	2206      	movs	r2, #6
 8014d28:	6839      	ldr	r1, [r7, #0]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f001 fdb3 	bl	8016896 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	3312      	adds	r3, #18
 8014d34:	2206      	movs	r2, #6
 8014d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f001 fdac 	bl	8016896 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	330e      	adds	r3, #14
 8014d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d44:	6812      	ldr	r2, [r2, #0]
 8014d46:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	3318      	adds	r3, #24
 8014d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d4e:	6812      	ldr	r2, [r2, #0]
 8014d50:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	2200      	movs	r2, #0
 8014d56:	701a      	strb	r2, [r3, #0]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f042 0201 	orr.w	r2, r2, #1
 8014d5e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	2200      	movs	r2, #0
 8014d64:	f042 0208 	orr.w	r2, r2, #8
 8014d68:	709a      	strb	r2, [r3, #2]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	2206      	movs	r2, #6
 8014d72:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	2204      	movs	r2, #4
 8014d78:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d7a:	f640 0306 	movw	r3, #2054	; 0x806
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	69b9      	ldr	r1, [r7, #24]
 8014d86:	68f8      	ldr	r0, [r7, #12]
 8014d88:	f001 fb12 	bl	80163b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d8c:	69b8      	ldr	r0, [r7, #24]
 8014d8e:	f7f7 f885 	bl	800be9c <pbuf_free>
  p = NULL;
 8014d92:	2300      	movs	r3, #0
 8014d94:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3720      	adds	r7, #32
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	bf00      	nop
 8014da4:	0801a428 	.word	0x0801a428
 8014da8:	0801a578 	.word	0x0801a578
 8014dac:	0801a4a0 	.word	0x0801a4a0
 8014db0:	0801a618 	.word	0x0801a618
 8014db4:	0801a64c 	.word	0x0801a64c

08014db8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b088      	sub	sp, #32
 8014dbc:	af04      	add	r7, sp, #16
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	9203      	str	r2, [sp, #12]
 8014dd8:	68ba      	ldr	r2, [r7, #8]
 8014dda:	9202      	str	r2, [sp, #8]
 8014ddc:	4a06      	ldr	r2, [pc, #24]	; (8014df8 <etharp_request_dst+0x40>)
 8014dde:	9201      	str	r2, [sp, #4]
 8014de0:	9300      	str	r3, [sp, #0]
 8014de2:	4603      	mov	r3, r0
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f7ff ff5a 	bl	8014ca0 <etharp_raw>
 8014dec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014dee:	4618      	mov	r0, r3
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	08025fc0 	.word	0x08025fc0

08014dfc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014e06:	4a05      	ldr	r2, [pc, #20]	; (8014e1c <etharp_request+0x20>)
 8014e08:	6839      	ldr	r1, [r7, #0]
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7ff ffd4 	bl	8014db8 <etharp_request_dst>
 8014e10:	4603      	mov	r3, r0
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3708      	adds	r7, #8
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	08025fb8 	.word	0x08025fb8

08014e20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b08e      	sub	sp, #56	; 0x38
 8014e24:	af04      	add	r7, sp, #16
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e2a:	4b7a      	ldr	r3, [pc, #488]	; (8015014 <icmp_input+0x1f4>)
 8014e2c:	689b      	ldr	r3, [r3, #8]
 8014e2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	f003 030f 	and.w	r3, r3, #15
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014e40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e42:	2b13      	cmp	r3, #19
 8014e44:	f240 80d1 	bls.w	8014fea <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	895b      	ldrh	r3, [r3, #10]
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	f240 80ce 	bls.w	8014fee <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	685b      	ldr	r3, [r3, #4]
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f000 80bb 	beq.w	8014fdc <icmp_input+0x1bc>
 8014e66:	2b08      	cmp	r3, #8
 8014e68:	f040 80bb 	bne.w	8014fe2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8014e6c:	4b6a      	ldr	r3, [pc, #424]	; (8015018 <icmp_input+0x1f8>)
 8014e6e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e70:	4b68      	ldr	r3, [pc, #416]	; (8015014 <icmp_input+0x1f4>)
 8014e72:	695b      	ldr	r3, [r3, #20]
 8014e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e78:	2be0      	cmp	r3, #224	; 0xe0
 8014e7a:	f000 80bf 	beq.w	8014ffc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e7e:	4b65      	ldr	r3, [pc, #404]	; (8015014 <icmp_input+0x1f4>)
 8014e80:	695a      	ldr	r2, [r3, #20]
 8014e82:	4b64      	ldr	r3, [pc, #400]	; (8015014 <icmp_input+0x1f4>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	4610      	mov	r0, r2
 8014e8a:	f000 fbef 	bl	801566c <ip4_addr_isbroadcast_u32>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	f040 80b5 	bne.w	8015000 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	891b      	ldrh	r3, [r3, #8]
 8014e9a:	2b07      	cmp	r3, #7
 8014e9c:	f240 80a9 	bls.w	8014ff2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014ea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ea2:	330e      	adds	r3, #14
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	b21b      	sxth	r3, r3
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7f6 ffd2 	bl	800be54 <pbuf_header>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d046      	beq.n	8014f44 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	891a      	ldrh	r2, [r3, #8]
 8014eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ebc:	4413      	add	r3, r2
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	2002      	movs	r0, #2
 8014ec6:	f7f6 fc77 	bl	800b7b8 <pbuf_alloc>
 8014eca:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	f000 8098 	beq.w	8015004 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	895b      	ldrh	r3, [r3, #10]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014edc:	3308      	adds	r3, #8
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d203      	bcs.n	8014eea <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8014ee2:	69b8      	ldr	r0, [r7, #24]
 8014ee4:	f7f6 ffda 	bl	800be9c <pbuf_free>
        goto icmperr;
 8014ee8:	e08d      	b.n	8015006 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8014eea:	69bb      	ldr	r3, [r7, #24]
 8014eec:	685b      	ldr	r3, [r3, #4]
 8014eee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f001 fccf 	bl	8016896 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8014ef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014efa:	425b      	negs	r3, r3
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	b21b      	sxth	r3, r3
 8014f00:	4619      	mov	r1, r3
 8014f02:	69b8      	ldr	r0, [r7, #24]
 8014f04:	f7f6 ffa6 	bl	800be54 <pbuf_header>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d009      	beq.n	8014f22 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014f0e:	4b43      	ldr	r3, [pc, #268]	; (801501c <icmp_input+0x1fc>)
 8014f10:	22af      	movs	r2, #175	; 0xaf
 8014f12:	4943      	ldr	r1, [pc, #268]	; (8015020 <icmp_input+0x200>)
 8014f14:	4843      	ldr	r0, [pc, #268]	; (8015024 <icmp_input+0x204>)
 8014f16:	f001 fcd1 	bl	80168bc <iprintf>
        pbuf_free(r);
 8014f1a:	69b8      	ldr	r0, [r7, #24]
 8014f1c:	f7f6 ffbe 	bl	800be9c <pbuf_free>
        goto icmperr;
 8014f20:	e071      	b.n	8015006 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	69b8      	ldr	r0, [r7, #24]
 8014f26:	f7f7 f8f9 	bl	800c11c <pbuf_copy>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d003      	beq.n	8014f38 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8014f30:	69b8      	ldr	r0, [r7, #24]
 8014f32:	f7f6 ffb3 	bl	800be9c <pbuf_free>
        goto icmperr;
 8014f36:	e066      	b.n	8015006 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f7f6 ffaf 	bl	800be9c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	607b      	str	r3, [r7, #4]
 8014f42:	e015      	b.n	8014f70 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8014f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f46:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8014f4a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014f4e:	33f2      	adds	r3, #242	; 0xf2
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	b21b      	sxth	r3, r3
 8014f54:	4619      	mov	r1, r3
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f7f6 ff7c 	bl	800be54 <pbuf_header>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d006      	beq.n	8014f70 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f62:	4b2e      	ldr	r3, [pc, #184]	; (801501c <icmp_input+0x1fc>)
 8014f64:	22c0      	movs	r2, #192	; 0xc0
 8014f66:	4930      	ldr	r1, [pc, #192]	; (8015028 <icmp_input+0x208>)
 8014f68:	482e      	ldr	r0, [pc, #184]	; (8015024 <icmp_input+0x204>)
 8014f6a:	f001 fca7 	bl	80168bc <iprintf>
        goto icmperr;
 8014f6e:	e04a      	b.n	8015006 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	685b      	ldr	r3, [r3, #4]
 8014f74:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8014f76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7f6 ff69 	bl	800be54 <pbuf_header>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d12b      	bne.n	8014fe0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f96:	4b1f      	ldr	r3, [pc, #124]	; (8015014 <icmp_input+0x1f4>)
 8014f98:	691a      	ldr	r2, [r3, #16]
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	709a      	strb	r2, [r3, #2]
 8014faa:	2200      	movs	r2, #0
 8014fac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	22ff      	movs	r2, #255	; 0xff
 8014fb2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	729a      	strb	r2, [r3, #10]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	9302      	str	r3, [sp, #8]
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	23ff      	movs	r3, #255	; 0xff
 8014fcc:	2200      	movs	r2, #0
 8014fce:	69f9      	ldr	r1, [r7, #28]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f000 fa79 	bl	80154c8 <ip4_output_if>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8014fda:	e001      	b.n	8014fe0 <icmp_input+0x1c0>
    break;
 8014fdc:	bf00      	nop
 8014fde:	e000      	b.n	8014fe2 <icmp_input+0x1c2>
    break;
 8014fe0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f7f6 ff5a 	bl	800be9c <pbuf_free>
  return;
 8014fe8:	e011      	b.n	801500e <icmp_input+0x1ee>
    goto lenerr;
 8014fea:	bf00      	nop
 8014fec:	e002      	b.n	8014ff4 <icmp_input+0x1d4>
    goto lenerr;
 8014fee:	bf00      	nop
 8014ff0:	e000      	b.n	8014ff4 <icmp_input+0x1d4>
      goto lenerr;
 8014ff2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7f6 ff51 	bl	800be9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ffa:	e008      	b.n	801500e <icmp_input+0x1ee>
      goto icmperr;
 8014ffc:	bf00      	nop
 8014ffe:	e002      	b.n	8015006 <icmp_input+0x1e6>
      goto icmperr;
 8015000:	bf00      	nop
 8015002:	e000      	b.n	8015006 <icmp_input+0x1e6>
        goto icmperr;
 8015004:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7f6 ff48 	bl	800be9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801500c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801500e:	3728      	adds	r7, #40	; 0x28
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	2000c390 	.word	0x2000c390
 8015018:	2000c3a4 	.word	0x2000c3a4
 801501c:	0801a690 	.word	0x0801a690
 8015020:	0801a6c8 	.word	0x0801a6c8
 8015024:	0801a700 	.word	0x0801a700
 8015028:	0801a728 	.word	0x0801a728

0801502c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	460b      	mov	r3, r1
 8015036:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015038:	78fb      	ldrb	r3, [r7, #3]
 801503a:	461a      	mov	r2, r3
 801503c:	2103      	movs	r1, #3
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f000 f814 	bl	801506c <icmp_send_response>
}
 8015044:	bf00      	nop
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	460b      	mov	r3, r1
 8015056:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015058:	78fb      	ldrb	r3, [r7, #3]
 801505a:	461a      	mov	r2, r3
 801505c:	210b      	movs	r1, #11
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f000 f804 	bl	801506c <icmp_send_response>
}
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b08c      	sub	sp, #48	; 0x30
 8015070:	af04      	add	r7, sp, #16
 8015072:	6078      	str	r0, [r7, #4]
 8015074:	460b      	mov	r3, r1
 8015076:	70fb      	strb	r3, [r7, #3]
 8015078:	4613      	mov	r3, r2
 801507a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801507c:	2200      	movs	r2, #0
 801507e:	2124      	movs	r1, #36	; 0x24
 8015080:	2001      	movs	r0, #1
 8015082:	f7f6 fb99 	bl	800b7b8 <pbuf_alloc>
 8015086:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d04c      	beq.n	8015128 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	895b      	ldrh	r3, [r3, #10]
 8015092:	2b23      	cmp	r3, #35	; 0x23
 8015094:	d806      	bhi.n	80150a4 <icmp_send_response+0x38>
 8015096:	4b26      	ldr	r3, [pc, #152]	; (8015130 <icmp_send_response+0xc4>)
 8015098:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801509c:	4925      	ldr	r1, [pc, #148]	; (8015134 <icmp_send_response+0xc8>)
 801509e:	4826      	ldr	r0, [pc, #152]	; (8015138 <icmp_send_response+0xcc>)
 80150a0:	f001 fc0c 	bl	80168bc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	78fa      	ldrb	r2, [r7, #3]
 80150b4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	78ba      	ldrb	r2, [r7, #2]
 80150ba:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	2200      	movs	r2, #0
 80150c0:	711a      	strb	r2, [r3, #4]
 80150c2:	2200      	movs	r2, #0
 80150c4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	2200      	movs	r2, #0
 80150ca:	719a      	strb	r2, [r3, #6]
 80150cc:	2200      	movs	r2, #0
 80150ce:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80150d0:	69fb      	ldr	r3, [r7, #28]
 80150d2:	685b      	ldr	r3, [r3, #4]
 80150d4:	f103 0008 	add.w	r0, r3, #8
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	221c      	movs	r2, #28
 80150de:	4619      	mov	r1, r3
 80150e0:	f001 fbd9 	bl	8016896 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80150ea:	f107 030c 	add.w	r3, r7, #12
 80150ee:	4618      	mov	r0, r3
 80150f0:	f000 f824 	bl	801513c <ip4_route>
 80150f4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d011      	beq.n	8015120 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	2200      	movs	r2, #0
 8015100:	709a      	strb	r2, [r3, #2]
 8015102:	2200      	movs	r2, #0
 8015104:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015106:	f107 020c 	add.w	r2, r7, #12
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	9302      	str	r3, [sp, #8]
 801510e:	2301      	movs	r3, #1
 8015110:	9301      	str	r3, [sp, #4]
 8015112:	2300      	movs	r3, #0
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	23ff      	movs	r3, #255	; 0xff
 8015118:	2100      	movs	r1, #0
 801511a:	69f8      	ldr	r0, [r7, #28]
 801511c:	f000 f9d4 	bl	80154c8 <ip4_output_if>
  }
  pbuf_free(q);
 8015120:	69f8      	ldr	r0, [r7, #28]
 8015122:	f7f6 febb 	bl	800be9c <pbuf_free>
 8015126:	e000      	b.n	801512a <icmp_send_response+0xbe>
    return;
 8015128:	bf00      	nop
}
 801512a:	3720      	adds	r7, #32
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	0801a690 	.word	0x0801a690
 8015134:	0801a75c 	.word	0x0801a75c
 8015138:	0801a700 	.word	0x0801a700

0801513c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801513c:	b480      	push	{r7}
 801513e:	b085      	sub	sp, #20
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015144:	4b30      	ldr	r3, [pc, #192]	; (8015208 <ip4_route+0xcc>)
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	60fb      	str	r3, [r7, #12]
 801514a:	e036      	b.n	80151ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015152:	f003 0301 	and.w	r3, r3, #1
 8015156:	b2db      	uxtb	r3, r3
 8015158:	2b00      	cmp	r3, #0
 801515a:	d02b      	beq.n	80151b4 <ip4_route+0x78>
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015162:	089b      	lsrs	r3, r3, #2
 8015164:	f003 0301 	and.w	r3, r3, #1
 8015168:	b2db      	uxtb	r3, r3
 801516a:	2b00      	cmp	r3, #0
 801516c:	d022      	beq.n	80151b4 <ip4_route+0x78>
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	3304      	adds	r3, #4
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d01d      	beq.n	80151b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	3304      	adds	r3, #4
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	405a      	eors	r2, r3
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	3308      	adds	r3, #8
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	4013      	ands	r3, r2
 801518c:	2b00      	cmp	r3, #0
 801518e:	d101      	bne.n	8015194 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	e033      	b.n	80151fc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801519a:	f003 0302 	and.w	r3, r3, #2
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d108      	bne.n	80151b4 <ip4_route+0x78>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681a      	ldr	r2, [r3, #0]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	330c      	adds	r3, #12
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d101      	bne.n	80151b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	e023      	b.n	80151fc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	60fb      	str	r3, [r7, #12]
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d1c5      	bne.n	801514c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151c0:	4b12      	ldr	r3, [pc, #72]	; (801520c <ip4_route+0xd0>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d015      	beq.n	80151f4 <ip4_route+0xb8>
 80151c8:	4b10      	ldr	r3, [pc, #64]	; (801520c <ip4_route+0xd0>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80151d0:	f003 0301 	and.w	r3, r3, #1
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00d      	beq.n	80151f4 <ip4_route+0xb8>
 80151d8:	4b0c      	ldr	r3, [pc, #48]	; (801520c <ip4_route+0xd0>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80151e0:	f003 0304 	and.w	r3, r3, #4
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d005      	beq.n	80151f4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80151e8:	4b08      	ldr	r3, [pc, #32]	; (801520c <ip4_route+0xd0>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	3304      	adds	r3, #4
 80151ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d101      	bne.n	80151f8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e001      	b.n	80151fc <ip4_route+0xc0>
  }

  return netif_default;
 80151f8:	4b04      	ldr	r3, [pc, #16]	; (801520c <ip4_route+0xd0>)
 80151fa:	681b      	ldr	r3, [r3, #0]
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3714      	adds	r7, #20
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr
 8015208:	2000fab0 	.word	0x2000fab0
 801520c:	2000fab4 	.word	0x2000fab4

08015210 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b088      	sub	sp, #32
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801521a:	2301      	movs	r3, #1
 801521c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	091b      	lsrs	r3, r3, #4
 801522a:	b2db      	uxtb	r3, r3
 801522c:	2b04      	cmp	r3, #4
 801522e:	d004      	beq.n	801523a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7f6 fe33 	bl	800be9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015236:	2300      	movs	r3, #0
 8015238:	e13e      	b.n	80154b8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	b29b      	uxth	r3, r3
 8015240:	f003 030f 	and.w	r3, r3, #15
 8015244:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8015246:	89fb      	ldrh	r3, [r7, #14]
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801524c:	69fb      	ldr	r3, [r7, #28]
 801524e:	885b      	ldrh	r3, [r3, #2]
 8015250:	b29b      	uxth	r3, r3
 8015252:	4618      	mov	r0, r3
 8015254:	f7f5 fc4a 	bl	800aaec <lwip_htons>
 8015258:	4603      	mov	r3, r0
 801525a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	891b      	ldrh	r3, [r3, #8]
 8015260:	89ba      	ldrh	r2, [r7, #12]
 8015262:	429a      	cmp	r2, r3
 8015264:	d204      	bcs.n	8015270 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8015266:	89bb      	ldrh	r3, [r7, #12]
 8015268:	4619      	mov	r1, r3
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f7f6 fca2 	bl	800bbb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	895b      	ldrh	r3, [r3, #10]
 8015274:	89fa      	ldrh	r2, [r7, #14]
 8015276:	429a      	cmp	r2, r3
 8015278:	d807      	bhi.n	801528a <ip4_input+0x7a>
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	891b      	ldrh	r3, [r3, #8]
 801527e:	89ba      	ldrh	r2, [r7, #12]
 8015280:	429a      	cmp	r2, r3
 8015282:	d802      	bhi.n	801528a <ip4_input+0x7a>
 8015284:	89fb      	ldrh	r3, [r7, #14]
 8015286:	2b13      	cmp	r3, #19
 8015288:	d804      	bhi.n	8015294 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7f6 fe06 	bl	800be9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015290:	2300      	movs	r3, #0
 8015292:	e111      	b.n	80154b8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	691b      	ldr	r3, [r3, #16]
 8015298:	4a89      	ldr	r2, [pc, #548]	; (80154c0 <ip4_input+0x2b0>)
 801529a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	4a87      	ldr	r2, [pc, #540]	; (80154c0 <ip4_input+0x2b0>)
 80152a2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152a4:	4b86      	ldr	r3, [pc, #536]	; (80154c0 <ip4_input+0x2b0>)
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152ac:	2be0      	cmp	r3, #224	; 0xe0
 80152ae:	d112      	bne.n	80152d6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80152b6:	f003 0301 	and.w	r3, r3, #1
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d007      	beq.n	80152d0 <ip4_input+0xc0>
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d002      	beq.n	80152d0 <ip4_input+0xc0>
      netif = inp;
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	61bb      	str	r3, [r7, #24]
 80152ce:	e041      	b.n	8015354 <ip4_input+0x144>
    } else {
      netif = NULL;
 80152d0:	2300      	movs	r3, #0
 80152d2:	61bb      	str	r3, [r7, #24]
 80152d4:	e03e      	b.n	8015354 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80152d6:	2301      	movs	r3, #1
 80152d8:	613b      	str	r3, [r7, #16]
    netif = inp;
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152de:	69bb      	ldr	r3, [r7, #24]
 80152e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80152e4:	f003 0301 	and.w	r3, r3, #1
 80152e8:	b2db      	uxtb	r3, r3
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d014      	beq.n	8015318 <ip4_input+0x108>
 80152ee:	69bb      	ldr	r3, [r7, #24]
 80152f0:	3304      	adds	r3, #4
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d00f      	beq.n	8015318 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152f8:	4b71      	ldr	r3, [pc, #452]	; (80154c0 <ip4_input+0x2b0>)
 80152fa:	695a      	ldr	r2, [r3, #20]
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	3304      	adds	r3, #4
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d026      	beq.n	8015354 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015306:	4b6e      	ldr	r3, [pc, #440]	; (80154c0 <ip4_input+0x2b0>)
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	69b9      	ldr	r1, [r7, #24]
 801530c:	4618      	mov	r0, r3
 801530e:	f000 f9ad 	bl	801566c <ip4_addr_isbroadcast_u32>
 8015312:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015314:	2b00      	cmp	r3, #0
 8015316:	d11d      	bne.n	8015354 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d00d      	beq.n	801533a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801531e:	4b68      	ldr	r3, [pc, #416]	; (80154c0 <ip4_input+0x2b0>)
 8015320:	695b      	ldr	r3, [r3, #20]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	2b7f      	cmp	r3, #127	; 0x7f
 8015326:	d102      	bne.n	801532e <ip4_input+0x11e>
          netif = NULL;
 8015328:	2300      	movs	r3, #0
 801532a:	61bb      	str	r3, [r7, #24]
          break;
 801532c:	e012      	b.n	8015354 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8015332:	4b64      	ldr	r3, [pc, #400]	; (80154c4 <ip4_input+0x2b4>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	61bb      	str	r3, [r7, #24]
 8015338:	e002      	b.n	8015340 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8015340:	69ba      	ldr	r2, [r7, #24]
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	429a      	cmp	r2, r3
 8015346:	d102      	bne.n	801534e <ip4_input+0x13e>
        netif = netif->next;
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d1c4      	bne.n	80152de <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015354:	69bb      	ldr	r3, [r7, #24]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d111      	bne.n	801537e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	7a5b      	ldrb	r3, [r3, #9]
 801535e:	2b11      	cmp	r3, #17
 8015360:	d10d      	bne.n	801537e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8015362:	89fb      	ldrh	r3, [r7, #14]
 8015364:	69fa      	ldr	r2, [r7, #28]
 8015366:	4413      	add	r3, r2
 8015368:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	885b      	ldrh	r3, [r3, #2]
 801536e:	b29b      	uxth	r3, r3
 8015370:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015374:	d103      	bne.n	801537e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801537a:	2300      	movs	r3, #0
 801537c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d017      	beq.n	80153b4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015384:	4b4e      	ldr	r3, [pc, #312]	; (80154c0 <ip4_input+0x2b0>)
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d013      	beq.n	80153b4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801538c:	4b4c      	ldr	r3, [pc, #304]	; (80154c0 <ip4_input+0x2b0>)
 801538e:	691b      	ldr	r3, [r3, #16]
 8015390:	6839      	ldr	r1, [r7, #0]
 8015392:	4618      	mov	r0, r3
 8015394:	f000 f96a 	bl	801566c <ip4_addr_isbroadcast_u32>
 8015398:	4603      	mov	r3, r0
 801539a:	2b00      	cmp	r3, #0
 801539c:	d105      	bne.n	80153aa <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801539e:	4b48      	ldr	r3, [pc, #288]	; (80154c0 <ip4_input+0x2b0>)
 80153a0:	691b      	ldr	r3, [r3, #16]
 80153a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153a6:	2be0      	cmp	r3, #224	; 0xe0
 80153a8:	d104      	bne.n	80153b4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f7f6 fd76 	bl	800be9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	e081      	b.n	80154b8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80153b4:	69bb      	ldr	r3, [r7, #24]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d104      	bne.n	80153c4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f7f6 fd6e 	bl	800be9c <pbuf_free>
    return ERR_OK;
 80153c0:	2300      	movs	r3, #0
 80153c2:	e079      	b.n	80154b8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	88db      	ldrh	r3, [r3, #6]
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	461a      	mov	r2, r3
 80153cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153d0:	4013      	ands	r3, r2
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00b      	beq.n	80153ee <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f000 fc8e 	bl	8015cf8 <ip4_reass>
 80153dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d101      	bne.n	80153e8 <ip4_input+0x1d8>
      return ERR_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	e067      	b.n	80154b8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80153ee:	4a34      	ldr	r2, [pc, #208]	; (80154c0 <ip4_input+0x2b0>)
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80153f4:	4a32      	ldr	r2, [pc, #200]	; (80154c0 <ip4_input+0x2b0>)
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80153fa:	4a31      	ldr	r2, [pc, #196]	; (80154c0 <ip4_input+0x2b0>)
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	b29b      	uxth	r3, r3
 8015406:	f003 030f 	and.w	r3, r3, #15
 801540a:	b29b      	uxth	r3, r3
 801540c:	009b      	lsls	r3, r3, #2
 801540e:	b29a      	uxth	r2, r3
 8015410:	4b2b      	ldr	r3, [pc, #172]	; (80154c0 <ip4_input+0x2b0>)
 8015412:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015414:	89fb      	ldrh	r3, [r7, #14]
 8015416:	425b      	negs	r3, r3
 8015418:	b29b      	uxth	r3, r3
 801541a:	b21b      	sxth	r3, r3
 801541c:	4619      	mov	r1, r3
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f7f6 fd18 	bl	800be54 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	7a5b      	ldrb	r3, [r3, #9]
 8015428:	2b06      	cmp	r3, #6
 801542a:	d009      	beq.n	8015440 <ip4_input+0x230>
 801542c:	2b11      	cmp	r3, #17
 801542e:	d002      	beq.n	8015436 <ip4_input+0x226>
 8015430:	2b01      	cmp	r3, #1
 8015432:	d00a      	beq.n	801544a <ip4_input+0x23a>
 8015434:	e00e      	b.n	8015454 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8015436:	6839      	ldr	r1, [r7, #0]
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f7fc fc05 	bl	8011c48 <udp_input>
      break;
 801543e:	e028      	b.n	8015492 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8015440:	6839      	ldr	r1, [r7, #0]
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f7f8 fc24 	bl	800dc90 <tcp_input>
      break;
 8015448:	e023      	b.n	8015492 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801544a:	6839      	ldr	r1, [r7, #0]
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7ff fce7 	bl	8014e20 <icmp_input>
      break;
 8015452:	e01e      	b.n	8015492 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015454:	4b1a      	ldr	r3, [pc, #104]	; (80154c0 <ip4_input+0x2b0>)
 8015456:	695b      	ldr	r3, [r3, #20]
 8015458:	69b9      	ldr	r1, [r7, #24]
 801545a:	4618      	mov	r0, r3
 801545c:	f000 f906 	bl	801566c <ip4_addr_isbroadcast_u32>
 8015460:	4603      	mov	r3, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d112      	bne.n	801548c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015466:	4b16      	ldr	r3, [pc, #88]	; (80154c0 <ip4_input+0x2b0>)
 8015468:	695b      	ldr	r3, [r3, #20]
 801546a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801546e:	2be0      	cmp	r3, #224	; 0xe0
 8015470:	d00c      	beq.n	801548c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8015472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015476:	4619      	mov	r1, r3
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7f6 fcfd 	bl	800be78 <pbuf_header_force>
        p->payload = iphdr;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	69fa      	ldr	r2, [r7, #28]
 8015482:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015484:	2102      	movs	r1, #2
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f7ff fdd0 	bl	801502c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7f6 fd05 	bl	800be9c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015492:	4b0b      	ldr	r3, [pc, #44]	; (80154c0 <ip4_input+0x2b0>)
 8015494:	2200      	movs	r2, #0
 8015496:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015498:	4b09      	ldr	r3, [pc, #36]	; (80154c0 <ip4_input+0x2b0>)
 801549a:	2200      	movs	r2, #0
 801549c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801549e:	4b08      	ldr	r3, [pc, #32]	; (80154c0 <ip4_input+0x2b0>)
 80154a0:	2200      	movs	r2, #0
 80154a2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154a4:	4b06      	ldr	r3, [pc, #24]	; (80154c0 <ip4_input+0x2b0>)
 80154a6:	2200      	movs	r2, #0
 80154a8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80154aa:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <ip4_input+0x2b0>)
 80154ac:	2200      	movs	r2, #0
 80154ae:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80154b0:	4b03      	ldr	r3, [pc, #12]	; (80154c0 <ip4_input+0x2b0>)
 80154b2:	2200      	movs	r2, #0
 80154b4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3720      	adds	r7, #32
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	2000c390 	.word	0x2000c390
 80154c4:	2000fab0 	.word	0x2000fab0

080154c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b08a      	sub	sp, #40	; 0x28
 80154cc:	af04      	add	r7, sp, #16
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d009      	beq.n	80154f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d003      	beq.n	80154ee <ip4_output_if+0x26>
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d102      	bne.n	80154f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80154ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f0:	3304      	adds	r3, #4
 80154f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154f4:	78fa      	ldrb	r2, [r7, #3]
 80154f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f8:	9302      	str	r3, [sp, #8]
 80154fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	4613      	mov	r3, r2
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	6979      	ldr	r1, [r7, #20]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f000 f805 	bl	801551c <ip4_output_if_src>
 8015512:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015514:	4618      	mov	r0, r3
 8015516:	3718      	adds	r7, #24
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b088      	sub	sp, #32
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	89db      	ldrh	r3, [r3, #14]
 801552e:	2b01      	cmp	r3, #1
 8015530:	d006      	beq.n	8015540 <ip4_output_if_src+0x24>
 8015532:	4b48      	ldr	r3, [pc, #288]	; (8015654 <ip4_output_if_src+0x138>)
 8015534:	f240 3233 	movw	r2, #819	; 0x333
 8015538:	4947      	ldr	r1, [pc, #284]	; (8015658 <ip4_output_if_src+0x13c>)
 801553a:	4848      	ldr	r0, [pc, #288]	; (801565c <ip4_output_if_src+0x140>)
 801553c:	f001 f9be 	bl	80168bc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d060      	beq.n	8015608 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015546:	2314      	movs	r3, #20
 8015548:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801554a:	2114      	movs	r1, #20
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7f6 fc81 	bl	800be54 <pbuf_header>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d002      	beq.n	801555e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015558:	f06f 0301 	mvn.w	r3, #1
 801555c:	e075      	b.n	801564a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	895b      	ldrh	r3, [r3, #10]
 8015568:	2b13      	cmp	r3, #19
 801556a:	d806      	bhi.n	801557a <ip4_output_if_src+0x5e>
 801556c:	4b39      	ldr	r3, [pc, #228]	; (8015654 <ip4_output_if_src+0x138>)
 801556e:	f240 3261 	movw	r2, #865	; 0x361
 8015572:	493b      	ldr	r1, [pc, #236]	; (8015660 <ip4_output_if_src+0x144>)
 8015574:	4839      	ldr	r0, [pc, #228]	; (801565c <ip4_output_if_src+0x140>)
 8015576:	f001 f9a1 	bl	80168bc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	78fa      	ldrb	r2, [r7, #3]
 801557e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015586:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015590:	8b7b      	ldrh	r3, [r7, #26]
 8015592:	089b      	lsrs	r3, r3, #2
 8015594:	b29b      	uxth	r3, r3
 8015596:	b2db      	uxtb	r3, r3
 8015598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801559c:	b2da      	uxtb	r2, r3
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	891b      	ldrh	r3, [r3, #8]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f5 fa9c 	bl	800aaec <lwip_htons>
 80155b4:	4603      	mov	r3, r0
 80155b6:	461a      	mov	r2, r3
 80155b8:	69fb      	ldr	r3, [r7, #28]
 80155ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	2200      	movs	r2, #0
 80155c0:	719a      	strb	r2, [r3, #6]
 80155c2:	2200      	movs	r2, #0
 80155c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80155c6:	4b27      	ldr	r3, [pc, #156]	; (8015664 <ip4_output_if_src+0x148>)
 80155c8:	881b      	ldrh	r3, [r3, #0]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7f5 fa8e 	bl	800aaec <lwip_htons>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461a      	mov	r2, r3
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80155d8:	4b22      	ldr	r3, [pc, #136]	; (8015664 <ip4_output_if_src+0x148>)
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	3301      	adds	r3, #1
 80155de:	b29a      	uxth	r2, r3
 80155e0:	4b20      	ldr	r3, [pc, #128]	; (8015664 <ip4_output_if_src+0x148>)
 80155e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d104      	bne.n	80155f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80155ea:	4b1f      	ldr	r3, [pc, #124]	; (8015668 <ip4_output_if_src+0x14c>)
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	60da      	str	r2, [r3, #12]
 80155f2:	e003      	b.n	80155fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	2200      	movs	r2, #0
 8015600:	729a      	strb	r2, [r3, #10]
 8015602:	2200      	movs	r2, #0
 8015604:	72da      	strb	r2, [r3, #11]
 8015606:	e008      	b.n	801561a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	691b      	ldr	r3, [r3, #16]
 8015612:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015614:	f107 0314 	add.w	r3, r7, #20
 8015618:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801561e:	2b00      	cmp	r3, #0
 8015620:	d00c      	beq.n	801563c <ip4_output_if_src+0x120>
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	891a      	ldrh	r2, [r3, #8]
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801562a:	429a      	cmp	r2, r3
 801562c:	d906      	bls.n	801563c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f000 fd0a 	bl	801604c <ip4_frag>
 8015638:	4603      	mov	r3, r0
 801563a:	e006      	b.n	801564a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563e:	695b      	ldr	r3, [r3, #20]
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	68f9      	ldr	r1, [r7, #12]
 8015644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015646:	4798      	blx	r3
 8015648:	4603      	mov	r3, r0
}
 801564a:	4618      	mov	r0, r3
 801564c:	3720      	adds	r7, #32
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}
 8015652:	bf00      	nop
 8015654:	0801a788 	.word	0x0801a788
 8015658:	0801a7bc 	.word	0x0801a7bc
 801565c:	0801a7c8 	.word	0x0801a7c8
 8015660:	0801a7f0 	.word	0x0801a7f0
 8015664:	20008d7e 	.word	0x20008d7e
 8015668:	08025fb0 	.word	0x08025fb0

0801566c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801566c:	b480      	push	{r7}
 801566e:	b085      	sub	sp, #20
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015680:	d002      	beq.n	8015688 <ip4_addr_isbroadcast_u32+0x1c>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d101      	bne.n	801568c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015688:	2301      	movs	r3, #1
 801568a:	e02a      	b.n	80156e2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015692:	f003 0302 	and.w	r3, r3, #2
 8015696:	2b00      	cmp	r3, #0
 8015698:	d101      	bne.n	801569e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801569a:	2300      	movs	r3, #0
 801569c:	e021      	b.n	80156e2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	3304      	adds	r3, #4
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d101      	bne.n	80156ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80156aa:	2300      	movs	r3, #0
 80156ac:	e019      	b.n	80156e2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80156ae:	68fa      	ldr	r2, [r7, #12]
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	3304      	adds	r3, #4
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	405a      	eors	r2, r3
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	3308      	adds	r3, #8
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	4013      	ands	r3, r2
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10d      	bne.n	80156e0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	3308      	adds	r3, #8
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	43da      	mvns	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	3308      	adds	r3, #8
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156d8:	429a      	cmp	r2, r3
 80156da:	d101      	bne.n	80156e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80156dc:	2301      	movs	r3, #1
 80156de:	e000      	b.n	80156e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80156e0:	2300      	movs	r3, #0
  }
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3714      	adds	r7, #20
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr
	...

080156f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80156f6:	2300      	movs	r3, #0
 80156f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80156fa:	4b12      	ldr	r3, [pc, #72]	; (8015744 <ip_reass_tmr+0x54>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015700:	e018      	b.n	8015734 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	7fdb      	ldrb	r3, [r3, #31]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d00b      	beq.n	8015722 <ip_reass_tmr+0x32>
      r->timer--;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	7fdb      	ldrb	r3, [r3, #31]
 801570e:	3b01      	subs	r3, #1
 8015710:	b2da      	uxtb	r2, r3
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	60fb      	str	r3, [r7, #12]
 8015720:	e008      	b.n	8015734 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801572c:	68b9      	ldr	r1, [r7, #8]
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 f80a 	bl	8015748 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d1e3      	bne.n	8015702 <ip_reass_tmr+0x12>
     }
   }
}
 801573a:	bf00      	nop
 801573c:	3710      	adds	r7, #16
 801573e:	46bd      	mov	sp, r7
 8015740:	bd80      	pop	{r7, pc}
 8015742:	bf00      	nop
 8015744:	20008d80 	.word	0x20008d80

08015748 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b088      	sub	sp, #32
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015752:	2300      	movs	r3, #0
 8015754:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015756:	683a      	ldr	r2, [r7, #0]
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	429a      	cmp	r2, r3
 801575c:	d105      	bne.n	801576a <ip_reass_free_complete_datagram+0x22>
 801575e:	4b45      	ldr	r3, [pc, #276]	; (8015874 <ip_reass_free_complete_datagram+0x12c>)
 8015760:	22ab      	movs	r2, #171	; 0xab
 8015762:	4945      	ldr	r1, [pc, #276]	; (8015878 <ip_reass_free_complete_datagram+0x130>)
 8015764:	4845      	ldr	r0, [pc, #276]	; (801587c <ip_reass_free_complete_datagram+0x134>)
 8015766:	f001 f8a9 	bl	80168bc <iprintf>
  if (prev != NULL) {
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d00a      	beq.n	8015786 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	687a      	ldr	r2, [r7, #4]
 8015776:	429a      	cmp	r2, r3
 8015778:	d005      	beq.n	8015786 <ip_reass_free_complete_datagram+0x3e>
 801577a:	4b3e      	ldr	r3, [pc, #248]	; (8015874 <ip_reass_free_complete_datagram+0x12c>)
 801577c:	22ad      	movs	r2, #173	; 0xad
 801577e:	4940      	ldr	r1, [pc, #256]	; (8015880 <ip_reass_free_complete_datagram+0x138>)
 8015780:	483e      	ldr	r0, [pc, #248]	; (801587c <ip_reass_free_complete_datagram+0x134>)
 8015782:	f001 f89b 	bl	80168bc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	685b      	ldr	r3, [r3, #4]
 801578c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	889b      	ldrh	r3, [r3, #4]
 8015792:	b29b      	uxth	r3, r3
 8015794:	2b00      	cmp	r3, #0
 8015796:	d12a      	bne.n	80157ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801579e:	697b      	ldr	r3, [r7, #20]
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	6858      	ldr	r0, [r3, #4]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	3308      	adds	r3, #8
 80157ae:	2214      	movs	r2, #20
 80157b0:	4619      	mov	r1, r3
 80157b2:	f001 f870 	bl	8016896 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80157b6:	2101      	movs	r1, #1
 80157b8:	69b8      	ldr	r0, [r7, #24]
 80157ba:	f7ff fc47 	bl	801504c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80157be:	69b8      	ldr	r0, [r7, #24]
 80157c0:	f7f6 fc06 	bl	800bfd0 <pbuf_clen>
 80157c4:	4603      	mov	r3, r0
 80157c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157c8:	8bfa      	ldrh	r2, [r7, #30]
 80157ca:	8a7b      	ldrh	r3, [r7, #18]
 80157cc:	4413      	add	r3, r2
 80157ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157d2:	db05      	blt.n	80157e0 <ip_reass_free_complete_datagram+0x98>
 80157d4:	4b27      	ldr	r3, [pc, #156]	; (8015874 <ip_reass_free_complete_datagram+0x12c>)
 80157d6:	22bc      	movs	r2, #188	; 0xbc
 80157d8:	492a      	ldr	r1, [pc, #168]	; (8015884 <ip_reass_free_complete_datagram+0x13c>)
 80157da:	4828      	ldr	r0, [pc, #160]	; (801587c <ip_reass_free_complete_datagram+0x134>)
 80157dc:	f001 f86e 	bl	80168bc <iprintf>
    pbufs_freed += clen;
 80157e0:	8bfa      	ldrh	r2, [r7, #30]
 80157e2:	8a7b      	ldrh	r3, [r7, #18]
 80157e4:	4413      	add	r3, r2
 80157e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80157e8:	69b8      	ldr	r0, [r7, #24]
 80157ea:	f7f6 fb57 	bl	800be9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80157f4:	e01f      	b.n	8015836 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80157fc:	69bb      	ldr	r3, [r7, #24]
 80157fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7f6 fbe2 	bl	800bfd0 <pbuf_clen>
 801580c:	4603      	mov	r3, r0
 801580e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015810:	8bfa      	ldrh	r2, [r7, #30]
 8015812:	8a7b      	ldrh	r3, [r7, #18]
 8015814:	4413      	add	r3, r2
 8015816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801581a:	db05      	blt.n	8015828 <ip_reass_free_complete_datagram+0xe0>
 801581c:	4b15      	ldr	r3, [pc, #84]	; (8015874 <ip_reass_free_complete_datagram+0x12c>)
 801581e:	22cc      	movs	r2, #204	; 0xcc
 8015820:	4918      	ldr	r1, [pc, #96]	; (8015884 <ip_reass_free_complete_datagram+0x13c>)
 8015822:	4816      	ldr	r0, [pc, #88]	; (801587c <ip_reass_free_complete_datagram+0x134>)
 8015824:	f001 f84a 	bl	80168bc <iprintf>
    pbufs_freed += clen;
 8015828:	8bfa      	ldrh	r2, [r7, #30]
 801582a:	8a7b      	ldrh	r3, [r7, #18]
 801582c:	4413      	add	r3, r2
 801582e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015830:	68f8      	ldr	r0, [r7, #12]
 8015832:	f7f6 fb33 	bl	800be9c <pbuf_free>
  while (p != NULL) {
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1dc      	bne.n	80157f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801583c:	6839      	ldr	r1, [r7, #0]
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f000 f8c2 	bl	80159c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8015844:	4b10      	ldr	r3, [pc, #64]	; (8015888 <ip_reass_free_complete_datagram+0x140>)
 8015846:	881b      	ldrh	r3, [r3, #0]
 8015848:	8bfa      	ldrh	r2, [r7, #30]
 801584a:	429a      	cmp	r2, r3
 801584c:	d905      	bls.n	801585a <ip_reass_free_complete_datagram+0x112>
 801584e:	4b09      	ldr	r3, [pc, #36]	; (8015874 <ip_reass_free_complete_datagram+0x12c>)
 8015850:	22d2      	movs	r2, #210	; 0xd2
 8015852:	490e      	ldr	r1, [pc, #56]	; (801588c <ip_reass_free_complete_datagram+0x144>)
 8015854:	4809      	ldr	r0, [pc, #36]	; (801587c <ip_reass_free_complete_datagram+0x134>)
 8015856:	f001 f831 	bl	80168bc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801585a:	4b0b      	ldr	r3, [pc, #44]	; (8015888 <ip_reass_free_complete_datagram+0x140>)
 801585c:	881a      	ldrh	r2, [r3, #0]
 801585e:	8bfb      	ldrh	r3, [r7, #30]
 8015860:	1ad3      	subs	r3, r2, r3
 8015862:	b29a      	uxth	r2, r3
 8015864:	4b08      	ldr	r3, [pc, #32]	; (8015888 <ip_reass_free_complete_datagram+0x140>)
 8015866:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015868:	8bfb      	ldrh	r3, [r7, #30]
}
 801586a:	4618      	mov	r0, r3
 801586c:	3720      	adds	r7, #32
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	0801a820 	.word	0x0801a820
 8015878:	0801a85c 	.word	0x0801a85c
 801587c:	0801a868 	.word	0x0801a868
 8015880:	0801a890 	.word	0x0801a890
 8015884:	0801a8a4 	.word	0x0801a8a4
 8015888:	20008d84 	.word	0x20008d84
 801588c:	0801a8c4 	.word	0x0801a8c4

08015890 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b08a      	sub	sp, #40	; 0x28
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801589a:	2300      	movs	r3, #0
 801589c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801589e:	2300      	movs	r3, #0
 80158a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80158a2:	2300      	movs	r3, #0
 80158a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80158a6:	2300      	movs	r3, #0
 80158a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80158aa:	2300      	movs	r3, #0
 80158ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80158ae:	4b28      	ldr	r3, [pc, #160]	; (8015950 <ip_reass_remove_oldest_datagram+0xc0>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158b4:	e030      	b.n	8015918 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	695a      	ldr	r2, [r3, #20]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d10c      	bne.n	80158dc <ip_reass_remove_oldest_datagram+0x4c>
 80158c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c4:	699a      	ldr	r2, [r3, #24]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	691b      	ldr	r3, [r3, #16]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d106      	bne.n	80158dc <ip_reass_remove_oldest_datagram+0x4c>
 80158ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d0:	899a      	ldrh	r2, [r3, #12]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	889b      	ldrh	r3, [r3, #4]
 80158d6:	b29b      	uxth	r3, r3
 80158d8:	429a      	cmp	r2, r3
 80158da:	d014      	beq.n	8015906 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	3301      	adds	r3, #1
 80158e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80158e2:	6a3b      	ldr	r3, [r7, #32]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d104      	bne.n	80158f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80158e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	61bb      	str	r3, [r7, #24]
 80158f0:	e009      	b.n	8015906 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80158f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f4:	7fda      	ldrb	r2, [r3, #31]
 80158f6:	6a3b      	ldr	r3, [r7, #32]
 80158f8:	7fdb      	ldrb	r3, [r3, #31]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d803      	bhi.n	8015906 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80158fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015900:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d001      	beq.n	8015912 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015910:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591a:	2b00      	cmp	r3, #0
 801591c:	d1cb      	bne.n	80158b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801591e:	6a3b      	ldr	r3, [r7, #32]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d008      	beq.n	8015936 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015924:	69b9      	ldr	r1, [r7, #24]
 8015926:	6a38      	ldr	r0, [r7, #32]
 8015928:	f7ff ff0e 	bl	8015748 <ip_reass_free_complete_datagram>
 801592c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801592e:	697a      	ldr	r2, [r7, #20]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	4413      	add	r3, r2
 8015934:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015936:	697a      	ldr	r2, [r7, #20]
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	429a      	cmp	r2, r3
 801593c:	da02      	bge.n	8015944 <ip_reass_remove_oldest_datagram+0xb4>
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	2b01      	cmp	r3, #1
 8015942:	dcac      	bgt.n	801589e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015944:	697b      	ldr	r3, [r7, #20]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3728      	adds	r7, #40	; 0x28
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	20008d80 	.word	0x20008d80

08015954 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
 801595c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801595e:	2004      	movs	r0, #4
 8015960:	f7f5 fce8 	bl	800b334 <memp_malloc>
 8015964:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d110      	bne.n	801598e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801596c:	6839      	ldr	r1, [r7, #0]
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7ff ff8e 	bl	8015890 <ip_reass_remove_oldest_datagram>
 8015974:	4602      	mov	r2, r0
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	4293      	cmp	r3, r2
 801597a:	dc03      	bgt.n	8015984 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801597c:	2004      	movs	r0, #4
 801597e:	f7f5 fcd9 	bl	800b334 <memp_malloc>
 8015982:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d101      	bne.n	801598e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801598a:	2300      	movs	r3, #0
 801598c:	e016      	b.n	80159bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801598e:	2220      	movs	r2, #32
 8015990:	2100      	movs	r1, #0
 8015992:	68f8      	ldr	r0, [r7, #12]
 8015994:	f000 ff8a 	bl	80168ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	2203      	movs	r2, #3
 801599c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801599e:	4b09      	ldr	r3, [pc, #36]	; (80159c4 <ip_reass_enqueue_new_datagram+0x70>)
 80159a0:	681a      	ldr	r2, [r3, #0]
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80159a6:	4a07      	ldr	r2, [pc, #28]	; (80159c4 <ip_reass_enqueue_new_datagram+0x70>)
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	3308      	adds	r3, #8
 80159b0:	2214      	movs	r2, #20
 80159b2:	6879      	ldr	r1, [r7, #4]
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 ff6e 	bl	8016896 <memcpy>
  return ipr;
 80159ba:	68fb      	ldr	r3, [r7, #12]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	20008d80 	.word	0x20008d80

080159c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80159d2:	4b10      	ldr	r3, [pc, #64]	; (8015a14 <ip_reass_dequeue_datagram+0x4c>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d104      	bne.n	80159e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4a0c      	ldr	r2, [pc, #48]	; (8015a14 <ip_reass_dequeue_datagram+0x4c>)
 80159e2:	6013      	str	r3, [r2, #0]
 80159e4:	e00d      	b.n	8015a02 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d106      	bne.n	80159fa <ip_reass_dequeue_datagram+0x32>
 80159ec:	4b0a      	ldr	r3, [pc, #40]	; (8015a18 <ip_reass_dequeue_datagram+0x50>)
 80159ee:	f240 1245 	movw	r2, #325	; 0x145
 80159f2:	490a      	ldr	r1, [pc, #40]	; (8015a1c <ip_reass_dequeue_datagram+0x54>)
 80159f4:	480a      	ldr	r0, [pc, #40]	; (8015a20 <ip_reass_dequeue_datagram+0x58>)
 80159f6:	f000 ff61 	bl	80168bc <iprintf>
    prev->next = ipr->next;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015a02:	6879      	ldr	r1, [r7, #4]
 8015a04:	2004      	movs	r0, #4
 8015a06:	f7f5 fce7 	bl	800b3d8 <memp_free>
}
 8015a0a:	bf00      	nop
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	20008d80 	.word	0x20008d80
 8015a18:	0801a820 	.word	0x0801a820
 8015a1c:	0801a8e0 	.word	0x0801a8e0
 8015a20:	0801a868 	.word	0x0801a868

08015a24 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b08c      	sub	sp, #48	; 0x30
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8015a30:	2300      	movs	r3, #0
 8015a32:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015a34:	2301      	movs	r3, #1
 8015a36:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8015a38:	68bb      	ldr	r3, [r7, #8]
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015a3e:	69fb      	ldr	r3, [r7, #28]
 8015a40:	885b      	ldrh	r3, [r3, #2]
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7f5 f851 	bl	800aaec <lwip_htons>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	69fb      	ldr	r3, [r7, #28]
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	f003 030f 	and.w	r3, r3, #15
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	1ad3      	subs	r3, r2, r3
 8015a60:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015a62:	69fb      	ldr	r3, [r7, #28]
 8015a64:	88db      	ldrh	r3, [r3, #6]
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7f5 f83f 	bl	800aaec <lwip_htons>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a82:	2200      	movs	r2, #0
 8015a84:	701a      	strb	r2, [r3, #0]
 8015a86:	2200      	movs	r2, #0
 8015a88:	705a      	strb	r2, [r3, #1]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	709a      	strb	r2, [r3, #2]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a94:	8b3a      	ldrh	r2, [r7, #24]
 8015a96:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8015a98:	8b3a      	ldrh	r2, [r7, #24]
 8015a9a:	8b7b      	ldrh	r3, [r7, #26]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8015aaa:	e061      	b.n	8015b70 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8015aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aae:	685b      	ldr	r3, [r3, #4]
 8015ab0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8015ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab4:	889b      	ldrh	r3, [r3, #4]
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	889b      	ldrh	r3, [r3, #4]
 8015abc:	b29b      	uxth	r3, r3
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d232      	bcs.n	8015b28 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ac6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d01f      	beq.n	8015b0e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad0:	889b      	ldrh	r3, [r3, #4]
 8015ad2:	b29a      	uxth	r2, r3
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	88db      	ldrh	r3, [r3, #6]
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	429a      	cmp	r2, r3
 8015adc:	f0c0 80e3 	bcc.w	8015ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8015ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae2:	88db      	ldrh	r3, [r3, #6]
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	889b      	ldrh	r3, [r3, #4]
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	429a      	cmp	r2, r3
 8015aee:	f200 80da 	bhi.w	8015ca6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afa:	88db      	ldrh	r3, [r3, #6]
 8015afc:	b29a      	uxth	r2, r3
 8015afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b00:	889b      	ldrh	r3, [r3, #4]
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d037      	beq.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015b0c:	e034      	b.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8015b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b10:	88db      	ldrh	r3, [r3, #6]
 8015b12:	b29a      	uxth	r2, r3
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	889b      	ldrh	r3, [r3, #4]
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	f200 80c5 	bhi.w	8015caa <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	68ba      	ldr	r2, [r7, #8]
 8015b24:	605a      	str	r2, [r3, #4]
      break;
 8015b26:	e027      	b.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8015b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2a:	889b      	ldrh	r3, [r3, #4]
 8015b2c:	b29a      	uxth	r2, r3
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	889b      	ldrh	r3, [r3, #4]
 8015b32:	b29b      	uxth	r3, r3
 8015b34:	429a      	cmp	r2, r3
 8015b36:	f000 80ba 	beq.w	8015cae <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3c:	889b      	ldrh	r3, [r3, #4]
 8015b3e:	b29a      	uxth	r2, r3
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	88db      	ldrh	r3, [r3, #6]
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	429a      	cmp	r2, r3
 8015b48:	f0c0 80b3 	bcc.w	8015cb2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d009      	beq.n	8015b66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	88db      	ldrh	r3, [r3, #6]
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	889b      	ldrh	r3, [r3, #4]
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d001      	beq.n	8015b66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b62:	2300      	movs	r3, #0
 8015b64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d19a      	bne.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8015b76:	e000      	b.n	8015b7a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8015b78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d12d      	bne.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8015b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d01c      	beq.n	8015bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b88:	88db      	ldrh	r3, [r3, #6]
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8e:	889b      	ldrh	r3, [r3, #4]
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d906      	bls.n	8015ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8015b96:	4b51      	ldr	r3, [pc, #324]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015b98:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015b9c:	4950      	ldr	r1, [pc, #320]	; (8015ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b9e:	4851      	ldr	r0, [pc, #324]	; (8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ba0:	f000 fe8c 	bl	80168bc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba6:	68ba      	ldr	r2, [r7, #8]
 8015ba8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bac:	88db      	ldrh	r3, [r3, #6]
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb2:	889b      	ldrh	r3, [r3, #4]
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d010      	beq.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	623b      	str	r3, [r7, #32]
 8015bbe:	e00d      	b.n	8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d006      	beq.n	8015bd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8015bc8:	4b44      	ldr	r3, [pc, #272]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015bca:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8015bce:	4946      	ldr	r1, [pc, #280]	; (8015ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bd0:	4844      	ldr	r0, [pc, #272]	; (8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015bd2:	f000 fe73 	bl	80168bc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	68ba      	ldr	r2, [r7, #8]
 8015bda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d105      	bne.n	8015bee <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	7f9b      	ldrb	r3, [r3, #30]
 8015be6:	f003 0301 	and.w	r3, r3, #1
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d059      	beq.n	8015ca2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8015bee:	6a3b      	ldr	r3, [r7, #32]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d04f      	beq.n	8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d006      	beq.n	8015c0a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	889b      	ldrh	r3, [r3, #4]
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d002      	beq.n	8015c10 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	623b      	str	r3, [r7, #32]
 8015c0e:	e041      	b.n	8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c12:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c1a:	e012      	b.n	8015c42 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c24:	88db      	ldrh	r3, [r3, #6]
 8015c26:	b29a      	uxth	r2, r3
 8015c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2a:	889b      	ldrh	r3, [r3, #4]
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d002      	beq.n	8015c38 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8015c32:	2300      	movs	r3, #0
 8015c34:	623b      	str	r3, [r7, #32]
            break;
 8015c36:	e007      	b.n	8015c48 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8015c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d1e9      	bne.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c48:	6a3b      	ldr	r3, [r7, #32]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d022      	beq.n	8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	685b      	ldr	r3, [r3, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8015c56:	4b21      	ldr	r3, [pc, #132]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015c58:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8015c5c:	4923      	ldr	r1, [pc, #140]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015c5e:	4821      	ldr	r0, [pc, #132]	; (8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015c60:	f000 fe2c 	bl	80168bc <iprintf>
          LWIP_ASSERT("sanity check",
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	685b      	ldr	r3, [r3, #4]
 8015c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d106      	bne.n	8015c7e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8015c70:	4b1a      	ldr	r3, [pc, #104]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015c72:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015c76:	491d      	ldr	r1, [pc, #116]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015c78:	481a      	ldr	r0, [pc, #104]	; (8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015c7a:	f000 fe1f 	bl	80168bc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d006      	beq.n	8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8015c86:	4b15      	ldr	r3, [pc, #84]	; (8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8015c88:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8015c8c:	4918      	ldr	r1, [pc, #96]	; (8015cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c8e:	4815      	ldr	r0, [pc, #84]	; (8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015c90:	f000 fe14 	bl	80168bc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015c94:	6a3b      	ldr	r3, [r7, #32]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	bf14      	ite	ne
 8015c9a:	2301      	movne	r3, #1
 8015c9c:	2300      	moveq	r3, #0
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	e018      	b.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	e016      	b.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8015ca6:	bf00      	nop
 8015ca8:	e004      	b.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8015caa:	bf00      	nop
 8015cac:	e002      	b.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015cae:	bf00      	nop
 8015cb0:	e000      	b.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8015cb2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8015cb4:	68b8      	ldr	r0, [r7, #8]
 8015cb6:	f7f6 f98b 	bl	800bfd0 <pbuf_clen>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	4b0d      	ldr	r3, [pc, #52]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015cc0:	881b      	ldrh	r3, [r3, #0]
 8015cc2:	1a9b      	subs	r3, r3, r2
 8015cc4:	b29a      	uxth	r2, r3
 8015cc6:	4b0b      	ldr	r3, [pc, #44]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015cc8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8015cca:	68b8      	ldr	r0, [r7, #8]
 8015ccc:	f7f6 f8e6 	bl	800be9c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3730      	adds	r7, #48	; 0x30
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	0801a820 	.word	0x0801a820
 8015ce0:	0801a8fc 	.word	0x0801a8fc
 8015ce4:	0801a868 	.word	0x0801a868
 8015ce8:	0801a91c 	.word	0x0801a91c
 8015cec:	0801a954 	.word	0x0801a954
 8015cf0:	0801a964 	.word	0x0801a964
 8015cf4:	20008d84 	.word	0x20008d84

08015cf8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b08e      	sub	sp, #56	; 0x38
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8015d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	f003 030f 	and.w	r3, r3, #15
 8015d0e:	009b      	lsls	r3, r3, #2
 8015d10:	2b14      	cmp	r3, #20
 8015d12:	f040 8131 	bne.w	8015f78 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	88db      	ldrh	r3, [r3, #6]
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7f4 fee5 	bl	800aaec <lwip_htons>
 8015d22:	4603      	mov	r3, r0
 8015d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8015d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	4618      	mov	r0, r3
 8015d36:	f7f4 fed9 	bl	800aaec <lwip_htons>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	f003 030f 	and.w	r3, r3, #15
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	1ad3      	subs	r3, r2, r3
 8015d50:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f7f6 f93c 	bl	800bfd0 <pbuf_clen>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d5c:	4b8d      	ldr	r3, [pc, #564]	; (8015f94 <ip4_reass+0x29c>)
 8015d5e:	881b      	ldrh	r3, [r3, #0]
 8015d60:	461a      	mov	r2, r3
 8015d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d64:	4413      	add	r3, r2
 8015d66:	2b0a      	cmp	r3, #10
 8015d68:	dd10      	ble.n	8015d8c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d70:	f7ff fd8e 	bl	8015890 <ip_reass_remove_oldest_datagram>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f000 8100 	beq.w	8015f7c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015d7c:	4b85      	ldr	r3, [pc, #532]	; (8015f94 <ip4_reass+0x29c>)
 8015d7e:	881b      	ldrh	r3, [r3, #0]
 8015d80:	461a      	mov	r2, r3
 8015d82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d84:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d86:	2b0a      	cmp	r3, #10
 8015d88:	f300 80f8 	bgt.w	8015f7c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015d8c:	4b82      	ldr	r3, [pc, #520]	; (8015f98 <ip4_reass+0x2a0>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	633b      	str	r3, [r7, #48]	; 0x30
 8015d92:	e015      	b.n	8015dc0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d96:	695a      	ldr	r2, [r3, #20]
 8015d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9a:	68db      	ldr	r3, [r3, #12]
 8015d9c:	429a      	cmp	r2, r3
 8015d9e:	d10c      	bne.n	8015dba <ip4_reass+0xc2>
 8015da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da2:	699a      	ldr	r2, [r3, #24]
 8015da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da6:	691b      	ldr	r3, [r3, #16]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d106      	bne.n	8015dba <ip4_reass+0xc2>
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	899a      	ldrh	r2, [r3, #12]
 8015db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db2:	889b      	ldrh	r3, [r3, #4]
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d006      	beq.n	8015dc8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8015dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d1e6      	bne.n	8015d94 <ip4_reass+0x9c>
 8015dc6:	e000      	b.n	8015dca <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015dc8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d109      	bne.n	8015de4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dd6:	f7ff fdbd 	bl	8015954 <ip_reass_enqueue_new_datagram>
 8015dda:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d11c      	bne.n	8015e1c <ip4_reass+0x124>
      goto nullreturn;
 8015de2:	e0ce      	b.n	8015f82 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de6:	88db      	ldrh	r3, [r3, #6]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f4 fe7e 	bl	800aaec <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d110      	bne.n	8015e1c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	89db      	ldrh	r3, [r3, #14]
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7f4 fe74 	bl	800aaec <lwip_htons>
 8015e04:	4603      	mov	r3, r0
 8015e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d006      	beq.n	8015e1c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e10:	3308      	adds	r3, #8
 8015e12:	2214      	movs	r2, #20
 8015e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e16:	4618      	mov	r0, r3
 8015e18:	f000 fd3d 	bl	8016896 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1e:	88db      	ldrh	r3, [r3, #6]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	f003 0320 	and.w	r3, r3, #32
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	bf0c      	ite	eq
 8015e2a:	2301      	moveq	r3, #1
 8015e2c:	2300      	movne	r3, #0
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00e      	beq.n	8015e56 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e3c:	4413      	add	r3, r2
 8015e3e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015e40:	8b7a      	ldrh	r2, [r7, #26]
 8015e42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e44:	429a      	cmp	r2, r3
 8015e46:	f0c0 8099 	bcc.w	8015f7c <ip4_reass+0x284>
 8015e4a:	8b7b      	ldrh	r3, [r7, #26]
 8015e4c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e50:	4293      	cmp	r3, r2
 8015e52:	f200 8093 	bhi.w	8015f7c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e56:	69fa      	ldr	r2, [r7, #28]
 8015e58:	6879      	ldr	r1, [r7, #4]
 8015e5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e5c:	f7ff fde2 	bl	8015a24 <ip_reass_chain_frag_into_datagram_and_validate>
 8015e60:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e68:	f000 808a 	beq.w	8015f80 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e6c:	4b49      	ldr	r3, [pc, #292]	; (8015f94 <ip4_reass+0x29c>)
 8015e6e:	881a      	ldrh	r2, [r3, #0]
 8015e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e72:	4413      	add	r3, r2
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	4b47      	ldr	r3, [pc, #284]	; (8015f94 <ip4_reass+0x29c>)
 8015e78:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00d      	beq.n	8015e9c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e84:	4413      	add	r3, r2
 8015e86:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8a:	8a7a      	ldrh	r2, [r7, #18]
 8015e8c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e90:	7f9b      	ldrb	r3, [r3, #30]
 8015e92:	f043 0301 	orr.w	r3, r3, #1
 8015e96:	b2da      	uxtb	r2, r3
 8015e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d168      	bne.n	8015f74 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8015ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea4:	8b9b      	ldrh	r3, [r3, #28]
 8015ea6:	3314      	adds	r3, #20
 8015ea8:	b29a      	uxth	r2, r3
 8015eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eac:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8015eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8015eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec2:	3308      	adds	r3, #8
 8015ec4:	2214      	movs	r2, #20
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eca:	f000 fce4 	bl	8016896 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	8b9b      	ldrh	r3, [r3, #28]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7f4 fe0a 	bl	800aaec <lwip_htons>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	461a      	mov	r2, r3
 8015edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ede:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	719a      	strb	r2, [r3, #6]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eec:	2200      	movs	r2, #0
 8015eee:	729a      	strb	r2, [r3, #10]
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015efa:	e00e      	b.n	8015f1a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8015efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8015f02:	f06f 0113 	mvn.w	r1, #19
 8015f06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f08:	f7f5 ffa4 	bl	800be54 <pbuf_header>
      pbuf_cat(p, r);
 8015f0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f7f6 f89e 	bl	800c050 <pbuf_cat>
      r = iprh->next_pbuf;
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d1ed      	bne.n	8015efc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015f20:	4b1d      	ldr	r3, [pc, #116]	; (8015f98 <ip4_reass+0x2a0>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d102      	bne.n	8015f30 <ip4_reass+0x238>
      ipr_prev = NULL;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f2e:	e010      	b.n	8015f52 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f30:	4b19      	ldr	r3, [pc, #100]	; (8015f98 <ip4_reass+0x2a0>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f36:	e007      	b.n	8015f48 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8015f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d006      	beq.n	8015f50 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d1f4      	bne.n	8015f38 <ip4_reass+0x240>
 8015f4e:	e000      	b.n	8015f52 <ip4_reass+0x25a>
          break;
 8015f50:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f56:	f7ff fd37 	bl	80159c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7f6 f838 	bl	800bfd0 <pbuf_clen>
 8015f60:	4603      	mov	r3, r0
 8015f62:	461a      	mov	r2, r3
 8015f64:	4b0b      	ldr	r3, [pc, #44]	; (8015f94 <ip4_reass+0x29c>)
 8015f66:	881b      	ldrh	r3, [r3, #0]
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	4b09      	ldr	r3, [pc, #36]	; (8015f94 <ip4_reass+0x29c>)
 8015f6e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	e00a      	b.n	8015f8a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015f74:	2300      	movs	r3, #0
 8015f76:	e008      	b.n	8015f8a <ip4_reass+0x292>
    goto nullreturn;
 8015f78:	bf00      	nop
 8015f7a:	e002      	b.n	8015f82 <ip4_reass+0x28a>

nullreturn:
 8015f7c:	bf00      	nop
 8015f7e:	e000      	b.n	8015f82 <ip4_reass+0x28a>
    goto nullreturn;
 8015f80:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7f5 ff8a 	bl	800be9c <pbuf_free>
  return NULL;
 8015f88:	2300      	movs	r3, #0
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3738      	adds	r7, #56	; 0x38
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
 8015f92:	bf00      	nop
 8015f94:	20008d84 	.word	0x20008d84
 8015f98:	20008d80 	.word	0x20008d80

08015f9c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8015fa0:	2005      	movs	r0, #5
 8015fa2:	f7f5 f9c7 	bl	800b334 <memp_malloc>
 8015fa6:	4603      	mov	r3, r0
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	bd80      	pop	{r7, pc}

08015fac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d106      	bne.n	8015fc8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015fba:	4b07      	ldr	r3, [pc, #28]	; (8015fd8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015fbc:	f240 22ae 	movw	r2, #686	; 0x2ae
 8015fc0:	4906      	ldr	r1, [pc, #24]	; (8015fdc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015fc2:	4807      	ldr	r0, [pc, #28]	; (8015fe0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015fc4:	f000 fc7a 	bl	80168bc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015fc8:	6879      	ldr	r1, [r7, #4]
 8015fca:	2005      	movs	r0, #5
 8015fcc:	f7f5 fa04 	bl	800b3d8 <memp_free>
}
 8015fd0:	bf00      	nop
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	0801a820 	.word	0x0801a820
 8015fdc:	0801a988 	.word	0x0801a988
 8015fe0:	0801a868 	.word	0x0801a868

08015fe4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b084      	sub	sp, #16
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d106      	bne.n	8016004 <ipfrag_free_pbuf_custom+0x20>
 8015ff6:	4b11      	ldr	r3, [pc, #68]	; (801603c <ipfrag_free_pbuf_custom+0x58>)
 8015ff8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8015ffc:	4910      	ldr	r1, [pc, #64]	; (8016040 <ipfrag_free_pbuf_custom+0x5c>)
 8015ffe:	4811      	ldr	r0, [pc, #68]	; (8016044 <ipfrag_free_pbuf_custom+0x60>)
 8016000:	f000 fc5c 	bl	80168bc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8016004:	68fa      	ldr	r2, [r7, #12]
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	429a      	cmp	r2, r3
 801600a:	d006      	beq.n	801601a <ipfrag_free_pbuf_custom+0x36>
 801600c:	4b0b      	ldr	r3, [pc, #44]	; (801603c <ipfrag_free_pbuf_custom+0x58>)
 801600e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8016012:	490d      	ldr	r1, [pc, #52]	; (8016048 <ipfrag_free_pbuf_custom+0x64>)
 8016014:	480b      	ldr	r0, [pc, #44]	; (8016044 <ipfrag_free_pbuf_custom+0x60>)
 8016016:	f000 fc51 	bl	80168bc <iprintf>
  if (pcr->original != NULL) {
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	695b      	ldr	r3, [r3, #20]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d004      	beq.n	801602c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	695b      	ldr	r3, [r3, #20]
 8016026:	4618      	mov	r0, r3
 8016028:	f7f5 ff38 	bl	800be9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f7ff ffbd 	bl	8015fac <ip_frag_free_pbuf_custom_ref>
}
 8016032:	bf00      	nop
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	0801a820 	.word	0x0801a820
 8016040:	0801a994 	.word	0x0801a994
 8016044:	0801a868 	.word	0x0801a868
 8016048:	0801a9a0 	.word	0x0801a9a0

0801604c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b092      	sub	sp, #72	; 0x48
 8016050:	af02      	add	r7, sp, #8
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016060:	3b14      	subs	r3, #20
 8016062:	2b00      	cmp	r3, #0
 8016064:	da00      	bge.n	8016068 <ip4_frag+0x1c>
 8016066:	3307      	adds	r3, #7
 8016068:	10db      	asrs	r3, r3, #3
 801606a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801606c:	2314      	movs	r3, #20
 801606e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	f003 030f 	and.w	r3, r3, #15
 8016082:	009b      	lsls	r3, r3, #2
 8016084:	2b14      	cmp	r3, #20
 8016086:	d009      	beq.n	801609c <ip4_frag+0x50>
 8016088:	4b79      	ldr	r3, [pc, #484]	; (8016270 <ip4_frag+0x224>)
 801608a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801608e:	4979      	ldr	r1, [pc, #484]	; (8016274 <ip4_frag+0x228>)
 8016090:	4879      	ldr	r0, [pc, #484]	; (8016278 <ip4_frag+0x22c>)
 8016092:	f000 fc13 	bl	80168bc <iprintf>
 8016096:	f06f 0305 	mvn.w	r3, #5
 801609a:	e0e5      	b.n	8016268 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609e:	88db      	ldrh	r3, [r3, #6]
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7f4 fd22 	bl	800aaec <lwip_htons>
 80160a8:	4603      	mov	r3, r0
 80160aa:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80160ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160b2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80160b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d009      	beq.n	80160d2 <ip4_frag+0x86>
 80160be:	4b6c      	ldr	r3, [pc, #432]	; (8016270 <ip4_frag+0x224>)
 80160c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80160c4:	496d      	ldr	r1, [pc, #436]	; (801627c <ip4_frag+0x230>)
 80160c6:	486c      	ldr	r0, [pc, #432]	; (8016278 <ip4_frag+0x22c>)
 80160c8:	f000 fbf8 	bl	80168bc <iprintf>
 80160cc:	f06f 0305 	mvn.w	r3, #5
 80160d0:	e0ca      	b.n	8016268 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	891b      	ldrh	r3, [r3, #8]
 80160d6:	3b14      	subs	r3, #20
 80160d8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80160da:	e0bc      	b.n	8016256 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80160dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80160de:	00da      	lsls	r2, r3, #3
 80160e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160e2:	4293      	cmp	r3, r2
 80160e4:	bfa8      	it	ge
 80160e6:	4613      	movge	r3, r2
 80160e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80160ea:	2200      	movs	r2, #0
 80160ec:	2114      	movs	r1, #20
 80160ee:	2002      	movs	r0, #2
 80160f0:	f7f5 fb62 	bl	800b7b8 <pbuf_alloc>
 80160f4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80160f6:	6a3b      	ldr	r3, [r7, #32]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	f000 80b2 	beq.w	8016262 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	895b      	ldrh	r3, [r3, #10]
 8016102:	2b13      	cmp	r3, #19
 8016104:	d806      	bhi.n	8016114 <ip4_frag+0xc8>
 8016106:	4b5a      	ldr	r3, [pc, #360]	; (8016270 <ip4_frag+0x224>)
 8016108:	f240 3209 	movw	r2, #777	; 0x309
 801610c:	495c      	ldr	r1, [pc, #368]	; (8016280 <ip4_frag+0x234>)
 801610e:	485a      	ldr	r0, [pc, #360]	; (8016278 <ip4_frag+0x22c>)
 8016110:	f000 fbd4 	bl	80168bc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016114:	6a3b      	ldr	r3, [r7, #32]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	2214      	movs	r2, #20
 801611a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801611c:	4618      	mov	r0, r3
 801611e:	f000 fbba 	bl	8016896 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016122:	6a3b      	ldr	r3, [r7, #32]
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8016128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801612a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801612c:	e04f      	b.n	80161ce <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	895a      	ldrh	r2, [r3, #10]
 8016132:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016134:	1ad3      	subs	r3, r2, r3
 8016136:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016138:	8b7a      	ldrh	r2, [r7, #26]
 801613a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801613c:	4293      	cmp	r3, r2
 801613e:	bf28      	it	cs
 8016140:	4613      	movcs	r3, r2
 8016142:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016144:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016146:	2b00      	cmp	r3, #0
 8016148:	d105      	bne.n	8016156 <ip4_frag+0x10a>
        poff = 0;
 801614a:	2300      	movs	r3, #0
 801614c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	60fb      	str	r3, [r7, #12]
        continue;
 8016154:	e03b      	b.n	80161ce <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016156:	f7ff ff21 	bl	8015f9c <ip_frag_alloc_pbuf_custom_ref>
 801615a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d103      	bne.n	801616a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8016162:	6a38      	ldr	r0, [r7, #32]
 8016164:	f7f5 fe9a 	bl	800be9c <pbuf_free>
        goto memerr;
 8016168:	e07c      	b.n	8016264 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801616a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016172:	4413      	add	r3, r2
 8016174:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8016176:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016178:	9201      	str	r2, [sp, #4]
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	4603      	mov	r3, r0
 801617e:	2202      	movs	r2, #2
 8016180:	2004      	movs	r0, #4
 8016182:	f7f5 fcad 	bl	800bae0 <pbuf_alloced_custom>
 8016186:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d106      	bne.n	801619c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801618e:	6978      	ldr	r0, [r7, #20]
 8016190:	f7ff ff0c 	bl	8015fac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016194:	6a38      	ldr	r0, [r7, #32]
 8016196:	f7f5 fe81 	bl	800be9c <pbuf_free>
        goto memerr;
 801619a:	e063      	b.n	8016264 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801619c:	68f8      	ldr	r0, [r7, #12]
 801619e:	f7f5 ff2f 	bl	800c000 <pbuf_ref>
      pcr->original = p;
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	4a36      	ldr	r2, [pc, #216]	; (8016284 <ip4_frag+0x238>)
 80161ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80161ae:	6939      	ldr	r1, [r7, #16]
 80161b0:	6a38      	ldr	r0, [r7, #32]
 80161b2:	f7f5 ff4d 	bl	800c050 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80161b6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80161b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80161be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d004      	beq.n	80161ce <ip4_frag+0x182>
        poff = 0;
 80161c4:	2300      	movs	r3, #0
 80161c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80161ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d1ac      	bne.n	801612e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80161d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80161d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161d8:	4413      	add	r3, r2
 80161da:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80161dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80161e2:	3b14      	subs	r3, #20
 80161e4:	429a      	cmp	r2, r3
 80161e6:	bfd4      	ite	le
 80161e8:	2301      	movle	r3, #1
 80161ea:	2300      	movgt	r3, #0
 80161ec:	b2db      	uxtb	r3, r3
 80161ee:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80161f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80161f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d103      	bne.n	8016206 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80161fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016204:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016206:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016208:	4618      	mov	r0, r3
 801620a:	f7f4 fc6f 	bl	800aaec <lwip_htons>
 801620e:	4603      	mov	r3, r0
 8016210:	461a      	mov	r2, r3
 8016212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016214:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8016216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016218:	3314      	adds	r3, #20
 801621a:	b29b      	uxth	r3, r3
 801621c:	4618      	mov	r0, r3
 801621e:	f7f4 fc65 	bl	800aaec <lwip_htons>
 8016222:	4603      	mov	r3, r0
 8016224:	461a      	mov	r2, r3
 8016226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016228:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622c:	2200      	movs	r2, #0
 801622e:	729a      	strb	r2, [r3, #10]
 8016230:	2200      	movs	r2, #0
 8016232:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	695b      	ldr	r3, [r3, #20]
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	6a39      	ldr	r1, [r7, #32]
 801623c:	68b8      	ldr	r0, [r7, #8]
 801623e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016240:	6a38      	ldr	r0, [r7, #32]
 8016242:	f7f5 fe2b 	bl	800be9c <pbuf_free>
    left -= fragsize;
 8016246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016248:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801624e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016250:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016252:	4413      	add	r3, r2
 8016254:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016258:	2b00      	cmp	r3, #0
 801625a:	f47f af3f 	bne.w	80160dc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801625e:	2300      	movs	r3, #0
 8016260:	e002      	b.n	8016268 <ip4_frag+0x21c>
      goto memerr;
 8016262:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016268:	4618      	mov	r0, r3
 801626a:	3740      	adds	r7, #64	; 0x40
 801626c:	46bd      	mov	sp, r7
 801626e:	bd80      	pop	{r7, pc}
 8016270:	0801a820 	.word	0x0801a820
 8016274:	0801a9ac 	.word	0x0801a9ac
 8016278:	0801a868 	.word	0x0801a868
 801627c:	0801a9d4 	.word	0x0801a9d4
 8016280:	0801a9f0 	.word	0x0801a9f0
 8016284:	08015fe5 	.word	0x08015fe5

08016288 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b086      	sub	sp, #24
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8016292:	230e      	movs	r3, #14
 8016294:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	895b      	ldrh	r3, [r3, #10]
 801629a:	2b0e      	cmp	r3, #14
 801629c:	d977      	bls.n	801638e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80162a4:	693b      	ldr	r3, [r7, #16]
 80162a6:	7b1a      	ldrb	r2, [r3, #12]
 80162a8:	7b5b      	ldrb	r3, [r3, #13]
 80162aa:	021b      	lsls	r3, r3, #8
 80162ac:	4313      	orrs	r3, r2
 80162ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	f003 0301 	and.w	r3, r3, #1
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d023      	beq.n	8016304 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	2b01      	cmp	r3, #1
 80162c2:	d10f      	bne.n	80162e4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162c4:	693b      	ldr	r3, [r7, #16]
 80162c6:	785b      	ldrb	r3, [r3, #1]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d11b      	bne.n	8016304 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162d0:	2b5e      	cmp	r3, #94	; 0x5e
 80162d2:	d117      	bne.n	8016304 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	7b5b      	ldrb	r3, [r3, #13]
 80162d8:	f043 0310 	orr.w	r3, r3, #16
 80162dc:	b2da      	uxtb	r2, r3
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	735a      	strb	r2, [r3, #13]
 80162e2:	e00f      	b.n	8016304 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	2206      	movs	r2, #6
 80162e8:	4930      	ldr	r1, [pc, #192]	; (80163ac <ethernet_input+0x124>)
 80162ea:	4618      	mov	r0, r3
 80162ec:	f000 fac4 	bl	8016878 <memcmp>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d106      	bne.n	8016304 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	7b5b      	ldrb	r3, [r3, #13]
 80162fa:	f043 0308 	orr.w	r3, r3, #8
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016304:	89fb      	ldrh	r3, [r7, #14]
 8016306:	2b08      	cmp	r3, #8
 8016308:	d003      	beq.n	8016312 <ethernet_input+0x8a>
 801630a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801630e:	d01e      	beq.n	801634e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016310:	e044      	b.n	801639c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016318:	f003 0308 	and.w	r3, r3, #8
 801631c:	2b00      	cmp	r3, #0
 801631e:	d038      	beq.n	8016392 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	895b      	ldrh	r3, [r3, #10]
 8016324:	461a      	mov	r2, r3
 8016326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801632a:	429a      	cmp	r2, r3
 801632c:	db33      	blt.n	8016396 <ethernet_input+0x10e>
 801632e:	8afb      	ldrh	r3, [r7, #22]
 8016330:	425b      	negs	r3, r3
 8016332:	b29b      	uxth	r3, r3
 8016334:	b21b      	sxth	r3, r3
 8016336:	4619      	mov	r1, r3
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7f5 fd8b 	bl	800be54 <pbuf_header>
 801633e:	4603      	mov	r3, r0
 8016340:	2b00      	cmp	r3, #0
 8016342:	d128      	bne.n	8016396 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8016344:	6839      	ldr	r1, [r7, #0]
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f7fe ff62 	bl	8015210 <ip4_input>
      break;
 801634c:	e01d      	b.n	801638a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016354:	f003 0308 	and.w	r3, r3, #8
 8016358:	2b00      	cmp	r3, #0
 801635a:	d01e      	beq.n	801639a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	895b      	ldrh	r3, [r3, #10]
 8016360:	461a      	mov	r2, r3
 8016362:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016366:	429a      	cmp	r2, r3
 8016368:	db15      	blt.n	8016396 <ethernet_input+0x10e>
 801636a:	8afb      	ldrh	r3, [r7, #22]
 801636c:	425b      	negs	r3, r3
 801636e:	b29b      	uxth	r3, r3
 8016370:	b21b      	sxth	r3, r3
 8016372:	4619      	mov	r1, r3
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f7f5 fd6d 	bl	800be54 <pbuf_header>
 801637a:	4603      	mov	r3, r0
 801637c:	2b00      	cmp	r3, #0
 801637e:	d10a      	bne.n	8016396 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8016380:	6839      	ldr	r1, [r7, #0]
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f7fe f92c 	bl	80145e0 <etharp_input>
      break;
 8016388:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801638a:	2300      	movs	r3, #0
 801638c:	e00a      	b.n	80163a4 <ethernet_input+0x11c>
    goto free_and_return;
 801638e:	bf00      	nop
 8016390:	e004      	b.n	801639c <ethernet_input+0x114>
        goto free_and_return;
 8016392:	bf00      	nop
 8016394:	e002      	b.n	801639c <ethernet_input+0x114>

free_and_return:
 8016396:	bf00      	nop
 8016398:	e000      	b.n	801639c <ethernet_input+0x114>
        goto free_and_return;
 801639a:	bf00      	nop
  pbuf_free(p);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f7f5 fd7d 	bl	800be9c <pbuf_free>
  return ERR_OK;
 80163a2:	2300      	movs	r3, #0
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3718      	adds	r7, #24
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	08025fb8 	.word	0x08025fb8

080163b0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b086      	sub	sp, #24
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
 80163bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80163be:	8c3b      	ldrh	r3, [r7, #32]
 80163c0:	4618      	mov	r0, r3
 80163c2:	f7f4 fb93 	bl	800aaec <lwip_htons>
 80163c6:	4603      	mov	r3, r0
 80163c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80163ca:	210e      	movs	r1, #14
 80163cc:	68b8      	ldr	r0, [r7, #8]
 80163ce:	f7f5 fd41 	bl	800be54 <pbuf_header>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d125      	bne.n	8016424 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80163de:	693b      	ldr	r3, [r7, #16]
 80163e0:	8afa      	ldrh	r2, [r7, #22]
 80163e2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80163e4:	693b      	ldr	r3, [r7, #16]
 80163e6:	2206      	movs	r2, #6
 80163e8:	6839      	ldr	r1, [r7, #0]
 80163ea:	4618      	mov	r0, r3
 80163ec:	f000 fa53 	bl	8016896 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	3306      	adds	r3, #6
 80163f4:	2206      	movs	r2, #6
 80163f6:	6879      	ldr	r1, [r7, #4]
 80163f8:	4618      	mov	r0, r3
 80163fa:	f000 fa4c 	bl	8016896 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016404:	2b06      	cmp	r3, #6
 8016406:	d006      	beq.n	8016416 <ethernet_output+0x66>
 8016408:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <ethernet_output+0x84>)
 801640a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801640e:	490a      	ldr	r1, [pc, #40]	; (8016438 <ethernet_output+0x88>)
 8016410:	480a      	ldr	r0, [pc, #40]	; (801643c <ethernet_output+0x8c>)
 8016412:	f000 fa53 	bl	80168bc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	699b      	ldr	r3, [r3, #24]
 801641a:	68b9      	ldr	r1, [r7, #8]
 801641c:	68f8      	ldr	r0, [r7, #12]
 801641e:	4798      	blx	r3
 8016420:	4603      	mov	r3, r0
 8016422:	e002      	b.n	801642a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016424:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016426:	f06f 0301 	mvn.w	r3, #1
}
 801642a:	4618      	mov	r0, r3
 801642c:	3718      	adds	r7, #24
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	0801aa10 	.word	0x0801aa10
 8016438:	0801aa48 	.word	0x0801aa48
 801643c:	0801aa7c 	.word	0x0801aa7c

08016440 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b086      	sub	sp, #24
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
 8016448:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	60bb      	str	r3, [r7, #8]
 801644e:	2304      	movs	r3, #4
 8016450:	60fb      	str	r3, [r7, #12]
 8016452:	2300      	movs	r3, #0
 8016454:	613b      	str	r3, [r7, #16]
 8016456:	2300      	movs	r3, #0
 8016458:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801645a:	f107 0308 	add.w	r3, r7, #8
 801645e:	2100      	movs	r1, #0
 8016460:	4618      	mov	r0, r3
 8016462:	f7ee fdc2 	bl	8004fea <osMessageCreate>
 8016466:	4602      	mov	r2, r0
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d102      	bne.n	801647a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016478:	e000      	b.n	801647c <sys_mbox_new+0x3c>

  return ERR_OK;
 801647a:	2300      	movs	r3, #0
}
 801647c:	4618      	mov	r0, r3
 801647e:	3718      	adds	r7, #24
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	4618      	mov	r0, r3
 8016492:	f7ee fe87 	bl	80051a4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	4618      	mov	r0, r3
 801649c:	f7ee fe98 	bl	80051d0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80164a0:	bf00      	nop
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80164b2:	bf00      	nop
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80164be:	4618      	mov	r0, r3
 80164c0:	f7ee fdbc 	bl	800503c <osMessagePut>
 80164c4:	4603      	mov	r3, r0
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d1f4      	bne.n	80164b4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80164ca:	bf00      	nop
 80164cc:	3708      	adds	r7, #8
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}

080164d2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b084      	sub	sp, #16
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	6078      	str	r0, [r7, #4]
 80164da:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	6839      	ldr	r1, [r7, #0]
 80164e2:	2200      	movs	r2, #0
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7ee fda9 	bl	800503c <osMessagePut>
 80164ea:	4603      	mov	r3, r0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d102      	bne.n	80164f6 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80164f0:	2300      	movs	r3, #0
 80164f2:	73fb      	strb	r3, [r7, #15]
 80164f4:	e001      	b.n	80164fa <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80164f6:	23ff      	movs	r3, #255	; 0xff
 80164f8:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80164fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016506:	b580      	push	{r7, lr}
 8016508:	b08c      	sub	sp, #48	; 0x30
 801650a:	af00      	add	r7, sp, #0
 801650c:	61f8      	str	r0, [r7, #28]
 801650e:	61b9      	str	r1, [r7, #24]
 8016510:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016512:	f7ee fb93 	bl	8004c3c <osKernelSysTick>
 8016516:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d017      	beq.n	801654e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	6819      	ldr	r1, [r3, #0]
 8016522:	f107 0320 	add.w	r3, r7, #32
 8016526:	697a      	ldr	r2, [r7, #20]
 8016528:	4618      	mov	r0, r3
 801652a:	f7ee fdc7 	bl	80050bc <osMessageGet>

    if(event.status == osEventMessage)
 801652e:	6a3b      	ldr	r3, [r7, #32]
 8016530:	2b10      	cmp	r3, #16
 8016532:	d109      	bne.n	8016548 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016536:	461a      	mov	r2, r3
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801653c:	f7ee fb7e 	bl	8004c3c <osKernelSysTick>
 8016540:	4602      	mov	r2, r0
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	e019      	b.n	801657c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801654c:	e016      	b.n	801657c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	6819      	ldr	r1, [r3, #0]
 8016552:	463b      	mov	r3, r7
 8016554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016558:	4618      	mov	r0, r3
 801655a:	f7ee fdaf 	bl	80050bc <osMessageGet>
 801655e:	f107 0320 	add.w	r3, r7, #32
 8016562:	463a      	mov	r2, r7
 8016564:	ca07      	ldmia	r2, {r0, r1, r2}
 8016566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801656c:	461a      	mov	r2, r3
 801656e:	69bb      	ldr	r3, [r7, #24]
 8016570:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016572:	f7ee fb63 	bl	8004c3c <osKernelSysTick>
 8016576:	4602      	mov	r2, r0
 8016578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801657c:	4618      	mov	r0, r3
 801657e:	3730      	adds	r7, #48	; 0x30
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b086      	sub	sp, #24
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6819      	ldr	r1, [r3, #0]
 8016592:	f107 030c 	add.w	r3, r7, #12
 8016596:	2200      	movs	r2, #0
 8016598:	4618      	mov	r0, r3
 801659a:	f7ee fd8f 	bl	80050bc <osMessageGet>

  if(event.status == osEventMessage)
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2b10      	cmp	r3, #16
 80165a2:	d105      	bne.n	80165b0 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	461a      	mov	r2, r3
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80165ac:	2300      	movs	r3, #0
 80165ae:	e001      	b.n	80165b4 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80165b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80165b4:	4618      	mov	r0, r3
 80165b6:	3718      	adds	r7, #24
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}

080165bc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80165bc:	b480      	push	{r7}
 80165be:	b083      	sub	sp, #12
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d101      	bne.n	80165d0 <sys_mbox_valid+0x14>
    return 0;
 80165cc:	2300      	movs	r3, #0
 80165ce:	e000      	b.n	80165d2 <sys_mbox_valid+0x16>
  else
    return 1;
 80165d0:	2301      	movs	r3, #1
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	370c      	adds	r7, #12
 80165d6:	46bd      	mov	sp, r7
 80165d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165dc:	4770      	bx	lr

080165de <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80165de:	b480      	push	{r7}
 80165e0:	b083      	sub	sp, #12
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2200      	movs	r2, #0
 80165ea:	601a      	str	r2, [r3, #0]
}
 80165ec:	bf00      	nop
 80165ee:	370c      	adds	r7, #12
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr

080165f8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	460b      	mov	r3, r1
 8016602:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016604:	2300      	movs	r3, #0
 8016606:	60bb      	str	r3, [r7, #8]
 8016608:	2300      	movs	r3, #0
 801660a:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801660c:	f107 0308 	add.w	r3, r7, #8
 8016610:	2101      	movs	r1, #1
 8016612:	4618      	mov	r0, r3
 8016614:	f7ee fc1e 	bl	8004e54 <osSemaphoreCreate>
 8016618:	4602      	mov	r2, r0
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d102      	bne.n	801662c <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801662a:	e009      	b.n	8016640 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801662c:	78fb      	ldrb	r3, [r7, #3]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d105      	bne.n	801663e <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	2100      	movs	r1, #0
 8016638:	4618      	mov	r0, r3
 801663a:	f7ee fc3f 	bl	8004ebc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801663e:	2300      	movs	r3, #0
}
 8016640:	4618      	mov	r0, r3
 8016642:	3710      	adds	r7, #16
 8016644:	46bd      	mov	sp, r7
 8016646:	bd80      	pop	{r7, pc}

08016648 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016652:	f7ee faf3 	bl	8004c3c <osKernelSysTick>
 8016656:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d011      	beq.n	8016682 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	6839      	ldr	r1, [r7, #0]
 8016664:	4618      	mov	r0, r3
 8016666:	f7ee fc29 	bl	8004ebc <osSemaphoreWait>
 801666a:	4603      	mov	r3, r0
 801666c:	2b00      	cmp	r3, #0
 801666e:	d105      	bne.n	801667c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016670:	f7ee fae4 	bl	8004c3c <osKernelSysTick>
 8016674:	4602      	mov	r2, r0
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	1ad3      	subs	r3, r2, r3
 801667a:	e012      	b.n	80166a2 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801667c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016680:	e00f      	b.n	80166a2 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016682:	bf00      	nop
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801668c:	4618      	mov	r0, r3
 801668e:	f7ee fc15 	bl	8004ebc <osSemaphoreWait>
 8016692:	4603      	mov	r3, r0
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1f5      	bne.n	8016684 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016698:	f7ee fad0 	bl	8004c3c <osKernelSysTick>
 801669c:	4602      	mov	r2, r0
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}

080166aa <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80166aa:	b580      	push	{r7, lr}
 80166ac:	b082      	sub	sp, #8
 80166ae:	af00      	add	r7, sp, #0
 80166b0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	4618      	mov	r0, r3
 80166b8:	f7ee fc4e 	bl	8004f58 <osSemaphoreRelease>
}
 80166bc:	bf00      	nop
 80166be:	3708      	adds	r7, #8
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}

080166c4 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7ee fc77 	bl	8004fc4 <osSemaphoreDelete>
}
 80166d6:	bf00      	nop
 80166d8:	3708      	adds	r7, #8
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80166de:	b480      	push	{r7}
 80166e0:	b083      	sub	sp, #12
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d101      	bne.n	80166f2 <sys_sem_valid+0x14>
    return 0;
 80166ee:	2300      	movs	r3, #0
 80166f0:	e000      	b.n	80166f4 <sys_sem_valid+0x16>
  else
    return 1;
 80166f2:	2301      	movs	r3, #1
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr

08016700 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016700:	b480      	push	{r7}
 8016702:	b083      	sub	sp, #12
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2200      	movs	r2, #0
 801670c:	601a      	str	r2, [r3, #0]
}
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr
	...

0801671c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016720:	4803      	ldr	r0, [pc, #12]	; (8016730 <sys_init+0x14>)
 8016722:	f7ee fafb 	bl	8004d1c <osMutexCreate>
 8016726:	4602      	mov	r2, r0
 8016728:	4b02      	ldr	r3, [pc, #8]	; (8016734 <sys_init+0x18>)
 801672a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801672c:	bf00      	nop
 801672e:	bd80      	pop	{r7, pc}
 8016730:	08025fc8 	.word	0x08025fc8
 8016734:	2000fb08 	.word	0x2000fb08

08016738 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016740:	2300      	movs	r3, #0
 8016742:	60bb      	str	r3, [r7, #8]
 8016744:	2300      	movs	r3, #0
 8016746:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016748:	f107 0308 	add.w	r3, r7, #8
 801674c:	4618      	mov	r0, r3
 801674e:	f7ee fae5 	bl	8004d1c <osMutexCreate>
 8016752:	4602      	mov	r2, r0
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d102      	bne.n	8016766 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016764:	e000      	b.n	8016768 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016766:	2300      	movs	r3, #0
}
 8016768:	4618      	mov	r0, r3
 801676a:	3710      	adds	r7, #16
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016780:	4618      	mov	r0, r3
 8016782:	f7ee fae3 	bl	8004d4c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016786:	bf00      	nop
 8016788:	3708      	adds	r7, #8
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}

0801678e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801678e:	b580      	push	{r7, lr}
 8016790:	b082      	sub	sp, #8
 8016792:	af00      	add	r7, sp, #0
 8016794:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	4618      	mov	r0, r3
 801679c:	f7ee fb24 	bl	8004de8 <osMutexRelease>
}
 80167a0:	bf00      	nop
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b08c      	sub	sp, #48	; 0x30
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
 80167b4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80167b6:	f107 0314 	add.w	r3, r7, #20
 80167ba:	2200      	movs	r2, #0
 80167bc:	601a      	str	r2, [r3, #0]
 80167be:	605a      	str	r2, [r3, #4]
 80167c0:	609a      	str	r2, [r3, #8]
 80167c2:	60da      	str	r2, [r3, #12]
 80167c4:	611a      	str	r2, [r3, #16]
 80167c6:	615a      	str	r2, [r3, #20]
 80167c8:	619a      	str	r2, [r3, #24]
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	617b      	str	r3, [r7, #20]
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	61bb      	str	r3, [r7, #24]
 80167d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d4:	b21b      	sxth	r3, r3
 80167d6:	83bb      	strh	r3, [r7, #28]
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80167dc:	f107 0314 	add.w	r3, r7, #20
 80167e0:	6879      	ldr	r1, [r7, #4]
 80167e2:	4618      	mov	r0, r3
 80167e4:	f7ee fa3a 	bl	8004c5c <osThreadCreate>
 80167e8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3730      	adds	r7, #48	; 0x30
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
	...

080167f4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80167f8:	4b04      	ldr	r3, [pc, #16]	; (801680c <sys_arch_protect+0x18>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016800:	4618      	mov	r0, r3
 8016802:	f7ee faa3 	bl	8004d4c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016806:	2301      	movs	r3, #1
}
 8016808:	4618      	mov	r0, r3
 801680a:	bd80      	pop	{r7, pc}
 801680c:	2000fb08 	.word	0x2000fb08

08016810 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016818:	4b04      	ldr	r3, [pc, #16]	; (801682c <sys_arch_unprotect+0x1c>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4618      	mov	r0, r3
 801681e:	f7ee fae3 	bl	8004de8 <osMutexRelease>
}
 8016822:	bf00      	nop
 8016824:	3708      	adds	r7, #8
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
 801682a:	bf00      	nop
 801682c:	2000fb08 	.word	0x2000fb08

08016830 <__libc_init_array>:
 8016830:	b570      	push	{r4, r5, r6, lr}
 8016832:	4e0d      	ldr	r6, [pc, #52]	; (8016868 <__libc_init_array+0x38>)
 8016834:	4c0d      	ldr	r4, [pc, #52]	; (801686c <__libc_init_array+0x3c>)
 8016836:	1ba4      	subs	r4, r4, r6
 8016838:	10a4      	asrs	r4, r4, #2
 801683a:	2500      	movs	r5, #0
 801683c:	42a5      	cmp	r5, r4
 801683e:	d109      	bne.n	8016854 <__libc_init_array+0x24>
 8016840:	4e0b      	ldr	r6, [pc, #44]	; (8016870 <__libc_init_array+0x40>)
 8016842:	4c0c      	ldr	r4, [pc, #48]	; (8016874 <__libc_init_array+0x44>)
 8016844:	f001 f9ac 	bl	8017ba0 <_init>
 8016848:	1ba4      	subs	r4, r4, r6
 801684a:	10a4      	asrs	r4, r4, #2
 801684c:	2500      	movs	r5, #0
 801684e:	42a5      	cmp	r5, r4
 8016850:	d105      	bne.n	801685e <__libc_init_array+0x2e>
 8016852:	bd70      	pop	{r4, r5, r6, pc}
 8016854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016858:	4798      	blx	r3
 801685a:	3501      	adds	r5, #1
 801685c:	e7ee      	b.n	801683c <__libc_init_array+0xc>
 801685e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016862:	4798      	blx	r3
 8016864:	3501      	adds	r5, #1
 8016866:	e7f2      	b.n	801684e <__libc_init_array+0x1e>
 8016868:	0802617c 	.word	0x0802617c
 801686c:	0802617c 	.word	0x0802617c
 8016870:	0802617c 	.word	0x0802617c
 8016874:	08026180 	.word	0x08026180

08016878 <memcmp>:
 8016878:	b530      	push	{r4, r5, lr}
 801687a:	2400      	movs	r4, #0
 801687c:	42a2      	cmp	r2, r4
 801687e:	d101      	bne.n	8016884 <memcmp+0xc>
 8016880:	2000      	movs	r0, #0
 8016882:	e007      	b.n	8016894 <memcmp+0x1c>
 8016884:	5d03      	ldrb	r3, [r0, r4]
 8016886:	3401      	adds	r4, #1
 8016888:	190d      	adds	r5, r1, r4
 801688a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801688e:	42ab      	cmp	r3, r5
 8016890:	d0f4      	beq.n	801687c <memcmp+0x4>
 8016892:	1b58      	subs	r0, r3, r5
 8016894:	bd30      	pop	{r4, r5, pc}

08016896 <memcpy>:
 8016896:	b510      	push	{r4, lr}
 8016898:	1e43      	subs	r3, r0, #1
 801689a:	440a      	add	r2, r1
 801689c:	4291      	cmp	r1, r2
 801689e:	d100      	bne.n	80168a2 <memcpy+0xc>
 80168a0:	bd10      	pop	{r4, pc}
 80168a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168aa:	e7f7      	b.n	801689c <memcpy+0x6>

080168ac <memset>:
 80168ac:	4402      	add	r2, r0
 80168ae:	4603      	mov	r3, r0
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d100      	bne.n	80168b6 <memset+0xa>
 80168b4:	4770      	bx	lr
 80168b6:	f803 1b01 	strb.w	r1, [r3], #1
 80168ba:	e7f9      	b.n	80168b0 <memset+0x4>

080168bc <iprintf>:
 80168bc:	b40f      	push	{r0, r1, r2, r3}
 80168be:	4b0a      	ldr	r3, [pc, #40]	; (80168e8 <iprintf+0x2c>)
 80168c0:	b513      	push	{r0, r1, r4, lr}
 80168c2:	681c      	ldr	r4, [r3, #0]
 80168c4:	b124      	cbz	r4, 80168d0 <iprintf+0x14>
 80168c6:	69a3      	ldr	r3, [r4, #24]
 80168c8:	b913      	cbnz	r3, 80168d0 <iprintf+0x14>
 80168ca:	4620      	mov	r0, r4
 80168cc:	f000 f90c 	bl	8016ae8 <__sinit>
 80168d0:	ab05      	add	r3, sp, #20
 80168d2:	9a04      	ldr	r2, [sp, #16]
 80168d4:	68a1      	ldr	r1, [r4, #8]
 80168d6:	9301      	str	r3, [sp, #4]
 80168d8:	4620      	mov	r0, r4
 80168da:	f000 fbdb 	bl	8017094 <_vfiprintf_r>
 80168de:	b002      	add	sp, #8
 80168e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168e4:	b004      	add	sp, #16
 80168e6:	4770      	bx	lr
 80168e8:	20000020 	.word	0x20000020

080168ec <rand>:
 80168ec:	b538      	push	{r3, r4, r5, lr}
 80168ee:	4b13      	ldr	r3, [pc, #76]	; (801693c <rand+0x50>)
 80168f0:	681c      	ldr	r4, [r3, #0]
 80168f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80168f4:	b97b      	cbnz	r3, 8016916 <rand+0x2a>
 80168f6:	2018      	movs	r0, #24
 80168f8:	f000 f98e 	bl	8016c18 <malloc>
 80168fc:	4a10      	ldr	r2, [pc, #64]	; (8016940 <rand+0x54>)
 80168fe:	4b11      	ldr	r3, [pc, #68]	; (8016944 <rand+0x58>)
 8016900:	63a0      	str	r0, [r4, #56]	; 0x38
 8016902:	e9c0 2300 	strd	r2, r3, [r0]
 8016906:	4b10      	ldr	r3, [pc, #64]	; (8016948 <rand+0x5c>)
 8016908:	6083      	str	r3, [r0, #8]
 801690a:	230b      	movs	r3, #11
 801690c:	8183      	strh	r3, [r0, #12]
 801690e:	2201      	movs	r2, #1
 8016910:	2300      	movs	r3, #0
 8016912:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016916:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016918:	480c      	ldr	r0, [pc, #48]	; (801694c <rand+0x60>)
 801691a:	690a      	ldr	r2, [r1, #16]
 801691c:	694b      	ldr	r3, [r1, #20]
 801691e:	4c0c      	ldr	r4, [pc, #48]	; (8016950 <rand+0x64>)
 8016920:	4350      	muls	r0, r2
 8016922:	fb04 0003 	mla	r0, r4, r3, r0
 8016926:	fba2 2304 	umull	r2, r3, r2, r4
 801692a:	4403      	add	r3, r0
 801692c:	1c54      	adds	r4, r2, #1
 801692e:	f143 0500 	adc.w	r5, r3, #0
 8016932:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016936:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801693a:	bd38      	pop	{r3, r4, r5, pc}
 801693c:	20000020 	.word	0x20000020
 8016940:	abcd330e 	.word	0xabcd330e
 8016944:	e66d1234 	.word	0xe66d1234
 8016948:	0005deec 	.word	0x0005deec
 801694c:	5851f42d 	.word	0x5851f42d
 8016950:	4c957f2d 	.word	0x4c957f2d

08016954 <siprintf>:
 8016954:	b40e      	push	{r1, r2, r3}
 8016956:	b500      	push	{lr}
 8016958:	b09c      	sub	sp, #112	; 0x70
 801695a:	ab1d      	add	r3, sp, #116	; 0x74
 801695c:	9002      	str	r0, [sp, #8]
 801695e:	9006      	str	r0, [sp, #24]
 8016960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016964:	4809      	ldr	r0, [pc, #36]	; (801698c <siprintf+0x38>)
 8016966:	9107      	str	r1, [sp, #28]
 8016968:	9104      	str	r1, [sp, #16]
 801696a:	4909      	ldr	r1, [pc, #36]	; (8016990 <siprintf+0x3c>)
 801696c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016970:	9105      	str	r1, [sp, #20]
 8016972:	6800      	ldr	r0, [r0, #0]
 8016974:	9301      	str	r3, [sp, #4]
 8016976:	a902      	add	r1, sp, #8
 8016978:	f000 fa6a 	bl	8016e50 <_svfiprintf_r>
 801697c:	9b02      	ldr	r3, [sp, #8]
 801697e:	2200      	movs	r2, #0
 8016980:	701a      	strb	r2, [r3, #0]
 8016982:	b01c      	add	sp, #112	; 0x70
 8016984:	f85d eb04 	ldr.w	lr, [sp], #4
 8016988:	b003      	add	sp, #12
 801698a:	4770      	bx	lr
 801698c:	20000020 	.word	0x20000020
 8016990:	ffff0208 	.word	0xffff0208

08016994 <strcasecmp>:
 8016994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016996:	4606      	mov	r6, r0
 8016998:	460f      	mov	r7, r1
 801699a:	f816 4b01 	ldrb.w	r4, [r6], #1
 801699e:	f000 f92d 	bl	8016bfc <__locale_ctype_ptr>
 80169a2:	4420      	add	r0, r4
 80169a4:	f817 5b01 	ldrb.w	r5, [r7], #1
 80169a8:	7843      	ldrb	r3, [r0, #1]
 80169aa:	f003 0303 	and.w	r3, r3, #3
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	bf08      	it	eq
 80169b2:	3420      	addeq	r4, #32
 80169b4:	f000 f922 	bl	8016bfc <__locale_ctype_ptr>
 80169b8:	4428      	add	r0, r5
 80169ba:	7842      	ldrb	r2, [r0, #1]
 80169bc:	f002 0203 	and.w	r2, r2, #3
 80169c0:	2a01      	cmp	r2, #1
 80169c2:	bf08      	it	eq
 80169c4:	3520      	addeq	r5, #32
 80169c6:	1b60      	subs	r0, r4, r5
 80169c8:	d101      	bne.n	80169ce <strcasecmp+0x3a>
 80169ca:	2d00      	cmp	r5, #0
 80169cc:	d1e5      	bne.n	801699a <strcasecmp+0x6>
 80169ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080169d0 <strchr>:
 80169d0:	b2c9      	uxtb	r1, r1
 80169d2:	4603      	mov	r3, r0
 80169d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169d8:	b11a      	cbz	r2, 80169e2 <strchr+0x12>
 80169da:	428a      	cmp	r2, r1
 80169dc:	d1f9      	bne.n	80169d2 <strchr+0x2>
 80169de:	4618      	mov	r0, r3
 80169e0:	4770      	bx	lr
 80169e2:	2900      	cmp	r1, #0
 80169e4:	bf18      	it	ne
 80169e6:	2300      	movne	r3, #0
 80169e8:	e7f9      	b.n	80169de <strchr+0xe>

080169ea <strncmp>:
 80169ea:	b510      	push	{r4, lr}
 80169ec:	b16a      	cbz	r2, 8016a0a <strncmp+0x20>
 80169ee:	3901      	subs	r1, #1
 80169f0:	1884      	adds	r4, r0, r2
 80169f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80169f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80169fa:	4293      	cmp	r3, r2
 80169fc:	d103      	bne.n	8016a06 <strncmp+0x1c>
 80169fe:	42a0      	cmp	r0, r4
 8016a00:	d001      	beq.n	8016a06 <strncmp+0x1c>
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d1f5      	bne.n	80169f2 <strncmp+0x8>
 8016a06:	1a98      	subs	r0, r3, r2
 8016a08:	bd10      	pop	{r4, pc}
 8016a0a:	4610      	mov	r0, r2
 8016a0c:	e7fc      	b.n	8016a08 <strncmp+0x1e>

08016a0e <__strtok_r>:
 8016a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a10:	b918      	cbnz	r0, 8016a1a <__strtok_r+0xc>
 8016a12:	6810      	ldr	r0, [r2, #0]
 8016a14:	b908      	cbnz	r0, 8016a1a <__strtok_r+0xc>
 8016a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a18:	4620      	mov	r0, r4
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	460f      	mov	r7, r1
 8016a1e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016a22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016a26:	b91e      	cbnz	r6, 8016a30 <__strtok_r+0x22>
 8016a28:	b96d      	cbnz	r5, 8016a46 <__strtok_r+0x38>
 8016a2a:	6015      	str	r5, [r2, #0]
 8016a2c:	4628      	mov	r0, r5
 8016a2e:	e7f2      	b.n	8016a16 <__strtok_r+0x8>
 8016a30:	42b5      	cmp	r5, r6
 8016a32:	d1f6      	bne.n	8016a22 <__strtok_r+0x14>
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1ef      	bne.n	8016a18 <__strtok_r+0xa>
 8016a38:	6014      	str	r4, [r2, #0]
 8016a3a:	7003      	strb	r3, [r0, #0]
 8016a3c:	e7eb      	b.n	8016a16 <__strtok_r+0x8>
 8016a3e:	462b      	mov	r3, r5
 8016a40:	e00d      	b.n	8016a5e <__strtok_r+0x50>
 8016a42:	b926      	cbnz	r6, 8016a4e <__strtok_r+0x40>
 8016a44:	461c      	mov	r4, r3
 8016a46:	4623      	mov	r3, r4
 8016a48:	460f      	mov	r7, r1
 8016a4a:	f813 5b01 	ldrb.w	r5, [r3], #1
 8016a4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016a52:	42b5      	cmp	r5, r6
 8016a54:	d1f5      	bne.n	8016a42 <__strtok_r+0x34>
 8016a56:	2d00      	cmp	r5, #0
 8016a58:	d0f1      	beq.n	8016a3e <__strtok_r+0x30>
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	7021      	strb	r1, [r4, #0]
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	e7d9      	b.n	8016a16 <__strtok_r+0x8>

08016a62 <strtok_r>:
 8016a62:	2301      	movs	r3, #1
 8016a64:	f7ff bfd3 	b.w	8016a0e <__strtok_r>

08016a68 <std>:
 8016a68:	2300      	movs	r3, #0
 8016a6a:	b510      	push	{r4, lr}
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8016a72:	6083      	str	r3, [r0, #8]
 8016a74:	8181      	strh	r1, [r0, #12]
 8016a76:	6643      	str	r3, [r0, #100]	; 0x64
 8016a78:	81c2      	strh	r2, [r0, #14]
 8016a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a7e:	6183      	str	r3, [r0, #24]
 8016a80:	4619      	mov	r1, r3
 8016a82:	2208      	movs	r2, #8
 8016a84:	305c      	adds	r0, #92	; 0x5c
 8016a86:	f7ff ff11 	bl	80168ac <memset>
 8016a8a:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <std+0x38>)
 8016a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8016a8e:	4b05      	ldr	r3, [pc, #20]	; (8016aa4 <std+0x3c>)
 8016a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a92:	4b05      	ldr	r3, [pc, #20]	; (8016aa8 <std+0x40>)
 8016a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a96:	4b05      	ldr	r3, [pc, #20]	; (8016aac <std+0x44>)
 8016a98:	6224      	str	r4, [r4, #32]
 8016a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8016a9c:	bd10      	pop	{r4, pc}
 8016a9e:	bf00      	nop
 8016aa0:	080175f1 	.word	0x080175f1
 8016aa4:	08017613 	.word	0x08017613
 8016aa8:	0801764b 	.word	0x0801764b
 8016aac:	0801766f 	.word	0x0801766f

08016ab0 <_cleanup_r>:
 8016ab0:	4901      	ldr	r1, [pc, #4]	; (8016ab8 <_cleanup_r+0x8>)
 8016ab2:	f000 b885 	b.w	8016bc0 <_fwalk_reent>
 8016ab6:	bf00      	nop
 8016ab8:	08017965 	.word	0x08017965

08016abc <__sfmoreglue>:
 8016abc:	b570      	push	{r4, r5, r6, lr}
 8016abe:	1e4a      	subs	r2, r1, #1
 8016ac0:	2568      	movs	r5, #104	; 0x68
 8016ac2:	4355      	muls	r5, r2
 8016ac4:	460e      	mov	r6, r1
 8016ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016aca:	f000 f90d 	bl	8016ce8 <_malloc_r>
 8016ace:	4604      	mov	r4, r0
 8016ad0:	b140      	cbz	r0, 8016ae4 <__sfmoreglue+0x28>
 8016ad2:	2100      	movs	r1, #0
 8016ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8016ad8:	300c      	adds	r0, #12
 8016ada:	60a0      	str	r0, [r4, #8]
 8016adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016ae0:	f7ff fee4 	bl	80168ac <memset>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	bd70      	pop	{r4, r5, r6, pc}

08016ae8 <__sinit>:
 8016ae8:	6983      	ldr	r3, [r0, #24]
 8016aea:	b510      	push	{r4, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	bb33      	cbnz	r3, 8016b3e <__sinit+0x56>
 8016af0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016af4:	6503      	str	r3, [r0, #80]	; 0x50
 8016af6:	4b12      	ldr	r3, [pc, #72]	; (8016b40 <__sinit+0x58>)
 8016af8:	4a12      	ldr	r2, [pc, #72]	; (8016b44 <__sinit+0x5c>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	6282      	str	r2, [r0, #40]	; 0x28
 8016afe:	4298      	cmp	r0, r3
 8016b00:	bf04      	itt	eq
 8016b02:	2301      	moveq	r3, #1
 8016b04:	6183      	streq	r3, [r0, #24]
 8016b06:	f000 f81f 	bl	8016b48 <__sfp>
 8016b0a:	6060      	str	r0, [r4, #4]
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f000 f81b 	bl	8016b48 <__sfp>
 8016b12:	60a0      	str	r0, [r4, #8]
 8016b14:	4620      	mov	r0, r4
 8016b16:	f000 f817 	bl	8016b48 <__sfp>
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	60e0      	str	r0, [r4, #12]
 8016b1e:	2104      	movs	r1, #4
 8016b20:	6860      	ldr	r0, [r4, #4]
 8016b22:	f7ff ffa1 	bl	8016a68 <std>
 8016b26:	2201      	movs	r2, #1
 8016b28:	2109      	movs	r1, #9
 8016b2a:	68a0      	ldr	r0, [r4, #8]
 8016b2c:	f7ff ff9c 	bl	8016a68 <std>
 8016b30:	2202      	movs	r2, #2
 8016b32:	2112      	movs	r1, #18
 8016b34:	68e0      	ldr	r0, [r4, #12]
 8016b36:	f7ff ff97 	bl	8016a68 <std>
 8016b3a:	2301      	movs	r3, #1
 8016b3c:	61a3      	str	r3, [r4, #24]
 8016b3e:	bd10      	pop	{r4, pc}
 8016b40:	08025fd0 	.word	0x08025fd0
 8016b44:	08016ab1 	.word	0x08016ab1

08016b48 <__sfp>:
 8016b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b4a:	4b1b      	ldr	r3, [pc, #108]	; (8016bb8 <__sfp+0x70>)
 8016b4c:	681e      	ldr	r6, [r3, #0]
 8016b4e:	69b3      	ldr	r3, [r6, #24]
 8016b50:	4607      	mov	r7, r0
 8016b52:	b913      	cbnz	r3, 8016b5a <__sfp+0x12>
 8016b54:	4630      	mov	r0, r6
 8016b56:	f7ff ffc7 	bl	8016ae8 <__sinit>
 8016b5a:	3648      	adds	r6, #72	; 0x48
 8016b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016b60:	3b01      	subs	r3, #1
 8016b62:	d503      	bpl.n	8016b6c <__sfp+0x24>
 8016b64:	6833      	ldr	r3, [r6, #0]
 8016b66:	b133      	cbz	r3, 8016b76 <__sfp+0x2e>
 8016b68:	6836      	ldr	r6, [r6, #0]
 8016b6a:	e7f7      	b.n	8016b5c <__sfp+0x14>
 8016b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b70:	b16d      	cbz	r5, 8016b8e <__sfp+0x46>
 8016b72:	3468      	adds	r4, #104	; 0x68
 8016b74:	e7f4      	b.n	8016b60 <__sfp+0x18>
 8016b76:	2104      	movs	r1, #4
 8016b78:	4638      	mov	r0, r7
 8016b7a:	f7ff ff9f 	bl	8016abc <__sfmoreglue>
 8016b7e:	6030      	str	r0, [r6, #0]
 8016b80:	2800      	cmp	r0, #0
 8016b82:	d1f1      	bne.n	8016b68 <__sfp+0x20>
 8016b84:	230c      	movs	r3, #12
 8016b86:	603b      	str	r3, [r7, #0]
 8016b88:	4604      	mov	r4, r0
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b8e:	4b0b      	ldr	r3, [pc, #44]	; (8016bbc <__sfp+0x74>)
 8016b90:	6665      	str	r5, [r4, #100]	; 0x64
 8016b92:	e9c4 5500 	strd	r5, r5, [r4]
 8016b96:	60a5      	str	r5, [r4, #8]
 8016b98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016b9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016ba0:	2208      	movs	r2, #8
 8016ba2:	4629      	mov	r1, r5
 8016ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ba8:	f7ff fe80 	bl	80168ac <memset>
 8016bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016bb4:	e7e9      	b.n	8016b8a <__sfp+0x42>
 8016bb6:	bf00      	nop
 8016bb8:	08025fd0 	.word	0x08025fd0
 8016bbc:	ffff0001 	.word	0xffff0001

08016bc0 <_fwalk_reent>:
 8016bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bc4:	4680      	mov	r8, r0
 8016bc6:	4689      	mov	r9, r1
 8016bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016bcc:	2600      	movs	r6, #0
 8016bce:	b914      	cbnz	r4, 8016bd6 <_fwalk_reent+0x16>
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016bda:	3f01      	subs	r7, #1
 8016bdc:	d501      	bpl.n	8016be2 <_fwalk_reent+0x22>
 8016bde:	6824      	ldr	r4, [r4, #0]
 8016be0:	e7f5      	b.n	8016bce <_fwalk_reent+0xe>
 8016be2:	89ab      	ldrh	r3, [r5, #12]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d907      	bls.n	8016bf8 <_fwalk_reent+0x38>
 8016be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016bec:	3301      	adds	r3, #1
 8016bee:	d003      	beq.n	8016bf8 <_fwalk_reent+0x38>
 8016bf0:	4629      	mov	r1, r5
 8016bf2:	4640      	mov	r0, r8
 8016bf4:	47c8      	blx	r9
 8016bf6:	4306      	orrs	r6, r0
 8016bf8:	3568      	adds	r5, #104	; 0x68
 8016bfa:	e7ee      	b.n	8016bda <_fwalk_reent+0x1a>

08016bfc <__locale_ctype_ptr>:
 8016bfc:	4b04      	ldr	r3, [pc, #16]	; (8016c10 <__locale_ctype_ptr+0x14>)
 8016bfe:	4a05      	ldr	r2, [pc, #20]	; (8016c14 <__locale_ctype_ptr+0x18>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	6a1b      	ldr	r3, [r3, #32]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	bf08      	it	eq
 8016c08:	4613      	moveq	r3, r2
 8016c0a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016c0e:	4770      	bx	lr
 8016c10:	20000020 	.word	0x20000020
 8016c14:	20000084 	.word	0x20000084

08016c18 <malloc>:
 8016c18:	4b02      	ldr	r3, [pc, #8]	; (8016c24 <malloc+0xc>)
 8016c1a:	4601      	mov	r1, r0
 8016c1c:	6818      	ldr	r0, [r3, #0]
 8016c1e:	f000 b863 	b.w	8016ce8 <_malloc_r>
 8016c22:	bf00      	nop
 8016c24:	20000020 	.word	0x20000020

08016c28 <__ascii_mbtowc>:
 8016c28:	b082      	sub	sp, #8
 8016c2a:	b901      	cbnz	r1, 8016c2e <__ascii_mbtowc+0x6>
 8016c2c:	a901      	add	r1, sp, #4
 8016c2e:	b142      	cbz	r2, 8016c42 <__ascii_mbtowc+0x1a>
 8016c30:	b14b      	cbz	r3, 8016c46 <__ascii_mbtowc+0x1e>
 8016c32:	7813      	ldrb	r3, [r2, #0]
 8016c34:	600b      	str	r3, [r1, #0]
 8016c36:	7812      	ldrb	r2, [r2, #0]
 8016c38:	1c10      	adds	r0, r2, #0
 8016c3a:	bf18      	it	ne
 8016c3c:	2001      	movne	r0, #1
 8016c3e:	b002      	add	sp, #8
 8016c40:	4770      	bx	lr
 8016c42:	4610      	mov	r0, r2
 8016c44:	e7fb      	b.n	8016c3e <__ascii_mbtowc+0x16>
 8016c46:	f06f 0001 	mvn.w	r0, #1
 8016c4a:	e7f8      	b.n	8016c3e <__ascii_mbtowc+0x16>

08016c4c <_free_r>:
 8016c4c:	b538      	push	{r3, r4, r5, lr}
 8016c4e:	4605      	mov	r5, r0
 8016c50:	2900      	cmp	r1, #0
 8016c52:	d045      	beq.n	8016ce0 <_free_r+0x94>
 8016c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c58:	1f0c      	subs	r4, r1, #4
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	bfb8      	it	lt
 8016c5e:	18e4      	addlt	r4, r4, r3
 8016c60:	f000 ff39 	bl	8017ad6 <__malloc_lock>
 8016c64:	4a1f      	ldr	r2, [pc, #124]	; (8016ce4 <_free_r+0x98>)
 8016c66:	6813      	ldr	r3, [r2, #0]
 8016c68:	4610      	mov	r0, r2
 8016c6a:	b933      	cbnz	r3, 8016c7a <_free_r+0x2e>
 8016c6c:	6063      	str	r3, [r4, #4]
 8016c6e:	6014      	str	r4, [r2, #0]
 8016c70:	4628      	mov	r0, r5
 8016c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c76:	f000 bf2f 	b.w	8017ad8 <__malloc_unlock>
 8016c7a:	42a3      	cmp	r3, r4
 8016c7c:	d90c      	bls.n	8016c98 <_free_r+0x4c>
 8016c7e:	6821      	ldr	r1, [r4, #0]
 8016c80:	1862      	adds	r2, r4, r1
 8016c82:	4293      	cmp	r3, r2
 8016c84:	bf04      	itt	eq
 8016c86:	681a      	ldreq	r2, [r3, #0]
 8016c88:	685b      	ldreq	r3, [r3, #4]
 8016c8a:	6063      	str	r3, [r4, #4]
 8016c8c:	bf04      	itt	eq
 8016c8e:	1852      	addeq	r2, r2, r1
 8016c90:	6022      	streq	r2, [r4, #0]
 8016c92:	6004      	str	r4, [r0, #0]
 8016c94:	e7ec      	b.n	8016c70 <_free_r+0x24>
 8016c96:	4613      	mov	r3, r2
 8016c98:	685a      	ldr	r2, [r3, #4]
 8016c9a:	b10a      	cbz	r2, 8016ca0 <_free_r+0x54>
 8016c9c:	42a2      	cmp	r2, r4
 8016c9e:	d9fa      	bls.n	8016c96 <_free_r+0x4a>
 8016ca0:	6819      	ldr	r1, [r3, #0]
 8016ca2:	1858      	adds	r0, r3, r1
 8016ca4:	42a0      	cmp	r0, r4
 8016ca6:	d10b      	bne.n	8016cc0 <_free_r+0x74>
 8016ca8:	6820      	ldr	r0, [r4, #0]
 8016caa:	4401      	add	r1, r0
 8016cac:	1858      	adds	r0, r3, r1
 8016cae:	4282      	cmp	r2, r0
 8016cb0:	6019      	str	r1, [r3, #0]
 8016cb2:	d1dd      	bne.n	8016c70 <_free_r+0x24>
 8016cb4:	6810      	ldr	r0, [r2, #0]
 8016cb6:	6852      	ldr	r2, [r2, #4]
 8016cb8:	605a      	str	r2, [r3, #4]
 8016cba:	4401      	add	r1, r0
 8016cbc:	6019      	str	r1, [r3, #0]
 8016cbe:	e7d7      	b.n	8016c70 <_free_r+0x24>
 8016cc0:	d902      	bls.n	8016cc8 <_free_r+0x7c>
 8016cc2:	230c      	movs	r3, #12
 8016cc4:	602b      	str	r3, [r5, #0]
 8016cc6:	e7d3      	b.n	8016c70 <_free_r+0x24>
 8016cc8:	6820      	ldr	r0, [r4, #0]
 8016cca:	1821      	adds	r1, r4, r0
 8016ccc:	428a      	cmp	r2, r1
 8016cce:	bf04      	itt	eq
 8016cd0:	6811      	ldreq	r1, [r2, #0]
 8016cd2:	6852      	ldreq	r2, [r2, #4]
 8016cd4:	6062      	str	r2, [r4, #4]
 8016cd6:	bf04      	itt	eq
 8016cd8:	1809      	addeq	r1, r1, r0
 8016cda:	6021      	streq	r1, [r4, #0]
 8016cdc:	605c      	str	r4, [r3, #4]
 8016cde:	e7c7      	b.n	8016c70 <_free_r+0x24>
 8016ce0:	bd38      	pop	{r3, r4, r5, pc}
 8016ce2:	bf00      	nop
 8016ce4:	20008d88 	.word	0x20008d88

08016ce8 <_malloc_r>:
 8016ce8:	b570      	push	{r4, r5, r6, lr}
 8016cea:	1ccd      	adds	r5, r1, #3
 8016cec:	f025 0503 	bic.w	r5, r5, #3
 8016cf0:	3508      	adds	r5, #8
 8016cf2:	2d0c      	cmp	r5, #12
 8016cf4:	bf38      	it	cc
 8016cf6:	250c      	movcc	r5, #12
 8016cf8:	2d00      	cmp	r5, #0
 8016cfa:	4606      	mov	r6, r0
 8016cfc:	db01      	blt.n	8016d02 <_malloc_r+0x1a>
 8016cfe:	42a9      	cmp	r1, r5
 8016d00:	d903      	bls.n	8016d0a <_malloc_r+0x22>
 8016d02:	230c      	movs	r3, #12
 8016d04:	6033      	str	r3, [r6, #0]
 8016d06:	2000      	movs	r0, #0
 8016d08:	bd70      	pop	{r4, r5, r6, pc}
 8016d0a:	f000 fee4 	bl	8017ad6 <__malloc_lock>
 8016d0e:	4a21      	ldr	r2, [pc, #132]	; (8016d94 <_malloc_r+0xac>)
 8016d10:	6814      	ldr	r4, [r2, #0]
 8016d12:	4621      	mov	r1, r4
 8016d14:	b991      	cbnz	r1, 8016d3c <_malloc_r+0x54>
 8016d16:	4c20      	ldr	r4, [pc, #128]	; (8016d98 <_malloc_r+0xb0>)
 8016d18:	6823      	ldr	r3, [r4, #0]
 8016d1a:	b91b      	cbnz	r3, 8016d24 <_malloc_r+0x3c>
 8016d1c:	4630      	mov	r0, r6
 8016d1e:	f000 fc57 	bl	80175d0 <_sbrk_r>
 8016d22:	6020      	str	r0, [r4, #0]
 8016d24:	4629      	mov	r1, r5
 8016d26:	4630      	mov	r0, r6
 8016d28:	f000 fc52 	bl	80175d0 <_sbrk_r>
 8016d2c:	1c43      	adds	r3, r0, #1
 8016d2e:	d124      	bne.n	8016d7a <_malloc_r+0x92>
 8016d30:	230c      	movs	r3, #12
 8016d32:	6033      	str	r3, [r6, #0]
 8016d34:	4630      	mov	r0, r6
 8016d36:	f000 fecf 	bl	8017ad8 <__malloc_unlock>
 8016d3a:	e7e4      	b.n	8016d06 <_malloc_r+0x1e>
 8016d3c:	680b      	ldr	r3, [r1, #0]
 8016d3e:	1b5b      	subs	r3, r3, r5
 8016d40:	d418      	bmi.n	8016d74 <_malloc_r+0x8c>
 8016d42:	2b0b      	cmp	r3, #11
 8016d44:	d90f      	bls.n	8016d66 <_malloc_r+0x7e>
 8016d46:	600b      	str	r3, [r1, #0]
 8016d48:	50cd      	str	r5, [r1, r3]
 8016d4a:	18cc      	adds	r4, r1, r3
 8016d4c:	4630      	mov	r0, r6
 8016d4e:	f000 fec3 	bl	8017ad8 <__malloc_unlock>
 8016d52:	f104 000b 	add.w	r0, r4, #11
 8016d56:	1d23      	adds	r3, r4, #4
 8016d58:	f020 0007 	bic.w	r0, r0, #7
 8016d5c:	1ac3      	subs	r3, r0, r3
 8016d5e:	d0d3      	beq.n	8016d08 <_malloc_r+0x20>
 8016d60:	425a      	negs	r2, r3
 8016d62:	50e2      	str	r2, [r4, r3]
 8016d64:	e7d0      	b.n	8016d08 <_malloc_r+0x20>
 8016d66:	428c      	cmp	r4, r1
 8016d68:	684b      	ldr	r3, [r1, #4]
 8016d6a:	bf16      	itet	ne
 8016d6c:	6063      	strne	r3, [r4, #4]
 8016d6e:	6013      	streq	r3, [r2, #0]
 8016d70:	460c      	movne	r4, r1
 8016d72:	e7eb      	b.n	8016d4c <_malloc_r+0x64>
 8016d74:	460c      	mov	r4, r1
 8016d76:	6849      	ldr	r1, [r1, #4]
 8016d78:	e7cc      	b.n	8016d14 <_malloc_r+0x2c>
 8016d7a:	1cc4      	adds	r4, r0, #3
 8016d7c:	f024 0403 	bic.w	r4, r4, #3
 8016d80:	42a0      	cmp	r0, r4
 8016d82:	d005      	beq.n	8016d90 <_malloc_r+0xa8>
 8016d84:	1a21      	subs	r1, r4, r0
 8016d86:	4630      	mov	r0, r6
 8016d88:	f000 fc22 	bl	80175d0 <_sbrk_r>
 8016d8c:	3001      	adds	r0, #1
 8016d8e:	d0cf      	beq.n	8016d30 <_malloc_r+0x48>
 8016d90:	6025      	str	r5, [r4, #0]
 8016d92:	e7db      	b.n	8016d4c <_malloc_r+0x64>
 8016d94:	20008d88 	.word	0x20008d88
 8016d98:	20008d8c 	.word	0x20008d8c

08016d9c <__ssputs_r>:
 8016d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016da0:	688e      	ldr	r6, [r1, #8]
 8016da2:	429e      	cmp	r6, r3
 8016da4:	4682      	mov	sl, r0
 8016da6:	460c      	mov	r4, r1
 8016da8:	4690      	mov	r8, r2
 8016daa:	4699      	mov	r9, r3
 8016dac:	d837      	bhi.n	8016e1e <__ssputs_r+0x82>
 8016dae:	898a      	ldrh	r2, [r1, #12]
 8016db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016db4:	d031      	beq.n	8016e1a <__ssputs_r+0x7e>
 8016db6:	6825      	ldr	r5, [r4, #0]
 8016db8:	6909      	ldr	r1, [r1, #16]
 8016dba:	1a6f      	subs	r7, r5, r1
 8016dbc:	6965      	ldr	r5, [r4, #20]
 8016dbe:	2302      	movs	r3, #2
 8016dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016dc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8016dc8:	f109 0301 	add.w	r3, r9, #1
 8016dcc:	443b      	add	r3, r7
 8016dce:	429d      	cmp	r5, r3
 8016dd0:	bf38      	it	cc
 8016dd2:	461d      	movcc	r5, r3
 8016dd4:	0553      	lsls	r3, r2, #21
 8016dd6:	d530      	bpl.n	8016e3a <__ssputs_r+0x9e>
 8016dd8:	4629      	mov	r1, r5
 8016dda:	f7ff ff85 	bl	8016ce8 <_malloc_r>
 8016dde:	4606      	mov	r6, r0
 8016de0:	b950      	cbnz	r0, 8016df8 <__ssputs_r+0x5c>
 8016de2:	230c      	movs	r3, #12
 8016de4:	f8ca 3000 	str.w	r3, [sl]
 8016de8:	89a3      	ldrh	r3, [r4, #12]
 8016dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dee:	81a3      	strh	r3, [r4, #12]
 8016df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016df8:	463a      	mov	r2, r7
 8016dfa:	6921      	ldr	r1, [r4, #16]
 8016dfc:	f7ff fd4b 	bl	8016896 <memcpy>
 8016e00:	89a3      	ldrh	r3, [r4, #12]
 8016e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e0a:	81a3      	strh	r3, [r4, #12]
 8016e0c:	6126      	str	r6, [r4, #16]
 8016e0e:	6165      	str	r5, [r4, #20]
 8016e10:	443e      	add	r6, r7
 8016e12:	1bed      	subs	r5, r5, r7
 8016e14:	6026      	str	r6, [r4, #0]
 8016e16:	60a5      	str	r5, [r4, #8]
 8016e18:	464e      	mov	r6, r9
 8016e1a:	454e      	cmp	r6, r9
 8016e1c:	d900      	bls.n	8016e20 <__ssputs_r+0x84>
 8016e1e:	464e      	mov	r6, r9
 8016e20:	4632      	mov	r2, r6
 8016e22:	4641      	mov	r1, r8
 8016e24:	6820      	ldr	r0, [r4, #0]
 8016e26:	f000 fe3d 	bl	8017aa4 <memmove>
 8016e2a:	68a3      	ldr	r3, [r4, #8]
 8016e2c:	1b9b      	subs	r3, r3, r6
 8016e2e:	60a3      	str	r3, [r4, #8]
 8016e30:	6823      	ldr	r3, [r4, #0]
 8016e32:	441e      	add	r6, r3
 8016e34:	6026      	str	r6, [r4, #0]
 8016e36:	2000      	movs	r0, #0
 8016e38:	e7dc      	b.n	8016df4 <__ssputs_r+0x58>
 8016e3a:	462a      	mov	r2, r5
 8016e3c:	f000 fe4d 	bl	8017ada <_realloc_r>
 8016e40:	4606      	mov	r6, r0
 8016e42:	2800      	cmp	r0, #0
 8016e44:	d1e2      	bne.n	8016e0c <__ssputs_r+0x70>
 8016e46:	6921      	ldr	r1, [r4, #16]
 8016e48:	4650      	mov	r0, sl
 8016e4a:	f7ff feff 	bl	8016c4c <_free_r>
 8016e4e:	e7c8      	b.n	8016de2 <__ssputs_r+0x46>

08016e50 <_svfiprintf_r>:
 8016e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e54:	461d      	mov	r5, r3
 8016e56:	898b      	ldrh	r3, [r1, #12]
 8016e58:	061f      	lsls	r7, r3, #24
 8016e5a:	b09d      	sub	sp, #116	; 0x74
 8016e5c:	4680      	mov	r8, r0
 8016e5e:	460c      	mov	r4, r1
 8016e60:	4616      	mov	r6, r2
 8016e62:	d50f      	bpl.n	8016e84 <_svfiprintf_r+0x34>
 8016e64:	690b      	ldr	r3, [r1, #16]
 8016e66:	b96b      	cbnz	r3, 8016e84 <_svfiprintf_r+0x34>
 8016e68:	2140      	movs	r1, #64	; 0x40
 8016e6a:	f7ff ff3d 	bl	8016ce8 <_malloc_r>
 8016e6e:	6020      	str	r0, [r4, #0]
 8016e70:	6120      	str	r0, [r4, #16]
 8016e72:	b928      	cbnz	r0, 8016e80 <_svfiprintf_r+0x30>
 8016e74:	230c      	movs	r3, #12
 8016e76:	f8c8 3000 	str.w	r3, [r8]
 8016e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e7e:	e0c8      	b.n	8017012 <_svfiprintf_r+0x1c2>
 8016e80:	2340      	movs	r3, #64	; 0x40
 8016e82:	6163      	str	r3, [r4, #20]
 8016e84:	2300      	movs	r3, #0
 8016e86:	9309      	str	r3, [sp, #36]	; 0x24
 8016e88:	2320      	movs	r3, #32
 8016e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e8e:	2330      	movs	r3, #48	; 0x30
 8016e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e94:	9503      	str	r5, [sp, #12]
 8016e96:	f04f 0b01 	mov.w	fp, #1
 8016e9a:	4637      	mov	r7, r6
 8016e9c:	463d      	mov	r5, r7
 8016e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016ea2:	b10b      	cbz	r3, 8016ea8 <_svfiprintf_r+0x58>
 8016ea4:	2b25      	cmp	r3, #37	; 0x25
 8016ea6:	d13e      	bne.n	8016f26 <_svfiprintf_r+0xd6>
 8016ea8:	ebb7 0a06 	subs.w	sl, r7, r6
 8016eac:	d00b      	beq.n	8016ec6 <_svfiprintf_r+0x76>
 8016eae:	4653      	mov	r3, sl
 8016eb0:	4632      	mov	r2, r6
 8016eb2:	4621      	mov	r1, r4
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	f7ff ff71 	bl	8016d9c <__ssputs_r>
 8016eba:	3001      	adds	r0, #1
 8016ebc:	f000 80a4 	beq.w	8017008 <_svfiprintf_r+0x1b8>
 8016ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ec2:	4453      	add	r3, sl
 8016ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ec6:	783b      	ldrb	r3, [r7, #0]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f000 809d 	beq.w	8017008 <_svfiprintf_r+0x1b8>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ed8:	9304      	str	r3, [sp, #16]
 8016eda:	9307      	str	r3, [sp, #28]
 8016edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8016ee2:	462f      	mov	r7, r5
 8016ee4:	2205      	movs	r2, #5
 8016ee6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016eea:	4850      	ldr	r0, [pc, #320]	; (801702c <_svfiprintf_r+0x1dc>)
 8016eec:	f7e9 f998 	bl	8000220 <memchr>
 8016ef0:	9b04      	ldr	r3, [sp, #16]
 8016ef2:	b9d0      	cbnz	r0, 8016f2a <_svfiprintf_r+0xda>
 8016ef4:	06d9      	lsls	r1, r3, #27
 8016ef6:	bf44      	itt	mi
 8016ef8:	2220      	movmi	r2, #32
 8016efa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016efe:	071a      	lsls	r2, r3, #28
 8016f00:	bf44      	itt	mi
 8016f02:	222b      	movmi	r2, #43	; 0x2b
 8016f04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f08:	782a      	ldrb	r2, [r5, #0]
 8016f0a:	2a2a      	cmp	r2, #42	; 0x2a
 8016f0c:	d015      	beq.n	8016f3a <_svfiprintf_r+0xea>
 8016f0e:	9a07      	ldr	r2, [sp, #28]
 8016f10:	462f      	mov	r7, r5
 8016f12:	2000      	movs	r0, #0
 8016f14:	250a      	movs	r5, #10
 8016f16:	4639      	mov	r1, r7
 8016f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f1c:	3b30      	subs	r3, #48	; 0x30
 8016f1e:	2b09      	cmp	r3, #9
 8016f20:	d94d      	bls.n	8016fbe <_svfiprintf_r+0x16e>
 8016f22:	b1b8      	cbz	r0, 8016f54 <_svfiprintf_r+0x104>
 8016f24:	e00f      	b.n	8016f46 <_svfiprintf_r+0xf6>
 8016f26:	462f      	mov	r7, r5
 8016f28:	e7b8      	b.n	8016e9c <_svfiprintf_r+0x4c>
 8016f2a:	4a40      	ldr	r2, [pc, #256]	; (801702c <_svfiprintf_r+0x1dc>)
 8016f2c:	1a80      	subs	r0, r0, r2
 8016f2e:	fa0b f000 	lsl.w	r0, fp, r0
 8016f32:	4318      	orrs	r0, r3
 8016f34:	9004      	str	r0, [sp, #16]
 8016f36:	463d      	mov	r5, r7
 8016f38:	e7d3      	b.n	8016ee2 <_svfiprintf_r+0x92>
 8016f3a:	9a03      	ldr	r2, [sp, #12]
 8016f3c:	1d11      	adds	r1, r2, #4
 8016f3e:	6812      	ldr	r2, [r2, #0]
 8016f40:	9103      	str	r1, [sp, #12]
 8016f42:	2a00      	cmp	r2, #0
 8016f44:	db01      	blt.n	8016f4a <_svfiprintf_r+0xfa>
 8016f46:	9207      	str	r2, [sp, #28]
 8016f48:	e004      	b.n	8016f54 <_svfiprintf_r+0x104>
 8016f4a:	4252      	negs	r2, r2
 8016f4c:	f043 0302 	orr.w	r3, r3, #2
 8016f50:	9207      	str	r2, [sp, #28]
 8016f52:	9304      	str	r3, [sp, #16]
 8016f54:	783b      	ldrb	r3, [r7, #0]
 8016f56:	2b2e      	cmp	r3, #46	; 0x2e
 8016f58:	d10c      	bne.n	8016f74 <_svfiprintf_r+0x124>
 8016f5a:	787b      	ldrb	r3, [r7, #1]
 8016f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f5e:	d133      	bne.n	8016fc8 <_svfiprintf_r+0x178>
 8016f60:	9b03      	ldr	r3, [sp, #12]
 8016f62:	1d1a      	adds	r2, r3, #4
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	9203      	str	r2, [sp, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	bfb8      	it	lt
 8016f6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016f70:	3702      	adds	r7, #2
 8016f72:	9305      	str	r3, [sp, #20]
 8016f74:	4d2e      	ldr	r5, [pc, #184]	; (8017030 <_svfiprintf_r+0x1e0>)
 8016f76:	7839      	ldrb	r1, [r7, #0]
 8016f78:	2203      	movs	r2, #3
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	f7e9 f950 	bl	8000220 <memchr>
 8016f80:	b138      	cbz	r0, 8016f92 <_svfiprintf_r+0x142>
 8016f82:	2340      	movs	r3, #64	; 0x40
 8016f84:	1b40      	subs	r0, r0, r5
 8016f86:	fa03 f000 	lsl.w	r0, r3, r0
 8016f8a:	9b04      	ldr	r3, [sp, #16]
 8016f8c:	4303      	orrs	r3, r0
 8016f8e:	3701      	adds	r7, #1
 8016f90:	9304      	str	r3, [sp, #16]
 8016f92:	7839      	ldrb	r1, [r7, #0]
 8016f94:	4827      	ldr	r0, [pc, #156]	; (8017034 <_svfiprintf_r+0x1e4>)
 8016f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f9a:	2206      	movs	r2, #6
 8016f9c:	1c7e      	adds	r6, r7, #1
 8016f9e:	f7e9 f93f 	bl	8000220 <memchr>
 8016fa2:	2800      	cmp	r0, #0
 8016fa4:	d038      	beq.n	8017018 <_svfiprintf_r+0x1c8>
 8016fa6:	4b24      	ldr	r3, [pc, #144]	; (8017038 <_svfiprintf_r+0x1e8>)
 8016fa8:	bb13      	cbnz	r3, 8016ff0 <_svfiprintf_r+0x1a0>
 8016faa:	9b03      	ldr	r3, [sp, #12]
 8016fac:	3307      	adds	r3, #7
 8016fae:	f023 0307 	bic.w	r3, r3, #7
 8016fb2:	3308      	adds	r3, #8
 8016fb4:	9303      	str	r3, [sp, #12]
 8016fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fb8:	444b      	add	r3, r9
 8016fba:	9309      	str	r3, [sp, #36]	; 0x24
 8016fbc:	e76d      	b.n	8016e9a <_svfiprintf_r+0x4a>
 8016fbe:	fb05 3202 	mla	r2, r5, r2, r3
 8016fc2:	2001      	movs	r0, #1
 8016fc4:	460f      	mov	r7, r1
 8016fc6:	e7a6      	b.n	8016f16 <_svfiprintf_r+0xc6>
 8016fc8:	2300      	movs	r3, #0
 8016fca:	3701      	adds	r7, #1
 8016fcc:	9305      	str	r3, [sp, #20]
 8016fce:	4619      	mov	r1, r3
 8016fd0:	250a      	movs	r5, #10
 8016fd2:	4638      	mov	r0, r7
 8016fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fd8:	3a30      	subs	r2, #48	; 0x30
 8016fda:	2a09      	cmp	r2, #9
 8016fdc:	d903      	bls.n	8016fe6 <_svfiprintf_r+0x196>
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d0c8      	beq.n	8016f74 <_svfiprintf_r+0x124>
 8016fe2:	9105      	str	r1, [sp, #20]
 8016fe4:	e7c6      	b.n	8016f74 <_svfiprintf_r+0x124>
 8016fe6:	fb05 2101 	mla	r1, r5, r1, r2
 8016fea:	2301      	movs	r3, #1
 8016fec:	4607      	mov	r7, r0
 8016fee:	e7f0      	b.n	8016fd2 <_svfiprintf_r+0x182>
 8016ff0:	ab03      	add	r3, sp, #12
 8016ff2:	9300      	str	r3, [sp, #0]
 8016ff4:	4622      	mov	r2, r4
 8016ff6:	4b11      	ldr	r3, [pc, #68]	; (801703c <_svfiprintf_r+0x1ec>)
 8016ff8:	a904      	add	r1, sp, #16
 8016ffa:	4640      	mov	r0, r8
 8016ffc:	f3af 8000 	nop.w
 8017000:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017004:	4681      	mov	r9, r0
 8017006:	d1d6      	bne.n	8016fb6 <_svfiprintf_r+0x166>
 8017008:	89a3      	ldrh	r3, [r4, #12]
 801700a:	065b      	lsls	r3, r3, #25
 801700c:	f53f af35 	bmi.w	8016e7a <_svfiprintf_r+0x2a>
 8017010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017012:	b01d      	add	sp, #116	; 0x74
 8017014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017018:	ab03      	add	r3, sp, #12
 801701a:	9300      	str	r3, [sp, #0]
 801701c:	4622      	mov	r2, r4
 801701e:	4b07      	ldr	r3, [pc, #28]	; (801703c <_svfiprintf_r+0x1ec>)
 8017020:	a904      	add	r1, sp, #16
 8017022:	4640      	mov	r0, r8
 8017024:	f000 f9c2 	bl	80173ac <_printf_i>
 8017028:	e7ea      	b.n	8017000 <_svfiprintf_r+0x1b0>
 801702a:	bf00      	nop
 801702c:	0802603e 	.word	0x0802603e
 8017030:	08026044 	.word	0x08026044
 8017034:	08026048 	.word	0x08026048
 8017038:	00000000 	.word	0x00000000
 801703c:	08016d9d 	.word	0x08016d9d

08017040 <__sfputc_r>:
 8017040:	6893      	ldr	r3, [r2, #8]
 8017042:	3b01      	subs	r3, #1
 8017044:	2b00      	cmp	r3, #0
 8017046:	b410      	push	{r4}
 8017048:	6093      	str	r3, [r2, #8]
 801704a:	da08      	bge.n	801705e <__sfputc_r+0x1e>
 801704c:	6994      	ldr	r4, [r2, #24]
 801704e:	42a3      	cmp	r3, r4
 8017050:	db01      	blt.n	8017056 <__sfputc_r+0x16>
 8017052:	290a      	cmp	r1, #10
 8017054:	d103      	bne.n	801705e <__sfputc_r+0x1e>
 8017056:	f85d 4b04 	ldr.w	r4, [sp], #4
 801705a:	f000 bb0d 	b.w	8017678 <__swbuf_r>
 801705e:	6813      	ldr	r3, [r2, #0]
 8017060:	1c58      	adds	r0, r3, #1
 8017062:	6010      	str	r0, [r2, #0]
 8017064:	7019      	strb	r1, [r3, #0]
 8017066:	4608      	mov	r0, r1
 8017068:	f85d 4b04 	ldr.w	r4, [sp], #4
 801706c:	4770      	bx	lr

0801706e <__sfputs_r>:
 801706e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017070:	4606      	mov	r6, r0
 8017072:	460f      	mov	r7, r1
 8017074:	4614      	mov	r4, r2
 8017076:	18d5      	adds	r5, r2, r3
 8017078:	42ac      	cmp	r4, r5
 801707a:	d101      	bne.n	8017080 <__sfputs_r+0x12>
 801707c:	2000      	movs	r0, #0
 801707e:	e007      	b.n	8017090 <__sfputs_r+0x22>
 8017080:	463a      	mov	r2, r7
 8017082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017086:	4630      	mov	r0, r6
 8017088:	f7ff ffda 	bl	8017040 <__sfputc_r>
 801708c:	1c43      	adds	r3, r0, #1
 801708e:	d1f3      	bne.n	8017078 <__sfputs_r+0xa>
 8017090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017094 <_vfiprintf_r>:
 8017094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017098:	460c      	mov	r4, r1
 801709a:	b09d      	sub	sp, #116	; 0x74
 801709c:	4617      	mov	r7, r2
 801709e:	461d      	mov	r5, r3
 80170a0:	4606      	mov	r6, r0
 80170a2:	b118      	cbz	r0, 80170ac <_vfiprintf_r+0x18>
 80170a4:	6983      	ldr	r3, [r0, #24]
 80170a6:	b90b      	cbnz	r3, 80170ac <_vfiprintf_r+0x18>
 80170a8:	f7ff fd1e 	bl	8016ae8 <__sinit>
 80170ac:	4b7c      	ldr	r3, [pc, #496]	; (80172a0 <_vfiprintf_r+0x20c>)
 80170ae:	429c      	cmp	r4, r3
 80170b0:	d158      	bne.n	8017164 <_vfiprintf_r+0xd0>
 80170b2:	6874      	ldr	r4, [r6, #4]
 80170b4:	89a3      	ldrh	r3, [r4, #12]
 80170b6:	0718      	lsls	r0, r3, #28
 80170b8:	d55e      	bpl.n	8017178 <_vfiprintf_r+0xe4>
 80170ba:	6923      	ldr	r3, [r4, #16]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d05b      	beq.n	8017178 <_vfiprintf_r+0xe4>
 80170c0:	2300      	movs	r3, #0
 80170c2:	9309      	str	r3, [sp, #36]	; 0x24
 80170c4:	2320      	movs	r3, #32
 80170c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170ca:	2330      	movs	r3, #48	; 0x30
 80170cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170d0:	9503      	str	r5, [sp, #12]
 80170d2:	f04f 0b01 	mov.w	fp, #1
 80170d6:	46b8      	mov	r8, r7
 80170d8:	4645      	mov	r5, r8
 80170da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170de:	b10b      	cbz	r3, 80170e4 <_vfiprintf_r+0x50>
 80170e0:	2b25      	cmp	r3, #37	; 0x25
 80170e2:	d154      	bne.n	801718e <_vfiprintf_r+0xfa>
 80170e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80170e8:	d00b      	beq.n	8017102 <_vfiprintf_r+0x6e>
 80170ea:	4653      	mov	r3, sl
 80170ec:	463a      	mov	r2, r7
 80170ee:	4621      	mov	r1, r4
 80170f0:	4630      	mov	r0, r6
 80170f2:	f7ff ffbc 	bl	801706e <__sfputs_r>
 80170f6:	3001      	adds	r0, #1
 80170f8:	f000 80c2 	beq.w	8017280 <_vfiprintf_r+0x1ec>
 80170fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170fe:	4453      	add	r3, sl
 8017100:	9309      	str	r3, [sp, #36]	; 0x24
 8017102:	f898 3000 	ldrb.w	r3, [r8]
 8017106:	2b00      	cmp	r3, #0
 8017108:	f000 80ba 	beq.w	8017280 <_vfiprintf_r+0x1ec>
 801710c:	2300      	movs	r3, #0
 801710e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017116:	9304      	str	r3, [sp, #16]
 8017118:	9307      	str	r3, [sp, #28]
 801711a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801711e:	931a      	str	r3, [sp, #104]	; 0x68
 8017120:	46a8      	mov	r8, r5
 8017122:	2205      	movs	r2, #5
 8017124:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017128:	485e      	ldr	r0, [pc, #376]	; (80172a4 <_vfiprintf_r+0x210>)
 801712a:	f7e9 f879 	bl	8000220 <memchr>
 801712e:	9b04      	ldr	r3, [sp, #16]
 8017130:	bb78      	cbnz	r0, 8017192 <_vfiprintf_r+0xfe>
 8017132:	06d9      	lsls	r1, r3, #27
 8017134:	bf44      	itt	mi
 8017136:	2220      	movmi	r2, #32
 8017138:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801713c:	071a      	lsls	r2, r3, #28
 801713e:	bf44      	itt	mi
 8017140:	222b      	movmi	r2, #43	; 0x2b
 8017142:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017146:	782a      	ldrb	r2, [r5, #0]
 8017148:	2a2a      	cmp	r2, #42	; 0x2a
 801714a:	d02a      	beq.n	80171a2 <_vfiprintf_r+0x10e>
 801714c:	9a07      	ldr	r2, [sp, #28]
 801714e:	46a8      	mov	r8, r5
 8017150:	2000      	movs	r0, #0
 8017152:	250a      	movs	r5, #10
 8017154:	4641      	mov	r1, r8
 8017156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801715a:	3b30      	subs	r3, #48	; 0x30
 801715c:	2b09      	cmp	r3, #9
 801715e:	d969      	bls.n	8017234 <_vfiprintf_r+0x1a0>
 8017160:	b360      	cbz	r0, 80171bc <_vfiprintf_r+0x128>
 8017162:	e024      	b.n	80171ae <_vfiprintf_r+0x11a>
 8017164:	4b50      	ldr	r3, [pc, #320]	; (80172a8 <_vfiprintf_r+0x214>)
 8017166:	429c      	cmp	r4, r3
 8017168:	d101      	bne.n	801716e <_vfiprintf_r+0xda>
 801716a:	68b4      	ldr	r4, [r6, #8]
 801716c:	e7a2      	b.n	80170b4 <_vfiprintf_r+0x20>
 801716e:	4b4f      	ldr	r3, [pc, #316]	; (80172ac <_vfiprintf_r+0x218>)
 8017170:	429c      	cmp	r4, r3
 8017172:	bf08      	it	eq
 8017174:	68f4      	ldreq	r4, [r6, #12]
 8017176:	e79d      	b.n	80170b4 <_vfiprintf_r+0x20>
 8017178:	4621      	mov	r1, r4
 801717a:	4630      	mov	r0, r6
 801717c:	f000 faee 	bl	801775c <__swsetup_r>
 8017180:	2800      	cmp	r0, #0
 8017182:	d09d      	beq.n	80170c0 <_vfiprintf_r+0x2c>
 8017184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017188:	b01d      	add	sp, #116	; 0x74
 801718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718e:	46a8      	mov	r8, r5
 8017190:	e7a2      	b.n	80170d8 <_vfiprintf_r+0x44>
 8017192:	4a44      	ldr	r2, [pc, #272]	; (80172a4 <_vfiprintf_r+0x210>)
 8017194:	1a80      	subs	r0, r0, r2
 8017196:	fa0b f000 	lsl.w	r0, fp, r0
 801719a:	4318      	orrs	r0, r3
 801719c:	9004      	str	r0, [sp, #16]
 801719e:	4645      	mov	r5, r8
 80171a0:	e7be      	b.n	8017120 <_vfiprintf_r+0x8c>
 80171a2:	9a03      	ldr	r2, [sp, #12]
 80171a4:	1d11      	adds	r1, r2, #4
 80171a6:	6812      	ldr	r2, [r2, #0]
 80171a8:	9103      	str	r1, [sp, #12]
 80171aa:	2a00      	cmp	r2, #0
 80171ac:	db01      	blt.n	80171b2 <_vfiprintf_r+0x11e>
 80171ae:	9207      	str	r2, [sp, #28]
 80171b0:	e004      	b.n	80171bc <_vfiprintf_r+0x128>
 80171b2:	4252      	negs	r2, r2
 80171b4:	f043 0302 	orr.w	r3, r3, #2
 80171b8:	9207      	str	r2, [sp, #28]
 80171ba:	9304      	str	r3, [sp, #16]
 80171bc:	f898 3000 	ldrb.w	r3, [r8]
 80171c0:	2b2e      	cmp	r3, #46	; 0x2e
 80171c2:	d10e      	bne.n	80171e2 <_vfiprintf_r+0x14e>
 80171c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80171c8:	2b2a      	cmp	r3, #42	; 0x2a
 80171ca:	d138      	bne.n	801723e <_vfiprintf_r+0x1aa>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	1d1a      	adds	r2, r3, #4
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	9203      	str	r2, [sp, #12]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	bfb8      	it	lt
 80171d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171dc:	f108 0802 	add.w	r8, r8, #2
 80171e0:	9305      	str	r3, [sp, #20]
 80171e2:	4d33      	ldr	r5, [pc, #204]	; (80172b0 <_vfiprintf_r+0x21c>)
 80171e4:	f898 1000 	ldrb.w	r1, [r8]
 80171e8:	2203      	movs	r2, #3
 80171ea:	4628      	mov	r0, r5
 80171ec:	f7e9 f818 	bl	8000220 <memchr>
 80171f0:	b140      	cbz	r0, 8017204 <_vfiprintf_r+0x170>
 80171f2:	2340      	movs	r3, #64	; 0x40
 80171f4:	1b40      	subs	r0, r0, r5
 80171f6:	fa03 f000 	lsl.w	r0, r3, r0
 80171fa:	9b04      	ldr	r3, [sp, #16]
 80171fc:	4303      	orrs	r3, r0
 80171fe:	f108 0801 	add.w	r8, r8, #1
 8017202:	9304      	str	r3, [sp, #16]
 8017204:	f898 1000 	ldrb.w	r1, [r8]
 8017208:	482a      	ldr	r0, [pc, #168]	; (80172b4 <_vfiprintf_r+0x220>)
 801720a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801720e:	2206      	movs	r2, #6
 8017210:	f108 0701 	add.w	r7, r8, #1
 8017214:	f7e9 f804 	bl	8000220 <memchr>
 8017218:	2800      	cmp	r0, #0
 801721a:	d037      	beq.n	801728c <_vfiprintf_r+0x1f8>
 801721c:	4b26      	ldr	r3, [pc, #152]	; (80172b8 <_vfiprintf_r+0x224>)
 801721e:	bb1b      	cbnz	r3, 8017268 <_vfiprintf_r+0x1d4>
 8017220:	9b03      	ldr	r3, [sp, #12]
 8017222:	3307      	adds	r3, #7
 8017224:	f023 0307 	bic.w	r3, r3, #7
 8017228:	3308      	adds	r3, #8
 801722a:	9303      	str	r3, [sp, #12]
 801722c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801722e:	444b      	add	r3, r9
 8017230:	9309      	str	r3, [sp, #36]	; 0x24
 8017232:	e750      	b.n	80170d6 <_vfiprintf_r+0x42>
 8017234:	fb05 3202 	mla	r2, r5, r2, r3
 8017238:	2001      	movs	r0, #1
 801723a:	4688      	mov	r8, r1
 801723c:	e78a      	b.n	8017154 <_vfiprintf_r+0xc0>
 801723e:	2300      	movs	r3, #0
 8017240:	f108 0801 	add.w	r8, r8, #1
 8017244:	9305      	str	r3, [sp, #20]
 8017246:	4619      	mov	r1, r3
 8017248:	250a      	movs	r5, #10
 801724a:	4640      	mov	r0, r8
 801724c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017250:	3a30      	subs	r2, #48	; 0x30
 8017252:	2a09      	cmp	r2, #9
 8017254:	d903      	bls.n	801725e <_vfiprintf_r+0x1ca>
 8017256:	2b00      	cmp	r3, #0
 8017258:	d0c3      	beq.n	80171e2 <_vfiprintf_r+0x14e>
 801725a:	9105      	str	r1, [sp, #20]
 801725c:	e7c1      	b.n	80171e2 <_vfiprintf_r+0x14e>
 801725e:	fb05 2101 	mla	r1, r5, r1, r2
 8017262:	2301      	movs	r3, #1
 8017264:	4680      	mov	r8, r0
 8017266:	e7f0      	b.n	801724a <_vfiprintf_r+0x1b6>
 8017268:	ab03      	add	r3, sp, #12
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	4622      	mov	r2, r4
 801726e:	4b13      	ldr	r3, [pc, #76]	; (80172bc <_vfiprintf_r+0x228>)
 8017270:	a904      	add	r1, sp, #16
 8017272:	4630      	mov	r0, r6
 8017274:	f3af 8000 	nop.w
 8017278:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801727c:	4681      	mov	r9, r0
 801727e:	d1d5      	bne.n	801722c <_vfiprintf_r+0x198>
 8017280:	89a3      	ldrh	r3, [r4, #12]
 8017282:	065b      	lsls	r3, r3, #25
 8017284:	f53f af7e 	bmi.w	8017184 <_vfiprintf_r+0xf0>
 8017288:	9809      	ldr	r0, [sp, #36]	; 0x24
 801728a:	e77d      	b.n	8017188 <_vfiprintf_r+0xf4>
 801728c:	ab03      	add	r3, sp, #12
 801728e:	9300      	str	r3, [sp, #0]
 8017290:	4622      	mov	r2, r4
 8017292:	4b0a      	ldr	r3, [pc, #40]	; (80172bc <_vfiprintf_r+0x228>)
 8017294:	a904      	add	r1, sp, #16
 8017296:	4630      	mov	r0, r6
 8017298:	f000 f888 	bl	80173ac <_printf_i>
 801729c:	e7ec      	b.n	8017278 <_vfiprintf_r+0x1e4>
 801729e:	bf00      	nop
 80172a0:	08025ff4 	.word	0x08025ff4
 80172a4:	0802603e 	.word	0x0802603e
 80172a8:	08026014 	.word	0x08026014
 80172ac:	08025fd4 	.word	0x08025fd4
 80172b0:	08026044 	.word	0x08026044
 80172b4:	08026048 	.word	0x08026048
 80172b8:	00000000 	.word	0x00000000
 80172bc:	0801706f 	.word	0x0801706f

080172c0 <_printf_common>:
 80172c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172c4:	4691      	mov	r9, r2
 80172c6:	461f      	mov	r7, r3
 80172c8:	688a      	ldr	r2, [r1, #8]
 80172ca:	690b      	ldr	r3, [r1, #16]
 80172cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80172d0:	4293      	cmp	r3, r2
 80172d2:	bfb8      	it	lt
 80172d4:	4613      	movlt	r3, r2
 80172d6:	f8c9 3000 	str.w	r3, [r9]
 80172da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80172de:	4606      	mov	r6, r0
 80172e0:	460c      	mov	r4, r1
 80172e2:	b112      	cbz	r2, 80172ea <_printf_common+0x2a>
 80172e4:	3301      	adds	r3, #1
 80172e6:	f8c9 3000 	str.w	r3, [r9]
 80172ea:	6823      	ldr	r3, [r4, #0]
 80172ec:	0699      	lsls	r1, r3, #26
 80172ee:	bf42      	ittt	mi
 80172f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80172f4:	3302      	addmi	r3, #2
 80172f6:	f8c9 3000 	strmi.w	r3, [r9]
 80172fa:	6825      	ldr	r5, [r4, #0]
 80172fc:	f015 0506 	ands.w	r5, r5, #6
 8017300:	d107      	bne.n	8017312 <_printf_common+0x52>
 8017302:	f104 0a19 	add.w	sl, r4, #25
 8017306:	68e3      	ldr	r3, [r4, #12]
 8017308:	f8d9 2000 	ldr.w	r2, [r9]
 801730c:	1a9b      	subs	r3, r3, r2
 801730e:	42ab      	cmp	r3, r5
 8017310:	dc28      	bgt.n	8017364 <_printf_common+0xa4>
 8017312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017316:	6822      	ldr	r2, [r4, #0]
 8017318:	3300      	adds	r3, #0
 801731a:	bf18      	it	ne
 801731c:	2301      	movne	r3, #1
 801731e:	0692      	lsls	r2, r2, #26
 8017320:	d42d      	bmi.n	801737e <_printf_common+0xbe>
 8017322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017326:	4639      	mov	r1, r7
 8017328:	4630      	mov	r0, r6
 801732a:	47c0      	blx	r8
 801732c:	3001      	adds	r0, #1
 801732e:	d020      	beq.n	8017372 <_printf_common+0xb2>
 8017330:	6823      	ldr	r3, [r4, #0]
 8017332:	68e5      	ldr	r5, [r4, #12]
 8017334:	f8d9 2000 	ldr.w	r2, [r9]
 8017338:	f003 0306 	and.w	r3, r3, #6
 801733c:	2b04      	cmp	r3, #4
 801733e:	bf08      	it	eq
 8017340:	1aad      	subeq	r5, r5, r2
 8017342:	68a3      	ldr	r3, [r4, #8]
 8017344:	6922      	ldr	r2, [r4, #16]
 8017346:	bf0c      	ite	eq
 8017348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801734c:	2500      	movne	r5, #0
 801734e:	4293      	cmp	r3, r2
 8017350:	bfc4      	itt	gt
 8017352:	1a9b      	subgt	r3, r3, r2
 8017354:	18ed      	addgt	r5, r5, r3
 8017356:	f04f 0900 	mov.w	r9, #0
 801735a:	341a      	adds	r4, #26
 801735c:	454d      	cmp	r5, r9
 801735e:	d11a      	bne.n	8017396 <_printf_common+0xd6>
 8017360:	2000      	movs	r0, #0
 8017362:	e008      	b.n	8017376 <_printf_common+0xb6>
 8017364:	2301      	movs	r3, #1
 8017366:	4652      	mov	r2, sl
 8017368:	4639      	mov	r1, r7
 801736a:	4630      	mov	r0, r6
 801736c:	47c0      	blx	r8
 801736e:	3001      	adds	r0, #1
 8017370:	d103      	bne.n	801737a <_printf_common+0xba>
 8017372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801737a:	3501      	adds	r5, #1
 801737c:	e7c3      	b.n	8017306 <_printf_common+0x46>
 801737e:	18e1      	adds	r1, r4, r3
 8017380:	1c5a      	adds	r2, r3, #1
 8017382:	2030      	movs	r0, #48	; 0x30
 8017384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017388:	4422      	add	r2, r4
 801738a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801738e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017392:	3302      	adds	r3, #2
 8017394:	e7c5      	b.n	8017322 <_printf_common+0x62>
 8017396:	2301      	movs	r3, #1
 8017398:	4622      	mov	r2, r4
 801739a:	4639      	mov	r1, r7
 801739c:	4630      	mov	r0, r6
 801739e:	47c0      	blx	r8
 80173a0:	3001      	adds	r0, #1
 80173a2:	d0e6      	beq.n	8017372 <_printf_common+0xb2>
 80173a4:	f109 0901 	add.w	r9, r9, #1
 80173a8:	e7d8      	b.n	801735c <_printf_common+0x9c>
	...

080173ac <_printf_i>:
 80173ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80173b4:	460c      	mov	r4, r1
 80173b6:	7e09      	ldrb	r1, [r1, #24]
 80173b8:	b085      	sub	sp, #20
 80173ba:	296e      	cmp	r1, #110	; 0x6e
 80173bc:	4617      	mov	r7, r2
 80173be:	4606      	mov	r6, r0
 80173c0:	4698      	mov	r8, r3
 80173c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173c4:	f000 80b3 	beq.w	801752e <_printf_i+0x182>
 80173c8:	d822      	bhi.n	8017410 <_printf_i+0x64>
 80173ca:	2963      	cmp	r1, #99	; 0x63
 80173cc:	d036      	beq.n	801743c <_printf_i+0x90>
 80173ce:	d80a      	bhi.n	80173e6 <_printf_i+0x3a>
 80173d0:	2900      	cmp	r1, #0
 80173d2:	f000 80b9 	beq.w	8017548 <_printf_i+0x19c>
 80173d6:	2958      	cmp	r1, #88	; 0x58
 80173d8:	f000 8083 	beq.w	80174e2 <_printf_i+0x136>
 80173dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80173e4:	e032      	b.n	801744c <_printf_i+0xa0>
 80173e6:	2964      	cmp	r1, #100	; 0x64
 80173e8:	d001      	beq.n	80173ee <_printf_i+0x42>
 80173ea:	2969      	cmp	r1, #105	; 0x69
 80173ec:	d1f6      	bne.n	80173dc <_printf_i+0x30>
 80173ee:	6820      	ldr	r0, [r4, #0]
 80173f0:	6813      	ldr	r3, [r2, #0]
 80173f2:	0605      	lsls	r5, r0, #24
 80173f4:	f103 0104 	add.w	r1, r3, #4
 80173f8:	d52a      	bpl.n	8017450 <_printf_i+0xa4>
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	6011      	str	r1, [r2, #0]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	da03      	bge.n	801740a <_printf_i+0x5e>
 8017402:	222d      	movs	r2, #45	; 0x2d
 8017404:	425b      	negs	r3, r3
 8017406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801740a:	486f      	ldr	r0, [pc, #444]	; (80175c8 <_printf_i+0x21c>)
 801740c:	220a      	movs	r2, #10
 801740e:	e039      	b.n	8017484 <_printf_i+0xd8>
 8017410:	2973      	cmp	r1, #115	; 0x73
 8017412:	f000 809d 	beq.w	8017550 <_printf_i+0x1a4>
 8017416:	d808      	bhi.n	801742a <_printf_i+0x7e>
 8017418:	296f      	cmp	r1, #111	; 0x6f
 801741a:	d020      	beq.n	801745e <_printf_i+0xb2>
 801741c:	2970      	cmp	r1, #112	; 0x70
 801741e:	d1dd      	bne.n	80173dc <_printf_i+0x30>
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	f043 0320 	orr.w	r3, r3, #32
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	e003      	b.n	8017432 <_printf_i+0x86>
 801742a:	2975      	cmp	r1, #117	; 0x75
 801742c:	d017      	beq.n	801745e <_printf_i+0xb2>
 801742e:	2978      	cmp	r1, #120	; 0x78
 8017430:	d1d4      	bne.n	80173dc <_printf_i+0x30>
 8017432:	2378      	movs	r3, #120	; 0x78
 8017434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017438:	4864      	ldr	r0, [pc, #400]	; (80175cc <_printf_i+0x220>)
 801743a:	e055      	b.n	80174e8 <_printf_i+0x13c>
 801743c:	6813      	ldr	r3, [r2, #0]
 801743e:	1d19      	adds	r1, r3, #4
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	6011      	str	r1, [r2, #0]
 8017444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801744c:	2301      	movs	r3, #1
 801744e:	e08c      	b.n	801756a <_printf_i+0x1be>
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	6011      	str	r1, [r2, #0]
 8017454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017458:	bf18      	it	ne
 801745a:	b21b      	sxthne	r3, r3
 801745c:	e7cf      	b.n	80173fe <_printf_i+0x52>
 801745e:	6813      	ldr	r3, [r2, #0]
 8017460:	6825      	ldr	r5, [r4, #0]
 8017462:	1d18      	adds	r0, r3, #4
 8017464:	6010      	str	r0, [r2, #0]
 8017466:	0628      	lsls	r0, r5, #24
 8017468:	d501      	bpl.n	801746e <_printf_i+0xc2>
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	e002      	b.n	8017474 <_printf_i+0xc8>
 801746e:	0668      	lsls	r0, r5, #25
 8017470:	d5fb      	bpl.n	801746a <_printf_i+0xbe>
 8017472:	881b      	ldrh	r3, [r3, #0]
 8017474:	4854      	ldr	r0, [pc, #336]	; (80175c8 <_printf_i+0x21c>)
 8017476:	296f      	cmp	r1, #111	; 0x6f
 8017478:	bf14      	ite	ne
 801747a:	220a      	movne	r2, #10
 801747c:	2208      	moveq	r2, #8
 801747e:	2100      	movs	r1, #0
 8017480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017484:	6865      	ldr	r5, [r4, #4]
 8017486:	60a5      	str	r5, [r4, #8]
 8017488:	2d00      	cmp	r5, #0
 801748a:	f2c0 8095 	blt.w	80175b8 <_printf_i+0x20c>
 801748e:	6821      	ldr	r1, [r4, #0]
 8017490:	f021 0104 	bic.w	r1, r1, #4
 8017494:	6021      	str	r1, [r4, #0]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d13d      	bne.n	8017516 <_printf_i+0x16a>
 801749a:	2d00      	cmp	r5, #0
 801749c:	f040 808e 	bne.w	80175bc <_printf_i+0x210>
 80174a0:	4665      	mov	r5, ip
 80174a2:	2a08      	cmp	r2, #8
 80174a4:	d10b      	bne.n	80174be <_printf_i+0x112>
 80174a6:	6823      	ldr	r3, [r4, #0]
 80174a8:	07db      	lsls	r3, r3, #31
 80174aa:	d508      	bpl.n	80174be <_printf_i+0x112>
 80174ac:	6923      	ldr	r3, [r4, #16]
 80174ae:	6862      	ldr	r2, [r4, #4]
 80174b0:	429a      	cmp	r2, r3
 80174b2:	bfde      	ittt	le
 80174b4:	2330      	movle	r3, #48	; 0x30
 80174b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80174ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80174be:	ebac 0305 	sub.w	r3, ip, r5
 80174c2:	6123      	str	r3, [r4, #16]
 80174c4:	f8cd 8000 	str.w	r8, [sp]
 80174c8:	463b      	mov	r3, r7
 80174ca:	aa03      	add	r2, sp, #12
 80174cc:	4621      	mov	r1, r4
 80174ce:	4630      	mov	r0, r6
 80174d0:	f7ff fef6 	bl	80172c0 <_printf_common>
 80174d4:	3001      	adds	r0, #1
 80174d6:	d14d      	bne.n	8017574 <_printf_i+0x1c8>
 80174d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174dc:	b005      	add	sp, #20
 80174de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174e2:	4839      	ldr	r0, [pc, #228]	; (80175c8 <_printf_i+0x21c>)
 80174e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80174e8:	6813      	ldr	r3, [r2, #0]
 80174ea:	6821      	ldr	r1, [r4, #0]
 80174ec:	1d1d      	adds	r5, r3, #4
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	6015      	str	r5, [r2, #0]
 80174f2:	060a      	lsls	r2, r1, #24
 80174f4:	d50b      	bpl.n	801750e <_printf_i+0x162>
 80174f6:	07ca      	lsls	r2, r1, #31
 80174f8:	bf44      	itt	mi
 80174fa:	f041 0120 	orrmi.w	r1, r1, #32
 80174fe:	6021      	strmi	r1, [r4, #0]
 8017500:	b91b      	cbnz	r3, 801750a <_printf_i+0x15e>
 8017502:	6822      	ldr	r2, [r4, #0]
 8017504:	f022 0220 	bic.w	r2, r2, #32
 8017508:	6022      	str	r2, [r4, #0]
 801750a:	2210      	movs	r2, #16
 801750c:	e7b7      	b.n	801747e <_printf_i+0xd2>
 801750e:	064d      	lsls	r5, r1, #25
 8017510:	bf48      	it	mi
 8017512:	b29b      	uxthmi	r3, r3
 8017514:	e7ef      	b.n	80174f6 <_printf_i+0x14a>
 8017516:	4665      	mov	r5, ip
 8017518:	fbb3 f1f2 	udiv	r1, r3, r2
 801751c:	fb02 3311 	mls	r3, r2, r1, r3
 8017520:	5cc3      	ldrb	r3, [r0, r3]
 8017522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017526:	460b      	mov	r3, r1
 8017528:	2900      	cmp	r1, #0
 801752a:	d1f5      	bne.n	8017518 <_printf_i+0x16c>
 801752c:	e7b9      	b.n	80174a2 <_printf_i+0xf6>
 801752e:	6813      	ldr	r3, [r2, #0]
 8017530:	6825      	ldr	r5, [r4, #0]
 8017532:	6961      	ldr	r1, [r4, #20]
 8017534:	1d18      	adds	r0, r3, #4
 8017536:	6010      	str	r0, [r2, #0]
 8017538:	0628      	lsls	r0, r5, #24
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	d501      	bpl.n	8017542 <_printf_i+0x196>
 801753e:	6019      	str	r1, [r3, #0]
 8017540:	e002      	b.n	8017548 <_printf_i+0x19c>
 8017542:	066a      	lsls	r2, r5, #25
 8017544:	d5fb      	bpl.n	801753e <_printf_i+0x192>
 8017546:	8019      	strh	r1, [r3, #0]
 8017548:	2300      	movs	r3, #0
 801754a:	6123      	str	r3, [r4, #16]
 801754c:	4665      	mov	r5, ip
 801754e:	e7b9      	b.n	80174c4 <_printf_i+0x118>
 8017550:	6813      	ldr	r3, [r2, #0]
 8017552:	1d19      	adds	r1, r3, #4
 8017554:	6011      	str	r1, [r2, #0]
 8017556:	681d      	ldr	r5, [r3, #0]
 8017558:	6862      	ldr	r2, [r4, #4]
 801755a:	2100      	movs	r1, #0
 801755c:	4628      	mov	r0, r5
 801755e:	f7e8 fe5f 	bl	8000220 <memchr>
 8017562:	b108      	cbz	r0, 8017568 <_printf_i+0x1bc>
 8017564:	1b40      	subs	r0, r0, r5
 8017566:	6060      	str	r0, [r4, #4]
 8017568:	6863      	ldr	r3, [r4, #4]
 801756a:	6123      	str	r3, [r4, #16]
 801756c:	2300      	movs	r3, #0
 801756e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017572:	e7a7      	b.n	80174c4 <_printf_i+0x118>
 8017574:	6923      	ldr	r3, [r4, #16]
 8017576:	462a      	mov	r2, r5
 8017578:	4639      	mov	r1, r7
 801757a:	4630      	mov	r0, r6
 801757c:	47c0      	blx	r8
 801757e:	3001      	adds	r0, #1
 8017580:	d0aa      	beq.n	80174d8 <_printf_i+0x12c>
 8017582:	6823      	ldr	r3, [r4, #0]
 8017584:	079b      	lsls	r3, r3, #30
 8017586:	d413      	bmi.n	80175b0 <_printf_i+0x204>
 8017588:	68e0      	ldr	r0, [r4, #12]
 801758a:	9b03      	ldr	r3, [sp, #12]
 801758c:	4298      	cmp	r0, r3
 801758e:	bfb8      	it	lt
 8017590:	4618      	movlt	r0, r3
 8017592:	e7a3      	b.n	80174dc <_printf_i+0x130>
 8017594:	2301      	movs	r3, #1
 8017596:	464a      	mov	r2, r9
 8017598:	4639      	mov	r1, r7
 801759a:	4630      	mov	r0, r6
 801759c:	47c0      	blx	r8
 801759e:	3001      	adds	r0, #1
 80175a0:	d09a      	beq.n	80174d8 <_printf_i+0x12c>
 80175a2:	3501      	adds	r5, #1
 80175a4:	68e3      	ldr	r3, [r4, #12]
 80175a6:	9a03      	ldr	r2, [sp, #12]
 80175a8:	1a9b      	subs	r3, r3, r2
 80175aa:	42ab      	cmp	r3, r5
 80175ac:	dcf2      	bgt.n	8017594 <_printf_i+0x1e8>
 80175ae:	e7eb      	b.n	8017588 <_printf_i+0x1dc>
 80175b0:	2500      	movs	r5, #0
 80175b2:	f104 0919 	add.w	r9, r4, #25
 80175b6:	e7f5      	b.n	80175a4 <_printf_i+0x1f8>
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1ac      	bne.n	8017516 <_printf_i+0x16a>
 80175bc:	7803      	ldrb	r3, [r0, #0]
 80175be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175c6:	e76c      	b.n	80174a2 <_printf_i+0xf6>
 80175c8:	0802604f 	.word	0x0802604f
 80175cc:	08026060 	.word	0x08026060

080175d0 <_sbrk_r>:
 80175d0:	b538      	push	{r3, r4, r5, lr}
 80175d2:	4c06      	ldr	r4, [pc, #24]	; (80175ec <_sbrk_r+0x1c>)
 80175d4:	2300      	movs	r3, #0
 80175d6:	4605      	mov	r5, r0
 80175d8:	4608      	mov	r0, r1
 80175da:	6023      	str	r3, [r4, #0]
 80175dc:	f7e9 fb84 	bl	8000ce8 <_sbrk>
 80175e0:	1c43      	adds	r3, r0, #1
 80175e2:	d102      	bne.n	80175ea <_sbrk_r+0x1a>
 80175e4:	6823      	ldr	r3, [r4, #0]
 80175e6:	b103      	cbz	r3, 80175ea <_sbrk_r+0x1a>
 80175e8:	602b      	str	r3, [r5, #0]
 80175ea:	bd38      	pop	{r3, r4, r5, pc}
 80175ec:	2000fb04 	.word	0x2000fb04

080175f0 <__sread>:
 80175f0:	b510      	push	{r4, lr}
 80175f2:	460c      	mov	r4, r1
 80175f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f8:	f000 fa96 	bl	8017b28 <_read_r>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	bfab      	itete	ge
 8017600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017602:	89a3      	ldrhlt	r3, [r4, #12]
 8017604:	181b      	addge	r3, r3, r0
 8017606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801760a:	bfac      	ite	ge
 801760c:	6563      	strge	r3, [r4, #84]	; 0x54
 801760e:	81a3      	strhlt	r3, [r4, #12]
 8017610:	bd10      	pop	{r4, pc}

08017612 <__swrite>:
 8017612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017616:	461f      	mov	r7, r3
 8017618:	898b      	ldrh	r3, [r1, #12]
 801761a:	05db      	lsls	r3, r3, #23
 801761c:	4605      	mov	r5, r0
 801761e:	460c      	mov	r4, r1
 8017620:	4616      	mov	r6, r2
 8017622:	d505      	bpl.n	8017630 <__swrite+0x1e>
 8017624:	2302      	movs	r3, #2
 8017626:	2200      	movs	r2, #0
 8017628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801762c:	f000 f9c4 	bl	80179b8 <_lseek_r>
 8017630:	89a3      	ldrh	r3, [r4, #12]
 8017632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801763a:	81a3      	strh	r3, [r4, #12]
 801763c:	4632      	mov	r2, r6
 801763e:	463b      	mov	r3, r7
 8017640:	4628      	mov	r0, r5
 8017642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017646:	f000 b877 	b.w	8017738 <_write_r>

0801764a <__sseek>:
 801764a:	b510      	push	{r4, lr}
 801764c:	460c      	mov	r4, r1
 801764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017652:	f000 f9b1 	bl	80179b8 <_lseek_r>
 8017656:	1c43      	adds	r3, r0, #1
 8017658:	89a3      	ldrh	r3, [r4, #12]
 801765a:	bf15      	itete	ne
 801765c:	6560      	strne	r0, [r4, #84]	; 0x54
 801765e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017666:	81a3      	strheq	r3, [r4, #12]
 8017668:	bf18      	it	ne
 801766a:	81a3      	strhne	r3, [r4, #12]
 801766c:	bd10      	pop	{r4, pc}

0801766e <__sclose>:
 801766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017672:	f000 b8e1 	b.w	8017838 <_close_r>
	...

08017678 <__swbuf_r>:
 8017678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801767a:	460e      	mov	r6, r1
 801767c:	4614      	mov	r4, r2
 801767e:	4605      	mov	r5, r0
 8017680:	b118      	cbz	r0, 801768a <__swbuf_r+0x12>
 8017682:	6983      	ldr	r3, [r0, #24]
 8017684:	b90b      	cbnz	r3, 801768a <__swbuf_r+0x12>
 8017686:	f7ff fa2f 	bl	8016ae8 <__sinit>
 801768a:	4b21      	ldr	r3, [pc, #132]	; (8017710 <__swbuf_r+0x98>)
 801768c:	429c      	cmp	r4, r3
 801768e:	d12a      	bne.n	80176e6 <__swbuf_r+0x6e>
 8017690:	686c      	ldr	r4, [r5, #4]
 8017692:	69a3      	ldr	r3, [r4, #24]
 8017694:	60a3      	str	r3, [r4, #8]
 8017696:	89a3      	ldrh	r3, [r4, #12]
 8017698:	071a      	lsls	r2, r3, #28
 801769a:	d52e      	bpl.n	80176fa <__swbuf_r+0x82>
 801769c:	6923      	ldr	r3, [r4, #16]
 801769e:	b363      	cbz	r3, 80176fa <__swbuf_r+0x82>
 80176a0:	6923      	ldr	r3, [r4, #16]
 80176a2:	6820      	ldr	r0, [r4, #0]
 80176a4:	1ac0      	subs	r0, r0, r3
 80176a6:	6963      	ldr	r3, [r4, #20]
 80176a8:	b2f6      	uxtb	r6, r6
 80176aa:	4283      	cmp	r3, r0
 80176ac:	4637      	mov	r7, r6
 80176ae:	dc04      	bgt.n	80176ba <__swbuf_r+0x42>
 80176b0:	4621      	mov	r1, r4
 80176b2:	4628      	mov	r0, r5
 80176b4:	f000 f956 	bl	8017964 <_fflush_r>
 80176b8:	bb28      	cbnz	r0, 8017706 <__swbuf_r+0x8e>
 80176ba:	68a3      	ldr	r3, [r4, #8]
 80176bc:	3b01      	subs	r3, #1
 80176be:	60a3      	str	r3, [r4, #8]
 80176c0:	6823      	ldr	r3, [r4, #0]
 80176c2:	1c5a      	adds	r2, r3, #1
 80176c4:	6022      	str	r2, [r4, #0]
 80176c6:	701e      	strb	r6, [r3, #0]
 80176c8:	6963      	ldr	r3, [r4, #20]
 80176ca:	3001      	adds	r0, #1
 80176cc:	4283      	cmp	r3, r0
 80176ce:	d004      	beq.n	80176da <__swbuf_r+0x62>
 80176d0:	89a3      	ldrh	r3, [r4, #12]
 80176d2:	07db      	lsls	r3, r3, #31
 80176d4:	d519      	bpl.n	801770a <__swbuf_r+0x92>
 80176d6:	2e0a      	cmp	r6, #10
 80176d8:	d117      	bne.n	801770a <__swbuf_r+0x92>
 80176da:	4621      	mov	r1, r4
 80176dc:	4628      	mov	r0, r5
 80176de:	f000 f941 	bl	8017964 <_fflush_r>
 80176e2:	b190      	cbz	r0, 801770a <__swbuf_r+0x92>
 80176e4:	e00f      	b.n	8017706 <__swbuf_r+0x8e>
 80176e6:	4b0b      	ldr	r3, [pc, #44]	; (8017714 <__swbuf_r+0x9c>)
 80176e8:	429c      	cmp	r4, r3
 80176ea:	d101      	bne.n	80176f0 <__swbuf_r+0x78>
 80176ec:	68ac      	ldr	r4, [r5, #8]
 80176ee:	e7d0      	b.n	8017692 <__swbuf_r+0x1a>
 80176f0:	4b09      	ldr	r3, [pc, #36]	; (8017718 <__swbuf_r+0xa0>)
 80176f2:	429c      	cmp	r4, r3
 80176f4:	bf08      	it	eq
 80176f6:	68ec      	ldreq	r4, [r5, #12]
 80176f8:	e7cb      	b.n	8017692 <__swbuf_r+0x1a>
 80176fa:	4621      	mov	r1, r4
 80176fc:	4628      	mov	r0, r5
 80176fe:	f000 f82d 	bl	801775c <__swsetup_r>
 8017702:	2800      	cmp	r0, #0
 8017704:	d0cc      	beq.n	80176a0 <__swbuf_r+0x28>
 8017706:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801770a:	4638      	mov	r0, r7
 801770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801770e:	bf00      	nop
 8017710:	08025ff4 	.word	0x08025ff4
 8017714:	08026014 	.word	0x08026014
 8017718:	08025fd4 	.word	0x08025fd4

0801771c <__ascii_wctomb>:
 801771c:	b149      	cbz	r1, 8017732 <__ascii_wctomb+0x16>
 801771e:	2aff      	cmp	r2, #255	; 0xff
 8017720:	bf85      	ittet	hi
 8017722:	238a      	movhi	r3, #138	; 0x8a
 8017724:	6003      	strhi	r3, [r0, #0]
 8017726:	700a      	strbls	r2, [r1, #0]
 8017728:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801772c:	bf98      	it	ls
 801772e:	2001      	movls	r0, #1
 8017730:	4770      	bx	lr
 8017732:	4608      	mov	r0, r1
 8017734:	4770      	bx	lr
	...

08017738 <_write_r>:
 8017738:	b538      	push	{r3, r4, r5, lr}
 801773a:	4c07      	ldr	r4, [pc, #28]	; (8017758 <_write_r+0x20>)
 801773c:	4605      	mov	r5, r0
 801773e:	4608      	mov	r0, r1
 8017740:	4611      	mov	r1, r2
 8017742:	2200      	movs	r2, #0
 8017744:	6022      	str	r2, [r4, #0]
 8017746:	461a      	mov	r2, r3
 8017748:	f7e9 fa7d 	bl	8000c46 <_write>
 801774c:	1c43      	adds	r3, r0, #1
 801774e:	d102      	bne.n	8017756 <_write_r+0x1e>
 8017750:	6823      	ldr	r3, [r4, #0]
 8017752:	b103      	cbz	r3, 8017756 <_write_r+0x1e>
 8017754:	602b      	str	r3, [r5, #0]
 8017756:	bd38      	pop	{r3, r4, r5, pc}
 8017758:	2000fb04 	.word	0x2000fb04

0801775c <__swsetup_r>:
 801775c:	4b32      	ldr	r3, [pc, #200]	; (8017828 <__swsetup_r+0xcc>)
 801775e:	b570      	push	{r4, r5, r6, lr}
 8017760:	681d      	ldr	r5, [r3, #0]
 8017762:	4606      	mov	r6, r0
 8017764:	460c      	mov	r4, r1
 8017766:	b125      	cbz	r5, 8017772 <__swsetup_r+0x16>
 8017768:	69ab      	ldr	r3, [r5, #24]
 801776a:	b913      	cbnz	r3, 8017772 <__swsetup_r+0x16>
 801776c:	4628      	mov	r0, r5
 801776e:	f7ff f9bb 	bl	8016ae8 <__sinit>
 8017772:	4b2e      	ldr	r3, [pc, #184]	; (801782c <__swsetup_r+0xd0>)
 8017774:	429c      	cmp	r4, r3
 8017776:	d10f      	bne.n	8017798 <__swsetup_r+0x3c>
 8017778:	686c      	ldr	r4, [r5, #4]
 801777a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801777e:	b29a      	uxth	r2, r3
 8017780:	0715      	lsls	r5, r2, #28
 8017782:	d42c      	bmi.n	80177de <__swsetup_r+0x82>
 8017784:	06d0      	lsls	r0, r2, #27
 8017786:	d411      	bmi.n	80177ac <__swsetup_r+0x50>
 8017788:	2209      	movs	r2, #9
 801778a:	6032      	str	r2, [r6, #0]
 801778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017790:	81a3      	strh	r3, [r4, #12]
 8017792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017796:	e03e      	b.n	8017816 <__swsetup_r+0xba>
 8017798:	4b25      	ldr	r3, [pc, #148]	; (8017830 <__swsetup_r+0xd4>)
 801779a:	429c      	cmp	r4, r3
 801779c:	d101      	bne.n	80177a2 <__swsetup_r+0x46>
 801779e:	68ac      	ldr	r4, [r5, #8]
 80177a0:	e7eb      	b.n	801777a <__swsetup_r+0x1e>
 80177a2:	4b24      	ldr	r3, [pc, #144]	; (8017834 <__swsetup_r+0xd8>)
 80177a4:	429c      	cmp	r4, r3
 80177a6:	bf08      	it	eq
 80177a8:	68ec      	ldreq	r4, [r5, #12]
 80177aa:	e7e6      	b.n	801777a <__swsetup_r+0x1e>
 80177ac:	0751      	lsls	r1, r2, #29
 80177ae:	d512      	bpl.n	80177d6 <__swsetup_r+0x7a>
 80177b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177b2:	b141      	cbz	r1, 80177c6 <__swsetup_r+0x6a>
 80177b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177b8:	4299      	cmp	r1, r3
 80177ba:	d002      	beq.n	80177c2 <__swsetup_r+0x66>
 80177bc:	4630      	mov	r0, r6
 80177be:	f7ff fa45 	bl	8016c4c <_free_r>
 80177c2:	2300      	movs	r3, #0
 80177c4:	6363      	str	r3, [r4, #52]	; 0x34
 80177c6:	89a3      	ldrh	r3, [r4, #12]
 80177c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80177cc:	81a3      	strh	r3, [r4, #12]
 80177ce:	2300      	movs	r3, #0
 80177d0:	6063      	str	r3, [r4, #4]
 80177d2:	6923      	ldr	r3, [r4, #16]
 80177d4:	6023      	str	r3, [r4, #0]
 80177d6:	89a3      	ldrh	r3, [r4, #12]
 80177d8:	f043 0308 	orr.w	r3, r3, #8
 80177dc:	81a3      	strh	r3, [r4, #12]
 80177de:	6923      	ldr	r3, [r4, #16]
 80177e0:	b94b      	cbnz	r3, 80177f6 <__swsetup_r+0x9a>
 80177e2:	89a3      	ldrh	r3, [r4, #12]
 80177e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80177e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177ec:	d003      	beq.n	80177f6 <__swsetup_r+0x9a>
 80177ee:	4621      	mov	r1, r4
 80177f0:	4630      	mov	r0, r6
 80177f2:	f000 f917 	bl	8017a24 <__smakebuf_r>
 80177f6:	89a2      	ldrh	r2, [r4, #12]
 80177f8:	f012 0301 	ands.w	r3, r2, #1
 80177fc:	d00c      	beq.n	8017818 <__swsetup_r+0xbc>
 80177fe:	2300      	movs	r3, #0
 8017800:	60a3      	str	r3, [r4, #8]
 8017802:	6963      	ldr	r3, [r4, #20]
 8017804:	425b      	negs	r3, r3
 8017806:	61a3      	str	r3, [r4, #24]
 8017808:	6923      	ldr	r3, [r4, #16]
 801780a:	b953      	cbnz	r3, 8017822 <__swsetup_r+0xc6>
 801780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017814:	d1ba      	bne.n	801778c <__swsetup_r+0x30>
 8017816:	bd70      	pop	{r4, r5, r6, pc}
 8017818:	0792      	lsls	r2, r2, #30
 801781a:	bf58      	it	pl
 801781c:	6963      	ldrpl	r3, [r4, #20]
 801781e:	60a3      	str	r3, [r4, #8]
 8017820:	e7f2      	b.n	8017808 <__swsetup_r+0xac>
 8017822:	2000      	movs	r0, #0
 8017824:	e7f7      	b.n	8017816 <__swsetup_r+0xba>
 8017826:	bf00      	nop
 8017828:	20000020 	.word	0x20000020
 801782c:	08025ff4 	.word	0x08025ff4
 8017830:	08026014 	.word	0x08026014
 8017834:	08025fd4 	.word	0x08025fd4

08017838 <_close_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4c06      	ldr	r4, [pc, #24]	; (8017854 <_close_r+0x1c>)
 801783c:	2300      	movs	r3, #0
 801783e:	4605      	mov	r5, r0
 8017840:	4608      	mov	r0, r1
 8017842:	6023      	str	r3, [r4, #0]
 8017844:	f7e9 fa1b 	bl	8000c7e <_close>
 8017848:	1c43      	adds	r3, r0, #1
 801784a:	d102      	bne.n	8017852 <_close_r+0x1a>
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	b103      	cbz	r3, 8017852 <_close_r+0x1a>
 8017850:	602b      	str	r3, [r5, #0]
 8017852:	bd38      	pop	{r3, r4, r5, pc}
 8017854:	2000fb04 	.word	0x2000fb04

08017858 <__sflush_r>:
 8017858:	898a      	ldrh	r2, [r1, #12]
 801785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785e:	4605      	mov	r5, r0
 8017860:	0710      	lsls	r0, r2, #28
 8017862:	460c      	mov	r4, r1
 8017864:	d458      	bmi.n	8017918 <__sflush_r+0xc0>
 8017866:	684b      	ldr	r3, [r1, #4]
 8017868:	2b00      	cmp	r3, #0
 801786a:	dc05      	bgt.n	8017878 <__sflush_r+0x20>
 801786c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801786e:	2b00      	cmp	r3, #0
 8017870:	dc02      	bgt.n	8017878 <__sflush_r+0x20>
 8017872:	2000      	movs	r0, #0
 8017874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801787a:	2e00      	cmp	r6, #0
 801787c:	d0f9      	beq.n	8017872 <__sflush_r+0x1a>
 801787e:	2300      	movs	r3, #0
 8017880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017884:	682f      	ldr	r7, [r5, #0]
 8017886:	6a21      	ldr	r1, [r4, #32]
 8017888:	602b      	str	r3, [r5, #0]
 801788a:	d032      	beq.n	80178f2 <__sflush_r+0x9a>
 801788c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801788e:	89a3      	ldrh	r3, [r4, #12]
 8017890:	075a      	lsls	r2, r3, #29
 8017892:	d505      	bpl.n	80178a0 <__sflush_r+0x48>
 8017894:	6863      	ldr	r3, [r4, #4]
 8017896:	1ac0      	subs	r0, r0, r3
 8017898:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801789a:	b10b      	cbz	r3, 80178a0 <__sflush_r+0x48>
 801789c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801789e:	1ac0      	subs	r0, r0, r3
 80178a0:	2300      	movs	r3, #0
 80178a2:	4602      	mov	r2, r0
 80178a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178a6:	6a21      	ldr	r1, [r4, #32]
 80178a8:	4628      	mov	r0, r5
 80178aa:	47b0      	blx	r6
 80178ac:	1c43      	adds	r3, r0, #1
 80178ae:	89a3      	ldrh	r3, [r4, #12]
 80178b0:	d106      	bne.n	80178c0 <__sflush_r+0x68>
 80178b2:	6829      	ldr	r1, [r5, #0]
 80178b4:	291d      	cmp	r1, #29
 80178b6:	d848      	bhi.n	801794a <__sflush_r+0xf2>
 80178b8:	4a29      	ldr	r2, [pc, #164]	; (8017960 <__sflush_r+0x108>)
 80178ba:	40ca      	lsrs	r2, r1
 80178bc:	07d6      	lsls	r6, r2, #31
 80178be:	d544      	bpl.n	801794a <__sflush_r+0xf2>
 80178c0:	2200      	movs	r2, #0
 80178c2:	6062      	str	r2, [r4, #4]
 80178c4:	04d9      	lsls	r1, r3, #19
 80178c6:	6922      	ldr	r2, [r4, #16]
 80178c8:	6022      	str	r2, [r4, #0]
 80178ca:	d504      	bpl.n	80178d6 <__sflush_r+0x7e>
 80178cc:	1c42      	adds	r2, r0, #1
 80178ce:	d101      	bne.n	80178d4 <__sflush_r+0x7c>
 80178d0:	682b      	ldr	r3, [r5, #0]
 80178d2:	b903      	cbnz	r3, 80178d6 <__sflush_r+0x7e>
 80178d4:	6560      	str	r0, [r4, #84]	; 0x54
 80178d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80178d8:	602f      	str	r7, [r5, #0]
 80178da:	2900      	cmp	r1, #0
 80178dc:	d0c9      	beq.n	8017872 <__sflush_r+0x1a>
 80178de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80178e2:	4299      	cmp	r1, r3
 80178e4:	d002      	beq.n	80178ec <__sflush_r+0x94>
 80178e6:	4628      	mov	r0, r5
 80178e8:	f7ff f9b0 	bl	8016c4c <_free_r>
 80178ec:	2000      	movs	r0, #0
 80178ee:	6360      	str	r0, [r4, #52]	; 0x34
 80178f0:	e7c0      	b.n	8017874 <__sflush_r+0x1c>
 80178f2:	2301      	movs	r3, #1
 80178f4:	4628      	mov	r0, r5
 80178f6:	47b0      	blx	r6
 80178f8:	1c41      	adds	r1, r0, #1
 80178fa:	d1c8      	bne.n	801788e <__sflush_r+0x36>
 80178fc:	682b      	ldr	r3, [r5, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d0c5      	beq.n	801788e <__sflush_r+0x36>
 8017902:	2b1d      	cmp	r3, #29
 8017904:	d001      	beq.n	801790a <__sflush_r+0xb2>
 8017906:	2b16      	cmp	r3, #22
 8017908:	d101      	bne.n	801790e <__sflush_r+0xb6>
 801790a:	602f      	str	r7, [r5, #0]
 801790c:	e7b1      	b.n	8017872 <__sflush_r+0x1a>
 801790e:	89a3      	ldrh	r3, [r4, #12]
 8017910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017914:	81a3      	strh	r3, [r4, #12]
 8017916:	e7ad      	b.n	8017874 <__sflush_r+0x1c>
 8017918:	690f      	ldr	r7, [r1, #16]
 801791a:	2f00      	cmp	r7, #0
 801791c:	d0a9      	beq.n	8017872 <__sflush_r+0x1a>
 801791e:	0793      	lsls	r3, r2, #30
 8017920:	680e      	ldr	r6, [r1, #0]
 8017922:	bf08      	it	eq
 8017924:	694b      	ldreq	r3, [r1, #20]
 8017926:	600f      	str	r7, [r1, #0]
 8017928:	bf18      	it	ne
 801792a:	2300      	movne	r3, #0
 801792c:	eba6 0807 	sub.w	r8, r6, r7
 8017930:	608b      	str	r3, [r1, #8]
 8017932:	f1b8 0f00 	cmp.w	r8, #0
 8017936:	dd9c      	ble.n	8017872 <__sflush_r+0x1a>
 8017938:	4643      	mov	r3, r8
 801793a:	463a      	mov	r2, r7
 801793c:	6a21      	ldr	r1, [r4, #32]
 801793e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017940:	4628      	mov	r0, r5
 8017942:	47b0      	blx	r6
 8017944:	2800      	cmp	r0, #0
 8017946:	dc06      	bgt.n	8017956 <__sflush_r+0xfe>
 8017948:	89a3      	ldrh	r3, [r4, #12]
 801794a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801794e:	81a3      	strh	r3, [r4, #12]
 8017950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017954:	e78e      	b.n	8017874 <__sflush_r+0x1c>
 8017956:	4407      	add	r7, r0
 8017958:	eba8 0800 	sub.w	r8, r8, r0
 801795c:	e7e9      	b.n	8017932 <__sflush_r+0xda>
 801795e:	bf00      	nop
 8017960:	20400001 	.word	0x20400001

08017964 <_fflush_r>:
 8017964:	b538      	push	{r3, r4, r5, lr}
 8017966:	690b      	ldr	r3, [r1, #16]
 8017968:	4605      	mov	r5, r0
 801796a:	460c      	mov	r4, r1
 801796c:	b1db      	cbz	r3, 80179a6 <_fflush_r+0x42>
 801796e:	b118      	cbz	r0, 8017978 <_fflush_r+0x14>
 8017970:	6983      	ldr	r3, [r0, #24]
 8017972:	b90b      	cbnz	r3, 8017978 <_fflush_r+0x14>
 8017974:	f7ff f8b8 	bl	8016ae8 <__sinit>
 8017978:	4b0c      	ldr	r3, [pc, #48]	; (80179ac <_fflush_r+0x48>)
 801797a:	429c      	cmp	r4, r3
 801797c:	d109      	bne.n	8017992 <_fflush_r+0x2e>
 801797e:	686c      	ldr	r4, [r5, #4]
 8017980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017984:	b17b      	cbz	r3, 80179a6 <_fflush_r+0x42>
 8017986:	4621      	mov	r1, r4
 8017988:	4628      	mov	r0, r5
 801798a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801798e:	f7ff bf63 	b.w	8017858 <__sflush_r>
 8017992:	4b07      	ldr	r3, [pc, #28]	; (80179b0 <_fflush_r+0x4c>)
 8017994:	429c      	cmp	r4, r3
 8017996:	d101      	bne.n	801799c <_fflush_r+0x38>
 8017998:	68ac      	ldr	r4, [r5, #8]
 801799a:	e7f1      	b.n	8017980 <_fflush_r+0x1c>
 801799c:	4b05      	ldr	r3, [pc, #20]	; (80179b4 <_fflush_r+0x50>)
 801799e:	429c      	cmp	r4, r3
 80179a0:	bf08      	it	eq
 80179a2:	68ec      	ldreq	r4, [r5, #12]
 80179a4:	e7ec      	b.n	8017980 <_fflush_r+0x1c>
 80179a6:	2000      	movs	r0, #0
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	bf00      	nop
 80179ac:	08025ff4 	.word	0x08025ff4
 80179b0:	08026014 	.word	0x08026014
 80179b4:	08025fd4 	.word	0x08025fd4

080179b8 <_lseek_r>:
 80179b8:	b538      	push	{r3, r4, r5, lr}
 80179ba:	4c07      	ldr	r4, [pc, #28]	; (80179d8 <_lseek_r+0x20>)
 80179bc:	4605      	mov	r5, r0
 80179be:	4608      	mov	r0, r1
 80179c0:	4611      	mov	r1, r2
 80179c2:	2200      	movs	r2, #0
 80179c4:	6022      	str	r2, [r4, #0]
 80179c6:	461a      	mov	r2, r3
 80179c8:	f7e9 f980 	bl	8000ccc <_lseek>
 80179cc:	1c43      	adds	r3, r0, #1
 80179ce:	d102      	bne.n	80179d6 <_lseek_r+0x1e>
 80179d0:	6823      	ldr	r3, [r4, #0]
 80179d2:	b103      	cbz	r3, 80179d6 <_lseek_r+0x1e>
 80179d4:	602b      	str	r3, [r5, #0]
 80179d6:	bd38      	pop	{r3, r4, r5, pc}
 80179d8:	2000fb04 	.word	0x2000fb04

080179dc <__swhatbuf_r>:
 80179dc:	b570      	push	{r4, r5, r6, lr}
 80179de:	460e      	mov	r6, r1
 80179e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179e4:	2900      	cmp	r1, #0
 80179e6:	b096      	sub	sp, #88	; 0x58
 80179e8:	4614      	mov	r4, r2
 80179ea:	461d      	mov	r5, r3
 80179ec:	da07      	bge.n	80179fe <__swhatbuf_r+0x22>
 80179ee:	2300      	movs	r3, #0
 80179f0:	602b      	str	r3, [r5, #0]
 80179f2:	89b3      	ldrh	r3, [r6, #12]
 80179f4:	061a      	lsls	r2, r3, #24
 80179f6:	d410      	bmi.n	8017a1a <__swhatbuf_r+0x3e>
 80179f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179fc:	e00e      	b.n	8017a1c <__swhatbuf_r+0x40>
 80179fe:	466a      	mov	r2, sp
 8017a00:	f000 f8a4 	bl	8017b4c <_fstat_r>
 8017a04:	2800      	cmp	r0, #0
 8017a06:	dbf2      	blt.n	80179ee <__swhatbuf_r+0x12>
 8017a08:	9a01      	ldr	r2, [sp, #4]
 8017a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017a12:	425a      	negs	r2, r3
 8017a14:	415a      	adcs	r2, r3
 8017a16:	602a      	str	r2, [r5, #0]
 8017a18:	e7ee      	b.n	80179f8 <__swhatbuf_r+0x1c>
 8017a1a:	2340      	movs	r3, #64	; 0x40
 8017a1c:	2000      	movs	r0, #0
 8017a1e:	6023      	str	r3, [r4, #0]
 8017a20:	b016      	add	sp, #88	; 0x58
 8017a22:	bd70      	pop	{r4, r5, r6, pc}

08017a24 <__smakebuf_r>:
 8017a24:	898b      	ldrh	r3, [r1, #12]
 8017a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a28:	079d      	lsls	r5, r3, #30
 8017a2a:	4606      	mov	r6, r0
 8017a2c:	460c      	mov	r4, r1
 8017a2e:	d507      	bpl.n	8017a40 <__smakebuf_r+0x1c>
 8017a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a34:	6023      	str	r3, [r4, #0]
 8017a36:	6123      	str	r3, [r4, #16]
 8017a38:	2301      	movs	r3, #1
 8017a3a:	6163      	str	r3, [r4, #20]
 8017a3c:	b002      	add	sp, #8
 8017a3e:	bd70      	pop	{r4, r5, r6, pc}
 8017a40:	ab01      	add	r3, sp, #4
 8017a42:	466a      	mov	r2, sp
 8017a44:	f7ff ffca 	bl	80179dc <__swhatbuf_r>
 8017a48:	9900      	ldr	r1, [sp, #0]
 8017a4a:	4605      	mov	r5, r0
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	f7ff f94b 	bl	8016ce8 <_malloc_r>
 8017a52:	b948      	cbnz	r0, 8017a68 <__smakebuf_r+0x44>
 8017a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a58:	059a      	lsls	r2, r3, #22
 8017a5a:	d4ef      	bmi.n	8017a3c <__smakebuf_r+0x18>
 8017a5c:	f023 0303 	bic.w	r3, r3, #3
 8017a60:	f043 0302 	orr.w	r3, r3, #2
 8017a64:	81a3      	strh	r3, [r4, #12]
 8017a66:	e7e3      	b.n	8017a30 <__smakebuf_r+0xc>
 8017a68:	4b0d      	ldr	r3, [pc, #52]	; (8017aa0 <__smakebuf_r+0x7c>)
 8017a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a6c:	89a3      	ldrh	r3, [r4, #12]
 8017a6e:	6020      	str	r0, [r4, #0]
 8017a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a74:	81a3      	strh	r3, [r4, #12]
 8017a76:	9b00      	ldr	r3, [sp, #0]
 8017a78:	6163      	str	r3, [r4, #20]
 8017a7a:	9b01      	ldr	r3, [sp, #4]
 8017a7c:	6120      	str	r0, [r4, #16]
 8017a7e:	b15b      	cbz	r3, 8017a98 <__smakebuf_r+0x74>
 8017a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a84:	4630      	mov	r0, r6
 8017a86:	f000 f873 	bl	8017b70 <_isatty_r>
 8017a8a:	b128      	cbz	r0, 8017a98 <__smakebuf_r+0x74>
 8017a8c:	89a3      	ldrh	r3, [r4, #12]
 8017a8e:	f023 0303 	bic.w	r3, r3, #3
 8017a92:	f043 0301 	orr.w	r3, r3, #1
 8017a96:	81a3      	strh	r3, [r4, #12]
 8017a98:	89a3      	ldrh	r3, [r4, #12]
 8017a9a:	431d      	orrs	r5, r3
 8017a9c:	81a5      	strh	r5, [r4, #12]
 8017a9e:	e7cd      	b.n	8017a3c <__smakebuf_r+0x18>
 8017aa0:	08016ab1 	.word	0x08016ab1

08017aa4 <memmove>:
 8017aa4:	4288      	cmp	r0, r1
 8017aa6:	b510      	push	{r4, lr}
 8017aa8:	eb01 0302 	add.w	r3, r1, r2
 8017aac:	d807      	bhi.n	8017abe <memmove+0x1a>
 8017aae:	1e42      	subs	r2, r0, #1
 8017ab0:	4299      	cmp	r1, r3
 8017ab2:	d00a      	beq.n	8017aca <memmove+0x26>
 8017ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ab8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017abc:	e7f8      	b.n	8017ab0 <memmove+0xc>
 8017abe:	4283      	cmp	r3, r0
 8017ac0:	d9f5      	bls.n	8017aae <memmove+0xa>
 8017ac2:	1881      	adds	r1, r0, r2
 8017ac4:	1ad2      	subs	r2, r2, r3
 8017ac6:	42d3      	cmn	r3, r2
 8017ac8:	d100      	bne.n	8017acc <memmove+0x28>
 8017aca:	bd10      	pop	{r4, pc}
 8017acc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017ad0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017ad4:	e7f7      	b.n	8017ac6 <memmove+0x22>

08017ad6 <__malloc_lock>:
 8017ad6:	4770      	bx	lr

08017ad8 <__malloc_unlock>:
 8017ad8:	4770      	bx	lr

08017ada <_realloc_r>:
 8017ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017adc:	4607      	mov	r7, r0
 8017ade:	4614      	mov	r4, r2
 8017ae0:	460e      	mov	r6, r1
 8017ae2:	b921      	cbnz	r1, 8017aee <_realloc_r+0x14>
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017aea:	f7ff b8fd 	b.w	8016ce8 <_malloc_r>
 8017aee:	b922      	cbnz	r2, 8017afa <_realloc_r+0x20>
 8017af0:	f7ff f8ac 	bl	8016c4c <_free_r>
 8017af4:	4625      	mov	r5, r4
 8017af6:	4628      	mov	r0, r5
 8017af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017afa:	f000 f849 	bl	8017b90 <_malloc_usable_size_r>
 8017afe:	42a0      	cmp	r0, r4
 8017b00:	d20f      	bcs.n	8017b22 <_realloc_r+0x48>
 8017b02:	4621      	mov	r1, r4
 8017b04:	4638      	mov	r0, r7
 8017b06:	f7ff f8ef 	bl	8016ce8 <_malloc_r>
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d0f2      	beq.n	8017af6 <_realloc_r+0x1c>
 8017b10:	4631      	mov	r1, r6
 8017b12:	4622      	mov	r2, r4
 8017b14:	f7fe febf 	bl	8016896 <memcpy>
 8017b18:	4631      	mov	r1, r6
 8017b1a:	4638      	mov	r0, r7
 8017b1c:	f7ff f896 	bl	8016c4c <_free_r>
 8017b20:	e7e9      	b.n	8017af6 <_realloc_r+0x1c>
 8017b22:	4635      	mov	r5, r6
 8017b24:	e7e7      	b.n	8017af6 <_realloc_r+0x1c>
	...

08017b28 <_read_r>:
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4c07      	ldr	r4, [pc, #28]	; (8017b48 <_read_r+0x20>)
 8017b2c:	4605      	mov	r5, r0
 8017b2e:	4608      	mov	r0, r1
 8017b30:	4611      	mov	r1, r2
 8017b32:	2200      	movs	r2, #0
 8017b34:	6022      	str	r2, [r4, #0]
 8017b36:	461a      	mov	r2, r3
 8017b38:	f7e9 f868 	bl	8000c0c <_read>
 8017b3c:	1c43      	adds	r3, r0, #1
 8017b3e:	d102      	bne.n	8017b46 <_read_r+0x1e>
 8017b40:	6823      	ldr	r3, [r4, #0]
 8017b42:	b103      	cbz	r3, 8017b46 <_read_r+0x1e>
 8017b44:	602b      	str	r3, [r5, #0]
 8017b46:	bd38      	pop	{r3, r4, r5, pc}
 8017b48:	2000fb04 	.word	0x2000fb04

08017b4c <_fstat_r>:
 8017b4c:	b538      	push	{r3, r4, r5, lr}
 8017b4e:	4c07      	ldr	r4, [pc, #28]	; (8017b6c <_fstat_r+0x20>)
 8017b50:	2300      	movs	r3, #0
 8017b52:	4605      	mov	r5, r0
 8017b54:	4608      	mov	r0, r1
 8017b56:	4611      	mov	r1, r2
 8017b58:	6023      	str	r3, [r4, #0]
 8017b5a:	f7e9 f89c 	bl	8000c96 <_fstat>
 8017b5e:	1c43      	adds	r3, r0, #1
 8017b60:	d102      	bne.n	8017b68 <_fstat_r+0x1c>
 8017b62:	6823      	ldr	r3, [r4, #0]
 8017b64:	b103      	cbz	r3, 8017b68 <_fstat_r+0x1c>
 8017b66:	602b      	str	r3, [r5, #0]
 8017b68:	bd38      	pop	{r3, r4, r5, pc}
 8017b6a:	bf00      	nop
 8017b6c:	2000fb04 	.word	0x2000fb04

08017b70 <_isatty_r>:
 8017b70:	b538      	push	{r3, r4, r5, lr}
 8017b72:	4c06      	ldr	r4, [pc, #24]	; (8017b8c <_isatty_r+0x1c>)
 8017b74:	2300      	movs	r3, #0
 8017b76:	4605      	mov	r5, r0
 8017b78:	4608      	mov	r0, r1
 8017b7a:	6023      	str	r3, [r4, #0]
 8017b7c:	f7e9 f89b 	bl	8000cb6 <_isatty>
 8017b80:	1c43      	adds	r3, r0, #1
 8017b82:	d102      	bne.n	8017b8a <_isatty_r+0x1a>
 8017b84:	6823      	ldr	r3, [r4, #0]
 8017b86:	b103      	cbz	r3, 8017b8a <_isatty_r+0x1a>
 8017b88:	602b      	str	r3, [r5, #0]
 8017b8a:	bd38      	pop	{r3, r4, r5, pc}
 8017b8c:	2000fb04 	.word	0x2000fb04

08017b90 <_malloc_usable_size_r>:
 8017b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b94:	1f18      	subs	r0, r3, #4
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	bfbc      	itt	lt
 8017b9a:	580b      	ldrlt	r3, [r1, r0]
 8017b9c:	18c0      	addlt	r0, r0, r3
 8017b9e:	4770      	bx	lr

08017ba0 <_init>:
 8017ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba2:	bf00      	nop
 8017ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ba6:	bc08      	pop	{r3}
 8017ba8:	469e      	mov	lr, r3
 8017baa:	4770      	bx	lr

08017bac <_fini>:
 8017bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bae:	bf00      	nop
 8017bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bb2:	bc08      	pop	{r3}
 8017bb4:	469e      	mov	lr, r3
 8017bb6:	4770      	bx	lr
